cscope 15 $HOME/loxilb/loxilb-ebpf/libbpf/src               0001968899
	@bpf.c

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<mem‹y.h
>

27 
	~<uni°d.h
>

28 
	~<asm/uni°d.h
>

29 
	~<î∫o.h
>

30 
	~<löux/bpf.h
>

31 
	~<löux/fûãr.h
>

32 
	~<löux/kî√l.h
>

33 
	~<limôs.h
>

34 
	~<sys/ªsour˚.h
>

35 
	~"bpf.h
"

36 
	~"libbpf.h
"

37 
	~"libbpf_öã∫Æ.h
"

43 #i‚de‡
__NR_bpf


44 #i‡
deföed
(
__i386__
)

45 
	#__NR_bpf
 357

	)

46 #ñi‡
deföed
(
__x86_64__
)

47 
	#__NR_bpf
 321

	)

48 #ñi‡
deföed
(
__Ørch64__
)

49 
	#__NR_bpf
 280

	)

50 #ñi‡
deföed
(
__•¨c__
)

51 
	#__NR_bpf
 349

	)

52 #ñi‡
deföed
(
__s390__
)

53 
	#__NR_bpf
 351

	)

54 #ñi‡
deföed
(
__¨c__
)

55 
	#__NR_bpf
 280

	)

56 #ñi‡
deföed
(
__mùs__
Ë&& deföed(
_ABIO32
)

57 
	#__NR_bpf
 4355

	)

58 #ñi‡
deföed
(
__mùs__
Ë&& deföed(
_ABIN32
)

59 
	#__NR_bpf
 6319

	)

60 #ñi‡
deföed
(
__mùs__
Ë&& deföed(
_ABI64
)

61 
	#__NR_bpf
 5315

	)

63 #îr‹ 
__NR_bpf
 
nŸ
 
deföed
. 
libbpf
 
d€s
ÇŸ 
suµ‹t
 
your
 
¨ch
.

67 
ölöe
 
__u64
 
	$±r_to_u64
(c⁄° *
±r
)

69  (
__u64
Ë(Ë
±r
;

70 
	}
}

72 
ölöe
 
	$sys_bpf
(
bpf_cmd
 
cmd
, 
bpf_©å
 *
©å
,

73 
size
)

75  
	`sysˇŒ
(
__NR_bpf
, 
cmd
, 
©å
, 
size
);

76 
	}
}

78 
ölöe
 
	$sys_bpf_fd
(
bpf_cmd
 
cmd
, 
bpf_©å
 *
©å
,

79 
size
)

81 
fd
;

83 
fd
 = 
	`sys_bpf
(
cmd
, 
©å
, 
size
);

84  
	`ísuª_good_fd
(
fd
);

85 
	}
}

87 
	#PROG_LOAD_ATTEMPTS
 5

	)

89 
ölöe
 
	$sys_bpf_¥og_lﬂd
(
bpf_©å
 *
©å
, 
size
, 
©ãm±s
)

91 
fd
;

94 
fd
 = 
	`sys_bpf_fd
(
BPF_PROG_LOAD
, 
©å
, 
size
);

95 } 
fd
 < 0 && 
î∫o
 =
EAGAIN
 && --
©ãm±s
 > 0);

97  
fd
;

98 
	}
}

108 
	$¥obe_memcg_accou¡
()

110 c⁄° 
size_t
 
¥og_lﬂd_©å_sz
 = 
	`off£to„nd
(
bpf_©å
, 
©èch_btf_obj_fd
);

111 
bpf_ö¢
 
ö¢s
[] = {

112 
	`BPF_EMIT_CALL
(
BPF_FUNC_ktime_gë_cﬂr£_ns
),

113 
	`BPF_EXIT_INSN
(),

115 
size_t
 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

116 
bpf_©å
 
©å
;

117 
¥og_fd
;

120 
	`mem£t
(&
©å
, 0, 
¥og_lﬂd_©å_sz
);

121 
©å
.
¥og_ty≥
 = 
BPF_PROG_TYPE_SOCKET_FILTER
;

122 
©å
.
ö¢s
 = 
	`±r_to_u64
(insns);

123 
©å
.
ö¢_˙t
 = insn_cnt;

124 
©å
.
li˚n£
 = 
	`±r_to_u64
("GPL");

126 
¥og_fd
 = 
	`sys_bpf_fd
(
BPF_PROG_LOAD
, &
©å
, 
¥og_lﬂd_©å_sz
);

127 i‡(
¥og_fd
 >= 0) {

128 
	`˛o£
(
¥og_fd
);

132 
	}
}

134 
boﬁ
 
	gmemlock_bum≥d
;

135 
æim_t
 
	gmemlock_æim
 = 
RLIM_INFINITY
;

137 
	$libbpf_£t_memlock_æim
(
size_t
 
memlock_byãs
)

139 i‡(
memlock_bum≥d
)

140  
	`libbpf_îr
(-
EBUSY
);

142 
memlock_æim
 = 
memlock_byãs
;

144 
	}
}

146 
	$bump_æimô_memlock
()

148 
æimô
 
æim
;

151 i‡(!(
libbpf_mode
 & 
LIBBPF_STRICT_AUTO_RLIMIT_MEMLOCK
))

155 i‡(
memlock_bum≥d
 || 
	`kî√l_suµ‹ts
(
NULL
, 
FEAT_MEMCG_ACCOUNT
))

158 
memlock_bum≥d
 = 
åue
;

161 i‡(
memlock_æim
 == 0)

164 
æim
.
æim_cur
 =Ñlim.
æim_max
 = 
memlock_æim
;

165 i‡(
	`£ålimô
(
RLIMIT_MEMLOCK
, &
æim
))

166  -
î∫o
;

169 
	}
}

171 
	$bpf_m≠_¸óã
(
bpf_m≠_ty≥
 
m≠_ty≥
,

172 c⁄° *
m≠_«me
,

173 
__u32
 
key_size
,

174 
__u32
 
vÆue_size
,

175 
__u32
 
max_íåõs
,

176 c⁄° 
bpf_m≠_¸óã_›ts
 *
›ts
)

178 c⁄° 
size_t
 
©å_sz
 = 
	`off£to„nd
(
bpf_©å
, 
m≠_exåa
);

179 
bpf_©å
 
©å
;

180 
fd
;

182 
	`bump_æimô_memlock
();

184 
	`mem£t
(&
©å
, 0, 
©å_sz
);

186 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_m≠_¸óã_›ts
))

187  
	`libbpf_îr
(-
EINVAL
);

189 
©å
.
m≠_ty≥
 = map_type;

190 i‡(
m≠_«me
)

191 
	`libbpf_°æ˝y
(
©å
.
m≠_«me
, map_name, (attr.map_name));

192 
©å
.
key_size
 = key_size;

193 
©å
.
vÆue_size
 = value_size;

194 
©å
.
max_íåõs
 = max_entries;

196 
©å
.
btf_fd
 = 
	`OPTS_GET
(
›ts
, btf_fd, 0);

197 
©å
.
btf_key_ty≥_id
 = 
	`OPTS_GET
(
›ts
, btf_key_type_id, 0);

198 
©å
.
btf_vÆue_ty≥_id
 = 
	`OPTS_GET
(
›ts
, btf_value_type_id, 0);

199 
©å
.
btf_vmlöux_vÆue_ty≥_id
 = 
	`OPTS_GET
(
›ts
, btf_vmlinux_value_type_id, 0);

201 
©å
.
ö√r_m≠_fd
 = 
	`OPTS_GET
(
›ts
, inner_map_fd, 0);

202 
©å
.
m≠_Êags
 = 
	`OPTS_GET
(
›ts
, map_flags, 0);

203 
©å
.
m≠_exåa
 = 
	`OPTS_GET
(
›ts
, map_extra, 0);

204 
©å
.
numa_node
 = 
	`OPTS_GET
(
›ts
,Çuma_node, 0);

205 
©å
.
m≠_ifödex
 = 
	`OPTS_GET
(
›ts
, map_ifindex, 0);

207 
fd
 = 
	`sys_bpf_fd
(
BPF_MAP_CREATE
, &
©å
, 
©å_sz
);

208  
	`libbpf_îr_î∫o
(
fd
);

209 
	}
}

211 
	$bpf_¸óã_m≠_x©å
(c⁄° 
bpf_¸óã_m≠_©å
 *
¸óã_©å
)

213 
	`LIBBPF_OPTS
(
bpf_m≠_¸óã_›ts
, 
p
);

215 
p
.
m≠_Êags
 = 
¸óã_©å
->map_flags;

216 
p
.
numa_node
 = 
¸óã_©å
->numa_node;

217 
p
.
btf_fd
 = 
¸óã_©å
->btf_fd;

218 
p
.
btf_key_ty≥_id
 = 
¸óã_©å
->btf_key_type_id;

219 
p
.
btf_vÆue_ty≥_id
 = 
¸óã_©å
->btf_value_type_id;

220 
p
.
m≠_ifödex
 = 
¸óã_©å
->map_ifindex;

221 i‡(
¸óã_©å
->
m≠_ty≥
 =
BPF_MAP_TYPE_STRUCT_OPS
)

222 
p
.
btf_vmlöux_vÆue_ty≥_id
 = 
¸óã_©å
->btf_vmlinux_value_type_id;

224 
p
.
ö√r_m≠_fd
 = 
¸óã_©å
->inner_map_fd;

226  
	`bpf_m≠_¸óã
(
¸óã_©å
->
m≠_ty≥
, cª©e_©å->
«me
,

227 
¸óã_©å
->
key_size
, cª©e_©å->
vÆue_size
,

228 
¸óã_©å
->
max_íåõs
, &
p
);

229 
	}
}

231 
	$bpf_¸óã_m≠_node
(
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
«me
,

232 
key_size
, 
vÆue_size
, 
max_íåõs
,

233 
__u32
 
m≠_Êags
, 
node
)

235 
	`LIBBPF_OPTS
(
bpf_m≠_¸óã_›ts
, 
›ts
);

237 
›ts
.
m≠_Êags
 = map_flags;

238 i‡(
node
 >= 0) {

239 
›ts
.
numa_node
 = 
node
;

240 
›ts
.
m≠_Êags
 |
BPF_F_NUMA_NODE
;

243  
	`bpf_m≠_¸óã
(
m≠_ty≥
, 
«me
, 
key_size
, 
vÆue_size
, 
max_íåõs
, &
›ts
);

244 
	}
}

246 
	$bpf_¸óã_m≠
(
bpf_m≠_ty≥
 
m≠_ty≥
, 
key_size
,

247 
vÆue_size
, 
max_íåõs
, 
__u32
 
m≠_Êags
)

249 
	`LIBBPF_OPTS
(
bpf_m≠_¸óã_›ts
, 
›ts
, .
m≠_Êags
 = map_flags);

251  
	`bpf_m≠_¸óã
(
m≠_ty≥
, 
NULL
, 
key_size
, 
vÆue_size
, 
max_íåõs
, &
›ts
);

252 
	}
}

254 
	$bpf_¸óã_m≠_«me
(
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
«me
,

255 
key_size
, 
vÆue_size
, 
max_íåõs
,

256 
__u32
 
m≠_Êags
)

258 
	`LIBBPF_OPTS
(
bpf_m≠_¸óã_›ts
, 
›ts
, .
m≠_Êags
 = map_flags);

260  
	`bpf_m≠_¸óã
(
m≠_ty≥
, 
«me
, 
key_size
, 
vÆue_size
, 
max_íåõs
, &
›ts
);

261 
	}
}

263 
	$bpf_¸óã_m≠_ö_m≠_node
(
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
«me
,

264 
key_size
, 
ö√r_m≠_fd
, 
max_íåõs
,

265 
__u32
 
m≠_Êags
, 
node
)

267 
	`LIBBPF_OPTS
(
bpf_m≠_¸óã_›ts
, 
›ts
);

269 
›ts
.
ö√r_m≠_fd
 = inner_map_fd;

270 
›ts
.
m≠_Êags
 = map_flags;

271 i‡(
node
 >= 0) {

272 
›ts
.
m≠_Êags
 |
BPF_F_NUMA_NODE
;

273 
›ts
.
numa_node
 = 
node
;

276  
	`bpf_m≠_¸óã
(
m≠_ty≥
, 
«me
, 
key_size
, 4, 
max_íåõs
, &
›ts
);

277 
	}
}

279 
	$bpf_¸óã_m≠_ö_m≠
(
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
«me
,

280 
key_size
, 
ö√r_m≠_fd
, 
max_íåõs
,

281 
__u32
 
m≠_Êags
)

283 
	`LIBBPF_OPTS
(
bpf_m≠_¸óã_›ts
, 
›ts
,

284 .
ö√r_m≠_fd
 = inner_map_fd,

285 .
m≠_Êags
 = map_flags,

288  
	`bpf_m≠_¸óã
(
m≠_ty≥
, 
«me
, 
key_size
, 4, 
max_íåõs
, &
›ts
);

289 
	}
}

292 
	$Æloc_zîo_èûög_öfo
(c⁄° *
‹ec‹d
, 
__u32
 
˙t
,

293 
__u32
 
a˘uÆ_ªc_size
, __u32 
ex≥˘ed_ªc_size
)

295 
__u64
 
öfo_Àn
 = (__u64)
a˘uÆ_ªc_size
 * 
˙t
;

296 *
öfo
, *
ƒec‹d
;

297 
i
;

299 
öfo
 = 
	`mÆloc
(
öfo_Àn
);

300 i‡(!
öfo
)

301  
NULL
;

304 
ƒec‹d
 = 
öfo
;

305 
i
 = 0; i < 
˙t
; i++) {

306 
	`mem˝y
(
ƒec‹d
, 
‹ec‹d
, 
ex≥˘ed_ªc_size
);

307 
	`mem£t
(
ƒec‹d
 + 
ex≥˘ed_ªc_size
, 0,

308 
a˘uÆ_ªc_size
 - 
ex≥˘ed_ªc_size
);

309 
‹ec‹d
 +
a˘uÆ_ªc_size
;

310 
ƒec‹d
 +
a˘uÆ_ªc_size
;

313  
öfo
;

314 
	}
}

316 
	$DEFAULT_VERSION
(
bpf_¥og_lﬂd_v0_6_0
, 
bpf_¥og_lﬂd
, 
LIBBPF_0
.6.0)

317 
	$bpf_¥og_lﬂd_v0_6_0
(
bpf_¥og_ty≥
 
¥og_ty≥
,

318 c⁄° *
¥og_«me
, c⁄° *
li˚n£
,

319 c⁄° 
bpf_ö¢
 *
ö¢s
, 
size_t
 
ö¢_˙t
,

320 c⁄° 
bpf_¥og_lﬂd_›ts
 *
›ts
)

322 *
föfo
 = 
NULL
, *
löfo
 = NULL;

323 c⁄° *
func_öfo
, *
löe_öfo
;

324 
__u32
 
log_size
, 
log_Àvñ
, 
©èch_¥og_fd
, 
©èch_btf_obj_fd
;

325 
__u32
 
func_öfo_ªc_size
, 
löe_öfo_ªc_size
;

326 
fd
, 
©ãm±s
;

327 
bpf_©å
 
©å
;

328 *
log_buf
;

330 
	`bump_æimô_memlock
();

332 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_¥og_lﬂd_›ts
))

333  
	`libbpf_îr
(-
EINVAL
);

335 
©ãm±s
 = 
	`OPTS_GET
(
›ts
,áttempts, 0);

336 i‡(
©ãm±s
 < 0)

337  
	`libbpf_îr
(-
EINVAL
);

338 i‡(
©ãm±s
 == 0)

339 
©ãm±s
 = 
PROG_LOAD_ATTEMPTS
;

341 
	`mem£t
(&
©å
, 0, (attr));

343 
©å
.
¥og_ty≥
 =Örog_type;

344 
©å
.
ex≥˘ed_©èch_ty≥
 = 
	`OPTS_GET
(
›ts
,Éxpected_attach_type, 0);

346 
©å
.
¥og_btf_fd
 = 
	`OPTS_GET
(
›ts
,Örog_btf_fd, 0);

347 
©å
.
¥og_Êags
 = 
	`OPTS_GET
(
›ts
,Örog_flags, 0);

348 
©å
.
¥og_ifödex
 = 
	`OPTS_GET
(
›ts
,Örog_ifindex, 0);

349 
©å
.
kîn_vîsi⁄
 = 
	`OPTS_GET
(
›ts
, kern_version, 0);

351 i‡(
¥og_«me
)

352 
	`libbpf_°æ˝y
(
©å
.
¥og_«me
,Örog_name, (attr.prog_name));

353 
©å
.
li˚n£
 = 
	`±r_to_u64
(license);

355 i‡(
ö¢_˙t
 > 
UINT_MAX
)

356  
	`libbpf_îr
(-
E2BIG
);

358 
©å
.
ö¢s
 = 
	`±r_to_u64
(insns);

359 
©å
.
ö¢_˙t
 = (
__u32
)insn_cnt;

361 
©èch_¥og_fd
 = 
	`OPTS_GET
(
›ts
,áttach_prog_fd, 0);

362 
©èch_btf_obj_fd
 = 
	`OPTS_GET
(
›ts
,áttach_btf_obj_fd, 0);

364 i‡(
©èch_¥og_fd
 && 
©èch_btf_obj_fd
)

365  
	`libbpf_îr
(-
EINVAL
);

367 
©å
.
©èch_btf_id
 = 
	`OPTS_GET
(
›ts
,áttach_btf_id, 0);

368 i‡(
©èch_¥og_fd
)

369 
©å
.
©èch_¥og_fd
 =áttach_prog_fd;

371 
©å
.
©èch_btf_obj_fd
 =áttach_btf_obj_fd;

373 
log_buf
 = 
	`OPTS_GET
(
›ts
,Üog_buf, 
NULL
);

374 
log_size
 = 
	`OPTS_GET
(
›ts
,Üog_size, 0);

375 
log_Àvñ
 = 
	`OPTS_GET
(
›ts
,Üog_level, 0);

377 i‡(!!
log_buf
 !!!
log_size
)

378  
	`libbpf_îr
(-
EINVAL
);

379 i‡(
log_Àvñ
 > (4 | 2 | 1))

380  
	`libbpf_îr
(-
EINVAL
);

381 i‡(
log_Àvñ
 && !
log_buf
)

382  
	`libbpf_îr
(-
EINVAL
);

384 
func_öfo_ªc_size
 = 
	`OPTS_GET
(
›ts
, func_info_rec_size, 0);

385 
func_öfo
 = 
	`OPTS_GET
(
›ts
, func_öfo, 
NULL
);

386 
©å
.
func_öfo_ªc_size
 = func_info_rec_size;

387 
©å
.
func_öfo
 = 
	`±r_to_u64
(func_info);

388 
©å
.
func_öfo_˙t
 = 
	`OPTS_GET
(
›ts
, func_info_cnt, 0);

390 
löe_öfo_ªc_size
 = 
	`OPTS_GET
(
›ts
,Üine_info_rec_size, 0);

391 
löe_öfo
 = 
	`OPTS_GET
(
›ts
,Üöe_öfo, 
NULL
);

392 
©å
.
löe_öfo_ªc_size
 =Üine_info_rec_size;

393 
©å
.
löe_öfo
 = 
	`±r_to_u64
(line_info);

394 
©å
.
löe_öfo_˙t
 = 
	`OPTS_GET
(
›ts
,Üine_info_cnt, 0);

396 
©å
.
fd_¨øy
 = 
	`±r_to_u64
(
	`OPTS_GET
(
›ts
, fd_¨øy, 
NULL
));

398 i‡(
log_Àvñ
) {

399 
©å
.
log_buf
 = 
	`±r_to_u64
(log_buf);

400 
©å
.
log_size
 =Üog_size;

401 
©å
.
log_Àvñ
 =Üog_level;

404 
fd
 = 
	`sys_bpf_¥og_lﬂd
(&
©å
, ◊âr), 
©ãm±s
);

405 i‡(
fd
 >= 0)

406  
fd
;

412 
î∫o
 =
E2BIG
 && (!
föfo
 || !
löfo
)) {

413 i‡(!
föfo
 && 
©å
.
func_öfo_˙t
 &&

414 
©å
.
func_öfo_ªc_size
 < func_info_rec_size) {

416 
föfo
 = 
	`Æloc_zîo_èûög_öfo
(
func_öfo
,

417 
©å
.
func_öfo_˙t
,

418 
func_öfo_ªc_size
,

419 
©å
.
func_öfo_ªc_size
);

420 i‡(!
föfo
) {

421 
î∫o
 = 
E2BIG
;

422 
d⁄e
;

425 
©å
.
func_öfo
 = 
	`±r_to_u64
(
föfo
);

426 
©å
.
func_öfo_ªc_size
 = func_info_rec_size;

427 } i‡(!
löfo
 && 
©å
.
löe_öfo_˙t
 &&

428 
©å
.
löe_öfo_ªc_size
 <Üine_info_rec_size) {

429 
löfo
 = 
	`Æloc_zîo_èûög_öfo
(
löe_öfo
,

430 
©å
.
löe_öfo_˙t
,

431 
löe_öfo_ªc_size
,

432 
©å
.
löe_öfo_ªc_size
);

433 i‡(!
löfo
) {

434 
î∫o
 = 
E2BIG
;

435 
d⁄e
;

438 
©å
.
löe_öfo
 = 
	`±r_to_u64
(
löfo
);

439 
©å
.
löe_öfo_ªc_size
 =Üine_info_rec_size;

444 
fd
 = 
	`sys_bpf_¥og_lﬂd
(&
©å
, ◊âr), 
©ãm±s
);

445 i‡(
fd
 >= 0)

446 
d⁄e
;

449 i‡(
log_Àvñ
 =0 && 
log_buf
) {

454 
©å
.
log_buf
 = 
	`±r_to_u64
(log_buf);

455 
©å
.
log_size
 =Üog_size;

456 
©å
.
log_Àvñ
 = 1;

458 
fd
 = 
	`sys_bpf_¥og_lﬂd
(&
©å
, ◊âr), 
©ãm±s
);

460 
d⁄e
:

462 
	`‰ì
(
föfo
);

463 
	`‰ì
(
löfo
);

464  
	`libbpf_îr_î∫o
(
fd
);

465 
	}
}

467 
__©åibuã__
((
Æüs
("bpf_load_program_xattr2")))

468 
bpf_lﬂd_¥ogøm_x©å
(c⁄° 
bpf_lﬂd_¥ogøm_©å
 *
lﬂd_©å
,

469 *
log_buf
, 
size_t
 
log_buf_sz
);

471 
	$bpf_lﬂd_¥ogøm_x©å2
(c⁄° 
bpf_lﬂd_¥ogøm_©å
 *
lﬂd_©å
,

472 *
log_buf
, 
size_t
 
log_buf_sz
)

474 
	`LIBBPF_OPTS
(
bpf_¥og_lﬂd_›ts
, 
p
);

476 i‡(!
lﬂd_©å
 || !
log_buf
 !!
log_buf_sz
)

477  
	`libbpf_îr
(-
EINVAL
);

479 
p
.
ex≥˘ed_©èch_ty≥
 = 
lﬂd_©å
->expected_attach_type;

480 
lﬂd_©å
->
¥og_ty≥
) {

481 
BPF_PROG_TYPE_STRUCT_OPS
:

482 
BPF_PROG_TYPE_LSM
:

483 
p
.
©èch_btf_id
 = 
lﬂd_©å
->attach_btf_id;

485 
BPF_PROG_TYPE_TRACING
:

486 
BPF_PROG_TYPE_EXT
:

487 
p
.
©èch_btf_id
 = 
lﬂd_©å
->attach_btf_id;

488 
p
.
©èch_¥og_fd
 = 
lﬂd_©å
->attach_prog_fd;

491 
p
.
¥og_ifödex
 = 
lﬂd_©å
->prog_ifindex;

492 
p
.
kîn_vîsi⁄
 = 
lﬂd_©å
->kern_version;

494 
p
.
log_Àvñ
 = 
lﬂd_©å
->log_level;

495 
p
.
log_buf
 =Üog_buf;

496 
p
.
log_size
 = 
log_buf_sz
;

497 
p
.
¥og_btf_fd
 = 
lﬂd_©å
->prog_btf_fd;

498 
p
.
func_öfo_ªc_size
 = 
lﬂd_©å
->func_info_rec_size;

499 
p
.
func_öfo_˙t
 = 
lﬂd_©å
->func_info_cnt;

500 
p
.
func_öfo
 = 
lﬂd_©å
->func_info;

501 
p
.
löe_öfo_ªc_size
 = 
lﬂd_©å
->line_info_rec_size;

502 
p
.
löe_öfo_˙t
 = 
lﬂd_©å
->line_info_cnt;

503 
p
.
löe_öfo
 = 
lﬂd_©å
->line_info;

504 
p
.
¥og_Êags
 = 
lﬂd_©å
->prog_flags;

506  
	`bpf_¥og_lﬂd
(
lﬂd_©å
->
¥og_ty≥
,Üﬂd_©å->
«me
,Üﬂd_©å->
li˚n£
,

507 
lﬂd_©å
->
ö¢s
,Üﬂd_©å->
ö¢s_˙t
, &
p
);

508 
	}
}

510 
	$bpf_lﬂd_¥ogøm
(
bpf_¥og_ty≥
 
ty≥
, c⁄° 
bpf_ö¢
 *
ö¢s
,

511 
size_t
 
ö¢s_˙t
, c⁄° *
li˚n£
,

512 
__u32
 
kîn_vîsi⁄
, *
log_buf
,

513 
size_t
 
log_buf_sz
)

515 
bpf_lﬂd_¥ogøm_©å
 
lﬂd_©å
;

517 
	`mem£t
(&
lﬂd_©å
, 0, (
bpf_lﬂd_¥ogøm_©å
));

518 
lﬂd_©å
.
¥og_ty≥
 = 
ty≥
;

519 
lﬂd_©å
.
ex≥˘ed_©èch_ty≥
 = 0;

520 
lﬂd_©å
.
«me
 = 
NULL
;

521 
lﬂd_©å
.
ö¢s
 = insns;

522 
lﬂd_©å
.
ö¢s_˙t
 = insns_cnt;

523 
lﬂd_©å
.
li˚n£
 =Üicense;

524 
lﬂd_©å
.
kîn_vîsi⁄
 = kern_version;

526  
	`bpf_lﬂd_¥ogøm_x©å2
(&
lﬂd_©å
, 
log_buf
, 
log_buf_sz
);

527 
	}
}

529 
	$bpf_vîify_¥ogøm
(
bpf_¥og_ty≥
 
ty≥
, c⁄° 
bpf_ö¢
 *
ö¢s
,

530 
size_t
 
ö¢s_˙t
, 
__u32
 
¥og_Êags
, c⁄° *
li˚n£
,

531 
__u32
 
kîn_vîsi⁄
, *
log_buf
, 
size_t
 
log_buf_sz
,

532 
log_Àvñ
)

534 
bpf_©å
 
©å
;

535 
fd
;

537 
	`bump_æimô_memlock
();

539 
	`mem£t
(&
©å
, 0, (attr));

540 
©å
.
¥og_ty≥
 = 
ty≥
;

541 
©å
.
ö¢_˙t
 = (
__u32
)
ö¢s_˙t
;

542 
©å
.
ö¢s
 = 
	`±r_to_u64
(insns);

543 
©å
.
li˚n£
 = 
	`±r_to_u64
(license);

544 
©å
.
log_buf
 = 
	`±r_to_u64
(log_buf);

545 
©å
.
log_size
 = 
log_buf_sz
;

546 
©å
.
log_Àvñ
 =Üog_level;

547 
log_buf
[0] = 0;

548 
©å
.
kîn_vîsi⁄
 = kern_version;

549 
©å
.
¥og_Êags
 =Örog_flags;

551 
fd
 = 
	`sys_bpf_¥og_lﬂd
(&
©å
, ◊âr), 
PROG_LOAD_ATTEMPTS
);

552  
	`libbpf_îr_î∫o
(
fd
);

553 
	}
}

555 
	$bpf_m≠_upd©e_ñem
(
fd
, c⁄° *
key
, c⁄° *
vÆue
,

556 
__u64
 
Êags
)

558 
bpf_©å
 
©å
;

559 
ªt
;

561 
	`mem£t
(&
©å
, 0, (attr));

562 
©å
.
m≠_fd
 = 
fd
;

563 
©å
.
key
 = 
	`±r_to_u64
(key);

564 
©å
.
vÆue
 = 
	`±r_to_u64
(value);

565 
©å
.
Êags
 = flags;

567 
ªt
 = 
	`sys_bpf
(
BPF_MAP_UPDATE_ELEM
, &
©å
, (attr));

568  
	`libbpf_îr_î∫o
(
ªt
);

569 
	}
}

571 
	$bpf_m≠_lookup_ñem
(
fd
, c⁄° *
key
, *
vÆue
)

573 
bpf_©å
 
©å
;

574 
ªt
;

576 
	`mem£t
(&
©å
, 0, (attr));

577 
©å
.
m≠_fd
 = 
fd
;

578 
©å
.
key
 = 
	`±r_to_u64
(key);

579 
©å
.
vÆue
 = 
	`±r_to_u64
(value);

581 
ªt
 = 
	`sys_bpf
(
BPF_MAP_LOOKUP_ELEM
, &
©å
, (attr));

582  
	`libbpf_îr_î∫o
(
ªt
);

583 
	}
}

585 
	$bpf_m≠_lookup_ñem_Êags
(
fd
, c⁄° *
key
, *
vÆue
, 
__u64
 
Êags
)

587 
bpf_©å
 
©å
;

588 
ªt
;

590 
	`mem£t
(&
©å
, 0, (attr));

591 
©å
.
m≠_fd
 = 
fd
;

592 
©å
.
key
 = 
	`±r_to_u64
(key);

593 
©å
.
vÆue
 = 
	`±r_to_u64
(value);

594 
©å
.
Êags
 = flags;

596 
ªt
 = 
	`sys_bpf
(
BPF_MAP_LOOKUP_ELEM
, &
©å
, (attr));

597  
	`libbpf_îr_î∫o
(
ªt
);

598 
	}
}

600 
	$bpf_m≠_lookup_™d_dñëe_ñem
(
fd
, c⁄° *
key
, *
vÆue
)

602 
bpf_©å
 
©å
;

603 
ªt
;

605 
	`mem£t
(&
©å
, 0, (attr));

606 
©å
.
m≠_fd
 = 
fd
;

607 
©å
.
key
 = 
	`±r_to_u64
(key);

608 
©å
.
vÆue
 = 
	`±r_to_u64
(value);

610 
ªt
 = 
	`sys_bpf
(
BPF_MAP_LOOKUP_AND_DELETE_ELEM
, &
©å
, (attr));

611  
	`libbpf_îr_î∫o
(
ªt
);

612 
	}
}

614 
	$bpf_m≠_lookup_™d_dñëe_ñem_Êags
(
fd
, c⁄° *
key
, *
vÆue
, 
__u64
 
Êags
)

616 
bpf_©å
 
©å
;

617 
ªt
;

619 
	`mem£t
(&
©å
, 0, (attr));

620 
©å
.
m≠_fd
 = 
fd
;

621 
©å
.
key
 = 
	`±r_to_u64
(key);

622 
©å
.
vÆue
 = 
	`±r_to_u64
(value);

623 
©å
.
Êags
 = flags;

625 
ªt
 = 
	`sys_bpf
(
BPF_MAP_LOOKUP_AND_DELETE_ELEM
, &
©å
, (attr));

626  
	`libbpf_îr_î∫o
(
ªt
);

627 
	}
}

629 
	$bpf_m≠_dñëe_ñem
(
fd
, c⁄° *
key
)

631 
bpf_©å
 
©å
;

632 
ªt
;

634 
	`mem£t
(&
©å
, 0, (attr));

635 
©å
.
m≠_fd
 = 
fd
;

636 
©å
.
key
 = 
	`±r_to_u64
(key);

638 
ªt
 = 
	`sys_bpf
(
BPF_MAP_DELETE_ELEM
, &
©å
, (attr));

639  
	`libbpf_îr_î∫o
(
ªt
);

640 
	}
}

642 
	$bpf_m≠_dñëe_ñem_Êags
(
fd
, c⁄° *
key
, 
__u64
 
Êags
)

644 
bpf_©å
 
©å
;

645 
ªt
;

647 
	`mem£t
(&
©å
, 0, (attr));

648 
©å
.
m≠_fd
 = 
fd
;

649 
©å
.
key
 = 
	`±r_to_u64
(key);

650 
©å
.
Êags
 = flags;

652 
ªt
 = 
	`sys_bpf
(
BPF_MAP_DELETE_ELEM
, &
©å
, (attr));

653  
	`libbpf_îr_î∫o
(
ªt
);

654 
	}
}

656 
	$bpf_m≠_gë_√xt_key
(
fd
, c⁄° *
key
, *
√xt_key
)

658 
bpf_©å
 
©å
;

659 
ªt
;

661 
	`mem£t
(&
©å
, 0, (attr));

662 
©å
.
m≠_fd
 = 
fd
;

663 
©å
.
key
 = 
	`±r_to_u64
(key);

664 
©å
.
√xt_key
 = 
	`±r_to_u64
(next_key);

666 
ªt
 = 
	`sys_bpf
(
BPF_MAP_GET_NEXT_KEY
, &
©å
, (attr));

667  
	`libbpf_îr_î∫o
(
ªt
);

668 
	}
}

670 
	$bpf_m≠_‰ìze
(
fd
)

672 
bpf_©å
 
©å
;

673 
ªt
;

675 
	`mem£t
(&
©å
, 0, (attr));

676 
©å
.
m≠_fd
 = 
fd
;

678 
ªt
 = 
	`sys_bpf
(
BPF_MAP_FREEZE
, &
©å
, (attr));

679  
	`libbpf_îr_î∫o
(
ªt
);

680 
	}
}

682 
	$bpf_m≠_b©ch_comm⁄
(
cmd
, 
fd
, *
ö_b©ch
,

683 *
out_b©ch
, *
keys
, *
vÆues
,

684 
__u32
 *
cou¡
,

685 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
)

687 
bpf_©å
 
©å
;

688 
ªt
;

690 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_m≠_b©ch_›ts
))

691  
	`libbpf_îr
(-
EINVAL
);

693 
	`mem£t
(&
©å
, 0, (attr));

694 
©å
.
b©ch
.
m≠_fd
 = 
fd
;

695 
©å
.
b©ch
.
ö_b©ch
 = 
	`±r_to_u64
(in_batch);

696 
©å
.
b©ch
.
out_b©ch
 = 
	`±r_to_u64
(out_batch);

697 
©å
.
b©ch
.
keys
 = 
	`±r_to_u64
(keys);

698 
©å
.
b©ch
.
vÆues
 = 
	`±r_to_u64
(values);

699 
©å
.
b©ch
.
cou¡
 = *count;

700 
©å
.
b©ch
.
ñem_Êags
 = 
	`OPTS_GET
(
›ts
,Élem_flags, 0);

701 
©å
.
b©ch
.
Êags
 = 
	`OPTS_GET
(
›ts
, flags, 0);

703 
ªt
 = 
	`sys_bpf
(
cmd
, &
©å
, (attr));

704 *
cou¡
 = 
©å
.
b©ch
.count;

706  
	`libbpf_îr_î∫o
(
ªt
);

707 
	}
}

709 
	$bpf_m≠_dñëe_b©ch
(
fd
, c⁄° *
keys
, 
__u32
 *
cou¡
,

710 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
)

712  
	`bpf_m≠_b©ch_comm⁄
(
BPF_MAP_DELETE_BATCH
, 
fd
, 
NULL
,

713 
NULL
, (*)
keys
, NULL, 
cou¡
, 
›ts
);

714 
	}
}

716 
	$bpf_m≠_lookup_b©ch
(
fd
, *
ö_b©ch
, *
out_b©ch
, *
keys
,

717 *
vÆues
, 
__u32
 *
cou¡
,

718 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
)

720  
	`bpf_m≠_b©ch_comm⁄
(
BPF_MAP_LOOKUP_BATCH
, 
fd
, 
ö_b©ch
,

721 
out_b©ch
, 
keys
, 
vÆues
, 
cou¡
, 
›ts
);

722 
	}
}

724 
	$bpf_m≠_lookup_™d_dñëe_b©ch
(
fd
, *
ö_b©ch
, *
out_b©ch
,

725 *
keys
, *
vÆues
, 
__u32
 *
cou¡
,

726 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
)

728  
	`bpf_m≠_b©ch_comm⁄
(
BPF_MAP_LOOKUP_AND_DELETE_BATCH
,

729 
fd
, 
ö_b©ch
, 
out_b©ch
, 
keys
, 
vÆues
,

730 
cou¡
, 
›ts
);

731 
	}
}

733 
	$bpf_m≠_upd©e_b©ch
(
fd
, c⁄° *
keys
, c⁄° *
vÆues
, 
__u32
 *
cou¡
,

734 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
)

736  
	`bpf_m≠_b©ch_comm⁄
(
BPF_MAP_UPDATE_BATCH
, 
fd
, 
NULL
, NULL,

737 (*)
keys
, (*)
vÆues
, 
cou¡
, 
›ts
);

738 
	}
}

740 
	$bpf_obj_pö
(
fd
, c⁄° *
∑th«me
)

742 
bpf_©å
 
©å
;

743 
ªt
;

745 
	`mem£t
(&
©å
, 0, (attr));

746 
©å
.
∑th«me
 = 
	`±r_to_u64
((*)pathname);

747 
©å
.
bpf_fd
 = 
fd
;

749 
ªt
 = 
	`sys_bpf
(
BPF_OBJ_PIN
, &
©å
, (attr));

750  
	`libbpf_îr_î∫o
(
ªt
);

751 
	}
}

753 
	$bpf_obj_gë
(c⁄° *
∑th«me
)

755 
bpf_©å
 
©å
;

756 
fd
;

758 
	`mem£t
(&
©å
, 0, (attr));

759 
©å
.
∑th«me
 = 
	`±r_to_u64
((*)pathname);

761 
fd
 = 
	`sys_bpf_fd
(
BPF_OBJ_GET
, &
©å
, (attr));

762  
	`libbpf_îr_î∫o
(
fd
);

763 
	}
}

765 
	$bpf_¥og_©èch
(
¥og_fd
, 
èrgë_fd
, 
bpf_©èch_ty≥
 
ty≥
,

766 
Êags
)

768 
	`DECLARE_LIBBPF_OPTS
(
bpf_¥og_©èch_›ts
, 
›ts
,

769 .
Êags
 = flags,

772  
	`bpf_¥og_©èch_›ts
(
¥og_fd
, 
èrgë_fd
, 
ty≥
, &
›ts
);

773 
	}
}

775 
	$bpf_¥og_©èch_›ts
(
¥og_fd
, 
èrgë_fd
,

776 
bpf_©èch_ty≥
 
ty≥
,

777 c⁄° 
bpf_¥og_©èch_›ts
 *
›ts
)

779 
bpf_©å
 
©å
;

780 
ªt
;

782 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_¥og_©èch_›ts
))

783  
	`libbpf_îr
(-
EINVAL
);

785 
	`mem£t
(&
©å
, 0, (attr));

786 
©å
.
èrgë_fd
 =Åarget_fd;

787 
©å
.
©èch_bpf_fd
 = 
¥og_fd
;

788 
©å
.
©èch_ty≥
 = 
ty≥
;

789 
©å
.
©èch_Êags
 = 
	`OPTS_GET
(
›ts
, 
Êags
, 0);

790 
©å
.
ª∂a˚_bpf_fd
 = 
	`OPTS_GET
(
›ts
, 
ª∂a˚_¥og_fd
, 0);

792 
ªt
 = 
	`sys_bpf
(
BPF_PROG_ATTACH
, &
©å
, (attr));

793  
	`libbpf_îr_î∫o
(
ªt
);

794 
	}
}

796 
__©åibuã__
((
Æüs
("bpf_prog_attach_opts")))

797 
bpf_¥og_©èch_x©å
(
¥og_fd
, 
èrgë_fd
,

798 
bpf_©èch_ty≥
 
ty≥
,

799 c⁄° 
bpf_¥og_©èch_›ts
 *
›ts
);

801 
	$bpf_¥og_dëach
(
èrgë_fd
, 
bpf_©èch_ty≥
 
ty≥
)

803 
bpf_©å
 
©å
;

804 
ªt
;

806 
	`mem£t
(&
©å
, 0, (attr));

807 
©å
.
èrgë_fd
 =Åarget_fd;

808 
©å
.
©èch_ty≥
 = 
ty≥
;

810 
ªt
 = 
	`sys_bpf
(
BPF_PROG_DETACH
, &
©å
, (attr));

811  
	`libbpf_îr_î∫o
(
ªt
);

812 
	}
}

814 
	$bpf_¥og_dëach2
(
¥og_fd
, 
èrgë_fd
, 
bpf_©èch_ty≥
 
ty≥
)

816 
bpf_©å
 
©å
;

817 
ªt
;

819 
	`mem£t
(&
©å
, 0, (attr));

820 
©å
.
èrgë_fd
 =Åarget_fd;

821 
©å
.
©èch_bpf_fd
 = 
¥og_fd
;

822 
©å
.
©èch_ty≥
 = 
ty≥
;

824 
ªt
 = 
	`sys_bpf
(
BPF_PROG_DETACH
, &
©å
, (attr));

825  
	`libbpf_îr_î∫o
(
ªt
);

826 
	}
}

828 
	$bpf_lök_¸óã
(
¥og_fd
, 
èrgë_fd
,

829 
bpf_©èch_ty≥
 
©èch_ty≥
,

830 c⁄° 
bpf_lök_¸óã_›ts
 *
›ts
)

832 
__u32
 
èrgë_btf_id
, 
ôî_öfo_Àn
;

833 
bpf_©å
 
©å
;

834 
fd
, 
îr
;

836 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_lök_¸óã_›ts
))

837  
	`libbpf_îr
(-
EINVAL
);

839 
ôî_öfo_Àn
 = 
	`OPTS_GET
(
›ts
, iter_info_len, 0);

840 
èrgë_btf_id
 = 
	`OPTS_GET
(
›ts
,Åarget_btf_id, 0);

843 i‡(
ôî_öfo_Àn
 || 
èrgë_btf_id
) {

844 i‡(
ôî_öfo_Àn
 && 
èrgë_btf_id
)

845  
	`libbpf_îr
(-
EINVAL
);

846 i‡(!
	`OPTS_ZEROED
(
›ts
, 
èrgë_btf_id
))

847  
	`libbpf_îr
(-
EINVAL
);

850 
	`mem£t
(&
©å
, 0, (attr));

851 
©å
.
lök_¸óã
.
¥og_fd
 =Örog_fd;

852 
©å
.
lök_¸óã
.
èrgë_fd
 =Åarget_fd;

853 
©å
.
lök_¸óã
.
©èch_ty≥
 =áttach_type;

854 
©å
.
lök_¸óã
.
Êags
 = 
	`OPTS_GET
(
›ts
, flags, 0);

856 i‡(
èrgë_btf_id
) {

857 
©å
.
lök_¸óã
.
èrgë_btf_id
 =Åarget_btf_id;

858 
¥o˚ed
;

861 
©èch_ty≥
) {

862 
BPF_TRACE_ITER
:

863 
©å
.
lök_¸óã
.
ôî_öfo
 = 
	`±r_to_u64
(
	`OPTS_GET
(
›ts
, iter_info, (*)0));

864 
©å
.
lök_¸óã
.
ôî_öfo_Àn
 = iter_info_len;

866 
BPF_PERF_EVENT
:

867 
©å
.
lök_¸óã
.
≥rf_evít
.
bpf_cookõ
 = 
	`OPTS_GET
(
›ts
,Öerf_event.bpf_cookie, 0);

868 i‡(!
	`OPTS_ZEROED
(
›ts
, 
≥rf_evít
))

869  
	`libbpf_îr
(-
EINVAL
);

871 
BPF_TRACE_KPROBE_MULTI
:

872 
©å
.
lök_¸óã
.
k¥obe_mu…i
.
Êags
 = 
	`OPTS_GET
(
›ts
, kprobe_multi.flags, 0);

873 
©å
.
lök_¸óã
.
k¥obe_mu…i
.
˙t
 = 
	`OPTS_GET
(
›ts
, kprobe_multi.cnt, 0);

874 
©å
.
lök_¸óã
.
k¥obe_mu…i
.
syms
 = 
	`±r_to_u64
(
	`OPTS_GET
(
›ts
, kprobe_multi.syms, 0));

875 
©å
.
lök_¸óã
.
k¥obe_mu…i
.
addrs
 = 
	`±r_to_u64
(
	`OPTS_GET
(
›ts
, kprobe_multi.addrs, 0));

876 
©å
.
lök_¸óã
.
k¥obe_mu…i
.
cookõs
 = 
	`±r_to_u64
(
	`OPTS_GET
(
›ts
, kprobe_multi.cookies, 0));

877 i‡(!
	`OPTS_ZEROED
(
›ts
, 
k¥obe_mu…i
))

878  
	`libbpf_îr
(-
EINVAL
);

880 
BPF_TRACE_FENTRY
:

881 
BPF_TRACE_FEXIT
:

882 
BPF_MODIFY_RETURN
:

883 
BPF_LSM_MAC
:

884 
©å
.
lök_¸óã
.
åacög
.
cookõ
 = 
	`OPTS_GET
(
›ts
,Åracing.cookie, 0);

885 i‡(!
	`OPTS_ZEROED
(
›ts
, 
åacög
))

886  
	`libbpf_îr
(-
EINVAL
);

889 i‡(!
	`OPTS_ZEROED
(
›ts
, 
Êags
))

890  
	`libbpf_îr
(-
EINVAL
);

893 
¥o˚ed
:

894 
fd
 = 
	`sys_bpf_fd
(
BPF_LINK_CREATE
, &
©å
, (attr));

895 i‡(
fd
 >= 0)

896  
fd
;

900 
îr
 = -
î∫o
;

901 i‡(
îr
 !-
EINVAL
)

902  
	`libbpf_îr
(
îr
);

907 i‡(
©å
.
lök_¸óã
.
èrgë_fd
 ||áâr.lök_¸óã.
èrgë_btf_id
)

908  
	`libbpf_îr
(
îr
);

909 i‡(!
	`OPTS_ZEROED
(
›ts
, 
sz
))

910  
	`libbpf_îr
(
îr
);

916 
©èch_ty≥
) {

917 
BPF_TRACE_RAW_TP
:

918 
BPF_LSM_MAC
:

919 
BPF_TRACE_FENTRY
:

920 
BPF_TRACE_FEXIT
:

921 
BPF_MODIFY_RETURN
:

922  
	`bpf_øw_åa˚poöt_›í
(
NULL
, 
¥og_fd
);

924  
	`libbpf_îr
(
îr
);

926 
	}
}

928 
	$bpf_lök_dëach
(
lök_fd
)

930 
bpf_©å
 
©å
;

931 
ªt
;

933 
	`mem£t
(&
©å
, 0, (attr));

934 
©å
.
lök_dëach
.
lök_fd
 =Üink_fd;

936 
ªt
 = 
	`sys_bpf
(
BPF_LINK_DETACH
, &
©å
, (attr));

937  
	`libbpf_îr_î∫o
(
ªt
);

938 
	}
}

940 
	$bpf_lök_upd©e
(
lök_fd
, 
√w_¥og_fd
,

941 c⁄° 
bpf_lök_upd©e_›ts
 *
›ts
)

943 
bpf_©å
 
©å
;

944 
ªt
;

946 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_lök_upd©e_›ts
))

947  
	`libbpf_îr
(-
EINVAL
);

949 
	`mem£t
(&
©å
, 0, (attr));

950 
©å
.
lök_upd©e
.
lök_fd
 =Üink_fd;

951 
©å
.
lök_upd©e
.
√w_¥og_fd
 =Çew_prog_fd;

952 
©å
.
lök_upd©e
.
Êags
 = 
	`OPTS_GET
(
›ts
, flags, 0);

953 
©å
.
lök_upd©e
.
ﬁd_¥og_fd
 = 
	`OPTS_GET
(
›ts
, old_prog_fd, 0);

955 
ªt
 = 
	`sys_bpf
(
BPF_LINK_UPDATE
, &
©å
, (attr));

956  
	`libbpf_îr_î∫o
(
ªt
);

957 
	}
}

959 
	$bpf_ôî_¸óã
(
lök_fd
)

961 
bpf_©å
 
©å
;

962 
fd
;

964 
	`mem£t
(&
©å
, 0, (attr));

965 
©å
.
ôî_¸óã
.
lök_fd
 =Üink_fd;

967 
fd
 = 
	`sys_bpf_fd
(
BPF_ITER_CREATE
, &
©å
, (attr));

968  
	`libbpf_îr_î∫o
(
fd
);

969 
	}
}

971 
	$bpf_¥og_quîy
(
èrgë_fd
, 
bpf_©èch_ty≥
 
ty≥
, 
__u32
 
quîy_Êags
,

972 
__u32
 *
©èch_Êags
, __u32 *
¥og_ids
, __u32 *
¥og_˙t
)

974 
bpf_©å
 
©å
;

975 
ªt
;

977 
	`mem£t
(&
©å
, 0, (attr));

978 
©å
.
quîy
.
èrgë_fd
 =Åarget_fd;

979 
©å
.
quîy
.
©èch_ty≥
 = 
ty≥
;

980 
©å
.
quîy
.
quîy_Êags
 = query_flags;

981 
©å
.
quîy
.
¥og_˙t
 = *prog_cnt;

982 
©å
.
quîy
.
¥og_ids
 = 
	`±r_to_u64
(prog_ids);

984 
ªt
 = 
	`sys_bpf
(
BPF_PROG_QUERY
, &
©å
, (attr));

986 i‡(
©èch_Êags
)

987 *
©èch_Êags
 = 
©å
.
quîy
.attach_flags;

988 *
¥og_˙t
 = 
©å
.
quîy
.prog_cnt;

990  
	`libbpf_îr_î∫o
(
ªt
);

991 
	}
}

993 
	$bpf_¥og_ã°_run
(
¥og_fd
, 
ª≥©
, *
d©a
, 
__u32
 
size
,

994 *
d©a_out
, 
__u32
 *
size_out
, __u32 *
ªtvÆ
,

995 
__u32
 *
duøti⁄
)

997 
bpf_©å
 
©å
;

998 
ªt
;

1000 
	`mem£t
(&
©å
, 0, (attr));

1001 
©å
.
ã°
.
¥og_fd
 =Örog_fd;

1002 
©å
.
ã°
.
d©a_ö
 = 
	`±r_to_u64
(
d©a
);

1003 
©å
.
ã°
.
d©a_out
 = 
	`±r_to_u64
(data_out);

1004 
©å
.
ã°
.
d©a_size_ö
 = 
size
;

1005 
©å
.
ã°
.
ª≥©
 =Ñepeat;

1007 
ªt
 = 
	`sys_bpf
(
BPF_PROG_TEST_RUN
, &
©å
, (attr));

1009 i‡(
size_out
)

1010 *
size_out
 = 
©å
.
ã°
.
d©a_size_out
;

1011 i‡(
ªtvÆ
)

1012 *
ªtvÆ
 = 
©å
.
ã°
.retval;

1013 i‡(
duøti⁄
)

1014 *
duøti⁄
 = 
©å
.
ã°
.duration;

1016  
	`libbpf_îr_î∫o
(
ªt
);

1017 
	}
}

1019 
	$bpf_¥og_ã°_run_x©å
(
bpf_¥og_ã°_run_©å
 *
ã°_©å
)

1021 
bpf_©å
 
©å
;

1022 
ªt
;

1024 i‡(!
ã°_©å
->
d©a_out
 &&Åe°_©å->
d©a_size_out
 > 0)

1025  
	`libbpf_îr
(-
EINVAL
);

1027 
	`mem£t
(&
©å
, 0, (attr));

1028 
©å
.
ã°
.
¥og_fd
 = 
ã°_©å
->prog_fd;

1029 
©å
.
ã°
.
d©a_ö
 = 
	`±r_to_u64
(
ã°_©å
->data_in);

1030 
©å
.
ã°
.
d©a_out
 = 
	`±r_to_u64
(
ã°_©å
->data_out);

1031 
©å
.
ã°
.
d©a_size_ö
 = 
ã°_©å
->data_size_in;

1032 
©å
.
ã°
.
d©a_size_out
 = 
ã°_©å
->data_size_out;

1033 
©å
.
ã°
.
˘x_ö
 = 
	`±r_to_u64
(
ã°_©å
->ctx_in);

1034 
©å
.
ã°
.
˘x_out
 = 
	`±r_to_u64
(
ã°_©å
->ctx_out);

1035 
©å
.
ã°
.
˘x_size_ö
 = 
ã°_©å
->ctx_size_in;

1036 
©å
.
ã°
.
˘x_size_out
 = 
ã°_©å
->ctx_size_out;

1037 
©å
.
ã°
.
ª≥©
 = 
ã°_©å
->repeat;

1039 
ªt
 = 
	`sys_bpf
(
BPF_PROG_TEST_RUN
, &
©å
, (attr));

1041 
ã°_©å
->
d©a_size_out
 = 
©å
.
ã°
.data_size_out;

1042 
ã°_©å
->
˘x_size_out
 = 
©å
.
ã°
.ctx_size_out;

1043 
ã°_©å
->
ªtvÆ
 = 
©å
.
ã°
.retval;

1044 
ã°_©å
->
duøti⁄
 = 
©å
.
ã°
.duration;

1046  
	`libbpf_îr_î∫o
(
ªt
);

1047 
	}
}

1049 
	$bpf_¥og_ã°_run_›ts
(
¥og_fd
, 
bpf_ã°_run_›ts
 *
›ts
)

1051 
bpf_©å
 
©å
;

1052 
ªt
;

1054 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_ã°_run_›ts
))

1055  
	`libbpf_îr
(-
EINVAL
);

1057 
	`mem£t
(&
©å
, 0, (attr));

1058 
©å
.
ã°
.
¥og_fd
 =Örog_fd;

1059 
©å
.
ã°
.
b©ch_size
 = 
	`OPTS_GET
(
›ts
, batch_size, 0);

1060 
©å
.
ã°
.
˝u
 = 
	`OPTS_GET
(
›ts
, cpu, 0);

1061 
©å
.
ã°
.
Êags
 = 
	`OPTS_GET
(
›ts
, flags, 0);

1062 
©å
.
ã°
.
ª≥©
 = 
	`OPTS_GET
(
›ts
,Ñepeat, 0);

1063 
©å
.
ã°
.
duøti⁄
 = 
	`OPTS_GET
(
›ts
, duration, 0);

1064 
©å
.
ã°
.
˘x_size_ö
 = 
	`OPTS_GET
(
›ts
, ctx_size_in, 0);

1065 
©å
.
ã°
.
˘x_size_out
 = 
	`OPTS_GET
(
›ts
, ctx_size_out, 0);

1066 
©å
.
ã°
.
d©a_size_ö
 = 
	`OPTS_GET
(
›ts
, data_size_in, 0);

1067 
©å
.
ã°
.
d©a_size_out
 = 
	`OPTS_GET
(
›ts
, data_size_out, 0);

1068 
©å
.
ã°
.
˘x_ö
 = 
	`±r_to_u64
(
	`OPTS_GET
(
›ts
, ctx_ö, 
NULL
));

1069 
©å
.
ã°
.
˘x_out
 = 
	`±r_to_u64
(
	`OPTS_GET
(
›ts
, ctx_out, 
NULL
));

1070 
©å
.
ã°
.
d©a_ö
 = 
	`±r_to_u64
(
	`OPTS_GET
(
›ts
, d©a_ö, 
NULL
));

1071 
©å
.
ã°
.
d©a_out
 = 
	`±r_to_u64
(
	`OPTS_GET
(
›ts
, d©a_out, 
NULL
));

1073 
ªt
 = 
	`sys_bpf
(
BPF_PROG_TEST_RUN
, &
©å
, (attr));

1075 
	`OPTS_SET
(
›ts
, 
d©a_size_out
, 
©å
.
ã°
.data_size_out);

1076 
	`OPTS_SET
(
›ts
, 
˘x_size_out
, 
©å
.
ã°
.ctx_size_out);

1077 
	`OPTS_SET
(
›ts
, 
duøti⁄
, 
©å
.
ã°
.duration);

1078 
	`OPTS_SET
(
›ts
, 
ªtvÆ
, 
©å
.
ã°
.retval);

1080  
	`libbpf_îr_î∫o
(
ªt
);

1081 
	}
}

1083 
	$bpf_obj_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
, 
cmd
)

1085 
bpf_©å
 
©å
;

1086 
îr
;

1088 
	`mem£t
(&
©å
, 0, (attr));

1089 
©å
.
°¨t_id
 = start_id;

1091 
îr
 = 
	`sys_bpf
(
cmd
, &
©å
, (attr));

1092 i‡(!
îr
)

1093 *
√xt_id
 = 
©å
.next_id;

1095  
	`libbpf_îr_î∫o
(
îr
);

1096 
	}
}

1098 
	$bpf_¥og_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
)

1100  
	`bpf_obj_gë_√xt_id
(
°¨t_id
, 
√xt_id
, 
BPF_PROG_GET_NEXT_ID
);

1101 
	}
}

1103 
	$bpf_m≠_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
)

1105  
	`bpf_obj_gë_√xt_id
(
°¨t_id
, 
√xt_id
, 
BPF_MAP_GET_NEXT_ID
);

1106 
	}
}

1108 
	$bpf_btf_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
)

1110  
	`bpf_obj_gë_√xt_id
(
°¨t_id
, 
√xt_id
, 
BPF_BTF_GET_NEXT_ID
);

1111 
	}
}

1113 
	$bpf_lök_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
)

1115  
	`bpf_obj_gë_√xt_id
(
°¨t_id
, 
√xt_id
, 
BPF_LINK_GET_NEXT_ID
);

1116 
	}
}

1118 
	$bpf_¥og_gë_fd_by_id
(
__u32
 
id
)

1120 
bpf_©å
 
©å
;

1121 
fd
;

1123 
	`mem£t
(&
©å
, 0, (attr));

1124 
©å
.
¥og_id
 = 
id
;

1126 
fd
 = 
	`sys_bpf_fd
(
BPF_PROG_GET_FD_BY_ID
, &
©å
, (attr));

1127  
	`libbpf_îr_î∫o
(
fd
);

1128 
	}
}

1130 
	$bpf_m≠_gë_fd_by_id
(
__u32
 
id
)

1132 
bpf_©å
 
©å
;

1133 
fd
;

1135 
	`mem£t
(&
©å
, 0, (attr));

1136 
©å
.
m≠_id
 = 
id
;

1138 
fd
 = 
	`sys_bpf_fd
(
BPF_MAP_GET_FD_BY_ID
, &
©å
, (attr));

1139  
	`libbpf_îr_î∫o
(
fd
);

1140 
	}
}

1142 
	$bpf_btf_gë_fd_by_id
(
__u32
 
id
)

1144 
bpf_©å
 
©å
;

1145 
fd
;

1147 
	`mem£t
(&
©å
, 0, (attr));

1148 
©å
.
btf_id
 = 
id
;

1150 
fd
 = 
	`sys_bpf_fd
(
BPF_BTF_GET_FD_BY_ID
, &
©å
, (attr));

1151  
	`libbpf_îr_î∫o
(
fd
);

1152 
	}
}

1154 
	$bpf_lök_gë_fd_by_id
(
__u32
 
id
)

1156 
bpf_©å
 
©å
;

1157 
fd
;

1159 
	`mem£t
(&
©å
, 0, (attr));

1160 
©å
.
lök_id
 = 
id
;

1162 
fd
 = 
	`sys_bpf_fd
(
BPF_LINK_GET_FD_BY_ID
, &
©å
, (attr));

1163  
	`libbpf_îr_î∫o
(
fd
);

1164 
	}
}

1166 
	$bpf_obj_gë_öfo_by_fd
(
bpf_fd
, *
öfo
, 
__u32
 *
öfo_Àn
)

1168 
bpf_©å
 
©å
;

1169 
îr
;

1171 
	`mem£t
(&
©å
, 0, (attr));

1172 
©å
.
öfo
.
bpf_fd
 = bpf_fd;

1173 
©å
.
öfo
.
öfo_Àn
 = *info_len;

1174 
©å
.
öfo
.öfÿ
	`±r_to_u64
(info);

1176 
îr
 = 
	`sys_bpf
(
BPF_OBJ_GET_INFO_BY_FD
, &
©å
, (attr));

1178 i‡(!
îr
)

1179 *
öfo_Àn
 = 
©å
.
öfo
.info_len;

1181  
	`libbpf_îr_î∫o
(
îr
);

1182 
	}
}

1184 
	$bpf_øw_åa˚poöt_›í
(c⁄° *
«me
, 
¥og_fd
)

1186 
bpf_©å
 
©å
;

1187 
fd
;

1189 
	`mem£t
(&
©å
, 0, (attr));

1190 
©å
.
øw_åa˚poöt
.
«me
 = 
	`±r_to_u64
(name);

1191 
©å
.
øw_åa˚poöt
.
¥og_fd
 =Örog_fd;

1193 
fd
 = 
	`sys_bpf_fd
(
BPF_RAW_TRACEPOINT_OPEN
, &
©å
, (attr));

1194  
	`libbpf_îr_î∫o
(
fd
);

1195 
	}
}

1197 
	$bpf_btf_lﬂd
(c⁄° *
btf_d©a
, 
size_t
 
btf_size
, c⁄° 
bpf_btf_lﬂd_›ts
 *
›ts
)

1199 c⁄° 
size_t
 
©å_sz
 = 
	`off£to„nd
(
bpf_©å
, 
btf_log_Àvñ
);

1200 
bpf_©å
 
©å
;

1201 *
log_buf
;

1202 
size_t
 
log_size
;

1203 
__u32
 
log_Àvñ
;

1204 
fd
;

1206 
	`bump_æimô_memlock
();

1208 
	`mem£t
(&
©å
, 0, 
©å_sz
);

1210 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_btf_lﬂd_›ts
))

1211  
	`libbpf_îr
(-
EINVAL
);

1213 
log_buf
 = 
	`OPTS_GET
(
›ts
,Üog_buf, 
NULL
);

1214 
log_size
 = 
	`OPTS_GET
(
›ts
,Üog_size, 0);

1215 
log_Àvñ
 = 
	`OPTS_GET
(
›ts
,Üog_level, 0);

1217 i‡(
log_size
 > 
UINT_MAX
)

1218  
	`libbpf_îr
(-
EINVAL
);

1219 i‡(
log_size
 && !
log_buf
)

1220  
	`libbpf_îr
(-
EINVAL
);

1222 
©å
.
btf
 = 
	`±r_to_u64
(
btf_d©a
);

1223 
©å
.
btf_size
 = btf_size;

1229 i‡(
log_Àvñ
) {

1230 
©å
.
btf_log_buf
 = 
	`±r_to_u64
(
log_buf
);

1231 
©å
.
btf_log_size
 = (
__u32
)
log_size
;

1232 
©å
.
btf_log_Àvñ
 = 
log_Àvñ
;

1235 
fd
 = 
	`sys_bpf_fd
(
BPF_BTF_LOAD
, &
©å
, 
©å_sz
);

1236 i‡(
fd
 < 0 && 
log_buf
 && 
log_Àvñ
 == 0) {

1237 
©å
.
btf_log_buf
 = 
	`±r_to_u64
(
log_buf
);

1238 
©å
.
btf_log_size
 = (
__u32
)
log_size
;

1239 
©å
.
btf_log_Àvñ
 = 1;

1240 
fd
 = 
	`sys_bpf_fd
(
BPF_BTF_LOAD
, &
©å
, 
©å_sz
);

1242  
	`libbpf_îr_î∫o
(
fd
);

1243 
	}
}

1245 
	$bpf_lﬂd_btf
(c⁄° *
btf
, 
__u32
 
btf_size
, *
log_buf
, __u32 
log_buf_size
, 
boﬁ
 
do_log
)

1247 
	`LIBBPF_OPTS
(
bpf_btf_lﬂd_›ts
, 
›ts
);

1248 
fd
;

1250 
ªåy
:

1251 i‡(
do_log
 && 
log_buf
 && 
log_buf_size
) {

1252 
›ts
.
log_buf
 =Üog_buf;

1253 
›ts
.
log_size
 = 
log_buf_size
;

1254 
›ts
.
log_Àvñ
 = 1;

1257 
fd
 = 
	`bpf_btf_lﬂd
(
btf
, 
btf_size
, &
›ts
);

1258 i‡(
fd
 < 0 && !
do_log
 && 
log_buf
 && 
log_buf_size
) {

1259 
do_log
 = 
åue
;

1260 
ªåy
;

1263  
	`libbpf_îr_î∫o
(
fd
);

1264 
	}
}

1266 
	$bpf_èsk_fd_quîy
(
pid
, 
fd
, 
__u32
 
Êags
, *
buf
, __u32 *
buf_Àn
,

1267 
__u32
 *
¥og_id
, __u32 *
fd_ty≥
, 
__u64
 *
¥obe_off£t
,

1268 
__u64
 *
¥obe_addr
)

1270 
bpf_©å
 
©å
 = {};

1271 
îr
;

1273 
©å
.
èsk_fd_quîy
.
pid
 =Öid;

1274 
©å
.
èsk_fd_quîy
.
fd
 = fd;

1275 
©å
.
èsk_fd_quîy
.
Êags
 = flags;

1276 
©å
.
èsk_fd_quîy
.
buf
 = 
	`±r_to_u64
(buf);

1277 
©å
.
èsk_fd_quîy
.
buf_Àn
 = *buf_len;

1279 
îr
 = 
	`sys_bpf
(
BPF_TASK_FD_QUERY
, &
©å
, (attr));

1281 *
buf_Àn
 = 
©å
.
èsk_fd_quîy
.buf_len;

1282 *
¥og_id
 = 
©å
.
èsk_fd_quîy
.prog_id;

1283 *
fd_ty≥
 = 
©å
.
èsk_fd_quîy
.fd_type;

1284 *
¥obe_off£t
 = 
©å
.
èsk_fd_quîy
.probe_offset;

1285 *
¥obe_addr
 = 
©å
.
èsk_fd_quîy
.probe_addr;

1287  
	`libbpf_îr_î∫o
(
îr
);

1288 
	}
}

1290 
	$bpf_íabÀ_°©s
(
bpf_°©s_ty≥
 
ty≥
)

1292 
bpf_©å
 
©å
;

1293 
fd
;

1295 
	`mem£t
(&
©å
, 0, (attr));

1296 
©å
.
íabÀ_°©s
.
ty≥
 =Åype;

1298 
fd
 = 
	`sys_bpf_fd
(
BPF_ENABLE_STATS
, &
©å
, (attr));

1299  
	`libbpf_îr_î∫o
(
fd
);

1300 
	}
}

1302 
	$bpf_¥og_böd_m≠
(
¥og_fd
, 
m≠_fd
,

1303 c⁄° 
bpf_¥og_böd_›ts
 *
›ts
)

1305 
bpf_©å
 
©å
;

1306 
ªt
;

1308 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_¥og_böd_›ts
))

1309  
	`libbpf_îr
(-
EINVAL
);

1311 
	`mem£t
(&
©å
, 0, (attr));

1312 
©å
.
¥og_böd_m≠
.
¥og_fd
 =Örog_fd;

1313 
©å
.
¥og_böd_m≠
.
m≠_fd
 = map_fd;

1314 
©å
.
¥og_böd_m≠
.
Êags
 = 
	`OPTS_GET
(
›ts
, flags, 0);

1316 
ªt
 = 
	`sys_bpf
(
BPF_PROG_BIND_MAP
, &
©å
, (attr));

1317  
	`libbpf_îr_î∫o
(
ªt
);

1318 
	}
}

	@bpf.h

23 #i‚de‡
__LIBBPF_BPF_H


24 
	#__LIBBPF_BPF_H


	)

26 
	~<löux/bpf.h
>

27 
	~<°dboﬁ.h
>

28 
	~<°ddef.h
>

29 
	~<°döt.h
>

31 
	~"libbpf_comm⁄.h
"

32 
	~"libbpf_Àgacy.h
"

34 #ifde‡
__˝lu•lus


38 
libbpf_£t_memlock_æim
(
size_t
 
memlock_byãs
);

40 
	sbpf_m≠_¸óã_›ts
 {

41 
size_t
 
sz
;

43 
__u32
 
btf_fd
;

44 
__u32
 
btf_key_ty≥_id
;

45 
__u32
 
btf_vÆue_ty≥_id
;

46 
__u32
 
btf_vmlöux_vÆue_ty≥_id
;

48 
__u32
 
ö√r_m≠_fd
;

49 
__u32
 
m≠_Êags
;

50 
__u64
 
m≠_exåa
;

52 
__u32
 
numa_node
;

53 
__u32
 
m≠_ifödex
;

55 
	#bpf_m≠_¸óã_›ts__œ°_fõld
 
m≠_ifödex


	)

57 
LIBBPF_API
 
bpf_m≠_¸óã
(
bpf_m≠_ty≥
 
m≠_ty≥
,

58 c⁄° *
m≠_«me
,

59 
__u32
 
key_size
,

60 
__u32
 
vÆue_size
,

61 
__u32
 
max_íåõs
,

62 c⁄° 
bpf_m≠_¸óã_›ts
 *
›ts
);

64 
	sbpf_¸óã_m≠_©å
 {

65 c⁄° *
«me
;

66 
bpf_m≠_ty≥
 
m≠_ty≥
;

67 
__u32
 
m≠_Êags
;

68 
__u32
 
key_size
;

69 
__u32
 
vÆue_size
;

70 
__u32
 
max_íåõs
;

71 
__u32
 
numa_node
;

72 
__u32
 
btf_fd
;

73 
__u32
 
btf_key_ty≥_id
;

74 
__u32
 
btf_vÆue_ty≥_id
;

75 
__u32
 
m≠_ifödex
;

77 
__u32
 
ö√r_m≠_fd
;

78 
__u32
 
btf_vmlöux_vÆue_ty≥_id
;

82 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

83 
LIBBPF_API
 
bpf_¸óã_m≠_x©å
(c⁄° 
bpf_¸óã_m≠_©å
 *
¸óã_©å
);

84 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

85 
LIBBPF_API
 
bpf_¸óã_m≠_node
(
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
«me
,

86 
key_size
, 
vÆue_size
,

87 
max_íåõs
, 
__u32
 
m≠_Êags
, 
node
);

88 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

89 
LIBBPF_API
 
bpf_¸óã_m≠_«me
(
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
«me
,

90 
key_size
, 
vÆue_size
,

91 
max_íåõs
, 
__u32
 
m≠_Êags
);

92 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

93 
LIBBPF_API
 
bpf_¸óã_m≠
(
bpf_m≠_ty≥
 
m≠_ty≥
, 
key_size
,

94 
vÆue_size
, 
max_íåõs
, 
__u32
 
m≠_Êags
);

95 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

96 
LIBBPF_API
 
bpf_¸óã_m≠_ö_m≠_node
(
bpf_m≠_ty≥
 
m≠_ty≥
,

97 c⁄° *
«me
, 
key_size
,

98 
ö√r_m≠_fd
, 
max_íåõs
,

99 
__u32
 
m≠_Êags
, 
node
);

100 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

101 
LIBBPF_API
 
bpf_¸óã_m≠_ö_m≠
(
bpf_m≠_ty≥
 
m≠_ty≥
,

102 c⁄° *
«me
, 
key_size
,

103 
ö√r_m≠_fd
, 
max_íåõs
,

104 
__u32
 
m≠_Êags
);

106 
	sbpf_¥og_lﬂd_›ts
 {

107 
size_t
 
sz
;

113 
©ãm±s
;

115 
bpf_©èch_ty≥
 
ex≥˘ed_©èch_ty≥
;

116 
__u32
 
¥og_btf_fd
;

117 
__u32
 
¥og_Êags
;

118 
__u32
 
¥og_ifödex
;

119 
__u32
 
kîn_vîsi⁄
;

121 
__u32
 
©èch_btf_id
;

122 
__u32
 
©èch_¥og_fd
;

123 
__u32
 
©èch_btf_obj_fd
;

125 c⁄° *
fd_¨øy
;

128 c⁄° *
func_öfo
;

129 
__u32
 
func_öfo_˙t
;

130 
__u32
 
func_öfo_ªc_size
;

133 c⁄° *
löe_öfo
;

134 
__u32
 
löe_öfo_˙t
;

135 
__u32
 
löe_öfo_ªc_size
;

138 
__u32
 
log_Àvñ
;

139 
__u32
 
log_size
;

140 *
log_buf
;

142 
	#bpf_¥og_lﬂd_›ts__œ°_fõld
 
log_buf


	)

144 
LIBBPF_API
 
bpf_¥og_lﬂd
(
bpf_¥og_ty≥
 
¥og_ty≥
,

145 c⁄° *
¥og_«me
, c⁄° *
li˚n£
,

146 c⁄° 
bpf_ö¢
 *
ö¢s
, 
size_t
 
ö¢_˙t
,

147 c⁄° 
bpf_¥og_lﬂd_›ts
 *
›ts
);

149 
LIBBPF_API
 
bpf_¥og_lﬂd_v0_6_0
(
bpf_¥og_ty≥
 
¥og_ty≥
,

150 c⁄° *
¥og_«me
, c⁄° *
li˚n£
,

151 c⁄° 
bpf_ö¢
 *
ö¢s
, 
size_t
 
ö¢_˙t
,

152 c⁄° 
bpf_¥og_lﬂd_›ts
 *
›ts
);

163 #i‚de‡
bpf_¥og_lﬂd


164 
	#bpf_¥og_lﬂd
(...Ë
	`___libbpf_ovîlﬂd
(
___bpf_¥og_lﬂd
, 
__VA_ARGS__
)

	)

165 
	#___bpf_¥og_lﬂd4
(
fûe
, 
ty≥
, 
pobj
, 
¥og_fd
) \

166 
	`bpf_¥og_lﬂd_dïªˇãd
(
fûe
, 
ty≥
, 
pobj
, 
¥og_fd
)

	)

167 
	#___bpf_¥og_lﬂd6
(
¥og_ty≥
, 
¥og_«me
, 
li˚n£
, 
ö¢s
, 
ö¢_˙t
, 
›ts
) \

168 
	`bpf_¥og_lﬂd
(
¥og_ty≥
, 
¥og_«me
, 
li˚n£
, 
ö¢s
, 
ö¢_˙t
, 
›ts
)

	)

171 
	sbpf_lﬂd_¥ogøm_©å
 {

172 
bpf_¥og_ty≥
 
¥og_ty≥
;

173 
bpf_©èch_ty≥
 
ex≥˘ed_©èch_ty≥
;

174 c⁄° *
«me
;

175 c⁄° 
bpf_ö¢
 *
ö¢s
;

176 
size_t
 
ö¢s_˙t
;

177 c⁄° *
li˚n£
;

179 
__u32
 
kîn_vîsi⁄
;

180 
__u32
 
©èch_¥og_fd
;

183 
__u32
 
¥og_ifödex
;

184 
__u32
 
©èch_btf_id
;

186 
__u32
 
¥og_btf_fd
;

187 
__u32
 
func_öfo_ªc_size
;

188 c⁄° *
func_öfo
;

189 
__u32
 
func_öfo_˙t
;

190 
__u32
 
löe_öfo_ªc_size
;

191 c⁄° *
löe_öfo
;

192 
__u32
 
löe_öfo_˙t
;

193 
__u32
 
log_Àvñ
;

194 
__u32
 
¥og_Êags
;

198 
	#MAPS_RELAX_COMPAT
 0x01

	)

201 
	#BPF_LOG_BUF_SIZE
 (
UINT32_MAX
 >> 8Ë

	)

203 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_prog_load() instead")

204 
LIBBPF_API
 
bpf_lﬂd_¥ogøm_x©å
(c⁄° 
bpf_lﬂd_¥ogøm_©å
 *
lﬂd_©å
,

205 *
log_buf
, 
size_t
 
log_buf_sz
);

206 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_prog_load() instead")

207 
LIBBPF_API
 
bpf_lﬂd_¥ogøm
(
bpf_¥og_ty≥
 
ty≥
,

208 c⁄° 
bpf_ö¢
 *
ö¢s
, 
size_t
 
ö¢s_˙t
,

209 c⁄° *
li˚n£
, 
__u32
 
kîn_vîsi⁄
,

210 *
log_buf
, 
size_t
 
log_buf_sz
);

211 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_prog_load() instead")

212 
LIBBPF_API
 
bpf_vîify_¥ogøm
(
bpf_¥og_ty≥
 
ty≥
,

213 c⁄° 
bpf_ö¢
 *
ö¢s
,

214 
size_t
 
ö¢s_˙t
, 
__u32
 
¥og_Êags
,

215 c⁄° *
li˚n£
, 
__u32
 
kîn_vîsi⁄
,

216 *
log_buf
, 
size_t
 
log_buf_sz
,

217 
log_Àvñ
);

219 
	sbpf_btf_lﬂd_›ts
 {

220 
size_t
 
sz
;

223 *
log_buf
;

224 
__u32
 
log_Àvñ
;

225 
__u32
 
log_size
;

227 
	#bpf_btf_lﬂd_›ts__œ°_fõld
 
log_size


	)

229 
LIBBPF_API
 
bpf_btf_lﬂd
(c⁄° *
btf_d©a
, 
size_t
 
btf_size
,

230 c⁄° 
bpf_btf_lﬂd_›ts
 *
›ts
);

232 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_btf_load() instead")

233 
LIBBPF_API
 
bpf_lﬂd_btf
(c⁄° *
btf
, 
__u32
 
btf_size
, *
log_buf
,

234 
__u32
 
log_buf_size
, 
boﬁ
 
do_log
);

236 
LIBBPF_API
 
bpf_m≠_upd©e_ñem
(
fd
, c⁄° *
key
, c⁄° *
vÆue
,

237 
__u64
 
Êags
);

239 
LIBBPF_API
 
bpf_m≠_lookup_ñem
(
fd
, c⁄° *
key
, *
vÆue
);

240 
LIBBPF_API
 
bpf_m≠_lookup_ñem_Êags
(
fd
, c⁄° *
key
, *
vÆue
,

241 
__u64
 
Êags
);

242 
LIBBPF_API
 
bpf_m≠_lookup_™d_dñëe_ñem
(
fd
, c⁄° *
key
,

243 *
vÆue
);

244 
LIBBPF_API
 
bpf_m≠_lookup_™d_dñëe_ñem_Êags
(
fd
, c⁄° *
key
,

245 *
vÆue
, 
__u64
 
Êags
);

246 
LIBBPF_API
 
bpf_m≠_dñëe_ñem
(
fd
, c⁄° *
key
);

247 
LIBBPF_API
 
bpf_m≠_dñëe_ñem_Êags
(
fd
, c⁄° *
key
, 
__u64
 
Êags
);

248 
LIBBPF_API
 
bpf_m≠_gë_√xt_key
(
fd
, c⁄° *
key
, *
√xt_key
);

249 
LIBBPF_API
 
bpf_m≠_‰ìze
(
fd
);

251 
	sbpf_m≠_b©ch_›ts
 {

252 
size_t
 
sz
;

253 
__u64
 
ñem_Êags
;

254 
__u64
 
Êags
;

256 
	#bpf_m≠_b©ch_›ts__œ°_fõld
 
Êags


	)

274 
LIBBPF_API
 
bpf_m≠_dñëe_b©ch
(
fd
, c⁄° *
keys
,

275 
__u32
 *
cou¡
,

276 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
);

307 
LIBBPF_API
 
bpf_m≠_lookup_b©ch
(
fd
, *
ö_b©ch
, *
out_b©ch
,

308 *
keys
, *
vÆues
, 
__u32
 *
cou¡
,

309 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
);

333 
LIBBPF_API
 
bpf_m≠_lookup_™d_dñëe_b©ch
(
fd
, *
ö_b©ch
,

334 *
out_b©ch
, *
keys
,

335 *
vÆues
, 
__u32
 *
cou¡
,

336 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
);

379 
LIBBPF_API
 
bpf_m≠_upd©e_b©ch
(
fd
, c⁄° *
keys
, c⁄° *
vÆues
,

380 
__u32
 *
cou¡
,

381 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
);

383 
LIBBPF_API
 
bpf_obj_pö
(
fd
, c⁄° *
∑th«me
);

384 
LIBBPF_API
 
bpf_obj_gë
(c⁄° *
∑th«me
);

386 
	sbpf_¥og_©èch_›ts
 {

387 
size_t
 
sz
;

388 
Êags
;

389 
ª∂a˚_¥og_fd
;

391 
	#bpf_¥og_©èch_›ts__œ°_fõld
 
ª∂a˚_¥og_fd


	)

393 
LIBBPF_API
 
bpf_¥og_©èch
(
¥og_fd
, 
©èchabÀ_fd
,

394 
bpf_©èch_ty≥
 
ty≥
, 
Êags
);

395 
LIBBPF_API
 
bpf_¥og_©èch_›ts
(
¥og_fd
, 
©èchabÀ_fd
,

396 
bpf_©èch_ty≥
 
ty≥
,

397 c⁄° 
bpf_¥og_©èch_›ts
 *
›ts
);

398 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_prog_attach_opts() instead")

399 
LIBBPF_API
 
bpf_¥og_©èch_x©å
(
¥og_fd
, 
©èchabÀ_fd
,

400 
bpf_©èch_ty≥
 
ty≥
,

401 c⁄° 
bpf_¥og_©èch_›ts
 *
›ts
);

402 
LIBBPF_API
 
bpf_¥og_dëach
(
©èchabÀ_fd
, 
bpf_©èch_ty≥
 
ty≥
);

403 
LIBBPF_API
 
bpf_¥og_dëach2
(
¥og_fd
, 
©èchabÀ_fd
,

404 
bpf_©èch_ty≥
 
ty≥
);

406 
bpf_ôî_lök_öfo
;

407 
	sbpf_lök_¸óã_›ts
 {

408 
size_t
 
sz
;

409 
__u32
 
Êags
;

410 
bpf_ôî_lök_öfo
 *
ôî_öfo
;

411 
__u32
 
ôî_öfo_Àn
;

412 
__u32
 
èrgë_btf_id
;

415 
__u64
 
bpf_cookõ
;

416 } 
≥rf_evít
;

418 
__u32
 
Êags
;

419 
__u32
 
˙t
;

420 c⁄° **
syms
;

421 c⁄° *
addrs
;

422 c⁄° 
__u64
 *
cookõs
;

423 } 
k¥obe_mu…i
;

425 
__u64
 
cookõ
;

426 } 
åacög
;

428 
size_t
 :0;

430 
	#bpf_lök_¸óã_›ts__œ°_fõld
 
k¥obe_mu…i
.
cookõs


	)

432 
LIBBPF_API
 
bpf_lök_¸óã
(
¥og_fd
, 
èrgë_fd
,

433 
bpf_©èch_ty≥
 
©èch_ty≥
,

434 c⁄° 
bpf_lök_¸óã_›ts
 *
›ts
);

436 
LIBBPF_API
 
bpf_lök_dëach
(
lök_fd
);

438 
	sbpf_lök_upd©e_›ts
 {

439 
size_t
 
sz
;

440 
__u32
 
Êags
;

441 
__u32
 
ﬁd_¥og_fd
;

443 
	#bpf_lök_upd©e_›ts__œ°_fõld
 
ﬁd_¥og_fd


	)

445 
LIBBPF_API
 
bpf_lök_upd©e
(
lök_fd
, 
√w_¥og_fd
,

446 c⁄° 
bpf_lök_upd©e_›ts
 *
›ts
);

448 
LIBBPF_API
 
bpf_ôî_¸óã
(
lök_fd
);

450 
	sbpf_¥og_ã°_run_©å
 {

451 
¥og_fd
;

452 
ª≥©
;

453 c⁄° *
d©a_ö
;

454 
__u32
 
d©a_size_ö
;

455 *
d©a_out
;

456 
__u32
 
d©a_size_out
;

458 
__u32
 
ªtvÆ
;

459 
__u32
 
duøti⁄
;

460 c⁄° *
˘x_ö
;

461 
__u32
 
˘x_size_ö
;

462 *
˘x_out
;

463 
__u32
 
˘x_size_out
;

467 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_prog_test_run_opts() instead")

468 
LIBBPF_API
 
bpf_¥og_ã°_run_x©å
(
bpf_¥og_ã°_run_©å
 *
ã°_©å
);

474 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_prog_test_run_opts() instead")

475 
LIBBPF_API
 
bpf_¥og_ã°_run
(
¥og_fd
, 
ª≥©
, *
d©a
,

476 
__u32
 
size
, *
d©a_out
, __u32 *
size_out
,

477 
__u32
 *
ªtvÆ
, __u32 *
duøti⁄
);

478 
LIBBPF_API
 
bpf_¥og_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
);

479 
LIBBPF_API
 
bpf_m≠_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
);

480 
LIBBPF_API
 
bpf_btf_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
);

481 
LIBBPF_API
 
bpf_lök_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
);

482 
LIBBPF_API
 
bpf_¥og_gë_fd_by_id
(
__u32
 
id
);

483 
LIBBPF_API
 
bpf_m≠_gë_fd_by_id
(
__u32
 
id
);

484 
LIBBPF_API
 
bpf_btf_gë_fd_by_id
(
__u32
 
id
);

485 
LIBBPF_API
 
bpf_lök_gë_fd_by_id
(
__u32
 
id
);

486 
LIBBPF_API
 
bpf_obj_gë_öfo_by_fd
(
bpf_fd
, *
öfo
, 
__u32
 *
öfo_Àn
);

487 
LIBBPF_API
 
bpf_¥og_quîy
(
èrgë_fd
, 
bpf_©èch_ty≥
 
ty≥
,

488 
__u32
 
quîy_Êags
, __u32 *
©èch_Êags
,

489 
__u32
 *
¥og_ids
, __u32 *
¥og_˙t
);

490 
LIBBPF_API
 
bpf_øw_åa˚poöt_›í
(c⁄° *
«me
, 
¥og_fd
);

491 
LIBBPF_API
 
bpf_èsk_fd_quîy
(
pid
, 
fd
, 
__u32
 
Êags
, *
buf
,

492 
__u32
 *
buf_Àn
, __u32 *
¥og_id
, __u32 *
fd_ty≥
,

493 
__u64
 *
¥obe_off£t
, __u64 *
¥obe_addr
);

495 
bpf_°©s_ty≥
;

496 
LIBBPF_API
 
bpf_íabÀ_°©s
(
bpf_°©s_ty≥
 
ty≥
);

498 
	sbpf_¥og_böd_›ts
 {

499 
size_t
 
sz
;

500 
__u32
 
Êags
;

502 
	#bpf_¥og_böd_›ts__œ°_fõld
 
Êags


	)

504 
LIBBPF_API
 
bpf_¥og_böd_m≠
(
¥og_fd
, 
m≠_fd
,

505 c⁄° 
bpf_¥og_böd_›ts
 *
›ts
);

507 
	sbpf_ã°_run_›ts
 {

508 
size_t
 
sz
;

509 c⁄° *
d©a_ö
;

510 *
d©a_out
;

511 
__u32
 
d©a_size_ö
;

512 
__u32
 
d©a_size_out
;

515 c⁄° *
˘x_ö
;

516 *
˘x_out
;

517 
__u32
 
˘x_size_ö
;

518 
__u32
 
˘x_size_out
;

521 
__u32
 
ªtvÆ
;

522 
ª≥©
;

523 
__u32
 
duøti⁄
;

524 
__u32
 
Êags
;

525 
__u32
 
˝u
;

526 
__u32
 
b©ch_size
;

528 
	#bpf_ã°_run_›ts__œ°_fõld
 
b©ch_size


	)

530 
LIBBPF_API
 
bpf_¥og_ã°_run_›ts
(
¥og_fd
,

531 
bpf_ã°_run_›ts
 *
›ts
);

533 #ifde‡
__˝lu•lus


	@bpf_core_read.h

2 #i‚de‡
__BPF_CORE_READ_H__


3 
	#__BPF_CORE_READ_H__


	)

13 
	ebpf_fõld_öfo_köd
 {

14 
	mBPF_FIELD_BYTE_OFFSET
 = 0,

15 
	mBPF_FIELD_BYTE_SIZE
 = 1,

16 
	mBPF_FIELD_EXISTS
 = 2,

17 
	mBPF_FIELD_SIGNED
 = 3,

18 
	mBPF_FIELD_LSHIFT_U64
 = 4,

19 
	mBPF_FIELD_RSHIFT_U64
 = 5,

23 
	ebpf_ty≥_id_köd
 {

24 
	mBPF_TYPE_ID_LOCAL
 = 0,

25 
	mBPF_TYPE_ID_TARGET
 = 1,

29 
	ebpf_ty≥_öfo_köd
 {

30 
	mBPF_TYPE_EXISTS
 = 0,

31 
	mBPF_TYPE_SIZE
 = 1,

35 
	ebpf_íum_vÆue_köd
 {

36 
	mBPF_ENUMVAL_EXISTS
 = 0,

37 
	mBPF_ENUMVAL_VALUE
 = 1,

40 
	#__CORE_RELO
(
§c
, 
fõld
, 
öfo
) \

41 
	`__buûtö_¥e£rve_fõld_öfo
((
§c
)->
fõld
, 
BPF_FIELD_
##
öfo
)

	)

43 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


44 
	#__CORE_BITFIELD_PROBE_READ
(
d°
, 
§c
, 
Êd
) \

45 
	`bpf_¥obe_ªad_kî√l
( \

46 (*)
d°
, \

47 
	`__CORE_RELO
(
§c
, 
Êd
, 
BYTE_SIZE
), \

48 (c⁄° *)
§c
 + 
	`__CORE_RELO
(§c, 
Êd
, 
BYTE_OFFSET
))

	)

54 
	#__CORE_BITFIELD_PROBE_READ
(
d°
, 
§c
, 
Êd
) \

55 
	`bpf_¥obe_ªad_kî√l
( \

56 (*)
d°
 + (8 - 
	`__CORE_RELO
(
§c
, 
Êd
, 
BYTE_SIZE
)), \

57 
	`__CORE_RELO
(
§c
, 
Êd
, 
BYTE_SIZE
), \

58 (c⁄° *)
§c
 + 
	`__CORE_RELO
(§c, 
Êd
, 
BYTE_OFFSET
))

	)

69 
	#BPF_CORE_READ_BITFIELD_PROBED
(
s
, 
fõld
) ({ \

70 
vÆ
 = 0; \

72 
	`__CORE_BITFIELD_PROBE_READ
(&
vÆ
, 
s
, 
fõld
); \

73 
vÆ
 <<
	`__CORE_RELO
(
s
, 
fõld
, 
LSHIFT_U64
); \

74 i‡(
	`__CORE_RELO
(
s
, 
fõld
, 
SIGNED
)) \

75 
vÆ
 = (()vÆË>> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

77 
vÆ
 = vÆ >> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

78 
vÆ
; \

79 })

	)

87 
	#BPF_CORE_READ_BITFIELD
(
s
, 
fõld
) ({ \

88 c⁄° *
p
 = (c⁄° *)
s
 + 
	`__CORE_RELO
(s, 
fõld
, 
BYTE_OFFSET
); \

89 
vÆ
; \

97 
asm
 vﬁ©ûe("" : "Ù"(
p
) : "0"(p)); \

99 
	`__CORE_RELO
(
s
, 
fõld
, 
BYTE_SIZE
)) { \

100 1: 
vÆ
 = *(c⁄° *)
p
; ; \

101 2: 
vÆ
 = *(c⁄° *)
p
; ; \

102 4: 
vÆ
 = *(c⁄° *)
p
; ; \

103 8: 
vÆ
 = *(c⁄° *)
p
; ; \

105 
vÆ
 <<
	`__CORE_RELO
(
s
, 
fõld
, 
LSHIFT_U64
); \

106 i‡(
	`__CORE_RELO
(
s
, 
fõld
, 
SIGNED
)) \

107 
vÆ
 = (()vÆË>> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

109 
vÆ
 = vÆ >> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

110 
vÆ
; \

111 })

	)

113 
	#___bpf_fõld_ªf1
(
fõld
Ë(fõld)

	)

114 
	#___bpf_fõld_ªf2
(
ty≥
, 
fõld
Ë(((
	`ty≥of
—y≥Ë*)0)->fõld)

	)

115 
	#___bpf_fõld_ªf
(
¨gs
...) \

116 
	`___bpf_≠∂y
(
___bpf_fõld_ªf
, 
	`___bpf_«rg
(
¨gs
))◊rgs)

	)

130 
	#bpf_c‹e_fõld_exi°s
(
fõld
...) \

131 
	`__buûtö_¥e£rve_fõld_öfo
(
	`___bpf_fõld_ªf
(
fõld
), 
BPF_FIELD_EXISTS
)

	)

143 
	#bpf_c‹e_fõld_size
(
fõld
...) \

144 
	`__buûtö_¥e£rve_fõld_öfo
(
	`___bpf_fõld_ªf
(
fõld
), 
BPF_FIELD_BYTE_SIZE
)

	)

155 
	#bpf_c‹e_fõld_off£t
(
fõld
...) \

156 
	`__buûtö_¥e£rve_fõld_öfo
(
	`___bpf_fõld_ªf
(
fõld
), 
BPF_FIELD_BYTE_OFFSET
)

	)

163 
	#bpf_c‹e_ty≥_id_loˇl
(
ty≥
) \

164 
	`__buûtö_btf_ty≥_id
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_ID_LOCAL
)

	)

173 
	#bpf_c‹e_ty≥_id_kî√l
(
ty≥
) \

174 
	`__buûtö_btf_ty≥_id
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_ID_TARGET
)

	)

183 
	#bpf_c‹e_ty≥_exi°s
(
ty≥
) \

184 
	`__buûtö_¥e£rve_ty≥_öfo
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_EXISTS
)

	)

193 
	#bpf_c‹e_ty≥_size
(
ty≥
) \

194 
	`__buûtö_¥e£rve_ty≥_öfo
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_SIZE
)

	)

204 
	#bpf_c‹e_íum_vÆue_exi°s
(
íum_ty≥
, 
íum_vÆue
) \

205 
	`__buûtö_¥e£rve_íum_vÆue
(*(
	`ty≥of
(
íum_ty≥
Ë*)
íum_vÆue
, 
BPF_ENUMVAL_EXISTS
)

	)

215 
	#bpf_c‹e_íum_vÆue
(
íum_ty≥
, 
íum_vÆue
) \

216 
	`__buûtö_¥e£rve_íum_vÆue
(*(
	`ty≥of
(
íum_ty≥
Ë*)
íum_vÆue
, 
BPF_ENUMVAL_VALUE
)

	)

234 
	#bpf_c‹e_ªad
(
d°
, 
sz
, 
§c
) \

235 
	`bpf_¥obe_ªad_kî√l
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

238 
	#bpf_c‹e_ªad_u£r
(
d°
, 
sz
, 
§c
) \

239 
	`bpf_¥obe_ªad_u£r
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

245 
	#bpf_c‹e_ªad_°r
(
d°
, 
sz
, 
§c
) \

246 
	`bpf_¥obe_ªad_kî√l_°r
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

249 
	#bpf_c‹e_ªad_u£r_°r
(
d°
, 
sz
, 
§c
) \

250 
	`bpf_¥obe_ªad_u£r_°r
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

252 
	#___c⁄ˇt
(
a
, 
b
Ë®## 
	)
b

253 
	#___≠∂y
(
‚
, 
n
Ë
	`___c⁄ˇt
(‚,Ç)

	)

254 
	#___¡h
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_10
, 
__11
, 
N
, ...Ë
	)
N

260 
	#___«rg
(...Ë
	`___¡h
(
_
, ##
__VA_ARGS__
, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

	)

266 
	#___em±y
(...Ë
	`___¡h
(
_
, ##
__VA_ARGS__
, 
N
, N, N, N, N, N, N, N, N, N, 0)

	)

268 
	#___œ°1
(
x
Ë
	)
x

269 
	#___œ°2
(
a
, 
x
Ë
	)
x

270 
	#___œ°3
(
a
, 
b
, 
x
Ë
	)
x

271 
	#___œ°4
(
a
, 
b
, 
c
, 
x
Ë
	)
x

272 
	#___œ°5
(
a
, 
b
, 
c
, 
d
, 
x
Ë
	)
x

273 
	#___œ°6
(
a
, 
b
, 
c
, 
d
, 
e
, 
x
Ë
	)
x

274 
	#___œ°7
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
x
Ë
	)
x

275 
	#___œ°8
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
x
Ë
	)
x

276 
	#___œ°9
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
x
Ë
	)
x

277 
	#___œ°10
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
x
Ë
	)
x

278 
	#___œ°
(...Ë
	`___≠∂y
(
___œ°
, 
	`___«rg
(
__VA_ARGS__
))(__VA_ARGS__)

	)

280 
	#___nﬁa°2
(
a
, 
_
Ë
	)
a

281 
	#___nﬁa°3
(
a
, 
b
, 
_
Ëa, 
	)
b

282 
	#___nﬁa°4
(
a
, 
b
, 
c
, 
_
Ëa, b, 
	)
c

283 
	#___nﬁa°5
(
a
, 
b
, 
c
, 
d
, 
_
Ëa, b, c, 
	)
d

284 
	#___nﬁa°6
(
a
, 
b
, 
c
, 
d
, 
e
, 
_
Ëa, b, c, d, 
	)
e

285 
	#___nﬁa°7
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
_
Ëa, b, c, d,É, 
	)
f

286 
	#___nﬁa°8
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
_
Ëa, b, c, d,É, f, 
	)
g

287 
	#___nﬁa°9
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
_
Ëa, b, c, d,É, f, g, 
	)
h

288 
	#___nﬁa°10
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
_
Ëa, b, c, d,É, f, g, h, 
	)
i

289 
	#___nﬁa°
(...Ë
	`___≠∂y
(
___nﬁa°
, 
	`___«rg
(
__VA_ARGS__
))(__VA_ARGS__)

	)

291 
	#___¨row1
(
a
Ë
	)
a

292 
	#___¨row2
(
a
, 
b
Ëa->
	)
b

293 
	#___¨row3
(
a
, 
b
, 
c
Ëa->b->
	)
c

294 
	#___¨row4
(
a
, 
b
, 
c
, 
d
Ëa->b->c->
	)
d

295 
	#___¨row5
(
a
, 
b
, 
c
, 
d
, 
e
Ëa->b->c->d->
	)
e

296 
	#___¨row6
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
Ëa->b->c->d->e->
	)
f

297 
	#___¨row7
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
Ëa->b->c->d->e->f->
	)
g

298 
	#___¨row8
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
Ëa->b->c->d->e->f->g->
	)
h

299 
	#___¨row9
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
Ëa->b->c->d->e->f->g->h->
	)
i

300 
	#___¨row10
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
Ëa->b->c->d->e->f->g->h->i->
	)
j

301 
	#___¨row
(...Ë
	`___≠∂y
(
___¨row
, 
	`___«rg
(
__VA_ARGS__
))(__VA_ARGS__)

	)

303 
	#___ty≥
(...Ë
	`ty≥of
(
	`___¨row
(
__VA_ARGS__
))

	)

305 
	#___ªad
(
ªad_‚
, 
d°
, 
§c_ty≥
, 
§c
, 
ac˚ss‹
) \

306 
	`ªad_‚
((*)(
d°
), (*(d°)), &((
§c_ty≥
)(
§c
))->
ac˚ss‹
)

	)

309 
	#___rd_fú°
(
‚
, 
§c
, 
a
Ë
	`___ªad
(‚, &
__t
, 
	`___ty≥
(§c), src,á);

	)

310 
	#___rd_œ°
(
‚
, ...) \

311 
	`___ªad
(
‚
, &
__t
, 
	`___ty≥
(
	`___nﬁa°
(
__VA_ARGS__
)), __t, 
	`___œ°
(__VA_ARGS__));

	)

312 
	#___rd_p1
(
‚
, ...Ëc⁄° *
__t
; 
	`___rd_fú°
(‚, 
__VA_ARGS__
)

	)

313 
	#___rd_p2
(
‚
, ...Ë
	`___rd_p1
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

314 
	#___rd_p3
(
‚
, ...Ë
	`___rd_p2
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

315 
	#___rd_p4
(
‚
, ...Ë
	`___rd_p3
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

316 
	#___rd_p5
(
‚
, ...Ë
	`___rd_p4
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

317 
	#___rd_p6
(
‚
, ...Ë
	`___rd_p5
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

318 
	#___rd_p7
(
‚
, ...Ë
	`___rd_p6
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

319 
	#___rd_p8
(
‚
, ...Ë
	`___rd_p7
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

320 
	#___rd_p9
(
‚
, ...Ë
	`___rd_p8
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

321 
	#___ªad_±rs
(
‚
, 
§c
, ...) \

322 
	`___≠∂y
(
___rd_p
, 
	`___«rg
(
__VA_ARGS__
))(
‚
, 
§c
, __VA_ARGS__)

	)

324 
	#___c‹e_ªad0
(
‚
, 
‚_±r
, 
d°
, 
§c
, 
a
) \

325 
	`___ªad
(
‚
, 
d°
, 
	`___ty≥
(
§c
), src, 
a
);

	)

326 
	#___c‹e_ªadN
(
‚
, 
‚_±r
, 
d°
, 
§c
, ...) \

327 
	`___ªad_±rs
(
‚_±r
, 
§c
, 
	`___nﬁa°
(
__VA_ARGS__
)) \

328 
	`___ªad
(
‚
, 
d°
, 
	`___ty≥
(
§c
, 
	`___nﬁa°
(
__VA_ARGS__
)), 
__t
, \

329 
	`___œ°
(
__VA_ARGS__
));

	)

330 
	#___c‹e_ªad
(
‚
, 
‚_±r
, 
d°
, 
§c
, 
a
, ...) \

331 
	`___≠∂y
(
___c‹e_ªad
, 
	`___em±y
(
__VA_ARGS__
))(
‚
, 
‚_±r
, 
d°
, \

332 
§c
, 
a
, ##
__VA_ARGS__
)

	)

339 
	#BPF_CORE_READ_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

340 
	`___c‹e_ªad
(
bpf_c‹e_ªad
, bpf_core_read, \

341 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

342 })

	)

349 
	#BPF_CORE_READ_USER_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

350 
	`___c‹e_ªad
(
bpf_c‹e_ªad_u£r
, bpf_core_read_user, \

351 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

352 })

	)

355 
	#BPF_PROBE_READ_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

356 
	`___c‹e_ªad
(
bpf_¥obe_ªad
, bpf_probe_read, \

357 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

358 })

	)

365 
	#BPF_PROBE_READ_USER_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

366 
	`___c‹e_ªad
(
bpf_¥obe_ªad_u£r
, bpf_probe_read_user, \

367 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

368 })

	)

375 
	#BPF_CORE_READ_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

376 
	`___c‹e_ªad
(
bpf_c‹e_ªad_°r
, 
bpf_c‹e_ªad
, \

377 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

378 })

	)

385 
	#BPF_CORE_READ_USER_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

386 
	`___c‹e_ªad
(
bpf_c‹e_ªad_u£r_°r
, 
bpf_c‹e_ªad_u£r
, \

387 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

388 })

	)

391 
	#BPF_PROBE_READ_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

392 
	`___c‹e_ªad
(
bpf_¥obe_ªad_°r
, 
bpf_¥obe_ªad
, \

393 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

394 })

	)

402 
	#BPF_PROBE_READ_USER_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

403 
	`___c‹e_ªad
(
bpf_¥obe_ªad_u£r_°r
, 
bpf_¥obe_ªad_u£r
, \

404 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

405 })

	)

431 
	#BPF_CORE_READ
(
§c
, 
a
, ...) ({ \

432 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

433 
	`BPF_CORE_READ_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

434 
__r
; \

435 })

	)

447 
	#BPF_CORE_READ_USER
(
§c
, 
a
, ...) ({ \

448 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

449 
	`BPF_CORE_READ_USER_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

450 
__r
; \

451 })

	)

454 
	#BPF_PROBE_READ
(
§c
, 
a
, ...) ({ \

455 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

456 
	`BPF_PROBE_READ_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

457 
__r
; \

458 })

	)

466 
	#BPF_PROBE_READ_USER
(
§c
, 
a
, ...) ({ \

467 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

468 
	`BPF_PROBE_READ_USER_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

469 
__r
; \

470 })

	)

	@bpf_endian.h

2 #i‚de‡
__BPF_ENDIAN__


3 
	#__BPF_ENDIAN__


	)

13 
	#___bpf_mvb
(
x
, 
b
, 
n
, 
m
Ë((
__u
##b)(xË<< (b-“+1)*8Ë>> (b-8Ë<< (m*8))

	)

15 
	#___bpf_swab16
(
x
Ë((
__u16
)( \

16 
	`___bpf_mvb
(
x
, 16, 0, 1) | \

17 
	`___bpf_mvb
(
x
, 16, 1, 0)))

	)

19 
	#___bpf_swab32
(
x
Ë((
__u32
)( \

20 
	`___bpf_mvb
(
x
, 32, 0, 3) | \

21 
	`___bpf_mvb
(
x
, 32, 1, 2) | \

22 
	`___bpf_mvb
(
x
, 32, 2, 1) | \

23 
	`___bpf_mvb
(
x
, 32, 3, 0)))

	)

25 
	#___bpf_swab64
(
x
Ë((
__u64
)( \

26 
	`___bpf_mvb
(
x
, 64, 0, 7) | \

27 
	`___bpf_mvb
(
x
, 64, 1, 6) | \

28 
	`___bpf_mvb
(
x
, 64, 2, 5) | \

29 
	`___bpf_mvb
(
x
, 64, 3, 4) | \

30 
	`___bpf_mvb
(
x
, 64, 4, 3) | \

31 
	`___bpf_mvb
(
x
, 64, 5, 2) | \

32 
	`___bpf_mvb
(
x
, 64, 6, 1) | \

33 
	`___bpf_mvb
(
x
, 64, 7, 0)))

	)

50 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


51 
	#__bpf_¡ohs
(
x
Ë
	`__buûtö_bsw≠16
(x)

	)

52 
	#__bpf_ht⁄s
(
x
Ë
	`__buûtö_bsw≠16
(x)

	)

53 
	#__bpf_c⁄°™t_¡ohs
(
x
Ë
	`___bpf_swab16
(x)

	)

54 
	#__bpf_c⁄°™t_ht⁄s
(
x
Ë
	`___bpf_swab16
(x)

	)

55 
	#__bpf_¡ohl
(
x
Ë
	`__buûtö_bsw≠32
(x)

	)

56 
	#__bpf_ht⁄l
(
x
Ë
	`__buûtö_bsw≠32
(x)

	)

57 
	#__bpf_c⁄°™t_¡ohl
(
x
Ë
	`___bpf_swab32
(x)

	)

58 
	#__bpf_c⁄°™t_ht⁄l
(
x
Ë
	`___bpf_swab32
(x)

	)

59 
	#__bpf_be64_to_˝u
(
x
Ë
	`__buûtö_bsw≠64
(x)

	)

60 
	#__bpf_˝u_to_be64
(
x
Ë
	`__buûtö_bsw≠64
(x)

	)

61 
	#__bpf_c⁄°™t_be64_to_˝u
(
x
Ë
	`___bpf_swab64
(x)

	)

62 
	#__bpf_c⁄°™t_˝u_to_be64
(
x
Ë
	`___bpf_swab64
(x)

	)

63 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


64 
	#__bpf_¡ohs
(
x
Ë(x)

	)

65 
	#__bpf_ht⁄s
(
x
Ë(x)

	)

66 
	#__bpf_c⁄°™t_¡ohs
(
x
Ë(x)

	)

67 
	#__bpf_c⁄°™t_ht⁄s
(
x
Ë(x)

	)

68 
	#__bpf_¡ohl
(
x
Ë(x)

	)

69 
	#__bpf_ht⁄l
(
x
Ë(x)

	)

70 
	#__bpf_c⁄°™t_¡ohl
(
x
Ë(x)

	)

71 
	#__bpf_c⁄°™t_ht⁄l
(
x
Ë(x)

	)

72 
	#__bpf_be64_to_˝u
(
x
Ë(x)

	)

73 
	#__bpf_˝u_to_be64
(
x
Ë(x)

	)

74 
	#__bpf_c⁄°™t_be64_to_˝u
(
x
Ë(x)

	)

75 
	#__bpf_c⁄°™t_˝u_to_be64
(
x
Ë(x)

	)

80 
	#bpf_ht⁄s
(
x
) \

81 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

82 
	`__bpf_c⁄°™t_ht⁄s
(
x
Ë: 
	`__bpf_ht⁄s
(x))

	)

83 
	#bpf_¡ohs
(
x
) \

84 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

85 
	`__bpf_c⁄°™t_¡ohs
(
x
Ë: 
	`__bpf_¡ohs
(x))

	)

86 
	#bpf_ht⁄l
(
x
) \

87 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

88 
	`__bpf_c⁄°™t_ht⁄l
(
x
Ë: 
	`__bpf_ht⁄l
(x))

	)

89 
	#bpf_¡ohl
(
x
) \

90 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

91 
	`__bpf_c⁄°™t_¡ohl
(
x
Ë: 
	`__bpf_¡ohl
(x))

	)

92 
	#bpf_˝u_to_be64
(
x
) \

93 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

94 
	`__bpf_c⁄°™t_˝u_to_be64
(
x
Ë: 
	`__bpf_˝u_to_be64
(x))

	)

95 
	#bpf_be64_to_˝u
(
x
) \

96 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

97 
	`__bpf_c⁄°™t_be64_to_˝u
(
x
Ë: 
	`__bpf_be64_to_˝u
(x))

	)

	@bpf_gen_internal.h

3 #i‚de‡
__BPF_GEN_INTERNAL_H


4 
	#__BPF_GEN_INTERNAL_H


	)

6 
	~"bpf.h
"

8 
	sksym_ªlo_desc
 {

9 c⁄° *
	m«me
;

10 
	mköd
;

11 
	mö¢_idx
;

12 
boﬁ
 
	mis_wók
;

13 
boﬁ
 
	mis_ty≥Àss
;

16 
	sksym_desc
 {

17 c⁄° *
	m«me
;

18 
	mªf
;

19 
	mköd
;

22 
	moff
;

24 
boﬁ
 
	mty≥Àss
;

26 
	mö¢
;

29 
	sbpf_gí
 {

30 
gí_lﬂdî_›ts
 *
	m›ts
;

31 *
	md©a_°¨t
;

32 *
	md©a_cur
;

33 *
	mö¢_°¨t
;

34 *
	mö¢_cur
;

35 
ssize_t
 
	m˛ónup_œbñ
;

36 
__u32
 
	mƒ_¥ogs
;

37 
__u32
 
	mƒ_m≠s
;

38 
	mlog_Àvñ
;

39 
	mîr‹
;

40 
ksym_ªlo_desc
 *
	mªlos
;

41 
	mªlo_˙t
;

42 
bpf_c‹e_ªlo
 *
	mc‹e_ªlos
;

43 
	mc‹e_ªlo_˙t
;

44 
	m©èch_èrgë
[128];

45 
	m©èch_köd
;

46 
ksym_desc
 *
	mksyms
;

47 
__u32
 
	mƒ_ksyms
;

48 
	mfd_¨øy
;

49 
	mƒ_fd_¨øy
;

52 
bpf_gí__öô
(
bpf_gí
 *
gí
, 
log_Àvñ
, 
ƒ_¥ogs
, 
ƒ_m≠s
);

53 
bpf_gí__föish
(
bpf_gí
 *
gí
, 
ƒ_¥ogs
, 
ƒ_m≠s
);

54 
bpf_gí__‰ì
(
bpf_gí
 *
gí
);

55 
bpf_gí__lﬂd_btf
(
bpf_gí
 *
gí
, c⁄° *
øw_d©a
, 
__u32
 
øw_size
);

56 
bpf_gí__m≠_¸óã
(
bpf_gí
 *
gí
,

57 
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
m≠_«me
,

58 
__u32
 
key_size
, __u32 
vÆue_size
, __u32 
max_íåõs
,

59 
bpf_m≠_¸óã_›ts
 *
m≠_©å
, 
m≠_idx
);

60 
bpf_gí__¥og_lﬂd
(
bpf_gí
 *
gí
,

61 
bpf_¥og_ty≥
 
¥og_ty≥
, c⁄° *
¥og_«me
,

62 c⁄° *
li˚n£
, 
bpf_ö¢
 *
ö¢s
, 
size_t
 
ö¢_˙t
,

63 
bpf_¥og_lﬂd_›ts
 *
lﬂd_©å
, 
¥og_idx
);

64 
bpf_gí__m≠_upd©e_ñem
(
bpf_gí
 *
gí
, 
m≠_idx
, *
vÆue
, 
__u32
 
vÆue_size
);

65 
bpf_gí__m≠_‰ìze
(
bpf_gí
 *
gí
, 
m≠_idx
);

66 
bpf_gí__ªc‹d_©èch_èrgë
(
bpf_gí
 *
gí
, c⁄° *
«me
, 
bpf_©èch_ty≥
 
ty≥
);

67 
bpf_gí__ªc‹d_exã∫
(
bpf_gí
 *
gí
, c⁄° *
«me
, 
boﬁ
 
is_wók
,

68 
boﬁ
 
is_ty≥Àss
, 
köd
, 
ö¢_idx
);

69 
bpf_gí__ªc‹d_ªlo_c‹e
(
bpf_gí
 *
gí
, c⁄° 
bpf_c‹e_ªlo
 *
c‹e_ªlo
);

70 
bpf_gí__p›uœã_ouãr_m≠
(
bpf_gí
 *
gí
, 
ouãr_m≠_idx
, 
key
, 
ö√r_m≠_idx
);

	@bpf_helper_defs.h

4 
	gbpf_fib_lookup
;

5 
	gbpf_sk_lookup
;

6 
	gbpf_≥rf_evít_d©a
;

7 
	gbpf_≥rf_evít_vÆue
;

8 
	gbpf_pidns_öfo
;

9 
	gbpf_ªdú_√igh
;

10 
	gbpf_sock
;

11 
	gbpf_sock_addr
;

12 
	gbpf_sock_›s
;

13 
	gbpf_sock_tu∂e
;

14 
	gbpf_•ö_lock
;

15 
	gbpf_sys˘l
;

16 
	gbpf_t˝_sock
;

17 
	gbpf_tu¬ñ_key
;

18 
	gbpf_x‰m_°©e
;

19 
	glöux_bö¥m
;

20 
	g±_ªgs
;

21 
	gsk_ªu£p‹t_md
;

22 
	gsockaddr
;

23 
	gt˝hdr
;

24 
	g£q_fûe
;

25 
	gt˝6_sock
;

26 
	gt˝_sock
;

27 
	gt˝_timewaô_sock
;

28 
	gt˝_ªque°_sock
;

29 
	gudp6_sock
;

30 
	gunix_sock
;

31 
	gèsk_°ru˘
;

32 
	g__sk_buff
;

33 
	gsk_msg_md
;

34 
	gxdp_md
;

35 
	g∑th
;

36 
	gbtf_±r
;

37 
	göode
;

38 
	gsockë
;

39 
	gfûe
;

40 
	gbpf_timî
;

51 *(*
	gbpf_m≠_lookup_ñem
)(*
	gm≠
, c⁄° *
	gkey
) = (*) 1;

73 (*
bpf_m≠_upd©e_ñem
)(*
m≠
, c⁄° *
key
, c⁄° *
vÆue
, 
__u64
 
Êags
) = (*) 2;

83 (*
bpf_m≠_dñëe_ñem
)(*
m≠
, c⁄° *
key
) = (*) 3;

97 (*
bpf_¥obe_ªad
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 4;

109 
	$__u64
 (*
bpf_ktime_gë_ns
)() = (*) 5;

172 (*
bpf_åa˚_¥ötk
)(c⁄° *
fmt
, 
__u32
 
fmt_size
, ...) = (*) 6;

188 
	$__u32
 (*
bpf_gë_¥™dom_u32
)() = (*) 7;

201 
	$__u32
 (*
bpf_gë_smp_¥o˚ss‹_id
)() = (*) 8;

222 (*
bpf_skb_°‹e_byãs
)(
__sk_buff
 *
skb
, 
__u32
 
off£t
, c⁄° *
‰om
, __u32 
Àn
, 
__u64
 
Êags
) = (*) 9;

251 (*
bpf_l3_csum_ª∂a˚
)(
__sk_buff
 *
skb
, 
__u32
 
off£t
, 
__u64
 
‰om
, __u64 
to
, __u64 
size
) = (*) 10;

287 (*
bpf_l4_csum_ª∂a˚
)(
__sk_buff
 *
skb
, 
__u32
 
off£t
, 
__u64
 
‰om
, __u64 
to
, __u64 
Êags
) = (*) 11;

322 (*
bpf_èû_ˇŒ
)(*
˘x
, *
¥og_¨øy_m≠
, 
__u32
 
ödex
) = (*) 12;

350 (*
bpf_˛⁄e_ªdúe˘
)(
__sk_buff
 *
skb
, 
__u32
 
ifödex
, 
__u64
 
Êags
) = (*) 13;

363 
	$__u64
 (*
bpf_gë_cuºít_pid_tgid
)() = (*) 14;

374 
	$__u64
 (*
bpf_gë_cuºít_uid_gid
)() = (*) 15;

389 (*
bpf_gë_cuºít_comm
)(*
buf
, 
__u32
 
size_of_buf
) = (*) 16;

419 
	$__u32
 (*
bpf_gë_cgroup_˛assid
)(
__sk_buff
 *
skb
) = (*) 17;

439 (*
bpf_skb_vœn_push
)(
__sk_buff
 *
skb
, 
__be16
 
vœn_¥Ÿo
, 
__u16
 
vœn_tci
) = (*) 18;

455 (*
bpf_skb_vœn_p›
)(
__sk_buff
 *
skb
) = (*) 19;

510 (*
bpf_skb_gë_tu¬ñ_key
)(
__sk_buff
 *
skb
, 
bpf_tu¬ñ_key
 *
key
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 20;

551 (*
bpf_skb_£t_tu¬ñ_key
)(
__sk_buff
 *
skb
, 
bpf_tu¬ñ_key
 *
key
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 21;

584 
	$__u64
 (*
bpf_≥rf_evít_ªad
)(*
m≠
, 
__u64
 
Êags
) = (*) 22;

611 (*
bpf_ªdúe˘
)(
__u32
 
ifödex
, 
__u64
 
Êags
) = (*) 23;

639 
	$__u32
 (*
bpf_gë_rouã_ªÆm
)(
__sk_buff
 *
skb
) = (*) 24;

688 (*
bpf_≥rf_evít_ouçut
)(*
˘x
, *
m≠
, 
__u64
 
Êags
, *
d©a
, __u64 
size
) = (*) 25;

709 (*
bpf_skb_lﬂd_byãs
)(c⁄° *
skb
, 
__u32
 
off£t
, *
to
, __u32 
Àn
) = (*) 26;

755 (*
bpf_gë_°ackid
)(*
˘x
, *
m≠
, 
__u64
 
Êags
) = (*) 27;

786 
	$__s64
 (*
bpf_csum_diff
)(
__be32
 *
‰om
, 
__u32
 
‰om_size
, __be32 *
to
, __u32 
to_size
, 
__wsum
 
£ed
) = (*) 28;

808 (*
bpf_skb_gë_tu¬ñ_›t
)(
__sk_buff
 *
skb
, *
›t
, 
__u32
 
size
) = (*) 29;

822 (*
bpf_skb_£t_tu¬ñ_›t
)(
__sk_buff
 *
skb
, *
›t
, 
__u32
 
size
) = (*) 30;

853 (*
bpf_skb_ch™ge_¥Ÿo
)(
__sk_buff
 *
skb
, 
__be16
 
¥Ÿo
, 
__u64
 
Êags
) = (*) 31;

884 (*
bpf_skb_ch™ge_ty≥
)(
__sk_buff
 *
skb
, 
__u32
 
ty≥
) = (*) 32;

899 (*
bpf_skb_undî_cgroup
)(
__sk_buff
 *
skb
, *
m≠
, 
__u32
 
ödex
) = (*) 33;

919 
	$__u32
 (*
bpf_gë_hash_ªˇlc
)(
__sk_buff
 *
skb
) = (*) 34;

929 
	$__u64
 (*
bpf_gë_cuºít_èsk
)() = (*) 35;

952 (*
bpf_¥obe_wrôe_u£r
)(*
d°
, c⁄° *
§c
, 
__u32
 
Àn
) = (*) 36;

968 (*
bpf_cuºít_èsk_undî_cgroup
)(*
m≠
, 
__u32
 
ödex
) = (*) 37;

996 (*
bpf_skb_ch™ge_èû
)(
__sk_buff
 *
skb
, 
__u32
 
Àn
, 
__u64
 
Êags
) = (*) 38;

1036 (*
bpf_skb_puŒ_d©a
)(
__sk_buff
 *
skb
, 
__u32
 
Àn
) = (*) 39;

1052 
	$__s64
 (*
bpf_csum_upd©e
)(
__sk_buff
 *
skb
, 
__wsum
 
csum
) = (*) 40;

1066 (*
bpf_£t_hash_övÆid
)(
__sk_buff
 *
skb
) = (*) 41;

1081 (*
bpf_gë_numa_node_id
)() = (*) 42;

1106 (*
bpf_skb_ch™ge_hód
)(
__sk_buff
 *
skb
, 
__u32
 
Àn
, 
__u64
 
Êags
) = (*) 43;

1125 (*
bpf_xdp_adju°_hód
)(
xdp_md
 *xdp_md, 
dñè
) = (*) 44;

1142 (*
bpf_¥obe_ªad_°r
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 45;

1159 
	$__u64
 (*
bpf_gë_sockë_cookõ
)(*
˘x
) = (*) 46;

1173 
	$__u32
 (*
bpf_gë_sockë_uid
)(
__sk_buff
 *
skb
) = (*) 47;

1184 (*
bpf_£t_hash
)(
__sk_buff
 *
skb
, 
__u32
 
hash
) = (*) 48;

1219 (*
bpf_£tsock›t
)(*
bpf_sockë
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
›éí
) = (*) 49;

1273 (*
bpf_skb_adju°_room
)(
__sk_buff
 *
skb
, 
__s32
 
Àn_diff
, 
__u32
 
mode
, 
__u64
 
Êags
) = (*) 50;

1302 (*
bpf_ªdúe˘_m≠
)(*
m≠
, 
__u32
 
key
, 
__u64
 
Êags
) = (*) 51;

1317 (*
bpf_sk_ªdúe˘_m≠
)(
__sk_buff
 *
skb
, *
m≠
, 
__u32
 
key
, 
__u64
 
Êags
) = (*) 52;

1340 (*
bpf_sock_m≠_upd©e
)(
bpf_sock_›s
 *
sk›s
, *
m≠
, *
key
, 
__u64
 
Êags
) = (*) 53;

1373 (*
bpf_xdp_adju°_mëa
)(
xdp_md
 *xdp_md, 
dñè
) = (*) 54;

1427 (*
bpf_≥rf_evít_ªad_vÆue
)(*
m≠
, 
__u64
 
Êags
, 
bpf_≥rf_evít_vÆue
 *
buf
, 
__u32
 
buf_size
) = (*) 55;

1442 (*
bpf_≥rf_¥og_ªad_vÆue
)(
bpf_≥rf_evít_d©a
 *
˘x
, 
bpf_≥rf_evít_vÆue
 *
buf
, 
__u32
 
buf_size
) = (*) 56;

1471 (*
bpf_gësock›t
)(*
bpf_sockë
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
›éí
) = (*) 57;

1500 (*
bpf_ovîride_ªtu∫
)(
±_ªgs
 *
ªgs
, 
__u64
 
rc
) = (*) 58;

1548 (*
bpf_sock_›s_cb_Êags_£t
)(
bpf_sock_›s
 *
bpf_sock
, 
¨gvÆ
) = (*) 59;

1566 (*
bpf_msg_ªdúe˘_m≠
)(
sk_msg_md
 *
msg
, *
m≠
, 
__u32
 
key
, 
__u64
 
Êags
) = (*) 60;

1604 (*
bpf_msg_≠∂y_byãs
)(
sk_msg_md
 *
msg
, 
__u32
 
byãs
) = (*) 61;

1626 (*
bpf_msg_c‹k_byãs
)(
sk_msg_md
 *
msg
, 
__u32
 
byãs
) = (*) 62;

1661 (*
bpf_msg_puŒ_d©a
)(
sk_msg_md
 *
msg
, 
__u32
 
°¨t
, __u32 
íd
, 
__u64
 
Êags
) = (*) 63;

1683 (*
bpf_böd
)(
bpf_sock_addr
 *
˘x
, 
sockaddr
 *
addr
, 
addr_Àn
) = (*) 64;

1701 (*
bpf_xdp_adju°_èû
)(
xdp_md
 *xdp_md, 
dñè
) = (*) 65;

1721 (*
bpf_skb_gë_x‰m_°©e
)(
__sk_buff
 *
skb
, 
__u32
 
ödex
, 
bpf_x‰m_°©e
 *
x‰m_°©e
, __u32 
size
, 
__u64
 
Êags
) = (*) 66;

1758 (*
bpf_gë_°ack
)(*
˘x
, *
buf
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 67;

1784 (*
bpf_skb_lﬂd_byãs_ªœtive
)(c⁄° *
skb
, 
__u32
 
off£t
, *
to
, __u32 
Àn
, __u32 
°¨t_hódî
) = (*) 68;

1822 (*
bpf_fib_lookup
)(*
˘x
, bpf_fib_looku∞*
∑øms
, 
∂í
, 
__u32
 
Êags
) = (*) 69;

1845 (*
bpf_sock_hash_upd©e
)(
bpf_sock_›s
 *
sk›s
, *
m≠
, *
key
, 
__u64
 
Êags
) = (*) 70;

1863 (*
bpf_msg_ªdúe˘_hash
)(
sk_msg_md
 *
msg
, *
m≠
, *
key
, 
__u64
 
Êags
) = (*) 71;

1881 (*
bpf_sk_ªdúe˘_hash
)(
__sk_buff
 *
skb
, *
m≠
, *
key
, 
__u64
 
Êags
) = (*) 72;

1922 (*
bpf_lwt_push_íˇp
)(
__sk_buff
 *
skb
, 
__u32
 
ty≥
, *
hdr
, __u32 
Àn
) = (*) 73;

1941 (*
bpf_lwt_£g6_°‹e_byãs
)(
__sk_buff
 *
skb
, 
__u32
 
off£t
, c⁄° *
‰om
, __u32 
Àn
) = (*) 74;

1961 (*
bpf_lwt_£g6_adju°_§h
)(
__sk_buff
 *
skb
, 
__u32
 
off£t
, 
__s32
 
dñè
) = (*) 75;

1994 (*
bpf_lwt_£g6_a˘i⁄
)(
__sk_buff
 *
skb
, 
__u32
 
a˘i⁄
, *
∑øm
, __u32 
∑øm_Àn
) = (*) 76;

2017 (*
bpf_rc_ª≥©
)(*
˘x
) = (*) 77;

2047 (*
bpf_rc_keydown
)(*
˘x
, 
__u32
 
¥Ÿocﬁ
, 
__u64
 
sˇncode
, __u32 
toggÀ
) = (*) 78;

2067 
	$__u64
 (*
bpf_skb_cgroup_id
)(
__sk_buff
 *
skb
) = (*) 79;

2079 
	$__u64
 (*
bpf_gë_cuºít_cgroup_id
)() = (*) 80;

2101 *(*
bpf_gë_loˇl_°‹age
)(*
m≠
, 
__u64
 
Êags
) = (*) 81;

2114 (*
bpf_sk_£À˘_ªu£p‹t
)(
sk_ªu£p‹t_md
 *
ªu£
, *
m≠
, *
key
, 
__u64
 
Êags
) = (*) 82;

2136 
	$__u64
 (*
bpf_skb_™˚°‹_cgroup_id
)(
__sk_buff
 *
skb
, 
™˚°‹_Àvñ
) = (*) 83;

2177 
bpf_sock
 *(*
bpf_sk_lookup_t˝
)(*
˘x
, 
bpf_sock_tu∂e
 *
tu∂e
, 
__u32
 
tu∂e_size
, 
__u64
 
√äs
, __u64 
Êags
) = (*) 84;

2218 
bpf_sock
 *(*
bpf_sk_lookup_udp
)(*
˘x
, 
bpf_sock_tu∂e
 *
tu∂e
, 
__u32
 
tu∂e_size
, 
__u64
 
√äs
, __u64 
Êags
) = (*) 85;

2230 (*
bpf_sk_ªÀa£
)(*
sock
) = (*) 86;

2244 (*
bpf_m≠_push_ñem
)(*
m≠
, c⁄° *
vÆue
, 
__u64
 
Êags
) = (*) 87;

2254 (*
bpf_m≠_p›_ñem
)(*
m≠
, *
vÆue
) = (*) 88;

2264 (*
bpf_m≠_≥ek_ñem
)(*
m≠
, *
vÆue
) = (*) 89;

2284 (*
bpf_msg_push_d©a
)(
sk_msg_md
 *
msg
, 
__u32
 
°¨t
, __u32 
Àn
, 
__u64
 
Êags
) = (*) 90;

2300 (*
bpf_msg_p›_d©a
)(
sk_msg_md
 *
msg
, 
__u32
 
°¨t
, __u32 
Àn
, 
__u64
 
Êags
) = (*) 91;

2318 (*
bpf_rc_poöãr_ªl
)(*
˘x
, 
__s32
 
ªl_x
, __s32 
ªl_y
) = (*) 92;

2370 (*
bpf_•ö_lock
)(bpf_•ö_lock *
lock
) = (*) 93;

2381 (*
bpf_•ö_u∆ock
)(
bpf_•ö_lock
 *
lock
) = (*) 94;

2393 
bpf_sock
 *(*
bpf_sk_fuŒsock
)(bpf_sock *
sk
) = (*) 95;

2405 
bpf_t˝_sock
 *(*bpf_t˝_sock)(
bpf_sock
 *
sk
) = (*) 96;

2419 (*
bpf_skb_e˙_£t_˚
)(
__sk_buff
 *
skb
) = (*) 97;

2431 
bpf_sock
 *(*
bpf_gë_li°íî_sock
)(bpf_sock *
sk
) = (*) 98;

2454 
bpf_sock
 *(*
bpf_skc_lookup_t˝
)(*
˘x
, 
bpf_sock_tu∂e
 *
tu∂e
, 
__u32
 
tu∂e_size
, 
__u64
 
√äs
, __u64 
Êags
) = (*) 99;

2473 (*
bpf_t˝_check_syncookõ
)(*
sk
, *
ùh
, 
__u32
 
ùh_Àn
, 
t˝hdr
 *
th
, __u32 
th_Àn
) = (*) 100;

2493 (*
bpf_sys˘l_gë_«me
)(
bpf_sys˘l
 *
˘x
, *
buf
, 
buf_Àn
, 
__u64
 
Êags
) = (*) 101;

2516 (*
bpf_sys˘l_gë_cuºít_vÆue
)(
bpf_sys˘l
 *
˘x
, *
buf
, 
buf_Àn
) = (*) 102;

2537 (*
bpf_sys˘l_gë_√w_vÆue
)(
bpf_sys˘l
 *
˘x
, *
buf
, 
buf_Àn
) = (*) 103;

2558 (*
bpf_sys˘l_£t_√w_vÆue
)(
bpf_sys˘l
 *
˘x
, c⁄° *
buf
, 
buf_Àn
) = (*) 104;

2586 (*
bpf_°πﬁ
)(c⁄° *
buf
, 
buf_Àn
, 
__u64
 
Êags
, *
ªs
) = (*) 105;

2613 (*
bpf_°πoul
)(c⁄° *
buf
, 
buf_Àn
, 
__u64
 
Êags
, *
ªs
) = (*) 106;

2648 *(*
bpf_sk_°‹age_gë
)(*
m≠
, *
sk
, *
vÆue
, 
__u64
 
Êags
) = (*) 107;

2661 (*
bpf_sk_°‹age_dñëe
)(*
m≠
, *
sk
) = (*) 108;

2680 (*
bpf_£nd_sig«l
)(
__u32
 
sig
) = (*) 109;

2710 
	$__s64
 (*
bpf_t˝_gí_syncookõ
)(*
sk
, *
ùh
, 
__u32
 
ùh_Àn
, 
t˝hdr
 *
th
, __u32 
th_Àn
) = (*) 110;

2738 (*
bpf_skb_ouçut
)(*
˘x
, *
m≠
, 
__u64
 
Êags
, *
d©a
, __u64 
size
) = (*) 111;

2749 (*
bpf_¥obe_ªad_u£r
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 112;

2760 (*
bpf_¥obe_ªad_kî√l
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 113;

2808 (*
bpf_¥obe_ªad_u£r_°r
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 114;

2820 (*
bpf_¥obe_ªad_kî√l_°r
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 115;

2831 (*
bpf_t˝_£nd_ack
)(*
ç
, 
__u32
 
rcv_nxt
) = (*) 116;

2849 (*
bpf_£nd_sig«l_thªad
)(
__u32
 
sig
) = (*) 117;

2859 
	$__u64
 (*
bpf_jiffõs64
)() = (*) 118;

2882 (*
bpf_ªad_bønch_ªc‹ds
)(
bpf_≥rf_evít_d©a
 *
˘x
, *
buf
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 119;

2898 (*
bpf_gë_ns_cuºít_pid_tgid
)(
__u64
 
dev
, __u64 
öo
, 
bpf_pidns_öfo
 *
nsd©a
, 
__u32
 
size
) = (*) 120;

2926 (*
bpf_xdp_ouçut
)(*
˘x
, *
m≠
, 
__u64
 
Êags
, *
d©a
, __u64 
size
) = (*) 121;

2943 
	$__u64
 (*
bpf_gë_√äs_cookõ
)(*
˘x
) = (*) 122;

2965 
	$__u64
 (*
bpf_gë_cuºít_™˚°‹_cgroup_id
)(
™˚°‹_Àvñ
) = (*) 123;

3000 (*
bpf_sk_assign
)(*
˘x
, *
sk
, 
__u64
 
Êags
) = (*) 124;

3012 
	$__u64
 (*
bpf_ktime_gë_boŸ_ns
)() = (*) 125;

3045 (*
bpf_£q_¥ötf
)(
£q_fûe
 *
m
, c⁄° *
fmt
, 
__u32
 
fmt_size
, c⁄° *
d©a
, __u32 
d©a_Àn
) = (*) 126;

3059 (*
bpf_£q_wrôe
)(
£q_fûe
 *
m
, c⁄° *
d©a
, 
__u32
 
Àn
) = (*) 127;

3077 
	$__u64
 (*
bpf_sk_cgroup_id
)(*
sk
) = (*) 128;

3099 
	$__u64
 (*
bpf_sk_™˚°‹_cgroup_id
)(*
sk
, 
™˚°‹_Àvñ
) = (*) 129;

3120 (*
bpf_rögbuf_ouçut
)(*
rögbuf
, *
d©a
, 
__u64
 
size
, __u64 
Êags
) = (*) 130;

3132 *(*
bpf_rögbuf_ª£rve
)(*
rögbuf
, 
__u64
 
size
, __u64 
Êags
) = (*) 131;

3150 (*
bpf_rögbuf_submô
)(*
d©a
, 
__u64
 
Êags
) = (*) 132;

3168 (*
bpf_rögbuf_disˇrd
)(*
d©a
, 
__u64
 
Êags
) = (*) 133;

3189 
	$__u64
 (*
bpf_rögbuf_quîy
)(*
rögbuf
, 
__u64
 
Êags
) = (*) 134;

3225 (*
bpf_csum_Àvñ
)(
__sk_buff
 *
skb
, 
__u64
 
Àvñ
) = (*) 135;

3235 
t˝6_sock
 *(*
bpf_skc_to_t˝6_sock
)(*
sk
) = (*) 136;

3245 
t˝_sock
 *(*
bpf_skc_to_t˝_sock
)(*
sk
) = (*) 137;

3255 
t˝_timewaô_sock
 *(*
bpf_skc_to_t˝_timewaô_sock
)(*
sk
) = (*) 138;

3265 
t˝_ªque°_sock
 *(*
bpf_skc_to_t˝_ªque°_sock
)(*
sk
) = (*) 139;

3275 
udp6_sock
 *(*
bpf_skc_to_udp6_sock
)(*
sk
) = (*) 140;

3311 (*
bpf_gë_èsk_°ack
)(
èsk_°ru˘
 *
èsk
, *
buf
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 141;

3378 (*
bpf_lﬂd_hdr_›t
)(
bpf_sock_›s
 *
sk›s
, *
£¨chby_ªs
, 
__u32
 
Àn
, 
__u64
 
Êags
) = (*) 142;

3415 (*
bpf_°‹e_hdr_›t
)(
bpf_sock_›s
 *
sk›s
, c⁄° *
‰om
, 
__u32
 
Àn
, 
__u64
 
Êags
) = (*) 143;

3441 (*
bpf_ª£rve_hdr_›t
)(
bpf_sock_›s
 *
sk›s
, 
__u32
 
Àn
, 
__u64
 
Êags
) = (*) 144;

3473 *(*
bpf_öode_°‹age_gë
)(*
m≠
, *
öode
, *
vÆue
, 
__u64
 
Êags
) = (*) 145;

3485 (*
bpf_öode_°‹age_dñëe
)(*
m≠
, *
öode
) = (*) 146;

3501 (*
bpf_d_∑th
)(
∑th
 *∑th, *
buf
, 
__u32
 
sz
) = (*) 147;

3512 (*
bpf_c›y_‰om_u£r
)(*
d°
, 
__u32
 
size
, c⁄° *
u£r_±r
) = (*) 148;

3552 (*
bpf_¢¥ötf_btf
)(*
°r
, 
__u32
 
°r_size
, 
btf_±r
 *
±r
, __u32 
btf_±r_size
, 
__u64
 
Êags
) = (*) 149;

3564 (*
bpf_£q_¥ötf_btf
)(
£q_fûe
 *
m
, 
btf_±r
 *
±r
, 
__u32
 
±r_size
, 
__u64
 
Êags
) = (*) 150;

3577 
	$__u64
 (*
bpf_skb_cgroup_˛assid
)(
__sk_buff
 *
skb
) = (*) 151;

3602 (*
bpf_ªdúe˘_√igh
)(
__u32
 
ifödex
, 
bpf_ªdú_√igh
 *
∑øms
, 
∂í
, 
__u64
 
Êags
) = (*) 152;

3623 *(*
bpf_≥r_˝u_±r
)(c⁄° *
≥r˝u_±r
, 
__u32
 
˝u
) = (*) 153;

3639 *(*
bpf_this_˝u_±r
)(c⁄° *
≥r˝u_±r
) = (*) 154;

3659 (*
bpf_ªdúe˘_≥î
)(
__u32
 
ifödex
, 
__u64
 
Êags
) = (*) 155;

3691 *(*
bpf_èsk_°‹age_gë
)(*
m≠
, 
èsk_°ru˘
 *
èsk
, *
vÆue
, 
__u64
 
Êags
) = (*) 156;

3703 (*
bpf_èsk_°‹age_dñëe
)(*
m≠
, 
èsk_°ru˘
 *
èsk
) = (*) 157;

3715 
èsk_°ru˘
 *(*
bpf_gë_cuºít_èsk_btf
)() = (*) 158;

3729 (*
bpf_b¥m_›ts_£t
)(
löux_bö¥m
 *
b¥m
, 
__u64
 
Êags
) = (*) 159;

3743 
	$__u64
 (*
bpf_ktime_gë_cﬂr£_ns
)() = (*) 160;

3757 (*
bpf_ima_öode_hash
)(
öode
 *öode, *
d°
, 
__u32
 
size
) = (*) 161;

3769 
sockë
 *(*
bpf_sock_‰om_fûe
)(
fûe
 *file) = (*) 162;

3840 (*
bpf_check_mtu
)(*
˘x
, 
__u32
 
ifödex
, __u32 *
mtu_Àn
, 
__s32
 
Àn_diff
, 
__u64
 
Êags
) = (*) 163;

3873 (*
bpf_f‹_óch_m≠_ñem
)(*
m≠
, *
ˇŒback_‚
, *
ˇŒback_˘x
, 
__u64
 
Êags
) = (*) 164;

3905 (*
bpf_¢¥ötf
)(*
°r
, 
__u32
 
°r_size
, c⁄° *
fmt
, 
__u64
 *
d©a
, __u32 
d©a_Àn
) = (*) 165;

3915 (*
bpf_sys_bpf
)(
__u32
 
cmd
, *
©å
, __u32 
©å_size
) = (*) 166;

3925 (*
bpf_btf_föd_by_«me_köd
)(*
«me
, 
«me_sz
, 
__u32
 
köd
, 
Êags
) = (*) 167;

3935 (*
bpf_sys_˛o£
)(
__u32
 
fd
) = (*) 168;

3956 (*
bpf_timî_öô
)(
bpf_timî
 *
timî
, *
m≠
, 
__u64
 
Êags
) = (*) 169;

3971 (*
bpf_timî_£t_ˇŒback
)(
bpf_timî
 *
timî
, *
ˇŒback_‚
) = (*) 170;

4001 (*
bpf_timî_°¨t
)(
bpf_timî
 *
timî
, 
__u64
 
n£cs
, __u64 
Êags
) = (*) 171;

4015 (*
bpf_timî_ˇn˚l
)(
bpf_timî
 *
timî
) = (*) 172;

4025 
	$__u64
 (*
bpf_gë_func_ù
)(*
˘x
) = (*) 173;

4044 
	$__u64
 (*
bpf_gë_©èch_cookõ
)(*
˘x
) = (*) 174;

4054 (*
bpf_èsk_±_ªgs
)(
èsk_°ru˘
 *
èsk
) = (*) 175;

4079 (*
bpf_gë_bønch_¢≠shŸ
)(*
íåõs
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 176;

4093 (*
bpf_åa˚_v¥ötk
)(c⁄° *
fmt
, 
__u32
 
fmt_size
, c⁄° *
d©a
, __u32 
d©a_Àn
) = (*) 177;

4103 
unix_sock
 *(*
bpf_skc_to_unix_sock
)(*
sk
) = (*) 178;

4122 (*
bpf_kÆlsyms_lookup_«me
)(c⁄° *
«me
, 
«me_sz
, 
Êags
, 
__u64
 *
ªs
) = (*) 179;

4145 (*
bpf_föd_vma
)(
èsk_°ru˘
 *
èsk
, 
__u64
 
addr
, *
ˇŒback_‚
, *
ˇŒback_˘x
, __u64 
Êags
) = (*) 180;

4173 (*
bpf_lo›
)(
__u32
 
ƒ_lo›s
, *
ˇŒback_‚
, *
ˇŒback_˘x
, 
__u64
 
Êags
) = (*) 181;

4187 (*
bpf_°∫cmp
)(c⁄° *
s1
, 
__u32
 
s1_sz
, c⁄° *
s2
) = (*) 182;

4200 (*
bpf_gë_func_¨g
)(*
˘x
, 
__u32
 
n
, 
__u64
 *
vÆue
) = (*) 183;

4213 (*
bpf_gë_func_ªt
)(*
˘x
, 
__u64
 *
vÆue
) = (*) 184;

4224 (*
bpf_gë_func_¨g_˙t
)(*
˘x
) = (*) 185;

4236 (*
bpf_gë_ªtvÆ
)() = (*) 186;

4248 (*
bpf_£t_ªtvÆ
)(
ªtvÆ
) = (*) 187;

4258 
	$__u64
 (*
bpf_xdp_gë_buff_Àn
)(
xdp_md
 *xdp_md) = (*) 188;

4271 (*
bpf_xdp_lﬂd_byãs
)(
xdp_md
 *xdp_md, 
__u32
 
off£t
, *
buf
, __u32 
Àn
) = (*) 189;

4282 (*
bpf_xdp_°‹e_byãs
)(
xdp_md
 *xdp_md, 
__u32
 
off£t
, *
buf
, __u32 
Àn
) = (*) 190;

4296 (*
bpf_c›y_‰om_u£r_èsk
)(*
d°
, 
__u32
 
size
, c⁄° *
u£r_±r
, 
èsk_°ru˘
 *
tsk
, 
__u64
 
Êags
) = (*) 191;

4330 (*
bpf_skb_£t_t°amp
)(
__sk_buff
 *
skb
, 
__u64
 
t°amp
, 
__u32
 
t°amp_ty≥
) = (*) 192;

4344 (*
bpf_ima_fûe_hash
)(
fûe
 *fûe, *
d°
, 
__u32
 
size
) = (*) 193;

4359 *(*
bpf_k±r_xchg
)(*
m≠_vÆue
, *
±r
) = (*) 194;

4371 *(*
bpf_m≠_lookup_≥r˝u_ñem
)(*
m≠
, c⁄° *
key
, 
__u32
 
˝u
) = (*) 195;

	@bpf_helpers.h

2 #i‚de‡
__BPF_HELPERS__


3 
	#__BPF_HELPERS__


	)

11 
	~"bpf_hñ≥r_defs.h
"

13 
	#__uöt
(
«me
, 
vÆ
Ë(*«me)[vÆ]

	)

14 
	#__ty≥
(
«me
, 
vÆ
Ë
	`ty≥of
(vÆË*
	)
name

15 
	#__¨øy
(
«me
, 
vÆ
Ë
	`ty≥of
(vÆË*«me[]

	)

25 
	#SEC
(
«me
) \

26 
	`_Pøgma
("GCC diagnosticÖush") \

27 
	`_Pøgma
("GCC diagnostic ignored \"-Wignored-attributes\"") \

28 
	`__©åibuã__
((
	`£˘i⁄
(
«me
), 
u£d
)) \

29 
	`_Pøgma
("GCC diagnosticÖop") \

30 

	)

32 #unde‡
__Æways_ölöe


33 
	#__Æways_ölöe
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

35 #i‚de‡
__noölöe


36 
	#__noölöe
 
	`__©åibuã__
((
noölöe
))

	)

38 #i‚de‡
__wók


39 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

48 
	#__hiddí
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

56 #i‚de‡
NULL


57 
	#NULL
 ((*)0)

	)

60 #i‚de‡
KERNEL_VERSION


61 
	#KERNEL_VERSION
(
a
, 
b
, 
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ ((cË> 255 ? 255 : (c)))

	)

67 #i‚de‡
off£tof


68 
	#off£tof
(
TYPE
, 
MEMBER
Ë(()&((TYPE *)0)->MEMBER)

	)

70 #i‚de‡
c⁄èöî_of


71 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

73 *
__m±r
 = (*)(
±r
); \

74 ((
ty≥
 *)(
__m±r
 - 
	`off£tof
—y≥, 
membî
))); \

75 })

	)

81 #i‚de‡
b¨rõr


82 
	#b¨rõr
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

98 #i‚de‡
b¨rõr_v¨


99 
	#b¨rõr_v¨
(
v¨
Ë
asm
 vﬁ©ûe("" : "Ù"(v¨Ë: "0"(v¨))

	)

114 #i‚de‡
__bpf_uƒóchabÀ


115 
	#__bpf_uƒóchabÀ
(Ë
	`__buûtö_å≠
()

	)

121 #i‡
__˛™g_maj‹__
 >8 && 
deföed
(
__bpf__
)

122 
__Æways_ölöe
 

123 
	$bpf_èû_ˇŒ_°©ic
(*
˘x
, c⁄° *
m≠
, c⁄° 
__u32
 
¶Ÿ
)

125 i‡(!
	`__buûtö_c⁄°™t_p
(
¶Ÿ
))

126 
	`__bpf_uƒóchabÀ
();

141 
asm
 volatile("r1 = %[ctx]\n\t"

145 :: [
˘x
]"r"(˘x), [
m≠
]"r"(m≠), [
¶Ÿ
]"i"(slot)

147 
	}
}

154 
	sbpf_m≠_def
 {

155 
	mty≥
;

156 
	mkey_size
;

157 
	mvÆue_size
;

158 
	mmax_íåõs
;

159 
	mm≠_Êags
;

160 } 
__©åibuã__
((
dïªˇãd
("use BTF-defined maps in .maps section")));

162 
	elibbpf_pö_ty≥
 {

163 
	mLIBBPF_PIN_NONE
,

165 
	mLIBBPF_PIN_BY_NAME
,

168 
	elibbpf_åi°©e
 {

169 
	mTRI_NO
 = 0,

170 
	mTRI_YES
 = 1,

171 
	mTRI_MODULE
 = 2,

174 
	#__kc⁄fig
 
	`__©åibuã__
((
	`£˘i⁄
(".kc⁄fig")))

	)

175 
	#__ksym
 
	`__©åibuã__
((
	`£˘i⁄
(".ksyms")))

	)

176 
	#__k±r
 
	`__©åibuã__
((
	`btf_ty≥_èg
("k±r")))

	)

177 
	#__k±r_ªf
 
	`__©åibuã__
((
	`btf_ty≥_èg
("k±r_ªf")))

	)

179 #i‚de‡
___bpf_c⁄ˇt


180 
	#___bpf_c⁄ˇt
(
a
, 
b
Ë®## 
	)
b

182 #i‚de‡
___bpf_≠∂y


183 
	#___bpf_≠∂y
(
‚
, 
n
Ë
	`___bpf_c⁄ˇt
(‚,Ç)

	)

185 #i‚de‡
___bpf_¡h


186 
	#___bpf_¡h
(
_
, 
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_a
, 
_b
, 
_c
, 
N
, ...Ë
	)
N

188 #i‚de‡
___bpf_«rg


189 
	#___bpf_«rg
(...) \

190 
	`___bpf_¡h
(
_
, ##
__VA_ARGS__
, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

	)

193 
	#___bpf_fûl0
(
¨r
, 
p
, 
x
Ëdÿ{} 0)

	)

194 
	#___bpf_fûl1
(
¨r
, 
p
, 
x
Ë¨r[p] = 
	)
x

195 
	#___bpf_fûl2
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl1
◊º,Ö + 1,árgs)

	)

196 
	#___bpf_fûl3
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl2
◊º,Ö + 1,árgs)

	)

197 
	#___bpf_fûl4
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl3
◊º,Ö + 1,árgs)

	)

198 
	#___bpf_fûl5
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl4
◊º,Ö + 1,árgs)

	)

199 
	#___bpf_fûl6
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl5
◊º,Ö + 1,árgs)

	)

200 
	#___bpf_fûl7
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl6
◊º,Ö + 1,árgs)

	)

201 
	#___bpf_fûl8
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl7
◊º,Ö + 1,árgs)

	)

202 
	#___bpf_fûl9
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl8
◊º,Ö + 1,árgs)

	)

203 
	#___bpf_fûl10
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl9
◊º,Ö + 1,árgs)

	)

204 
	#___bpf_fûl11
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl10
◊º,Ö + 1,árgs)

	)

205 
	#___bpf_fûl12
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl11
◊º,Ö + 1,árgs)

	)

206 
	#___bpf_fûl
(
¨r
, 
¨gs
...) \

207 
	`___bpf_≠∂y
(
___bpf_fûl
, 
	`___bpf_«rg
(
¨gs
))(
¨r
, 0,árgs)

	)

213 
	#BPF_SEQ_PRINTF
(
£q
, 
fmt
, 
¨gs
...) \

215 c⁄° 
___fmt
[] = 
fmt
; \

216 
___∑øm
[
	`___bpf_«rg
(
¨gs
)]; \

218 
	`_Pøgma
("GCC diagnosticÖush") \

219 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

220 
	`___bpf_fûl
(
___∑øm
, 
¨gs
); \

221 
	`_Pøgma
("GCC diagnosticÖop") \

223 
	`bpf_£q_¥ötf
(
£q
, 
___fmt
, (___fmt), \

224 
___∑øm
, (___param)); \

225 })

	)

231 
	#BPF_SNPRINTF
(
out
, 
out_size
, 
fmt
, 
¨gs
...) \

233 c⁄° 
___fmt
[] = 
fmt
; \

234 
___∑øm
[
	`___bpf_«rg
(
¨gs
)]; \

236 
	`_Pøgma
("GCC diagnosticÖush") \

237 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

238 
	`___bpf_fûl
(
___∑øm
, 
¨gs
); \

239 
	`_Pøgma
("GCC diagnosticÖop") \

241 
	`bpf_¢¥ötf
(
out
, 
out_size
, 
___fmt
, \

242 
___∑øm
, (___param)); \

243 })

	)

245 #ifde‡
BPF_NO_GLOBAL_DATA


246 
	#BPF_PRINTK_FMT_MOD


	)

248 
	#BPF_PRINTK_FMT_MOD
 c⁄°

	)

251 
	#__bpf_¥ötk
(
fmt
, ...) \

253 
BPF_PRINTK_FMT_MOD
 
____fmt
[] = 
fmt
; \

254 
	`bpf_åa˚_¥ötk
(
____fmt
, (____fmt), \

255 ##
__VA_ARGS__
); \

256 })

	)

262 
	#__bpf_v¥ötk
(
fmt
, 
¨gs
...) \

264 c⁄° 
___fmt
[] = 
fmt
; \

265 
___∑øm
[
	`___bpf_«rg
(
¨gs
)]; \

267 
	`_Pøgma
("GCC diagnosticÖush") \

268 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

269 
	`___bpf_fûl
(
___∑øm
, 
¨gs
); \

270 
	`_Pøgma
("GCC diagnosticÖop") \

272 
	`bpf_åa˚_v¥ötk
(
___fmt
, (___fmt), \

273 
___∑øm
, (___param)); \

274 })

	)

279 
	#___bpf_pick_¥ötk
(...) \

280 
	`___bpf_¡h
(
_
, ##
__VA_ARGS__
, 
__bpf_v¥ötk
, __bpf_vprintk, __bpf_vprintk, \

281 
__bpf_v¥ötk
, __bpf_vprintk, __bpf_vprintk, __bpf_vprintk, \

282 
__bpf_v¥ötk
, __bpf_v¥ötk, 
__bpf_¥ötk
 , __bpf_printk ,\

283 
__bpf_¥ötk
 , __bpf_¥ötk )

	)

286 
	#bpf_¥ötk
(
fmt
, 
¨gs
...Ë
	`___bpf_pick_¥ötk
◊rgs)(fmt, ##¨gs)

	)

	@bpf_prog_linfo.c

4 
	~<°rög.h
>

5 
	~<°dlib.h
>

6 
	~<löux/îr.h
>

7 
	~<löux/bpf.h
>

8 
	~"libbpf.h
"

9 
	~"libbpf_öã∫Æ.h
"

11 
	sbpf_¥og_löfo
 {

12 *
	møw_löfo
;

13 *
	møw_jôed_löfo
;

14 
__u32
 *
	mƒ_jôed_löfo_≥r_func
;

15 
__u32
 *
	mjôed_löfo_func_idx
;

16 
__u32
 
	mƒ_löfo
;

17 
__u32
 
	mƒ_jôed_func
;

18 
__u32
 
	mªc_size
;

19 
__u32
 
	mjôed_ªc_size
;

22 
	$dis£˘_jôed_func
(
bpf_¥og_löfo
 *
¥og_löfo
,

23 c⁄° 
__u64
 *
ksym_func
, c⁄° 
__u32
 *
ksym_Àn
)

25 
__u32
 
ƒ_jôed_func
, 
ƒ_löfo
;

26 c⁄° *
øw_jôed_löfo
;

27 c⁄° 
__u64
 *
jôed_löfo
;

28 
__u64
 
œ°_jôed_löfo
;

34 
__u32
 
i
, 
¥ev_i
;

35 
__u32
 
f
;

37 
øw_jôed_löfo
 = 
¥og_löfo
->raw_jited_linfo;

38 
jôed_löfo
 = 
øw_jôed_löfo
;

39 i‡(
ksym_func
[0] !*
jôed_löfo
)

40 
îrout
;

42 
¥og_löfo
->
jôed_löfo_func_idx
[0] = 0;

43 
ƒ_jôed_func
 = 
¥og_löfo
->nr_jited_func;

44 
ƒ_löfo
 = 
¥og_löfo
->nr_linfo;

46 
¥ev_i
 = 0, 
i
 = 1, 
f
 = 1;

47 
i
 < 
ƒ_löfo
 && 
f
 < 
ƒ_jôed_func
;

48 
i
++) {

49 
øw_jôed_löfo
 +
¥og_löfo
->
jôed_ªc_size
;

50 
œ°_jôed_löfo
 = *
jôed_löfo
;

51 
jôed_löfo
 = 
øw_jôed_löfo
;

53 i‡(
ksym_func
[
f
] =*
jôed_löfo
) {

54 
¥og_löfo
->
jôed_löfo_func_idx
[
f
] = 
i
;

57 i‡(
œ°_jôed_löfo
 - 
ksym_func
[
f
 - 1] + 1 >

58 
ksym_Àn
[
f
 - 1])

59 
îrout
;

61 
¥og_löfo
->
ƒ_jôed_löfo_≥r_func
[
f
 - 1] =

62 
i
 - 
¥ev_i
;

63 
¥ev_i
 = 
i
;

69 
f
++;

70 } i‡(*
jôed_löfo
 <
œ°_jôed_löfo
) {

72 
îrout
;

76 i‡(
f
 !
ƒ_jôed_func
)

77 
îrout
;

79 
¥og_löfo
->
ƒ_jôed_löfo_≥r_func
[
ƒ_jôed_func
 - 1] =

80 
ƒ_löfo
 - 
¥ev_i
;

84 
îrout
:

85  -
EINVAL
;

86 
	}
}

88 
	$bpf_¥og_löfo__‰ì
(
bpf_¥og_löfo
 *
¥og_löfo
)

90 i‡(!
¥og_löfo
)

93 
	`‰ì
(
¥og_löfo
->
øw_löfo
);

94 
	`‰ì
(
¥og_löfo
->
øw_jôed_löfo
);

95 
	`‰ì
(
¥og_löfo
->
ƒ_jôed_löfo_≥r_func
);

96 
	`‰ì
(
¥og_löfo
->
jôed_löfo_func_idx
);

97 
	`‰ì
(
¥og_löfo
);

98 
	}
}

100 
bpf_¥og_löfo
 *
	$bpf_¥og_löfo__√w
(c⁄° 
bpf_¥og_öfo
 *
öfo
)

102 
bpf_¥og_löfo
 *
¥og_löfo
;

103 
__u32
 
ƒ_löfo
, 
ƒ_jôed_func
;

104 
__u64
 
d©a_sz
;

106 
ƒ_löfo
 = 
öfo
->
ƒ_löe_öfo
;

108 i‡(!
ƒ_löfo
)

109  
î∫o
 = 
EINVAL
, 
NULL
;

115 i‡(
öfo
->
löe_öfo_ªc_size
 <

116 
	`off£tof
(
bpf_löe_öfo
, 
fûe_«me_off
))

117  
î∫o
 = 
EINVAL
, 
NULL
;

119 
¥og_löfo
 = 
	`ˇŒoc
(1, (*prog_linfo));

120 i‡(!
¥og_löfo
)

121  
î∫o
 = 
ENOMEM
, 
NULL
;

124 
¥og_löfo
->
ƒ_löfo
 =Çr_linfo;

125 
¥og_löfo
->
ªc_size
 = 
öfo
->
löe_öfo_ªc_size
;

126 
d©a_sz
 = (
__u64
)
ƒ_löfo
 * 
¥og_löfo
->
ªc_size
;

127 
¥og_löfo
->
øw_löfo
 = 
	`mÆloc
(
d©a_sz
);

128 i‡(!
¥og_löfo
->
øw_löfo
)

129 
îr_‰ì
;

130 
	`mem˝y
(
¥og_löfo
->
øw_löfo
, (*)()
öfo
->
löe_öfo
, 
d©a_sz
);

132 
ƒ_jôed_func
 = 
öfo
->
ƒ_jôed_ksyms
;

133 i‡(!
ƒ_jôed_func
 ||

134 !
öfo
->
jôed_löe_öfo
 ||

135 
öfo
->
ƒ_jôed_löe_öfo
 !
ƒ_löfo
 ||

136 
öfo
->
jôed_löe_öfo_ªc_size
 < (
__u64
) ||

137 
öfo
->
ƒ_jôed_func_Àns
 !
ƒ_jôed_func
 ||

138 !
öfo
->
jôed_ksyms
 ||

139 !
öfo
->
jôed_func_Àns
)

141  
¥og_löfo
;

144 
¥og_löfo
->
ƒ_jôed_func
 =Çr_jited_func;

145 
¥og_löfo
->
jôed_ªc_size
 = 
öfo
->
jôed_löe_öfo_ªc_size
;

146 
d©a_sz
 = (
__u64
)
ƒ_löfo
 * 
¥og_löfo
->
jôed_ªc_size
;

147 
¥og_löfo
->
øw_jôed_löfo
 = 
	`mÆloc
(
d©a_sz
);

148 i‡(!
¥og_löfo
->
øw_jôed_löfo
)

149 
îr_‰ì
;

150 
	`mem˝y
(
¥og_löfo
->
øw_jôed_löfo
,

151 (*)()
öfo
->
jôed_löe_öfo
, 
d©a_sz
);

154 
¥og_löfo
->
ƒ_jôed_löfo_≥r_func
 = 
	`mÆloc
(
ƒ_jôed_func
 *

155 (
__u32
));

156 i‡(!
¥og_löfo
->
ƒ_jôed_löfo_≥r_func
)

157 
îr_‰ì
;

163 
¥og_löfo
->
jôed_löfo_func_idx
 = 
	`mÆloc
(
ƒ_jôed_func
 *

164 (
__u32
));

165 i‡(!
¥og_löfo
->
jôed_löfo_func_idx
)

166 
îr_‰ì
;

168 i‡(
	`dis£˘_jôed_func
(
¥og_löfo
,

169 (
__u64
 *)()
öfo
->
jôed_ksyms
,

170 (
__u32
 *)()
öfo
->
jôed_func_Àns
))

171 
îr_‰ì
;

173  
¥og_löfo
;

175 
îr_‰ì
:

176 
	`bpf_¥og_löfo__‰ì
(
¥og_löfo
);

177  
î∫o
 = 
EINVAL
, 
NULL
;

178 
	}
}

180 c⁄° 
bpf_löe_öfo
 *

181 
	$bpf_¥og_löfo__lföd_addr_func
(c⁄° 
bpf_¥og_löfo
 *
¥og_löfo
,

182 
__u64
 
addr
, 
__u32
 
func_idx
, __u32 
ƒ_skù
)

184 
__u32
 
jôed_ªc_size
, 
ªc_size
, 
ƒ_löfo
, 
°¨t
, 
i
;

185 c⁄° *
øw_jôed_löfo
, *
øw_löfo
;

186 c⁄° 
__u64
 *
jôed_löfo
;

188 i‡(
func_idx
 >
¥og_löfo
->
ƒ_jôed_func
)

189  
î∫o
 = 
ENOENT
, 
NULL
;

191 
ƒ_löfo
 = 
¥og_löfo
->
ƒ_jôed_löfo_≥r_func
[
func_idx
];

192 i‡(
ƒ_skù
 >
ƒ_löfo
)

193  
î∫o
 = 
ENOENT
, 
NULL
;

195 
°¨t
 = 
¥og_löfo
->
jôed_löfo_func_idx
[
func_idx
] + 
ƒ_skù
;

196 
jôed_ªc_size
 = 
¥og_löfo
->jited_rec_size;

197 
øw_jôed_löfo
 = 
¥og_löfo
->raw_jited_linfo +

198 (
°¨t
 * 
jôed_ªc_size
);

199 
jôed_löfo
 = 
øw_jôed_löfo
;

200 i‡(
addr
 < *
jôed_löfo
)

201  
î∫o
 = 
ENOENT
, 
NULL
;

203 
ƒ_löfo
 -
ƒ_skù
;

204 
ªc_size
 = 
¥og_löfo
->rec_size;

205 
øw_löfo
 = 
¥og_löfo
->øw_löfÿ+ (
°¨t
 * 
ªc_size
);

206 
i
 = 0; i < 
ƒ_löfo
; i++) {

207 i‡(
addr
 < *
jôed_löfo
)

210 
øw_löfo
 +
ªc_size
;

211 
øw_jôed_löfo
 +
jôed_ªc_size
;

212 
jôed_löfo
 = 
øw_jôed_löfo
;

215  
øw_löfo
 - 
ªc_size
;

216 
	}
}

218 c⁄° 
bpf_löe_öfo
 *

219 
	$bpf_¥og_löfo__lföd
(c⁄° 
bpf_¥og_löfo
 *
¥og_löfo
,

220 
__u32
 
ö¢_off
, __u32 
ƒ_skù
)

222 c⁄° 
bpf_löe_öfo
 *
löfo
;

223 
__u32
 
ªc_size
, 
ƒ_löfo
, 
i
;

224 c⁄° *
øw_löfo
;

226 
ƒ_löfo
 = 
¥og_löfo
->nr_linfo;

227 i‡(
ƒ_skù
 >
ƒ_löfo
)

228  
î∫o
 = 
ENOENT
, 
NULL
;

230 
ªc_size
 = 
¥og_löfo
->rec_size;

231 
øw_löfo
 = 
¥og_löfo
->øw_löfÿ+ (
ƒ_skù
 * 
ªc_size
);

232 
löfo
 = 
øw_löfo
;

233 i‡(
ö¢_off
 < 
löfo
->insn_off)

234  
î∫o
 = 
ENOENT
, 
NULL
;

236 
ƒ_löfo
 -
ƒ_skù
;

237 
i
 = 0; i < 
ƒ_löfo
; i++) {

238 i‡(
ö¢_off
 < 
löfo
->insn_off)

241 
øw_löfo
 +
ªc_size
;

242 
löfo
 = 
øw_löfo
;

245  
øw_löfo
 - 
ªc_size
;

246 
	}
}

	@bpf_tracing.h

2 #i‚de‡
__BPF_TRACING_H__


3 
	#__BPF_TRACING_H__


	)

6 #i‡
deföed
(
__TARGET_ARCH_x86
)

7 
	#bpf_èrgë_x86


	)

8 
	#bpf_èrgë_deföed


	)

9 #ñi‡
deföed
(
__TARGET_ARCH_s390
)

10 
	#bpf_èrgë_s390


	)

11 
	#bpf_èrgë_deföed


	)

12 #ñi‡
deföed
(
__TARGET_ARCH_¨m
)

13 
	#bpf_èrgë_¨m


	)

14 
	#bpf_èrgë_deföed


	)

15 #ñi‡
deföed
(
__TARGET_ARCH_¨m64
)

16 
	#bpf_èrgë_¨m64


	)

17 
	#bpf_èrgë_deföed


	)

18 #ñi‡
deföed
(
__TARGET_ARCH_mùs
)

19 
	#bpf_èrgë_mùs


	)

20 
	#bpf_èrgë_deföed


	)

21 #ñi‡
deföed
(
__TARGET_ARCH_powîpc
)

22 
	#bpf_èrgë_powîpc


	)

23 
	#bpf_èrgë_deföed


	)

24 #ñi‡
deföed
(
__TARGET_ARCH_•¨c
)

25 
	#bpf_èrgë_•¨c


	)

26 
	#bpf_èrgë_deföed


	)

27 #ñi‡
deföed
(
__TARGET_ARCH_riscv
)

28 
	#bpf_èrgë_riscv


	)

29 
	#bpf_èrgë_deföed


	)

30 #ñi‡
deföed
(
__TARGET_ARCH_¨c
)

31 
	#bpf_èrgë_¨c


	)

32 
	#bpf_èrgë_deföed


	)

36 #i‡
deföed
(
__x86_64__
)

37 
	#bpf_èrgë_x86


	)

38 
	#bpf_èrgë_deföed


	)

39 #ñi‡
deföed
(
__s390__
)

40 
	#bpf_èrgë_s390


	)

41 
	#bpf_èrgë_deföed


	)

42 #ñi‡
deföed
(
__¨m__
)

43 
	#bpf_èrgë_¨m


	)

44 
	#bpf_èrgë_deföed


	)

45 #ñi‡
deföed
(
__Ørch64__
)

46 
	#bpf_èrgë_¨m64


	)

47 
	#bpf_èrgë_deföed


	)

48 #ñi‡
deföed
(
__mùs__
)

49 
	#bpf_èrgë_mùs


	)

50 
	#bpf_èrgë_deföed


	)

51 #ñi‡
deföed
(
__powîpc__
)

52 
	#bpf_èrgë_powîpc


	)

53 
	#bpf_èrgë_deföed


	)

54 #ñi‡
deföed
(
__•¨c__
)

55 
	#bpf_èrgë_•¨c


	)

56 
	#bpf_èrgë_deföed


	)

57 #ñi‡
deföed
(
__riscv
Ë&& 
__riscv_xÀn
 == 64

58 
	#bpf_èrgë_riscv


	)

59 
	#bpf_èrgë_deföed


	)

60 #ñi‡
deföed
(
__¨c__
)

61 
	#bpf_èrgë_¨c


	)

62 
	#bpf_èrgë_deföed


	)

67 #i‚de‡
__BPF_TARGET_MISSING


68 
	#__BPF_TARGET_MISSING
 "GCCÉº‹ \"Mu° s≥cifyá BPFÅ¨gëárch vü __TARGET_ARCH_xxx\""

	)

71 #i‡
deföed
(
bpf_èrgë_x86
)

73 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__VMLINUX_H__
)

75 
	#__PT_PARM1_REG
 
di


	)

76 
	#__PT_PARM2_REG
 
si


	)

77 
	#__PT_PARM3_REG
 
dx


	)

78 
	#__PT_PARM4_REG
 
cx


	)

79 
	#__PT_PARM5_REG
 
r8


	)

80 
	#__PT_RET_REG
 
•


	)

81 
	#__PT_FP_REG
 
bp


	)

82 
	#__PT_RC_REG
 
ax


	)

83 
	#__PT_SP_REG
 
•


	)

84 
	#__PT_IP_REG
 
ù


	)

86 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë((x)->
r10
)

	)

87 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
(x, 
r10
)

	)

91 #ifde‡
__i386__


93 
	#__PT_PARM1_REG
 
óx


	)

94 
	#__PT_PARM2_REG
 
edx


	)

95 
	#__PT_PARM3_REG
 
ecx


	)

97 
	#__PT_PARM4_REG
 
__unsuµ‹ãd__


	)

98 
	#__PT_PARM5_REG
 
__unsuµ‹ãd__


	)

99 
	#__PT_RET_REG
 
e•


	)

100 
	#__PT_FP_REG
 
ebp


	)

101 
	#__PT_RC_REG
 
óx


	)

102 
	#__PT_SP_REG
 
e•


	)

103 
	#__PT_IP_REG
 
eù


	)

107 
	#__PT_PARM1_REG
 
rdi


	)

108 
	#__PT_PARM2_REG
 
rsi


	)

109 
	#__PT_PARM3_REG
 
rdx


	)

110 
	#__PT_PARM4_REG
 
rcx


	)

111 
	#__PT_PARM5_REG
 
r8


	)

112 
	#__PT_RET_REG
 
r•


	)

113 
	#__PT_FP_REG
 
rbp


	)

114 
	#__PT_RC_REG
 
øx


	)

115 
	#__PT_SP_REG
 
r•


	)

116 
	#__PT_IP_REG
 
rù


	)

118 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë((x)->
r10
)

	)

119 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
(x, 
r10
)

	)

125 #ñi‡
deföed
(
bpf_èrgë_s390
)

127 
	s±_ªgs___s390
 {

128 
	m‹ig_g¥2
;

132 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_±_ªgs
 *)(x))

	)

133 
	#__PT_PARM1_REG
 
g¥s
[2]

	)

134 
	#__PT_PARM2_REG
 
g¥s
[3]

	)

135 
	#__PT_PARM3_REG
 
g¥s
[4]

	)

136 
	#__PT_PARM4_REG
 
g¥s
[5]

	)

137 
	#__PT_PARM5_REG
 
g¥s
[6]

	)

138 
	#__PT_RET_REG
 
gΩs
[14]

	)

139 
	#__PT_FP_REG
 
g¥s
[11]

	)

140 
	#__PT_RC_REG
 
g¥s
[2]

	)

141 
	#__PT_SP_REG
 
g¥s
[15]

	)

142 
	#__PT_IP_REG
 
psw
.
addr


	)

143 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë({ 
	`_Pøgma
("GCCÉº‹ \"u£ PT_REGS_PARM1_CORE_SYSCALL(Ëö°ód\""); 0l; })

	)

144 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
((c⁄° 
±_ªgs___s390
 *)(x), 
‹ig_g¥2
)

	)

146 #ñi‡
deföed
(
bpf_èrgë_¨m
)

148 
	#__PT_PARM1_REG
 
uªgs
[0]

	)

149 
	#__PT_PARM2_REG
 
uªgs
[1]

	)

150 
	#__PT_PARM3_REG
 
uªgs
[2]

	)

151 
	#__PT_PARM4_REG
 
uªgs
[3]

	)

152 
	#__PT_PARM5_REG
 
uªgs
[4]

	)

153 
	#__PT_RET_REG
 
uªgs
[14]

	)

154 
	#__PT_FP_REG
 
uªgs
[11]

	)

155 
	#__PT_RC_REG
 
uªgs
[0]

	)

156 
	#__PT_SP_REG
 
uªgs
[13]

	)

157 
	#__PT_IP_REG
 
uªgs
[12]

	)

159 #ñi‡
deföed
(
bpf_èrgë_¨m64
)

161 
	s±_ªgs___¨m64
 {

162 
	m‹ig_x0
;

166 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_±_ªgs
 *)(x))

	)

167 
	#__PT_PARM1_REG
 
ªgs
[0]

	)

168 
	#__PT_PARM2_REG
 
ªgs
[1]

	)

169 
	#__PT_PARM3_REG
 
ªgs
[2]

	)

170 
	#__PT_PARM4_REG
 
ªgs
[3]

	)

171 
	#__PT_PARM5_REG
 
ªgs
[4]

	)

172 
	#__PT_RET_REG
 
ªgs
[30]

	)

173 
	#__PT_FP_REG
 
ªgs
[29]

	)

174 
	#__PT_RC_REG
 
ªgs
[0]

	)

175 
	#__PT_SP_REG
 
•


	)

176 
	#__PT_IP_REG
 
pc


	)

177 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë({ 
	`_Pøgma
("GCCÉº‹ \"u£ PT_REGS_PARM1_CORE_SYSCALL(Ëö°ód\""); 0l; })

	)

178 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
((c⁄° 
±_ªgs___¨m64
 *)(x), 
‹ig_x0
)

	)

180 #ñi‡
deföed
(
bpf_èrgë_mùs
)

182 
	#__PT_PARM1_REG
 
ªgs
[4]

	)

183 
	#__PT_PARM2_REG
 
ªgs
[5]

	)

184 
	#__PT_PARM3_REG
 
ªgs
[6]

	)

185 
	#__PT_PARM4_REG
 
ªgs
[7]

	)

186 
	#__PT_PARM5_REG
 
ªgs
[8]

	)

187 
	#__PT_RET_REG
 
ªgs
[31]

	)

188 
	#__PT_FP_REG
 
ªgs
[30]

	)

189 
	#__PT_RC_REG
 
ªgs
[2]

	)

190 
	#__PT_SP_REG
 
ªgs
[29]

	)

191 
	#__PT_IP_REG
 
˝0_ïc


	)

193 #ñi‡
deföed
(
bpf_èrgë_powîpc
)

195 
	#__PT_PARM1_REG
 
g¥
[3]

	)

196 
	#__PT_PARM2_REG
 
g¥
[4]

	)

197 
	#__PT_PARM3_REG
 
g¥
[5]

	)

198 
	#__PT_PARM4_REG
 
g¥
[6]

	)

199 
	#__PT_PARM5_REG
 
g¥
[7]

	)

200 
	#__PT_RET_REG
 
ªgs
[31]

	)

201 
	#__PT_FP_REG
 
__unsuµ‹ãd__


	)

202 
	#__PT_RC_REG
 
g¥
[3]

	)

203 
	#__PT_SP_REG
 
•


	)

204 
	#__PT_IP_REG
 
nù


	)

206 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë
	)
ctx

208 #ñi‡
deföed
(
bpf_èrgë_•¨c
)

210 
	#__PT_PARM1_REG
 
u_ªgs
[
UREG_I0
]

	)

211 
	#__PT_PARM2_REG
 
u_ªgs
[
UREG_I1
]

	)

212 
	#__PT_PARM3_REG
 
u_ªgs
[
UREG_I2
]

	)

213 
	#__PT_PARM4_REG
 
u_ªgs
[
UREG_I3
]

	)

214 
	#__PT_PARM5_REG
 
u_ªgs
[
UREG_I4
]

	)

215 
	#__PT_RET_REG
 
u_ªgs
[
UREG_I7
]

	)

216 
	#__PT_FP_REG
 
__unsuµ‹ãd__


	)

217 
	#__PT_RC_REG
 
u_ªgs
[
UREG_I0
]

	)

218 
	#__PT_SP_REG
 
u_ªgs
[
UREG_FP
]

	)

220 #i‡
deföed
(
__¨ch64__
)

221 
	#__PT_IP_REG
 
çc


	)

223 
	#__PT_IP_REG
 
pc


	)

226 #ñi‡
deföed
(
bpf_èrgë_riscv
)

228 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_ªgs_°ru˘
 *)(x))

	)

229 
	#__PT_PARM1_REG
 
a0


	)

230 
	#__PT_PARM2_REG
 
a1


	)

231 
	#__PT_PARM3_REG
 
a2


	)

232 
	#__PT_PARM4_REG
 
a3


	)

233 
	#__PT_PARM5_REG
 
a4


	)

234 
	#__PT_RET_REG
 
ø


	)

235 
	#__PT_FP_REG
 
s0


	)

236 
	#__PT_RC_REG
 
a5


	)

237 
	#__PT_SP_REG
 
•


	)

238 
	#__PT_IP_REG
 
pc


	)

240 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë
	)
ctx

242 #ñi‡
deföed
(
bpf_èrgë_¨c
)

245 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_ªgs_°ru˘
 *)(x))

	)

246 
	#__PT_PARM1_REG
 
s¸©ch
.
r0


	)

247 
	#__PT_PARM2_REG
 
s¸©ch
.
r1


	)

248 
	#__PT_PARM3_REG
 
s¸©ch
.
r2


	)

249 
	#__PT_PARM4_REG
 
s¸©ch
.
r3


	)

250 
	#__PT_PARM5_REG
 
s¸©ch
.
r4


	)

251 
	#__PT_RET_REG
 
s¸©ch
.
blök


	)

252 
	#__PT_FP_REG
 
__unsuµ‹ãd__


	)

253 
	#__PT_RC_REG
 
s¸©ch
.
r0


	)

254 
	#__PT_SP_REG
 
s¸©ch
.
•


	)

255 
	#__PT_IP_REG
 
s¸©ch
.
ªt


	)

257 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë
	)
ctx

261 #i‡
deföed
(
bpf_èrgë_deföed
)

263 
	g±_ªgs
;

266 #i‚de‡
__PT_REGS_CAST


267 
	#__PT_REGS_CAST
(
x
Ë(x)

	)

270 
	#PT_REGS_PARM1
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM1_REG
)

	)

271 
	#PT_REGS_PARM2
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM2_REG
)

	)

272 
	#PT_REGS_PARM3
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM3_REG
)

	)

273 
	#PT_REGS_PARM4
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM4_REG
)

	)

274 
	#PT_REGS_PARM5
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM5_REG
)

	)

275 
	#PT_REGS_RET
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_RET_REG
)

	)

276 
	#PT_REGS_FP
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_FP_REG
)

	)

277 
	#PT_REGS_RC
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_RC_REG
)

	)

278 
	#PT_REGS_SP
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_SP_REG
)

	)

279 
	#PT_REGS_IP
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_IP_REG
)

	)

281 
	#PT_REGS_PARM1_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM1_REG
)

	)

282 
	#PT_REGS_PARM2_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM2_REG
)

	)

283 
	#PT_REGS_PARM3_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM3_REG
)

	)

284 
	#PT_REGS_PARM4_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM4_REG
)

	)

285 
	#PT_REGS_PARM5_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM5_REG
)

	)

286 
	#PT_REGS_RET_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_RET_REG
)

	)

287 
	#PT_REGS_FP_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_FP_REG
)

	)

288 
	#PT_REGS_RC_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_RC_REG
)

	)

289 
	#PT_REGS_SP_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_SP_REG
)

	)

290 
	#PT_REGS_IP_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_IP_REG
)

	)

292 #i‡
deföed
(
bpf_èrgë_powîpc
)

294 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ (ùË(˘x)->
lök
; })

	)

295 
	#BPF_KRETPROBE_READ_RET_IP
 
BPF_KPROBE_READ_RET_IP


	)

297 #ñi‡
deföed
(
bpf_èrgë_•¨c
)

299 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ (ùË
	`PT_REGS_RET
(˘x); })

	)

300 
	#BPF_KRETPROBE_READ_RET_IP
 
BPF_KPROBE_READ_RET_IP


	)

304 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
) \

305 ({ 
	`bpf_¥obe_ªad_kî√l
(&(
ù
), (ù), (*)
	`PT_REGS_RET
(
˘x
)); })

	)

306 
	#BPF_KRETPROBE_READ_RET_IP
(
ù
, 
˘x
) \

307 ({ 
	`bpf_¥obe_ªad_kî√l
(&(
ù
), (ù), (*)(
	`PT_REGS_FP
(
˘x
Ë+ (ù))); })

	)

311 #i‚de‡
PT_REGS_PARM1_SYSCALL


312 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë
	`PT_REGS_PARM1
(x)

	)

314 
	#PT_REGS_PARM2_SYSCALL
(
x
Ë
	`PT_REGS_PARM2
(x)

	)

315 
	#PT_REGS_PARM3_SYSCALL
(
x
Ë
	`PT_REGS_PARM3
(x)

	)

316 #i‚de‡
PT_REGS_PARM4_SYSCALL


317 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë
	`PT_REGS_PARM4
(x)

	)

319 
	#PT_REGS_PARM5_SYSCALL
(
x
Ë
	`PT_REGS_PARM5
(x)

	)

321 #i‚de‡
PT_REGS_PARM1_CORE_SYSCALL


322 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM1_CORE
(x)

	)

324 
	#PT_REGS_PARM2_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM2_CORE
(x)

	)

325 
	#PT_REGS_PARM3_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM3_CORE
(x)

	)

326 #i‚de‡
PT_REGS_PARM4_CORE_SYSCALL


327 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM4_CORE
(x)

	)

329 
	#PT_REGS_PARM5_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM5_CORE
(x)

	)

333 
	#PT_REGS_PARM1
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

334 
	#PT_REGS_PARM2
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

335 
	#PT_REGS_PARM3
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

336 
	#PT_REGS_PARM4
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

337 
	#PT_REGS_PARM5
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

338 
	#PT_REGS_RET
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

339 
	#PT_REGS_FP
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

340 
	#PT_REGS_RC
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

341 
	#PT_REGS_SP
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

342 
	#PT_REGS_IP
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

344 
	#PT_REGS_PARM1_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

345 
	#PT_REGS_PARM2_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

346 
	#PT_REGS_PARM3_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

347 
	#PT_REGS_PARM4_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

348 
	#PT_REGS_PARM5_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

349 
	#PT_REGS_RET_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

350 
	#PT_REGS_FP_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

351 
	#PT_REGS_RC_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

352 
	#PT_REGS_SP_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

353 
	#PT_REGS_IP_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

355 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

356 
	#BPF_KRETPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

358 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

359 
	#PT_REGS_PARM2_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

360 
	#PT_REGS_PARM3_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

361 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

362 
	#PT_REGS_PARM5_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

364 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

365 
	#PT_REGS_PARM2_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

366 
	#PT_REGS_PARM3_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

367 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

368 
	#PT_REGS_PARM5_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

377 #i‚de‡
PT_REGS_SYSCALL_REGS


379 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë((
±_ªgs
 *)
	`PT_REGS_PARM1
(˘x))

	)

382 #i‚de‡
___bpf_c⁄ˇt


383 
	#___bpf_c⁄ˇt
(
a
, 
b
Ë®## 
	)
b

385 #i‚de‡
___bpf_≠∂y


386 
	#___bpf_≠∂y
(
‚
, 
n
Ë
	`___bpf_c⁄ˇt
(‚,Ç)

	)

388 #i‚de‡
___bpf_¡h


389 
	#___bpf_¡h
(
_
, 
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_a
, 
_b
, 
_c
, 
N
, ...Ë
	)
N

391 #i‚de‡
___bpf_«rg


392 
	#___bpf_«rg
(...Ë
	`___bpf_¡h
(
_
, ##
__VA_ARGS__
, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

	)

395 
	#___bpf_˘x_ˇ°0
(Ë
˘x


	)

396 
	#___bpf_˘x_ˇ°1
(
x
Ë
	`___bpf_˘x_ˇ°0
(), (*)
˘x
[0]

	)

397 
	#___bpf_˘x_ˇ°2
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°1
◊rgs), (*)
˘x
[1]

	)

398 
	#___bpf_˘x_ˇ°3
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°2
◊rgs), (*)
˘x
[2]

	)

399 
	#___bpf_˘x_ˇ°4
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°3
◊rgs), (*)
˘x
[3]

	)

400 
	#___bpf_˘x_ˇ°5
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°4
◊rgs), (*)
˘x
[4]

	)

401 
	#___bpf_˘x_ˇ°6
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°5
◊rgs), (*)
˘x
[5]

	)

402 
	#___bpf_˘x_ˇ°7
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°6
◊rgs), (*)
˘x
[6]

	)

403 
	#___bpf_˘x_ˇ°8
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°7
◊rgs), (*)
˘x
[7]

	)

404 
	#___bpf_˘x_ˇ°9
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°8
◊rgs), (*)
˘x
[8]

	)

405 
	#___bpf_˘x_ˇ°10
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°9
◊rgs), (*)
˘x
[9]

	)

406 
	#___bpf_˘x_ˇ°11
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°10
◊rgs), (*)
˘x
[10]

	)

407 
	#___bpf_˘x_ˇ°12
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°11
◊rgs), (*)
˘x
[11]

	)

408 
	#___bpf_˘x_ˇ°
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_˘x_ˇ°
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

425 
	#BPF_PROG
(
«me
, 
¨gs
...) \

426 
	`«me
(*
˘x
); \

427 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

428 
____
##
	`«me
(*
˘x
, ##
¨gs
); \

429 
	`ty≥of
(
	`«me
(0)Ë«me(*
˘x
) \

431 
	`_Pøgma
("GCC diagnosticÖush") \

432 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

433  
____
##
	`«me
(
	`___bpf_˘x_ˇ°
(
¨gs
)); \

434 
	`_Pøgma
("GCC diagnosticÖop") \

436 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

437 
____
##
	`«me
(*
˘x
, ##
¨gs
)

	)

439 
	g±_ªgs
;

441 
	#___bpf_k¥obe_¨gs0
(Ë
˘x


	)

442 
	#___bpf_k¥obe_¨gs1
(
x
Ë
	`___bpf_k¥obe_¨gs0
(), (*)
	`PT_REGS_PARM1
(
˘x
)

	)

443 
	#___bpf_k¥obe_¨gs2
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs1
◊rgs), (*)
	`PT_REGS_PARM2
(
˘x
)

	)

444 
	#___bpf_k¥obe_¨gs3
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs2
◊rgs), (*)
	`PT_REGS_PARM3
(
˘x
)

	)

445 
	#___bpf_k¥obe_¨gs4
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs3
◊rgs), (*)
	`PT_REGS_PARM4
(
˘x
)

	)

446 
	#___bpf_k¥obe_¨gs5
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs4
◊rgs), (*)
	`PT_REGS_PARM5
(
˘x
)

	)

447 
	#___bpf_k¥obe_¨gs
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_k¥obe_¨gs
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

459 
	#BPF_KPROBE
(
«me
, 
¨gs
...) \

460 
	`«me
(
±_ªgs
 *
˘x
); \

461 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

462 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
); \

463 
	`ty≥of
(
	`«me
(0)Ë«me(
±_ªgs
 *
˘x
) \

465 
	`_Pøgma
("GCC diagnosticÖush") \

466 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

467  
____
##
	`«me
(
	`___bpf_k¥obe_¨gs
(
¨gs
)); \

468 
	`_Pøgma
("GCC diagnosticÖop") \

470 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

471 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
)

	)

473 
	#___bpf_kªçrobe_¨gs0
(Ë
˘x


	)

474 
	#___bpf_kªçrobe_¨gs1
(
x
Ë
	`___bpf_kªçrobe_¨gs0
(), (*)
	`PT_REGS_RC
(
˘x
)

	)

475 
	#___bpf_kªçrobe_¨gs
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_kªçrobe_¨gs
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

483 
	#BPF_KRETPROBE
(
«me
, 
¨gs
...) \

484 
	`«me
(
±_ªgs
 *
˘x
); \

485 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

486 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
); \

487 
	`ty≥of
(
	`«me
(0)Ë«me(
±_ªgs
 *
˘x
) \

489 
	`_Pøgma
("GCC diagnosticÖush") \

490 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

491  
____
##
	`«me
(
	`___bpf_kªçrobe_¨gs
(
¨gs
)); \

492 
	`_Pøgma
("GCC diagnosticÖop") \

494 
__Æways_ölöe
 
	`ty≥of
(
	`«me
(0)Ë
____
##«me(
±_ªgs
 *
˘x
, ##
¨gs
)

	)

496 
	#___bpf_sysˇŒ_¨gs0
(Ë
˘x


	)

497 
	#___bpf_sysˇŒ_¨gs1
(
x
Ë
	`___bpf_sysˇŒ_¨gs0
(), (*)
	`PT_REGS_PARM1_CORE_SYSCALL
(
ªgs
)

	)

498 
	#___bpf_sysˇŒ_¨gs2
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs1
◊rgs), (*)
	`PT_REGS_PARM2_CORE_SYSCALL
(
ªgs
)

	)

499 
	#___bpf_sysˇŒ_¨gs3
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs2
◊rgs), (*)
	`PT_REGS_PARM3_CORE_SYSCALL
(
ªgs
)

	)

500 
	#___bpf_sysˇŒ_¨gs4
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs3
◊rgs), (*)
	`PT_REGS_PARM4_CORE_SYSCALL
(
ªgs
)

	)

501 
	#___bpf_sysˇŒ_¨gs5
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs4
◊rgs), (*)
	`PT_REGS_PARM5_CORE_SYSCALL
(
ªgs
)

	)

502 
	#___bpf_sysˇŒ_¨gs
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_sysˇŒ_¨gs
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

516 
	#BPF_KPROBE_SYSCALL
(
«me
, 
¨gs
...) \

517 
	`«me
(
±_ªgs
 *
˘x
); \

518 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

519 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
); \

520 
	`ty≥of
(
	`«me
(0)Ë«me(
±_ªgs
 *
˘x
) \

522 
±_ªgs
 *
ªgs
 = 
	`PT_REGS_SYSCALL_REGS
(
˘x
); \

523 
	`_Pøgma
("GCC diagnosticÖush") \

524 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

525  
____
##
	`«me
(
	`___bpf_sysˇŒ_¨gs
(
¨gs
)); \

526 
	`_Pøgma
("GCC diagnosticÖop") \

528 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

529 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
)

	)

	@btf.c

4 
	~<byãsw≠.h
>

5 
	~<ídün.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	~<f˙é.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<sys/ut¢ame.h
>

13 
	~<sys/∑øm.h
>

14 
	~<sys/°©.h
>

15 
	~<löux/kî√l.h
>

16 
	~<löux/îr.h
>

17 
	~<löux/btf.h
>

18 
	~<gñf.h
>

19 
	~"btf.h
"

20 
	~"bpf.h
"

21 
	~"libbpf.h
"

22 
	~"libbpf_öã∫Æ.h
"

23 
	~"hashm≠.h
"

24 
	~"°r£t.h
"

26 
	#BTF_MAX_NR_TYPES
 0x7fffffffU

	)

27 
	#BTF_MAX_STR_OFFSET
 0x7fffffffU

	)

29 
btf_ty≥
 
	gbtf_void
;

31 
	sbtf
 {

33 *
	møw_d©a
;

35 *
	møw_d©a_sw≠≥d
;

36 
__u32
 
	møw_size
;

38 
boﬁ
 
	msw≠≥d_ídün
;

77 
btf_hódî
 *
	mhdr
;

79 *
	mty≥s_d©a
;

80 
size_t
 
	mty≥s_d©a_ˇp
;

87 
__u32
 *
	mty≥_offs
;

88 
size_t
 
	mty≥_offs_ˇp
;

93 
__u32
 
	mƒ_ty≥s
;

97 
btf
 *
	mba£_btf
;

102 
	m°¨t_id
;

107 
	m°¨t_°r_off
;

113 *
	m°rs_d©a
;

115 
°r£t
 *
	m°rs_£t
;

117 
boﬁ
 
	m°rs_dedu≥d
;

120 
	mfd
;

123 
	m±r_sz
;

126 
ölöe
 
__u64
 
	$±r_to_u64
(c⁄° *
±r
)

128  (
__u64
Ë(Ë
±r
;

129 
	}
}

141 *
	$libbpf_add_mem
(**
d©a
, 
size_t
 *
ˇp_˙t
, size_à
ñem_sz
,

142 
size_t
 
cur_˙t
, size_à
max_˙t
, size_à
add_˙t
)

144 
size_t
 
√w_˙t
;

145 *
√w_d©a
;

147 i‡(
cur_˙t
 + 
add_˙t
 <*
ˇp_˙t
)

148  *
d©a
 + 
cur_˙t
 * 
ñem_sz
;

151 i‡(
cur_˙t
 + 
add_˙t
 > 
max_˙t
)

152  
NULL
;

154 
√w_˙t
 = *
ˇp_˙t
;

155 
√w_˙t
 +=Çew_cnt / 4;

156 i‡(
√w_˙t
 < 16)

157 
√w_˙t
 = 16;

158 i‡(
√w_˙t
 > 
max_˙t
)

159 
√w_˙t
 = 
max_˙t
;

160 i‡(
√w_˙t
 < 
cur_˙t
 + 
add_˙t
)

161 
√w_˙t
 = 
cur_˙t
 + 
add_˙t
;

163 
√w_d©a
 = 
	`libbpf_ªÆloˇºay
(*
d©a
, 
√w_˙t
, 
ñem_sz
);

164 i‡(!
√w_d©a
)

165  
NULL
;

168 
	`mem£t
(
√w_d©a
 + (*
ˇp_˙t
Ë* 
ñem_sz
, 0, (
√w_˙t
 - *cap_cnt) *Élem_sz);

170 *
d©a
 = 
√w_d©a
;

171 *
ˇp_˙t
 = 
√w_˙t
;

172  
√w_d©a
 + 
cur_˙t
 * 
ñem_sz
;

173 
	}
}

178 
	$libbpf_ísuª_mem
(**
d©a
, 
size_t
 *
ˇp_˙t
, size_à
ñem_sz
, size_à
√ed_˙t
)

180 *
p
;

182 i‡(
√ed_˙t
 <*
ˇp_˙t
)

185 
p
 = 
	`libbpf_add_mem
(
d©a
, 
ˇp_˙t
, 
ñem_sz
, *ˇp_˙t, 
SIZE_MAX
, 
√ed_˙t
 - *cap_cnt);

186 i‡(!
p
)

187  -
ENOMEM
;

190 
	}
}

192 *
	$btf_add_ty≥_offs_mem
(
btf
 *btf, 
size_t
 
add_˙t
)

194  
	`libbpf_add_mem
((**)&
btf
->
ty≥_offs
, &btf->
ty≥_offs_ˇp
, (
__u32
),

195 
btf
->
ƒ_ty≥s
, 
BTF_MAX_NR_TYPES
, 
add_˙t
);

196 
	}
}

198 
	$btf_add_ty≥_idx_íåy
(
btf
 *btf, 
__u32
 
ty≥_off
)

200 
__u32
 *
p
;

202 
p
 = 
	`btf_add_ty≥_offs_mem
(
btf
, 1);

203 i‡(!
p
)

204  -
ENOMEM
;

206 *
p
 = 
ty≥_off
;

208 
	}
}

210 
	$btf_bsw≠_hdr
(
btf_hódî
 *
h
)

212 
h
->
magic
 = 
	`bsw≠_16
(h->magic);

213 
h
->
hdr_Àn
 = 
	`bsw≠_32
(h->hdr_len);

214 
h
->
ty≥_off
 = 
	`bsw≠_32
(h->type_off);

215 
h
->
ty≥_Àn
 = 
	`bsw≠_32
(h->type_len);

216 
h
->
°r_off
 = 
	`bsw≠_32
(h->str_off);

217 
h
->
°r_Àn
 = 
	`bsw≠_32
(h->str_len);

218 
	}
}

220 
	$btf_∑r£_hdr
(
btf
 *btf)

222 
btf_hódî
 *
hdr
 = 
btf
->hdr;

223 
__u32
 
mëa_À·
;

225 i‡(
btf
->
øw_size
 < (
btf_hódî
)) {

226 
	`¥_debug
("BTF headerÇot found\n");

227  -
EINVAL
;

230 i‡(
hdr
->
magic
 =
	`bsw≠_16
(
BTF_MAGIC
)) {

231 
btf
->
sw≠≥d_ídün
 = 
åue
;

232 i‡(
	`bsw≠_32
(
hdr
->
hdr_Àn
Ë!(
btf_hódî
)) {

233 
	`¥_w¨n
("Can'tÜoad BTF withÇon-nativeÉndianness dueÅo unsupported headerÜength %u\n",

234 
	`bsw≠_32
(
hdr
->
hdr_Àn
));

235  -
ENOTSUP
;

237 
	`btf_bsw≠_hdr
(
hdr
);

238 } i‡(
hdr
->
magic
 !
BTF_MAGIC
) {

239 
	`¥_debug
("InvÆid BTF magic: %x\n", 
hdr
->
magic
);

240  -
EINVAL
;

243 i‡(
btf
->
øw_size
 < 
hdr
->
hdr_Àn
) {

244 
	`¥_debug
("BTF headerÜen %uÜargerÅhan data size %u\n",

245 
hdr
->
hdr_Àn
, 
btf
->
øw_size
);

246  -
EINVAL
;

249 
mëa_À·
 = 
btf
->
øw_size
 - 
hdr
->
hdr_Àn
;

250 i‡(
mëa_À·
 < ()
hdr
->
°r_off
 + hdr->
°r_Àn
) {

251 
	`¥_debug
("InvÆid BTFÅŸÆ size: %u\n", 
btf
->
øw_size
);

252  -
EINVAL
;

255 i‡(()
hdr
->
ty≥_off
 + hdr->
ty≥_Àn
 > hdr->
°r_off
) {

256 
	`¥_debug
("Invalid BTF data sectionsÜayout:Åype dataát %u + %u, strings dataát %u + %u\n",

257 
hdr
->
ty≥_off
, hdr->
ty≥_Àn
, hdr->
°r_off
, hdr->
°r_Àn
);

258  -
EINVAL
;

261 i‡(
hdr
->
ty≥_off
 % 4) {

262 
	`¥_debug
("BTFÅype section isÇotálignedÅo 4 bytes\n");

263  -
EINVAL
;

267 
	}
}

269 
	$btf_∑r£_°r_£c
(
btf
 *btf)

271 c⁄° 
btf_hódî
 *
hdr
 = 
btf
->hdr;

272 c⁄° *
°¨t
 = 
btf
->
°rs_d©a
;

273 c⁄° *
íd
 = 
°¨t
 + 
btf
->
hdr
->
°r_Àn
;

275 i‡(
btf
->
ba£_btf
 && 
hdr
->
°r_Àn
 == 0)

277 i‡(!
hdr
->
°r_Àn
 || hdr->°r_À¿- 1 > 
BTF_MAX_STR_OFFSET
 || 
íd
[-1]) {

278 
	`¥_debug
("Invalid BTF string section\n");

279  -
EINVAL
;

281 i‡(!
btf
->
ba£_btf
 && 
°¨t
[0]) {

282 
	`¥_debug
("Invalid BTF string section\n");

283  -
EINVAL
;

286 
	}
}

288 
	$btf_ty≥_size
(c⁄° 
btf_ty≥
 *
t
)

290 c⁄° 
ba£_size
 = (
btf_ty≥
);

291 
__u16
 
vÀn
 = 
	`btf_vÀn
(
t
);

293 
	`btf_köd
(
t
)) {

294 
BTF_KIND_FWD
:

295 
BTF_KIND_CONST
:

296 
BTF_KIND_VOLATILE
:

297 
BTF_KIND_RESTRICT
:

298 
BTF_KIND_PTR
:

299 
BTF_KIND_TYPEDEF
:

300 
BTF_KIND_FUNC
:

301 
BTF_KIND_FLOAT
:

302 
BTF_KIND_TYPE_TAG
:

303  
ba£_size
;

304 
BTF_KIND_INT
:

305  
ba£_size
 + (
__u32
);

306 
BTF_KIND_ENUM
:

307  
ba£_size
 + 
vÀn
 * (
btf_íum
);

308 
BTF_KIND_ARRAY
:

309  
ba£_size
 + (
btf_¨øy
);

310 
BTF_KIND_STRUCT
:

311 
BTF_KIND_UNION
:

312  
ba£_size
 + 
vÀn
 * (
btf_membî
);

313 
BTF_KIND_FUNC_PROTO
:

314  
ba£_size
 + 
vÀn
 * (
btf_∑øm
);

315 
BTF_KIND_VAR
:

316  
ba£_size
 + (
btf_v¨
);

317 
BTF_KIND_DATASEC
:

318  
ba£_size
 + 
vÀn
 * (
btf_v¨_£cöfo
);

319 
BTF_KIND_DECL_TAG
:

320  
ba£_size
 + (
btf_de˛_èg
);

322 
	`¥_debug
("Unsuµ‹ãd BTF_KIND:%u\n", 
	`btf_köd
(
t
));

323  -
EINVAL
;

325 
	}
}

327 
	$btf_bsw≠_ty≥_ba£
(
btf_ty≥
 *
t
)

329 
t
->
«me_off
 = 
	`bsw≠_32
(t->name_off);

330 
t
->
öfo
 = 
	`bsw≠_32
(t->info);

331 
t
->
ty≥
 = 
	`bsw≠_32
(t->type);

332 
	}
}

334 
	$btf_bsw≠_ty≥_ª°
(
btf_ty≥
 *
t
)

336 
btf_v¨_£cöfo
 *
v
;

337 
btf_membî
 *
m
;

338 
btf_¨øy
 *
a
;

339 
btf_∑øm
 *
p
;

340 
btf_íum
 *
e
;

341 
__u16
 
vÀn
 = 
	`btf_vÀn
(
t
);

342 
i
;

344 
	`btf_köd
(
t
)) {

345 
BTF_KIND_FWD
:

346 
BTF_KIND_CONST
:

347 
BTF_KIND_VOLATILE
:

348 
BTF_KIND_RESTRICT
:

349 
BTF_KIND_PTR
:

350 
BTF_KIND_TYPEDEF
:

351 
BTF_KIND_FUNC
:

352 
BTF_KIND_FLOAT
:

353 
BTF_KIND_TYPE_TAG
:

355 
BTF_KIND_INT
:

356 *(
__u32
 *)(
t
 + 1Ë
	`bsw≠_32
(*(__u32 *)(t + 1));

358 
BTF_KIND_ENUM
:

359 
i
 = 0, 
e
 = 
	`btf_íum
(
t
); i < 
vÀn
; i++,É++) {

360 
e
->
«me_off
 = 
	`bsw≠_32
(e->name_off);

361 
e
->
vÆ
 = 
	`bsw≠_32
(e->val);

364 
BTF_KIND_ARRAY
:

365 
a
 = 
	`btf_¨øy
(
t
);

366 
a
->
ty≥
 = 
	`bsw≠_32
(a->type);

367 
a
->
ödex_ty≥
 = 
	`bsw≠_32
(a->index_type);

368 
a
->
√Àms
 = 
	`bsw≠_32
(a->nelems);

370 
BTF_KIND_STRUCT
:

371 
BTF_KIND_UNION
:

372 
i
 = 0, 
m
 = 
	`btf_membîs
(
t
); i < 
vÀn
; i++, m++) {

373 
m
->
«me_off
 = 
	`bsw≠_32
(m->name_off);

374 
m
->
ty≥
 = 
	`bsw≠_32
(m->type);

375 
m
->
off£t
 = 
	`bsw≠_32
(m->offset);

378 
BTF_KIND_FUNC_PROTO
:

379 
i
 = 0, 
p
 = 
	`btf_∑øms
(
t
); i < 
vÀn
; i++,Ö++) {

380 
p
->
«me_off
 = 
	`bsw≠_32
(p->name_off);

381 
p
->
ty≥
 = 
	`bsw≠_32
(p->type);

384 
BTF_KIND_VAR
:

385 
	`btf_v¨
(
t
)->
lökage
 = 
	`bsw≠_32
(btf_var(t)->linkage);

387 
BTF_KIND_DATASEC
:

388 
i
 = 0, 
v
 = 
	`btf_v¨_£cöfos
(
t
); i < 
vÀn
; i++, v++) {

389 
v
->
ty≥
 = 
	`bsw≠_32
(v->type);

390 
v
->
off£t
 = 
	`bsw≠_32
(v->offset);

391 
v
->
size
 = 
	`bsw≠_32
(v->size);

394 
BTF_KIND_DECL_TAG
:

395 
	`btf_de˛_èg
(
t
)->
comp⁄ít_idx
 = 
	`bsw≠_32
(btf_decl_tag(t)->component_idx);

398 
	`¥_debug
("Unsuµ‹ãd BTF_KIND:%u\n", 
	`btf_köd
(
t
));

399  -
EINVAL
;

401 
	}
}

403 
	$btf_∑r£_ty≥_£c
(
btf
 *btf)

405 
btf_hódî
 *
hdr
 = 
btf
->hdr;

406 *
√xt_ty≥
 = 
btf
->
ty≥s_d©a
;

407 *
íd_ty≥
 = 
√xt_ty≥
 + 
hdr
->
ty≥_Àn
;

408 
îr
, 
ty≥_size
;

410 
√xt_ty≥
 + (
btf_ty≥
Ë<
íd_ty≥
) {

411 i‡(
btf
->
sw≠≥d_ídün
)

412 
	`btf_bsw≠_ty≥_ba£
(
√xt_ty≥
);

414 
ty≥_size
 = 
	`btf_ty≥_size
(
√xt_ty≥
);

415 i‡(
ty≥_size
 < 0)

416  
ty≥_size
;

417 i‡(
√xt_ty≥
 + 
ty≥_size
 > 
íd_ty≥
) {

418 
	`¥_w¨n
("BTFÅy≥ [%d] i†mÆf‹med\n", 
btf
->
°¨t_id
 + btf->
ƒ_ty≥s
);

419  -
EINVAL
;

422 i‡(
btf
->
sw≠≥d_ídün
 && 
	`btf_bsw≠_ty≥_ª°
(
√xt_ty≥
))

423  -
EINVAL
;

425 
îr
 = 
	`btf_add_ty≥_idx_íåy
(
btf
, 
√xt_ty≥
 - btf->
ty≥s_d©a
);

426 i‡(
îr
)

427  
îr
;

429 
√xt_ty≥
 +
ty≥_size
;

430 
btf
->
ƒ_ty≥s
++;

433 i‡(
√xt_ty≥
 !
íd_ty≥
) {

434 
	`¥_w¨n
("BTFÅypes data is malformed\n");

435  -
EINVAL
;

439 
	}
}

441 
__u32
 
	$btf__gë_ƒ_ty≥s
(c⁄° 
btf
 *btf)

443  
btf
->
°¨t_id
 + btf->
ƒ_ty≥s
 - 1;

444 
	}
}

446 
__u32
 
	$btf__ty≥_˙t
(c⁄° 
btf
 *btf)

448  
btf
->
°¨t_id
 + btf->
ƒ_ty≥s
;

449 
	}
}

451 c⁄° 
btf
 *
	$btf__ba£_btf
(c⁄° 
btf
 *btf)

453  
btf
->
ba£_btf
;

454 
	}
}

457 
btf_ty≥
 *
	$btf_ty≥_by_id
(c⁄° 
btf
 *btf, 
__u32
 
ty≥_id
)

459 i‡(
ty≥_id
 == 0)

460  &
btf_void
;

461 i‡(
ty≥_id
 < 
btf
->
°¨t_id
)

462  
	`btf_ty≥_by_id
(
btf
->
ba£_btf
, 
ty≥_id
);

463  
btf
->
ty≥s_d©a
 + btf->
ty≥_offs
[
ty≥_id
 - btf->
°¨t_id
];

464 
	}
}

466 c⁄° 
btf_ty≥
 *
	$btf__ty≥_by_id
(c⁄° 
btf
 *btf, 
__u32
 
ty≥_id
)

468 i‡(
ty≥_id
 >
btf
->
°¨t_id
 + btf->
ƒ_ty≥s
)

469  
î∫o
 = 
EINVAL
, 
NULL
;

470  
	`btf_ty≥_by_id
((
btf
 *)btf, 
ty≥_id
);

471 
	}
}

473 
	$dëîmöe_±r_size
(c⁄° 
btf
 *btf)

475 c⁄° 
btf_ty≥
 *
t
;

476 c⁄° *
«me
;

477 
i
, 
n
;

479 i‡(
btf
->
ba£_btf
 && btf->ba£_btf->
±r_sz
 > 0)

480  
btf
->
ba£_btf
->
±r_sz
;

482 
n
 = 
	`btf__ty≥_˙t
(
btf
);

483 
i
 = 1; i < 
n
; i++) {

484 
t
 = 
	`btf__ty≥_by_id
(
btf
, 
i
);

485 i‡(!
	`btf_is_öt
(
t
))

488 
«me
 = 
	`btf__«me_by_off£t
(
btf
, 
t
->
«me_off
);

489 i‡(!
«me
)

492 i‡(
	`°rcmp
(
«me
, "long int") == 0 ||

493 
	`°rcmp
(
«me
, "long unsigned int") == 0) {

494 i‡(
t
->
size
 != 4 &&Å->size != 8)

496  
t
->
size
;

501 
	}
}

503 
size_t
 
	$btf_±r_sz
(c⁄° 
btf
 *btf)

505 i‡(!
btf
->
±r_sz
)

506 ((
btf
 *)btf)->
±r_sz
 = 
	`dëîmöe_±r_size
(btf);

507  
btf
->
±r_sz
 < 0 ? (*) : btf->ptr_sz;

508 
	}
}

518 
size_t
 
	$btf__poöãr_size
(c⁄° 
btf
 *btf)

520 i‡(!
btf
->
±r_sz
)

521 ((
btf
 *)btf)->
±r_sz
 = 
	`dëîmöe_±r_size
(btf);

523 i‡(
btf
->
±r_sz
 < 0)

527  
btf
->
±r_sz
;

528 
	}
}

533 
	$btf__£t_poöãr_size
(
btf
 *btf, 
size_t
 
±r_sz
)

535 i‡(
±r_sz
 != 4 &&Ötr_sz != 8)

536  
	`libbpf_îr
(-
EINVAL
);

537 
btf
->
±r_sz
 =Ötr_sz;

539 
	}
}

541 
boﬁ
 
	$is_ho°_big_ídün
()

543 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


544  
Ál£
;

545 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


546  
åue
;

550 
	}
}

552 
btf_ídü¬ess
 
	$btf__ídü¬ess
(c⁄° 
btf
 *btf)

554 i‡(
	`is_ho°_big_ídün
())

555  
btf
->
sw≠≥d_ídün
 ? 
BTF_LITTLE_ENDIAN
 : 
BTF_BIG_ENDIAN
;

557  
btf
->
sw≠≥d_ídün
 ? 
BTF_BIG_ENDIAN
 : 
BTF_LITTLE_ENDIAN
;

558 
	}
}

560 
	$btf__£t_ídü¬ess
(
btf
 *btf, 
btf_ídü¬ess
 
ídün
)

562 i‡(
ídün
 !
BTF_LITTLE_ENDIAN
 &&Éndü¿!
BTF_BIG_ENDIAN
)

563  
	`libbpf_îr
(-
EINVAL
);

565 
btf
->
sw≠≥d_ídün
 = 
	`is_ho°_big_ídün
(Ë!(
ídün
 =
BTF_BIG_ENDIAN
);

566 i‡(!
btf
->
sw≠≥d_ídün
) {

567 
	`‰ì
(
btf
->
øw_d©a_sw≠≥d
);

568 
btf
->
øw_d©a_sw≠≥d
 = 
NULL
;

571 
	}
}

573 
boﬁ
 
	$btf_ty≥_is_void
(c⁄° 
btf_ty≥
 *
t
)

575  
t
 =&
btf_void
 || 
	`btf_is_fwd
(t);

576 
	}
}

578 
boﬁ
 
	$btf_ty≥_is_void_‹_nuŒ
(c⁄° 
btf_ty≥
 *
t
)

580  !
t
 || 
	`btf_ty≥_is_void
(t);

581 
	}
}

583 
	#MAX_RESOLVE_DEPTH
 32

	)

585 
__s64
 
	$btf__ªsﬁve_size
(c⁄° 
btf
 *btf, 
__u32
 
ty≥_id
)

587 c⁄° 
btf_¨øy
 *
¨øy
;

588 c⁄° 
btf_ty≥
 *
t
;

589 
__u32
 
√Àms
 = 1;

590 
__s64
 
size
 = -1;

591 
i
;

593 
t
 = 
	`btf__ty≥_by_id
(
btf
, 
ty≥_id
);

594 
i
 = 0; i < 
MAX_RESOLVE_DEPTH
 && !
	`btf_ty≥_is_void_‹_nuŒ
(
t
); i++) {

595 
	`btf_köd
(
t
)) {

596 
BTF_KIND_INT
:

597 
BTF_KIND_STRUCT
:

598 
BTF_KIND_UNION
:

599 
BTF_KIND_ENUM
:

600 
BTF_KIND_DATASEC
:

601 
BTF_KIND_FLOAT
:

602 
size
 = 
t
->size;

603 
d⁄e
;

604 
BTF_KIND_PTR
:

605 
size
 = 
	`btf_±r_sz
(
btf
);

606 
d⁄e
;

607 
BTF_KIND_TYPEDEF
:

608 
BTF_KIND_VOLATILE
:

609 
BTF_KIND_CONST
:

610 
BTF_KIND_RESTRICT
:

611 
BTF_KIND_VAR
:

612 
BTF_KIND_DECL_TAG
:

613 
BTF_KIND_TYPE_TAG
:

614 
ty≥_id
 = 
t
->
ty≥
;

616 
BTF_KIND_ARRAY
:

617 
¨øy
 = 
	`btf_¨øy
(
t
);

618 i‡(
√Àms
 && 
¨øy
->√Àm†> 
UINT32_MAX
 /Çelems)

619  
	`libbpf_îr
(-
E2BIG
);

620 
√Àms
 *
¨øy
->nelems;

621 
ty≥_id
 = 
¨øy
->
ty≥
;

624  
	`libbpf_îr
(-
EINVAL
);

627 
t
 = 
	`btf__ty≥_by_id
(
btf
, 
ty≥_id
);

630 
d⁄e
:

631 i‡(
size
 < 0)

632  
	`libbpf_îr
(-
EINVAL
);

633 i‡(
√Àms
 && 
size
 > 
UINT32_MAX
 /Çelems)

634  
	`libbpf_îr
(-
E2BIG
);

636  
√Àms
 * 
size
;

637 
	}
}

639 
	$btf__Æign_of
(c⁄° 
btf
 *btf, 
__u32
 
id
)

641 c⁄° 
btf_ty≥
 *
t
 = 
	`btf__ty≥_by_id
(
btf
, 
id
);

642 
__u16
 
köd
 = 
	`btf_köd
(
t
);

644 
köd
) {

645 
BTF_KIND_INT
:

646 
BTF_KIND_ENUM
:

647 
BTF_KIND_FLOAT
:

648  
	`mö
(
	`btf_±r_sz
(
btf
), (
size_t
)
t
->
size
);

649 
BTF_KIND_PTR
:

650  
	`btf_±r_sz
(
btf
);

651 
BTF_KIND_TYPEDEF
:

652 
BTF_KIND_VOLATILE
:

653 
BTF_KIND_CONST
:

654 
BTF_KIND_RESTRICT
:

655 
BTF_KIND_TYPE_TAG
:

656  
	`btf__Æign_of
(
btf
, 
t
->
ty≥
);

657 
BTF_KIND_ARRAY
:

658  
	`btf__Æign_of
(
btf
, 
	`btf_¨øy
(
t
)->
ty≥
);

659 
BTF_KIND_STRUCT
:

660 
BTF_KIND_UNION
: {

661 c⁄° 
btf_membî
 *
m
 = 
	`btf_membîs
(
t
);

662 
__u16
 
vÀn
 = 
	`btf_vÀn
(
t
);

663 
i
, 
max_Æign
 = 1, 
Æign
;

665 
i
 = 0; i < 
vÀn
; i++, 
m
++) {

666 
Æign
 = 
	`btf__Æign_of
(
btf
, 
m
->
ty≥
);

667 i‡(
Æign
 <= 0)

668  
	`libbpf_îr
(
Æign
);

669 
max_Æign
 = 
	`max
(max_Æign, 
Æign
);

672  
max_Æign
;

675 
	`¥_w¨n
("unsuµ‹ãd BTF_KIND:%u\n", 
	`btf_köd
(
t
));

676  
î∫o
 = 
EINVAL
, 0;

678 
	}
}

680 
	$btf__ªsﬁve_ty≥
(c⁄° 
btf
 *btf, 
__u32
 
ty≥_id
)

682 c⁄° 
btf_ty≥
 *
t
;

683 
dïth
 = 0;

685 
t
 = 
	`btf__ty≥_by_id
(
btf
, 
ty≥_id
);

686 
dïth
 < 
MAX_RESOLVE_DEPTH
 &&

687 !
	`btf_ty≥_is_void_‹_nuŒ
(
t
) &&

688 (
	`btf_is_mod
(
t
Ë|| 
	`btf_is_ty≥def
—Ë|| 
	`btf_is_v¨
(t))) {

689 
ty≥_id
 = 
t
->
ty≥
;

690 
t
 = 
	`btf__ty≥_by_id
(
btf
, 
ty≥_id
);

691 
dïth
++;

694 i‡(
dïth
 =
MAX_RESOLVE_DEPTH
 || 
	`btf_ty≥_is_void_‹_nuŒ
(
t
))

695  
	`libbpf_îr
(-
EINVAL
);

697  
ty≥_id
;

698 
	}
}

700 
__s32
 
	$btf__föd_by_«me
(c⁄° 
btf
 *btf, c⁄° *
ty≥_«me
)

702 
__u32
 
i
, 
ƒ_ty≥s
 = 
	`btf__ty≥_˙t
(
btf
);

704 i‡(!
	`°rcmp
(
ty≥_«me
, "void"))

707 
i
 = 1; i < 
ƒ_ty≥s
; i++) {

708 c⁄° 
btf_ty≥
 *
t
 = 
	`btf__ty≥_by_id
(
btf
, 
i
);

709 c⁄° *
«me
 = 
	`btf__«me_by_off£t
(
btf
, 
t
->
«me_off
);

711 i‡(
«me
 && !
	`°rcmp
(
ty≥_«me
,Çame))

712  
i
;

715  
	`libbpf_îr
(-
ENOENT
);

716 
	}
}

718 
__s32
 
	$btf_föd_by_«me_köd
(c⁄° 
btf
 *btf, 
°¨t_id
,

719 c⁄° *
ty≥_«me
, 
__u32
 
köd
)

721 
__u32
 
i
, 
ƒ_ty≥s
 = 
	`btf__ty≥_˙t
(
btf
);

723 i‡(
köd
 =
BTF_KIND_UNKN
 || !
	`°rcmp
(
ty≥_«me
, "void"))

726 
i
 = 
°¨t_id
; i < 
ƒ_ty≥s
; i++) {

727 c⁄° 
btf_ty≥
 *
t
 = 
	`btf__ty≥_by_id
(
btf
, 
i
);

728 c⁄° *
«me
;

730 i‡(
	`btf_köd
(
t
Ë!
köd
)

732 
«me
 = 
	`btf__«me_by_off£t
(
btf
, 
t
->
«me_off
);

733 i‡(
«me
 && !
	`°rcmp
(
ty≥_«me
,Çame))

734  
i
;

737  
	`libbpf_îr
(-
ENOENT
);

738 
	}
}

740 
__s32
 
	$btf__föd_by_«me_köd_own
(c⁄° 
btf
 *btf, c⁄° *
ty≥_«me
,

741 
__u32
 
köd
)

743  
	`btf_föd_by_«me_köd
(
btf
, btf->
°¨t_id
, 
ty≥_«me
, 
köd
);

744 
	}
}

746 
__s32
 
	$btf__föd_by_«me_köd
(c⁄° 
btf
 *btf, c⁄° *
ty≥_«me
,

747 
__u32
 
köd
)

749  
	`btf_föd_by_«me_köd
(
btf
, 1, 
ty≥_«me
, 
köd
);

750 
	}
}

752 
boﬁ
 
	$btf_is_modifübÀ
(c⁄° 
btf
 *btf)

754  (*)
btf
->
hdr
 !btf->
øw_d©a
;

755 
	}
}

757 
	$btf__‰ì
(
btf
 *btf)

759 i‡(
	`IS_ERR_OR_NULL
(
btf
))

762 i‡(
btf
->
fd
 >= 0)

763 
	`˛o£
(
btf
->
fd
);

765 i‡(
	`btf_is_modifübÀ
(
btf
)) {

772 
	`‰ì
(
btf
->
hdr
);

773 
	`‰ì
(
btf
->
ty≥s_d©a
);

774 
	`°r£t__‰ì
(
btf
->
°rs_£t
);

776 
	`‰ì
(
btf
->
øw_d©a
);

777 
	`‰ì
(
btf
->
øw_d©a_sw≠≥d
);

778 
	`‰ì
(
btf
->
ty≥_offs
);

779 
	`‰ì
(
btf
);

780 
	}
}

782 
btf
 *
	$btf_√w_em±y
(
btf
 *
ba£_btf
)

784 
btf
 *btf;

786 
btf
 = 
	`ˇŒoc
(1, (*btf));

787 i‡(!
btf
)

788  
	`ERR_PTR
(-
ENOMEM
);

790 
btf
->
ƒ_ty≥s
 = 0;

791 
btf
->
°¨t_id
 = 1;

792 
btf
->
°¨t_°r_off
 = 0;

793 
btf
->
fd
 = -1;

794 
btf
->
±r_sz
 = (*);

795 
btf
->
sw≠≥d_ídün
 = 
Ál£
;

797 i‡(
ba£_btf
) {

798 
btf
->
ba£_btf
 = base_btf;

799 
btf
->
°¨t_id
 = 
	`btf__ty≥_˙t
(
ba£_btf
);

800 
btf
->
°¨t_°r_off
 = 
ba£_btf
->
hdr
->
°r_Àn
;

804 
btf
->
øw_size
 = (
btf_hódî
Ë+ (
ba£_btf
 ? 0 : 1);

805 
btf
->
øw_d©a
 = 
	`ˇŒoc
(1, btf->
øw_size
);

806 i‡(!
btf
->
øw_d©a
) {

807 
	`‰ì
(
btf
);

808  
	`ERR_PTR
(-
ENOMEM
);

811 
btf
->
hdr
 = btf->
øw_d©a
;

812 
btf
->
hdr
->
hdr_Àn
 = (
btf_hódî
);

813 
btf
->
hdr
->
magic
 = 
BTF_MAGIC
;

814 
btf
->
hdr
->
vîsi⁄
 = 
BTF_VERSION
;

816 
btf
->
ty≥s_d©a
 = btf->
øw_d©a
 + btf->
hdr
->
hdr_Àn
;

817 
btf
->
°rs_d©a
 = btf->
øw_d©a
 + btf->
hdr
->
hdr_Àn
;

818 
btf
->
hdr
->
°r_Àn
 = 
ba£_btf
 ? 0 : 1;

820  
btf
;

821 
	}
}

823 
btf
 *
	$btf__√w_em±y
()

825  
	`libbpf_±r
(
	`btf_√w_em±y
(
NULL
));

826 
	}
}

828 
btf
 *
	$btf__√w_em±y_•lô
(
btf
 *
ba£_btf
)

830  
	`libbpf_±r
(
	`btf_√w_em±y
(
ba£_btf
));

831 
	}
}

833 
btf
 *
	$btf_√w
(c⁄° *
d©a
, 
__u32
 
size
, 
btf
 *
ba£_btf
)

835 
btf
 *btf;

836 
îr
;

838 
btf
 = 
	`ˇŒoc
(1, (btf));

839 i‡(!
btf
)

840  
	`ERR_PTR
(-
ENOMEM
);

842 
btf
->
ƒ_ty≥s
 = 0;

843 
btf
->
°¨t_id
 = 1;

844 
btf
->
°¨t_°r_off
 = 0;

845 
btf
->
fd
 = -1;

847 i‡(
ba£_btf
) {

848 
btf
->
ba£_btf
 = base_btf;

849 
btf
->
°¨t_id
 = 
	`btf__ty≥_˙t
(
ba£_btf
);

850 
btf
->
°¨t_°r_off
 = 
ba£_btf
->
hdr
->
°r_Àn
;

853 
btf
->
øw_d©a
 = 
	`mÆloc
(
size
);

854 i‡(!
btf
->
øw_d©a
) {

855 
îr
 = -
ENOMEM
;

856 
d⁄e
;

858 
	`mem˝y
(
btf
->
øw_d©a
, 
d©a
, 
size
);

859 
btf
->
øw_size
 = 
size
;

861 
btf
->
hdr
 = btf->
øw_d©a
;

862 
îr
 = 
	`btf_∑r£_hdr
(
btf
);

863 i‡(
îr
)

864 
d⁄e
;

866 
btf
->
°rs_d©a
 = btf->
øw_d©a
 + btf->
hdr
->
hdr_Àn
 + btf->hdr->
°r_off
;

867 
btf
->
ty≥s_d©a
 = btf->
øw_d©a
 + btf->
hdr
->
hdr_Àn
 + btf->hdr->
ty≥_off
;

869 
îr
 = 
	`btf_∑r£_°r_£c
(
btf
);

870 
îr
 =Éº ?: 
	`btf_∑r£_ty≥_£c
(
btf
);

871 i‡(
îr
)

872 
d⁄e
;

874 
d⁄e
:

875 i‡(
îr
) {

876 
	`btf__‰ì
(
btf
);

877  
	`ERR_PTR
(
îr
);

880  
btf
;

881 
	}
}

883 
btf
 *
	$btf__√w
(c⁄° *
d©a
, 
__u32
 
size
)

885  
	`libbpf_±r
(
	`btf_√w
(
d©a
, 
size
, 
NULL
));

886 
	}
}

888 
btf
 *
	$btf_∑r£_ñf
(c⁄° *
∑th
, 
btf
 *
ba£_btf
,

889 
btf_ext
 **btf_ext)

891 
Elf_D©a
 *
btf_d©a
 = 
NULL
, *
btf_ext_d©a
 = NULL;

892 
îr
 = 0, 
fd
 = -1, 
idx
 = 0;

893 
btf
 *bt‡
NULL
;

894 
Elf_S˙
 *
s˙
 = 
NULL
;

895 
Elf
 *
ñf
 = 
NULL
;

896 
GElf_Ehdr
 
ehdr
;

897 
size_t
 
sh°∫dx
;

899 i‡(
	`ñf_vîsi⁄
(
EV_CURRENT
Ë=
EV_NONE
) {

900 
	`¥_w¨n
("ÁûedÅÿöôÜibñ‡f‹ %s\n", 
∑th
);

901  
	`ERR_PTR
(-
LIBBPF_ERRNO__LIBELF
);

904 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
 | 
O_CLOEXEC
);

905 i‡(
fd
 < 0) {

906 
îr
 = -
î∫o
;

907 
	`¥_w¨n
("ÁûedÅÿ›í %s: %s\n", 
∑th
, 
	`°ªº‹
(
î∫o
));

908  
	`ERR_PTR
(
îr
);

911 
îr
 = -
LIBBPF_ERRNO__FORMAT
;

913 
ñf
 = 
	`ñf_begö
(
fd
, 
ELF_C_READ
, 
NULL
);

914 i‡(!
ñf
) {

915 
	`¥_w¨n
("ÁûedÅÿ›í %†a†ELF fûe\n", 
∑th
);

916 
d⁄e
;

918 i‡(!
	`gñf_gëehdr
(
ñf
, &
ehdr
)) {

919 
	`¥_w¨n
("ÁûedÅÿgë EHDR from %s\n", 
∑th
);

920 
d⁄e
;

923 i‡(
	`ñf_gëshdr°∫dx
(
ñf
, &
sh°∫dx
)) {

924 
	`¥_w¨n
("failedÅo get sectionÇames section index for %s\n",

925 
∑th
);

926 
d⁄e
;

929 i‡(!
	`ñf_øwd©a
(
	`ñf_gës˙
(
ñf
, 
sh°∫dx
), 
NULL
)) {

930 
	`¥_w¨n
("ÁûedÅÿgëÉ_sh°∫dx from %s\n", 
∑th
);

931 
d⁄e
;

934 (
s˙
 = 
	`ñf_√xts˙
(
ñf
, s˙)Ë!
NULL
) {

935 
GElf_Shdr
 
sh
;

936 *
«me
;

938 
idx
++;

939 i‡(
	`gñf_gëshdr
(
s˙
, &
sh
) != &sh) {

940 
	`¥_w¨n
("failedÅo get section(%d) header from %s\n",

941 
idx
, 
∑th
);

942 
d⁄e
;

944 
«me
 = 
	`ñf_°Ωå
(
ñf
, 
sh°∫dx
, 
sh
.
sh_«me
);

945 i‡(!
«me
) {

946 
	`¥_w¨n
("failedÅo get section(%d)Çame from %s\n",

947 
idx
, 
∑th
);

948 
d⁄e
;

950 i‡(
	`°rcmp
(
«me
, 
BTF_ELF_SEC
) == 0) {

951 
btf_d©a
 = 
	`ñf_gëd©a
(
s˙
, 0);

952 i‡(!
btf_d©a
) {

953 
	`¥_w¨n
("failedÅo get section(%d, %s) data from %s\n",

954 
idx
, 
«me
, 
∑th
);

955 
d⁄e
;

958 } i‡(
btf_ext
 && 
	`°rcmp
(
«me
, 
BTF_EXT_ELF_SEC
) == 0) {

959 
btf_ext_d©a
 = 
	`ñf_gëd©a
(
s˙
, 0);

960 i‡(!
btf_ext_d©a
) {

961 
	`¥_w¨n
("failedÅo get section(%d, %s) data from %s\n",

962 
idx
, 
«me
, 
∑th
);

963 
d⁄e
;

969 
îr
 = 0;

971 i‡(!
btf_d©a
) {

972 
îr
 = -
ENOENT
;

973 
d⁄e
;

975 
btf
 = 
	`btf_√w
(
btf_d©a
->
d_buf
, btf_d©a->
d_size
, 
ba£_btf
);

976 
îr
 = 
	`libbpf_gë_îr‹
(
btf
);

977 i‡(
îr
)

978 
d⁄e
;

980 
	`gñf_gë˛ass
(
ñf
)) {

981 
ELFCLASS32
:

982 
	`btf__£t_poöãr_size
(
btf
, 4);

984 
ELFCLASS64
:

985 
	`btf__£t_poöãr_size
(
btf
, 8);

988 
	`¥_w¨n
("ÁûedÅÿgë ELF cœs†(bô√ssËf‹ %s\n", 
∑th
);

992 i‡(
btf_ext
 && 
btf_ext_d©a
) {

993 *
btf_ext
 = 
	`btf_ext__√w
(
btf_ext_d©a
->
d_buf
, btf_ext_d©a->
d_size
);

994 
îr
 = 
	`libbpf_gë_îr‹
(*
btf_ext
);

995 i‡(
îr
)

996 
d⁄e
;

997 } i‡(
btf_ext
) {

998 *
btf_ext
 = 
NULL
;

1000 
d⁄e
:

1001 i‡(
ñf
)

1002 
	`ñf_íd
(
ñf
);

1003 
	`˛o£
(
fd
);

1005 i‡(!
îr
)

1006  
btf
;

1008 i‡(
btf_ext
)

1009 
	`btf_ext__‰ì
(*
btf_ext
);

1010 
	`btf__‰ì
(
btf
);

1012  
	`ERR_PTR
(
îr
);

1013 
	}
}

1015 
btf
 *
	$btf__∑r£_ñf
(c⁄° *
∑th
, 
btf_ext
 **btf_ext)

1017  
	`libbpf_±r
(
	`btf_∑r£_ñf
(
∑th
, 
NULL
, 
btf_ext
));

1018 
	}
}

1020 
btf
 *
	$btf__∑r£_ñf_•lô
(c⁄° *
∑th
, 
btf
 *
ba£_btf
)

1022  
	`libbpf_±r
(
	`btf_∑r£_ñf
(
∑th
, 
ba£_btf
, 
NULL
));

1023 
	}
}

1025 
btf
 *
	$btf_∑r£_øw
(c⁄° *
∑th
, 
btf
 *
ba£_btf
)

1027 
btf
 *bt‡
NULL
;

1028 *
d©a
 = 
NULL
;

1029 
FILE
 *
f
 = 
NULL
;

1030 
__u16
 
magic
;

1031 
îr
 = 0;

1032 
sz
;

1034 
f
 = 
	`f›í
(
∑th
, "rb");

1035 i‡(!
f
) {

1036 
îr
 = -
î∫o
;

1037 
îr_out
;

1041 i‡(
	`‰ód
(&
magic
, 1, (magic), 
f
) < (magic)) {

1042 
îr
 = -
EIO
;

1043 
îr_out
;

1045 i‡(
magic
 !
BTF_MAGIC
 && magi¯!
	`bsw≠_16
(BTF_MAGIC)) {

1047 
îr
 = -
EPROTO
;

1048 
îr_out
;

1052 i‡(
	`f£ek
(
f
, 0, 
SEEK_END
)) {

1053 
îr
 = -
î∫o
;

1054 
îr_out
;

1056 
sz
 = 
	`·ñl
(
f
);

1057 i‡(
sz
 < 0) {

1058 
îr
 = -
î∫o
;

1059 
îr_out
;

1062 i‡(
	`f£ek
(
f
, 0, 
SEEK_SET
)) {

1063 
îr
 = -
î∫o
;

1064 
îr_out
;

1068 
d©a
 = 
	`mÆloc
(
sz
);

1069 i‡(!
d©a
) {

1070 
îr
 = -
ENOMEM
;

1071 
îr_out
;

1073 i‡(
	`‰ód
(
d©a
, 1, 
sz
, 
f
) < sz) {

1074 
îr
 = -
EIO
;

1075 
îr_out
;

1079 
btf
 = 
	`btf_√w
(
d©a
, 
sz
, 
ba£_btf
);

1081 
îr_out
:

1082 
	`‰ì
(
d©a
);

1083 i‡(
f
)

1084 
	`f˛o£
(
f
);

1085  
îr
 ? 
	`ERR_PTR
”ºË: 
btf
;

1086 
	}
}

1088 
btf
 *
	$btf__∑r£_øw
(c⁄° *
∑th
)

1090  
	`libbpf_±r
(
	`btf_∑r£_øw
(
∑th
, 
NULL
));

1091 
	}
}

1093 
btf
 *
	$btf__∑r£_øw_•lô
(c⁄° *
∑th
, 
btf
 *
ba£_btf
)

1095  
	`libbpf_±r
(
	`btf_∑r£_øw
(
∑th
, 
ba£_btf
));

1096 
	}
}

1098 
btf
 *
	$btf_∑r£
(c⁄° *
∑th
, 
btf
 *
ba£_btf
, 
btf_ext
 **btf_ext)

1100 
btf
 *btf;

1101 
îr
;

1103 i‡(
btf_ext
)

1104 *
btf_ext
 = 
NULL
;

1106 
btf
 = 
	`btf_∑r£_øw
(
∑th
, 
ba£_btf
);

1107 
îr
 = 
	`libbpf_gë_îr‹
(
btf
);

1108 i‡(!
îr
)

1109  
btf
;

1110 i‡(
îr
 !-
EPROTO
)

1111  
	`ERR_PTR
(
îr
);

1112  
	`btf_∑r£_ñf
(
∑th
, 
ba£_btf
, 
btf_ext
);

1113 
	}
}

1115 
btf
 *
	$btf__∑r£
(c⁄° *
∑th
, 
btf_ext
 **btf_ext)

1117  
	`libbpf_±r
(
	`btf_∑r£
(
∑th
, 
NULL
, 
btf_ext
));

1118 
	}
}

1120 
btf
 *
	$btf__∑r£_•lô
(c⁄° *
∑th
, 
btf
 *
ba£_btf
)

1122  
	`libbpf_±r
(
	`btf_∑r£
(
∑th
, 
ba£_btf
, 
NULL
));

1123 
	}
}

1125 *
btf_gë_øw_d©a
(c⁄° 
btf
 *btf, 
__u32
 *
size
, 
boﬁ
 
sw≠_ídün
);

1127 
	$btf_lﬂd_öto_kî√l
(
btf
 *btf, *
log_buf
, 
size_t
 
log_sz
, 
__u32
 
log_Àvñ
)

1129 
	`LIBBPF_OPTS
(
bpf_btf_lﬂd_›ts
, 
›ts
);

1130 
__u32
 
buf_sz
 = 0, 
øw_size
;

1131 *
buf
 = 
NULL
, *
tmp
;

1132 *
øw_d©a
;

1133 
îr
 = 0;

1135 i‡(
btf
->
fd
 >= 0)

1136  
	`libbpf_îr
(-
EEXIST
);

1137 i‡(
log_sz
 && !
log_buf
)

1138  
	`libbpf_îr
(-
EINVAL
);

1141 
øw_d©a
 = 
	`btf_gë_øw_d©a
(
btf
, &
øw_size
, 
Ál£
);

1142 i‡(!
øw_d©a
) {

1143 
îr
 = -
ENOMEM
;

1144 
d⁄e
;

1146 
btf
->
øw_size
 =Ñaw_size;

1147 
btf
->
øw_d©a
 =Ñaw_data;

1149 
ªåy_lﬂd
:

1156 i‡(
log_Àvñ
) {

1161 i‡(!
log_buf
) {

1162 
buf_sz
 = 
	`max
((
__u32
)
BPF_LOG_BUF_SIZE
, buf_sz * 2);

1163 
tmp
 = 
	`ªÆloc
(
buf
, 
buf_sz
);

1164 i‡(!
tmp
) {

1165 
îr
 = -
ENOMEM
;

1166 
d⁄e
;

1168 
buf
 = 
tmp
;

1169 
buf
[0] = '\0';

1172 
›ts
.
log_buf
 =Üog_bu‡?Üog_bu‡: 
buf
;

1173 
›ts
.
log_size
 = 
log_buf
 ? 
log_sz
 : 
buf_sz
;

1174 
›ts
.
log_Àvñ
 =Üog_level;

1177 
btf
->
fd
 = 
	`bpf_btf_lﬂd
(
øw_d©a
, 
øw_size
, &
›ts
);

1178 i‡(
btf
->
fd
 < 0) {

1180 i‡(
log_Àvñ
 == 0) {

1181 
log_Àvñ
 = 1;

1182 
ªåy_lﬂd
;

1187 i‡(!
log_buf
 && 
î∫o
 =
ENOSPC
 && 
buf_sz
 <
UINT_MAX
 / 2)

1188 
ªåy_lﬂd
;

1190 
îr
 = -
î∫o
;

1191 
	`¥_w¨n
("BTFÜﬂdögÉº‹: %d\n", 
îr
);

1193 i‡(!
log_buf
 && 
buf
[0])

1194 
	`¥_w¨n
("-- BEGIN BTF LOAD LOG ---\n%s\n-- END BTF LOAD LOG --\n", 
buf
);

1197 
d⁄e
:

1198 
	`‰ì
(
buf
);

1199  
	`libbpf_îr
(
îr
);

1200 
	}
}

1202 
	$btf__lﬂd_öto_kî√l
(
btf
 *btf)

1204  
	`btf_lﬂd_öto_kî√l
(
btf
, 
NULL
, 0, 0);

1205 
	}
}

1207 
	$btf__lﬂd
(
btf
 *Ë
	`__©åibuã__
((
	`Æüs
("btf__load_into_kernel")));

1209 
	$btf__fd
(c⁄° 
btf
 *btf)

1211  
btf
->
fd
;

1212 
	}
}

1214 
	$btf__£t_fd
(
btf
 *btf, 
fd
)

1216 
btf
->
fd
 = fd;

1217 
	}
}

1219 c⁄° *
	$btf_°rs_d©a
(c⁄° 
btf
 *btf)

1221  
btf
->
°rs_d©a
 ? btf->°rs_d©®: 
	`°r£t__d©a
(btf->
°rs_£t
);

1222 
	}
}

1224 *
	$btf_gë_øw_d©a
(c⁄° 
btf
 *btf, 
__u32
 *
size
, 
boﬁ
 
sw≠_ídün
)

1226 
btf_hódî
 *
hdr
 = 
btf
->hdr;

1227 
btf_ty≥
 *
t
;

1228 *
d©a
, *
p
;

1229 
__u32
 
d©a_sz
;

1230 
i
;

1232 
d©a
 = 
sw≠_ídün
 ? 
btf
->
øw_d©a_sw≠≥d
 : btf->
øw_d©a
;

1233 i‡(
d©a
) {

1234 *
size
 = 
btf
->
øw_size
;

1235  
d©a
;

1238 
d©a_sz
 = 
hdr
->
hdr_Àn
 + hdr->
ty≥_Àn
 + hdr->
°r_Àn
;

1239 
d©a
 = 
	`ˇŒoc
(1, 
d©a_sz
);

1240 i‡(!
d©a
)

1241  
NULL
;

1242 
p
 = 
d©a
;

1244 
	`mem˝y
(
p
, 
hdr
, hdr->
hdr_Àn
);

1245 i‡(
sw≠_ídün
)

1246 
	`btf_bsw≠_hdr
(
p
);

1247 
p
 +
hdr
->
hdr_Àn
;

1249 
	`mem˝y
(
p
, 
btf
->
ty≥s_d©a
, 
hdr
->
ty≥_Àn
);

1250 i‡(
sw≠_ídün
) {

1251 
i
 = 0; i < 
btf
->
ƒ_ty≥s
; i++) {

1252 
t
 = 
p
 + 
btf
->
ty≥_offs
[
i
];

1257 i‡(
	`btf_bsw≠_ty≥_ª°
(
t
))

1258 
îr_out
;

1259 
	`btf_bsw≠_ty≥_ba£
(
t
);

1262 
p
 +
hdr
->
ty≥_Àn
;

1264 
	`mem˝y
(
p
, 
	`btf_°rs_d©a
(
btf
), 
hdr
->
°r_Àn
);

1265 
p
 +
hdr
->
°r_Àn
;

1267 *
size
 = 
d©a_sz
;

1268  
d©a
;

1269 
îr_out
:

1270 
	`‰ì
(
d©a
);

1271  
NULL
;

1272 
	}
}

1274 c⁄° *
	$btf__øw_d©a
(c⁄° 
btf
 *
btf_ro
, 
__u32
 *
size
)

1276 
btf
 *bt‡(bt‡*)
btf_ro
;

1277 
__u32
 
d©a_sz
;

1278 *
d©a
;

1280 
d©a
 = 
	`btf_gë_øw_d©a
(
btf
, &
d©a_sz
, btf->
sw≠≥d_ídün
);

1281 i‡(!
d©a
)

1282  
î∫o
 = 
ENOMEM
, 
NULL
;

1284 
btf
->
øw_size
 = 
d©a_sz
;

1285 i‡(
btf
->
sw≠≥d_ídün
)

1286 
btf
->
øw_d©a_sw≠≥d
 = 
d©a
;

1288 
btf
->
øw_d©a
 = 
d©a
;

1289 *
size
 = 
d©a_sz
;

1290  
d©a
;

1291 
	}
}

1293 
__©åibuã__
((
Æüs
("btf__raw_data")))

1294 c⁄° *
btf__gë_øw_d©a
(c⁄° 
btf
 *btf, 
__u32
 *
size
);

1296 c⁄° *
	$btf__°r_by_off£t
(c⁄° 
btf
 *btf, 
__u32
 
off£t
)

1298 i‡(
off£t
 < 
btf
->
°¨t_°r_off
)

1299  
	`btf__°r_by_off£t
(
btf
->
ba£_btf
, 
off£t
);

1300 i‡(
off£t
 - 
btf
->
°¨t_°r_off
 < btf->
hdr
->
°r_Àn
)

1301  
	`btf_°rs_d©a
(
btf
Ë+ (
off£t
 - btf->
°¨t_°r_off
);

1303  
î∫o
 = 
EINVAL
, 
NULL
;

1304 
	}
}

1306 c⁄° *
	$btf__«me_by_off£t
(c⁄° 
btf
 *btf, 
__u32
 
off£t
)

1308  
	`btf__°r_by_off£t
(
btf
, 
off£t
);

1309 
	}
}

1311 
btf
 *
	$btf_gë_‰om_fd
(
btf_fd
, 
btf
 *
ba£_btf
)

1313 
bpf_btf_öfo
 
btf_öfo
;

1314 
__u32
 
Àn
 = (
btf_öfo
);

1315 
__u32
 
œ°_size
;

1316 
btf
 *btf;

1317 *
±r
;

1318 
îr
;

1324 
œ°_size
 = 4096;

1325 
±r
 = 
	`mÆloc
(
œ°_size
);

1326 i‡(!
±r
)

1327  
	`ERR_PTR
(-
ENOMEM
);

1329 
	`mem£t
(&
btf_öfo
, 0, (btf_info));

1330 
btf_öfo
.
btf
 = 
	`±r_to_u64
(
±r
);

1331 
btf_öfo
.
btf_size
 = 
œ°_size
;

1332 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
btf_fd
, &
btf_öfo
, &
Àn
);

1334 i‡(!
îr
 && 
btf_öfo
.
btf_size
 > 
œ°_size
) {

1335 *
ãmp_±r
;

1337 
œ°_size
 = 
btf_öfo
.
btf_size
;

1338 
ãmp_±r
 = 
	`ªÆloc
(
±r
, 
œ°_size
);

1339 i‡(!
ãmp_±r
) {

1340 
btf
 = 
	`ERR_PTR
(-
ENOMEM
);

1341 
exô_‰ì
;

1343 
±r
 = 
ãmp_±r
;

1345 
Àn
 = (
btf_öfo
);

1346 
	`mem£t
(&
btf_öfo
, 0, (btf_info));

1347 
btf_öfo
.
btf
 = 
	`±r_to_u64
(
±r
);

1348 
btf_öfo
.
btf_size
 = 
œ°_size
;

1350 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
btf_fd
, &
btf_öfo
, &
Àn
);

1353 i‡(
îr
 || 
btf_öfo
.
btf_size
 > 
œ°_size
) {

1354 
btf
 = 
îr
 ? 
	`ERR_PTR
(-
î∫o
Ë: ERR_PTR(-
E2BIG
);

1355 
exô_‰ì
;

1358 
btf
 = 
	`btf_√w
(
±r
, 
btf_öfo
.
btf_size
, 
ba£_btf
);

1360 
exô_‰ì
:

1361 
	`‰ì
(
±r
);

1362  
btf
;

1363 
	}
}

1365 
btf
 *
	$btf__lﬂd_‰om_kî√l_by_id_•lô
(
__u32
 
id
, 
btf
 *
ba£_btf
)

1367 
btf
 *btf;

1368 
btf_fd
;

1370 
btf_fd
 = 
	`bpf_btf_gë_fd_by_id
(
id
);

1371 i‡(
btf_fd
 < 0)

1372  
	`libbpf_îr_±r
(-
î∫o
);

1374 
btf
 = 
	`btf_gë_‰om_fd
(
btf_fd
, 
ba£_btf
);

1375 
	`˛o£
(
btf_fd
);

1377  
	`libbpf_±r
(
btf
);

1378 
	}
}

1380 
btf
 *
	$btf__lﬂd_‰om_kî√l_by_id
(
__u32
 
id
)

1382  
	`btf__lﬂd_‰om_kî√l_by_id_•lô
(
id
, 
NULL
);

1383 
	}
}

1385 
	$btf__gë_‰om_id
(
__u32
 
id
, 
btf
 **btf)

1387 
btf
 *
ªs
;

1388 
îr
;

1390 *
btf
 = 
NULL
;

1391 
ªs
 = 
	`btf__lﬂd_‰om_kî√l_by_id
(
id
);

1392 
îr
 = 
	`libbpf_gë_îr‹
(
ªs
);

1394 i‡(
îr
)

1395  
	`libbpf_îr
(
îr
);

1397 *
btf
 = 
ªs
;

1399 
	}
}

1401 
	$btf__gë_m≠_kv_tids
(c⁄° 
btf
 *btf, c⁄° *
m≠_«me
,

1402 
__u32
 
ex≥˘ed_key_size
, __u32 
ex≥˘ed_vÆue_size
,

1403 
__u32
 *
key_ty≥_id
, __u32 *
vÆue_ty≥_id
)

1405 c⁄° 
btf_ty≥
 *
c⁄èöî_ty≥
;

1406 c⁄° 
btf_membî
 *
key
, *
vÆue
;

1407 c⁄° 
size_t
 
max_«me
 = 256;

1408 
c⁄èöî_«me
[
max_«me
];

1409 
__s64
 
key_size
, 
vÆue_size
;

1410 
__s32
 
c⁄èöî_id
;

1412 i‡(
	`¢¥ötf
(
c⁄èöî_«me
, 
max_«me
, "____btf_m≠_%s", 
m≠_«me
) == max_name) {

1413 
	`¥_w¨n
("map:%sÜength of '____btf_map_%s' isÅooÜong\n",

1414 
m≠_«me
, map_name);

1415  
	`libbpf_îr
(-
EINVAL
);

1418 
c⁄èöî_id
 = 
	`btf__föd_by_«me
(
btf
, 
c⁄èöî_«me
);

1419 i‡(
c⁄èöî_id
 < 0) {

1420 
	`¥_debug
("map:%s container_name:%s cannot be found in BTF. Missing BPF_ANNOTATE_KV_PAIR?\n",

1421 
m≠_«me
, 
c⁄èöî_«me
);

1422  
	`libbpf_îr
(
c⁄èöî_id
);

1425 
c⁄èöî_ty≥
 = 
	`btf__ty≥_by_id
(
btf
, 
c⁄èöî_id
);

1426 i‡(!
c⁄èöî_ty≥
) {

1427 
	`¥_w¨n
("map:%s cannot find BTFÅype for container_id:%u\n",

1428 
m≠_«me
, 
c⁄èöî_id
);

1429  
	`libbpf_îr
(-
EINVAL
);

1432 i‡(!
	`btf_is_°ru˘
(
c⁄èöî_ty≥
Ë|| 
	`btf_vÀn
(container_type) < 2) {

1433 
	`¥_w¨n
("map:%s container_name:%s isán invalid container struct\n",

1434 
m≠_«me
, 
c⁄èöî_«me
);

1435  
	`libbpf_îr
(-
EINVAL
);

1438 
key
 = 
	`btf_membîs
(
c⁄èöî_ty≥
);

1439 
vÆue
 = 
key
 + 1;

1441 
key_size
 = 
	`btf__ªsﬁve_size
(
btf
, 
key
->
ty≥
);

1442 i‡(
key_size
 < 0) {

1443 
	`¥_w¨n
("m≠:%†övÆid BTF key_ty≥_size\n", 
m≠_«me
);

1444  
	`libbpf_îr
(
key_size
);

1447 i‡(
ex≥˘ed_key_size
 !
key_size
) {

1448 
	`¥_w¨n
("map:%s btf_key_type_size:%u != map_def_key_size:%u\n",

1449 
m≠_«me
, (
__u32
)
key_size
, 
ex≥˘ed_key_size
);

1450  
	`libbpf_îr
(-
EINVAL
);

1453 
vÆue_size
 = 
	`btf__ªsﬁve_size
(
btf
, 
vÆue
->
ty≥
);

1454 i‡(
vÆue_size
 < 0) {

1455 
	`¥_w¨n
("m≠:%†övÆid BTF vÆue_ty≥_size\n", 
m≠_«me
);

1456  
	`libbpf_îr
(
vÆue_size
);

1459 i‡(
ex≥˘ed_vÆue_size
 !
vÆue_size
) {

1460 
	`¥_w¨n
("map:%s btf_value_type_size:%u != map_def_value_size:%u\n",

1461 
m≠_«me
, (
__u32
)
vÆue_size
, 
ex≥˘ed_vÆue_size
);

1462  
	`libbpf_îr
(-
EINVAL
);

1465 *
key_ty≥_id
 = 
key
->
ty≥
;

1466 *
vÆue_ty≥_id
 = 
vÆue
->
ty≥
;

1469 
	}
}

1471 
	$btf_övÆid©e_øw_d©a
(
btf
 *btf)

1473 i‡(
btf
->
øw_d©a
) {

1474 
	`‰ì
(
btf
->
øw_d©a
);

1475 
btf
->
øw_d©a
 = 
NULL
;

1477 i‡(
btf
->
øw_d©a_sw≠≥d
) {

1478 
	`‰ì
(
btf
->
øw_d©a_sw≠≥d
);

1479 
btf
->
øw_d©a_sw≠≥d
 = 
NULL
;

1481 
	}
}

1487 
	$btf_ísuª_modifübÀ
(
btf
 *btf)

1489 *
hdr
, *
ty≥s
;

1490 
°r£t
 *
£t
 = 
NULL
;

1491 
îr
 = -
ENOMEM
;

1493 i‡(
	`btf_is_modifübÀ
(
btf
)) {

1495 
	`btf_övÆid©e_øw_d©a
(
btf
);

1500 
hdr
 = 
	`mÆloc
(
btf
->hdr->
hdr_Àn
);

1501 
ty≥s
 = 
	`mÆloc
(
btf
->
hdr
->
ty≥_Àn
);

1502 i‡(!
hdr
 || !
ty≥s
)

1503 
îr_out
;

1505 
	`mem˝y
(
hdr
, 
btf
->hdr, btf->hdr->
hdr_Àn
);

1506 
	`mem˝y
(
ty≥s
, 
btf
->
ty≥s_d©a
, btf->
hdr
->
ty≥_Àn
);

1509 
£t
 = 
	`°r£t__√w
(
BTF_MAX_STR_OFFSET
, 
btf
->
°rs_d©a
, btf->
hdr
->
°r_Àn
);

1510 i‡(
	`IS_ERR
(
£t
)) {

1511 
îr
 = 
	`PTR_ERR
(
£t
);

1512 
îr_out
;

1516 
btf
->
hdr
 = hdr;

1517 
btf
->
ty≥s_d©a
 = 
ty≥s
;

1518 
btf
->
ty≥s_d©a_ˇp
 = btf->
hdr
->
ty≥_Àn
;

1519 
btf
->
°rs_d©a
 = 
NULL
;

1520 
btf
->
°rs_£t
 = 
£t
;

1524 i‡(
btf
->
hdr
->
°r_Àn
 == 0)

1525 
btf
->
°rs_dedu≥d
 = 
åue
;

1526 i‡(!
btf
->
ba£_btf
 && btf->
hdr
->
°r_Àn
 == 1)

1527 
btf
->
°rs_dedu≥d
 = 
åue
;

1530 
	`btf_övÆid©e_øw_d©a
(
btf
);

1534 
îr_out
:

1535 
	`°r£t__‰ì
(
£t
);

1536 
	`‰ì
(
hdr
);

1537 
	`‰ì
(
ty≥s
);

1538  
îr
;

1539 
	}
}

1547 
	$btf__föd_°r
(
btf
 *btf, c⁄° *
s
)

1549 
off
;

1551 i‡(
btf
->
ba£_btf
) {

1552 
off
 = 
	`btf__föd_°r
(
btf
->
ba£_btf
, 
s
);

1553 i‡(
off
 !-
ENOENT
)

1554  
off
;

1558 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

1559  
	`libbpf_îr
(-
ENOMEM
);

1561 
off
 = 
	`°r£t__föd_°r
(
btf
->
°rs_£t
, 
s
);

1562 i‡(
off
 < 0)

1563  
	`libbpf_îr
(
off
);

1565  
btf
->
°¨t_°r_off
 + 
off
;

1566 
	}
}

1573 
	$btf__add_°r
(
btf
 *btf, c⁄° *
s
)

1575 
off
;

1577 i‡(
btf
->
ba£_btf
) {

1578 
off
 = 
	`btf__föd_°r
(
btf
->
ba£_btf
, 
s
);

1579 i‡(
off
 !-
ENOENT
)

1580  
off
;

1583 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

1584  
	`libbpf_îr
(-
ENOMEM
);

1586 
off
 = 
	`°r£t__add_°r
(
btf
->
°rs_£t
, 
s
);

1587 i‡(
off
 < 0)

1588  
	`libbpf_îr
(
off
);

1590 
btf
->
hdr
->
°r_Àn
 = 
	`°r£t__d©a_size
(btf->
°rs_£t
);

1592  
btf
->
°¨t_°r_off
 + 
off
;

1593 
	}
}

1595 *
	$btf_add_ty≥_mem
(
btf
 *btf, 
size_t
 
add_sz
)

1597  
	`libbpf_add_mem
(&
btf
->
ty≥s_d©a
, &btf->
ty≥s_d©a_ˇp
, 1,

1598 
btf
->
hdr
->
ty≥_Àn
, 
UINT_MAX
, 
add_sz
);

1599 
	}
}

1601 
	$btf_ty≥_öc_vÀn
(
btf_ty≥
 *
t
)

1603 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
	`btf_köd
—), 
	`btf_vÀn
—Ë+ 1, 
	`btf_kÊag
(t));

1604 
	}
}

1606 
	$btf_commô_ty≥
(
btf
 *btf, 
d©a_sz
)

1608 
îr
;

1610 
îr
 = 
	`btf_add_ty≥_idx_íåy
(
btf
, btf->
hdr
->
ty≥_Àn
);

1611 i‡(
îr
)

1612  
	`libbpf_îr
(
îr
);

1614 
btf
->
hdr
->
ty≥_Àn
 +
d©a_sz
;

1615 
btf
->
hdr
->
°r_off
 +
d©a_sz
;

1616 
btf
->
ƒ_ty≥s
++;

1617  
btf
->
°¨t_id
 + btf->
ƒ_ty≥s
 - 1;

1618 
	}
}

1620 
	sbtf_pùe
 {

1621 c⁄° 
btf
 *
	m§c
;

1622 
btf
 *
	md°
;

1623 
hashm≠
 *
	m°r_off_m≠
;

1626 
	$btf_ªwrôe_°r
(
__u32
 *
°r_off
, *
˘x
)

1628 
btf_pùe
 *
p
 = 
˘x
;

1629 *
m≠≥d_off
;

1630 
off
, 
îr
;

1632 i‡(!*
°r_off
)

1635 i‡(
p
->
°r_off_m≠
 &&

1636 
	`hashm≠__föd
(
p
->
°r_off_m≠
, (*)()*
°r_off
, &
m≠≥d_off
)) {

1637 *
°r_off
 = (
__u32
)()
m≠≥d_off
;

1641 
off
 = 
	`btf__add_°r
(
p
->
d°
, 
	`btf__°r_by_off£t
’->
§c
, *
°r_off
));

1642 i‡(
off
 < 0)

1643  
off
;

1648 i‡(
p
->
°r_off_m≠
) {

1649 
îr
 = 
	`hashm≠__≠≥nd
(
p
->
°r_off_m≠
, (*)()*
°r_off
, (*)()
off
);

1650 i‡(
îr
)

1651  
îr
;

1654 *
°r_off
 = 
off
;

1656 
	}
}

1658 
	$btf__add_ty≥
(
btf
 *btf, c⁄° bt‡*
§c_btf
, c⁄° 
btf_ty≥
 *
§c_ty≥
)

1660 
btf_pùe
 
p
 = { .
§c
 = 
§c_btf
, .
d°
 = 
btf
 };

1661 
btf_ty≥
 *
t
;

1662 
sz
, 
îr
;

1664 
sz
 = 
	`btf_ty≥_size
(
§c_ty≥
);

1665 i‡(
sz
 < 0)

1666  
	`libbpf_îr
(
sz
);

1669 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

1670  
	`libbpf_îr
(-
ENOMEM
);

1672 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

1673 i‡(!
t
)

1674  
	`libbpf_îr
(-
ENOMEM
);

1676 
	`mem˝y
(
t
, 
§c_ty≥
, 
sz
);

1678 
îr
 = 
	`btf_ty≥_visô_°r_offs
(
t
, 
btf_ªwrôe_°r
, &
p
);

1679 i‡(
îr
)

1680  
	`libbpf_îr
(
îr
);

1682  
	`btf_commô_ty≥
(
btf
, 
sz
);

1683 
	}
}

1685 
	$btf_ªwrôe_ty≥_ids
(
__u32
 *
ty≥_id
, *
˘x
)

1687 
btf
 *bt‡
˘x
;

1689 i‡(!*
ty≥_id
)

1696 *
ty≥_id
 +
btf
->
°¨t_id
 + btf->
ƒ_ty≥s
 - 1;

1698 
	}
}

1700 
size_t
 
btf_dedup_idítôy_hash_‚
(c⁄° *
key
, *
˘x
);

1701 
boﬁ
 
btf_dedup_equÆ_‚
(c⁄° *
k1
, c⁄° *
k2
, *
˘x
);

1703 
	$btf__add_btf
(
btf
 *btf, c⁄° bt‡*
§c_btf
)

1705 
btf_pùe
 
p
 = { .
§c
 = 
§c_btf
, .
d°
 = 
btf
 };

1706 
d©a_sz
, 
sz
, 
˙t
, 
i
, 
îr
, 
ﬁd_°rs_Àn
;

1707 
__u32
 *
off
;

1708 *
t
;

1711 i‡(
§c_btf
->
ba£_btf
)

1712  
	`libbpf_îr
(-
ENOTSUP
);

1715 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

1716  
	`libbpf_îr
(-
ENOMEM
);

1721 
ﬁd_°rs_Àn
 = 
btf
->
hdr
->
°r_Àn
;

1723 
d©a_sz
 = 
§c_btf
->
hdr
->
ty≥_Àn
;

1724 
˙t
 = 
	`btf__ty≥_˙t
(
§c_btf
) - 1;

1727 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
d©a_sz
);

1728 i‡(!
t
)

1729  
	`libbpf_îr
(-
ENOMEM
);

1732 
off
 = 
	`btf_add_ty≥_offs_mem
(
btf
, 
˙t
);

1733 i‡(!
off
)

1734  
	`libbpf_îr
(-
ENOMEM
);

1737 
p
.
°r_off_m≠
 = 
	`hashm≠__√w
(
btf_dedup_idítôy_hash_‚
, 
btf_dedup_equÆ_‚
, 
NULL
);

1738 i‡(
	`IS_ERR
(
p
.
°r_off_m≠
))

1739  
	`libbpf_îr
(-
ENOMEM
);

1742 
	`mem˝y
(
t
, 
§c_btf
->
ty≥s_d©a
, 
d©a_sz
);

1744 
i
 = 0; i < 
˙t
; i++) {

1745 
sz
 = 
	`btf_ty≥_size
(
t
);

1746 i‡(
sz
 < 0) {

1748 
îr
 = 
sz
;

1749 
îr_out
;

1753 *
off
 = 
t
 - 
btf
->
ty≥s_d©a
;

1756 
îr
 = 
	`btf_ty≥_visô_°r_offs
(
t
, 
btf_ªwrôe_°r
, &
p
);

1757 i‡(
îr
)

1758 
îr_out
;

1761 
îr
 = 
	`btf_ty≥_visô_ty≥_ids
(
t
, 
btf_ªwrôe_ty≥_ids
, 
btf
);

1762 i‡(
îr
)

1763 
îr_out
;

1766 
t
 +
sz
;

1767 
off
++;

1778 
btf
->
hdr
->
ty≥_Àn
 +
d©a_sz
;

1779 
btf
->
hdr
->
°r_off
 +
d©a_sz
;

1780 
btf
->
ƒ_ty≥s
 +
˙t
;

1782 
	`hashm≠__‰ì
(
p
.
°r_off_m≠
);

1785  
btf
->
°¨t_id
 + btf->
ƒ_ty≥s
 - 
˙t
;

1786 
îr_out
:

1790 
	`mem£t
(
btf
->
ty≥s_d©a
 + btf->
hdr
->
ty≥_Àn
, 0, 
d©a_sz
);

1791 
	`mem£t
(
btf
->
°rs_d©a
 + 
ﬁd_°rs_Àn
, 0, btf->
hdr
->
°r_Àn
 - old_strs_len);

1795 
btf
->
hdr
->
°r_Àn
 = 
ﬁd_°rs_Àn
;

1797 
	`hashm≠__‰ì
(
p
.
°r_off_m≠
);

1799  
	`libbpf_îr
(
îr
);

1800 
	}
}

1811 
	$btf__add_öt
(
btf
 *btf, c⁄° *
«me
, 
size_t
 
byã_sz
, 
ícodög
)

1813 
btf_ty≥
 *
t
;

1814 
sz
, 
«me_off
;

1817 i‡(!
«me
 || !name[0])

1818  
	`libbpf_îr
(-
EINVAL
);

1820 i‡(!
byã_sz
 || (byte_sz & (byte_sz - 1)) || byte_sz > 16)

1821  
	`libbpf_îr
(-
EINVAL
);

1822 i‡(
ícodög
 & ~(
BTF_INT_SIGNED
 | 
BTF_INT_CHAR
 | 
BTF_INT_BOOL
))

1823  
	`libbpf_îr
(-
EINVAL
);

1826 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

1827  
	`libbpf_îr
(-
ENOMEM
);

1829 
sz
 = (
btf_ty≥
) + ();

1830 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

1831 i‡(!
t
)

1832  
	`libbpf_îr
(-
ENOMEM
);

1838 
«me_off
 = 
	`btf__add_°r
(
btf
, 
«me
);

1839 i‡(
«me_off
 < 0)

1840  
«me_off
;

1842 
t
->
«me_off
 =Çame_off;

1843 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_INT
, 0, 0);

1844 
t
->
size
 = 
byã_sz
;

1846 *(
__u32
 *)(
t
 + 1Ë(
ícodög
 << 24Ë| (
byã_sz
 * 8);

1848  
	`btf_commô_ty≥
(
btf
, 
sz
);

1849 
	}
}

1859 
	$btf__add_Êﬂt
(
btf
 *btf, c⁄° *
«me
, 
size_t
 
byã_sz
)

1861 
btf_ty≥
 *
t
;

1862 
sz
, 
«me_off
;

1865 i‡(!
«me
 || !name[0])

1866  
	`libbpf_îr
(-
EINVAL
);

1869 i‡(
byã_sz
 != 2 && byte_sz != 4 && byte_sz != 8 && byte_sz != 12 &&

1870 
byã_sz
 != 16)

1871  
	`libbpf_îr
(-
EINVAL
);

1873 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

1874  
	`libbpf_îr
(-
ENOMEM
);

1876 
sz
 = (
btf_ty≥
);

1877 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

1878 i‡(!
t
)

1879  
	`libbpf_îr
(-
ENOMEM
);

1881 
«me_off
 = 
	`btf__add_°r
(
btf
, 
«me
);

1882 i‡(
«me_off
 < 0)

1883  
«me_off
;

1885 
t
->
«me_off
 =Çame_off;

1886 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_FLOAT
, 0, 0);

1887 
t
->
size
 = 
byã_sz
;

1889  
	`btf_commô_ty≥
(
btf
, 
sz
);

1890 
	}
}

1896 
	$vÆid©e_ty≥_id
(
id
)

1898 i‡(
id
 < 0 || id > 
BTF_MAX_NR_TYPES
)

1899  -
EINVAL
;

1901 
	}
}

1904 
	$btf_add_ªf_köd
(
btf
 *btf, 
köd
, c⁄° *
«me
, 
ªf_ty≥_id
)

1906 
btf_ty≥
 *
t
;

1907 
sz
, 
«me_off
 = 0;

1909 i‡(
	`vÆid©e_ty≥_id
(
ªf_ty≥_id
))

1910  
	`libbpf_îr
(-
EINVAL
);

1912 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

1913  
	`libbpf_îr
(-
ENOMEM
);

1915 
sz
 = (
btf_ty≥
);

1916 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

1917 i‡(!
t
)

1918  
	`libbpf_îr
(-
ENOMEM
);

1920 i‡(
«me
 &&Çame[0]) {

1921 
«me_off
 = 
	`btf__add_°r
(
btf
, 
«me
);

1922 i‡(
«me_off
 < 0)

1923  
«me_off
;

1926 
t
->
«me_off
 =Çame_off;

1927 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
köd
, 0, 0);

1928 
t
->
ty≥
 = 
ªf_ty≥_id
;

1930  
	`btf_commô_ty≥
(
btf
, 
sz
);

1931 
	}
}

1940 
	$btf__add_±r
(
btf
 *btf, 
ªf_ty≥_id
)

1942  
	`btf_add_ªf_köd
(
btf
, 
BTF_KIND_PTR
, 
NULL
, 
ªf_ty≥_id
);

1943 
	}
}

1954 
	$btf__add_¨øy
(
btf
 *btf, 
ödex_ty≥_id
, 
ñem_ty≥_id
, 
__u32
 
ƒ_ñems
)

1956 
btf_ty≥
 *
t
;

1957 
btf_¨øy
 *
a
;

1958 
sz
;

1960 i‡(
	`vÆid©e_ty≥_id
(
ödex_ty≥_id
Ë|| vÆid©e_ty≥_id(
ñem_ty≥_id
))

1961  
	`libbpf_îr
(-
EINVAL
);

1963 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

1964  
	`libbpf_îr
(-
ENOMEM
);

1966 
sz
 = (
btf_ty≥
Ë+ (
btf_¨øy
);

1967 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

1968 i‡(!
t
)

1969  
	`libbpf_îr
(-
ENOMEM
);

1971 
t
->
«me_off
 = 0;

1972 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_ARRAY
, 0, 0);

1973 
t
->
size
 = 0;

1975 
a
 = 
	`btf_¨øy
(
t
);

1976 
a
->
ty≥
 = 
ñem_ty≥_id
;

1977 
a
->
ödex_ty≥
 = 
ödex_ty≥_id
;

1978 
a
->
√Àms
 = 
ƒ_ñems
;

1980  
	`btf_commô_ty≥
(
btf
, 
sz
);

1981 
	}
}

1984 
	$btf_add_composôe
(
btf
 *btf, 
köd
, c⁄° *
«me
, 
__u32
 
byãs_sz
)

1986 
btf_ty≥
 *
t
;

1987 
sz
, 
«me_off
 = 0;

1989 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

1990  
	`libbpf_îr
(-
ENOMEM
);

1992 
sz
 = (
btf_ty≥
);

1993 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

1994 i‡(!
t
)

1995  
	`libbpf_îr
(-
ENOMEM
);

1997 i‡(
«me
 &&Çame[0]) {

1998 
«me_off
 = 
	`btf__add_°r
(
btf
, 
«me
);

1999 i‡(
«me_off
 < 0)

2000  
«me_off
;

2006 
t
->
«me_off
 =Çame_off;

2007 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
köd
, 0, 0);

2008 
t
->
size
 = 
byãs_sz
;

2010  
	`btf_commô_ty≥
(
btf
, 
sz
);

2011 
	}
}

2025 
	$btf__add_°ru˘
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
byã_sz
)

2027  
	`btf_add_composôe
(
btf
, 
BTF_KIND_STRUCT
, 
«me
, 
byã_sz
);

2028 
	}
}

2043 
	$btf__add_uni⁄
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
byã_sz
)

2045  
	`btf_add_composôe
(
btf
, 
BTF_KIND_UNION
, 
«me
, 
byã_sz
);

2046 
	}
}

2048 
btf_ty≥
 *
	$btf_œ°_ty≥
(
btf
 *btf)

2050  
	`btf_ty≥_by_id
(
btf
, 
	`btf__ty≥_˙t
(btf) - 1);

2051 
	}
}

2063 
	$btf__add_fõld
(
btf
 *btf, c⁄° *
«me
, 
ty≥_id
,

2064 
__u32
 
bô_off£t
, __u32 
bô_size
)

2066 
btf_ty≥
 *
t
;

2067 
btf_membî
 *
m
;

2068 
boﬁ
 
is_bôfõld
;

2069 
sz
, 
«me_off
 = 0;

2072 i‡(
btf
->
ƒ_ty≥s
 == 0)

2073  
	`libbpf_îr
(-
EINVAL
);

2074 
t
 = 
	`btf_œ°_ty≥
(
btf
);

2075 i‡(!
	`btf_is_composôe
(
t
))

2076  
	`libbpf_îr
(-
EINVAL
);

2078 i‡(
	`vÆid©e_ty≥_id
(
ty≥_id
))

2079  
	`libbpf_îr
(-
EINVAL
);

2081 
is_bôfõld
 = 
bô_size
 || (
bô_off£t
 % 8 != 0);

2082 i‡(
is_bôfõld
 && (
bô_size
 =0 || bô_sizê> 255 || 
bô_off£t
 > 0xffffff))

2083  
	`libbpf_îr
(-
EINVAL
);

2086 i‡(
	`btf_is_uni⁄
(
t
Ë&& 
bô_off£t
)

2087  
	`libbpf_îr
(-
EINVAL
);

2090 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

2091  
	`libbpf_îr
(-
ENOMEM
);

2093 
sz
 = (
btf_membî
);

2094 
m
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

2095 i‡(!
m
)

2096  
	`libbpf_îr
(-
ENOMEM
);

2098 i‡(
«me
 &&Çame[0]) {

2099 
«me_off
 = 
	`btf__add_°r
(
btf
, 
«me
);

2100 i‡(
«me_off
 < 0)

2101  
«me_off
;

2104 
m
->
«me_off
 =Çame_off;

2105 
m
->
ty≥
 = 
ty≥_id
;

2106 
m
->
off£t
 = 
bô_off£t
 | (
bô_size
 << 24);

2109 
t
 = 
	`btf_œ°_ty≥
(
btf
);

2111 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
	`btf_köd
—), 
	`btf_vÀn
—Ë+ 1, 
is_bôfõld
 || 
	`btf_kÊag
(t));

2113 
btf
->
hdr
->
ty≥_Àn
 +
sz
;

2114 
btf
->
hdr
->
°r_off
 +
sz
;

2116 
	}
}

2131 
	$btf__add_íum
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
byã_sz
)

2133 
btf_ty≥
 *
t
;

2134 
sz
, 
«me_off
 = 0;

2137 i‡(!
byã_sz
 || (byte_sz & (byte_sz - 1)) || byte_sz > 8)

2138  
	`libbpf_îr
(-
EINVAL
);

2140 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

2141  
	`libbpf_îr
(-
ENOMEM
);

2143 
sz
 = (
btf_ty≥
);

2144 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

2145 i‡(!
t
)

2146  
	`libbpf_îr
(-
ENOMEM
);

2148 i‡(
«me
 &&Çame[0]) {

2149 
«me_off
 = 
	`btf__add_°r
(
btf
, 
«me
);

2150 i‡(
«me_off
 < 0)

2151  
«me_off
;

2155 
t
->
«me_off
 =Çame_off;

2156 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_ENUM
, 0, 0);

2157 
t
->
size
 = 
byã_sz
;

2159  
	`btf_commô_ty≥
(
btf
, 
sz
);

2160 
	}
}

2170 
	$btf__add_íum_vÆue
(
btf
 *btf, c⁄° *
«me
, 
__s64
 
vÆue
)

2172 
btf_ty≥
 *
t
;

2173 
btf_íum
 *
v
;

2174 
sz
, 
«me_off
;

2177 i‡(
btf
->
ƒ_ty≥s
 == 0)

2178  
	`libbpf_îr
(-
EINVAL
);

2179 
t
 = 
	`btf_œ°_ty≥
(
btf
);

2180 i‡(!
	`btf_is_íum
(
t
))

2181  
	`libbpf_îr
(-
EINVAL
);

2184 i‡(!
«me
 || !name[0])

2185  
	`libbpf_îr
(-
EINVAL
);

2186 i‡(
vÆue
 < 
INT_MIN
 || vÆuê> 
UINT_MAX
)

2187  
	`libbpf_îr
(-
E2BIG
);

2190 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

2191  
	`libbpf_îr
(-
ENOMEM
);

2193 
sz
 = (
btf_íum
);

2194 
v
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

2195 i‡(!
v
)

2196  
	`libbpf_îr
(-
ENOMEM
);

2198 
«me_off
 = 
	`btf__add_°r
(
btf
, 
«me
);

2199 i‡(
«me_off
 < 0)

2200  
«me_off
;

2202 
v
->
«me_off
 =Çame_off;

2203 
v
->
vÆ
 = 
vÆue
;

2206 
t
 = 
	`btf_œ°_ty≥
(
btf
);

2207 
	`btf_ty≥_öc_vÀn
(
t
);

2209 
btf
->
hdr
->
ty≥_Àn
 +
sz
;

2210 
btf
->
hdr
->
°r_off
 +
sz
;

2212 
	}
}

2223 
	$btf__add_fwd
(
btf
 *btf, c⁄° *
«me
, 
btf_fwd_köd
 
fwd_köd
)

2225 i‡(!
«me
 || !name[0])

2226  
	`libbpf_îr
(-
EINVAL
);

2228 
fwd_köd
) {

2229 
BTF_FWD_STRUCT
:

2230 
BTF_FWD_UNION
: {

2231 
btf_ty≥
 *
t
;

2232 
id
;

2234 
id
 = 
	`btf_add_ªf_köd
(
btf
, 
BTF_KIND_FWD
, 
«me
, 0);

2235 i‡(
id
 <= 0)

2236  
id
;

2237 
t
 = 
	`btf_ty≥_by_id
(
btf
, 
id
);

2238 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_FWD
, 0, 
fwd_köd
 =
BTF_FWD_UNION
);

2239  
id
;

2241 
BTF_FWD_ENUM
:

2245  
	`btf__add_íum
(
btf
, 
«me
, ());

2247  
	`libbpf_îr
(-
EINVAL
);

2249 
	}
}

2259 
	$btf__add_ty≥def
(
btf
 *btf, c⁄° *
«me
, 
ªf_ty≥_id
)

2261 i‡(!
«me
 || !name[0])

2262  
	`libbpf_îr
(-
EINVAL
);

2264  
	`btf_add_ªf_köd
(
btf
, 
BTF_KIND_TYPEDEF
, 
«me
, 
ªf_ty≥_id
);

2265 
	}
}

2274 
	$btf__add_vﬁ©ûe
(
btf
 *btf, 
ªf_ty≥_id
)

2276  
	`btf_add_ªf_köd
(
btf
, 
BTF_KIND_VOLATILE
, 
NULL
, 
ªf_ty≥_id
);

2277 
	}
}

2286 
	$btf__add_c⁄°
(
btf
 *btf, 
ªf_ty≥_id
)

2288  
	`btf_add_ªf_köd
(
btf
, 
BTF_KIND_CONST
, 
NULL
, 
ªf_ty≥_id
);

2289 
	}
}

2298 
	$btf__add_ª°ri˘
(
btf
 *btf, 
ªf_ty≥_id
)

2300  
	`btf_add_ªf_köd
(
btf
, 
BTF_KIND_RESTRICT
, 
NULL
, 
ªf_ty≥_id
);

2301 
	}
}

2311 
	$btf__add_ty≥_èg
(
btf
 *btf, c⁄° *
vÆue
, 
ªf_ty≥_id
)

2313 i‡(!
vÆue
|| !value[0])

2314  
	`libbpf_îr
(-
EINVAL
);

2316  
	`btf_add_ªf_köd
(
btf
, 
BTF_KIND_TYPE_TAG
, 
vÆue
, 
ªf_ty≥_id
);

2317 
	}
}

2327 
	$btf__add_func
(
btf
 *btf, c⁄° *
«me
,

2328 
btf_func_lökage
 
lökage
, 
¥Ÿo_ty≥_id
)

2330 
id
;

2332 i‡(!
«me
 || !name[0])

2333  
	`libbpf_îr
(-
EINVAL
);

2334 i‡(
lökage
 !
BTF_FUNC_STATIC
 &&Üökagê!
BTF_FUNC_GLOBAL
 &&

2335 
lökage
 !
BTF_FUNC_EXTERN
)

2336  
	`libbpf_îr
(-
EINVAL
);

2338 
id
 = 
	`btf_add_ªf_köd
(
btf
, 
BTF_KIND_FUNC
, 
«me
, 
¥Ÿo_ty≥_id
);

2339 i‡(
id
 > 0) {

2340 
btf_ty≥
 *
t
 = 
	`btf_ty≥_by_id
(
btf
, 
id
);

2342 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_FUNC
, 
lökage
, 0);

2344  
	`libbpf_îr
(
id
);

2345 
	}
}

2359 
	$btf__add_func_¥Ÿo
(
btf
 *btf, 
ªt_ty≥_id
)

2361 
btf_ty≥
 *
t
;

2362 
sz
;

2364 i‡(
	`vÆid©e_ty≥_id
(
ªt_ty≥_id
))

2365  
	`libbpf_îr
(-
EINVAL
);

2367 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

2368  
	`libbpf_îr
(-
ENOMEM
);

2370 
sz
 = (
btf_ty≥
);

2371 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

2372 i‡(!
t
)

2373  
	`libbpf_îr
(-
ENOMEM
);

2378 
t
->
«me_off
 = 0;

2379 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_FUNC_PROTO
, 0, 0);

2380 
t
->
ty≥
 = 
ªt_ty≥_id
;

2382  
	`btf_commô_ty≥
(
btf
, 
sz
);

2383 
	}
}

2393 
	$btf__add_func_∑øm
(
btf
 *btf, c⁄° *
«me
, 
ty≥_id
)

2395 
btf_ty≥
 *
t
;

2396 
btf_∑øm
 *
p
;

2397 
sz
, 
«me_off
 = 0;

2399 i‡(
	`vÆid©e_ty≥_id
(
ty≥_id
))

2400  
	`libbpf_îr
(-
EINVAL
);

2403 i‡(
btf
->
ƒ_ty≥s
 == 0)

2404  
	`libbpf_îr
(-
EINVAL
);

2405 
t
 = 
	`btf_œ°_ty≥
(
btf
);

2406 i‡(!
	`btf_is_func_¥Ÿo
(
t
))

2407  
	`libbpf_îr
(-
EINVAL
);

2410 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

2411  
	`libbpf_îr
(-
ENOMEM
);

2413 
sz
 = (
btf_∑øm
);

2414 
p
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

2415 i‡(!
p
)

2416  
	`libbpf_îr
(-
ENOMEM
);

2418 i‡(
«me
 &&Çame[0]) {

2419 
«me_off
 = 
	`btf__add_°r
(
btf
, 
«me
);

2420 i‡(
«me_off
 < 0)

2421  
«me_off
;

2424 
p
->
«me_off
 =Çame_off;

2425 
p
->
ty≥
 = 
ty≥_id
;

2428 
t
 = 
	`btf_œ°_ty≥
(
btf
);

2429 
	`btf_ty≥_öc_vÀn
(
t
);

2431 
btf
->
hdr
->
ty≥_Àn
 +
sz
;

2432 
btf
->
hdr
->
°r_off
 +
sz
;

2434 
	}
}

2446 
	$btf__add_v¨
(
btf
 *btf, c⁄° *
«me
, 
lökage
, 
ty≥_id
)

2448 
btf_ty≥
 *
t
;

2449 
btf_v¨
 *
v
;

2450 
sz
, 
«me_off
;

2453 i‡(!
«me
 || !name[0])

2454  
	`libbpf_îr
(-
EINVAL
);

2455 i‡(
lökage
 !
BTF_VAR_STATIC
 &&Üökagê!
BTF_VAR_GLOBAL_ALLOCATED
 &&

2456 
lökage
 !
BTF_VAR_GLOBAL_EXTERN
)

2457  
	`libbpf_îr
(-
EINVAL
);

2458 i‡(
	`vÆid©e_ty≥_id
(
ty≥_id
))

2459  
	`libbpf_îr
(-
EINVAL
);

2462 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

2463  
	`libbpf_îr
(-
ENOMEM
);

2465 
sz
 = (
btf_ty≥
Ë+ (
btf_v¨
);

2466 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

2467 i‡(!
t
)

2468  
	`libbpf_îr
(-
ENOMEM
);

2470 
«me_off
 = 
	`btf__add_°r
(
btf
, 
«me
);

2471 i‡(
«me_off
 < 0)

2472  
«me_off
;

2474 
t
->
«me_off
 =Çame_off;

2475 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_VAR
, 0, 0);

2476 
t
->
ty≥
 = 
ty≥_id
;

2478 
v
 = 
	`btf_v¨
(
t
);

2479 
v
->
lökage
 =Üinkage;

2481  
	`btf_commô_ty≥
(
btf
, 
sz
);

2482 
	}
}

2496 
	$btf__add_d©a£c
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
byã_sz
)

2498 
btf_ty≥
 *
t
;

2499 
sz
, 
«me_off
;

2502 i‡(!
«me
 || !name[0])

2503  
	`libbpf_îr
(-
EINVAL
);

2505 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

2506  
	`libbpf_îr
(-
ENOMEM
);

2508 
sz
 = (
btf_ty≥
);

2509 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

2510 i‡(!
t
)

2511  
	`libbpf_îr
(-
ENOMEM
);

2513 
«me_off
 = 
	`btf__add_°r
(
btf
, 
«me
);

2514 i‡(
«me_off
 < 0)

2515  
«me_off
;

2518 
t
->
«me_off
 =Çame_off;

2519 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_DATASEC
, 0, 0);

2520 
t
->
size
 = 
byã_sz
;

2522  
	`btf_commô_ty≥
(
btf
, 
sz
);

2523 
	}
}

2535 
	$btf__add_d©a£c_v¨_öfo
(
btf
 *btf, 
v¨_ty≥_id
, 
__u32
 
off£t
, __u32 
byã_sz
)

2537 
btf_ty≥
 *
t
;

2538 
btf_v¨_£cöfo
 *
v
;

2539 
sz
;

2542 i‡(
btf
->
ƒ_ty≥s
 == 0)

2543  
	`libbpf_îr
(-
EINVAL
);

2544 
t
 = 
	`btf_œ°_ty≥
(
btf
);

2545 i‡(!
	`btf_is_d©a£c
(
t
))

2546  
	`libbpf_îr
(-
EINVAL
);

2548 i‡(
	`vÆid©e_ty≥_id
(
v¨_ty≥_id
))

2549  
	`libbpf_îr
(-
EINVAL
);

2552 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

2553  
	`libbpf_îr
(-
ENOMEM
);

2555 
sz
 = (
btf_v¨_£cöfo
);

2556 
v
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

2557 i‡(!
v
)

2558  
	`libbpf_îr
(-
ENOMEM
);

2560 
v
->
ty≥
 = 
v¨_ty≥_id
;

2561 
v
->
off£t
 = offset;

2562 
v
->
size
 = 
byã_sz
;

2565 
t
 = 
	`btf_œ°_ty≥
(
btf
);

2566 
	`btf_ty≥_öc_vÀn
(
t
);

2568 
btf
->
hdr
->
ty≥_Àn
 +
sz
;

2569 
btf
->
hdr
->
°r_off
 +
sz
;

2571 
	}
}

2583 
	$btf__add_de˛_èg
(
btf
 *btf, c⁄° *
vÆue
, 
ªf_ty≥_id
,

2584 
comp⁄ít_idx
)

2586 
btf_ty≥
 *
t
;

2587 
sz
, 
vÆue_off
;

2589 i‡(!
vÆue
 || !vÆue[0] || 
comp⁄ít_idx
 < -1)

2590  
	`libbpf_îr
(-
EINVAL
);

2592 i‡(
	`vÆid©e_ty≥_id
(
ªf_ty≥_id
))

2593  
	`libbpf_îr
(-
EINVAL
);

2595 i‡(
	`btf_ísuª_modifübÀ
(
btf
))

2596  
	`libbpf_îr
(-
ENOMEM
);

2598 
sz
 = (
btf_ty≥
Ë+ (
btf_de˛_èg
);

2599 
t
 = 
	`btf_add_ty≥_mem
(
btf
, 
sz
);

2600 i‡(!
t
)

2601  
	`libbpf_îr
(-
ENOMEM
);

2603 
vÆue_off
 = 
	`btf__add_°r
(
btf
, 
vÆue
);

2604 i‡(
vÆue_off
 < 0)

2605  
vÆue_off
;

2607 
t
->
«me_off
 = 
vÆue_off
;

2608 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_DECL_TAG
, 0, 
Ál£
);

2609 
t
->
ty≥
 = 
ªf_ty≥_id
;

2610 
	`btf_de˛_èg
(
t
)->
comp⁄ít_idx
 = component_idx;

2612  
	`btf_commô_ty≥
(
btf
, 
sz
);

2613 
	}
}

2615 
	sbtf_ext_£c_£tup_∑øm
 {

2616 
__u32
 
	moff
;

2617 
__u32
 
	mÀn
;

2618 
__u32
 
	mmö_ªc_size
;

2619 
btf_ext_öfo
 *
	mext_öfo
;

2620 c⁄° *
	mdesc
;

2623 
	$btf_ext_£tup_öfo
(
btf_ext
 *btf_ext,

2624 
btf_ext_£c_£tup_∑øm
 *
ext_£c
)

2626 c⁄° 
btf_ext_öfo_£c
 *
söfo
;

2627 
btf_ext_öfo
 *
ext_öfo
;

2628 
__u32
 
öfo_À·
, 
ªc‹d_size
;

2629 
size_t
 
£c_˙t
 = 0;

2631 *
öfo
;

2633 i‡(
ext_£c
->
Àn
 == 0)

2636 i‡(
ext_£c
->
off
 & 0x03) {

2637 
	`¥_debug
(".BTF.ext %s section isÇotálignedÅo 4 bytes\n",

2638 
ext_£c
->
desc
);

2639  -
EINVAL
;

2642 
öfo
 = 
btf_ext
->
d©a
 + btf_ext->
hdr
->
hdr_Àn
 + 
ext_£c
->
off
;

2643 
öfo_À·
 = 
ext_£c
->
Àn
;

2645 i‡(
btf_ext
->
d©a
 + btf_ext->
d©a_size
 < 
öfo
 + 
ext_£c
->
Àn
) {

2646 
	`¥_debug
("%s section (off:%uÜen:%u) is beyondÅheÉnd ofÅhe ELF section .BTF.ext\n",

2647 
ext_£c
->
desc
,Éxt_£c->
off
,Éxt_£c->
Àn
);

2648  -
EINVAL
;

2652 i‡(
öfo_À·
 < (
__u32
)) {

2653 
	`¥_debug
(".BTF.exà%†ªc‹d sizênŸ found\n", 
ext_£c
->
desc
);

2654  -
EINVAL
;

2658 
ªc‹d_size
 = *(
__u32
 *)
öfo
;

2659 i‡(
ªc‹d_size
 < 
ext_£c
->
mö_ªc_size
 ||

2660 
ªc‹d_size
 & 0x03) {

2661 
	`¥_debug
("%s section in .BTF.ext has invalidÑecord size %u\n",

2662 
ext_£c
->
desc
, 
ªc‹d_size
);

2663  -
EINVAL
;

2666 
söfo
 = 
öfo
 + (
__u32
);

2667 
öfo_À·
 -(
__u32
);

2670 i‡(!
öfo_À·
) {

2671 
	`¥_debug
("%†£˘i⁄ i¿.BTF.exàha†nÿªc‹ds", 
ext_£c
->
desc
);

2672  -
EINVAL
;

2675 
öfo_À·
) {

2676 
£c_hdæí
 = (
btf_ext_öfo_£c
);

2677 
__u64
 
tŸÆ_ªc‹d_size
;

2678 
__u32
 
num_ªc‹ds
;

2680 i‡(
öfo_À·
 < 
£c_hdæí
) {

2681 
	`¥_debug
("%s section header isÇot found in .BTF.ext\n",

2682 
ext_£c
->
desc
);

2683  -
EINVAL
;

2686 
num_ªc‹ds
 = 
söfo
->
num_öfo
;

2687 i‡(
num_ªc‹ds
 == 0) {

2688 
	`¥_debug
("%s section has incorrectÇum_records in .BTF.ext\n",

2689 
ext_£c
->
desc
);

2690  -
EINVAL
;

2693 
tŸÆ_ªc‹d_size
 = 
£c_hdæí
 + (
__u64
)
num_ªc‹ds
 * 
ªc‹d_size
;

2694 i‡(
öfo_À·
 < 
tŸÆ_ªc‹d_size
) {

2695 
	`¥_debug
("%s section has incorrectÇum_records in .BTF.ext\n",

2696 
ext_£c
->
desc
);

2697  -
EINVAL
;

2700 
öfo_À·
 -
tŸÆ_ªc‹d_size
;

2701 
söfo
 = (*)söfÿ+ 
tŸÆ_ªc‹d_size
;

2702 
£c_˙t
++;

2705 
ext_öfo
 = 
ext_£c
->ext_info;

2706 
ext_öfo
->
Àn
 = 
ext_£c
->À¿- (
__u32
);

2707 
ext_öfo
->
ªc_size
 = 
ªc‹d_size
;

2708 
ext_öfo
->
öfo
 = infÿ+ (
__u32
);

2709 
ext_öfo
->
£c_˙t
 = sec_cnt;

2712 
	}
}

2714 
	$btf_ext_£tup_func_öfo
(
btf_ext
 *btf_ext)

2716 
btf_ext_£c_£tup_∑øm
 
∑øm
 = {

2717 .
off
 = 
btf_ext
->
hdr
->
func_öfo_off
,

2718 .
Àn
 = 
btf_ext
->
hdr
->
func_öfo_Àn
,

2719 .
mö_ªc_size
 = (
bpf_func_öfo_mö
),

2720 .
ext_öfo
 = &
btf_ext
->
func_öfo
,

2721 .
desc
 = "func_info"

2724  
	`btf_ext_£tup_öfo
(
btf_ext
, &
∑øm
);

2725 
	}
}

2727 
	$btf_ext_£tup_löe_öfo
(
btf_ext
 *btf_ext)

2729 
btf_ext_£c_£tup_∑øm
 
∑øm
 = {

2730 .
off
 = 
btf_ext
->
hdr
->
löe_öfo_off
,

2731 .
Àn
 = 
btf_ext
->
hdr
->
löe_öfo_Àn
,

2732 .
mö_ªc_size
 = (
bpf_löe_öfo_mö
),

2733 .
ext_öfo
 = &
btf_ext
->
löe_öfo
,

2734 .
desc
 = "line_info",

2737  
	`btf_ext_£tup_öfo
(
btf_ext
, &
∑øm
);

2738 
	}
}

2740 
	$btf_ext_£tup_c‹e_ªlos
(
btf_ext
 *btf_ext)

2742 
btf_ext_£c_£tup_∑øm
 
∑øm
 = {

2743 .
off
 = 
btf_ext
->
hdr
->
c‹e_ªlo_off
,

2744 .
Àn
 = 
btf_ext
->
hdr
->
c‹e_ªlo_Àn
,

2745 .
mö_ªc_size
 = (
bpf_c‹e_ªlo
),

2746 .
ext_öfo
 = &
btf_ext
->
c‹e_ªlo_öfo
,

2747 .
desc
 = "core_relo",

2750  
	`btf_ext_£tup_öfo
(
btf_ext
, &
∑øm
);

2751 
	}
}

2753 
	$btf_ext_∑r£_hdr
(
__u8
 *
d©a
, 
__u32
 
d©a_size
)

2755 c⁄° 
btf_ext_hódî
 *
hdr
 = (btf_ext_hódî *)
d©a
;

2757 i‡(
d©a_size
 < 
	`off£to„nd
(
btf_ext_hódî
, 
hdr_Àn
) ||

2758 
d©a_size
 < 
hdr
->
hdr_Àn
) {

2759 
	`¥_debug
("BTF.ext headerÇot found");

2760  -
EINVAL
;

2763 i‡(
hdr
->
magic
 =
	`bsw≠_16
(
BTF_MAGIC
)) {

2764 
	`¥_w¨n
("BTF.ext inÇon-nativeÉndianness isÇot supported\n");

2765  -
ENOTSUP
;

2766 } i‡(
hdr
->
magic
 !
BTF_MAGIC
) {

2767 
	`¥_debug
("InvÆid BTF.exàmagic:%x\n", 
hdr
->
magic
);

2768  -
EINVAL
;

2771 i‡(
hdr
->
vîsi⁄
 !
BTF_VERSION
) {

2772 
	`¥_debug
("Unsuµ‹ãd BTF.exàvîsi⁄:%u\n", 
hdr
->
vîsi⁄
);

2773  -
ENOTSUP
;

2776 i‡(
hdr
->
Êags
) {

2777 
	`¥_debug
("Unsuµ‹ãd BTF.exàÊags:%x\n", 
hdr
->
Êags
);

2778  -
ENOTSUP
;

2781 i‡(
d©a_size
 =
hdr
->
hdr_Àn
) {

2782 
	`¥_debug
("BTF.ext hasÇo data\n");

2783  -
EINVAL
;

2787 
	}
}

2789 
	$btf_ext__‰ì
(
btf_ext
 *btf_ext)

2791 i‡(
	`IS_ERR_OR_NULL
(
btf_ext
))

2793 
	`‰ì
(
btf_ext
->
func_öfo
.
£c_idxs
);

2794 
	`‰ì
(
btf_ext
->
löe_öfo
.
£c_idxs
);

2795 
	`‰ì
(
btf_ext
->
c‹e_ªlo_öfo
.
£c_idxs
);

2796 
	`‰ì
(
btf_ext
->
d©a
);

2797 
	`‰ì
(
btf_ext
);

2798 
	}
}

2800 
btf_ext
 *
	$btf_ext__√w
(c⁄° 
__u8
 *
d©a
, 
__u32
 
size
)

2802 
btf_ext
 *btf_ext;

2803 
îr
;

2805 
btf_ext
 = 
	`ˇŒoc
(1, (btf_ext));

2806 i‡(!
btf_ext
)

2807  
	`libbpf_îr_±r
(-
ENOMEM
);

2809 
btf_ext
->
d©a_size
 = 
size
;

2810 
btf_ext
->
d©a
 = 
	`mÆloc
(
size
);

2811 i‡(!
btf_ext
->
d©a
) {

2812 
îr
 = -
ENOMEM
;

2813 
d⁄e
;

2815 
	`mem˝y
(
btf_ext
->
d©a
, d©a, 
size
);

2817 
îr
 = 
	`btf_ext_∑r£_hdr
(
btf_ext
->
d©a
, 
size
);

2818 i‡(
îr
)

2819 
d⁄e
;

2821 i‡(
btf_ext
->
hdr
->
hdr_Àn
 < 
	`off£to„nd
(
btf_ext_hódî
, 
löe_öfo_Àn
)) {

2822 
îr
 = -
EINVAL
;

2823 
d⁄e
;

2826 
îr
 = 
	`btf_ext_£tup_func_öfo
(
btf_ext
);

2827 i‡(
îr
)

2828 
d⁄e
;

2830 
îr
 = 
	`btf_ext_£tup_löe_öfo
(
btf_ext
);

2831 i‡(
îr
)

2832 
d⁄e
;

2834 i‡(
btf_ext
->
hdr
->
hdr_Àn
 < 
	`off£to„nd
(
btf_ext_hódî
, 
c‹e_ªlo_Àn
))

2835 
d⁄e
;

2837 
îr
 = 
	`btf_ext_£tup_c‹e_ªlos
(
btf_ext
);

2838 i‡(
îr
)

2839 
d⁄e
;

2841 
d⁄e
:

2842 i‡(
îr
) {

2843 
	`btf_ext__‰ì
(
btf_ext
);

2844  
	`libbpf_îr_±r
(
îr
);

2847  
btf_ext
;

2848 
	}
}

2850 c⁄° *
	$btf_ext__gë_øw_d©a
(c⁄° 
btf_ext
 *btf_ext, 
__u32
 *
size
)

2852 *
size
 = 
btf_ext
->
d©a_size
;

2853  
btf_ext
->
d©a
;

2854 
	}
}

2856 
	$btf_ext_ªloc_öfo
(c⁄° 
btf
 *btf,

2857 c⁄° 
btf_ext_öfo
 *
ext_öfo
,

2858 c⁄° *
£c_«me
, 
__u32
 
ö¢s_˙t
,

2859 **
öfo
, 
__u32
 *
˙t
)

2861 
__u32
 
£c_hdæí
 = (
btf_ext_öfo_£c
);

2862 
__u32
 
i
, 
ªc‹d_size
, 
exi°ög_Àn
, 
ªc‹ds_Àn
;

2863 
btf_ext_öfo_£c
 *
söfo
;

2864 c⁄° *
öfo_£c_«me
;

2865 
__u64
 
ªmaö_Àn
;

2866 *
d©a
;

2868 
ªc‹d_size
 = 
ext_öfo
->
ªc_size
;

2869 
söfo
 = 
ext_öfo
->
öfo
;

2870 
ªmaö_Àn
 = 
ext_öfo
->
Àn
;

2871 
ªmaö_Àn
 > 0) {

2872 
ªc‹ds_Àn
 = 
söfo
->
num_öfo
 * 
ªc‹d_size
;

2873 
öfo_£c_«me
 = 
	`btf__«me_by_off£t
(
btf
, 
söfo
->
£c_«me_off
);

2874 i‡(
	`°rcmp
(
öfo_£c_«me
, 
£c_«me
)) {

2875 
ªmaö_Àn
 -
£c_hdæí
 + 
ªc‹ds_Àn
;

2876 
söfo
 = (*)söfÿ+ 
£c_hdæí
 + 
ªc‹ds_Àn
;

2880 
exi°ög_Àn
 = (*
˙t
Ë* 
ªc‹d_size
;

2881 
d©a
 = 
	`ªÆloc
(*
öfo
, 
exi°ög_Àn
 + 
ªc‹ds_Àn
);

2882 i‡(!
d©a
)

2883  
	`libbpf_îr
(-
ENOMEM
);

2885 
	`mem˝y
(
d©a
 + 
exi°ög_Àn
, 
söfo
->d©a, 
ªc‹ds_Àn
);

2889 
i
 = 0; i < 
söfo
->
num_öfo
; i++) {

2890 
__u32
 *
ö¢_off
;

2892 
ö¢_off
 = 
d©a
 + 
exi°ög_Àn
 + (
i
 * 
ªc‹d_size
);

2893 *
ö¢_off
 = *ö¢_of‡/ (
bpf_ö¢
Ë+ 
ö¢s_˙t
;

2895 *
öfo
 = 
d©a
;

2896 *
˙t
 +
söfo
->
num_öfo
;

2900  
	`libbpf_îr
(-
ENOENT
);

2901 
	}
}

2903 
	$btf_ext__ªloc_func_öfo
(c⁄° 
btf
 *btf,

2904 c⁄° 
btf_ext
 *btf_ext,

2905 c⁄° *
£c_«me
, 
__u32
 
ö¢s_˙t
,

2906 **
func_öfo
, 
__u32
 *
˙t
)

2908  
	`btf_ext_ªloc_öfo
(
btf
, &
btf_ext
->
func_öfo
, 
£c_«me
,

2909 
ö¢s_˙t
, 
func_öfo
, 
˙t
);

2910 
	}
}

2912 
	$btf_ext__ªloc_löe_öfo
(c⁄° 
btf
 *btf,

2913 c⁄° 
btf_ext
 *btf_ext,

2914 c⁄° *
£c_«me
, 
__u32
 
ö¢s_˙t
,

2915 **
löe_öfo
, 
__u32
 *
˙t
)

2917  
	`btf_ext_ªloc_öfo
(
btf
, &
btf_ext
->
löe_öfo
, 
£c_«me
,

2918 
ö¢s_˙t
, 
löe_öfo
, 
˙t
);

2919 
	}
}

2921 
__u32
 
	$btf_ext__func_öfo_ªc_size
(c⁄° 
btf_ext
 *btf_ext)

2923  
btf_ext
->
func_öfo
.
ªc_size
;

2924 
	}
}

2926 
__u32
 
	$btf_ext__löe_öfo_ªc_size
(c⁄° 
btf_ext
 *btf_ext)

2928  
btf_ext
->
löe_öfo
.
ªc_size
;

2929 
	}
}

2931 
	gbtf_dedup
;

2933 
btf_dedup
 *
btf_dedup_√w
(
btf
 *btf, c⁄° 
btf_dedup_›ts
 *
›ts
);

2934 
btf_dedup_‰ì
(
btf_dedup
 *
d
);

2935 
btf_dedup_¥ï
(
btf_dedup
 *
d
);

2936 
btf_dedup_°rögs
(
btf_dedup
 *
d
);

2937 
btf_dedup_¥im_ty≥s
(
btf_dedup
 *
d
);

2938 
btf_dedup_°ru˘_ty≥s
(
btf_dedup
 *
d
);

2939 
btf_dedup_ªf_ty≥s
(
btf_dedup
 *
d
);

2940 
btf_dedup_com∑˘_ty≥s
(
btf_dedup
 *
d
);

2941 
btf_dedup_ªm≠_ty≥s
(
btf_dedup
 *
d
);

3081 
	$DEFAULT_VERSION
(
btf__dedup_v0_6_0
, 
btf__dedup
, 
LIBBPF_0
.6.0)

3082 
	$btf__dedup_v0_6_0
(
btf
 *btf, c⁄° 
btf_dedup_›ts
 *
›ts
)

3084 
btf_dedup
 *
d
;

3085 
îr
;

3087 i‡(!
	`OPTS_VALID
(
›ts
, 
btf_dedup_›ts
))

3088  
	`libbpf_îr
(-
EINVAL
);

3090 
d
 = 
	`btf_dedup_√w
(
btf
, 
›ts
);

3091 i‡(
	`IS_ERR
(
d
)) {

3092 
	`¥_debug
("btf_dedup_√w faûed: %ld", 
	`PTR_ERR
(
d
));

3093  
	`libbpf_îr
(-
EINVAL
);

3096 i‡(
	`btf_ísuª_modifübÀ
(
btf
)) {

3097 
îr
 = -
ENOMEM
;

3098 
d⁄e
;

3101 
îr
 = 
	`btf_dedup_¥ï
(
d
);

3102 i‡(
îr
) {

3103 
	`¥_debug
("btf_dedup_¥ï faûed:%d\n", 
îr
);

3104 
d⁄e
;

3106 
îr
 = 
	`btf_dedup_°rögs
(
d
);

3107 i‡(
îr
 < 0) {

3108 
	`¥_debug
("btf_dedup_°rög†Áûed:%d\n", 
îr
);

3109 
d⁄e
;

3111 
îr
 = 
	`btf_dedup_¥im_ty≥s
(
d
);

3112 i‡(
îr
 < 0) {

3113 
	`¥_debug
("btf_dedup_¥im_ty≥†Áûed:%d\n", 
îr
);

3114 
d⁄e
;

3116 
îr
 = 
	`btf_dedup_°ru˘_ty≥s
(
d
);

3117 i‡(
îr
 < 0) {

3118 
	`¥_debug
("btf_dedup_°ru˘_ty≥†Áûed:%d\n", 
îr
);

3119 
d⁄e
;

3121 
îr
 = 
	`btf_dedup_ªf_ty≥s
(
d
);

3122 i‡(
îr
 < 0) {

3123 
	`¥_debug
("btf_dedup_ªf_ty≥†Áûed:%d\n", 
îr
);

3124 
d⁄e
;

3126 
îr
 = 
	`btf_dedup_com∑˘_ty≥s
(
d
);

3127 i‡(
îr
 < 0) {

3128 
	`¥_debug
("btf_dedup_com∑˘_ty≥†Áûed:%d\n", 
îr
);

3129 
d⁄e
;

3131 
îr
 = 
	`btf_dedup_ªm≠_ty≥s
(
d
);

3132 i‡(
îr
 < 0) {

3133 
	`¥_debug
("btf_dedup_ªm≠_ty≥†Áûed:%d\n", 
îr
);

3134 
d⁄e
;

3137 
d⁄e
:

3138 
	`btf_dedup_‰ì
(
d
);

3139  
	`libbpf_îr
(
îr
);

3140 
	}
}

3142 
	$COMPAT_VERSION
(
btf__dedup_dïªˇãd
, 
btf__dedup
, 
LIBBPF_0
.0.2)

3143 
	$btf__dedup_dïªˇãd
(
btf
 *btf, 
btf_ext
 *btf_ext, c⁄° *
unu£d_›ts
)

3145 
	`LIBBPF_OPTS
(
btf_dedup_›ts
, 
›ts
, .
btf_ext
 = btf_ext);

3147 i‡(
unu£d_›ts
) {

3148 
	`¥_w¨n
("please useÇew version of btf__dedup()Åhat supports options\n");

3149  
	`libbpf_îr
(-
ENOTSUP
);

3152  
	`btf__dedup
(
btf
, &
›ts
);

3153 
	}
}

3155 
	#BTF_UNPROCESSED_ID
 ((
__u32
)-1)

	)

3156 
	#BTF_IN_PROGRESS_ID
 ((
__u32
)-2)

	)

3158 
	sbtf_dedup
 {

3160 
btf
 *
	mbtf
;

3165 
btf_ext
 *
	mbtf_ext
;

3173 
hashm≠
 *
	mdedup_èbÀ
;

3175 
__u32
 *
	mm≠
;

3177 
__u32
 *
	mhypŸ_m≠
;

3178 
__u32
 *
	mhypŸ_li°
;

3179 
size_t
 
	mhypŸ_˙t
;

3180 
size_t
 
	mhypŸ_ˇp
;

3187 
boﬁ
 
	mhypŸ_adju°_ˇn⁄
;

3189 
btf_dedup_›ts
 
	m›ts
;

3191 
°r£t
 *
	m°rs_£t
;

3194 
	$hash_comböe
(
h
, 
vÆue
)

3196  
h
 * 31 + 
vÆue
;

3197 
	}
}

3199 
	#f‹_óch_dedup_ˇnd
(
d
, 
node
, 
hash
) \

3200 
	`hashm≠__f‹_óch_key_íåy
(
d
->
dedup_èbÀ
, 
node
, (*)
hash
)

	)

3202 
	$btf_dedup_èbÀ_add
(
btf_dedup
 *
d
, 
hash
, 
__u32
 
ty≥_id
)

3204  
	`hashm≠__≠≥nd
(
d
->
dedup_èbÀ
,

3205 (*)
hash
, (*)()
ty≥_id
);

3206 
	}
}

3208 
	$btf_dedup_hypŸ_m≠_add
(
btf_dedup
 *
d
,

3209 
__u32
 
‰om_id
, __u32 
to_id
)

3211 i‡(
d
->
hypŸ_˙t
 =d->
hypŸ_ˇp
) {

3212 
__u32
 *
√w_li°
;

3214 
d
->
hypŸ_ˇp
 +
	`max
((
size_t
)16, d->hypot_cap / 2);

3215 
√w_li°
 = 
	`libbpf_ªÆloˇºay
(
d
->
hypŸ_li°
, d->
hypŸ_ˇp
, (
__u32
));

3216 i‡(!
√w_li°
)

3217  -
ENOMEM
;

3218 
d
->
hypŸ_li°
 = 
√w_li°
;

3220 
d
->
hypŸ_li°
[d->
hypŸ_˙t
++] = 
‰om_id
;

3221 
d
->
hypŸ_m≠
[
‰om_id
] = 
to_id
;

3223 
	}
}

3225 
	$btf_dedup_˛ór_hypŸ_m≠
(
btf_dedup
 *
d
)

3227 
i
;

3229 
i
 = 0; i < 
d
->
hypŸ_˙t
; i++)

3230 
d
->
hypŸ_m≠
[d->
hypŸ_li°
[
i
]] = 
BTF_UNPROCESSED_ID
;

3231 
d
->
hypŸ_˙t
 = 0;

3232 
d
->
hypŸ_adju°_ˇn⁄
 = 
Ál£
;

3233 
	}
}

3235 
	$btf_dedup_‰ì
(
btf_dedup
 *
d
)

3237 
	`hashm≠__‰ì
(
d
->
dedup_èbÀ
);

3238 
d
->
dedup_èbÀ
 = 
NULL
;

3240 
	`‰ì
(
d
->
m≠
);

3241 
d
->
m≠
 = 
NULL
;

3243 
	`‰ì
(
d
->
hypŸ_m≠
);

3244 
d
->
hypŸ_m≠
 = 
NULL
;

3246 
	`‰ì
(
d
->
hypŸ_li°
);

3247 
d
->
hypŸ_li°
 = 
NULL
;

3249 
	`‰ì
(
d
);

3250 
	}
}

3252 
size_t
 
	$btf_dedup_idítôy_hash_‚
(c⁄° *
key
, *
˘x
)

3254  (
size_t
)
key
;

3255 
	}
}

3257 
size_t
 
	$btf_dedup_cﬁlisi⁄_hash_‚
(c⁄° *
key
, *
˘x
)

3260 
	}
}

3262 
boﬁ
 
	$btf_dedup_equÆ_‚
(c⁄° *
k1
, c⁄° *
k2
, *
˘x
)

3264  
k1
 =
k2
;

3265 
	}
}

3267 
btf_dedup
 *
	$btf_dedup_√w
(
btf
 *btf, c⁄° 
btf_dedup_›ts
 *
›ts
)

3269 
btf_dedup
 *
d
 = 
	`ˇŒoc
(1, (btf_dedup));

3270 
hashm≠_hash_‚
 
hash_‚
 = 
btf_dedup_idítôy_hash_‚
;

3271 
i
, 
îr
 = 0, 
ty≥_˙t
;

3273 i‡(!
d
)

3274  
	`ERR_PTR
(-
ENOMEM
);

3276 i‡(
	`OPTS_GET
(
›ts
, 
f‹˚_cﬁlisi⁄s
, 
Ál£
))

3277 
hash_‚
 = 
btf_dedup_cﬁlisi⁄_hash_‚
;

3279 
d
->
btf
 = btf;

3280 
d
->
btf_ext
 = 
	`OPTS_GET
(
›ts
, btf_ext, 
NULL
);

3282 
d
->
dedup_èbÀ
 = 
	`hashm≠__√w
(
hash_‚
, 
btf_dedup_equÆ_‚
, 
NULL
);

3283 i‡(
	`IS_ERR
(
d
->
dedup_èbÀ
)) {

3284 
îr
 = 
	`PTR_ERR
(
d
->
dedup_èbÀ
);

3285 
d
->
dedup_èbÀ
 = 
NULL
;

3286 
d⁄e
;

3289 
ty≥_˙t
 = 
	`btf__ty≥_˙t
(
btf
);

3290 
d
->
m≠
 = 
	`mÆloc
((
__u32
Ë* 
ty≥_˙t
);

3291 i‡(!
d
->
m≠
) {

3292 
îr
 = -
ENOMEM
;

3293 
d⁄e
;

3296 
d
->
m≠
[0] = 0;

3297 
i
 = 1; i < 
ty≥_˙t
; i++) {

3298 
btf_ty≥
 *
t
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
i
);

3301 i‡(
	`btf_is_v¨
(
t
Ë|| 
	`btf_is_d©a£c
(t))

3302 
d
->
m≠
[
i
] = i;

3304 
d
->
m≠
[
i
] = 
BTF_UNPROCESSED_ID
;

3307 
d
->
hypŸ_m≠
 = 
	`mÆloc
((
__u32
Ë* 
ty≥_˙t
);

3308 i‡(!
d
->
hypŸ_m≠
) {

3309 
îr
 = -
ENOMEM
;

3310 
d⁄e
;

3312 
i
 = 0; i < 
ty≥_˙t
; i++)

3313 
d
->
hypŸ_m≠
[
i
] = 
BTF_UNPROCESSED_ID
;

3315 
d⁄e
:

3316 i‡(
îr
) {

3317 
	`btf_dedup_‰ì
(
d
);

3318  
	`ERR_PTR
(
îr
);

3321  
d
;

3322 
	}
}

3328 
	$btf_f‹_óch_°r_off
(
btf_dedup
 *
d
, 
°r_off_visô_‚
 
‚
, *
˘x
)

3330 
i
, 
r
;

3332 
i
 = 0; i < 
d
->
btf
->
ƒ_ty≥s
; i++) {

3333 
btf_ty≥
 *
t
 = 
	`btf_ty≥_by_id
(
d
->
btf
, d->btf->
°¨t_id
 + 
i
);

3335 
r
 = 
	`btf_ty≥_visô_°r_offs
(
t
, 
‚
, 
˘x
);

3336 i‡(
r
)

3337  
r
;

3340 i‡(!
d
->
btf_ext
)

3343 
r
 = 
	`btf_ext_visô_°r_offs
(
d
->
btf_ext
, 
‚
, 
˘x
);

3344 i‡(
r
)

3345  
r
;

3348 
	}
}

3350 
	$°rs_dedup_ªm≠_°r_off
(
__u32
 *
°r_off_±r
, *
˘x
)

3352 
btf_dedup
 *
d
 = 
˘x
;

3353 
__u32
 
°r_off
 = *
°r_off_±r
;

3354 c⁄° *
s
;

3355 
off
, 
îr
;

3358 i‡(
°r_off
 =0 || så_of‡< 
d
->
btf
->
°¨t_°r_off
)

3361 
s
 = 
	`btf__°r_by_off£t
(
d
->
btf
, 
°r_off
);

3362 i‡(
d
->
btf
->
ba£_btf
) {

3363 
îr
 = 
	`btf__föd_°r
(
d
->
btf
->
ba£_btf
, 
s
);

3364 i‡(
îr
 >= 0) {

3365 *
°r_off_±r
 = 
îr
;

3368 i‡(
îr
 !-
ENOENT
)

3369  
îr
;

3372 
off
 = 
	`°r£t__add_°r
(
d
->
°rs_£t
, 
s
);

3373 i‡(
off
 < 0)

3374  
off
;

3376 *
°r_off_±r
 = 
d
->
btf
->
°¨t_°r_off
 + 
off
;

3378 
	}
}

3391 
	$btf_dedup_°rögs
(
btf_dedup
 *
d
)

3393 
îr
;

3395 i‡(
d
->
btf
->
°rs_dedu≥d
)

3398 
d
->
°rs_£t
 = 
	`°r£t__√w
(
BTF_MAX_STR_OFFSET
, 
NULL
, 0);

3399 i‡(
	`IS_ERR
(
d
->
°rs_£t
)) {

3400 
îr
 = 
	`PTR_ERR
(
d
->
°rs_£t
);

3401 
îr_out
;

3404 i‡(!
d
->
btf
->
ba£_btf
) {

3408 
îr
 = 
	`°r£t__add_°r
(
d
->
°rs_£t
, "");

3409 i‡(
îr
 < 0)

3410 
îr_out
;

3414 
îr
 = 
	`btf_f‹_óch_°r_off
(
d
, 
°rs_dedup_ªm≠_°r_off
, d);

3415 i‡(
îr
)

3416 
îr_out
;

3419 
	`°r£t__‰ì
(
d
->
btf
->
°rs_£t
);

3420 
d
->
btf
->
hdr
->
°r_Àn
 = 
	`°r£t__d©a_size
(d->
°rs_£t
);

3421 
d
->
btf
->
°rs_£t
 = d->strs_set;

3422 
d
->
°rs_£t
 = 
NULL
;

3423 
d
->
btf
->
°rs_dedu≥d
 = 
åue
;

3426 
îr_out
:

3427 
	`°r£t__‰ì
(
d
->
°rs_£t
);

3428 
d
->
°rs_£t
 = 
NULL
;

3430  
îr
;

3431 
	}
}

3433 
	$btf_hash_comm⁄
(
btf_ty≥
 *
t
)

3435 
h
;

3437 
h
 = 
	`hash_comböe
(0, 
t
->
«me_off
);

3438 
h
 = 
	`hash_comböe
(h, 
t
->
öfo
);

3439 
h
 = 
	`hash_comböe
(h, 
t
->
size
);

3440  
h
;

3441 
	}
}

3443 
boﬁ
 
	$btf_equÆ_comm⁄
(
btf_ty≥
 *
t1
, btf_ty≥ *
t2
)

3445  
t1
->
«me_off
 =
t2
->name_off &&

3446 
t1
->
öfo
 =
t2
->info &&

3447 
t1
->
size
 =
t2
->size;

3448 
	}
}

3451 
	$btf_hash_öt_de˛_èg
(
btf_ty≥
 *
t
)

3453 
__u32
 
öfo
 = *(__u32 *)(
t
 + 1);

3454 
h
;

3456 
h
 = 
	`btf_hash_comm⁄
(
t
);

3457 
h
 = 
	`hash_comböe
(h, 
öfo
);

3458  
h
;

3459 
	}
}

3462 
boﬁ
 
	$btf_equÆ_öt_èg
(
btf_ty≥
 *
t1
, btf_ty≥ *
t2
)

3464 
__u32
 
öfo1
, 
öfo2
;

3466 i‡(!
	`btf_equÆ_comm⁄
(
t1
, 
t2
))

3467  
Ál£
;

3468 
öfo1
 = *(
__u32
 *)(
t1
 + 1);

3469 
öfo2
 = *(
__u32
 *)(
t2
 + 1);

3470  
öfo1
 =
öfo2
;

3471 
	}
}

3474 
	$btf_hash_íum
(
btf_ty≥
 *
t
)

3476 
h
;

3479 
h
 = 
	`hash_comböe
(0, 
t
->
«me_off
);

3480 
h
 = 
	`hash_comböe
(h, 
t
->
öfo
 & ~0xffff);

3481 
h
 = 
	`hash_comböe
(h, 
t
->
size
);

3482  
h
;

3483 
	}
}

3486 
boﬁ
 
	$btf_equÆ_íum
(
btf_ty≥
 *
t1
, btf_ty≥ *
t2
)

3488 c⁄° 
btf_íum
 *
m1
, *
m2
;

3489 
__u16
 
vÀn
;

3490 
i
;

3492 i‡(!
	`btf_equÆ_comm⁄
(
t1
, 
t2
))

3493  
Ál£
;

3495 
vÀn
 = 
	`btf_vÀn
(
t1
);

3496 
m1
 = 
	`btf_íum
(
t1
);

3497 
m2
 = 
	`btf_íum
(
t2
);

3498 
i
 = 0; i < 
vÀn
; i++) {

3499 i‡(
m1
->
«me_off
 !
m2
->«me_of‡|| m1->
vÆ
 != m2->val)

3500  
Ál£
;

3501 
m1
++;

3502 
m2
++;

3504  
åue
;

3505 
	}
}

3507 
ölöe
 
boﬁ
 
	$btf_is_íum_fwd
(
btf_ty≥
 *
t
)

3509  
	`btf_is_íum
(
t
Ë&& 
	`btf_vÀn
(t) == 0;

3510 
	}
}

3512 
boﬁ
 
	$btf_com∑t_íum
(
btf_ty≥
 *
t1
, btf_ty≥ *
t2
)

3514 i‡(!
	`btf_is_íum_fwd
(
t1
Ë&& !btf_is_íum_fwd(
t2
))

3515  
	`btf_equÆ_íum
(
t1
, 
t2
);

3517  
t1
->
«me_off
 =
t2
->name_off &&

3518 (
t1
->
öfo
 & ~0xffffË=(
t2
->info & ~0xffff) &&

3519 
t1
->
size
 =
t2
->size;

3520 
	}
}

3527 
	$btf_hash_°ru˘
(
btf_ty≥
 *
t
)

3529 c⁄° 
btf_membî
 *
membî
 = 
	`btf_membîs
(
t
);

3530 
__u32
 
vÀn
 = 
	`btf_vÀn
(
t
);

3531 
h
 = 
	`btf_hash_comm⁄
(
t
);

3532 
i
;

3534 
i
 = 0; i < 
vÀn
; i++) {

3535 
h
 = 
	`hash_comböe
(h, 
membî
->
«me_off
);

3536 
h
 = 
	`hash_comböe
(h, 
membî
->
off£t
);

3538 
membî
++;

3540  
h
;

3541 
	}
}

3548 
boﬁ
 
	$btf_shÆlow_equÆ_°ru˘
(
btf_ty≥
 *
t1
, btf_ty≥ *
t2
)

3550 c⁄° 
btf_membî
 *
m1
, *
m2
;

3551 
__u16
 
vÀn
;

3552 
i
;

3554 i‡(!
	`btf_equÆ_comm⁄
(
t1
, 
t2
))

3555  
Ál£
;

3557 
vÀn
 = 
	`btf_vÀn
(
t1
);

3558 
m1
 = 
	`btf_membîs
(
t1
);

3559 
m2
 = 
	`btf_membîs
(
t2
);

3560 
i
 = 0; i < 
vÀn
; i++) {

3561 i‡(
m1
->
«me_off
 !
m2
->«me_of‡|| m1->
off£t
 != m2->offset)

3562  
Ál£
;

3563 
m1
++;

3564 
m2
++;

3566  
åue
;

3567 
	}
}

3574 
	$btf_hash_¨øy
(
btf_ty≥
 *
t
)

3576 c⁄° 
btf_¨øy
 *
öfo
 = 
	`btf_¨øy
(
t
);

3577 
h
 = 
	`btf_hash_comm⁄
(
t
);

3579 
h
 = 
	`hash_comböe
(h, 
öfo
->
ty≥
);

3580 
h
 = 
	`hash_comböe
(h, 
öfo
->
ödex_ty≥
);

3581 
h
 = 
	`hash_comböe
(h, 
öfo
->
√Àms
);

3582  
h
;

3583 
	}
}

3592 
boﬁ
 
	$btf_equÆ_¨øy
(
btf_ty≥
 *
t1
, btf_ty≥ *
t2
)

3594 c⁄° 
btf_¨øy
 *
öfo1
, *
öfo2
;

3596 i‡(!
	`btf_equÆ_comm⁄
(
t1
, 
t2
))

3597  
Ál£
;

3599 
öfo1
 = 
	`btf_¨øy
(
t1
);

3600 
öfo2
 = 
	`btf_¨øy
(
t2
);

3601  
öfo1
->
ty≥
 =
öfo2
->type &&

3602 
öfo1
->
ödex_ty≥
 =
öfo2
->index_type &&

3603 
öfo1
->
√Àms
 =
öfo2
->nelems;

3604 
	}
}

3611 
boﬁ
 
	$btf_com∑t_¨øy
(
btf_ty≥
 *
t1
, btf_ty≥ *
t2
)

3613 i‡(!
	`btf_equÆ_comm⁄
(
t1
, 
t2
))

3614  
Ál£
;

3616  
	`btf_¨øy
(
t1
)->
√Àms
 =btf_¨øy(
t2
)->nelems;

3617 
	}
}

3624 
	$btf_hash_‚¥Ÿo
(
btf_ty≥
 *
t
)

3626 c⁄° 
btf_∑øm
 *
membî
 = 
	`btf_∑øms
(
t
);

3627 
__u16
 
vÀn
 = 
	`btf_vÀn
(
t
);

3628 
h
 = 
	`btf_hash_comm⁄
(
t
);

3629 
i
;

3631 
i
 = 0; i < 
vÀn
; i++) {

3632 
h
 = 
	`hash_comböe
(h, 
membî
->
«me_off
);

3633 
h
 = 
	`hash_comböe
(h, 
membî
->
ty≥
);

3634 
membî
++;

3636  
h
;

3637 
	}
}

3646 
boﬁ
 
	$btf_equÆ_‚¥Ÿo
(
btf_ty≥
 *
t1
, btf_ty≥ *
t2
)

3648 c⁄° 
btf_∑øm
 *
m1
, *
m2
;

3649 
__u16
 
vÀn
;

3650 
i
;

3652 i‡(!
	`btf_equÆ_comm⁄
(
t1
, 
t2
))

3653  
Ál£
;

3655 
vÀn
 = 
	`btf_vÀn
(
t1
);

3656 
m1
 = 
	`btf_∑øms
(
t1
);

3657 
m2
 = 
	`btf_∑øms
(
t2
);

3658 
i
 = 0; i < 
vÀn
; i++) {

3659 i‡(
m1
->
«me_off
 !
m2
->«me_of‡|| m1->
ty≥
 != m2->type)

3660  
Ál£
;

3661 
m1
++;

3662 
m2
++;

3664  
åue
;

3665 
	}
}

3672 
boﬁ
 
	$btf_com∑t_‚¥Ÿo
(
btf_ty≥
 *
t1
, btf_ty≥ *
t2
)

3674 c⁄° 
btf_∑øm
 *
m1
, *
m2
;

3675 
__u16
 
vÀn
;

3676 
i
;

3679 i‡(
t1
->
«me_off
 !
t2
->«me_of‡||Å1->
öfo
 !=Å2->info)

3680  
Ál£
;

3682 
vÀn
 = 
	`btf_vÀn
(
t1
);

3683 
m1
 = 
	`btf_∑øms
(
t1
);

3684 
m2
 = 
	`btf_∑øms
(
t2
);

3685 
i
 = 0; i < 
vÀn
; i++) {

3686 i‡(
m1
->
«me_off
 !
m2
->name_off)

3687  
Ál£
;

3688 
m1
++;

3689 
m2
++;

3691  
åue
;

3692 
	}
}

3698 
	$btf_dedup_¥ï
(
btf_dedup
 *
d
)

3700 
btf_ty≥
 *
t
;

3701 
ty≥_id
;

3702 
h
;

3704 i‡(!
d
->
btf
->
ba£_btf
)

3707 
ty≥_id
 = 1;Åy≥_id < 
d
->
btf
->
°¨t_id
;Åype_id++) {

3708 
t
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ty≥_id
);

3711 
d
->
m≠
[
ty≥_id
] =Åype_id;

3713 
	`btf_köd
(
t
)) {

3714 
BTF_KIND_VAR
:

3715 
BTF_KIND_DATASEC
:

3718 
BTF_KIND_CONST
:

3719 
BTF_KIND_VOLATILE
:

3720 
BTF_KIND_RESTRICT
:

3721 
BTF_KIND_PTR
:

3722 
BTF_KIND_FWD
:

3723 
BTF_KIND_TYPEDEF
:

3724 
BTF_KIND_FUNC
:

3725 
BTF_KIND_FLOAT
:

3726 
BTF_KIND_TYPE_TAG
:

3727 
h
 = 
	`btf_hash_comm⁄
(
t
);

3729 
BTF_KIND_INT
:

3730 
BTF_KIND_DECL_TAG
:

3731 
h
 = 
	`btf_hash_öt_de˛_èg
(
t
);

3733 
BTF_KIND_ENUM
:

3734 
h
 = 
	`btf_hash_íum
(
t
);

3736 
BTF_KIND_STRUCT
:

3737 
BTF_KIND_UNION
:

3738 
h
 = 
	`btf_hash_°ru˘
(
t
);

3740 
BTF_KIND_ARRAY
:

3741 
h
 = 
	`btf_hash_¨øy
(
t
);

3743 
BTF_KIND_FUNC_PROTO
:

3744 
h
 = 
	`btf_hash_‚¥Ÿo
(
t
);

3747 
	`¥_debug
("unknow¿köd %d f‹Åy≥ [%d]\n", 
	`btf_köd
(
t
), 
ty≥_id
);

3748  -
EINVAL
;

3750 i‡(
	`btf_dedup_èbÀ_add
(
d
, 
h
, 
ty≥_id
))

3751  -
ENOMEM
;

3755 
	}
}

3763 
	$btf_dedup_¥im_ty≥
(
btf_dedup
 *
d
, 
__u32
 
ty≥_id
)

3765 
btf_ty≥
 *
t
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ty≥_id
);

3766 
hashm≠_íåy
 *
hash_íåy
;

3767 
btf_ty≥
 *
ˇnd
;

3769 
__u32
 
√w_id
 = 
ty≥_id
;

3770 
__u32
 
ˇnd_id
;

3771 
h
;

3773 
	`btf_köd
(
t
)) {

3774 
BTF_KIND_CONST
:

3775 
BTF_KIND_VOLATILE
:

3776 
BTF_KIND_RESTRICT
:

3777 
BTF_KIND_PTR
:

3778 
BTF_KIND_TYPEDEF
:

3779 
BTF_KIND_ARRAY
:

3780 
BTF_KIND_STRUCT
:

3781 
BTF_KIND_UNION
:

3782 
BTF_KIND_FUNC
:

3783 
BTF_KIND_FUNC_PROTO
:

3784 
BTF_KIND_VAR
:

3785 
BTF_KIND_DATASEC
:

3786 
BTF_KIND_DECL_TAG
:

3787 
BTF_KIND_TYPE_TAG
:

3790 
BTF_KIND_INT
:

3791 
h
 = 
	`btf_hash_öt_de˛_èg
(
t
);

3792 
	`f‹_óch_dedup_ˇnd
(
d
, 
hash_íåy
, 
h
) {

3793 
ˇnd_id
 = (
__u32
)()
hash_íåy
->
vÆue
;

3794 
ˇnd
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ˇnd_id
);

3795 i‡(
	`btf_equÆ_öt_èg
(
t
, 
ˇnd
)) {

3796 
√w_id
 = 
ˇnd_id
;

3802 
BTF_KIND_ENUM
:

3803 
h
 = 
	`btf_hash_íum
(
t
);

3804 
	`f‹_óch_dedup_ˇnd
(
d
, 
hash_íåy
, 
h
) {

3805 
ˇnd_id
 = (
__u32
)()
hash_íåy
->
vÆue
;

3806 
ˇnd
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ˇnd_id
);

3807 i‡(
	`btf_equÆ_íum
(
t
, 
ˇnd
)) {

3808 
√w_id
 = 
ˇnd_id
;

3811 i‡(
	`btf_com∑t_íum
(
t
, 
ˇnd
)) {

3812 i‡(
	`btf_is_íum_fwd
(
t
)) {

3814 
√w_id
 = 
ˇnd_id
;

3818 
d
->
m≠
[
ˇnd_id
] = 
ty≥_id
;

3823 
BTF_KIND_FWD
:

3824 
BTF_KIND_FLOAT
:

3825 
h
 = 
	`btf_hash_comm⁄
(
t
);

3826 
	`f‹_óch_dedup_ˇnd
(
d
, 
hash_íåy
, 
h
) {

3827 
ˇnd_id
 = (
__u32
)()
hash_íåy
->
vÆue
;

3828 
ˇnd
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ˇnd_id
);

3829 i‡(
	`btf_equÆ_comm⁄
(
t
, 
ˇnd
)) {

3830 
√w_id
 = 
ˇnd_id
;

3837  -
EINVAL
;

3840 
d
->
m≠
[
ty≥_id
] = 
√w_id
;

3841 i‡(
ty≥_id
 =
√w_id
 && 
	`btf_dedup_èbÀ_add
(
d
, 
h
,Åype_id))

3842  -
ENOMEM
;

3845 
	}
}

3847 
	$btf_dedup_¥im_ty≥s
(
btf_dedup
 *
d
)

3849 
i
, 
îr
;

3851 
i
 = 0; i < 
d
->
btf
->
ƒ_ty≥s
; i++) {

3852 
îr
 = 
	`btf_dedup_¥im_ty≥
(
d
, d->
btf
->
°¨t_id
 + 
i
);

3853 i‡(
îr
)

3854  
îr
;

3857 
	}
}

3862 
ölöe
 
boﬁ
 
	$is_ty≥_m≠≥d
(
btf_dedup
 *
d
, 
uöt32_t
 
ty≥_id
)

3864  
d
->
m≠
[
ty≥_id
] <
BTF_MAX_NR_TYPES
;

3865 
	}
}

3872 
ölöe
 
__u32
 
	$ªsﬁve_ty≥_id
(
btf_dedup
 *
d
, 
__u32
 
ty≥_id
)

3874 
	`is_ty≥_m≠≥d
(
d
, 
ty≥_id
Ë&& d->
m≠
[type_id] !=Åype_id)

3875 
ty≥_id
 = 
d
->
m≠
[type_id];

3876  
ty≥_id
;

3877 
	}
}

3883 
uöt32_t
 
	$ªsﬁve_fwd_id
(
btf_dedup
 *
d
, 
uöt32_t
 
ty≥_id
)

3885 
__u32
 
‹ig_ty≥_id
 = 
ty≥_id
;

3887 i‡(!
	`btf_is_fwd
(
	`btf__ty≥_by_id
(
d
->
btf
, 
ty≥_id
)))

3888  
ty≥_id
;

3890 
	`is_ty≥_m≠≥d
(
d
, 
ty≥_id
Ë&& d->
m≠
[type_id] !=Åype_id)

3891 
ty≥_id
 = 
d
->
m≠
[type_id];

3893 i‡(!
	`btf_is_fwd
(
	`btf__ty≥_by_id
(
d
->
btf
, 
ty≥_id
)))

3894  
ty≥_id
;

3896  
‹ig_ty≥_id
;

3897 
	}
}

3900 
ölöe
 
__u16
 
	$btf_fwd_köd
(
btf_ty≥
 *
t
)

3902  
	`btf_kÊag
(
t
Ë? 
BTF_KIND_UNION
 : 
BTF_KIND_STRUCT
;

3903 
	}
}

3906 
	$btf_dedup_idítiˇl_¨øys
(
btf_dedup
 *
d
, 
__u32
 
id1
, __u32 
id2
)

3908 
btf_ty≥
 *
t1
, *
t2
;

3910 
t1
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
id1
);

3911 
t2
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
id2
);

3912 i‡(!
	`btf_is_¨øy
(
t1
Ë|| !btf_is_¨øy(
t2
))

3915  
	`btf_equÆ_¨øy
(
t1
, 
t2
);

3916 
	}
}

3919 
boﬁ
 
	$btf_dedup_idítiˇl_°ru˘s
(
btf_dedup
 *
d
, 
__u32
 
id1
, __u32 
id2
)

3921 c⁄° 
btf_membî
 *
m1
, *
m2
;

3922 
btf_ty≥
 *
t1
, *
t2
;

3923 
n
, 
i
;

3925 
t1
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
id1
);

3926 
t2
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
id2
);

3928 i‡(!
	`btf_is_composôe
(
t1
Ë|| 
	`btf_köd
—1Ë!btf_köd(
t2
))

3929  
Ál£
;

3931 i‡(!
	`btf_shÆlow_equÆ_°ru˘
(
t1
, 
t2
))

3932  
Ál£
;

3934 
m1
 = 
	`btf_membîs
(
t1
);

3935 
m2
 = 
	`btf_membîs
(
t2
);

3936 
i
 = 0, 
n
 = 
	`btf_vÀn
(
t1
); i <Ç; i++, 
m1
++, 
m2
++) {

3937 i‡(
m1
->
ty≥
 !
m2
->type)

3938  
Ál£
;

3940  
åue
;

3941 
	}
}

4036 
	$btf_dedup_is_equiv
(
btf_dedup
 *
d
, 
__u32
 
ˇnd_id
,

4037 
__u32
 
ˇn⁄_id
)

4039 
btf_ty≥
 *
ˇnd_ty≥
;

4040 
btf_ty≥
 *
ˇn⁄_ty≥
;

4041 
__u32
 
hypŸ_ty≥_id
;

4042 
__u16
 
ˇnd_köd
;

4043 
__u16
 
ˇn⁄_köd
;

4044 
i
, 
eq
;

4047 i‡(
	`ªsﬁve_ty≥_id
(
d
, 
ˇnd_id
Ë=ªsﬁve_ty≥_id(d, 
ˇn⁄_id
))

4050 
ˇn⁄_id
 = 
	`ªsﬁve_fwd_id
(
d
, canon_id);

4052 
hypŸ_ty≥_id
 = 
d
->
hypŸ_m≠
[
ˇn⁄_id
];

4053 i‡(
hypŸ_ty≥_id
 <
BTF_MAX_NR_TYPES
) {

4054 i‡(
hypŸ_ty≥_id
 =
ˇnd_id
)

4064 i‡(
	`btf_dedup_idítiˇl_¨øys
(
d
, 
hypŸ_ty≥_id
, 
ˇnd_id
))

4073 i‡(
	`btf_dedup_idítiˇl_°ru˘s
(
d
, 
hypŸ_ty≥_id
, 
ˇnd_id
))

4078 i‡(
	`btf_dedup_hypŸ_m≠_add
(
d
, 
ˇn⁄_id
, 
ˇnd_id
))

4079  -
ENOMEM
;

4081 
ˇnd_ty≥
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ˇnd_id
);

4082 
ˇn⁄_ty≥
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ˇn⁄_id
);

4083 
ˇnd_köd
 = 
	`btf_köd
(
ˇnd_ty≥
);

4084 
ˇn⁄_köd
 = 
	`btf_köd
(
ˇn⁄_ty≥
);

4086 i‡(
ˇnd_ty≥
->
«me_off
 !
ˇn⁄_ty≥
->name_off)

4090 i‡((
ˇnd_köd
 =
BTF_KIND_FWD
 || 
ˇn⁄_köd
 == BTF_KIND_FWD)

4091 && 
ˇnd_köd
 !
ˇn⁄_köd
) {

4092 
__u16
 
ªÆ_köd
;

4093 
__u16
 
fwd_köd
;

4095 i‡(
ˇnd_köd
 =
BTF_KIND_FWD
) {

4096 
ªÆ_köd
 = 
ˇn⁄_köd
;

4097 
fwd_köd
 = 
	`btf_fwd_köd
(
ˇnd_ty≥
);

4099 
ªÆ_köd
 = 
ˇnd_köd
;

4100 
fwd_köd
 = 
	`btf_fwd_köd
(
ˇn⁄_ty≥
);

4102 i‡(
fwd_köd
 =
ªÆ_köd
 && 
ˇn⁄_id
 < 
d
->
btf
->
°¨t_id
)

4103 
d
->
hypŸ_adju°_ˇn⁄
 = 
åue
;

4105  
fwd_köd
 =
ªÆ_köd
;

4108 i‡(
ˇnd_köd
 !
ˇn⁄_köd
)

4111 
ˇnd_köd
) {

4112 
BTF_KIND_INT
:

4113  
	`btf_equÆ_öt_èg
(
ˇnd_ty≥
, 
ˇn⁄_ty≥
);

4115 
BTF_KIND_ENUM
:

4116  
	`btf_com∑t_íum
(
ˇnd_ty≥
, 
ˇn⁄_ty≥
);

4118 
BTF_KIND_FWD
:

4119 
BTF_KIND_FLOAT
:

4120  
	`btf_equÆ_comm⁄
(
ˇnd_ty≥
, 
ˇn⁄_ty≥
);

4122 
BTF_KIND_CONST
:

4123 
BTF_KIND_VOLATILE
:

4124 
BTF_KIND_RESTRICT
:

4125 
BTF_KIND_PTR
:

4126 
BTF_KIND_TYPEDEF
:

4127 
BTF_KIND_FUNC
:

4128 
BTF_KIND_TYPE_TAG
:

4129 i‡(
ˇnd_ty≥
->
öfo
 !
ˇn⁄_ty≥
->info)

4131  
	`btf_dedup_is_equiv
(
d
, 
ˇnd_ty≥
->
ty≥
, 
ˇn⁄_ty≥
->type);

4133 
BTF_KIND_ARRAY
: {

4134 c⁄° 
btf_¨øy
 *
ˇnd_¨r
, *
ˇn⁄_¨r
;

4136 i‡(!
	`btf_com∑t_¨øy
(
ˇnd_ty≥
, 
ˇn⁄_ty≥
))

4138 
ˇnd_¨r
 = 
	`btf_¨øy
(
ˇnd_ty≥
);

4139 
ˇn⁄_¨r
 = 
	`btf_¨øy
(
ˇn⁄_ty≥
);

4140 
eq
 = 
	`btf_dedup_is_equiv
(
d
, 
ˇnd_¨r
->
ödex_ty≥
, 
ˇn⁄_¨r
->index_type);

4141 i‡(
eq
 <= 0)

4142  
eq
;

4143  
	`btf_dedup_is_equiv
(
d
, 
ˇnd_¨r
->
ty≥
, 
ˇn⁄_¨r
->type);

4146 
BTF_KIND_STRUCT
:

4147 
BTF_KIND_UNION
: {

4148 c⁄° 
btf_membî
 *
ˇnd_m
, *
ˇn⁄_m
;

4149 
__u16
 
vÀn
;

4151 i‡(!
	`btf_shÆlow_equÆ_°ru˘
(
ˇnd_ty≥
, 
ˇn⁄_ty≥
))

4153 
vÀn
 = 
	`btf_vÀn
(
ˇnd_ty≥
);

4154 
ˇnd_m
 = 
	`btf_membîs
(
ˇnd_ty≥
);

4155 
ˇn⁄_m
 = 
	`btf_membîs
(
ˇn⁄_ty≥
);

4156 
i
 = 0; i < 
vÀn
; i++) {

4157 
eq
 = 
	`btf_dedup_is_equiv
(
d
, 
ˇnd_m
->
ty≥
, 
ˇn⁄_m
->type);

4158 i‡(
eq
 <= 0)

4159  
eq
;

4160 
ˇnd_m
++;

4161 
ˇn⁄_m
++;

4167 
BTF_KIND_FUNC_PROTO
: {

4168 c⁄° 
btf_∑øm
 *
ˇnd_p
, *
ˇn⁄_p
;

4169 
__u16
 
vÀn
;

4171 i‡(!
	`btf_com∑t_‚¥Ÿo
(
ˇnd_ty≥
, 
ˇn⁄_ty≥
))

4173 
eq
 = 
	`btf_dedup_is_equiv
(
d
, 
ˇnd_ty≥
->
ty≥
, 
ˇn⁄_ty≥
->type);

4174 i‡(
eq
 <= 0)

4175  
eq
;

4176 
vÀn
 = 
	`btf_vÀn
(
ˇnd_ty≥
);

4177 
ˇnd_p
 = 
	`btf_∑øms
(
ˇnd_ty≥
);

4178 
ˇn⁄_p
 = 
	`btf_∑øms
(
ˇn⁄_ty≥
);

4179 
i
 = 0; i < 
vÀn
; i++) {

4180 
eq
 = 
	`btf_dedup_is_equiv
(
d
, 
ˇnd_p
->
ty≥
, 
ˇn⁄_p
->type);

4181 i‡(
eq
 <= 0)

4182  
eq
;

4183 
ˇnd_p
++;

4184 
ˇn⁄_p
++;

4190  -
EINVAL
;

4193 
	}
}

4221 
	$btf_dedup_mîge_hypŸ_m≠
(
btf_dedup
 *
d
)

4223 
__u32
 
ˇn⁄_ty≥_id
, 
èrg_ty≥_id
;

4224 
__u16
 
t_köd
, 
c_köd
;

4225 
__u32
 
t_id
, 
c_id
;

4226 
i
;

4228 
i
 = 0; i < 
d
->
hypŸ_˙t
; i++) {

4229 
ˇn⁄_ty≥_id
 = 
d
->
hypŸ_li°
[
i
];

4230 
èrg_ty≥_id
 = 
d
->
hypŸ_m≠
[
ˇn⁄_ty≥_id
];

4231 
t_id
 = 
	`ªsﬁve_ty≥_id
(
d
, 
èrg_ty≥_id
);

4232 
c_id
 = 
	`ªsﬁve_ty≥_id
(
d
, 
ˇn⁄_ty≥_id
);

4233 
t_köd
 = 
	`btf_köd
(
	`btf__ty≥_by_id
(
d
->
btf
, 
t_id
));

4234 
c_köd
 = 
	`btf_köd
(
	`btf__ty≥_by_id
(
d
->
btf
, 
c_id
));

4255 i‡(
t_köd
 !
BTF_KIND_FWD
 && 
c_köd
 == BTF_KIND_FWD)

4256 
d
->
m≠
[
c_id
] = 
t_id
;

4263 i‡(
d
->
hypŸ_adju°_ˇn⁄
)

4266 i‡(
t_köd
 =
BTF_KIND_FWD
 && 
c_köd
 != BTF_KIND_FWD)

4267 
d
->
m≠
[
t_id
] = 
c_id
;

4269 i‡((
t_köd
 =
BTF_KIND_STRUCT
 ||Å_köd =
BTF_KIND_UNION
) &&

4270 
c_köd
 !
BTF_KIND_FWD
 &&

4271 
	`is_ty≥_m≠≥d
(
d
, 
c_id
) &&

4272 !
	`is_ty≥_m≠≥d
(
d
, 
t_id
)) {

4279 
d
->
m≠
[
t_id
] = 
c_id
;

4282 
	}
}

4306 
	$btf_dedup_°ru˘_ty≥
(
btf_dedup
 *
d
, 
__u32
 
ty≥_id
)

4308 
btf_ty≥
 *
ˇnd_ty≥
, *
t
;

4309 
hashm≠_íåy
 *
hash_íåy
;

4311 
__u32
 
√w_id
 = 
ty≥_id
;

4312 
__u16
 
köd
;

4313 
h
;

4316 i‡(
d
->
m≠
[
ty≥_id
] <
BTF_MAX_NR_TYPES
)

4319 
t
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ty≥_id
);

4320 
köd
 = 
	`btf_köd
(
t
);

4322 i‡(
köd
 !
BTF_KIND_STRUCT
 && köd !
BTF_KIND_UNION
)

4325 
h
 = 
	`btf_hash_°ru˘
(
t
);

4326 
	`f‹_óch_dedup_ˇnd
(
d
, 
hash_íåy
, 
h
) {

4327 
__u32
 
ˇnd_id
 = (__u32)()
hash_íåy
->
vÆue
;

4328 
eq
;

4340 
ˇnd_ty≥
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ˇnd_id
);

4341 i‡(!
	`btf_shÆlow_equÆ_°ru˘
(
t
, 
ˇnd_ty≥
))

4344 
	`btf_dedup_˛ór_hypŸ_m≠
(
d
);

4345 
eq
 = 
	`btf_dedup_is_equiv
(
d
, 
ty≥_id
, 
ˇnd_id
);

4346 i‡(
eq
 < 0)

4347  
eq
;

4348 i‡(!
eq
)

4350 
	`btf_dedup_mîge_hypŸ_m≠
(
d
);

4351 i‡(
d
->
hypŸ_adju°_ˇn⁄
)

4353 
√w_id
 = 
ˇnd_id
;

4357 
d
->
m≠
[
ty≥_id
] = 
√w_id
;

4358 i‡(
ty≥_id
 =
√w_id
 && 
	`btf_dedup_èbÀ_add
(
d
, 
h
,Åype_id))

4359  -
ENOMEM
;

4362 
	}
}

4364 
	$btf_dedup_°ru˘_ty≥s
(
btf_dedup
 *
d
)

4366 
i
, 
îr
;

4368 
i
 = 0; i < 
d
->
btf
->
ƒ_ty≥s
; i++) {

4369 
îr
 = 
	`btf_dedup_°ru˘_ty≥
(
d
, d->
btf
->
°¨t_id
 + 
i
);

4370 i‡(
îr
)

4371  
îr
;

4374 
	}
}

4400 
	$btf_dedup_ªf_ty≥
(
btf_dedup
 *
d
, 
__u32
 
ty≥_id
)

4402 
hashm≠_íåy
 *
hash_íåy
;

4403 
__u32
 
√w_id
 = 
ty≥_id
, 
ˇnd_id
;

4404 
btf_ty≥
 *
t
, *
ˇnd
;

4406 
ªf_ty≥_id
;

4407 
h
;

4409 i‡(
d
->
m≠
[
ty≥_id
] =
BTF_IN_PROGRESS_ID
)

4410  -
ELOOP
;

4411 i‡(
d
->
m≠
[
ty≥_id
] <
BTF_MAX_NR_TYPES
)

4412  
	`ªsﬁve_ty≥_id
(
d
, 
ty≥_id
);

4414 
t
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ty≥_id
);

4415 
d
->
m≠
[
ty≥_id
] = 
BTF_IN_PROGRESS_ID
;

4417 
	`btf_köd
(
t
)) {

4418 
BTF_KIND_CONST
:

4419 
BTF_KIND_VOLATILE
:

4420 
BTF_KIND_RESTRICT
:

4421 
BTF_KIND_PTR
:

4422 
BTF_KIND_TYPEDEF
:

4423 
BTF_KIND_FUNC
:

4424 
BTF_KIND_TYPE_TAG
:

4425 
ªf_ty≥_id
 = 
	`btf_dedup_ªf_ty≥
(
d
, 
t
->
ty≥
);

4426 i‡(
ªf_ty≥_id
 < 0)

4427  
ªf_ty≥_id
;

4428 
t
->
ty≥
 = 
ªf_ty≥_id
;

4430 
h
 = 
	`btf_hash_comm⁄
(
t
);

4431 
	`f‹_óch_dedup_ˇnd
(
d
, 
hash_íåy
, 
h
) {

4432 
ˇnd_id
 = (
__u32
)()
hash_íåy
->
vÆue
;

4433 
ˇnd
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ˇnd_id
);

4434 i‡(
	`btf_equÆ_comm⁄
(
t
, 
ˇnd
)) {

4435 
√w_id
 = 
ˇnd_id
;

4441 
BTF_KIND_DECL_TAG
:

4442 
ªf_ty≥_id
 = 
	`btf_dedup_ªf_ty≥
(
d
, 
t
->
ty≥
);

4443 i‡(
ªf_ty≥_id
 < 0)

4444  
ªf_ty≥_id
;

4445 
t
->
ty≥
 = 
ªf_ty≥_id
;

4447 
h
 = 
	`btf_hash_öt_de˛_èg
(
t
);

4448 
	`f‹_óch_dedup_ˇnd
(
d
, 
hash_íåy
, 
h
) {

4449 
ˇnd_id
 = (
__u32
)()
hash_íåy
->
vÆue
;

4450 
ˇnd
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ˇnd_id
);

4451 i‡(
	`btf_equÆ_öt_èg
(
t
, 
ˇnd
)) {

4452 
√w_id
 = 
ˇnd_id
;

4458 
BTF_KIND_ARRAY
: {

4459 
btf_¨øy
 *
öfo
 = 
	`btf_¨øy
(
t
);

4461 
ªf_ty≥_id
 = 
	`btf_dedup_ªf_ty≥
(
d
, 
öfo
->
ty≥
);

4462 i‡(
ªf_ty≥_id
 < 0)

4463  
ªf_ty≥_id
;

4464 
öfo
->
ty≥
 = 
ªf_ty≥_id
;

4466 
ªf_ty≥_id
 = 
	`btf_dedup_ªf_ty≥
(
d
, 
öfo
->
ödex_ty≥
);

4467 i‡(
ªf_ty≥_id
 < 0)

4468  
ªf_ty≥_id
;

4469 
öfo
->
ödex_ty≥
 = 
ªf_ty≥_id
;

4471 
h
 = 
	`btf_hash_¨øy
(
t
);

4472 
	`f‹_óch_dedup_ˇnd
(
d
, 
hash_íåy
, 
h
) {

4473 
ˇnd_id
 = (
__u32
)()
hash_íåy
->
vÆue
;

4474 
ˇnd
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ˇnd_id
);

4475 i‡(
	`btf_equÆ_¨øy
(
t
, 
ˇnd
)) {

4476 
√w_id
 = 
ˇnd_id
;

4483 
BTF_KIND_FUNC_PROTO
: {

4484 
btf_∑øm
 *
∑øm
;

4485 
__u16
 
vÀn
;

4486 
i
;

4488 
ªf_ty≥_id
 = 
	`btf_dedup_ªf_ty≥
(
d
, 
t
->
ty≥
);

4489 i‡(
ªf_ty≥_id
 < 0)

4490  
ªf_ty≥_id
;

4491 
t
->
ty≥
 = 
ªf_ty≥_id
;

4493 
vÀn
 = 
	`btf_vÀn
(
t
);

4494 
∑øm
 = 
	`btf_∑øms
(
t
);

4495 
i
 = 0; i < 
vÀn
; i++) {

4496 
ªf_ty≥_id
 = 
	`btf_dedup_ªf_ty≥
(
d
, 
∑øm
->
ty≥
);

4497 i‡(
ªf_ty≥_id
 < 0)

4498  
ªf_ty≥_id
;

4499 
∑øm
->
ty≥
 = 
ªf_ty≥_id
;

4500 
∑øm
++;

4503 
h
 = 
	`btf_hash_‚¥Ÿo
(
t
);

4504 
	`f‹_óch_dedup_ˇnd
(
d
, 
hash_íåy
, 
h
) {

4505 
ˇnd_id
 = (
__u32
)()
hash_íåy
->
vÆue
;

4506 
ˇnd
 = 
	`btf_ty≥_by_id
(
d
->
btf
, 
ˇnd_id
);

4507 i‡(
	`btf_equÆ_‚¥Ÿo
(
t
, 
ˇnd
)) {

4508 
√w_id
 = 
ˇnd_id
;

4516  -
EINVAL
;

4519 
d
->
m≠
[
ty≥_id
] = 
√w_id
;

4520 i‡(
ty≥_id
 =
√w_id
 && 
	`btf_dedup_èbÀ_add
(
d
, 
h
,Åype_id))

4521  -
ENOMEM
;

4523  
√w_id
;

4524 
	}
}

4526 
	$btf_dedup_ªf_ty≥s
(
btf_dedup
 *
d
)

4528 
i
, 
îr
;

4530 
i
 = 0; i < 
d
->
btf
->
ƒ_ty≥s
; i++) {

4531 
îr
 = 
	`btf_dedup_ªf_ty≥
(
d
, d->
btf
->
°¨t_id
 + 
i
);

4532 i‡(
îr
 < 0)

4533  
îr
;

4536 
	`hashm≠__‰ì
(
d
->
dedup_èbÀ
);

4537 
d
->
dedup_èbÀ
 = 
NULL
;

4539 
	}
}

4552 
	$btf_dedup_com∑˘_ty≥s
(
btf_dedup
 *
d
)

4554 
__u32
 *
√w_offs
;

4555 
__u32
 
√xt_ty≥_id
 = 
d
->
btf
->
°¨t_id
;

4556 c⁄° 
btf_ty≥
 *
t
;

4557 *
p
;

4558 
i
, 
id
, 
Àn
;

4561 
d
->
hypŸ_m≠
[0] = 0;

4563 
id
 = 1; id < 
d
->
btf
->
°¨t_id
; id++)

4564 
d
->
hypŸ_m≠
[
id
] = id;

4565 
i
 = 0, 
id
 = 
d
->
btf
->
°¨t_id
; i < d->btf->
ƒ_ty≥s
; i++, id++)

4566 
d
->
hypŸ_m≠
[
id
] = 
BTF_UNPROCESSED_ID
;

4568 
p
 = 
d
->
btf
->
ty≥s_d©a
;

4570 
i
 = 0, 
id
 = 
d
->
btf
->
°¨t_id
; i < d->btf->
ƒ_ty≥s
; i++, id++) {

4571 i‡(
d
->
m≠
[
id
] != id)

4574 
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
id
);

4575 
Àn
 = 
	`btf_ty≥_size
(
t
);

4576 i‡(
Àn
 < 0)

4577  
Àn
;

4579 
	`memmove
(
p
, 
t
, 
Àn
);

4580 
d
->
hypŸ_m≠
[
id
] = 
√xt_ty≥_id
;

4581 
d
->
btf
->
ty≥_offs
[
√xt_ty≥_id
 - d->btf->
°¨t_id
] = 
p
 - d->btf->
ty≥s_d©a
;

4582 
p
 +
Àn
;

4583 
√xt_ty≥_id
++;

4587 
d
->
btf
->
ƒ_ty≥s
 = 
√xt_ty≥_id
 - d->btf->
°¨t_id
;

4588 
d
->
btf
->
ty≥_offs_ˇp
 = d->btf->
ƒ_ty≥s
;

4589 
d
->
btf
->
hdr
->
ty≥_Àn
 = 
p
 - d->btf->
ty≥s_d©a
;

4590 
√w_offs
 = 
	`libbpf_ªÆloˇºay
(
d
->
btf
->
ty≥_offs
, d->btf->
ty≥_offs_ˇp
,

4591 (*
√w_offs
));

4592 i‡(
d
->
btf
->
ty≥_offs_ˇp
 && !
√w_offs
)

4593  -
ENOMEM
;

4594 
d
->
btf
->
ty≥_offs
 = 
√w_offs
;

4595 
d
->
btf
->
hdr
->
°r_off
 = d->btf->hdr->
ty≥_Àn
;

4596 
d
->
btf
->
øw_size
 = d->btf->
hdr
->
hdr_Àn
 + d->btf->hdr->
ty≥_Àn
 + d->btf->hdr->
°r_Àn
;

4598 
	}
}

4606 
	$btf_dedup_ªm≠_ty≥_id
(
__u32
 *
ty≥_id
, *
˘x
)

4608 
btf_dedup
 *
d
 = 
˘x
;

4609 
__u32
 
ªsﬁved_ty≥_id
, 
√w_ty≥_id
;

4611 
ªsﬁved_ty≥_id
 = 
	`ªsﬁve_ty≥_id
(
d
, *
ty≥_id
);

4612 
√w_ty≥_id
 = 
d
->
hypŸ_m≠
[
ªsﬁved_ty≥_id
];

4613 i‡(
√w_ty≥_id
 > 
BTF_MAX_NR_TYPES
)

4614  -
EINVAL
;

4616 *
ty≥_id
 = 
√w_ty≥_id
;

4618 
	}
}

4630 
	$btf_dedup_ªm≠_ty≥s
(
btf_dedup
 *
d
)

4632 
i
, 
r
;

4634 
i
 = 0; i < 
d
->
btf
->
ƒ_ty≥s
; i++) {

4635 
btf_ty≥
 *
t
 = 
	`btf_ty≥_by_id
(
d
->
btf
, d->btf->
°¨t_id
 + 
i
);

4637 
r
 = 
	`btf_ty≥_visô_ty≥_ids
(
t
, 
btf_dedup_ªm≠_ty≥_id
, 
d
);

4638 i‡(
r
)

4639  
r
;

4642 i‡(!
d
->
btf_ext
)

4645 
r
 = 
	`btf_ext_visô_ty≥_ids
(
d
->
btf_ext
, 
btf_dedup_ªm≠_ty≥_id
, d);

4646 i‡(
r
)

4647  
r
;

4650 
	}
}

4656 
btf
 *
	$btf__lﬂd_vmlöux_btf
()

4659 c⁄° *
∑th_fmt
;

4660 
boﬁ
 
øw_btf
;

4661 } 
loˇti⁄s
[] = {

4663 { "/sys/kî√l/btf/vmlöux", 
åue
 },

4673 
∑th
[
PATH_MAX
 + 1];

4674 
ut¢ame
 
buf
;

4675 
btf
 *btf;

4676 
i
, 
îr
;

4678 
	`u«me
(&
buf
);

4680 
i
 = 0; i < 
	`ARRAY_SIZE
(
loˇti⁄s
); i++) {

4681 
	`¢¥ötf
(
∑th
, 
PATH_MAX
, 
loˇti⁄s
[
i
].
∑th_fmt
, 
buf
.
ªÀa£
);

4683 i‡(
	`ac˚ss
(
∑th
, 
R_OK
))

4686 i‡(
loˇti⁄s
[
i
].
øw_btf
)

4687 
btf
 = 
	`btf__∑r£_øw
(
∑th
);

4689 
btf
 = 
	`btf__∑r£_ñf
(
∑th
, 
NULL
);

4690 
îr
 = 
	`libbpf_gë_îr‹
(
btf
);

4691 
	`¥_debug
("lﬂdög kî√»BTF '%s': %d\n", 
∑th
, 
îr
);

4692 i‡(
îr
)

4695  
btf
;

4698 
	`¥_w¨n
("failedÅo find valid kernel BTF\n");

4699  
	`libbpf_îr_±r
(-
ESRCH
);

4700 
	}
}

4702 
btf
 *
	$libbpf_föd_kî√l_btf
(Ë
	`__©åibuã__
((
	`Æüs
("btf__load_vmlinux_btf")));

4704 
btf
 *
	$btf__lﬂd_moduÀ_btf
(c⁄° *
moduÀ_«me
, 
btf
 *
vmlöux_btf
)

4706 
∑th
[80];

4708 
	`¢¥ötf
(
∑th
, ’©h), "/sys/kî√l/btf/%s", 
moduÀ_«me
);

4709  
	`btf__∑r£_•lô
(
∑th
, 
vmlöux_btf
);

4710 
	}
}

4712 
	$btf_ty≥_visô_ty≥_ids
(
btf_ty≥
 *
t
, 
ty≥_id_visô_‚
 
visô
, *
˘x
)

4714 
i
, 
n
, 
îr
;

4716 
	`btf_köd
(
t
)) {

4717 
BTF_KIND_INT
:

4718 
BTF_KIND_FLOAT
:

4719 
BTF_KIND_ENUM
:

4722 
BTF_KIND_FWD
:

4723 
BTF_KIND_CONST
:

4724 
BTF_KIND_VOLATILE
:

4725 
BTF_KIND_RESTRICT
:

4726 
BTF_KIND_PTR
:

4727 
BTF_KIND_TYPEDEF
:

4728 
BTF_KIND_FUNC
:

4729 
BTF_KIND_VAR
:

4730 
BTF_KIND_DECL_TAG
:

4731 
BTF_KIND_TYPE_TAG
:

4732  
	`visô
(&
t
->
ty≥
, 
˘x
);

4734 
BTF_KIND_ARRAY
: {

4735 
btf_¨øy
 *
a
 = 
	`btf_¨øy
(
t
);

4737 
îr
 = 
	`visô
(&
a
->
ty≥
, 
˘x
);

4738 
îr
 =Éº ?: 
	`visô
(&
a
->
ödex_ty≥
, 
˘x
);

4739  
îr
;

4742 
BTF_KIND_STRUCT
:

4743 
BTF_KIND_UNION
: {

4744 
btf_membî
 *
m
 = 
	`btf_membîs
(
t
);

4746 
i
 = 0, 
n
 = 
	`btf_vÀn
(
t
); i <Ç; i++, 
m
++) {

4747 
îr
 = 
	`visô
(&
m
->
ty≥
, 
˘x
);

4748 i‡(
îr
)

4749  
îr
;

4754 
BTF_KIND_FUNC_PROTO
: {

4755 
btf_∑øm
 *
m
 = 
	`btf_∑øms
(
t
);

4757 
îr
 = 
	`visô
(&
t
->
ty≥
, 
˘x
);

4758 i‡(
îr
)

4759  
îr
;

4760 
i
 = 0, 
n
 = 
	`btf_vÀn
(
t
); i <Ç; i++, 
m
++) {

4761 
îr
 = 
	`visô
(&
m
->
ty≥
, 
˘x
);

4762 i‡(
îr
)

4763  
îr
;

4768 
BTF_KIND_DATASEC
: {

4769 
btf_v¨_£cöfo
 *
m
 = 
	`btf_v¨_£cöfos
(
t
);

4771 
i
 = 0, 
n
 = 
	`btf_vÀn
(
t
); i <Ç; i++, 
m
++) {

4772 
îr
 = 
	`visô
(&
m
->
ty≥
, 
˘x
);

4773 i‡(
îr
)

4774  
îr
;

4780  -
EINVAL
;

4782 
	}
}

4784 
	$btf_ty≥_visô_°r_offs
(
btf_ty≥
 *
t
, 
°r_off_visô_‚
 
visô
, *
˘x
)

4786 
i
, 
n
, 
îr
;

4788 
îr
 = 
	`visô
(&
t
->
«me_off
, 
˘x
);

4789 i‡(
îr
)

4790  
îr
;

4792 
	`btf_köd
(
t
)) {

4793 
BTF_KIND_STRUCT
:

4794 
BTF_KIND_UNION
: {

4795 
btf_membî
 *
m
 = 
	`btf_membîs
(
t
);

4797 
i
 = 0, 
n
 = 
	`btf_vÀn
(
t
); i <Ç; i++, 
m
++) {

4798 
îr
 = 
	`visô
(&
m
->
«me_off
, 
˘x
);

4799 i‡(
îr
)

4800  
îr
;

4804 
BTF_KIND_ENUM
: {

4805 
btf_íum
 *
m
 = 
	`btf_íum
(
t
);

4807 
i
 = 0, 
n
 = 
	`btf_vÀn
(
t
); i <Ç; i++, 
m
++) {

4808 
îr
 = 
	`visô
(&
m
->
«me_off
, 
˘x
);

4809 i‡(
îr
)

4810  
îr
;

4814 
BTF_KIND_FUNC_PROTO
: {

4815 
btf_∑øm
 *
m
 = 
	`btf_∑øms
(
t
);

4817 
i
 = 0, 
n
 = 
	`btf_vÀn
(
t
); i <Ç; i++, 
m
++) {

4818 
îr
 = 
	`visô
(&
m
->
«me_off
, 
˘x
);

4819 i‡(
îr
)

4820  
îr
;

4829 
	}
}

4831 
	$btf_ext_visô_ty≥_ids
(
btf_ext
 *btf_ext, 
ty≥_id_visô_‚
 
visô
, *
˘x
)

4833 c⁄° 
btf_ext_öfo
 *
£g
;

4834 
btf_ext_öfo_£c
 *
£c
;

4835 
i
, 
îr
;

4837 
£g
 = &
btf_ext
->
func_öfo
;

4838 
	`f‹_óch_btf_ext_£c
(
£g
, 
£c
) {

4839 
bpf_func_öfo_mö
 *
ªc
;

4841 
	`f‹_óch_btf_ext_ªc
(
£g
, 
£c
, 
i
, 
ªc
) {

4842 
îr
 = 
	`visô
(&
ªc
->
ty≥_id
, 
˘x
);

4843 i‡(
îr
 < 0)

4844  
îr
;

4848 
£g
 = &
btf_ext
->
c‹e_ªlo_öfo
;

4849 
	`f‹_óch_btf_ext_£c
(
£g
, 
£c
) {

4850 
bpf_c‹e_ªlo
 *
ªc
;

4852 
	`f‹_óch_btf_ext_ªc
(
£g
, 
£c
, 
i
, 
ªc
) {

4853 
îr
 = 
	`visô
(&
ªc
->
ty≥_id
, 
˘x
);

4854 i‡(
îr
 < 0)

4855  
îr
;

4860 
	}
}

4862 
	$btf_ext_visô_°r_offs
(
btf_ext
 *btf_ext, 
°r_off_visô_‚
 
visô
, *
˘x
)

4864 c⁄° 
btf_ext_öfo
 *
£g
;

4865 
btf_ext_öfo_£c
 *
£c
;

4866 
i
, 
îr
;

4868 
£g
 = &
btf_ext
->
func_öfo
;

4869 
	`f‹_óch_btf_ext_£c
(
£g
, 
£c
) {

4870 
îr
 = 
	`visô
(&
£c
->
£c_«me_off
, 
˘x
);

4871 i‡(
îr
)

4872  
îr
;

4875 
£g
 = &
btf_ext
->
löe_öfo
;

4876 
	`f‹_óch_btf_ext_£c
(
£g
, 
£c
) {

4877 
bpf_löe_öfo_mö
 *
ªc
;

4879 
îr
 = 
	`visô
(&
£c
->
£c_«me_off
, 
˘x
);

4880 i‡(
îr
)

4881  
îr
;

4883 
	`f‹_óch_btf_ext_ªc
(
£g
, 
£c
, 
i
, 
ªc
) {

4884 
îr
 = 
	`visô
(&
ªc
->
fûe_«me_off
, 
˘x
);

4885 i‡(
îr
)

4886  
îr
;

4887 
îr
 = 
	`visô
(&
ªc
->
löe_off
, 
˘x
);

4888 i‡(
îr
)

4889  
îr
;

4893 
£g
 = &
btf_ext
->
c‹e_ªlo_öfo
;

4894 
	`f‹_óch_btf_ext_£c
(
£g
, 
£c
) {

4895 
bpf_c‹e_ªlo
 *
ªc
;

4897 
îr
 = 
	`visô
(&
£c
->
£c_«me_off
, 
˘x
);

4898 i‡(
îr
)

4899  
îr
;

4901 
	`f‹_óch_btf_ext_ªc
(
£g
, 
£c
, 
i
, 
ªc
) {

4902 
îr
 = 
	`visô
(&
ªc
->
ac˚ss_°r_off
, 
˘x
);

4903 i‡(
îr
)

4904  
îr
;

4909 
	}
}

	@btf.h

5 #i‚de‡
__LIBBPF_BTF_H


6 
	#__LIBBPF_BTF_H


	)

8 
	~<°d¨g.h
>

9 
	~<°dboﬁ.h
>

10 
	~<löux/btf.h
>

11 
	~<löux/ty≥s.h
>

13 
	~"libbpf_comm⁄.h
"

15 #ifde‡
__˝lu•lus


19 
	#BTF_ELF_SEC
 ".BTF"

	)

20 
	#BTF_EXT_ELF_SEC
 ".BTF.ext"

	)

21 
	#MAPS_ELF_SEC
 ".m≠s"

	)

23 
btf
;

24 
btf_ext
;

25 
btf_ty≥
;

27 
bpf_obje˘
;

29 
	ebtf_ídü¬ess
 {

30 
BTF_LITTLE_ENDIAN
 = 0,

31 
BTF_BIG_ENDIAN
 = 1,

38 
LIBBPF_API
 
btf__‰ì
(
btf
 *btf);

54 
LIBBPF_API
 
btf
 *
btf__√w
(c⁄° *
d©a
, 
__u32
 
size
);

76 
LIBBPF_API
 
btf
 *
btf__√w_•lô
(c⁄° *
d©a
, 
__u32
 
size
, bt‡*
ba£_btf
);

90 
LIBBPF_API
 
btf
 *
btf__√w_em±y
();

108 
LIBBPF_API
 
btf
 *
btf__√w_em±y_•lô
(bt‡*
ba£_btf
);

110 
LIBBPF_API
 
btf
 *
btf__∑r£
(c⁄° *
∑th
, 
btf_ext
 **btf_ext);

111 
LIBBPF_API
 
btf
 *
btf__∑r£_•lô
(c⁄° *
∑th
, bt‡*
ba£_btf
);

112 
LIBBPF_API
 
btf
 *
btf__∑r£_ñf
(c⁄° *
∑th
, 
btf_ext
 **btf_ext);

113 
LIBBPF_API
 
btf
 *
btf__∑r£_ñf_•lô
(c⁄° *
∑th
, bt‡*
ba£_btf
);

114 
LIBBPF_API
 
btf
 *
btf__∑r£_øw
(c⁄° *
∑th
);

115 
LIBBPF_API
 
btf
 *
btf__∑r£_øw_•lô
(c⁄° *
∑th
, bt‡*
ba£_btf
);

117 
LIBBPF_API
 
btf
 *
btf__lﬂd_vmlöux_btf
();

118 
LIBBPF_API
 
btf
 *
btf__lﬂd_moduÀ_btf
(c⁄° *
moduÀ_«me
, bt‡*
vmlöux_btf
);

119 
LIBBPF_API
 
btf
 *
libbpf_föd_kî√l_btf
();

121 
LIBBPF_API
 
btf
 *
btf__lﬂd_‰om_kî√l_by_id
(
__u32
 
id
);

122 
LIBBPF_API
 
btf
 *
btf__lﬂd_‰om_kî√l_by_id_•lô
(
__u32
 
id
, bt‡*
ba£_btf
);

123 
LIBBPF_DEPRECATED_SINCE
(0, 6, "use btf__load_from_kernel_by_id instead")

124 
LIBBPF_API
 
btf__gë_‰om_id
(
__u32
 
id
, 
btf
 **btf);

126 
LIBBPF_DEPRECATED_SINCE
(0, 6, "intended for internalÜibbpf use only")

127 
LIBBPF_API
 
btf__föÆize_d©a
(
bpf_obje˘
 *
obj
, 
btf
 *btf);

128 
LIBBPF_DEPRECATED_SINCE
(0, 6, "use btf__load_into_kernel instead")

129 
LIBBPF_API
 
btf__lﬂd
(
btf
 *btf);

130 
LIBBPF_API
 
btf__lﬂd_öto_kî√l
(
btf
 *btf);

131 
LIBBPF_API
 
__s32
 
btf__föd_by_«me
(c⁄° 
btf
 *btf,

132 c⁄° *
ty≥_«me
);

133 
LIBBPF_API
 
__s32
 
btf__föd_by_«me_köd
(c⁄° 
btf
 *btf,

134 c⁄° *
ty≥_«me
, 
__u32
 
köd
);

135 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use btf__type_cnt() instead;ÇoteÅhat btf__get_nr_types() == btf__type_cnt() - 1")

136 
LIBBPF_API
 
__u32
 
btf__gë_ƒ_ty≥s
(c⁄° 
btf
 *btf);

137 
LIBBPF_API
 
__u32
 
btf__ty≥_˙t
(c⁄° 
btf
 *btf);

138 
LIBBPF_API
 c⁄° 
btf
 *
btf__ba£_btf
(const btf *btf);

139 
LIBBPF_API
 c⁄° 
btf_ty≥
 *
btf__ty≥_by_id
(c⁄° 
btf
 *btf,

140 
__u32
 
id
);

141 
LIBBPF_API
 
size_t
 
btf__poöãr_size
(c⁄° 
btf
 *btf);

142 
LIBBPF_API
 
btf__£t_poöãr_size
(
btf
 *btf, 
size_t
 
±r_sz
);

143 
LIBBPF_API
 
btf_ídü¬ess
 
btf__ídü¬ess
(c⁄° 
btf
 *btf);

144 
LIBBPF_API
 
btf__£t_ídü¬ess
(
btf
 *btf, 
btf_ídü¬ess
 
ídün
);

145 
LIBBPF_API
 
__s64
 
btf__ªsﬁve_size
(c⁄° 
btf
 *btf, 
__u32
 
ty≥_id
);

146 
LIBBPF_API
 
btf__ªsﬁve_ty≥
(c⁄° 
btf
 *btf, 
__u32
 
ty≥_id
);

147 
LIBBPF_API
 
btf__Æign_of
(c⁄° 
btf
 *btf, 
__u32
 
id
);

148 
LIBBPF_API
 
btf__fd
(c⁄° 
btf
 *btf);

149 
LIBBPF_API
 
btf__£t_fd
(
btf
 *btf, 
fd
);

150 
LIBBPF_API
 c⁄° *
btf__øw_d©a
(c⁄° 
btf
 *btf, 
__u32
 *
size
);

151 
LIBBPF_API
 c⁄° *
btf__«me_by_off£t
(c⁄° 
btf
 *btf, 
__u32
 
off£t
);

152 
LIBBPF_API
 c⁄° *
btf__°r_by_off£t
(c⁄° 
btf
 *btf, 
__u32
 
off£t
);

153 
LIBBPF_DEPRECATED_SINCE
(0, 7, "this API isÇotÇecessary when BTF-defined mapsáre used")

154 
LIBBPF_API
 
btf__gë_m≠_kv_tids
(c⁄° 
btf
 *btf, c⁄° *
m≠_«me
,

155 
__u32
 
ex≥˘ed_key_size
,

156 
__u32
 
ex≥˘ed_vÆue_size
,

157 
__u32
 *
key_ty≥_id
, __u32 *
vÆue_ty≥_id
);

159 
LIBBPF_API
 
btf_ext
 *
btf_ext__√w
(c⁄° 
__u8
 *
d©a
, 
__u32
 
size
);

160 
LIBBPF_API
 
btf_ext__‰ì
(
btf_ext
 *btf_ext);

161 
LIBBPF_API
 c⁄° *
btf_ext__øw_d©a
(c⁄° 
btf_ext
 *btf_ext, 
__u32
 *
size
);

162 
LIBBPF_API
 
LIBBPF_DEPRECATED
("btf_ext__reloc_func_info wasÇever meantásáÖublic APIánd has wrongássumptionsÉmbedded in it; it will beÑemoved inÅhe futureÜibbpf versions")

163 
btf_ext__ªloc_func_öfo
(c⁄° 
btf
 *btf,

164 c⁄° 
btf_ext
 *btf_ext,

165 c⁄° *
£c_«me
, 
__u32
 
ö¢s_˙t
,

166 **
func_öfo
, 
__u32
 *
˙t
);

167 
LIBBPF_API
 
LIBBPF_DEPRECATED
("btf_ext__reloc_line_info wasÇever meantásáÖublic APIánd has wrongássumptionsÉmbedded in it; it will beÑemoved inÅhe futureÜibbpf versions")

168 
btf_ext__ªloc_löe_öfo
(c⁄° 
btf
 *btf,

169 c⁄° 
btf_ext
 *btf_ext,

170 c⁄° *
£c_«me
, 
__u32
 
ö¢s_˙t
,

171 **
löe_öfo
, 
__u32
 *
˙t
);

172 
LIBBPF_API
 
LIBBPF_DEPRECATED
("btf_ext__reloc_func_info is deprecated; write custom func_infoÖarsingÅo fetchÑec_size")

173 
__u32
 
btf_ext__func_öfo_ªc_size
(c⁄° 
btf_ext
 *btf_ext);

174 
LIBBPF_API
 
LIBBPF_DEPRECATED
("btf_ext__reloc_line_info is deprecated; write customÜine_infoÖarsingÅo fetchÑec_size")

175 
__u32
 
btf_ext__löe_öfo_ªc_size
(c⁄° 
btf_ext
 *btf_ext);

177 
LIBBPF_API
 
btf__föd_°r
(
btf
 *btf, c⁄° *
s
);

178 
LIBBPF_API
 
btf__add_°r
(
btf
 *btf, c⁄° *
s
);

179 
LIBBPF_API
 
btf__add_ty≥
(
btf
 *btf, c⁄° bt‡*
§c_btf
,

180 c⁄° 
btf_ty≥
 *
§c_ty≥
);

202 
LIBBPF_API
 
btf__add_btf
(
btf
 *btf, c⁄° bt‡*
§c_btf
);

204 
LIBBPF_API
 
btf__add_öt
(
btf
 *btf, c⁄° *
«me
, 
size_t
 
byã_sz
, 
ícodög
);

205 
LIBBPF_API
 
btf__add_Êﬂt
(
btf
 *btf, c⁄° *
«me
, 
size_t
 
byã_sz
);

206 
LIBBPF_API
 
btf__add_±r
(
btf
 *btf, 
ªf_ty≥_id
);

207 
LIBBPF_API
 
btf__add_¨øy
(
btf
 *btf,

208 
ödex_ty≥_id
, 
ñem_ty≥_id
, 
__u32
 
ƒ_ñems
);

210 
LIBBPF_API
 
btf__add_°ru˘
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
sz
);

211 
LIBBPF_API
 
btf__add_uni⁄
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
sz
);

212 
LIBBPF_API
 
btf__add_fõld
(
btf
 *btf, c⁄° *
«me
, 
fõld_ty≥_id
,

213 
__u32
 
bô_off£t
, __u32 
bô_size
);

216 
LIBBPF_API
 
btf__add_íum
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
byãs_sz
);

217 
LIBBPF_API
 
btf__add_íum_vÆue
(
btf
 *btf, c⁄° *
«me
, 
__s64
 
vÆue
);

219 
	ebtf_fwd_köd
 {

220 
BTF_FWD_STRUCT
 = 0,

221 
BTF_FWD_UNION
 = 1,

222 
BTF_FWD_ENUM
 = 2,

225 
LIBBPF_API
 
btf__add_fwd
(
btf
 *btf, c⁄° *
«me
, 
btf_fwd_köd
 
fwd_köd
);

226 
LIBBPF_API
 
btf__add_ty≥def
(
btf
 *btf, c⁄° *
«me
, 
ªf_ty≥_id
);

227 
LIBBPF_API
 
btf__add_vﬁ©ûe
(
btf
 *btf, 
ªf_ty≥_id
);

228 
LIBBPF_API
 
btf__add_c⁄°
(
btf
 *btf, 
ªf_ty≥_id
);

229 
LIBBPF_API
 
btf__add_ª°ri˘
(
btf
 *btf, 
ªf_ty≥_id
);

230 
LIBBPF_API
 
btf__add_ty≥_èg
(
btf
 *btf, c⁄° *
vÆue
, 
ªf_ty≥_id
);

233 
LIBBPF_API
 
btf__add_func
(
btf
 *btf, c⁄° *
«me
,

234 
btf_func_lökage
 
lökage
, 
¥Ÿo_ty≥_id
);

235 
LIBBPF_API
 
btf__add_func_¥Ÿo
(
btf
 *btf, 
ªt_ty≥_id
);

236 
LIBBPF_API
 
btf__add_func_∑øm
(
btf
 *btf, c⁄° *
«me
, 
ty≥_id
);

239 
LIBBPF_API
 
btf__add_v¨
(
btf
 *btf, c⁄° *
«me
, 
lökage
, 
ty≥_id
);

240 
LIBBPF_API
 
btf__add_d©a£c
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
byã_sz
);

241 
LIBBPF_API
 
btf__add_d©a£c_v¨_öfo
(
btf
 *btf, 
v¨_ty≥_id
,

242 
__u32
 
off£t
, __u32 
byã_sz
);

245 
LIBBPF_API
 
btf__add_de˛_èg
(
btf
 *btf, c⁄° *
vÆue
, 
ªf_ty≥_id
,

246 
comp⁄ít_idx
);

248 
	sbtf_dedup_›ts
 {

249 
size_t
 
sz
;

251 
btf_ext
 *btf_ext;

253 
boﬁ
 
f‹˚_cﬁlisi⁄s
;

254 
size_t
 :0;

256 
	#btf_dedup_›ts__œ°_fõld
 
f‹˚_cﬁlisi⁄s


	)

258 
LIBBPF_API
 
btf__dedup
(
btf
 *btf, c⁄° 
btf_dedup_›ts
 *
›ts
);

260 
LIBBPF_API
 
btf__dedup_v0_6_0
(
btf
 *btf, c⁄° 
btf_dedup_›ts
 *
›ts
);

262 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use btf__dedup() instead")

263 
LIBBPF_API
 
btf__dedup_dïªˇãd
(
btf
 *btf, 
btf_ext
 *btf_ext, c⁄° *
›ts
);

264 
	#btf__dedup
(...Ë
	`___libbpf_ovîlﬂd
(
___btf_dedup
, 
__VA_ARGS__
)

	)

265 
	#___btf_dedup3
(
btf
, 
btf_ext
, 
›ts
Ë
	`btf__dedup_dïªˇãd
(btf, btf_ext, o±s)

	)

266 
	#___btf_dedup2
(
btf
, 
›ts
Ë
	`btf__dedup
(btf, o±s)

	)

268 
btf_dump
;

270 
	sbtf_dump_›ts
 {

272 
size_t
 
sz
;

273 *
˘x
;

277 (*
btf_dump_¥ötf_‚_t
)(*
	t˘x
, c⁄° *
	tfmt
, 
	tva_li°
 
	t¨gs
);

279 
LIBBPF_API
 
btf_dump
 *
btf_dump__√w
(c⁄° 
btf
 *btf,

280 
btf_dump_¥ötf_‚_t
 
¥ötf_‚
,

281 *
˘x
,

282 c⁄° 
btf_dump_›ts
 *
›ts
);

284 
LIBBPF_API
 
btf_dump
 *
btf_dump__√w_v0_6_0
(c⁄° 
btf
 *btf,

285 
btf_dump_¥ötf_‚_t
 
¥ötf_‚
,

286 *
˘x
,

287 c⁄° 
btf_dump_›ts
 *
›ts
);

289 
LIBBPF_API
 
btf_dump
 *
btf_dump__√w_dïªˇãd
(c⁄° 
btf
 *btf,

290 c⁄° 
btf_ext
 *btf_ext,

291 c⁄° 
btf_dump_›ts
 *
›ts
,

292 
btf_dump_¥ötf_‚_t
 
¥ötf_‚
);

321 #i‚de‡
__˝lu•lus


322 
	#btf_dump__√w
(
a1
, 
a2
, 
a3
, 
a4
Ë
	`__buûtö_choo£_ex¥
( \

323 
	`__buûtö_ty≥s_com∑tibÀ_p
(
	`ty≥of
(
a4
), 
btf_dump_¥ötf_‚_t
) || \

324 
	`__buûtö_ty≥s_com∑tibÀ_p
(
	`ty≥of
(
a4
), (*, c⁄° *, 
va_li°
)), \

325 
	`btf_dump__√w_dïªˇãd
((*)
a1
, (*)
a2
, (*)
a3
, (*)
a4
), \

326 
	`btf_dump__√w
((*)
a1
, (*)
a2
, (*)
a3
, (*)
a4
))

	)

329 
LIBBPF_API
 
btf_dump__‰ì
(
btf_dump
 *
d
);

331 
LIBBPF_API
 
btf_dump__dump_ty≥
(
btf_dump
 *
d
, 
__u32
 
id
);

333 
	sbtf_dump_emô_ty≥_de˛_›ts
 {

335 
size_t
 
sz
;

341 c⁄° *
fõld_«me
;

347 
ödít_Àvñ
;

349 
boﬁ
 
°rù_mods
;

350 
size_t
 :0;

352 
	#btf_dump_emô_ty≥_de˛_›ts__œ°_fõld
 
°rù_mods


	)

354 
LIBBPF_API
 

355 
btf_dump__emô_ty≥_de˛
(
btf_dump
 *
d
, 
__u32
 
id
,

356 c⁄° 
btf_dump_emô_ty≥_de˛_›ts
 *
›ts
);

359 
	sbtf_dump_ty≥_d©a_›ts
 {

361 
size_t
 
sz
;

362 c⁄° *
ödít_°r
;

363 
ödít_Àvñ
;

365 
boﬁ
 
com∑˘
;

366 
boﬁ
 
skù_«mes
;

367 
boﬁ
 
emô_zî€s
;

368 
size_t
 :0;

370 
	#btf_dump_ty≥_d©a_›ts__œ°_fõld
 
emô_zî€s


	)

372 
LIBBPF_API
 

373 
btf_dump__dump_ty≥_d©a
(
btf_dump
 *
d
, 
__u32
 
id
,

374 c⁄° *
d©a
, 
size_t
 
d©a_sz
,

375 c⁄° 
btf_dump_ty≥_d©a_›ts
 *
›ts
);

385 #i‚de‡
BTF_KIND_FUNC


386 
	#BTF_KIND_FUNC
 12

	)

387 
	#BTF_KIND_FUNC_PROTO
 13

	)

389 #i‚de‡
BTF_KIND_VAR


390 
	#BTF_KIND_VAR
 14

	)

391 
	#BTF_KIND_DATASEC
 15

	)

393 #i‚de‡
BTF_KIND_FLOAT


394 
	#BTF_KIND_FLOAT
 16

	)

397 
	#BTF_KIND_DECL_TAG
 17

	)

398 
	#BTF_KIND_TYPE_TAG
 18

	)

399 
	#BTF_KIND_ENUM64
 19

	)

401 
ölöe
 
__u16
 
btf_köd
(c⁄° 
btf_ty≥
 *
t
)

403  
BTF_INFO_KIND
(
t
->
öfo
);

406 
ölöe
 
__u16
 
btf_vÀn
(c⁄° 
btf_ty≥
 *
t
)

408  
BTF_INFO_VLEN
(
t
->
öfo
);

411 
ölöe
 
boﬁ
 
btf_kÊag
(c⁄° 
btf_ty≥
 *
t
)

413  
BTF_INFO_KFLAG
(
t
->
öfo
);

416 
ölöe
 
boﬁ
 
btf_is_void
(c⁄° 
btf_ty≥
 *
t
)

418  
btf_köd
(
t
Ë=
BTF_KIND_UNKN
;

421 
ölöe
 
boﬁ
 
btf_is_öt
(c⁄° 
btf_ty≥
 *
t
)

423  
btf_köd
(
t
Ë=
BTF_KIND_INT
;

426 
ölöe
 
boﬁ
 
btf_is_±r
(c⁄° 
btf_ty≥
 *
t
)

428  
btf_köd
(
t
Ë=
BTF_KIND_PTR
;

431 
ölöe
 
boﬁ
 
btf_is_¨øy
(c⁄° 
btf_ty≥
 *
t
)

433  
btf_köd
(
t
Ë=
BTF_KIND_ARRAY
;

436 
ölöe
 
boﬁ
 
btf_is_°ru˘
(c⁄° 
btf_ty≥
 *
t
)

438  
btf_köd
(
t
Ë=
BTF_KIND_STRUCT
;

441 
ölöe
 
boﬁ
 
btf_is_uni⁄
(c⁄° 
btf_ty≥
 *
t
)

443  
btf_köd
(
t
Ë=
BTF_KIND_UNION
;

446 
ölöe
 
boﬁ
 
btf_is_composôe
(c⁄° 
btf_ty≥
 *
t
)

448 
__u16
 
köd
 = 
btf_köd
(
t
);

450  
köd
 =
BTF_KIND_STRUCT
 || köd =
BTF_KIND_UNION
;

453 
ölöe
 
boﬁ
 
btf_is_íum
(c⁄° 
btf_ty≥
 *
t
)

455  
btf_köd
(
t
Ë=
BTF_KIND_ENUM
;

458 
ölöe
 
boﬁ
 
btf_is_íum64
(c⁄° 
btf_ty≥
 *
t
)

460  
btf_köd
(
t
Ë=
BTF_KIND_ENUM64
;

463 
ölöe
 
boﬁ
 
btf_is_fwd
(c⁄° 
btf_ty≥
 *
t
)

465  
btf_köd
(
t
Ë=
BTF_KIND_FWD
;

468 
ölöe
 
boﬁ
 
btf_is_ty≥def
(c⁄° 
btf_ty≥
 *
t
)

470  
btf_köd
(
t
Ë=
BTF_KIND_TYPEDEF
;

473 
ölöe
 
boﬁ
 
btf_is_vﬁ©ûe
(c⁄° 
btf_ty≥
 *
t
)

475  
btf_köd
(
t
Ë=
BTF_KIND_VOLATILE
;

478 
ölöe
 
boﬁ
 
btf_is_c⁄°
(c⁄° 
btf_ty≥
 *
t
)

480  
btf_köd
(
t
Ë=
BTF_KIND_CONST
;

483 
ölöe
 
boﬁ
 
btf_is_ª°ri˘
(c⁄° 
btf_ty≥
 *
t
)

485  
btf_köd
(
t
Ë=
BTF_KIND_RESTRICT
;

488 
ölöe
 
boﬁ
 
btf_is_mod
(c⁄° 
btf_ty≥
 *
t
)

490 
__u16
 
köd
 = 
btf_köd
(
t
);

492  
köd
 =
BTF_KIND_VOLATILE
 ||

493 
köd
 =
BTF_KIND_CONST
 ||

494 
köd
 =
BTF_KIND_RESTRICT
 ||

495 
köd
 =
BTF_KIND_TYPE_TAG
;

498 
ölöe
 
boﬁ
 
btf_is_func
(c⁄° 
btf_ty≥
 *
t
)

500  
btf_köd
(
t
Ë=
BTF_KIND_FUNC
;

503 
ölöe
 
boﬁ
 
btf_is_func_¥Ÿo
(c⁄° 
btf_ty≥
 *
t
)

505  
btf_köd
(
t
Ë=
BTF_KIND_FUNC_PROTO
;

508 
ölöe
 
boﬁ
 
btf_is_v¨
(c⁄° 
btf_ty≥
 *
t
)

510  
btf_köd
(
t
Ë=
BTF_KIND_VAR
;

513 
ölöe
 
boﬁ
 
btf_is_d©a£c
(c⁄° 
btf_ty≥
 *
t
)

515  
btf_köd
(
t
Ë=
BTF_KIND_DATASEC
;

518 
ölöe
 
boﬁ
 
btf_is_Êﬂt
(c⁄° 
btf_ty≥
 *
t
)

520  
btf_köd
(
t
Ë=
BTF_KIND_FLOAT
;

523 
ölöe
 
boﬁ
 
btf_is_de˛_èg
(c⁄° 
btf_ty≥
 *
t
)

525  
btf_köd
(
t
Ë=
BTF_KIND_DECL_TAG
;

528 
ölöe
 
boﬁ
 
btf_is_ty≥_èg
(c⁄° 
btf_ty≥
 *
t
)

530  
btf_köd
(
t
Ë=
BTF_KIND_TYPE_TAG
;

533 
ölöe
 
__u8
 
btf_öt_ícodög
(c⁄° 
btf_ty≥
 *
t
)

535  
BTF_INT_ENCODING
(*(
__u32
 *)(
t
 + 1));

538 
ölöe
 
__u8
 
btf_öt_off£t
(c⁄° 
btf_ty≥
 *
t
)

540  
BTF_INT_OFFSET
(*(
__u32
 *)(
t
 + 1));

543 
ölöe
 
__u8
 
btf_öt_bôs
(c⁄° 
btf_ty≥
 *
t
)

545  
BTF_INT_BITS
(*(
__u32
 *)(
t
 + 1));

548 
ölöe
 
btf_¨øy
 *btf_¨øy(c⁄° 
btf_ty≥
 *
t
)

550  (
btf_¨øy
 *)(
t
 + 1);

553 
ölöe
 
btf_íum
 *btf_íum(c⁄° 
btf_ty≥
 *
t
)

555  (
btf_íum
 *)(
t
 + 1);

558 
ölöe
 
btf_membî
 *
btf_membîs
(c⁄° 
btf_ty≥
 *
t
)

560  (
btf_membî
 *)(
t
 + 1);

564 
ölöe
 
__u32
 
btf_membî_bô_off£t
(c⁄° 
btf_ty≥
 *
t
,

565 
__u32
 
membî_idx
)

567 c⁄° 
btf_membî
 *
m
 = 
btf_membîs
(
t
Ë+ 
membî_idx
;

568 
boﬁ
 
kÊag
 = 
btf_kÊag
(
t
);

570  
kÊag
 ? 
BTF_MEMBER_BIT_OFFSET
(
m
->
off£t
) : m->offset;

576 
ölöe
 
__u32
 
btf_membî_bôfõld_size
(c⁄° 
btf_ty≥
 *
t
,

577 
__u32
 
membî_idx
)

579 c⁄° 
btf_membî
 *
m
 = 
btf_membîs
(
t
Ë+ 
membî_idx
;

580 
boﬁ
 
kÊag
 = 
btf_kÊag
(
t
);

582  
kÊag
 ? 
BTF_MEMBER_BITFIELD_SIZE
(
m
->
off£t
) : 0;

585 
ölöe
 
btf_∑øm
 *
btf_∑øms
(c⁄° 
btf_ty≥
 *
t
)

587  (
btf_∑øm
 *)(
t
 + 1);

590 
ölöe
 
btf_v¨
 *btf_v¨(c⁄° 
btf_ty≥
 *
t
)

592  (
btf_v¨
 *)(
t
 + 1);

595 
ölöe
 
btf_v¨_£cöfo
 *

596 
btf_v¨_£cöfos
(c⁄° 
btf_ty≥
 *
t
)

598  (
btf_v¨_£cöfo
 *)(
t
 + 1);

601 
btf_de˛_èg
;

602 
ölöe
 
btf_de˛_èg
 *btf_de˛_èg(c⁄° 
btf_ty≥
 *
t
)

604  (
btf_de˛_èg
 *)(
t
 + 1);

607 #ifde‡
__˝lu•lus


	@btf_dump.c

9 
	~<°dboﬁ.h
>

10 
	~<°ddef.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<˘y≥.h
>

14 
	~<ídün.h
>

15 
	~<î∫o.h
>

16 
	~<löux/îr.h
>

17 
	~<löux/btf.h
>

18 
	~<löux/kî√l.h
>

19 
	~"btf.h
"

20 
	~"hashm≠.h
"

21 
	~"libbpf.h
"

22 
	~"libbpf_öã∫Æ.h
"

24 c⁄° 
	gPREFIXES
[] = "\t\t\t\t\t\t\t\t\t\t\t\t\t";

25 c⁄° 
size_t
 
	gPREFIX_CNT
 = (
PREFIXES
) - 1;

27 c⁄° *
	$pfx
(
lvl
)

29  
lvl
 >
PREFIX_CNT
 ? 
PREFIXES
 : &PREFIXES[PREFIX_CNT -Üvl];

30 
	}
}

32 
	ebtf_dump_ty≥_‹dî_°©e
 {

33 
	mNOT_ORDERED
,

34 
	mORDERING
,

35 
	mORDERED
,

38 
	ebtf_dump_ty≥_emô_°©e
 {

39 
	mNOT_EMITTED
,

40 
	mEMITTING
,

41 
	mEMITTED
,

45 
	sbtf_dump_ty≥_aux_°©e
 {

47 
btf_dump_ty≥_‹dî_°©e
 
	m‹dî_°©e
: 2;

49 
btf_dump_ty≥_emô_°©e
 
	memô_°©e
: 2;

51 
__u8
 
	mfwd_emôãd
: 1;

53 
__u8
 
	m«me_ªsﬁved
: 1;

55 
__u8
 
	mª„ªn˚d
: 1;

59 
	#BTF_DATA_INDENT_STR_LEN
 32

	)

64 
	sbtf_dump_d©a
 {

65 c⁄° *
	md©a_íd
;

66 
boﬁ
 
	mcom∑˘
;

67 
boﬁ
 
	mskù_«mes
;

68 
boﬁ
 
	memô_zî€s
;

69 
__u8
 
	mödít_lvl
;

70 
	mödít_°r
[
BTF_DATA_INDENT_STR_LEN
];

72 
	mdïth
;

73 
boﬁ
 
	mis_¨øy_membî
;

74 
boﬁ
 
	mis_¨øy_ãrmö©ed
;

75 
boﬁ
 
	mis_¨øy_ch¨
;

78 
	sbtf_dump
 {

79 c⁄° 
btf
 *
	mbtf
;

80 
btf_dump_¥ötf_‚_t
 
	m¥ötf_‚
;

81 *
	mcb_˘x
;

82 
	m±r_sz
;

83 
boﬁ
 
	m°rù_mods
;

84 
boﬁ
 
	mskù_™⁄_defs
;

85 
	mœ°_id
;

88 
btf_dump_ty≥_aux_°©e
 *
	mty≥_°©es
;

89 
size_t
 
	mty≥_°©es_ˇp
;

91 c⁄° **
	mˇched_«mes
;

92 
size_t
 
	mˇched_«mes_ˇp
;

95 
__u32
 *
	memô_queue
;

96 
	memô_queue_ˇp
;

97 
	memô_queue_˙t
;

103 
__u32
 *
	mde˛_°ack
;

104 
	mde˛_°ack_ˇp
;

105 
	mde˛_°ack_˙t
;

108 
hashm≠
 *
	mty≥_«mes
;

113 
hashm≠
 *
	midít_«mes
;

117 
btf_dump_d©a
 *
	mty≥d_dump
;

120 
size_t
 
	$°r_hash_‚
(c⁄° *
key
, *
˘x
)

122  
	`°r_hash
(
key
);

123 
	}
}

125 
boﬁ
 
	$°r_equÆ_‚
(c⁄° *
a
, c⁄° *
b
, *
˘x
)

127  
	`°rcmp
(
a
, 
b
) == 0;

128 
	}
}

130 c⁄° *
	$btf_«me_of
(c⁄° 
btf_dump
 *
d
, 
__u32
 
«me_off
)

132  
	`btf__«me_by_off£t
(
d
->
btf
, 
«me_off
);

133 
	}
}

135 
	$btf_dump_¥ötf
(c⁄° 
btf_dump
 *
d
, c⁄° *
fmt
, ...)

137 
va_li°
 
¨gs
;

139 
	`va_°¨t
(
¨gs
, 
fmt
);

140 
d
->
	`¥ötf_‚
(d->
cb_˘x
, 
fmt
, 
¨gs
);

141 
	`va_íd
(
¨gs
);

142 
	}
}

144 
btf_dump_m¨k_ª„ªn˚d
(
btf_dump
 *
d
);

145 
btf_dump_ªsize
(
btf_dump
 *
d
);

147 
	$DEFAULT_VERSION
(
btf_dump__√w_v0_6_0
, 
btf_dump__√w
, 
LIBBPF_0
.6.0)

148 
btf_dump
 *
	$btf_dump__√w_v0_6_0
(c⁄° 
btf
 *btf,

149 
btf_dump_¥ötf_‚_t
 
¥ötf_‚
,

150 *
˘x
,

151 c⁄° 
btf_dump_›ts
 *
›ts
)

153 
btf_dump
 *
d
;

154 
îr
;

156 i‡(!
¥ötf_‚
)

157  
	`libbpf_îr_±r
(-
EINVAL
);

159 
d
 = 
	`ˇŒoc
(1, (
btf_dump
));

160 i‡(!
d
)

161  
	`libbpf_îr_±r
(-
ENOMEM
);

163 
d
->
btf
 = btf;

164 
d
->
¥ötf_‚
 =Örintf_fn;

165 
d
->
cb_˘x
 = 
˘x
;

166 
d
->
±r_sz
 = 
	`btf__poöãr_size
(
btf
) ? : (*);

168 
d
->
ty≥_«mes
 = 
	`hashm≠__√w
(
°r_hash_‚
, 
°r_equÆ_‚
, 
NULL
);

169 i‡(
	`IS_ERR
(
d
->
ty≥_«mes
)) {

170 
îr
 = 
	`PTR_ERR
(
d
->
ty≥_«mes
);

171 
d
->
ty≥_«mes
 = 
NULL
;

172 
îr
;

174 
d
->
idít_«mes
 = 
	`hashm≠__√w
(
°r_hash_‚
, 
°r_equÆ_‚
, 
NULL
);

175 i‡(
	`IS_ERR
(
d
->
idít_«mes
)) {

176 
îr
 = 
	`PTR_ERR
(
d
->
idít_«mes
);

177 
d
->
idít_«mes
 = 
NULL
;

178 
îr
;

181 
îr
 = 
	`btf_dump_ªsize
(
d
);

182 i‡(
îr
)

183 
îr
;

185  
d
;

186 
îr
:

187 
	`btf_dump__‰ì
(
d
);

188  
	`libbpf_îr_±r
(
îr
);

189 
	}
}

191 
	$COMPAT_VERSION
(
btf_dump__√w_dïªˇãd
, 
btf_dump__√w
, 
LIBBPF_0
.0.4)

192 
btf_dump
 *
	$btf_dump__√w_dïªˇãd
(c⁄° 
btf
 *btf,

193 c⁄° 
btf_ext
 *btf_ext,

194 c⁄° 
btf_dump_›ts
 *
›ts
,

195 
btf_dump_¥ötf_‚_t
 
¥ötf_‚
)

197 i‡(!
¥ötf_‚
)

198  
	`libbpf_îr_±r
(-
EINVAL
);

199  
	`btf_dump__√w_v0_6_0
(
btf
, 
¥ötf_‚
, 
›ts
 ? o±s->
˘x
 : 
NULL
, opts);

200 
	}
}

202 
	$btf_dump_ªsize
(
btf_dump
 *
d
)

204 
îr
, 
œ°_id
 = 
	`btf__ty≥_˙t
(
d
->
btf
) - 1;

206 i‡(
œ°_id
 <
d
->last_id)

209 i‡(
	`libbpf_ísuª_mem
((**)&
d
->
ty≥_°©es
, &d->
ty≥_°©es_ˇp
,

210 (*
d
->
ty≥_°©es
), 
œ°_id
 + 1))

211  -
ENOMEM
;

212 i‡(
	`libbpf_ísuª_mem
((**)&
d
->
ˇched_«mes
, &d->
ˇched_«mes_ˇp
,

213 (*
d
->
ˇched_«mes
), 
œ°_id
 + 1))

214  -
ENOMEM
;

216 i‡(
d
->
œ°_id
 == 0) {

218 
d
->
ty≥_°©es
[0].
‹dî_°©e
 = 
ORDERED
;

219 
d
->
ty≥_°©es
[0].
emô_°©e
 = 
EMITTED
;

223 
îr
 = 
	`btf_dump_m¨k_ª„ªn˚d
(
d
);

224 i‡(
îr
)

225  
îr
;

227 
d
->
œ°_id
 =Üast_id;

229 
	}
}

231 
	$btf_dump__‰ì
(
btf_dump
 *
d
)

233 
i
;

235 i‡(
	`IS_ERR_OR_NULL
(
d
))

238 
	`‰ì
(
d
->
ty≥_°©es
);

239 i‡(
d
->
ˇched_«mes
) {

241 
i
 = 0; i <
d
->
œ°_id
; i++) {

242 i‡(
d
->
ˇched_«mes
[
i
])

243 
	`‰ì
((*)
d
->
ˇched_«mes
[
i
]);

246 
	`‰ì
(
d
->
ˇched_«mes
);

247 
	`‰ì
(
d
->
emô_queue
);

248 
	`‰ì
(
d
->
de˛_°ack
);

249 
	`hashm≠__‰ì
(
d
->
ty≥_«mes
);

250 
	`hashm≠__‰ì
(
d
->
idít_«mes
);

252 
	`‰ì
(
d
);

253 
	}
}

255 
btf_dump_‹dî_ty≥
(
btf_dump
 *
d
, 
__u32
 
id
, 
boﬁ
 
through_±r
);

256 
btf_dump_emô_ty≥
(
btf_dump
 *
d
, 
__u32
 
id
, __u32 
c⁄t_id
);

274 
	$btf_dump__dump_ty≥
(
btf_dump
 *
d
, 
__u32
 
id
)

276 
îr
, 
i
;

278 i‡(
id
 >
	`btf__ty≥_˙t
(
d
->
btf
))

279  
	`libbpf_îr
(-
EINVAL
);

281 
îr
 = 
	`btf_dump_ªsize
(
d
);

282 i‡(
îr
)

283  
	`libbpf_îr
(
îr
);

285 
d
->
emô_queue_˙t
 = 0;

286 
îr
 = 
	`btf_dump_‹dî_ty≥
(
d
, 
id
, 
Ál£
);

287 i‡(
îr
 < 0)

288  
	`libbpf_îr
(
îr
);

290 
i
 = 0; i < 
d
->
emô_queue_˙t
; i++)

291 
	`btf_dump_emô_ty≥
(
d
, d->
emô_queue
[
i
], 0 );

294 
	}
}

308 
	$btf_dump_m¨k_ª„ªn˚d
(
btf_dump
 *
d
)

310 
i
, 
j
, 
n
 = 
	`btf__ty≥_˙t
(
d
->
btf
);

311 c⁄° 
btf_ty≥
 *
t
;

312 
__u16
 
vÀn
;

314 
i
 = 
d
->
œ°_id
 + 1; i < 
n
; i++) {

315 
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
i
);

316 
vÀn
 = 
	`btf_vÀn
(
t
);

318 
	`btf_köd
(
t
)) {

319 
BTF_KIND_INT
:

320 
BTF_KIND_ENUM
:

321 
BTF_KIND_FWD
:

322 
BTF_KIND_FLOAT
:

325 
BTF_KIND_VOLATILE
:

326 
BTF_KIND_CONST
:

327 
BTF_KIND_RESTRICT
:

328 
BTF_KIND_PTR
:

329 
BTF_KIND_TYPEDEF
:

330 
BTF_KIND_FUNC
:

331 
BTF_KIND_VAR
:

332 
BTF_KIND_DECL_TAG
:

333 
BTF_KIND_TYPE_TAG
:

334 
d
->
ty≥_°©es
[
t
->
ty≥
].
ª„ªn˚d
 = 1;

337 
BTF_KIND_ARRAY
: {

338 c⁄° 
btf_¨øy
 *
a
 = 
	`btf_¨øy
(
t
);

340 
d
->
ty≥_°©es
[
a
->
ödex_ty≥
].
ª„ªn˚d
 = 1;

341 
d
->
ty≥_°©es
[
a
->
ty≥
].
ª„ªn˚d
 = 1;

344 
BTF_KIND_STRUCT
:

345 
BTF_KIND_UNION
: {

346 c⁄° 
btf_membî
 *
m
 = 
	`btf_membîs
(
t
);

348 
j
 = 0; j < 
vÀn
; j++, 
m
++)

349 
d
->
ty≥_°©es
[
m
->
ty≥
].
ª„ªn˚d
 = 1;

352 
BTF_KIND_FUNC_PROTO
: {

353 c⁄° 
btf_∑øm
 *
p
 = 
	`btf_∑øms
(
t
);

355 
j
 = 0; j < 
vÀn
; j++, 
p
++)

356 
d
->
ty≥_°©es
[
p
->
ty≥
].
ª„ªn˚d
 = 1;

359 
BTF_KIND_DATASEC
: {

360 c⁄° 
btf_v¨_£cöfo
 *
v
 = 
	`btf_v¨_£cöfos
(
t
);

362 
j
 = 0; j < 
vÀn
; j++, 
v
++)

363 
d
->
ty≥_°©es
[
v
->
ty≥
].
ª„ªn˚d
 = 1;

367  -
EINVAL
;

371 
	}
}

373 
	$btf_dump_add_emô_queue_id
(
btf_dump
 *
d
, 
__u32
 
id
)

375 
__u32
 *
√w_queue
;

376 
size_t
 
√w_ˇp
;

378 i‡(
d
->
emô_queue_˙t
 >d->
emô_queue_ˇp
) {

379 
√w_ˇp
 = 
	`max
(16, 
d
->
emô_queue_ˇp
 * 3 / 2);

380 
√w_queue
 = 
	`libbpf_ªÆloˇºay
(
d
->
emô_queue
, 
√w_ˇp
, (new_queue[0]));

381 i‡(!
√w_queue
)

382  -
ENOMEM
;

383 
d
->
emô_queue
 = 
√w_queue
;

384 
d
->
emô_queue_ˇp
 = 
√w_ˇp
;

387 
d
->
emô_queue
[d->
emô_queue_˙t
++] = 
id
;

389 
	}
}

465 
	$btf_dump_‹dî_ty≥
(
btf_dump
 *
d
, 
__u32
 
id
, 
boﬁ
 
through_±r
)

478 
btf_dump_ty≥_aux_°©e
 *
t°©e
 = &
d
->
ty≥_°©es
[
id
];

479 c⁄° 
btf_ty≥
 *
t
;

480 
__u16
 
vÀn
;

481 
îr
, 
i
;

484 i‡(
t°©e
->
‹dî_°©e
 =
ORDERED
)

487 
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
id
);

489 i‡(
t°©e
->
‹dî_°©e
 =
ORDERING
) {

491 i‡(
	`btf_is_composôe
(
t
Ë&& 
through_±r
 &&Å->
«me_off
 != 0)

493 
	`¥_w¨n
("unßtisfübÀÅy≥ cy˛e, id:[%u]\n", 
id
);

494  -
ELOOP
;

497 
	`btf_köd
(
t
)) {

498 
BTF_KIND_INT
:

499 
BTF_KIND_FLOAT
:

500 
t°©e
->
‹dî_°©e
 = 
ORDERED
;

503 
BTF_KIND_PTR
:

504 
îr
 = 
	`btf_dump_‹dî_ty≥
(
d
, 
t
->
ty≥
, 
åue
);

505 
t°©e
->
‹dî_°©e
 = 
ORDERED
;

506  
îr
;

508 
BTF_KIND_ARRAY
:

509  
	`btf_dump_‹dî_ty≥
(
d
, 
	`btf_¨øy
(
t
)->
ty≥
, 
Ál£
);

511 
BTF_KIND_STRUCT
:

512 
BTF_KIND_UNION
: {

513 c⁄° 
btf_membî
 *
m
 = 
	`btf_membîs
(
t
);

519 i‡(
through_±r
 && 
t
->
«me_off
 != 0)

522 
t°©e
->
‹dî_°©e
 = 
ORDERING
;

524 
vÀn
 = 
	`btf_vÀn
(
t
);

525 
i
 = 0; i < 
vÀn
; i++, 
m
++) {

526 
îr
 = 
	`btf_dump_‹dî_ty≥
(
d
, 
m
->
ty≥
, 
Ál£
);

527 i‡(
îr
 < 0)

528  
îr
;

531 i‡(
t
->
«me_off
 != 0) {

532 
îr
 = 
	`btf_dump_add_emô_queue_id
(
d
, 
id
);

533 i‡(
îr
 < 0)

534  
îr
;

537 
t°©e
->
‹dî_°©e
 = 
ORDERED
;

540 
BTF_KIND_ENUM
:

541 
BTF_KIND_FWD
:

547 i‡(
t
->
«me_off
 !0 || !
t°©e
->
ª„ªn˚d
) {

548 
îr
 = 
	`btf_dump_add_emô_queue_id
(
d
, 
id
);

549 i‡(
îr
)

550  
îr
;

552 
t°©e
->
‹dî_°©e
 = 
ORDERED
;

555 
BTF_KIND_TYPEDEF
: {

556 
is_°r⁄g
;

558 
is_°r⁄g
 = 
	`btf_dump_‹dî_ty≥
(
d
, 
t
->
ty≥
, 
through_±r
);

559 i‡(
is_°r⁄g
 < 0)

560  
is_°r⁄g
;

563 i‡(
through_±r
 && !
is_°r⁄g
)

567 
îr
 = 
	`btf_dump_add_emô_queue_id
(
d
, 
id
);

568 i‡(
îr
)

569  
îr
;

571 
d
->
ty≥_°©es
[
id
].
‹dî_°©e
 = 
ORDERED
;

574 
BTF_KIND_VOLATILE
:

575 
BTF_KIND_CONST
:

576 
BTF_KIND_RESTRICT
:

577 
BTF_KIND_TYPE_TAG
:

578  
	`btf_dump_‹dî_ty≥
(
d
, 
t
->
ty≥
, 
through_±r
);

580 
BTF_KIND_FUNC_PROTO
: {

581 c⁄° 
btf_∑øm
 *
p
 = 
	`btf_∑øms
(
t
);

582 
boﬁ
 
is_°r⁄g
;

584 
îr
 = 
	`btf_dump_‹dî_ty≥
(
d
, 
t
->
ty≥
, 
through_±r
);

585 i‡(
îr
 < 0)

586  
îr
;

587 
is_°r⁄g
 = 
îr
 > 0;

589 
vÀn
 = 
	`btf_vÀn
(
t
);

590 
i
 = 0; i < 
vÀn
; i++, 
p
++) {

591 
îr
 = 
	`btf_dump_‹dî_ty≥
(
d
, 
p
->
ty≥
, 
through_±r
);

592 i‡(
îr
 < 0)

593  
îr
;

594 i‡(
îr
 > 0)

595 
is_°r⁄g
 = 
åue
;

597  
is_°r⁄g
;

599 
BTF_KIND_FUNC
:

600 
BTF_KIND_VAR
:

601 
BTF_KIND_DATASEC
:

602 
BTF_KIND_DECL_TAG
:

603 
d
->
ty≥_°©es
[
id
].
‹dî_°©e
 = 
ORDERED
;

607  -
EINVAL
;

609 
	}
}

611 
btf_dump_emô_missög_Æü£s
(
btf_dump
 *
d
, 
__u32
 
id
,

612 c⁄° 
btf_ty≥
 *
t
);

614 
btf_dump_emô_°ru˘_fwd
(
btf_dump
 *
d
, 
__u32
 
id
,

615 c⁄° 
btf_ty≥
 *
t
);

616 
btf_dump_emô_°ru˘_def
(
btf_dump
 *
d
, 
__u32
 
id
,

617 c⁄° 
btf_ty≥
 *
t
, 
lvl
);

619 
btf_dump_emô_íum_fwd
(
btf_dump
 *
d
, 
__u32
 
id
,

620 c⁄° 
btf_ty≥
 *
t
);

621 
btf_dump_emô_íum_def
(
btf_dump
 *
d
, 
__u32
 
id
,

622 c⁄° 
btf_ty≥
 *
t
, 
lvl
);

624 
btf_dump_emô_fwd_def
(
btf_dump
 *
d
, 
__u32
 
id
,

625 c⁄° 
btf_ty≥
 *
t
);

627 
btf_dump_emô_ty≥def_def
(
btf_dump
 *
d
, 
__u32
 
id
,

628 c⁄° 
btf_ty≥
 *
t
, 
lvl
);

631 
	sid_°ack
 {

632 c⁄° 
__u32
 *
	mids
;

633 
	m˙t
;

636 
btf_dump_emô_ty≥_de˛
(
btf_dump
 *
d
, 
__u32
 
id
,

637 c⁄° *
‚ame
, 
lvl
);

638 
btf_dump_emô_ty≥_chaö
(
btf_dump
 *
d
,

639 
id_°ack
 *
de˛_°ack
,

640 c⁄° *
‚ame
, 
lvl
);

642 c⁄° *
btf_dump_ty≥_«me
(
btf_dump
 *
d
, 
__u32
 
id
);

643 c⁄° *
btf_dump_idít_«me
(
btf_dump
 *
d
, 
__u32
 
id
);

644 
size_t
 
btf_dump_«me_dups
(
btf_dump
 *
d
, 
hashm≠
 *
«me_m≠
,

645 c⁄° *
‹ig_«me
);

647 
boﬁ
 
	$btf_dump_is_bœckli°ed
(
btf_dump
 *
d
, 
__u32
 
id
)

649 c⁄° 
btf_ty≥
 *
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
id
);

657 i‡(
t
->
«me_off
 == 0)

658  
Ál£
;

659  
	`°rcmp
(
	`btf_«me_of
(
d
, 
t
->
«me_off
), "__builtin_va_list") == 0;

660 
	}
}

680 
	$btf_dump_emô_ty≥
(
btf_dump
 *
d
, 
__u32
 
id
, __u32 
c⁄t_id
)

682 
btf_dump_ty≥_aux_°©e
 *
t°©e
 = &
d
->
ty≥_°©es
[
id
];

683 
boﬁ
 
t›_Àvñ_def
 = 
c⁄t_id
 == 0;

684 c⁄° 
btf_ty≥
 *
t
;

685 
__u16
 
köd
;

687 i‡(
t°©e
->
emô_°©e
 =
EMITTED
)

690 
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
id
);

691 
köd
 = 
	`btf_köd
(
t
);

693 i‡(
t°©e
->
emô_°©e
 =
EMITTING
) {

694 i‡(
t°©e
->
fwd_emôãd
)

697 
köd
) {

698 
BTF_KIND_STRUCT
:

699 
BTF_KIND_UNION
:

704 i‡(
id
 =
c⁄t_id
)

706 i‡(
t
->
«me_off
 == 0) {

707 
	`¥_w¨n
("anonymous struct/unionÜoop, id:[%u]\n",

708 
id
);

711 
	`btf_dump_emô_°ru˘_fwd
(
d
, 
id
, 
t
);

712 
	`btf_dump_¥ötf
(
d
, ";\n\n");

713 
t°©e
->
fwd_emôãd
 = 1;

715 
BTF_KIND_TYPEDEF
:

721 i‡(!
	`btf_dump_is_bœckli°ed
(
d
, 
id
)) {

722 
	`btf_dump_emô_ty≥def_def
(
d
, 
id
, 
t
, 0);

723 
	`btf_dump_¥ötf
(
d
, ";\n\n");

725 
t°©e
->
fwd_emôãd
 = 1;

734 
köd
) {

735 
BTF_KIND_INT
:

737 
	`btf_dump_emô_missög_Æü£s
(
d
, 
id
, 
t
);

739 
t°©e
->
emô_°©e
 = 
EMITTED
;

741 
BTF_KIND_ENUM
:

742 i‡(
t›_Àvñ_def
) {

743 
	`btf_dump_emô_íum_def
(
d
, 
id
, 
t
, 0);

744 
	`btf_dump_¥ötf
(
d
, ";\n\n");

746 
t°©e
->
emô_°©e
 = 
EMITTED
;

748 
BTF_KIND_PTR
:

749 
BTF_KIND_VOLATILE
:

750 
BTF_KIND_CONST
:

751 
BTF_KIND_RESTRICT
:

752 
BTF_KIND_TYPE_TAG
:

753 
	`btf_dump_emô_ty≥
(
d
, 
t
->
ty≥
, 
c⁄t_id
);

755 
BTF_KIND_ARRAY
:

756 
	`btf_dump_emô_ty≥
(
d
, 
	`btf_¨øy
(
t
)->
ty≥
, 
c⁄t_id
);

758 
BTF_KIND_FWD
:

759 
	`btf_dump_emô_fwd_def
(
d
, 
id
, 
t
);

760 
	`btf_dump_¥ötf
(
d
, ";\n\n");

761 
t°©e
->
emô_°©e
 = 
EMITTED
;

763 
BTF_KIND_TYPEDEF
:

764 
t°©e
->
emô_°©e
 = 
EMITTING
;

765 
	`btf_dump_emô_ty≥
(
d
, 
t
->
ty≥
, 
id
);

773 i‡(!
t°©e
->
fwd_emôãd
 && !
	`btf_dump_is_bœckli°ed
(
d
, 
id
)) {

774 
	`btf_dump_emô_ty≥def_def
(
d
, 
id
, 
t
, 0);

775 
	`btf_dump_¥ötf
(
d
, ";\n\n");

777 
t°©e
->
emô_°©e
 = 
EMITTED
;

779 
BTF_KIND_STRUCT
:

780 
BTF_KIND_UNION
:

781 
t°©e
->
emô_°©e
 = 
EMITTING
;

789 i‡(
t›_Àvñ_def
 || 
t
->
«me_off
 == 0) {

790 c⁄° 
btf_membî
 *
m
 = 
	`btf_membîs
(
t
);

791 
__u16
 
vÀn
 = 
	`btf_vÀn
(
t
);

792 
i
, 
√w_c⁄t_id
;

794 
√w_c⁄t_id
 = 
t
->
«me_off
 =0 ? 
c⁄t_id
 : 
id
;

795 
i
 = 0; i < 
vÀn
; i++, 
m
++)

796 
	`btf_dump_emô_ty≥
(
d
, 
m
->
ty≥
, 
√w_c⁄t_id
);

797 } i‡(!
t°©e
->
fwd_emôãd
 && 
id
 !
c⁄t_id
) {

798 
	`btf_dump_emô_°ru˘_fwd
(
d
, 
id
, 
t
);

799 
	`btf_dump_¥ötf
(
d
, ";\n\n");

800 
t°©e
->
fwd_emôãd
 = 1;

803 i‡(
t›_Àvñ_def
) {

804 
	`btf_dump_emô_°ru˘_def
(
d
, 
id
, 
t
, 0);

805 
	`btf_dump_¥ötf
(
d
, ";\n\n");

806 
t°©e
->
emô_°©e
 = 
EMITTED
;

808 
t°©e
->
emô_°©e
 = 
NOT_EMITTED
;

811 
BTF_KIND_FUNC_PROTO
: {

812 c⁄° 
btf_∑øm
 *
p
 = 
	`btf_∑øms
(
t
);

813 
__u16
 
n
 = 
	`btf_vÀn
(
t
);

814 
i
;

816 
	`btf_dump_emô_ty≥
(
d
, 
t
->
ty≥
, 
c⁄t_id
);

817 
i
 = 0; i < 
n
; i++, 
p
++)

818 
	`btf_dump_emô_ty≥
(
d
, 
p
->
ty≥
, 
c⁄t_id
);

825 
	}
}

827 
boﬁ
 
	$btf_is_°ru˘_∑cked
(c⁄° 
btf
 *btf, 
__u32
 
id
,

828 c⁄° 
btf_ty≥
 *
t
)

830 c⁄° 
btf_membî
 *
m
;

831 
Æign
, 
i
, 
bô_sz
;

832 
__u16
 
vÀn
;

834 
Æign
 = 
	`btf__Æign_of
(
btf
, 
id
);

836 i‡(
Æign
 && 
t
->
size
 %álign)

837  
åue
;

839 
m
 = 
	`btf_membîs
(
t
);

840 
vÀn
 = 
	`btf_vÀn
(
t
);

842 
i
 = 0; i < 
vÀn
; i++, 
m
++) {

843 
Æign
 = 
	`btf__Æign_of
(
btf
, 
m
->
ty≥
);

844 
bô_sz
 = 
	`btf_membî_bôfõld_size
(
t
, 
i
);

845 i‡(
Æign
 && 
bô_sz
 =0 && 
m
->
off£t
 % (8 *álign) != 0)

846  
åue
;

853  
Ál£
;

854 
	}
}

856 
	$chù_away_bôs
(
tŸÆ
, 
©_mo°
)

858  
tŸÆ
 % 
©_mo°
 ? :át_most;

859 
	}
}

861 
	$btf_dump_emô_bô_∑ddög
(c⁄° 
btf_dump
 *
d
,

862 
cur_off
, 
m_off
, 
m_bô_sz
,

863 
Æign
, 
lvl
)

865 
off_diff
 = 
m_off
 - 
cur_off
;

866 
±r_bôs
 = 
d
->
±r_sz
 * 8;

868 i‡(
off_diff
 <= 0)

871 i‡(
m_bô_sz
 =0 && 
off_diff
 < 
Æign
 * 8)

875 
off_diff
 > 0) {

876 c⁄° *
∑d_ty≥
;

877 
∑d_bôs
;

879 i‡(
±r_bôs
 > 32 && 
off_diff
 > 32) {

880 
∑d_ty≥
 = "long";

881 
∑d_bôs
 = 
	`chù_away_bôs
(
off_diff
, 
±r_bôs
);

882 } i‡(
off_diff
 > 16) {

883 
∑d_ty≥
 = "int";

884 
∑d_bôs
 = 
	`chù_away_bôs
(
off_diff
, 32);

885 } i‡(
off_diff
 > 8) {

886 
∑d_ty≥
 = "short";

887 
∑d_bôs
 = 
	`chù_away_bôs
(
off_diff
, 16);

889 
∑d_ty≥
 = "char";

890 
∑d_bôs
 = 
	`chù_away_bôs
(
off_diff
, 8);

892 
	`btf_dump_¥ötf
(
d
, "\n%s%s: %d;", 
	`pfx
(
lvl
), 
∑d_ty≥
, 
∑d_bôs
);

893 
off_diff
 -
∑d_bôs
;

895 
	}
}

897 
	$btf_dump_emô_°ru˘_fwd
(
btf_dump
 *
d
, 
__u32
 
id
,

898 c⁄° 
btf_ty≥
 *
t
)

900 
	`btf_dump_¥ötf
(
d
, "%s%s%s",

901 
	`btf_is_°ru˘
(
t
) ? "struct" : "union",

902 
t
->
«me_off
 ? " " : "",

903 
	`btf_dump_ty≥_«me
(
d
, 
id
));

904 
	}
}

906 
	$btf_dump_emô_°ru˘_def
(
btf_dump
 *
d
,

907 
__u32
 
id
,

908 c⁄° 
btf_ty≥
 *
t
,

909 
lvl
)

911 c⁄° 
btf_membî
 *
m
 = 
	`btf_membîs
(
t
);

912 
boﬁ
 
is_°ru˘
 = 
	`btf_is_°ru˘
(
t
);

913 
Æign
, 
i
, 
∑cked
, 
off
 = 0;

914 
__u16
 
vÀn
 = 
	`btf_vÀn
(
t
);

916 
∑cked
 = 
is_°ru˘
 ? 
	`btf_is_°ru˘_∑cked
(
d
->
btf
, 
id
, 
t
) : 0;

918 
	`btf_dump_¥ötf
(
d
, "%s%s%s {",

919 
is_°ru˘
 ? "struct" : "union",

920 
t
->
«me_off
 ? " " : "",

921 
	`btf_dump_ty≥_«me
(
d
, 
id
));

923 
i
 = 0; i < 
vÀn
; i++, 
m
++) {

924 c⁄° *
‚ame
;

925 
m_off
, 
m_sz
;

927 
‚ame
 = 
	`btf_«me_of
(
d
, 
m
->
«me_off
);

928 
m_sz
 = 
	`btf_membî_bôfõld_size
(
t
, 
i
);

929 
m_off
 = 
	`btf_membî_bô_off£t
(
t
, 
i
);

930 
Æign
 = 
∑cked
 ? 1 : 
	`btf__Æign_of
(
d
->
btf
, 
m
->
ty≥
);

932 
	`btf_dump_emô_bô_∑ddög
(
d
, 
off
, 
m_off
, 
m_sz
, 
Æign
, 
lvl
 + 1);

933 
	`btf_dump_¥ötf
(
d
, "\n%s", 
	`pfx
(
lvl
 + 1));

934 
	`btf_dump_emô_ty≥_de˛
(
d
, 
m
->
ty≥
, 
‚ame
, 
lvl
 + 1);

936 i‡(
m_sz
) {

937 
	`btf_dump_¥ötf
(
d
, ": %d", 
m_sz
);

938 
off
 = 
m_off
 + 
m_sz
;

940 
m_sz
 = 
	`max
((
__s64
)0, 
	`btf__ªsﬁve_size
(
d
->
btf
, 
m
->
ty≥
));

941 
off
 = 
m_off
 + 
m_sz
 * 8;

943 
	`btf_dump_¥ötf
(
d
, ";");

947 i‡(
is_°ru˘
) {

948 
Æign
 = 
∑cked
 ? 1 : 
	`btf__Æign_of
(
d
->
btf
, 
id
);

949 
	`btf_dump_emô_bô_∑ddög
(
d
, 
off
, 
t
->
size
 * 8, 0, 
Æign
,

950 
lvl
 + 1);

953 i‡(
vÀn
)

954 
	`btf_dump_¥ötf
(
d
, "\n");

955 
	`btf_dump_¥ötf
(
d
, "%s}", 
	`pfx
(
lvl
));

956 i‡(
∑cked
)

957 
	`btf_dump_¥ötf
(
d
, " __attribute__((packed))");

958 
	}
}

960 c⁄° *
	gmissög_ba£_ty≥s
[][2] = {

971 
	$btf_dump_emô_missög_Æü£s
(
btf_dump
 *
d
, 
__u32
 
id
,

972 c⁄° 
btf_ty≥
 *
t
)

974 c⁄° *
«me
 = 
	`btf_dump_ty≥_«me
(
d
, 
id
);

975 
i
;

977 
i
 = 0; i < 
	`ARRAY_SIZE
(
missög_ba£_ty≥s
); i++) {

978 i‡(
	`°rcmp
(
«me
, 
missög_ba£_ty≥s
[
i
][0]) == 0) {

979 
	`btf_dump_¥ötf
(
d
, "typedef %s %s;\n\n",

980 
missög_ba£_ty≥s
[
i
][1], 
«me
);

984 
	}
}

986 
	$btf_dump_emô_íum_fwd
(
btf_dump
 *
d
, 
__u32
 
id
,

987 c⁄° 
btf_ty≥
 *
t
)

989 
	`btf_dump_¥ötf
(
d
, "íum %s", 
	`btf_dump_ty≥_«me
(d, 
id
));

990 
	}
}

992 
	$btf_dump_emô_íum_def
(
btf_dump
 *
d
, 
__u32
 
id
,

993 c⁄° 
btf_ty≥
 *
t
,

994 
lvl
)

996 c⁄° 
btf_íum
 *
v
 = 
	`btf_íum
(
t
);

997 
__u16
 
vÀn
 = 
	`btf_vÀn
(
t
);

998 c⁄° *
«me
;

999 
size_t
 
dup_˙t
;

1000 
i
;

1002 
	`btf_dump_¥ötf
(
d
, "enum%s%s",

1003 
t
->
«me_off
 ? " " : "",

1004 
	`btf_dump_ty≥_«me
(
d
, 
id
));

1006 i‡(
vÀn
) {

1007 
	`btf_dump_¥ötf
(
d
, " {");

1008 
i
 = 0; i < 
vÀn
; i++, 
v
++) {

1009 
«me
 = 
	`btf_«me_of
(
d
, 
v
->
«me_off
);

1011 
dup_˙t
 = 
	`btf_dump_«me_dups
(
d
, d->
idít_«mes
, 
«me
);

1012 i‡(
dup_˙t
 > 1) {

1013 
	`btf_dump_¥ötf
(
d
, "\n%s%s___%zu = %u,",

1014 
	`pfx
(
lvl
 + 1), 
«me
, 
dup_˙t
,

1015 (
__u32
)
v
->
vÆ
);

1017 
	`btf_dump_¥ötf
(
d
, "\n%s%s = %u,",

1018 
	`pfx
(
lvl
 + 1), 
«me
,

1019 (
__u32
)
v
->
vÆ
);

1022 
	`btf_dump_¥ötf
(
d
, "\n%s}", 
	`pfx
(
lvl
));

1024 
	}
}

1026 
	$btf_dump_emô_fwd_def
(
btf_dump
 *
d
, 
__u32
 
id
,

1027 c⁄° 
btf_ty≥
 *
t
)

1029 c⁄° *
«me
 = 
	`btf_dump_ty≥_«me
(
d
, 
id
);

1031 i‡(
	`btf_kÊag
(
t
))

1032 
	`btf_dump_¥ötf
(
d
, "uni⁄ %s", 
«me
);

1034 
	`btf_dump_¥ötf
(
d
, "°ru˘ %s", 
«me
);

1035 
	}
}

1037 
	$btf_dump_emô_ty≥def_def
(
btf_dump
 *
d
, 
__u32
 
id
,

1038 c⁄° 
btf_ty≥
 *
t
, 
lvl
)

1040 c⁄° *
«me
 = 
	`btf_dump_idít_«me
(
d
, 
id
);

1048 i‡(
t
->
ty≥
 =0 && 
	`°rcmp
(
«me
, "__gnuc_va_list") == 0) {

1049 
	`btf_dump_¥ötf
(
d
, "typedef __builtin_va_list __gnuc_va_list");

1053 
	`btf_dump_¥ötf
(
d
, "typedef ");

1054 
	`btf_dump_emô_ty≥_de˛
(
d
, 
t
->
ty≥
, 
«me
, 
lvl
);

1055 
	}
}

1057 
	$btf_dump_push_de˛_°ack_id
(
btf_dump
 *
d
, 
__u32
 
id
)

1059 
__u32
 *
√w_°ack
;

1060 
size_t
 
√w_ˇp
;

1062 i‡(
d
->
de˛_°ack_˙t
 >d->
de˛_°ack_ˇp
) {

1063 
√w_ˇp
 = 
	`max
(16, 
d
->
de˛_°ack_ˇp
 * 3 / 2);

1064 
√w_°ack
 = 
	`libbpf_ªÆloˇºay
(
d
->
de˛_°ack
, 
√w_ˇp
, (new_stack[0]));

1065 i‡(!
√w_°ack
)

1066  -
ENOMEM
;

1067 
d
->
de˛_°ack
 = 
√w_°ack
;

1068 
d
->
de˛_°ack_ˇp
 = 
√w_ˇp
;

1071 
d
->
de˛_°ack
[d->
de˛_°ack_˙t
++] = 
id
;

1074 
	}
}

1117 
	$btf_dump__emô_ty≥_de˛
(
btf_dump
 *
d
, 
__u32
 
id
,

1118 c⁄° 
btf_dump_emô_ty≥_de˛_›ts
 *
›ts
)

1120 c⁄° *
‚ame
;

1121 
lvl
, 
îr
;

1123 i‡(!
	`OPTS_VALID
(
›ts
, 
btf_dump_emô_ty≥_de˛_›ts
))

1124  
	`libbpf_îr
(-
EINVAL
);

1126 
îr
 = 
	`btf_dump_ªsize
(
d
);

1127 i‡(
îr
)

1128  
	`libbpf_îr
(
îr
);

1130 
‚ame
 = 
	`OPTS_GET
(
›ts
, 
fõld_«me
, "");

1131 
lvl
 = 
	`OPTS_GET
(
›ts
, 
ödít_Àvñ
, 0);

1132 
d
->
°rù_mods
 = 
	`OPTS_GET
(
›ts
, såù_mods, 
Ál£
);

1133 
	`btf_dump_emô_ty≥_de˛
(
d
, 
id
, 
‚ame
, 
lvl
);

1134 
d
->
°rù_mods
 = 
Ál£
;

1136 
	}
}

1138 
	$btf_dump_emô_ty≥_de˛
(
btf_dump
 *
d
, 
__u32
 
id
,

1139 c⁄° *
‚ame
, 
lvl
)

1141 
id_°ack
 
de˛_°ack
;

1142 c⁄° 
btf_ty≥
 *
t
;

1143 
îr
, 
°ack_°¨t
;

1145 
°ack_°¨t
 = 
d
->
de˛_°ack_˙t
;

1147 
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
id
);

1148 i‡(
d
->
°rù_mods
 && 
	`btf_is_mod
(
t
))

1149 
skù_mod
;

1151 
îr
 = 
	`btf_dump_push_de˛_°ack_id
(
d
, 
id
);

1152 i‡(
îr
 < 0) {

1158 
	`¥_w¨n
("nŸÉnough mem‹y f‹ de˛ sèck:%d", 
îr
);

1159 
d
->
de˛_°ack_˙t
 = 
°ack_°¨t
;

1162 
skù_mod
:

1164 i‡(
id
 == 0)

1167 
	`btf_köd
(
t
)) {

1168 
BTF_KIND_PTR
:

1169 
BTF_KIND_VOLATILE
:

1170 
BTF_KIND_CONST
:

1171 
BTF_KIND_RESTRICT
:

1172 
BTF_KIND_FUNC_PROTO
:

1173 
BTF_KIND_TYPE_TAG
:

1174 
id
 = 
t
->
ty≥
;

1176 
BTF_KIND_ARRAY
:

1177 
id
 = 
	`btf_¨øy
(
t
)->
ty≥
;

1179 
BTF_KIND_INT
:

1180 
BTF_KIND_ENUM
:

1181 
BTF_KIND_FWD
:

1182 
BTF_KIND_STRUCT
:

1183 
BTF_KIND_UNION
:

1184 
BTF_KIND_TYPEDEF
:

1185 
BTF_KIND_FLOAT
:

1186 
d⁄e
;

1188 
	`¥_w¨n
("unexpectedÅype in decl chain, kind:%u, id:[%u]\n",

1189 
	`btf_köd
(
t
), 
id
);

1190 
d⁄e
;

1193 
d⁄e
:

1204 
de˛_°ack
.
ids
 = 
d
->de˛_°ack + 
°ack_°¨t
;

1205 
de˛_°ack
.
˙t
 = 
d
->
de˛_°ack_˙t
 - 
°ack_°¨t
;

1206 
	`btf_dump_emô_ty≥_chaö
(
d
, &
de˛_°ack
, 
‚ame
, 
lvl
);

1215 
d
->
de˛_°ack_˙t
 = 
°ack_°¨t
;

1216 
	}
}

1218 
	$btf_dump_emô_mods
(
btf_dump
 *
d
, 
id_°ack
 *
de˛_°ack
)

1220 c⁄° 
btf_ty≥
 *
t
;

1221 
__u32
 
id
;

1223 
de˛_°ack
->
˙t
) {

1224 
id
 = 
de˛_°ack
->
ids
[de˛_°ack->
˙t
 - 1];

1225 
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
id
);

1227 
	`btf_köd
(
t
)) {

1228 
BTF_KIND_VOLATILE
:

1229 
	`btf_dump_¥ötf
(
d
, "volatile ");

1231 
BTF_KIND_CONST
:

1232 
	`btf_dump_¥ötf
(
d
, "const ");

1234 
BTF_KIND_RESTRICT
:

1235 
	`btf_dump_¥ötf
(
d
, "restrict ");

1240 
de˛_°ack
->
˙t
--;

1242 
	}
}

1244 
	$btf_dump_dr›_mods
(
btf_dump
 *
d
, 
id_°ack
 *
de˛_°ack
)

1246 c⁄° 
btf_ty≥
 *
t
;

1247 
__u32
 
id
;

1249 
de˛_°ack
->
˙t
) {

1250 
id
 = 
de˛_°ack
->
ids
[de˛_°ack->
˙t
 - 1];

1251 
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
id
);

1252 i‡(!
	`btf_is_mod
(
t
))

1254 
de˛_°ack
->
˙t
--;

1256 
	}
}

1258 
	$btf_dump_emô_«me
(c⁄° 
btf_dump
 *
d
,

1259 c⁄° *
«me
, 
boﬁ
 
œ°_was_±r
)

1261 
boﬁ
 
£∑øã
 = 
«me
[0] && !
œ°_was_±r
;

1263 
	`btf_dump_¥ötf
(
d
, "%s%s", 
£∑øã
 ? " " : "", 
«me
);

1264 
	}
}

1266 
	$btf_dump_emô_ty≥_chaö
(
btf_dump
 *
d
,

1267 
id_°ack
 *
de˛s
,

1268 c⁄° *
‚ame
, 
lvl
)

1279 
boﬁ
 
œ°_was_±r
 = 
åue
;

1280 c⁄° 
btf_ty≥
 *
t
;

1281 c⁄° *
«me
;

1282 
__u16
 
köd
;

1283 
__u32
 
id
;

1285 
de˛s
->
˙t
) {

1286 
id
 = 
de˛s
->
ids
[--de˛s->
˙t
];

1287 i‡(
id
 == 0) {

1289 
	`btf_dump_emô_mods
(
d
, 
de˛s
);

1290 
	`btf_dump_¥ötf
(
d
, "void");

1291 
œ°_was_±r
 = 
Ál£
;

1295 
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
id
);

1296 
köd
 = 
	`btf_köd
(
t
);

1298 
köd
) {

1299 
BTF_KIND_INT
:

1300 
BTF_KIND_FLOAT
:

1301 
	`btf_dump_emô_mods
(
d
, 
de˛s
);

1302 
«me
 = 
	`btf_«me_of
(
d
, 
t
->
«me_off
);

1303 
	`btf_dump_¥ötf
(
d
, "%s", 
«me
);

1305 
BTF_KIND_STRUCT
:

1306 
BTF_KIND_UNION
:

1307 
	`btf_dump_emô_mods
(
d
, 
de˛s
);

1309 i‡(
t
->
«me_off
 =0 && !
d
->
skù_™⁄_defs
)

1310 
	`btf_dump_emô_°ru˘_def
(
d
, 
id
, 
t
, 
lvl
);

1312 
	`btf_dump_emô_°ru˘_fwd
(
d
, 
id
, 
t
);

1314 
BTF_KIND_ENUM
:

1315 
	`btf_dump_emô_mods
(
d
, 
de˛s
);

1317 i‡(
t
->
«me_off
 =0 && !
d
->
skù_™⁄_defs
)

1318 
	`btf_dump_emô_íum_def
(
d
, 
id
, 
t
, 
lvl
);

1320 
	`btf_dump_emô_íum_fwd
(
d
, 
id
, 
t
);

1322 
BTF_KIND_FWD
:

1323 
	`btf_dump_emô_mods
(
d
, 
de˛s
);

1324 
	`btf_dump_emô_fwd_def
(
d
, 
id
, 
t
);

1326 
BTF_KIND_TYPEDEF
:

1327 
	`btf_dump_emô_mods
(
d
, 
de˛s
);

1328 
	`btf_dump_¥ötf
(
d
, "%s", 
	`btf_dump_idít_«me
(d, 
id
));

1330 
BTF_KIND_PTR
:

1331 
	`btf_dump_¥ötf
(
d
, "%s", 
œ°_was_±r
 ? "*" : " *");

1333 
BTF_KIND_VOLATILE
:

1334 
	`btf_dump_¥ötf
(
d
, " volatile");

1336 
BTF_KIND_CONST
:

1337 
	`btf_dump_¥ötf
(
d
, " const");

1339 
BTF_KIND_RESTRICT
:

1340 
	`btf_dump_¥ötf
(
d
, "Ñestrict");

1342 
BTF_KIND_TYPE_TAG
:

1343 
	`btf_dump_emô_mods
(
d
, 
de˛s
);

1344 
«me
 = 
	`btf_«me_of
(
d
, 
t
->
«me_off
);

1345 
	`btf_dump_¥ötf
(
d
, " __©åibuã__((btf_ty≥_èg(\"%s\")))", 
«me
);

1347 
BTF_KIND_ARRAY
: {

1348 c⁄° 
btf_¨øy
 *
a
 = 
	`btf_¨øy
(
t
);

1349 c⁄° 
btf_ty≥
 *
√xt_t
;

1350 
__u32
 
√xt_id
;

1351 
boﬁ
 
mu…idim
;

1362 
	`btf_dump_dr›_mods
(
d
, 
de˛s
);

1364 i‡(
de˛s
->
˙t
 == 0) {

1365 
	`btf_dump_emô_«me
(
d
, 
‚ame
, 
œ°_was_±r
);

1366 
	`btf_dump_¥ötf
(
d
, "[%u]", 
a
->
√Àms
);

1370 
√xt_id
 = 
de˛s
->
ids
[de˛s->
˙t
 - 1];

1371 
√xt_t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
√xt_id
);

1372 
mu…idim
 = 
	`btf_is_¨øy
(
√xt_t
);

1374 i‡(
‚ame
[0] && !
œ°_was_±r
)

1375 
	`btf_dump_¥ötf
(
d
, " ");

1377 i‡(!
mu…idim
)

1378 
	`btf_dump_¥ötf
(
d
, "(");

1379 
	`btf_dump_emô_ty≥_chaö
(
d
, 
de˛s
, 
‚ame
, 
lvl
);

1380 i‡(!
mu…idim
)

1381 
	`btf_dump_¥ötf
(
d
, ")");

1382 
	`btf_dump_¥ötf
(
d
, "[%u]", 
a
->
√Àms
);

1385 
BTF_KIND_FUNC_PROTO
: {

1386 c⁄° 
btf_∑øm
 *
p
 = 
	`btf_∑øms
(
t
);

1387 
__u16
 
vÀn
 = 
	`btf_vÀn
(
t
);

1388 
i
;

1398 
	`btf_dump_dr›_mods
(
d
, 
de˛s
);

1399 i‡(
de˛s
->
˙t
) {

1400 
	`btf_dump_¥ötf
(
d
, " (");

1401 
	`btf_dump_emô_ty≥_chaö
(
d
, 
de˛s
, 
‚ame
, 
lvl
);

1402 
	`btf_dump_¥ötf
(
d
, ")");

1404 
	`btf_dump_emô_«me
(
d
, 
‚ame
, 
œ°_was_±r
);

1406 
	`btf_dump_¥ötf
(
d
, "(");

1413 i‡(
vÀn
 =1 && 
p
->
ty≥
 == 0) {

1414 
	`btf_dump_¥ötf
(
d
, ")");

1418 
i
 = 0; i < 
vÀn
; i++, 
p
++) {

1419 i‡(
i
 > 0)

1420 
	`btf_dump_¥ötf
(
d
, ", ");

1423 i‡(
i
 =
vÀn
 - 1 && 
p
->
ty≥
 == 0) {

1424 
	`btf_dump_¥ötf
(
d
, "...");

1428 
«me
 = 
	`btf_«me_of
(
d
, 
p
->
«me_off
);

1429 
	`btf_dump_emô_ty≥_de˛
(
d
, 
p
->
ty≥
, 
«me
, 
lvl
);

1432 
	`btf_dump_¥ötf
(
d
, ")");

1436 
	`¥_w¨n
("unexpectedÅype in decl chain, kind:%u, id:[%u]\n",

1437 
köd
, 
id
);

1441 
œ°_was_±r
 = 
köd
 =
BTF_KIND_PTR
;

1444 
	`btf_dump_emô_«me
(
d
, 
‚ame
, 
œ°_was_±r
);

1445 
	}
}

1448 
	$btf_dump_emô_ty≥_ˇ°
(
btf_dump
 *
d
, 
__u32
 
id
,

1449 
boﬁ
 
t›_Àvñ
)

1451 c⁄° 
btf_ty≥
 *
t
;

1457 i‡(
d
->
ty≥d_dump
->
is_¨øy_membî
)

1463 
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
id
);

1464 i‡(
	`btf_is_v¨
(
t
Ë|| 
	`btf_is_d©a£c
(t))

1467 i‡(
t›_Àvñ
)

1468 
	`btf_dump_¥ötf
(
d
, "(");

1470 
d
->
skù_™⁄_defs
 = 
åue
;

1471 
d
->
°rù_mods
 = 
åue
;

1472 
	`btf_dump_emô_ty≥_de˛
(
d
, 
id
, "", 0);

1473 
d
->
°rù_mods
 = 
Ál£
;

1474 
d
->
skù_™⁄_defs
 = 
Ál£
;

1476 i‡(
t›_Àvñ
)

1477 
	`btf_dump_¥ötf
(
d
, ")");

1478 
	}
}

1481 
size_t
 
	$btf_dump_«me_dups
(
btf_dump
 *
d
, 
hashm≠
 *
«me_m≠
,

1482 c⁄° *
‹ig_«me
)

1484 
size_t
 
dup_˙t
 = 0;

1486 
	`hashm≠__föd
(
«me_m≠
, 
‹ig_«me
, (**)&
dup_˙t
);

1487 
dup_˙t
++;

1488 
	`hashm≠__£t
(
«me_m≠
, 
‹ig_«me
, (*)
dup_˙t
, 
NULL
, NULL);

1490  
dup_˙t
;

1491 
	}
}

1493 c⁄° *
	$btf_dump_ªsﬁve_«me
(
btf_dump
 *
d
, 
__u32
 
id
,

1494 
hashm≠
 *
«me_m≠
)

1496 
btf_dump_ty≥_aux_°©e
 *
s
 = &
d
->
ty≥_°©es
[
id
];

1497 c⁄° 
btf_ty≥
 *
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
id
);

1498 c⁄° *
‹ig_«me
 = 
	`btf_«me_of
(
d
, 
t
->
«me_off
);

1499 c⁄° **
ˇched_«me
 = &
d
->
ˇched_«mes
[
id
];

1500 
size_t
 
dup_˙t
;

1502 i‡(
t
->
«me_off
 == 0)

1505 i‡(
s
->
«me_ªsﬁved
)

1506  *
ˇched_«me
 ? *ˇched_«mê: 
‹ig_«me
;

1508 i‡(
	`btf_is_fwd
(
t
Ë|| (
	`btf_is_íum
—Ë&& 
	`btf_vÀn
(t) == 0)) {

1509 
s
->
«me_ªsﬁved
 = 1;

1510  
‹ig_«me
;

1513 
dup_˙t
 = 
	`btf_dump_«me_dups
(
d
, 
«me_m≠
, 
‹ig_«me
);

1514 i‡(
dup_˙t
 > 1) {

1515 c⁄° 
size_t
 
max_Àn
 = 256;

1516 
√w_«me
[
max_Àn
];

1518 
	`¢¥ötf
(
√w_«me
, 
max_Àn
, "%s___%zu", 
‹ig_«me
, 
dup_˙t
);

1519 *
ˇched_«me
 = 
	`°rdup
(
√w_«me
);

1522 
s
->
«me_ªsﬁved
 = 1;

1523  *
ˇched_«me
 ? *ˇched_«mê: 
‹ig_«me
;

1524 
	}
}

1526 c⁄° *
	$btf_dump_ty≥_«me
(
btf_dump
 *
d
, 
__u32
 
id
)

1528  
	`btf_dump_ªsﬁve_«me
(
d
, 
id
, d->
ty≥_«mes
);

1529 
	}
}

1531 c⁄° *
	$btf_dump_idít_«me
(
btf_dump
 *
d
, 
__u32
 
id
)

1533  
	`btf_dump_ªsﬁve_«me
(
d
, 
id
, d->
idít_«mes
);

1534 
	}
}

1536 
btf_dump_dump_ty≥_d©a
(
btf_dump
 *
d
,

1537 c⁄° *
‚ame
,

1538 c⁄° 
btf_ty≥
 *
t
,

1539 
__u32
 
id
,

1540 c⁄° *
d©a
,

1541 
__u8
 
bôs_off£t
,

1542 
__u8
 
bô_sz
);

1544 c⁄° *
	$btf_dump_d©a_√wlöe
(
btf_dump
 *
d
)

1546  
d
->
ty≥d_dump
->
com∑˘
 || d->ty≥d_dump->
dïth
 == 0 ? "" : "\n";

1547 
	}
}

1549 c⁄° *
	$btf_dump_d©a_dñim
(
btf_dump
 *
d
)

1551  
d
->
ty≥d_dump
->
dïth
 == 0 ? "" : ",";

1552 
	}
}

1554 
	$btf_dump_d©a_pfx
(
btf_dump
 *
d
)

1556 
i
, 
lvl
 = 
d
->
ty≥d_dump
->
ödít_lvl
 + d->ty≥d_dump->
dïth
;

1558 i‡(
d
->
ty≥d_dump
->
com∑˘
)

1561 
i
 = 0; i < 
lvl
; i++)

1562 
	`btf_dump_¥ötf
(
d
, "%s", d->
ty≥d_dump
->
ödít_°r
);

1563 
	}
}

1570 
	#btf_dump_ty≥_vÆues
(
d
, 
fmt
, ...) \

1571 
	`btf_dump_¥ötf
(
d
, 
fmt
 "%s%s", \

1572 ##
__VA_ARGS__
, \

1573 
	`btf_dump_d©a_dñim
(
d
), \

1574 
	`btf_dump_d©a_√wlöe
(
d
))

	)

1576 
	$btf_dump_unsuµ‹ãd_d©a
(
btf_dump
 *
d
,

1577 c⁄° 
btf_ty≥
 *
t
,

1578 
__u32
 
id
)

1580 
	`btf_dump_¥ötf
(
d
, "<unsuµ‹ãd köd:%u>", 
	`btf_köd
(
t
));

1581  -
ENOTSUP
;

1582 
	}
}

1584 
	$btf_dump_gë_bôfõld_vÆue
(
btf_dump
 *
d
,

1585 c⁄° 
btf_ty≥
 *
t
,

1586 c⁄° *
d©a
,

1587 
__u8
 
bôs_off£t
,

1588 
__u8
 
bô_sz
,

1589 
__u64
 *
vÆue
)

1591 
__u16
 
À·_shi·_bôs
, 
right_shi·_bôs
;

1592 c⁄° 
__u8
 *
byãs
 = 
d©a
;

1593 
__u8
 
ƒ_c›y_bôs
;

1594 
__u64
 
num
 = 0;

1595 
i
;

1598 i‡(
t
->
size
 > 8) {

1599 
	`¥_w¨n
("u√x≥˘ed bôfõld sizê%d\n", 
t
->
size
);

1600  -
EINVAL
;

1606 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


1607 
i
 = 
t
->
size
 - 1; i >= 0; i--)

1608 
num
 =Çum * 256 + 
byãs
[
i
];

1609 
ƒ_c›y_bôs
 = 
bô_sz
 + 
bôs_off£t
;

1610 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


1611 
i
 = 0; i < 
t
->
size
; i++)

1612 
num
 =Çum * 256 + 
byãs
[
i
];

1613 
ƒ_c›y_bôs
 = 
t
->
size
 * 8 - 
bôs_off£t
;

1617 
À·_shi·_bôs
 = 64 - 
ƒ_c›y_bôs
;

1618 
right_shi·_bôs
 = 64 - 
bô_sz
;

1620 *
vÆue
 = (
num
 << 
À·_shi·_bôs
Ë>> 
right_shi·_bôs
;

1623 
	}
}

1625 
	$btf_dump_bôfõld_check_zîo
(
btf_dump
 *
d
,

1626 c⁄° 
btf_ty≥
 *
t
,

1627 c⁄° *
d©a
,

1628 
__u8
 
bôs_off£t
,

1629 
__u8
 
bô_sz
)

1631 
__u64
 
check_num
;

1632 
îr
;

1634 
îr
 = 
	`btf_dump_gë_bôfõld_vÆue
(
d
, 
t
, 
d©a
, 
bôs_off£t
, 
bô_sz
, &
check_num
);

1635 i‡(
îr
)

1636  
îr
;

1637 i‡(
check_num
 == 0)

1638  -
ENODATA
;

1640 
	}
}

1642 
	$btf_dump_bôfõld_d©a
(
btf_dump
 *
d
,

1643 c⁄° 
btf_ty≥
 *
t
,

1644 c⁄° *
d©a
,

1645 
__u8
 
bôs_off£t
,

1646 
__u8
 
bô_sz
)

1648 
__u64
 
¥öt_num
;

1649 
îr
;

1651 
îr
 = 
	`btf_dump_gë_bôfõld_vÆue
(
d
, 
t
, 
d©a
, 
bôs_off£t
, 
bô_sz
, &
¥öt_num
);

1652 i‡(
îr
)

1653  
îr
;

1655 
	`btf_dump_ty≥_vÆues
(
d
, "0x%Œx", ()
¥öt_num
);

1658 
	}
}

1661 
	$btf_dump_ba£_ty≥_check_zîo
(
btf_dump
 *
d
,

1662 c⁄° 
btf_ty≥
 *
t
,

1663 
__u32
 
id
,

1664 c⁄° *
d©a
)

1666 
__u8
 
byãcmp
[16] = {};

1667 
ƒ_byãs
;

1672 i‡(
	`btf_köd
(
t
Ë=
BTF_KIND_PTR
)

1673 
ƒ_byãs
 = 
d
->
±r_sz
;

1675 
ƒ_byãs
 = 
t
->
size
;

1677 i‡(
ƒ_byãs
 < 1 ||Çr_bytes > 16) {

1678 
	`¥_w¨n
("u√x≥˘ed sizê%d f‹ id [%u]\n", 
ƒ_byãs
, 
id
);

1679  -
EINVAL
;

1682 i‡(
	`memcmp
(
d©a
, 
byãcmp
, 
ƒ_byãs
) == 0)

1683  -
ENODATA
;

1685 
	}
}

1687 
boﬁ
 
	$±r_is_Æig√d
(c⁄° 
btf
 *btf, 
__u32
 
ty≥_id
,

1688 c⁄° *
d©a
)

1690 
Æignmít
 = 
	`btf__Æign_of
(
btf
, 
ty≥_id
);

1692 i‡(
Æignmít
 == 0)

1693  
Ál£
;

1695  ((
uöçå_t
)
d©a
Ë% 
Æignmít
 == 0;

1696 
	}
}

1698 
	$btf_dump_öt_d©a
(
btf_dump
 *
d
,

1699 c⁄° 
btf_ty≥
 *
t
,

1700 
__u32
 
ty≥_id
,

1701 c⁄° *
d©a
,

1702 
__u8
 
bôs_off£t
)

1704 
__u8
 
ícodög
 = 
	`btf_öt_ícodög
(
t
);

1705 
boﬁ
 
sign
 = 
ícodög
 & 
BTF_INT_SIGNED
;

1706 
buf
[16] 
	`__©åibuã__
((
	`Æig√d
(16)));

1707 
sz
 = 
t
->
size
;

1709 i‡(
sz
 =0 || sz > (
buf
)) {

1710 
	`¥_w¨n
("u√x≥˘ed sizê%d f‹ id [%u]\n", 
sz
, 
ty≥_id
);

1711  -
EINVAL
;

1717 i‡(!
	`±r_is_Æig√d
(
d
->
btf
, 
ty≥_id
, 
d©a
)) {

1718 
	`mem˝y
(
buf
, 
d©a
, 
sz
);

1719 
d©a
 = 
buf
;

1722 
sz
) {

1724 c⁄° 
__u64
 *
öts
 = 
d©a
;

1725 
__u64
 
lsi
, 
msi
;

1730 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


1731 
lsi
 = 
öts
[0];

1732 
msi
 = 
öts
[1];

1733 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


1734 
lsi
 = 
öts
[1];

1735 
msi
 = 
öts
[0];

1739 i‡(
msi
 == 0)

1740 
	`btf_dump_ty≥_vÆues
(
d
, "0x%Œx", ()
lsi
);

1742 
	`btf_dump_ty≥_vÆues
(
d
, "0x%Œx%016Œx", ()
msi
,

1743 ()
lsi
);

1747 i‡(
sign
)

1748 
	`btf_dump_ty≥_vÆues
(
d
, "%Œd", *(*)
d©a
);

1750 
	`btf_dump_ty≥_vÆues
(
d
, "%Œu", *(*)
d©a
);

1753 i‡(
sign
)

1754 
	`btf_dump_ty≥_vÆues
(
d
, "%d", *(
__s32
 *)
d©a
);

1756 
	`btf_dump_ty≥_vÆues
(
d
, "%u", *(
__u32
 *)
d©a
);

1759 i‡(
sign
)

1760 
	`btf_dump_ty≥_vÆues
(
d
, "%d", *(
__s16
 *)
d©a
);

1762 
	`btf_dump_ty≥_vÆues
(
d
, "%u", *(
__u16
 *)
d©a
);

1765 i‡(
d
->
ty≥d_dump
->
is_¨øy_ch¨
) {

1767 i‡(
d
->
ty≥d_dump
->
is_¨øy_ãrmö©ed
)

1769 i‡(*(*)
d©a
 == '\0') {

1770 
d
->
ty≥d_dump
->
is_¨øy_ãrmö©ed
 = 
åue
;

1773 i‡(
	`i•röt
(*(*)
d©a
)) {

1774 
	`btf_dump_ty≥_vÆues
(
d
, "'%c'", *(*)
d©a
);

1778 i‡(
sign
)

1779 
	`btf_dump_ty≥_vÆues
(
d
, "%d", *(
__s8
 *)
d©a
);

1781 
	`btf_dump_ty≥_vÆues
(
d
, "%u", *(
__u8
 *)
d©a
);

1784 
	`¥_w¨n
("u√x≥˘ed sz %d f‹ id [%u]\n", 
sz
, 
ty≥_id
);

1785  -
EINVAL
;

1788 
	}
}

1790 
	uÊﬂt_d©a
 {

1791 
	mld
;

1792 
	md
;

1793 
	mf
;

1796 
	$btf_dump_Êﬂt_d©a
(
btf_dump
 *
d
,

1797 c⁄° 
btf_ty≥
 *
t
,

1798 
__u32
 
ty≥_id
,

1799 c⁄° *
d©a
)

1801 c⁄° 
Êﬂt_d©a
 *
Êp
 = 
d©a
;

1802 
Êﬂt_d©a
 
Ê
;

1803 
sz
 = 
t
->
size
;

1806 i‡(!
	`±r_is_Æig√d
(
d
->
btf
, 
ty≥_id
, 
d©a
)) {

1807 
	`mem˝y
(&
Ê
, 
d©a
, 
sz
);

1808 
Êp
 = &
Ê
;

1811 
sz
) {

1813 
	`btf_dump_ty≥_vÆues
(
d
, "%Lf", 
Êp
->
ld
);

1816 
	`btf_dump_ty≥_vÆues
(
d
, "%lf", 
Êp
->d);

1819 
	`btf_dump_ty≥_vÆues
(
d
, "%f", 
Êp
->
f
);

1822 
	`¥_w¨n
("u√x≥˘ed sizê%d f‹ id [%u]\n", 
sz
, 
ty≥_id
);

1823  -
EINVAL
;

1826 
	}
}

1828 
	$btf_dump_v¨_d©a
(
btf_dump
 *
d
,

1829 c⁄° 
btf_ty≥
 *
v
,

1830 
__u32
 
id
,

1831 c⁄° *
d©a
)

1833 
btf_func_lökage
 
lökage
 = 
	`btf_v¨
(
v
)->linkage;

1834 c⁄° 
btf_ty≥
 *
t
;

1835 c⁄° *
l
;

1836 
__u32
 
ty≥_id
;

1838 
lökage
) {

1839 
BTF_FUNC_STATIC
:

1840 
l
 = "static ";

1842 
BTF_FUNC_EXTERN
:

1843 
l
 = "extern ";

1845 
BTF_FUNC_GLOBAL
:

1847 
l
 = "";

1854 
	`btf_dump_¥ötf
(
d
, "%s", 
l
);

1855 
ty≥_id
 = 
v
->
ty≥
;

1856 
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
ty≥_id
);

1857 
	`btf_dump_emô_ty≥_ˇ°
(
d
, 
ty≥_id
, 
Ál£
);

1858 
	`btf_dump_¥ötf
(
d
, " %†", 
	`btf_«me_of
(d, 
v
->
«me_off
));

1859  
	`btf_dump_dump_ty≥_d©a
(
d
, 
NULL
, 
t
, 
ty≥_id
, 
d©a
, 0, 0);

1860 
	}
}

1862 
	$btf_dump_¨øy_d©a
(
btf_dump
 *
d
,

1863 c⁄° 
btf_ty≥
 *
t
,

1864 
__u32
 
id
,

1865 c⁄° *
d©a
)

1867 c⁄° 
btf_¨øy
 *
¨øy
 = 
	`btf_¨øy
(
t
);

1868 c⁄° 
btf_ty≥
 *
ñem_ty≥
;

1869 
__u32
 
i
, 
ñem_ty≥_id
;

1870 
__s64
 
ñem_size
;

1871 
boﬁ
 
is_¨øy_membî
;

1873 
ñem_ty≥_id
 = 
¨øy
->
ty≥
;

1874 
ñem_ty≥
 = 
	`skù_mods_™d_ty≥defs
(
d
->
btf
, 
ñem_ty≥_id
, 
NULL
);

1875 
ñem_size
 = 
	`btf__ªsﬁve_size
(
d
->
btf
, 
ñem_ty≥_id
);

1876 i‡(
ñem_size
 <= 0) {

1877 
	`¥_w¨n
("unexpectedÉlem size %zd forárrayÅype [%u]\n",

1878 (
ssize_t
)
ñem_size
, 
id
);

1879  -
EINVAL
;

1882 i‡(
	`btf_is_öt
(
ñem_ty≥
)) {

1888 i‡(
ñem_size
 == 1)

1889 
d
->
ty≥d_dump
->
is_¨øy_ch¨
 = 
åue
;

1899 
d
->
ty≥d_dump
->
dïth
++;

1900 
	`btf_dump_¥ötf
(
d
, "[%s", 
	`btf_dump_d©a_√wlöe
(d));

1905 
is_¨øy_membî
 = 
d
->
ty≥d_dump
->is_array_member;

1906 
d
->
ty≥d_dump
->
is_¨øy_membî
 = 
åue
;

1907 
i
 = 0; i < 
¨øy
->
√Àms
; i++, 
d©a
 +
ñem_size
) {

1908 i‡(
d
->
ty≥d_dump
->
is_¨øy_ãrmö©ed
)

1910 
	`btf_dump_dump_ty≥_d©a
(
d
, 
NULL
, 
ñem_ty≥
, 
ñem_ty≥_id
, 
d©a
, 0, 0);

1912 
d
->
ty≥d_dump
->
is_¨øy_membî
 = is_array_member;

1913 
d
->
ty≥d_dump
->
dïth
--;

1914 
	`btf_dump_d©a_pfx
(
d
);

1915 
	`btf_dump_ty≥_vÆues
(
d
, "]");

1918 
	}
}

1920 
	$btf_dump_°ru˘_d©a
(
btf_dump
 *
d
,

1921 c⁄° 
btf_ty≥
 *
t
,

1922 
__u32
 
id
,

1923 c⁄° *
d©a
)

1925 c⁄° 
btf_membî
 *
m
 = 
	`btf_membîs
(
t
);

1926 
__u16
 
n
 = 
	`btf_vÀn
(
t
);

1927 
i
, 
îr
;

1936 
d
->
ty≥d_dump
->
dïth
++;

1937 
	`btf_dump_¥ötf
(
d
, "{%s", 
	`btf_dump_d©a_√wlöe
(d));

1939 
i
 = 0; i < 
n
; i++, 
m
++) {

1940 c⁄° 
btf_ty≥
 *
mty≥
;

1941 c⁄° *
m«me
;

1942 
__u32
 
moff£t
;

1943 
__u8
 
bô_sz
;

1945 
mty≥
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
m
->
ty≥
);

1946 
m«me
 = 
	`btf_«me_of
(
d
, 
m
->
«me_off
);

1947 
moff£t
 = 
	`btf_membî_bô_off£t
(
t
, 
i
);

1949 
bô_sz
 = 
	`btf_membî_bôfõld_size
(
t
, 
i
);

1950 
îr
 = 
	`btf_dump_dump_ty≥_d©a
(
d
, 
m«me
, 
mty≥
, 
m
->
ty≥
, 
d©a
 + 
moff£t
 / 8,

1951 
moff£t
 % 8, 
bô_sz
);

1952 i‡(
îr
 < 0)

1953  
îr
;

1955 
d
->
ty≥d_dump
->
dïth
--;

1956 
	`btf_dump_d©a_pfx
(
d
);

1957 
	`btf_dump_ty≥_vÆues
(
d
, "}");

1958  
îr
;

1959 
	}
}

1961 
	u±r_d©a
 {

1962 
	mp
;

1963 
	mÕ
;

1966 
	$btf_dump_±r_d©a
(
btf_dump
 *
d
,

1967 c⁄° 
btf_ty≥
 *
t
,

1968 
__u32
 
id
,

1969 c⁄° *
d©a
)

1971 i‡(
	`±r_is_Æig√d
(
d
->
btf
, 
id
, 
d©a
Ë&& d->
±r_sz
 == (*)) {

1972 
	`btf_dump_ty≥_vÆues
(
d
, "%p", *(**)
d©a
);

1974 
±r_d©a
 
±
;

1976 
	`mem˝y
(&
±
, 
d©a
, 
d
->
±r_sz
);

1977 i‡(
d
->
±r_sz
 == 4)

1978 
	`btf_dump_ty≥_vÆues
(
d
, "0x%x", 
±
.
p
);

1980 
	`btf_dump_ty≥_vÆues
(
d
, "0x%Œx", 
±
.
Õ
);

1983 
	}
}

1985 
	$btf_dump_gë_íum_vÆue
(
btf_dump
 *
d
,

1986 c⁄° 
btf_ty≥
 *
t
,

1987 c⁄° *
d©a
,

1988 
__u32
 
id
,

1989 
__s64
 *
vÆue
)

1992 i‡(!
	`±r_is_Æig√d
(
d
->
btf
, 
id
, 
d©a
)) {

1993 
__u64
 
vÆ
;

1994 
îr
;

1996 
îr
 = 
	`btf_dump_gë_bôfõld_vÆue
(
d
, 
t
, 
d©a
, 0, 0, &
vÆ
);

1997 i‡(
îr
)

1998  
îr
;

1999 *
vÆue
 = (
__s64
)
vÆ
;

2003 
t
->
size
) {

2005 *
vÆue
 = *(
__s64
 *)
d©a
;

2008 *
vÆue
 = *(
__s32
 *)
d©a
;

2011 *
vÆue
 = *(
__s16
 *)
d©a
;

2014 *
vÆue
 = *(
__s8
 *)
d©a
;

2017 
	`¥_w¨n
("u√x≥˘ed sizê%d f‹Énum, id:[%u]\n", 
t
->
size
, 
id
);

2018  -
EINVAL
;

2020 
	}
}

2022 
	$btf_dump_íum_d©a
(
btf_dump
 *
d
,

2023 c⁄° 
btf_ty≥
 *
t
,

2024 
__u32
 
id
,

2025 c⁄° *
d©a
)

2027 c⁄° 
btf_íum
 *
e
;

2028 
__s64
 
vÆue
;

2029 
i
, 
îr
;

2031 
îr
 = 
	`btf_dump_gë_íum_vÆue
(
d
, 
t
, 
d©a
, 
id
, &
vÆue
);

2032 i‡(
îr
)

2033  
îr
;

2035 
i
 = 0, 
e
 = 
	`btf_íum
(
t
); i < 
	`btf_vÀn
(t); i++,É++) {

2036 i‡(
vÆue
 !
e
->
vÆ
)

2038 
	`btf_dump_ty≥_vÆues
(
d
, "%s", 
	`btf_«me_of
(d, 
e
->
«me_off
));

2042 
	`btf_dump_ty≥_vÆues
(
d
, "%d", 
vÆue
);

2044 
	}
}

2046 
	$btf_dump_d©a£c_d©a
(
btf_dump
 *
d
,

2047 c⁄° 
btf_ty≥
 *
t
,

2048 
__u32
 
id
,

2049 c⁄° *
d©a
)

2051 c⁄° 
btf_v¨_£cöfo
 *
vsi
;

2052 c⁄° 
btf_ty≥
 *
v¨
;

2053 
__u32
 
i
;

2054 
îr
;

2056 
	`btf_dump_ty≥_vÆues
(
d
, "SEC(\"%s\"Ë", 
	`btf_«me_of
(d, 
t
->
«me_off
));

2058 
i
 = 0, 
vsi
 = 
	`btf_v¨_£cöfos
(
t
); i < 
	`btf_vÀn
(t); i++, vsi++) {

2059 
v¨
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
vsi
->
ty≥
);

2060 
îr
 = 
	`btf_dump_dump_ty≥_d©a
(
d
, 
NULL
, 
v¨
, 
vsi
->
ty≥
, 
d©a
 + vsi->
off£t
, 0, 0);

2061 i‡(
îr
 < 0)

2062  
îr
;

2063 
	`btf_dump_¥ötf
(
d
, ";");

2066 
	}
}

2069 
	$btf_dump_ty≥_d©a_check_ovîÊow
(
btf_dump
 *
d
,

2070 c⁄° 
btf_ty≥
 *
t
,

2071 
__u32
 
id
,

2072 c⁄° *
d©a
,

2073 
__u8
 
bôs_off£t
)

2075 
__s64
 
size
 = 
	`btf__ªsﬁve_size
(
d
->
btf
, 
id
);

2077 i‡(
size
 < 0 || sizê>
INT_MAX
) {

2078 
	`¥_w¨n
("unexpected size [%zu] for id [%u]\n",

2079 (
size_t
)
size
, 
id
);

2080  -
EINVAL
;

2090 
t
 = 
	`skù_mods_™d_ty≥defs
(
d
->
btf
, 
id
, 
NULL
);

2091 i‡(!
t
) {

2092 
	`¥_w¨n
("unexpectedÉrror skipping mods/typedefs for id [%u]\n",

2093 
id
);

2094  -
EINVAL
;

2097 
	`btf_köd
(
t
)) {

2098 
BTF_KIND_INT
:

2099 
BTF_KIND_FLOAT
:

2100 
BTF_KIND_PTR
:

2101 
BTF_KIND_ENUM
:

2102 i‡(
d©a
 + 
bôs_off£t
 / 8 + 
size
 > 
d
->
ty≥d_dump
->
d©a_íd
)

2103  -
E2BIG
;

2108  ()
size
;

2109 
	}
}

2111 
	$btf_dump_ty≥_d©a_check_zîo
(
btf_dump
 *
d
,

2112 c⁄° 
btf_ty≥
 *
t
,

2113 
__u32
 
id
,

2114 c⁄° *
d©a
,

2115 
__u8
 
bôs_off£t
,

2116 
__u8
 
bô_sz
)

2118 
__s64
 
vÆue
;

2119 
i
, 
îr
;

2132 i‡(
d
->
ty≥d_dump
->
emô_zî€s
 || d->ty≥d_dump->
dïth
 == 0 ||

2133 (
d
->
ty≥d_dump
->
is_¨øy_membî
 &&

2134 !
d
->
ty≥d_dump
->
is_¨øy_ch¨
))

2137 
t
 = 
	`skù_mods_™d_ty≥defs
(
d
->
btf
, 
id
, 
NULL
);

2139 
	`btf_köd
(
t
)) {

2140 
BTF_KIND_INT
:

2141 i‡(
bô_sz
)

2142  
	`btf_dump_bôfõld_check_zîo
(
d
, 
t
, 
d©a
, 
bôs_off£t
, 
bô_sz
);

2143  
	`btf_dump_ba£_ty≥_check_zîo
(
d
, 
t
, 
id
, 
d©a
);

2144 
BTF_KIND_FLOAT
:

2145 
BTF_KIND_PTR
:

2146  
	`btf_dump_ba£_ty≥_check_zîo
(
d
, 
t
, 
id
, 
d©a
);

2147 
BTF_KIND_ARRAY
: {

2148 c⁄° 
btf_¨øy
 *
¨øy
 = 
	`btf_¨øy
(
t
);

2149 c⁄° 
btf_ty≥
 *
ñem_ty≥
;

2150 
__u32
 
ñem_ty≥_id
, 
ñem_size
;

2151 
boﬁ
 
isch¨
;

2153 
ñem_ty≥_id
 = 
¨øy
->
ty≥
;

2154 
ñem_size
 = 
	`btf__ªsﬁve_size
(
d
->
btf
, 
ñem_ty≥_id
);

2155 
ñem_ty≥
 = 
	`skù_mods_™d_ty≥defs
(
d
->
btf
, 
ñem_ty≥_id
, 
NULL
);

2157 
isch¨
 = 
	`btf_is_öt
(
ñem_ty≥
Ë&& 
ñem_size
 == 1;

2165 
i
 = 0; i < 
¨øy
->
√Àms
; i++) {

2166 i‡(
i
 =0 && 
isch¨
 && *(*)
d©a
 == 0)

2167  -
ENODATA
;

2168 
îr
 = 
	`btf_dump_ty≥_d©a_check_zîo
(
d
, 
ñem_ty≥
,

2169 
ñem_ty≥_id
,

2170 
d©a
 +

2171 (
i
 * 
ñem_size
),

2172 
bôs_off£t
, 0);

2173 i‡(
îr
 !-
ENODATA
)

2174  
îr
;

2176  -
ENODATA
;

2178 
BTF_KIND_STRUCT
:

2179 
BTF_KIND_UNION
: {

2180 c⁄° 
btf_membî
 *
m
 = 
	`btf_membîs
(
t
);

2181 
__u16
 
n
 = 
	`btf_vÀn
(
t
);

2186 
i
 = 0; i < 
n
; i++, 
m
++) {

2187 c⁄° 
btf_ty≥
 *
mty≥
;

2188 
__u32
 
moff£t
;

2190 
mty≥
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
m
->
ty≥
);

2191 
moff£t
 = 
	`btf_membî_bô_off£t
(
t
, 
i
);

2197 
bô_sz
 = 
	`btf_membî_bôfõld_size
(
t
, 
i
);

2198 
îr
 = 
	`btf_dump_ty≥_d©a_check_zîo
(
d
, 
mty≥
, 
m
->
ty≥
, 
d©a
 + 
moff£t
 / 8,

2199 
moff£t
 % 8, 
bô_sz
);

2200 i‡(
îr
 !
ENODATA
)

2201  
îr
;

2203  -
ENODATA
;

2205 
BTF_KIND_ENUM
:

2206 
îr
 = 
	`btf_dump_gë_íum_vÆue
(
d
, 
t
, 
d©a
, 
id
, &
vÆue
);

2207 i‡(
îr
)

2208  
îr
;

2209 i‡(
vÆue
 == 0)

2210  -
ENODATA
;

2215 
	}
}

2218 
	$btf_dump_dump_ty≥_d©a
(
btf_dump
 *
d
,

2219 c⁄° *
‚ame
,

2220 c⁄° 
btf_ty≥
 *
t
,

2221 
__u32
 
id
,

2222 c⁄° *
d©a
,

2223 
__u8
 
bôs_off£t
,

2224 
__u8
 
bô_sz
)

2226 
size
, 
îr
 = 0;

2228 
size
 = 
	`btf_dump_ty≥_d©a_check_ovîÊow
(
d
, 
t
, 
id
, 
d©a
, 
bôs_off£t
);

2229 i‡(
size
 < 0)

2230  
size
;

2231 
îr
 = 
	`btf_dump_ty≥_d©a_check_zîo
(
d
, 
t
, 
id
, 
d©a
, 
bôs_off£t
, 
bô_sz
);

2232 i‡(
îr
) {

2236 i‡(
îr
 =-
ENODATA
)

2237  
size
;

2238  
îr
;

2240 
	`btf_dump_d©a_pfx
(
d
);

2242 i‡(!
d
->
ty≥d_dump
->
skù_«mes
) {

2243 i‡(
‚ame
 && 
	`°æí
(fname) > 0)

2244 
	`btf_dump_¥ötf
(
d
, ".%†", 
‚ame
);

2245 
	`btf_dump_emô_ty≥_ˇ°
(
d
, 
id
, 
åue
);

2248 
t
 = 
	`skù_mods_™d_ty≥defs
(
d
->
btf
, 
id
, 
NULL
);

2250 
	`btf_köd
(
t
)) {

2251 
BTF_KIND_UNKN
:

2252 
BTF_KIND_FWD
:

2253 
BTF_KIND_FUNC
:

2254 
BTF_KIND_FUNC_PROTO
:

2255 
BTF_KIND_DECL_TAG
:

2256 
îr
 = 
	`btf_dump_unsuµ‹ãd_d©a
(
d
, 
t
, 
id
);

2258 
BTF_KIND_INT
:

2259 i‡(
bô_sz
)

2260 
îr
 = 
	`btf_dump_bôfõld_d©a
(
d
, 
t
, 
d©a
, 
bôs_off£t
, 
bô_sz
);

2262 
îr
 = 
	`btf_dump_öt_d©a
(
d
, 
t
, 
id
, 
d©a
, 
bôs_off£t
);

2264 
BTF_KIND_FLOAT
:

2265 
îr
 = 
	`btf_dump_Êﬂt_d©a
(
d
, 
t
, 
id
, 
d©a
);

2267 
BTF_KIND_PTR
:

2268 
îr
 = 
	`btf_dump_±r_d©a
(
d
, 
t
, 
id
, 
d©a
);

2270 
BTF_KIND_ARRAY
:

2271 
îr
 = 
	`btf_dump_¨øy_d©a
(
d
, 
t
, 
id
, 
d©a
);

2273 
BTF_KIND_STRUCT
:

2274 
BTF_KIND_UNION
:

2275 
îr
 = 
	`btf_dump_°ru˘_d©a
(
d
, 
t
, 
id
, 
d©a
);

2277 
BTF_KIND_ENUM
:

2279 i‡(
bô_sz
) {

2280 
__u64
 
¥öt_num
;

2281 
__s64
 
íum_vÆ
;

2283 
îr
 = 
	`btf_dump_gë_bôfõld_vÆue
(
d
, 
t
, 
d©a
, 
bôs_off£t
, 
bô_sz
,

2284 &
¥öt_num
);

2285 i‡(
îr
)

2287 
íum_vÆ
 = (
__s64
)
¥öt_num
;

2288 
îr
 = 
	`btf_dump_íum_d©a
(
d
, 
t
, 
id
, &
íum_vÆ
);

2290 
îr
 = 
	`btf_dump_íum_d©a
(
d
, 
t
, 
id
, 
d©a
);

2292 
BTF_KIND_VAR
:

2293 
îr
 = 
	`btf_dump_v¨_d©a
(
d
, 
t
, 
id
, 
d©a
);

2295 
BTF_KIND_DATASEC
:

2296 
îr
 = 
	`btf_dump_d©a£c_d©a
(
d
, 
t
, 
id
, 
d©a
);

2299 
	`¥_w¨n
("unexpected kind [%u] for id [%u]\n",

2300 
	`BTF_INFO_KIND
(
t
->
öfo
), 
id
);

2301  -
EINVAL
;

2303 i‡(
îr
 < 0)

2304  
îr
;

2305  
size
;

2306 
	}
}

2308 
	$btf_dump__dump_ty≥_d©a
(
btf_dump
 *
d
, 
__u32
 
id
,

2309 c⁄° *
d©a
, 
size_t
 
d©a_sz
,

2310 c⁄° 
btf_dump_ty≥_d©a_›ts
 *
›ts
)

2312 
btf_dump_d©a
 
ty≥d_dump
 = {};

2313 c⁄° 
btf_ty≥
 *
t
;

2314 
ªt
;

2316 i‡(!
	`OPTS_VALID
(
›ts
, 
btf_dump_ty≥_d©a_›ts
))

2317  
	`libbpf_îr
(-
EINVAL
);

2319 
t
 = 
	`btf__ty≥_by_id
(
d
->
btf
, 
id
);

2320 i‡(!
t
)

2321  
	`libbpf_îr
(-
ENOENT
);

2323 
d
->
ty≥d_dump
 = &typed_dump;

2324 
d
->
ty≥d_dump
->
d©a_íd
 = 
d©a
 + 
d©a_sz
;

2325 
d
->
ty≥d_dump
->
ödít_lvl
 = 
	`OPTS_GET
(
›ts
, 
ödít_Àvñ
, 0);

2328 i‡(!
›ts
->
ödít_°r
)

2329 
d
->
ty≥d_dump
->
ödít_°r
[0] = '\t';

2331 
	`libbpf_°æ˝y
(
d
->
ty≥d_dump
->
ödít_°r
, 
›ts
->indent_str,

2332 (
d
->
ty≥d_dump
->
ödít_°r
));

2334 
d
->
ty≥d_dump
->
com∑˘
 = 
	`OPTS_GET
(
›ts
, com∑˘, 
Ál£
);

2335 
d
->
ty≥d_dump
->
skù_«mes
 = 
	`OPTS_GET
(
›ts
, skù_«mes, 
Ál£
);

2336 
d
->
ty≥d_dump
->
emô_zî€s
 = 
	`OPTS_GET
(
›ts
,Émô_zî€s, 
Ál£
);

2338 
ªt
 = 
	`btf_dump_dump_ty≥_d©a
(
d
, 
NULL
, 
t
, 
id
, 
d©a
, 0, 0);

2340 
d
->
ty≥d_dump
 = 
NULL
;

2342  
	`libbpf_îr
(
ªt
);

2343 
	}
}

	@build/usr/include/bpf/bpf.h

23 #i‚de‡
__LIBBPF_BPF_H


24 
	#__LIBBPF_BPF_H


	)

26 
	~<löux/bpf.h
>

27 
	~<°dboﬁ.h
>

28 
	~<°ddef.h
>

29 
	~<°döt.h
>

31 
	~"libbpf_comm⁄.h
"

32 
	~"libbpf_Àgacy.h
"

34 #ifde‡
__˝lu•lus


38 
libbpf_£t_memlock_æim
(
size_t
 
memlock_byãs
);

40 
	sbpf_m≠_¸óã_›ts
 {

41 
size_t
 
sz
;

43 
__u32
 
btf_fd
;

44 
__u32
 
btf_key_ty≥_id
;

45 
__u32
 
btf_vÆue_ty≥_id
;

46 
__u32
 
btf_vmlöux_vÆue_ty≥_id
;

48 
__u32
 
ö√r_m≠_fd
;

49 
__u32
 
m≠_Êags
;

50 
__u64
 
m≠_exåa
;

52 
__u32
 
numa_node
;

53 
__u32
 
m≠_ifödex
;

55 
	#bpf_m≠_¸óã_›ts__œ°_fõld
 
m≠_ifödex


	)

57 
LIBBPF_API
 
bpf_m≠_¸óã
(
bpf_m≠_ty≥
 
m≠_ty≥
,

58 c⁄° *
m≠_«me
,

59 
__u32
 
key_size
,

60 
__u32
 
vÆue_size
,

61 
__u32
 
max_íåõs
,

62 c⁄° 
bpf_m≠_¸óã_›ts
 *
›ts
);

64 
	sbpf_¸óã_m≠_©å
 {

65 c⁄° *
«me
;

66 
bpf_m≠_ty≥
 
m≠_ty≥
;

67 
__u32
 
m≠_Êags
;

68 
__u32
 
key_size
;

69 
__u32
 
vÆue_size
;

70 
__u32
 
max_íåõs
;

71 
__u32
 
numa_node
;

72 
__u32
 
btf_fd
;

73 
__u32
 
btf_key_ty≥_id
;

74 
__u32
 
btf_vÆue_ty≥_id
;

75 
__u32
 
m≠_ifödex
;

77 
__u32
 
ö√r_m≠_fd
;

78 
__u32
 
btf_vmlöux_vÆue_ty≥_id
;

82 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

83 
LIBBPF_API
 
bpf_¸óã_m≠_x©å
(c⁄° 
bpf_¸óã_m≠_©å
 *
¸óã_©å
);

84 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

85 
LIBBPF_API
 
bpf_¸óã_m≠_node
(
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
«me
,

86 
key_size
, 
vÆue_size
,

87 
max_íåõs
, 
__u32
 
m≠_Êags
, 
node
);

88 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

89 
LIBBPF_API
 
bpf_¸óã_m≠_«me
(
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
«me
,

90 
key_size
, 
vÆue_size
,

91 
max_íåõs
, 
__u32
 
m≠_Êags
);

92 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

93 
LIBBPF_API
 
bpf_¸óã_m≠
(
bpf_m≠_ty≥
 
m≠_ty≥
, 
key_size
,

94 
vÆue_size
, 
max_íåõs
, 
__u32
 
m≠_Êags
);

95 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

96 
LIBBPF_API
 
bpf_¸óã_m≠_ö_m≠_node
(
bpf_m≠_ty≥
 
m≠_ty≥
,

97 c⁄° *
«me
, 
key_size
,

98 
ö√r_m≠_fd
, 
max_íåõs
,

99 
__u32
 
m≠_Êags
, 
node
);

100 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_map_create() instead")

101 
LIBBPF_API
 
bpf_¸óã_m≠_ö_m≠
(
bpf_m≠_ty≥
 
m≠_ty≥
,

102 c⁄° *
«me
, 
key_size
,

103 
ö√r_m≠_fd
, 
max_íåõs
,

104 
__u32
 
m≠_Êags
);

106 
	sbpf_¥og_lﬂd_›ts
 {

107 
size_t
 
sz
;

113 
©ãm±s
;

115 
bpf_©èch_ty≥
 
ex≥˘ed_©èch_ty≥
;

116 
__u32
 
¥og_btf_fd
;

117 
__u32
 
¥og_Êags
;

118 
__u32
 
¥og_ifödex
;

119 
__u32
 
kîn_vîsi⁄
;

121 
__u32
 
©èch_btf_id
;

122 
__u32
 
©èch_¥og_fd
;

123 
__u32
 
©èch_btf_obj_fd
;

125 c⁄° *
fd_¨øy
;

128 c⁄° *
func_öfo
;

129 
__u32
 
func_öfo_˙t
;

130 
__u32
 
func_öfo_ªc_size
;

133 c⁄° *
löe_öfo
;

134 
__u32
 
löe_öfo_˙t
;

135 
__u32
 
löe_öfo_ªc_size
;

138 
__u32
 
log_Àvñ
;

139 
__u32
 
log_size
;

140 *
log_buf
;

142 
	#bpf_¥og_lﬂd_›ts__œ°_fõld
 
log_buf


	)

144 
LIBBPF_API
 
bpf_¥og_lﬂd
(
bpf_¥og_ty≥
 
¥og_ty≥
,

145 c⁄° *
¥og_«me
, c⁄° *
li˚n£
,

146 c⁄° 
bpf_ö¢
 *
ö¢s
, 
size_t
 
ö¢_˙t
,

147 c⁄° 
bpf_¥og_lﬂd_›ts
 *
›ts
);

149 
LIBBPF_API
 
bpf_¥og_lﬂd_v0_6_0
(
bpf_¥og_ty≥
 
¥og_ty≥
,

150 c⁄° *
¥og_«me
, c⁄° *
li˚n£
,

151 c⁄° 
bpf_ö¢
 *
ö¢s
, 
size_t
 
ö¢_˙t
,

152 c⁄° 
bpf_¥og_lﬂd_›ts
 *
›ts
);

163 #i‚de‡
bpf_¥og_lﬂd


164 
	#bpf_¥og_lﬂd
(...Ë
	`___libbpf_ovîlﬂd
(
___bpf_¥og_lﬂd
, 
__VA_ARGS__
)

	)

165 
	#___bpf_¥og_lﬂd4
(
fûe
, 
ty≥
, 
pobj
, 
¥og_fd
) \

166 
	`bpf_¥og_lﬂd_dïªˇãd
(
fûe
, 
ty≥
, 
pobj
, 
¥og_fd
)

	)

167 
	#___bpf_¥og_lﬂd6
(
¥og_ty≥
, 
¥og_«me
, 
li˚n£
, 
ö¢s
, 
ö¢_˙t
, 
›ts
) \

168 
	`bpf_¥og_lﬂd
(
¥og_ty≥
, 
¥og_«me
, 
li˚n£
, 
ö¢s
, 
ö¢_˙t
, 
›ts
)

	)

171 
	sbpf_lﬂd_¥ogøm_©å
 {

172 
bpf_¥og_ty≥
 
¥og_ty≥
;

173 
bpf_©èch_ty≥
 
ex≥˘ed_©èch_ty≥
;

174 c⁄° *
«me
;

175 c⁄° 
bpf_ö¢
 *
ö¢s
;

176 
size_t
 
ö¢s_˙t
;

177 c⁄° *
li˚n£
;

179 
__u32
 
kîn_vîsi⁄
;

180 
__u32
 
©èch_¥og_fd
;

183 
__u32
 
¥og_ifödex
;

184 
__u32
 
©èch_btf_id
;

186 
__u32
 
¥og_btf_fd
;

187 
__u32
 
func_öfo_ªc_size
;

188 c⁄° *
func_öfo
;

189 
__u32
 
func_öfo_˙t
;

190 
__u32
 
löe_öfo_ªc_size
;

191 c⁄° *
löe_öfo
;

192 
__u32
 
löe_öfo_˙t
;

193 
__u32
 
log_Àvñ
;

194 
__u32
 
¥og_Êags
;

198 
	#MAPS_RELAX_COMPAT
 0x01

	)

201 
	#BPF_LOG_BUF_SIZE
 (
UINT32_MAX
 >> 8Ë

	)

203 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_prog_load() instead")

204 
LIBBPF_API
 
bpf_lﬂd_¥ogøm_x©å
(c⁄° 
bpf_lﬂd_¥ogøm_©å
 *
lﬂd_©å
,

205 *
log_buf
, 
size_t
 
log_buf_sz
);

206 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_prog_load() instead")

207 
LIBBPF_API
 
bpf_lﬂd_¥ogøm
(
bpf_¥og_ty≥
 
ty≥
,

208 c⁄° 
bpf_ö¢
 *
ö¢s
, 
size_t
 
ö¢s_˙t
,

209 c⁄° *
li˚n£
, 
__u32
 
kîn_vîsi⁄
,

210 *
log_buf
, 
size_t
 
log_buf_sz
);

211 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_prog_load() instead")

212 
LIBBPF_API
 
bpf_vîify_¥ogøm
(
bpf_¥og_ty≥
 
ty≥
,

213 c⁄° 
bpf_ö¢
 *
ö¢s
,

214 
size_t
 
ö¢s_˙t
, 
__u32
 
¥og_Êags
,

215 c⁄° *
li˚n£
, 
__u32
 
kîn_vîsi⁄
,

216 *
log_buf
, 
size_t
 
log_buf_sz
,

217 
log_Àvñ
);

219 
	sbpf_btf_lﬂd_›ts
 {

220 
size_t
 
sz
;

223 *
log_buf
;

224 
__u32
 
log_Àvñ
;

225 
__u32
 
log_size
;

227 
	#bpf_btf_lﬂd_›ts__œ°_fõld
 
log_size


	)

229 
LIBBPF_API
 
bpf_btf_lﬂd
(c⁄° *
btf_d©a
, 
size_t
 
btf_size
,

230 c⁄° 
bpf_btf_lﬂd_›ts
 *
›ts
);

232 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_btf_load() instead")

233 
LIBBPF_API
 
bpf_lﬂd_btf
(c⁄° *
btf
, 
__u32
 
btf_size
, *
log_buf
,

234 
__u32
 
log_buf_size
, 
boﬁ
 
do_log
);

236 
LIBBPF_API
 
bpf_m≠_upd©e_ñem
(
fd
, c⁄° *
key
, c⁄° *
vÆue
,

237 
__u64
 
Êags
);

239 
LIBBPF_API
 
bpf_m≠_lookup_ñem
(
fd
, c⁄° *
key
, *
vÆue
);

240 
LIBBPF_API
 
bpf_m≠_lookup_ñem_Êags
(
fd
, c⁄° *
key
, *
vÆue
,

241 
__u64
 
Êags
);

242 
LIBBPF_API
 
bpf_m≠_lookup_™d_dñëe_ñem
(
fd
, c⁄° *
key
,

243 *
vÆue
);

244 
LIBBPF_API
 
bpf_m≠_lookup_™d_dñëe_ñem_Êags
(
fd
, c⁄° *
key
,

245 *
vÆue
, 
__u64
 
Êags
);

246 
LIBBPF_API
 
bpf_m≠_dñëe_ñem
(
fd
, c⁄° *
key
);

247 
LIBBPF_API
 
bpf_m≠_dñëe_ñem_Êags
(
fd
, c⁄° *
key
, 
__u64
 
Êags
);

248 
LIBBPF_API
 
bpf_m≠_gë_√xt_key
(
fd
, c⁄° *
key
, *
√xt_key
);

249 
LIBBPF_API
 
bpf_m≠_‰ìze
(
fd
);

251 
	sbpf_m≠_b©ch_›ts
 {

252 
size_t
 
sz
;

253 
__u64
 
ñem_Êags
;

254 
__u64
 
Êags
;

256 
	#bpf_m≠_b©ch_›ts__œ°_fõld
 
Êags


	)

274 
LIBBPF_API
 
bpf_m≠_dñëe_b©ch
(
fd
, c⁄° *
keys
,

275 
__u32
 *
cou¡
,

276 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
);

307 
LIBBPF_API
 
bpf_m≠_lookup_b©ch
(
fd
, *
ö_b©ch
, *
out_b©ch
,

308 *
keys
, *
vÆues
, 
__u32
 *
cou¡
,

309 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
);

333 
LIBBPF_API
 
bpf_m≠_lookup_™d_dñëe_b©ch
(
fd
, *
ö_b©ch
,

334 *
out_b©ch
, *
keys
,

335 *
vÆues
, 
__u32
 *
cou¡
,

336 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
);

379 
LIBBPF_API
 
bpf_m≠_upd©e_b©ch
(
fd
, c⁄° *
keys
, c⁄° *
vÆues
,

380 
__u32
 *
cou¡
,

381 c⁄° 
bpf_m≠_b©ch_›ts
 *
›ts
);

383 
LIBBPF_API
 
bpf_obj_pö
(
fd
, c⁄° *
∑th«me
);

384 
LIBBPF_API
 
bpf_obj_gë
(c⁄° *
∑th«me
);

386 
	sbpf_¥og_©èch_›ts
 {

387 
size_t
 
sz
;

388 
Êags
;

389 
ª∂a˚_¥og_fd
;

391 
	#bpf_¥og_©èch_›ts__œ°_fõld
 
ª∂a˚_¥og_fd


	)

393 
LIBBPF_API
 
bpf_¥og_©èch
(
¥og_fd
, 
©èchabÀ_fd
,

394 
bpf_©èch_ty≥
 
ty≥
, 
Êags
);

395 
LIBBPF_API
 
bpf_¥og_©èch_›ts
(
¥og_fd
, 
©èchabÀ_fd
,

396 
bpf_©èch_ty≥
 
ty≥
,

397 c⁄° 
bpf_¥og_©èch_›ts
 *
›ts
);

398 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_prog_attach_opts() instead")

399 
LIBBPF_API
 
bpf_¥og_©èch_x©å
(
¥og_fd
, 
©èchabÀ_fd
,

400 
bpf_©èch_ty≥
 
ty≥
,

401 c⁄° 
bpf_¥og_©èch_›ts
 *
›ts
);

402 
LIBBPF_API
 
bpf_¥og_dëach
(
©èchabÀ_fd
, 
bpf_©èch_ty≥
 
ty≥
);

403 
LIBBPF_API
 
bpf_¥og_dëach2
(
¥og_fd
, 
©èchabÀ_fd
,

404 
bpf_©èch_ty≥
 
ty≥
);

406 
bpf_ôî_lök_öfo
;

407 
	sbpf_lök_¸óã_›ts
 {

408 
size_t
 
sz
;

409 
__u32
 
Êags
;

410 
bpf_ôî_lök_öfo
 *
ôî_öfo
;

411 
__u32
 
ôî_öfo_Àn
;

412 
__u32
 
èrgë_btf_id
;

415 
__u64
 
bpf_cookõ
;

416 } 
≥rf_evít
;

418 
__u32
 
Êags
;

419 
__u32
 
˙t
;

420 c⁄° **
syms
;

421 c⁄° *
addrs
;

422 c⁄° 
__u64
 *
cookõs
;

423 } 
k¥obe_mu…i
;

425 
__u64
 
cookõ
;

426 } 
åacög
;

428 
size_t
 :0;

430 
	#bpf_lök_¸óã_›ts__œ°_fõld
 
k¥obe_mu…i
.
cookõs


	)

432 
LIBBPF_API
 
bpf_lök_¸óã
(
¥og_fd
, 
èrgë_fd
,

433 
bpf_©èch_ty≥
 
©èch_ty≥
,

434 c⁄° 
bpf_lök_¸óã_›ts
 *
›ts
);

436 
LIBBPF_API
 
bpf_lök_dëach
(
lök_fd
);

438 
	sbpf_lök_upd©e_›ts
 {

439 
size_t
 
sz
;

440 
__u32
 
Êags
;

441 
__u32
 
ﬁd_¥og_fd
;

443 
	#bpf_lök_upd©e_›ts__œ°_fõld
 
ﬁd_¥og_fd


	)

445 
LIBBPF_API
 
bpf_lök_upd©e
(
lök_fd
, 
√w_¥og_fd
,

446 c⁄° 
bpf_lök_upd©e_›ts
 *
›ts
);

448 
LIBBPF_API
 
bpf_ôî_¸óã
(
lök_fd
);

450 
	sbpf_¥og_ã°_run_©å
 {

451 
¥og_fd
;

452 
ª≥©
;

453 c⁄° *
d©a_ö
;

454 
__u32
 
d©a_size_ö
;

455 *
d©a_out
;

456 
__u32
 
d©a_size_out
;

458 
__u32
 
ªtvÆ
;

459 
__u32
 
duøti⁄
;

460 c⁄° *
˘x_ö
;

461 
__u32
 
˘x_size_ö
;

462 *
˘x_out
;

463 
__u32
 
˘x_size_out
;

467 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_prog_test_run_opts() instead")

468 
LIBBPF_API
 
bpf_¥og_ã°_run_x©å
(
bpf_¥og_ã°_run_©å
 *
ã°_©å
);

474 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_prog_test_run_opts() instead")

475 
LIBBPF_API
 
bpf_¥og_ã°_run
(
¥og_fd
, 
ª≥©
, *
d©a
,

476 
__u32
 
size
, *
d©a_out
, __u32 *
size_out
,

477 
__u32
 *
ªtvÆ
, __u32 *
duøti⁄
);

478 
LIBBPF_API
 
bpf_¥og_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
);

479 
LIBBPF_API
 
bpf_m≠_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
);

480 
LIBBPF_API
 
bpf_btf_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
);

481 
LIBBPF_API
 
bpf_lök_gë_√xt_id
(
__u32
 
°¨t_id
, __u32 *
√xt_id
);

482 
LIBBPF_API
 
bpf_¥og_gë_fd_by_id
(
__u32
 
id
);

483 
LIBBPF_API
 
bpf_m≠_gë_fd_by_id
(
__u32
 
id
);

484 
LIBBPF_API
 
bpf_btf_gë_fd_by_id
(
__u32
 
id
);

485 
LIBBPF_API
 
bpf_lök_gë_fd_by_id
(
__u32
 
id
);

486 
LIBBPF_API
 
bpf_obj_gë_öfo_by_fd
(
bpf_fd
, *
öfo
, 
__u32
 *
öfo_Àn
);

487 
LIBBPF_API
 
bpf_¥og_quîy
(
èrgë_fd
, 
bpf_©èch_ty≥
 
ty≥
,

488 
__u32
 
quîy_Êags
, __u32 *
©èch_Êags
,

489 
__u32
 *
¥og_ids
, __u32 *
¥og_˙t
);

490 
LIBBPF_API
 
bpf_øw_åa˚poöt_›í
(c⁄° *
«me
, 
¥og_fd
);

491 
LIBBPF_API
 
bpf_èsk_fd_quîy
(
pid
, 
fd
, 
__u32
 
Êags
, *
buf
,

492 
__u32
 *
buf_Àn
, __u32 *
¥og_id
, __u32 *
fd_ty≥
,

493 
__u64
 *
¥obe_off£t
, __u64 *
¥obe_addr
);

495 
bpf_°©s_ty≥
;

496 
LIBBPF_API
 
bpf_íabÀ_°©s
(
bpf_°©s_ty≥
 
ty≥
);

498 
	sbpf_¥og_böd_›ts
 {

499 
size_t
 
sz
;

500 
__u32
 
Êags
;

502 
	#bpf_¥og_böd_›ts__œ°_fõld
 
Êags


	)

504 
LIBBPF_API
 
bpf_¥og_böd_m≠
(
¥og_fd
, 
m≠_fd
,

505 c⁄° 
bpf_¥og_böd_›ts
 *
›ts
);

507 
	sbpf_ã°_run_›ts
 {

508 
size_t
 
sz
;

509 c⁄° *
d©a_ö
;

510 *
d©a_out
;

511 
__u32
 
d©a_size_ö
;

512 
__u32
 
d©a_size_out
;

515 c⁄° *
˘x_ö
;

516 *
˘x_out
;

517 
__u32
 
˘x_size_ö
;

518 
__u32
 
˘x_size_out
;

521 
__u32
 
ªtvÆ
;

522 
ª≥©
;

523 
__u32
 
duøti⁄
;

524 
__u32
 
Êags
;

525 
__u32
 
˝u
;

526 
__u32
 
b©ch_size
;

528 
	#bpf_ã°_run_›ts__œ°_fõld
 
b©ch_size


	)

530 
LIBBPF_API
 
bpf_¥og_ã°_run_›ts
(
¥og_fd
,

531 
bpf_ã°_run_›ts
 *
›ts
);

533 #ifde‡
__˝lu•lus


	@build/usr/include/bpf/bpf_core_read.h

2 #i‚de‡
__BPF_CORE_READ_H__


3 
	#__BPF_CORE_READ_H__


	)

13 
	ebpf_fõld_öfo_köd
 {

14 
	mBPF_FIELD_BYTE_OFFSET
 = 0,

15 
	mBPF_FIELD_BYTE_SIZE
 = 1,

16 
	mBPF_FIELD_EXISTS
 = 2,

17 
	mBPF_FIELD_SIGNED
 = 3,

18 
	mBPF_FIELD_LSHIFT_U64
 = 4,

19 
	mBPF_FIELD_RSHIFT_U64
 = 5,

23 
	ebpf_ty≥_id_köd
 {

24 
	mBPF_TYPE_ID_LOCAL
 = 0,

25 
	mBPF_TYPE_ID_TARGET
 = 1,

29 
	ebpf_ty≥_öfo_köd
 {

30 
	mBPF_TYPE_EXISTS
 = 0,

31 
	mBPF_TYPE_SIZE
 = 1,

35 
	ebpf_íum_vÆue_köd
 {

36 
	mBPF_ENUMVAL_EXISTS
 = 0,

37 
	mBPF_ENUMVAL_VALUE
 = 1,

40 
	#__CORE_RELO
(
§c
, 
fõld
, 
öfo
) \

41 
	`__buûtö_¥e£rve_fõld_öfo
((
§c
)->
fõld
, 
BPF_FIELD_
##
öfo
)

	)

43 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


44 
	#__CORE_BITFIELD_PROBE_READ
(
d°
, 
§c
, 
Êd
) \

45 
	`bpf_¥obe_ªad_kî√l
( \

46 (*)
d°
, \

47 
	`__CORE_RELO
(
§c
, 
Êd
, 
BYTE_SIZE
), \

48 (c⁄° *)
§c
 + 
	`__CORE_RELO
(§c, 
Êd
, 
BYTE_OFFSET
))

	)

54 
	#__CORE_BITFIELD_PROBE_READ
(
d°
, 
§c
, 
Êd
) \

55 
	`bpf_¥obe_ªad_kî√l
( \

56 (*)
d°
 + (8 - 
	`__CORE_RELO
(
§c
, 
Êd
, 
BYTE_SIZE
)), \

57 
	`__CORE_RELO
(
§c
, 
Êd
, 
BYTE_SIZE
), \

58 (c⁄° *)
§c
 + 
	`__CORE_RELO
(§c, 
Êd
, 
BYTE_OFFSET
))

	)

69 
	#BPF_CORE_READ_BITFIELD_PROBED
(
s
, 
fõld
) ({ \

70 
vÆ
 = 0; \

72 
	`__CORE_BITFIELD_PROBE_READ
(&
vÆ
, 
s
, 
fõld
); \

73 
vÆ
 <<
	`__CORE_RELO
(
s
, 
fõld
, 
LSHIFT_U64
); \

74 i‡(
	`__CORE_RELO
(
s
, 
fõld
, 
SIGNED
)) \

75 
vÆ
 = (()vÆË>> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

77 
vÆ
 = vÆ >> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

78 
vÆ
; \

79 })

	)

87 
	#BPF_CORE_READ_BITFIELD
(
s
, 
fõld
) ({ \

88 c⁄° *
p
 = (c⁄° *)
s
 + 
	`__CORE_RELO
(s, 
fõld
, 
BYTE_OFFSET
); \

89 
vÆ
; \

97 
asm
 vﬁ©ûe("" : "Ù"(
p
) : "0"(p)); \

99 
	`__CORE_RELO
(
s
, 
fõld
, 
BYTE_SIZE
)) { \

100 1: 
vÆ
 = *(c⁄° *)
p
; ; \

101 2: 
vÆ
 = *(c⁄° *)
p
; ; \

102 4: 
vÆ
 = *(c⁄° *)
p
; ; \

103 8: 
vÆ
 = *(c⁄° *)
p
; ; \

105 
vÆ
 <<
	`__CORE_RELO
(
s
, 
fõld
, 
LSHIFT_U64
); \

106 i‡(
	`__CORE_RELO
(
s
, 
fõld
, 
SIGNED
)) \

107 
vÆ
 = (()vÆË>> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

109 
vÆ
 = vÆ >> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

110 
vÆ
; \

111 })

	)

113 
	#___bpf_fõld_ªf1
(
fõld
Ë(fõld)

	)

114 
	#___bpf_fõld_ªf2
(
ty≥
, 
fõld
Ë(((
	`ty≥of
—y≥Ë*)0)->fõld)

	)

115 
	#___bpf_fõld_ªf
(
¨gs
...) \

116 
	`___bpf_≠∂y
(
___bpf_fõld_ªf
, 
	`___bpf_«rg
(
¨gs
))◊rgs)

	)

130 
	#bpf_c‹e_fõld_exi°s
(
fõld
...) \

131 
	`__buûtö_¥e£rve_fõld_öfo
(
	`___bpf_fõld_ªf
(
fõld
), 
BPF_FIELD_EXISTS
)

	)

143 
	#bpf_c‹e_fõld_size
(
fõld
...) \

144 
	`__buûtö_¥e£rve_fõld_öfo
(
	`___bpf_fõld_ªf
(
fõld
), 
BPF_FIELD_BYTE_SIZE
)

	)

155 
	#bpf_c‹e_fõld_off£t
(
fõld
...) \

156 
	`__buûtö_¥e£rve_fõld_öfo
(
	`___bpf_fõld_ªf
(
fõld
), 
BPF_FIELD_BYTE_OFFSET
)

	)

163 
	#bpf_c‹e_ty≥_id_loˇl
(
ty≥
) \

164 
	`__buûtö_btf_ty≥_id
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_ID_LOCAL
)

	)

173 
	#bpf_c‹e_ty≥_id_kî√l
(
ty≥
) \

174 
	`__buûtö_btf_ty≥_id
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_ID_TARGET
)

	)

183 
	#bpf_c‹e_ty≥_exi°s
(
ty≥
) \

184 
	`__buûtö_¥e£rve_ty≥_öfo
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_EXISTS
)

	)

193 
	#bpf_c‹e_ty≥_size
(
ty≥
) \

194 
	`__buûtö_¥e£rve_ty≥_öfo
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_SIZE
)

	)

204 
	#bpf_c‹e_íum_vÆue_exi°s
(
íum_ty≥
, 
íum_vÆue
) \

205 
	`__buûtö_¥e£rve_íum_vÆue
(*(
	`ty≥of
(
íum_ty≥
Ë*)
íum_vÆue
, 
BPF_ENUMVAL_EXISTS
)

	)

215 
	#bpf_c‹e_íum_vÆue
(
íum_ty≥
, 
íum_vÆue
) \

216 
	`__buûtö_¥e£rve_íum_vÆue
(*(
	`ty≥of
(
íum_ty≥
Ë*)
íum_vÆue
, 
BPF_ENUMVAL_VALUE
)

	)

234 
	#bpf_c‹e_ªad
(
d°
, 
sz
, 
§c
) \

235 
	`bpf_¥obe_ªad_kî√l
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

238 
	#bpf_c‹e_ªad_u£r
(
d°
, 
sz
, 
§c
) \

239 
	`bpf_¥obe_ªad_u£r
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

245 
	#bpf_c‹e_ªad_°r
(
d°
, 
sz
, 
§c
) \

246 
	`bpf_¥obe_ªad_kî√l_°r
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

249 
	#bpf_c‹e_ªad_u£r_°r
(
d°
, 
sz
, 
§c
) \

250 
	`bpf_¥obe_ªad_u£r_°r
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

252 
	#___c⁄ˇt
(
a
, 
b
Ë®## 
	)
b

253 
	#___≠∂y
(
‚
, 
n
Ë
	`___c⁄ˇt
(‚,Ç)

	)

254 
	#___¡h
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_10
, 
__11
, 
N
, ...Ë
	)
N

260 
	#___«rg
(...Ë
	`___¡h
(
_
, ##
__VA_ARGS__
, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

	)

266 
	#___em±y
(...Ë
	`___¡h
(
_
, ##
__VA_ARGS__
, 
N
, N, N, N, N, N, N, N, N, N, 0)

	)

268 
	#___œ°1
(
x
Ë
	)
x

269 
	#___œ°2
(
a
, 
x
Ë
	)
x

270 
	#___œ°3
(
a
, 
b
, 
x
Ë
	)
x

271 
	#___œ°4
(
a
, 
b
, 
c
, 
x
Ë
	)
x

272 
	#___œ°5
(
a
, 
b
, 
c
, 
d
, 
x
Ë
	)
x

273 
	#___œ°6
(
a
, 
b
, 
c
, 
d
, 
e
, 
x
Ë
	)
x

274 
	#___œ°7
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
x
Ë
	)
x

275 
	#___œ°8
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
x
Ë
	)
x

276 
	#___œ°9
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
x
Ë
	)
x

277 
	#___œ°10
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
x
Ë
	)
x

278 
	#___œ°
(...Ë
	`___≠∂y
(
___œ°
, 
	`___«rg
(
__VA_ARGS__
))(__VA_ARGS__)

	)

280 
	#___nﬁa°2
(
a
, 
_
Ë
	)
a

281 
	#___nﬁa°3
(
a
, 
b
, 
_
Ëa, 
	)
b

282 
	#___nﬁa°4
(
a
, 
b
, 
c
, 
_
Ëa, b, 
	)
c

283 
	#___nﬁa°5
(
a
, 
b
, 
c
, 
d
, 
_
Ëa, b, c, 
	)
d

284 
	#___nﬁa°6
(
a
, 
b
, 
c
, 
d
, 
e
, 
_
Ëa, b, c, d, 
	)
e

285 
	#___nﬁa°7
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
_
Ëa, b, c, d,É, 
	)
f

286 
	#___nﬁa°8
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
_
Ëa, b, c, d,É, f, 
	)
g

287 
	#___nﬁa°9
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
_
Ëa, b, c, d,É, f, g, 
	)
h

288 
	#___nﬁa°10
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
_
Ëa, b, c, d,É, f, g, h, 
	)
i

289 
	#___nﬁa°
(...Ë
	`___≠∂y
(
___nﬁa°
, 
	`___«rg
(
__VA_ARGS__
))(__VA_ARGS__)

	)

291 
	#___¨row1
(
a
Ë
	)
a

292 
	#___¨row2
(
a
, 
b
Ëa->
	)
b

293 
	#___¨row3
(
a
, 
b
, 
c
Ëa->b->
	)
c

294 
	#___¨row4
(
a
, 
b
, 
c
, 
d
Ëa->b->c->
	)
d

295 
	#___¨row5
(
a
, 
b
, 
c
, 
d
, 
e
Ëa->b->c->d->
	)
e

296 
	#___¨row6
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
Ëa->b->c->d->e->
	)
f

297 
	#___¨row7
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
Ëa->b->c->d->e->f->
	)
g

298 
	#___¨row8
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
Ëa->b->c->d->e->f->g->
	)
h

299 
	#___¨row9
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
Ëa->b->c->d->e->f->g->h->
	)
i

300 
	#___¨row10
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
Ëa->b->c->d->e->f->g->h->i->
	)
j

301 
	#___¨row
(...Ë
	`___≠∂y
(
___¨row
, 
	`___«rg
(
__VA_ARGS__
))(__VA_ARGS__)

	)

303 
	#___ty≥
(...Ë
	`ty≥of
(
	`___¨row
(
__VA_ARGS__
))

	)

305 
	#___ªad
(
ªad_‚
, 
d°
, 
§c_ty≥
, 
§c
, 
ac˚ss‹
) \

306 
	`ªad_‚
((*)(
d°
), (*(d°)), &((
§c_ty≥
)(
§c
))->
ac˚ss‹
)

	)

309 
	#___rd_fú°
(
‚
, 
§c
, 
a
Ë
	`___ªad
(‚, &
__t
, 
	`___ty≥
(§c), src,á);

	)

310 
	#___rd_œ°
(
‚
, ...) \

311 
	`___ªad
(
‚
, &
__t
, 
	`___ty≥
(
	`___nﬁa°
(
__VA_ARGS__
)), __t, 
	`___œ°
(__VA_ARGS__));

	)

312 
	#___rd_p1
(
‚
, ...Ëc⁄° *
__t
; 
	`___rd_fú°
(‚, 
__VA_ARGS__
)

	)

313 
	#___rd_p2
(
‚
, ...Ë
	`___rd_p1
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

314 
	#___rd_p3
(
‚
, ...Ë
	`___rd_p2
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

315 
	#___rd_p4
(
‚
, ...Ë
	`___rd_p3
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

316 
	#___rd_p5
(
‚
, ...Ë
	`___rd_p4
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

317 
	#___rd_p6
(
‚
, ...Ë
	`___rd_p5
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

318 
	#___rd_p7
(
‚
, ...Ë
	`___rd_p6
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

319 
	#___rd_p8
(
‚
, ...Ë
	`___rd_p7
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

320 
	#___rd_p9
(
‚
, ...Ë
	`___rd_p8
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

321 
	#___ªad_±rs
(
‚
, 
§c
, ...) \

322 
	`___≠∂y
(
___rd_p
, 
	`___«rg
(
__VA_ARGS__
))(
‚
, 
§c
, __VA_ARGS__)

	)

324 
	#___c‹e_ªad0
(
‚
, 
‚_±r
, 
d°
, 
§c
, 
a
) \

325 
	`___ªad
(
‚
, 
d°
, 
	`___ty≥
(
§c
), src, 
a
);

	)

326 
	#___c‹e_ªadN
(
‚
, 
‚_±r
, 
d°
, 
§c
, ...) \

327 
	`___ªad_±rs
(
‚_±r
, 
§c
, 
	`___nﬁa°
(
__VA_ARGS__
)) \

328 
	`___ªad
(
‚
, 
d°
, 
	`___ty≥
(
§c
, 
	`___nﬁa°
(
__VA_ARGS__
)), 
__t
, \

329 
	`___œ°
(
__VA_ARGS__
));

	)

330 
	#___c‹e_ªad
(
‚
, 
‚_±r
, 
d°
, 
§c
, 
a
, ...) \

331 
	`___≠∂y
(
___c‹e_ªad
, 
	`___em±y
(
__VA_ARGS__
))(
‚
, 
‚_±r
, 
d°
, \

332 
§c
, 
a
, ##
__VA_ARGS__
)

	)

339 
	#BPF_CORE_READ_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

340 
	`___c‹e_ªad
(
bpf_c‹e_ªad
, bpf_core_read, \

341 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

342 })

	)

349 
	#BPF_CORE_READ_USER_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

350 
	`___c‹e_ªad
(
bpf_c‹e_ªad_u£r
, bpf_core_read_user, \

351 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

352 })

	)

355 
	#BPF_PROBE_READ_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

356 
	`___c‹e_ªad
(
bpf_¥obe_ªad
, bpf_probe_read, \

357 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

358 })

	)

365 
	#BPF_PROBE_READ_USER_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

366 
	`___c‹e_ªad
(
bpf_¥obe_ªad_u£r
, bpf_probe_read_user, \

367 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

368 })

	)

375 
	#BPF_CORE_READ_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

376 
	`___c‹e_ªad
(
bpf_c‹e_ªad_°r
, 
bpf_c‹e_ªad
, \

377 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

378 })

	)

385 
	#BPF_CORE_READ_USER_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

386 
	`___c‹e_ªad
(
bpf_c‹e_ªad_u£r_°r
, 
bpf_c‹e_ªad_u£r
, \

387 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

388 })

	)

391 
	#BPF_PROBE_READ_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

392 
	`___c‹e_ªad
(
bpf_¥obe_ªad_°r
, 
bpf_¥obe_ªad
, \

393 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

394 })

	)

402 
	#BPF_PROBE_READ_USER_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

403 
	`___c‹e_ªad
(
bpf_¥obe_ªad_u£r_°r
, 
bpf_¥obe_ªad_u£r
, \

404 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

405 })

	)

431 
	#BPF_CORE_READ
(
§c
, 
a
, ...) ({ \

432 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

433 
	`BPF_CORE_READ_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

434 
__r
; \

435 })

	)

447 
	#BPF_CORE_READ_USER
(
§c
, 
a
, ...) ({ \

448 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

449 
	`BPF_CORE_READ_USER_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

450 
__r
; \

451 })

	)

454 
	#BPF_PROBE_READ
(
§c
, 
a
, ...) ({ \

455 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

456 
	`BPF_PROBE_READ_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

457 
__r
; \

458 })

	)

466 
	#BPF_PROBE_READ_USER
(
§c
, 
a
, ...) ({ \

467 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

468 
	`BPF_PROBE_READ_USER_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

469 
__r
; \

470 })

	)

	@build/usr/include/bpf/bpf_endian.h

2 #i‚de‡
__BPF_ENDIAN__


3 
	#__BPF_ENDIAN__


	)

13 
	#___bpf_mvb
(
x
, 
b
, 
n
, 
m
Ë((
__u
##b)(xË<< (b-“+1)*8Ë>> (b-8Ë<< (m*8))

	)

15 
	#___bpf_swab16
(
x
Ë((
__u16
)( \

16 
	`___bpf_mvb
(
x
, 16, 0, 1) | \

17 
	`___bpf_mvb
(
x
, 16, 1, 0)))

	)

19 
	#___bpf_swab32
(
x
Ë((
__u32
)( \

20 
	`___bpf_mvb
(
x
, 32, 0, 3) | \

21 
	`___bpf_mvb
(
x
, 32, 1, 2) | \

22 
	`___bpf_mvb
(
x
, 32, 2, 1) | \

23 
	`___bpf_mvb
(
x
, 32, 3, 0)))

	)

25 
	#___bpf_swab64
(
x
Ë((
__u64
)( \

26 
	`___bpf_mvb
(
x
, 64, 0, 7) | \

27 
	`___bpf_mvb
(
x
, 64, 1, 6) | \

28 
	`___bpf_mvb
(
x
, 64, 2, 5) | \

29 
	`___bpf_mvb
(
x
, 64, 3, 4) | \

30 
	`___bpf_mvb
(
x
, 64, 4, 3) | \

31 
	`___bpf_mvb
(
x
, 64, 5, 2) | \

32 
	`___bpf_mvb
(
x
, 64, 6, 1) | \

33 
	`___bpf_mvb
(
x
, 64, 7, 0)))

	)

50 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


51 
	#__bpf_¡ohs
(
x
Ë
	`__buûtö_bsw≠16
(x)

	)

52 
	#__bpf_ht⁄s
(
x
Ë
	`__buûtö_bsw≠16
(x)

	)

53 
	#__bpf_c⁄°™t_¡ohs
(
x
Ë
	`___bpf_swab16
(x)

	)

54 
	#__bpf_c⁄°™t_ht⁄s
(
x
Ë
	`___bpf_swab16
(x)

	)

55 
	#__bpf_¡ohl
(
x
Ë
	`__buûtö_bsw≠32
(x)

	)

56 
	#__bpf_ht⁄l
(
x
Ë
	`__buûtö_bsw≠32
(x)

	)

57 
	#__bpf_c⁄°™t_¡ohl
(
x
Ë
	`___bpf_swab32
(x)

	)

58 
	#__bpf_c⁄°™t_ht⁄l
(
x
Ë
	`___bpf_swab32
(x)

	)

59 
	#__bpf_be64_to_˝u
(
x
Ë
	`__buûtö_bsw≠64
(x)

	)

60 
	#__bpf_˝u_to_be64
(
x
Ë
	`__buûtö_bsw≠64
(x)

	)

61 
	#__bpf_c⁄°™t_be64_to_˝u
(
x
Ë
	`___bpf_swab64
(x)

	)

62 
	#__bpf_c⁄°™t_˝u_to_be64
(
x
Ë
	`___bpf_swab64
(x)

	)

63 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


64 
	#__bpf_¡ohs
(
x
Ë(x)

	)

65 
	#__bpf_ht⁄s
(
x
Ë(x)

	)

66 
	#__bpf_c⁄°™t_¡ohs
(
x
Ë(x)

	)

67 
	#__bpf_c⁄°™t_ht⁄s
(
x
Ë(x)

	)

68 
	#__bpf_¡ohl
(
x
Ë(x)

	)

69 
	#__bpf_ht⁄l
(
x
Ë(x)

	)

70 
	#__bpf_c⁄°™t_¡ohl
(
x
Ë(x)

	)

71 
	#__bpf_c⁄°™t_ht⁄l
(
x
Ë(x)

	)

72 
	#__bpf_be64_to_˝u
(
x
Ë(x)

	)

73 
	#__bpf_˝u_to_be64
(
x
Ë(x)

	)

74 
	#__bpf_c⁄°™t_be64_to_˝u
(
x
Ë(x)

	)

75 
	#__bpf_c⁄°™t_˝u_to_be64
(
x
Ë(x)

	)

80 
	#bpf_ht⁄s
(
x
) \

81 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

82 
	`__bpf_c⁄°™t_ht⁄s
(
x
Ë: 
	`__bpf_ht⁄s
(x))

	)

83 
	#bpf_¡ohs
(
x
) \

84 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

85 
	`__bpf_c⁄°™t_¡ohs
(
x
Ë: 
	`__bpf_¡ohs
(x))

	)

86 
	#bpf_ht⁄l
(
x
) \

87 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

88 
	`__bpf_c⁄°™t_ht⁄l
(
x
Ë: 
	`__bpf_ht⁄l
(x))

	)

89 
	#bpf_¡ohl
(
x
) \

90 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

91 
	`__bpf_c⁄°™t_¡ohl
(
x
Ë: 
	`__bpf_¡ohl
(x))

	)

92 
	#bpf_˝u_to_be64
(
x
) \

93 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

94 
	`__bpf_c⁄°™t_˝u_to_be64
(
x
Ë: 
	`__bpf_˝u_to_be64
(x))

	)

95 
	#bpf_be64_to_˝u
(
x
) \

96 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

97 
	`__bpf_c⁄°™t_be64_to_˝u
(
x
Ë: 
	`__bpf_be64_to_˝u
(x))

	)

	@build/usr/include/bpf/bpf_helper_defs.h

4 
	gbpf_fib_lookup
;

5 
	gbpf_sk_lookup
;

6 
	gbpf_≥rf_evít_d©a
;

7 
	gbpf_≥rf_evít_vÆue
;

8 
	gbpf_pidns_öfo
;

9 
	gbpf_ªdú_√igh
;

10 
	gbpf_sock
;

11 
	gbpf_sock_addr
;

12 
	gbpf_sock_›s
;

13 
	gbpf_sock_tu∂e
;

14 
	gbpf_•ö_lock
;

15 
	gbpf_sys˘l
;

16 
	gbpf_t˝_sock
;

17 
	gbpf_tu¬ñ_key
;

18 
	gbpf_x‰m_°©e
;

19 
	glöux_bö¥m
;

20 
	g±_ªgs
;

21 
	gsk_ªu£p‹t_md
;

22 
	gsockaddr
;

23 
	gt˝hdr
;

24 
	g£q_fûe
;

25 
	gt˝6_sock
;

26 
	gt˝_sock
;

27 
	gt˝_timewaô_sock
;

28 
	gt˝_ªque°_sock
;

29 
	gudp6_sock
;

30 
	gunix_sock
;

31 
	gèsk_°ru˘
;

32 
	g__sk_buff
;

33 
	gsk_msg_md
;

34 
	gxdp_md
;

35 
	g∑th
;

36 
	gbtf_±r
;

37 
	göode
;

38 
	gsockë
;

39 
	gfûe
;

40 
	gbpf_timî
;

51 *(*
	gbpf_m≠_lookup_ñem
)(*
	gm≠
, c⁄° *
	gkey
) = (*) 1;

73 (*
bpf_m≠_upd©e_ñem
)(*
m≠
, c⁄° *
key
, c⁄° *
vÆue
, 
__u64
 
Êags
) = (*) 2;

83 (*
bpf_m≠_dñëe_ñem
)(*
m≠
, c⁄° *
key
) = (*) 3;

97 (*
bpf_¥obe_ªad
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 4;

109 
	$__u64
 (*
bpf_ktime_gë_ns
)() = (*) 5;

172 (*
bpf_åa˚_¥ötk
)(c⁄° *
fmt
, 
__u32
 
fmt_size
, ...) = (*) 6;

188 
	$__u32
 (*
bpf_gë_¥™dom_u32
)() = (*) 7;

201 
	$__u32
 (*
bpf_gë_smp_¥o˚ss‹_id
)() = (*) 8;

222 (*
bpf_skb_°‹e_byãs
)(
__sk_buff
 *
skb
, 
__u32
 
off£t
, c⁄° *
‰om
, __u32 
Àn
, 
__u64
 
Êags
) = (*) 9;

251 (*
bpf_l3_csum_ª∂a˚
)(
__sk_buff
 *
skb
, 
__u32
 
off£t
, 
__u64
 
‰om
, __u64 
to
, __u64 
size
) = (*) 10;

287 (*
bpf_l4_csum_ª∂a˚
)(
__sk_buff
 *
skb
, 
__u32
 
off£t
, 
__u64
 
‰om
, __u64 
to
, __u64 
Êags
) = (*) 11;

322 (*
bpf_èû_ˇŒ
)(*
˘x
, *
¥og_¨øy_m≠
, 
__u32
 
ödex
) = (*) 12;

350 (*
bpf_˛⁄e_ªdúe˘
)(
__sk_buff
 *
skb
, 
__u32
 
ifödex
, 
__u64
 
Êags
) = (*) 13;

363 
	$__u64
 (*
bpf_gë_cuºít_pid_tgid
)() = (*) 14;

374 
	$__u64
 (*
bpf_gë_cuºít_uid_gid
)() = (*) 15;

389 (*
bpf_gë_cuºít_comm
)(*
buf
, 
__u32
 
size_of_buf
) = (*) 16;

419 
	$__u32
 (*
bpf_gë_cgroup_˛assid
)(
__sk_buff
 *
skb
) = (*) 17;

439 (*
bpf_skb_vœn_push
)(
__sk_buff
 *
skb
, 
__be16
 
vœn_¥Ÿo
, 
__u16
 
vœn_tci
) = (*) 18;

455 (*
bpf_skb_vœn_p›
)(
__sk_buff
 *
skb
) = (*) 19;

510 (*
bpf_skb_gë_tu¬ñ_key
)(
__sk_buff
 *
skb
, 
bpf_tu¬ñ_key
 *
key
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 20;

551 (*
bpf_skb_£t_tu¬ñ_key
)(
__sk_buff
 *
skb
, 
bpf_tu¬ñ_key
 *
key
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 21;

584 
	$__u64
 (*
bpf_≥rf_evít_ªad
)(*
m≠
, 
__u64
 
Êags
) = (*) 22;

611 (*
bpf_ªdúe˘
)(
__u32
 
ifödex
, 
__u64
 
Êags
) = (*) 23;

639 
	$__u32
 (*
bpf_gë_rouã_ªÆm
)(
__sk_buff
 *
skb
) = (*) 24;

688 (*
bpf_≥rf_evít_ouçut
)(*
˘x
, *
m≠
, 
__u64
 
Êags
, *
d©a
, __u64 
size
) = (*) 25;

709 (*
bpf_skb_lﬂd_byãs
)(c⁄° *
skb
, 
__u32
 
off£t
, *
to
, __u32 
Àn
) = (*) 26;

755 (*
bpf_gë_°ackid
)(*
˘x
, *
m≠
, 
__u64
 
Êags
) = (*) 27;

786 
	$__s64
 (*
bpf_csum_diff
)(
__be32
 *
‰om
, 
__u32
 
‰om_size
, __be32 *
to
, __u32 
to_size
, 
__wsum
 
£ed
) = (*) 28;

808 (*
bpf_skb_gë_tu¬ñ_›t
)(
__sk_buff
 *
skb
, *
›t
, 
__u32
 
size
) = (*) 29;

822 (*
bpf_skb_£t_tu¬ñ_›t
)(
__sk_buff
 *
skb
, *
›t
, 
__u32
 
size
) = (*) 30;

853 (*
bpf_skb_ch™ge_¥Ÿo
)(
__sk_buff
 *
skb
, 
__be16
 
¥Ÿo
, 
__u64
 
Êags
) = (*) 31;

884 (*
bpf_skb_ch™ge_ty≥
)(
__sk_buff
 *
skb
, 
__u32
 
ty≥
) = (*) 32;

899 (*
bpf_skb_undî_cgroup
)(
__sk_buff
 *
skb
, *
m≠
, 
__u32
 
ödex
) = (*) 33;

919 
	$__u32
 (*
bpf_gë_hash_ªˇlc
)(
__sk_buff
 *
skb
) = (*) 34;

929 
	$__u64
 (*
bpf_gë_cuºít_èsk
)() = (*) 35;

952 (*
bpf_¥obe_wrôe_u£r
)(*
d°
, c⁄° *
§c
, 
__u32
 
Àn
) = (*) 36;

968 (*
bpf_cuºít_èsk_undî_cgroup
)(*
m≠
, 
__u32
 
ödex
) = (*) 37;

996 (*
bpf_skb_ch™ge_èû
)(
__sk_buff
 *
skb
, 
__u32
 
Àn
, 
__u64
 
Êags
) = (*) 38;

1036 (*
bpf_skb_puŒ_d©a
)(
__sk_buff
 *
skb
, 
__u32
 
Àn
) = (*) 39;

1052 
	$__s64
 (*
bpf_csum_upd©e
)(
__sk_buff
 *
skb
, 
__wsum
 
csum
) = (*) 40;

1066 (*
bpf_£t_hash_övÆid
)(
__sk_buff
 *
skb
) = (*) 41;

1081 (*
bpf_gë_numa_node_id
)() = (*) 42;

1106 (*
bpf_skb_ch™ge_hód
)(
__sk_buff
 *
skb
, 
__u32
 
Àn
, 
__u64
 
Êags
) = (*) 43;

1125 (*
bpf_xdp_adju°_hód
)(
xdp_md
 *xdp_md, 
dñè
) = (*) 44;

1142 (*
bpf_¥obe_ªad_°r
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 45;

1159 
	$__u64
 (*
bpf_gë_sockë_cookõ
)(*
˘x
) = (*) 46;

1173 
	$__u32
 (*
bpf_gë_sockë_uid
)(
__sk_buff
 *
skb
) = (*) 47;

1184 (*
bpf_£t_hash
)(
__sk_buff
 *
skb
, 
__u32
 
hash
) = (*) 48;

1219 (*
bpf_£tsock›t
)(*
bpf_sockë
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
›éí
) = (*) 49;

1273 (*
bpf_skb_adju°_room
)(
__sk_buff
 *
skb
, 
__s32
 
Àn_diff
, 
__u32
 
mode
, 
__u64
 
Êags
) = (*) 50;

1302 (*
bpf_ªdúe˘_m≠
)(*
m≠
, 
__u32
 
key
, 
__u64
 
Êags
) = (*) 51;

1317 (*
bpf_sk_ªdúe˘_m≠
)(
__sk_buff
 *
skb
, *
m≠
, 
__u32
 
key
, 
__u64
 
Êags
) = (*) 52;

1340 (*
bpf_sock_m≠_upd©e
)(
bpf_sock_›s
 *
sk›s
, *
m≠
, *
key
, 
__u64
 
Êags
) = (*) 53;

1373 (*
bpf_xdp_adju°_mëa
)(
xdp_md
 *xdp_md, 
dñè
) = (*) 54;

1427 (*
bpf_≥rf_evít_ªad_vÆue
)(*
m≠
, 
__u64
 
Êags
, 
bpf_≥rf_evít_vÆue
 *
buf
, 
__u32
 
buf_size
) = (*) 55;

1442 (*
bpf_≥rf_¥og_ªad_vÆue
)(
bpf_≥rf_evít_d©a
 *
˘x
, 
bpf_≥rf_evít_vÆue
 *
buf
, 
__u32
 
buf_size
) = (*) 56;

1471 (*
bpf_gësock›t
)(*
bpf_sockë
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
›éí
) = (*) 57;

1500 (*
bpf_ovîride_ªtu∫
)(
±_ªgs
 *
ªgs
, 
__u64
 
rc
) = (*) 58;

1548 (*
bpf_sock_›s_cb_Êags_£t
)(
bpf_sock_›s
 *
bpf_sock
, 
¨gvÆ
) = (*) 59;

1566 (*
bpf_msg_ªdúe˘_m≠
)(
sk_msg_md
 *
msg
, *
m≠
, 
__u32
 
key
, 
__u64
 
Êags
) = (*) 60;

1604 (*
bpf_msg_≠∂y_byãs
)(
sk_msg_md
 *
msg
, 
__u32
 
byãs
) = (*) 61;

1626 (*
bpf_msg_c‹k_byãs
)(
sk_msg_md
 *
msg
, 
__u32
 
byãs
) = (*) 62;

1661 (*
bpf_msg_puŒ_d©a
)(
sk_msg_md
 *
msg
, 
__u32
 
°¨t
, __u32 
íd
, 
__u64
 
Êags
) = (*) 63;

1683 (*
bpf_böd
)(
bpf_sock_addr
 *
˘x
, 
sockaddr
 *
addr
, 
addr_Àn
) = (*) 64;

1701 (*
bpf_xdp_adju°_èû
)(
xdp_md
 *xdp_md, 
dñè
) = (*) 65;

1721 (*
bpf_skb_gë_x‰m_°©e
)(
__sk_buff
 *
skb
, 
__u32
 
ödex
, 
bpf_x‰m_°©e
 *
x‰m_°©e
, __u32 
size
, 
__u64
 
Êags
) = (*) 66;

1758 (*
bpf_gë_°ack
)(*
˘x
, *
buf
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 67;

1784 (*
bpf_skb_lﬂd_byãs_ªœtive
)(c⁄° *
skb
, 
__u32
 
off£t
, *
to
, __u32 
Àn
, __u32 
°¨t_hódî
) = (*) 68;

1822 (*
bpf_fib_lookup
)(*
˘x
, bpf_fib_looku∞*
∑øms
, 
∂í
, 
__u32
 
Êags
) = (*) 69;

1845 (*
bpf_sock_hash_upd©e
)(
bpf_sock_›s
 *
sk›s
, *
m≠
, *
key
, 
__u64
 
Êags
) = (*) 70;

1863 (*
bpf_msg_ªdúe˘_hash
)(
sk_msg_md
 *
msg
, *
m≠
, *
key
, 
__u64
 
Êags
) = (*) 71;

1881 (*
bpf_sk_ªdúe˘_hash
)(
__sk_buff
 *
skb
, *
m≠
, *
key
, 
__u64
 
Êags
) = (*) 72;

1922 (*
bpf_lwt_push_íˇp
)(
__sk_buff
 *
skb
, 
__u32
 
ty≥
, *
hdr
, __u32 
Àn
) = (*) 73;

1941 (*
bpf_lwt_£g6_°‹e_byãs
)(
__sk_buff
 *
skb
, 
__u32
 
off£t
, c⁄° *
‰om
, __u32 
Àn
) = (*) 74;

1961 (*
bpf_lwt_£g6_adju°_§h
)(
__sk_buff
 *
skb
, 
__u32
 
off£t
, 
__s32
 
dñè
) = (*) 75;

1994 (*
bpf_lwt_£g6_a˘i⁄
)(
__sk_buff
 *
skb
, 
__u32
 
a˘i⁄
, *
∑øm
, __u32 
∑øm_Àn
) = (*) 76;

2017 (*
bpf_rc_ª≥©
)(*
˘x
) = (*) 77;

2047 (*
bpf_rc_keydown
)(*
˘x
, 
__u32
 
¥Ÿocﬁ
, 
__u64
 
sˇncode
, __u32 
toggÀ
) = (*) 78;

2067 
	$__u64
 (*
bpf_skb_cgroup_id
)(
__sk_buff
 *
skb
) = (*) 79;

2079 
	$__u64
 (*
bpf_gë_cuºít_cgroup_id
)() = (*) 80;

2101 *(*
bpf_gë_loˇl_°‹age
)(*
m≠
, 
__u64
 
Êags
) = (*) 81;

2114 (*
bpf_sk_£À˘_ªu£p‹t
)(
sk_ªu£p‹t_md
 *
ªu£
, *
m≠
, *
key
, 
__u64
 
Êags
) = (*) 82;

2136 
	$__u64
 (*
bpf_skb_™˚°‹_cgroup_id
)(
__sk_buff
 *
skb
, 
™˚°‹_Àvñ
) = (*) 83;

2177 
bpf_sock
 *(*
bpf_sk_lookup_t˝
)(*
˘x
, 
bpf_sock_tu∂e
 *
tu∂e
, 
__u32
 
tu∂e_size
, 
__u64
 
√äs
, __u64 
Êags
) = (*) 84;

2218 
bpf_sock
 *(*
bpf_sk_lookup_udp
)(*
˘x
, 
bpf_sock_tu∂e
 *
tu∂e
, 
__u32
 
tu∂e_size
, 
__u64
 
√äs
, __u64 
Êags
) = (*) 85;

2230 (*
bpf_sk_ªÀa£
)(*
sock
) = (*) 86;

2244 (*
bpf_m≠_push_ñem
)(*
m≠
, c⁄° *
vÆue
, 
__u64
 
Êags
) = (*) 87;

2254 (*
bpf_m≠_p›_ñem
)(*
m≠
, *
vÆue
) = (*) 88;

2264 (*
bpf_m≠_≥ek_ñem
)(*
m≠
, *
vÆue
) = (*) 89;

2284 (*
bpf_msg_push_d©a
)(
sk_msg_md
 *
msg
, 
__u32
 
°¨t
, __u32 
Àn
, 
__u64
 
Êags
) = (*) 90;

2300 (*
bpf_msg_p›_d©a
)(
sk_msg_md
 *
msg
, 
__u32
 
°¨t
, __u32 
Àn
, 
__u64
 
Êags
) = (*) 91;

2318 (*
bpf_rc_poöãr_ªl
)(*
˘x
, 
__s32
 
ªl_x
, __s32 
ªl_y
) = (*) 92;

2370 (*
bpf_•ö_lock
)(bpf_•ö_lock *
lock
) = (*) 93;

2381 (*
bpf_•ö_u∆ock
)(
bpf_•ö_lock
 *
lock
) = (*) 94;

2393 
bpf_sock
 *(*
bpf_sk_fuŒsock
)(bpf_sock *
sk
) = (*) 95;

2405 
bpf_t˝_sock
 *(*bpf_t˝_sock)(
bpf_sock
 *
sk
) = (*) 96;

2419 (*
bpf_skb_e˙_£t_˚
)(
__sk_buff
 *
skb
) = (*) 97;

2431 
bpf_sock
 *(*
bpf_gë_li°íî_sock
)(bpf_sock *
sk
) = (*) 98;

2454 
bpf_sock
 *(*
bpf_skc_lookup_t˝
)(*
˘x
, 
bpf_sock_tu∂e
 *
tu∂e
, 
__u32
 
tu∂e_size
, 
__u64
 
√äs
, __u64 
Êags
) = (*) 99;

2473 (*
bpf_t˝_check_syncookõ
)(*
sk
, *
ùh
, 
__u32
 
ùh_Àn
, 
t˝hdr
 *
th
, __u32 
th_Àn
) = (*) 100;

2493 (*
bpf_sys˘l_gë_«me
)(
bpf_sys˘l
 *
˘x
, *
buf
, 
buf_Àn
, 
__u64
 
Êags
) = (*) 101;

2516 (*
bpf_sys˘l_gë_cuºít_vÆue
)(
bpf_sys˘l
 *
˘x
, *
buf
, 
buf_Àn
) = (*) 102;

2537 (*
bpf_sys˘l_gë_√w_vÆue
)(
bpf_sys˘l
 *
˘x
, *
buf
, 
buf_Àn
) = (*) 103;

2558 (*
bpf_sys˘l_£t_√w_vÆue
)(
bpf_sys˘l
 *
˘x
, c⁄° *
buf
, 
buf_Àn
) = (*) 104;

2586 (*
bpf_°πﬁ
)(c⁄° *
buf
, 
buf_Àn
, 
__u64
 
Êags
, *
ªs
) = (*) 105;

2613 (*
bpf_°πoul
)(c⁄° *
buf
, 
buf_Àn
, 
__u64
 
Êags
, *
ªs
) = (*) 106;

2648 *(*
bpf_sk_°‹age_gë
)(*
m≠
, *
sk
, *
vÆue
, 
__u64
 
Êags
) = (*) 107;

2661 (*
bpf_sk_°‹age_dñëe
)(*
m≠
, *
sk
) = (*) 108;

2680 (*
bpf_£nd_sig«l
)(
__u32
 
sig
) = (*) 109;

2710 
	$__s64
 (*
bpf_t˝_gí_syncookõ
)(*
sk
, *
ùh
, 
__u32
 
ùh_Àn
, 
t˝hdr
 *
th
, __u32 
th_Àn
) = (*) 110;

2738 (*
bpf_skb_ouçut
)(*
˘x
, *
m≠
, 
__u64
 
Êags
, *
d©a
, __u64 
size
) = (*) 111;

2749 (*
bpf_¥obe_ªad_u£r
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 112;

2760 (*
bpf_¥obe_ªad_kî√l
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 113;

2808 (*
bpf_¥obe_ªad_u£r_°r
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 114;

2820 (*
bpf_¥obe_ªad_kî√l_°r
)(*
d°
, 
__u32
 
size
, c⁄° *
unß„_±r
) = (*) 115;

2831 (*
bpf_t˝_£nd_ack
)(*
ç
, 
__u32
 
rcv_nxt
) = (*) 116;

2849 (*
bpf_£nd_sig«l_thªad
)(
__u32
 
sig
) = (*) 117;

2859 
	$__u64
 (*
bpf_jiffõs64
)() = (*) 118;

2882 (*
bpf_ªad_bønch_ªc‹ds
)(
bpf_≥rf_evít_d©a
 *
˘x
, *
buf
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 119;

2898 (*
bpf_gë_ns_cuºít_pid_tgid
)(
__u64
 
dev
, __u64 
öo
, 
bpf_pidns_öfo
 *
nsd©a
, 
__u32
 
size
) = (*) 120;

2926 (*
bpf_xdp_ouçut
)(*
˘x
, *
m≠
, 
__u64
 
Êags
, *
d©a
, __u64 
size
) = (*) 121;

2943 
	$__u64
 (*
bpf_gë_√äs_cookõ
)(*
˘x
) = (*) 122;

2965 
	$__u64
 (*
bpf_gë_cuºít_™˚°‹_cgroup_id
)(
™˚°‹_Àvñ
) = (*) 123;

3000 (*
bpf_sk_assign
)(*
˘x
, *
sk
, 
__u64
 
Êags
) = (*) 124;

3012 
	$__u64
 (*
bpf_ktime_gë_boŸ_ns
)() = (*) 125;

3045 (*
bpf_£q_¥ötf
)(
£q_fûe
 *
m
, c⁄° *
fmt
, 
__u32
 
fmt_size
, c⁄° *
d©a
, __u32 
d©a_Àn
) = (*) 126;

3059 (*
bpf_£q_wrôe
)(
£q_fûe
 *
m
, c⁄° *
d©a
, 
__u32
 
Àn
) = (*) 127;

3077 
	$__u64
 (*
bpf_sk_cgroup_id
)(*
sk
) = (*) 128;

3099 
	$__u64
 (*
bpf_sk_™˚°‹_cgroup_id
)(*
sk
, 
™˚°‹_Àvñ
) = (*) 129;

3120 (*
bpf_rögbuf_ouçut
)(*
rögbuf
, *
d©a
, 
__u64
 
size
, __u64 
Êags
) = (*) 130;

3132 *(*
bpf_rögbuf_ª£rve
)(*
rögbuf
, 
__u64
 
size
, __u64 
Êags
) = (*) 131;

3150 (*
bpf_rögbuf_submô
)(*
d©a
, 
__u64
 
Êags
) = (*) 132;

3168 (*
bpf_rögbuf_disˇrd
)(*
d©a
, 
__u64
 
Êags
) = (*) 133;

3189 
	$__u64
 (*
bpf_rögbuf_quîy
)(*
rögbuf
, 
__u64
 
Êags
) = (*) 134;

3225 (*
bpf_csum_Àvñ
)(
__sk_buff
 *
skb
, 
__u64
 
Àvñ
) = (*) 135;

3235 
t˝6_sock
 *(*
bpf_skc_to_t˝6_sock
)(*
sk
) = (*) 136;

3245 
t˝_sock
 *(*
bpf_skc_to_t˝_sock
)(*
sk
) = (*) 137;

3255 
t˝_timewaô_sock
 *(*
bpf_skc_to_t˝_timewaô_sock
)(*
sk
) = (*) 138;

3265 
t˝_ªque°_sock
 *(*
bpf_skc_to_t˝_ªque°_sock
)(*
sk
) = (*) 139;

3275 
udp6_sock
 *(*
bpf_skc_to_udp6_sock
)(*
sk
) = (*) 140;

3311 (*
bpf_gë_èsk_°ack
)(
èsk_°ru˘
 *
èsk
, *
buf
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 141;

3378 (*
bpf_lﬂd_hdr_›t
)(
bpf_sock_›s
 *
sk›s
, *
£¨chby_ªs
, 
__u32
 
Àn
, 
__u64
 
Êags
) = (*) 142;

3415 (*
bpf_°‹e_hdr_›t
)(
bpf_sock_›s
 *
sk›s
, c⁄° *
‰om
, 
__u32
 
Àn
, 
__u64
 
Êags
) = (*) 143;

3441 (*
bpf_ª£rve_hdr_›t
)(
bpf_sock_›s
 *
sk›s
, 
__u32
 
Àn
, 
__u64
 
Êags
) = (*) 144;

3473 *(*
bpf_öode_°‹age_gë
)(*
m≠
, *
öode
, *
vÆue
, 
__u64
 
Êags
) = (*) 145;

3485 (*
bpf_öode_°‹age_dñëe
)(*
m≠
, *
öode
) = (*) 146;

3501 (*
bpf_d_∑th
)(
∑th
 *∑th, *
buf
, 
__u32
 
sz
) = (*) 147;

3512 (*
bpf_c›y_‰om_u£r
)(*
d°
, 
__u32
 
size
, c⁄° *
u£r_±r
) = (*) 148;

3552 (*
bpf_¢¥ötf_btf
)(*
°r
, 
__u32
 
°r_size
, 
btf_±r
 *
±r
, __u32 
btf_±r_size
, 
__u64
 
Êags
) = (*) 149;

3564 (*
bpf_£q_¥ötf_btf
)(
£q_fûe
 *
m
, 
btf_±r
 *
±r
, 
__u32
 
±r_size
, 
__u64
 
Êags
) = (*) 150;

3577 
	$__u64
 (*
bpf_skb_cgroup_˛assid
)(
__sk_buff
 *
skb
) = (*) 151;

3602 (*
bpf_ªdúe˘_√igh
)(
__u32
 
ifödex
, 
bpf_ªdú_√igh
 *
∑øms
, 
∂í
, 
__u64
 
Êags
) = (*) 152;

3623 *(*
bpf_≥r_˝u_±r
)(c⁄° *
≥r˝u_±r
, 
__u32
 
˝u
) = (*) 153;

3639 *(*
bpf_this_˝u_±r
)(c⁄° *
≥r˝u_±r
) = (*) 154;

3659 (*
bpf_ªdúe˘_≥î
)(
__u32
 
ifödex
, 
__u64
 
Êags
) = (*) 155;

3691 *(*
bpf_èsk_°‹age_gë
)(*
m≠
, 
èsk_°ru˘
 *
èsk
, *
vÆue
, 
__u64
 
Êags
) = (*) 156;

3703 (*
bpf_èsk_°‹age_dñëe
)(*
m≠
, 
èsk_°ru˘
 *
èsk
) = (*) 157;

3715 
èsk_°ru˘
 *(*
bpf_gë_cuºít_èsk_btf
)() = (*) 158;

3729 (*
bpf_b¥m_›ts_£t
)(
löux_bö¥m
 *
b¥m
, 
__u64
 
Êags
) = (*) 159;

3743 
	$__u64
 (*
bpf_ktime_gë_cﬂr£_ns
)() = (*) 160;

3757 (*
bpf_ima_öode_hash
)(
öode
 *öode, *
d°
, 
__u32
 
size
) = (*) 161;

3769 
sockë
 *(*
bpf_sock_‰om_fûe
)(
fûe
 *file) = (*) 162;

3840 (*
bpf_check_mtu
)(*
˘x
, 
__u32
 
ifödex
, __u32 *
mtu_Àn
, 
__s32
 
Àn_diff
, 
__u64
 
Êags
) = (*) 163;

3873 (*
bpf_f‹_óch_m≠_ñem
)(*
m≠
, *
ˇŒback_‚
, *
ˇŒback_˘x
, 
__u64
 
Êags
) = (*) 164;

3905 (*
bpf_¢¥ötf
)(*
°r
, 
__u32
 
°r_size
, c⁄° *
fmt
, 
__u64
 *
d©a
, __u32 
d©a_Àn
) = (*) 165;

3915 (*
bpf_sys_bpf
)(
__u32
 
cmd
, *
©å
, __u32 
©å_size
) = (*) 166;

3925 (*
bpf_btf_föd_by_«me_köd
)(*
«me
, 
«me_sz
, 
__u32
 
köd
, 
Êags
) = (*) 167;

3935 (*
bpf_sys_˛o£
)(
__u32
 
fd
) = (*) 168;

3956 (*
bpf_timî_öô
)(
bpf_timî
 *
timî
, *
m≠
, 
__u64
 
Êags
) = (*) 169;

3971 (*
bpf_timî_£t_ˇŒback
)(
bpf_timî
 *
timî
, *
ˇŒback_‚
) = (*) 170;

4001 (*
bpf_timî_°¨t
)(
bpf_timî
 *
timî
, 
__u64
 
n£cs
, __u64 
Êags
) = (*) 171;

4015 (*
bpf_timî_ˇn˚l
)(
bpf_timî
 *
timî
) = (*) 172;

4025 
	$__u64
 (*
bpf_gë_func_ù
)(*
˘x
) = (*) 173;

4044 
	$__u64
 (*
bpf_gë_©èch_cookõ
)(*
˘x
) = (*) 174;

4054 (*
bpf_èsk_±_ªgs
)(
èsk_°ru˘
 *
èsk
) = (*) 175;

4079 (*
bpf_gë_bønch_¢≠shŸ
)(*
íåõs
, 
__u32
 
size
, 
__u64
 
Êags
) = (*) 176;

4093 (*
bpf_åa˚_v¥ötk
)(c⁄° *
fmt
, 
__u32
 
fmt_size
, c⁄° *
d©a
, __u32 
d©a_Àn
) = (*) 177;

4103 
unix_sock
 *(*
bpf_skc_to_unix_sock
)(*
sk
) = (*) 178;

4122 (*
bpf_kÆlsyms_lookup_«me
)(c⁄° *
«me
, 
«me_sz
, 
Êags
, 
__u64
 *
ªs
) = (*) 179;

4145 (*
bpf_föd_vma
)(
èsk_°ru˘
 *
èsk
, 
__u64
 
addr
, *
ˇŒback_‚
, *
ˇŒback_˘x
, __u64 
Êags
) = (*) 180;

4173 (*
bpf_lo›
)(
__u32
 
ƒ_lo›s
, *
ˇŒback_‚
, *
ˇŒback_˘x
, 
__u64
 
Êags
) = (*) 181;

4187 (*
bpf_°∫cmp
)(c⁄° *
s1
, 
__u32
 
s1_sz
, c⁄° *
s2
) = (*) 182;

4200 (*
bpf_gë_func_¨g
)(*
˘x
, 
__u32
 
n
, 
__u64
 *
vÆue
) = (*) 183;

4213 (*
bpf_gë_func_ªt
)(*
˘x
, 
__u64
 *
vÆue
) = (*) 184;

4224 (*
bpf_gë_func_¨g_˙t
)(*
˘x
) = (*) 185;

4236 (*
bpf_gë_ªtvÆ
)() = (*) 186;

4248 (*
bpf_£t_ªtvÆ
)(
ªtvÆ
) = (*) 187;

4258 
	$__u64
 (*
bpf_xdp_gë_buff_Àn
)(
xdp_md
 *xdp_md) = (*) 188;

4271 (*
bpf_xdp_lﬂd_byãs
)(
xdp_md
 *xdp_md, 
__u32
 
off£t
, *
buf
, __u32 
Àn
) = (*) 189;

4282 (*
bpf_xdp_°‹e_byãs
)(
xdp_md
 *xdp_md, 
__u32
 
off£t
, *
buf
, __u32 
Àn
) = (*) 190;

4296 (*
bpf_c›y_‰om_u£r_èsk
)(*
d°
, 
__u32
 
size
, c⁄° *
u£r_±r
, 
èsk_°ru˘
 *
tsk
, 
__u64
 
Êags
) = (*) 191;

4330 (*
bpf_skb_£t_t°amp
)(
__sk_buff
 *
skb
, 
__u64
 
t°amp
, 
__u32
 
t°amp_ty≥
) = (*) 192;

4344 (*
bpf_ima_fûe_hash
)(
fûe
 *fûe, *
d°
, 
__u32
 
size
) = (*) 193;

4359 *(*
bpf_k±r_xchg
)(*
m≠_vÆue
, *
±r
) = (*) 194;

4371 *(*
bpf_m≠_lookup_≥r˝u_ñem
)(*
m≠
, c⁄° *
key
, 
__u32
 
˝u
) = (*) 195;

	@build/usr/include/bpf/bpf_helpers.h

2 #i‚de‡
__BPF_HELPERS__


3 
	#__BPF_HELPERS__


	)

11 
	~"bpf_hñ≥r_defs.h
"

13 
	#__uöt
(
«me
, 
vÆ
Ë(*«me)[vÆ]

	)

14 
	#__ty≥
(
«me
, 
vÆ
Ë
	`ty≥of
(vÆË*
	)
name

15 
	#__¨øy
(
«me
, 
vÆ
Ë
	`ty≥of
(vÆË*«me[]

	)

25 
	#SEC
(
«me
) \

26 
	`_Pøgma
("GCC diagnosticÖush") \

27 
	`_Pøgma
("GCC diagnostic ignored \"-Wignored-attributes\"") \

28 
	`__©åibuã__
((
	`£˘i⁄
(
«me
), 
u£d
)) \

29 
	`_Pøgma
("GCC diagnosticÖop") \

30 

	)

32 #unde‡
__Æways_ölöe


33 
	#__Æways_ölöe
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

35 #i‚de‡
__noölöe


36 
	#__noölöe
 
	`__©åibuã__
((
noölöe
))

	)

38 #i‚de‡
__wók


39 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

48 
	#__hiddí
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

56 #i‚de‡
NULL


57 
	#NULL
 ((*)0)

	)

60 #i‚de‡
KERNEL_VERSION


61 
	#KERNEL_VERSION
(
a
, 
b
, 
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ ((cË> 255 ? 255 : (c)))

	)

67 #i‚de‡
off£tof


68 
	#off£tof
(
TYPE
, 
MEMBER
Ë(()&((TYPE *)0)->MEMBER)

	)

70 #i‚de‡
c⁄èöî_of


71 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

73 *
__m±r
 = (*)(
±r
); \

74 ((
ty≥
 *)(
__m±r
 - 
	`off£tof
—y≥, 
membî
))); \

75 })

	)

81 #i‚de‡
b¨rõr


82 
	#b¨rõr
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

98 #i‚de‡
b¨rõr_v¨


99 
	#b¨rõr_v¨
(
v¨
Ë
asm
 vﬁ©ûe("" : "Ù"(v¨Ë: "0"(v¨))

	)

114 #i‚de‡
__bpf_uƒóchabÀ


115 
	#__bpf_uƒóchabÀ
(Ë
	`__buûtö_å≠
()

	)

121 #i‡
__˛™g_maj‹__
 >8 && 
deföed
(
__bpf__
)

122 
__Æways_ölöe
 

123 
	$bpf_èû_ˇŒ_°©ic
(*
˘x
, c⁄° *
m≠
, c⁄° 
__u32
 
¶Ÿ
)

125 i‡(!
	`__buûtö_c⁄°™t_p
(
¶Ÿ
))

126 
	`__bpf_uƒóchabÀ
();

141 
asm
 volatile("r1 = %[ctx]\n\t"

145 :: [
˘x
]"r"(˘x), [
m≠
]"r"(m≠), [
¶Ÿ
]"i"(slot)

147 
	}
}

154 
	sbpf_m≠_def
 {

155 
	mty≥
;

156 
	mkey_size
;

157 
	mvÆue_size
;

158 
	mmax_íåõs
;

159 
	mm≠_Êags
;

160 } 
__©åibuã__
((
dïªˇãd
("use BTF-defined maps in .maps section")));

162 
	elibbpf_pö_ty≥
 {

163 
	mLIBBPF_PIN_NONE
,

165 
	mLIBBPF_PIN_BY_NAME
,

168 
	elibbpf_åi°©e
 {

169 
	mTRI_NO
 = 0,

170 
	mTRI_YES
 = 1,

171 
	mTRI_MODULE
 = 2,

174 
	#__kc⁄fig
 
	`__©åibuã__
((
	`£˘i⁄
(".kc⁄fig")))

	)

175 
	#__ksym
 
	`__©åibuã__
((
	`£˘i⁄
(".ksyms")))

	)

176 
	#__k±r
 
	`__©åibuã__
((
	`btf_ty≥_èg
("k±r")))

	)

177 
	#__k±r_ªf
 
	`__©åibuã__
((
	`btf_ty≥_èg
("k±r_ªf")))

	)

179 #i‚de‡
___bpf_c⁄ˇt


180 
	#___bpf_c⁄ˇt
(
a
, 
b
Ë®## 
	)
b

182 #i‚de‡
___bpf_≠∂y


183 
	#___bpf_≠∂y
(
‚
, 
n
Ë
	`___bpf_c⁄ˇt
(‚,Ç)

	)

185 #i‚de‡
___bpf_¡h


186 
	#___bpf_¡h
(
_
, 
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_a
, 
_b
, 
_c
, 
N
, ...Ë
	)
N

188 #i‚de‡
___bpf_«rg


189 
	#___bpf_«rg
(...) \

190 
	`___bpf_¡h
(
_
, ##
__VA_ARGS__
, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

	)

193 
	#___bpf_fûl0
(
¨r
, 
p
, 
x
Ëdÿ{} 0)

	)

194 
	#___bpf_fûl1
(
¨r
, 
p
, 
x
Ë¨r[p] = 
	)
x

195 
	#___bpf_fûl2
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl1
◊º,Ö + 1,árgs)

	)

196 
	#___bpf_fûl3
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl2
◊º,Ö + 1,árgs)

	)

197 
	#___bpf_fûl4
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl3
◊º,Ö + 1,árgs)

	)

198 
	#___bpf_fûl5
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl4
◊º,Ö + 1,árgs)

	)

199 
	#___bpf_fûl6
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl5
◊º,Ö + 1,árgs)

	)

200 
	#___bpf_fûl7
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl6
◊º,Ö + 1,árgs)

	)

201 
	#___bpf_fûl8
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl7
◊º,Ö + 1,árgs)

	)

202 
	#___bpf_fûl9
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl8
◊º,Ö + 1,árgs)

	)

203 
	#___bpf_fûl10
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl9
◊º,Ö + 1,árgs)

	)

204 
	#___bpf_fûl11
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl10
◊º,Ö + 1,árgs)

	)

205 
	#___bpf_fûl12
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl11
◊º,Ö + 1,árgs)

	)

206 
	#___bpf_fûl
(
¨r
, 
¨gs
...) \

207 
	`___bpf_≠∂y
(
___bpf_fûl
, 
	`___bpf_«rg
(
¨gs
))(
¨r
, 0,árgs)

	)

213 
	#BPF_SEQ_PRINTF
(
£q
, 
fmt
, 
¨gs
...) \

215 c⁄° 
___fmt
[] = 
fmt
; \

216 
___∑øm
[
	`___bpf_«rg
(
¨gs
)]; \

218 
	`_Pøgma
("GCC diagnosticÖush") \

219 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

220 
	`___bpf_fûl
(
___∑øm
, 
¨gs
); \

221 
	`_Pøgma
("GCC diagnosticÖop") \

223 
	`bpf_£q_¥ötf
(
£q
, 
___fmt
, (___fmt), \

224 
___∑øm
, (___param)); \

225 })

	)

231 
	#BPF_SNPRINTF
(
out
, 
out_size
, 
fmt
, 
¨gs
...) \

233 c⁄° 
___fmt
[] = 
fmt
; \

234 
___∑øm
[
	`___bpf_«rg
(
¨gs
)]; \

236 
	`_Pøgma
("GCC diagnosticÖush") \

237 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

238 
	`___bpf_fûl
(
___∑øm
, 
¨gs
); \

239 
	`_Pøgma
("GCC diagnosticÖop") \

241 
	`bpf_¢¥ötf
(
out
, 
out_size
, 
___fmt
, \

242 
___∑øm
, (___param)); \

243 })

	)

245 #ifde‡
BPF_NO_GLOBAL_DATA


246 
	#BPF_PRINTK_FMT_MOD


	)

248 
	#BPF_PRINTK_FMT_MOD
 c⁄°

	)

251 
	#__bpf_¥ötk
(
fmt
, ...) \

253 
BPF_PRINTK_FMT_MOD
 
____fmt
[] = 
fmt
; \

254 
	`bpf_åa˚_¥ötk
(
____fmt
, (____fmt), \

255 ##
__VA_ARGS__
); \

256 })

	)

262 
	#__bpf_v¥ötk
(
fmt
, 
¨gs
...) \

264 c⁄° 
___fmt
[] = 
fmt
; \

265 
___∑øm
[
	`___bpf_«rg
(
¨gs
)]; \

267 
	`_Pøgma
("GCC diagnosticÖush") \

268 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

269 
	`___bpf_fûl
(
___∑øm
, 
¨gs
); \

270 
	`_Pøgma
("GCC diagnosticÖop") \

272 
	`bpf_åa˚_v¥ötk
(
___fmt
, (___fmt), \

273 
___∑øm
, (___param)); \

274 })

	)

279 
	#___bpf_pick_¥ötk
(...) \

280 
	`___bpf_¡h
(
_
, ##
__VA_ARGS__
, 
__bpf_v¥ötk
, __bpf_vprintk, __bpf_vprintk, \

281 
__bpf_v¥ötk
, __bpf_vprintk, __bpf_vprintk, __bpf_vprintk, \

282 
__bpf_v¥ötk
, __bpf_v¥ötk, 
__bpf_¥ötk
 , __bpf_printk ,\

283 
__bpf_¥ötk
 , __bpf_¥ötk )

	)

286 
	#bpf_¥ötk
(
fmt
, 
¨gs
...Ë
	`___bpf_pick_¥ötk
◊rgs)(fmt, ##¨gs)

	)

	@build/usr/include/bpf/bpf_tracing.h

2 #i‚de‡
__BPF_TRACING_H__


3 
	#__BPF_TRACING_H__


	)

6 #i‡
deföed
(
__TARGET_ARCH_x86
)

7 
	#bpf_èrgë_x86


	)

8 
	#bpf_èrgë_deföed


	)

9 #ñi‡
deföed
(
__TARGET_ARCH_s390
)

10 
	#bpf_èrgë_s390


	)

11 
	#bpf_èrgë_deföed


	)

12 #ñi‡
deföed
(
__TARGET_ARCH_¨m
)

13 
	#bpf_èrgë_¨m


	)

14 
	#bpf_èrgë_deföed


	)

15 #ñi‡
deföed
(
__TARGET_ARCH_¨m64
)

16 
	#bpf_èrgë_¨m64


	)

17 
	#bpf_èrgë_deföed


	)

18 #ñi‡
deföed
(
__TARGET_ARCH_mùs
)

19 
	#bpf_èrgë_mùs


	)

20 
	#bpf_èrgë_deföed


	)

21 #ñi‡
deföed
(
__TARGET_ARCH_powîpc
)

22 
	#bpf_èrgë_powîpc


	)

23 
	#bpf_èrgë_deföed


	)

24 #ñi‡
deföed
(
__TARGET_ARCH_•¨c
)

25 
	#bpf_èrgë_•¨c


	)

26 
	#bpf_èrgë_deföed


	)

27 #ñi‡
deföed
(
__TARGET_ARCH_riscv
)

28 
	#bpf_èrgë_riscv


	)

29 
	#bpf_èrgë_deföed


	)

30 #ñi‡
deföed
(
__TARGET_ARCH_¨c
)

31 
	#bpf_èrgë_¨c


	)

32 
	#bpf_èrgë_deföed


	)

36 #i‡
deföed
(
__x86_64__
)

37 
	#bpf_èrgë_x86


	)

38 
	#bpf_èrgë_deföed


	)

39 #ñi‡
deföed
(
__s390__
)

40 
	#bpf_èrgë_s390


	)

41 
	#bpf_èrgë_deföed


	)

42 #ñi‡
deföed
(
__¨m__
)

43 
	#bpf_èrgë_¨m


	)

44 
	#bpf_èrgë_deföed


	)

45 #ñi‡
deföed
(
__Ørch64__
)

46 
	#bpf_èrgë_¨m64


	)

47 
	#bpf_èrgë_deföed


	)

48 #ñi‡
deföed
(
__mùs__
)

49 
	#bpf_èrgë_mùs


	)

50 
	#bpf_èrgë_deföed


	)

51 #ñi‡
deföed
(
__powîpc__
)

52 
	#bpf_èrgë_powîpc


	)

53 
	#bpf_èrgë_deföed


	)

54 #ñi‡
deföed
(
__•¨c__
)

55 
	#bpf_èrgë_•¨c


	)

56 
	#bpf_èrgë_deföed


	)

57 #ñi‡
deföed
(
__riscv
Ë&& 
__riscv_xÀn
 == 64

58 
	#bpf_èrgë_riscv


	)

59 
	#bpf_èrgë_deföed


	)

60 #ñi‡
deföed
(
__¨c__
)

61 
	#bpf_èrgë_¨c


	)

62 
	#bpf_èrgë_deföed


	)

67 #i‚de‡
__BPF_TARGET_MISSING


68 
	#__BPF_TARGET_MISSING
 "GCCÉº‹ \"Mu° s≥cifyá BPFÅ¨gëárch vü __TARGET_ARCH_xxx\""

	)

71 #i‡
deföed
(
bpf_èrgë_x86
)

73 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__VMLINUX_H__
)

75 
	#__PT_PARM1_REG
 
di


	)

76 
	#__PT_PARM2_REG
 
si


	)

77 
	#__PT_PARM3_REG
 
dx


	)

78 
	#__PT_PARM4_REG
 
cx


	)

79 
	#__PT_PARM5_REG
 
r8


	)

80 
	#__PT_RET_REG
 
•


	)

81 
	#__PT_FP_REG
 
bp


	)

82 
	#__PT_RC_REG
 
ax


	)

83 
	#__PT_SP_REG
 
•


	)

84 
	#__PT_IP_REG
 
ù


	)

86 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë((x)->
r10
)

	)

87 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
(x, 
r10
)

	)

91 #ifde‡
__i386__


93 
	#__PT_PARM1_REG
 
óx


	)

94 
	#__PT_PARM2_REG
 
edx


	)

95 
	#__PT_PARM3_REG
 
ecx


	)

97 
	#__PT_PARM4_REG
 
__unsuµ‹ãd__


	)

98 
	#__PT_PARM5_REG
 
__unsuµ‹ãd__


	)

99 
	#__PT_RET_REG
 
e•


	)

100 
	#__PT_FP_REG
 
ebp


	)

101 
	#__PT_RC_REG
 
óx


	)

102 
	#__PT_SP_REG
 
e•


	)

103 
	#__PT_IP_REG
 
eù


	)

107 
	#__PT_PARM1_REG
 
rdi


	)

108 
	#__PT_PARM2_REG
 
rsi


	)

109 
	#__PT_PARM3_REG
 
rdx


	)

110 
	#__PT_PARM4_REG
 
rcx


	)

111 
	#__PT_PARM5_REG
 
r8


	)

112 
	#__PT_RET_REG
 
r•


	)

113 
	#__PT_FP_REG
 
rbp


	)

114 
	#__PT_RC_REG
 
øx


	)

115 
	#__PT_SP_REG
 
r•


	)

116 
	#__PT_IP_REG
 
rù


	)

118 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë((x)->
r10
)

	)

119 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
(x, 
r10
)

	)

125 #ñi‡
deföed
(
bpf_èrgë_s390
)

127 
	s±_ªgs___s390
 {

128 
	m‹ig_g¥2
;

132 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_±_ªgs
 *)(x))

	)

133 
	#__PT_PARM1_REG
 
g¥s
[2]

	)

134 
	#__PT_PARM2_REG
 
g¥s
[3]

	)

135 
	#__PT_PARM3_REG
 
g¥s
[4]

	)

136 
	#__PT_PARM4_REG
 
g¥s
[5]

	)

137 
	#__PT_PARM5_REG
 
g¥s
[6]

	)

138 
	#__PT_RET_REG
 
gΩs
[14]

	)

139 
	#__PT_FP_REG
 
g¥s
[11]

	)

140 
	#__PT_RC_REG
 
g¥s
[2]

	)

141 
	#__PT_SP_REG
 
g¥s
[15]

	)

142 
	#__PT_IP_REG
 
psw
.
addr


	)

143 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë({ 
	`_Pøgma
("GCCÉº‹ \"u£ PT_REGS_PARM1_CORE_SYSCALL(Ëö°ód\""); 0l; })

	)

144 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
((c⁄° 
±_ªgs___s390
 *)(x), 
‹ig_g¥2
)

	)

146 #ñi‡
deföed
(
bpf_èrgë_¨m
)

148 
	#__PT_PARM1_REG
 
uªgs
[0]

	)

149 
	#__PT_PARM2_REG
 
uªgs
[1]

	)

150 
	#__PT_PARM3_REG
 
uªgs
[2]

	)

151 
	#__PT_PARM4_REG
 
uªgs
[3]

	)

152 
	#__PT_PARM5_REG
 
uªgs
[4]

	)

153 
	#__PT_RET_REG
 
uªgs
[14]

	)

154 
	#__PT_FP_REG
 
uªgs
[11]

	)

155 
	#__PT_RC_REG
 
uªgs
[0]

	)

156 
	#__PT_SP_REG
 
uªgs
[13]

	)

157 
	#__PT_IP_REG
 
uªgs
[12]

	)

159 #ñi‡
deföed
(
bpf_èrgë_¨m64
)

161 
	s±_ªgs___¨m64
 {

162 
	m‹ig_x0
;

166 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_±_ªgs
 *)(x))

	)

167 
	#__PT_PARM1_REG
 
ªgs
[0]

	)

168 
	#__PT_PARM2_REG
 
ªgs
[1]

	)

169 
	#__PT_PARM3_REG
 
ªgs
[2]

	)

170 
	#__PT_PARM4_REG
 
ªgs
[3]

	)

171 
	#__PT_PARM5_REG
 
ªgs
[4]

	)

172 
	#__PT_RET_REG
 
ªgs
[30]

	)

173 
	#__PT_FP_REG
 
ªgs
[29]

	)

174 
	#__PT_RC_REG
 
ªgs
[0]

	)

175 
	#__PT_SP_REG
 
•


	)

176 
	#__PT_IP_REG
 
pc


	)

177 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë({ 
	`_Pøgma
("GCCÉº‹ \"u£ PT_REGS_PARM1_CORE_SYSCALL(Ëö°ód\""); 0l; })

	)

178 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
((c⁄° 
±_ªgs___¨m64
 *)(x), 
‹ig_x0
)

	)

180 #ñi‡
deföed
(
bpf_èrgë_mùs
)

182 
	#__PT_PARM1_REG
 
ªgs
[4]

	)

183 
	#__PT_PARM2_REG
 
ªgs
[5]

	)

184 
	#__PT_PARM3_REG
 
ªgs
[6]

	)

185 
	#__PT_PARM4_REG
 
ªgs
[7]

	)

186 
	#__PT_PARM5_REG
 
ªgs
[8]

	)

187 
	#__PT_RET_REG
 
ªgs
[31]

	)

188 
	#__PT_FP_REG
 
ªgs
[30]

	)

189 
	#__PT_RC_REG
 
ªgs
[2]

	)

190 
	#__PT_SP_REG
 
ªgs
[29]

	)

191 
	#__PT_IP_REG
 
˝0_ïc


	)

193 #ñi‡
deföed
(
bpf_èrgë_powîpc
)

195 
	#__PT_PARM1_REG
 
g¥
[3]

	)

196 
	#__PT_PARM2_REG
 
g¥
[4]

	)

197 
	#__PT_PARM3_REG
 
g¥
[5]

	)

198 
	#__PT_PARM4_REG
 
g¥
[6]

	)

199 
	#__PT_PARM5_REG
 
g¥
[7]

	)

200 
	#__PT_RET_REG
 
ªgs
[31]

	)

201 
	#__PT_FP_REG
 
__unsuµ‹ãd__


	)

202 
	#__PT_RC_REG
 
g¥
[3]

	)

203 
	#__PT_SP_REG
 
•


	)

204 
	#__PT_IP_REG
 
nù


	)

206 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë
	)
ctx

208 #ñi‡
deföed
(
bpf_èrgë_•¨c
)

210 
	#__PT_PARM1_REG
 
u_ªgs
[
UREG_I0
]

	)

211 
	#__PT_PARM2_REG
 
u_ªgs
[
UREG_I1
]

	)

212 
	#__PT_PARM3_REG
 
u_ªgs
[
UREG_I2
]

	)

213 
	#__PT_PARM4_REG
 
u_ªgs
[
UREG_I3
]

	)

214 
	#__PT_PARM5_REG
 
u_ªgs
[
UREG_I4
]

	)

215 
	#__PT_RET_REG
 
u_ªgs
[
UREG_I7
]

	)

216 
	#__PT_FP_REG
 
__unsuµ‹ãd__


	)

217 
	#__PT_RC_REG
 
u_ªgs
[
UREG_I0
]

	)

218 
	#__PT_SP_REG
 
u_ªgs
[
UREG_FP
]

	)

220 #i‡
deföed
(
__¨ch64__
)

221 
	#__PT_IP_REG
 
çc


	)

223 
	#__PT_IP_REG
 
pc


	)

226 #ñi‡
deföed
(
bpf_èrgë_riscv
)

228 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_ªgs_°ru˘
 *)(x))

	)

229 
	#__PT_PARM1_REG
 
a0


	)

230 
	#__PT_PARM2_REG
 
a1


	)

231 
	#__PT_PARM3_REG
 
a2


	)

232 
	#__PT_PARM4_REG
 
a3


	)

233 
	#__PT_PARM5_REG
 
a4


	)

234 
	#__PT_RET_REG
 
ø


	)

235 
	#__PT_FP_REG
 
s0


	)

236 
	#__PT_RC_REG
 
a5


	)

237 
	#__PT_SP_REG
 
•


	)

238 
	#__PT_IP_REG
 
pc


	)

240 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë
	)
ctx

242 #ñi‡
deföed
(
bpf_èrgë_¨c
)

245 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_ªgs_°ru˘
 *)(x))

	)

246 
	#__PT_PARM1_REG
 
s¸©ch
.
r0


	)

247 
	#__PT_PARM2_REG
 
s¸©ch
.
r1


	)

248 
	#__PT_PARM3_REG
 
s¸©ch
.
r2


	)

249 
	#__PT_PARM4_REG
 
s¸©ch
.
r3


	)

250 
	#__PT_PARM5_REG
 
s¸©ch
.
r4


	)

251 
	#__PT_RET_REG
 
s¸©ch
.
blök


	)

252 
	#__PT_FP_REG
 
__unsuµ‹ãd__


	)

253 
	#__PT_RC_REG
 
s¸©ch
.
r0


	)

254 
	#__PT_SP_REG
 
s¸©ch
.
•


	)

255 
	#__PT_IP_REG
 
s¸©ch
.
ªt


	)

257 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë
	)
ctx

261 #i‡
deföed
(
bpf_èrgë_deföed
)

263 
	g±_ªgs
;

266 #i‚de‡
__PT_REGS_CAST


267 
	#__PT_REGS_CAST
(
x
Ë(x)

	)

270 
	#PT_REGS_PARM1
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM1_REG
)

	)

271 
	#PT_REGS_PARM2
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM2_REG
)

	)

272 
	#PT_REGS_PARM3
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM3_REG
)

	)

273 
	#PT_REGS_PARM4
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM4_REG
)

	)

274 
	#PT_REGS_PARM5
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM5_REG
)

	)

275 
	#PT_REGS_RET
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_RET_REG
)

	)

276 
	#PT_REGS_FP
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_FP_REG
)

	)

277 
	#PT_REGS_RC
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_RC_REG
)

	)

278 
	#PT_REGS_SP
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_SP_REG
)

	)

279 
	#PT_REGS_IP
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_IP_REG
)

	)

281 
	#PT_REGS_PARM1_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM1_REG
)

	)

282 
	#PT_REGS_PARM2_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM2_REG
)

	)

283 
	#PT_REGS_PARM3_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM3_REG
)

	)

284 
	#PT_REGS_PARM4_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM4_REG
)

	)

285 
	#PT_REGS_PARM5_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM5_REG
)

	)

286 
	#PT_REGS_RET_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_RET_REG
)

	)

287 
	#PT_REGS_FP_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_FP_REG
)

	)

288 
	#PT_REGS_RC_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_RC_REG
)

	)

289 
	#PT_REGS_SP_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_SP_REG
)

	)

290 
	#PT_REGS_IP_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_IP_REG
)

	)

292 #i‡
deföed
(
bpf_èrgë_powîpc
)

294 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ (ùË(˘x)->
lök
; })

	)

295 
	#BPF_KRETPROBE_READ_RET_IP
 
BPF_KPROBE_READ_RET_IP


	)

297 #ñi‡
deföed
(
bpf_èrgë_•¨c
)

299 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ (ùË
	`PT_REGS_RET
(˘x); })

	)

300 
	#BPF_KRETPROBE_READ_RET_IP
 
BPF_KPROBE_READ_RET_IP


	)

304 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
) \

305 ({ 
	`bpf_¥obe_ªad_kî√l
(&(
ù
), (ù), (*)
	`PT_REGS_RET
(
˘x
)); })

	)

306 
	#BPF_KRETPROBE_READ_RET_IP
(
ù
, 
˘x
) \

307 ({ 
	`bpf_¥obe_ªad_kî√l
(&(
ù
), (ù), (*)(
	`PT_REGS_FP
(
˘x
Ë+ (ù))); })

	)

311 #i‚de‡
PT_REGS_PARM1_SYSCALL


312 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë
	`PT_REGS_PARM1
(x)

	)

314 
	#PT_REGS_PARM2_SYSCALL
(
x
Ë
	`PT_REGS_PARM2
(x)

	)

315 
	#PT_REGS_PARM3_SYSCALL
(
x
Ë
	`PT_REGS_PARM3
(x)

	)

316 #i‚de‡
PT_REGS_PARM4_SYSCALL


317 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë
	`PT_REGS_PARM4
(x)

	)

319 
	#PT_REGS_PARM5_SYSCALL
(
x
Ë
	`PT_REGS_PARM5
(x)

	)

321 #i‚de‡
PT_REGS_PARM1_CORE_SYSCALL


322 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM1_CORE
(x)

	)

324 
	#PT_REGS_PARM2_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM2_CORE
(x)

	)

325 
	#PT_REGS_PARM3_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM3_CORE
(x)

	)

326 #i‚de‡
PT_REGS_PARM4_CORE_SYSCALL


327 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM4_CORE
(x)

	)

329 
	#PT_REGS_PARM5_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM5_CORE
(x)

	)

333 
	#PT_REGS_PARM1
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

334 
	#PT_REGS_PARM2
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

335 
	#PT_REGS_PARM3
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

336 
	#PT_REGS_PARM4
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

337 
	#PT_REGS_PARM5
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

338 
	#PT_REGS_RET
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

339 
	#PT_REGS_FP
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

340 
	#PT_REGS_RC
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

341 
	#PT_REGS_SP
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

342 
	#PT_REGS_IP
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

344 
	#PT_REGS_PARM1_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

345 
	#PT_REGS_PARM2_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

346 
	#PT_REGS_PARM3_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

347 
	#PT_REGS_PARM4_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

348 
	#PT_REGS_PARM5_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

349 
	#PT_REGS_RET_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

350 
	#PT_REGS_FP_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

351 
	#PT_REGS_RC_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

352 
	#PT_REGS_SP_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

353 
	#PT_REGS_IP_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

355 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

356 
	#BPF_KRETPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

358 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

359 
	#PT_REGS_PARM2_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

360 
	#PT_REGS_PARM3_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

361 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

362 
	#PT_REGS_PARM5_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

364 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

365 
	#PT_REGS_PARM2_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

366 
	#PT_REGS_PARM3_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

367 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

368 
	#PT_REGS_PARM5_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

377 #i‚de‡
PT_REGS_SYSCALL_REGS


379 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë((
±_ªgs
 *)
	`PT_REGS_PARM1
(˘x))

	)

382 #i‚de‡
___bpf_c⁄ˇt


383 
	#___bpf_c⁄ˇt
(
a
, 
b
Ë®## 
	)
b

385 #i‚de‡
___bpf_≠∂y


386 
	#___bpf_≠∂y
(
‚
, 
n
Ë
	`___bpf_c⁄ˇt
(‚,Ç)

	)

388 #i‚de‡
___bpf_¡h


389 
	#___bpf_¡h
(
_
, 
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_a
, 
_b
, 
_c
, 
N
, ...Ë
	)
N

391 #i‚de‡
___bpf_«rg


392 
	#___bpf_«rg
(...Ë
	`___bpf_¡h
(
_
, ##
__VA_ARGS__
, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

	)

395 
	#___bpf_˘x_ˇ°0
(Ë
˘x


	)

396 
	#___bpf_˘x_ˇ°1
(
x
Ë
	`___bpf_˘x_ˇ°0
(), (*)
˘x
[0]

	)

397 
	#___bpf_˘x_ˇ°2
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°1
◊rgs), (*)
˘x
[1]

	)

398 
	#___bpf_˘x_ˇ°3
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°2
◊rgs), (*)
˘x
[2]

	)

399 
	#___bpf_˘x_ˇ°4
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°3
◊rgs), (*)
˘x
[3]

	)

400 
	#___bpf_˘x_ˇ°5
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°4
◊rgs), (*)
˘x
[4]

	)

401 
	#___bpf_˘x_ˇ°6
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°5
◊rgs), (*)
˘x
[5]

	)

402 
	#___bpf_˘x_ˇ°7
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°6
◊rgs), (*)
˘x
[6]

	)

403 
	#___bpf_˘x_ˇ°8
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°7
◊rgs), (*)
˘x
[7]

	)

404 
	#___bpf_˘x_ˇ°9
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°8
◊rgs), (*)
˘x
[8]

	)

405 
	#___bpf_˘x_ˇ°10
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°9
◊rgs), (*)
˘x
[9]

	)

406 
	#___bpf_˘x_ˇ°11
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°10
◊rgs), (*)
˘x
[10]

	)

407 
	#___bpf_˘x_ˇ°12
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°11
◊rgs), (*)
˘x
[11]

	)

408 
	#___bpf_˘x_ˇ°
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_˘x_ˇ°
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

425 
	#BPF_PROG
(
«me
, 
¨gs
...) \

426 
	`«me
(*
˘x
); \

427 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

428 
____
##
	`«me
(*
˘x
, ##
¨gs
); \

429 
	`ty≥of
(
	`«me
(0)Ë«me(*
˘x
) \

431 
	`_Pøgma
("GCC diagnosticÖush") \

432 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

433  
____
##
	`«me
(
	`___bpf_˘x_ˇ°
(
¨gs
)); \

434 
	`_Pøgma
("GCC diagnosticÖop") \

436 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

437 
____
##
	`«me
(*
˘x
, ##
¨gs
)

	)

439 
	g±_ªgs
;

441 
	#___bpf_k¥obe_¨gs0
(Ë
˘x


	)

442 
	#___bpf_k¥obe_¨gs1
(
x
Ë
	`___bpf_k¥obe_¨gs0
(), (*)
	`PT_REGS_PARM1
(
˘x
)

	)

443 
	#___bpf_k¥obe_¨gs2
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs1
◊rgs), (*)
	`PT_REGS_PARM2
(
˘x
)

	)

444 
	#___bpf_k¥obe_¨gs3
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs2
◊rgs), (*)
	`PT_REGS_PARM3
(
˘x
)

	)

445 
	#___bpf_k¥obe_¨gs4
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs3
◊rgs), (*)
	`PT_REGS_PARM4
(
˘x
)

	)

446 
	#___bpf_k¥obe_¨gs5
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs4
◊rgs), (*)
	`PT_REGS_PARM5
(
˘x
)

	)

447 
	#___bpf_k¥obe_¨gs
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_k¥obe_¨gs
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

459 
	#BPF_KPROBE
(
«me
, 
¨gs
...) \

460 
	`«me
(
±_ªgs
 *
˘x
); \

461 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

462 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
); \

463 
	`ty≥of
(
	`«me
(0)Ë«me(
±_ªgs
 *
˘x
) \

465 
	`_Pøgma
("GCC diagnosticÖush") \

466 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

467  
____
##
	`«me
(
	`___bpf_k¥obe_¨gs
(
¨gs
)); \

468 
	`_Pøgma
("GCC diagnosticÖop") \

470 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

471 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
)

	)

473 
	#___bpf_kªçrobe_¨gs0
(Ë
˘x


	)

474 
	#___bpf_kªçrobe_¨gs1
(
x
Ë
	`___bpf_kªçrobe_¨gs0
(), (*)
	`PT_REGS_RC
(
˘x
)

	)

475 
	#___bpf_kªçrobe_¨gs
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_kªçrobe_¨gs
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

483 
	#BPF_KRETPROBE
(
«me
, 
¨gs
...) \

484 
	`«me
(
±_ªgs
 *
˘x
); \

485 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

486 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
); \

487 
	`ty≥of
(
	`«me
(0)Ë«me(
±_ªgs
 *
˘x
) \

489 
	`_Pøgma
("GCC diagnosticÖush") \

490 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

491  
____
##
	`«me
(
	`___bpf_kªçrobe_¨gs
(
¨gs
)); \

492 
	`_Pøgma
("GCC diagnosticÖop") \

494 
__Æways_ölöe
 
	`ty≥of
(
	`«me
(0)Ë
____
##«me(
±_ªgs
 *
˘x
, ##
¨gs
)

	)

496 
	#___bpf_sysˇŒ_¨gs0
(Ë
˘x


	)

497 
	#___bpf_sysˇŒ_¨gs1
(
x
Ë
	`___bpf_sysˇŒ_¨gs0
(), (*)
	`PT_REGS_PARM1_CORE_SYSCALL
(
ªgs
)

	)

498 
	#___bpf_sysˇŒ_¨gs2
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs1
◊rgs), (*)
	`PT_REGS_PARM2_CORE_SYSCALL
(
ªgs
)

	)

499 
	#___bpf_sysˇŒ_¨gs3
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs2
◊rgs), (*)
	`PT_REGS_PARM3_CORE_SYSCALL
(
ªgs
)

	)

500 
	#___bpf_sysˇŒ_¨gs4
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs3
◊rgs), (*)
	`PT_REGS_PARM4_CORE_SYSCALL
(
ªgs
)

	)

501 
	#___bpf_sysˇŒ_¨gs5
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs4
◊rgs), (*)
	`PT_REGS_PARM5_CORE_SYSCALL
(
ªgs
)

	)

502 
	#___bpf_sysˇŒ_¨gs
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_sysˇŒ_¨gs
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

516 
	#BPF_KPROBE_SYSCALL
(
«me
, 
¨gs
...) \

517 
	`«me
(
±_ªgs
 *
˘x
); \

518 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

519 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
); \

520 
	`ty≥of
(
	`«me
(0)Ë«me(
±_ªgs
 *
˘x
) \

522 
±_ªgs
 *
ªgs
 = 
	`PT_REGS_SYSCALL_REGS
(
˘x
); \

523 
	`_Pøgma
("GCC diagnosticÖush") \

524 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

525  
____
##
	`«me
(
	`___bpf_sysˇŒ_¨gs
(
¨gs
)); \

526 
	`_Pøgma
("GCC diagnosticÖop") \

528 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

529 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
)

	)

	@build/usr/include/bpf/btf.h

5 #i‚de‡
__LIBBPF_BTF_H


6 
	#__LIBBPF_BTF_H


	)

8 
	~<°d¨g.h
>

9 
	~<°dboﬁ.h
>

10 
	~<löux/btf.h
>

11 
	~<löux/ty≥s.h
>

13 
	~"libbpf_comm⁄.h
"

15 #ifde‡
__˝lu•lus


19 
	#BTF_ELF_SEC
 ".BTF"

	)

20 
	#BTF_EXT_ELF_SEC
 ".BTF.ext"

	)

21 
	#MAPS_ELF_SEC
 ".m≠s"

	)

23 
btf
;

24 
btf_ext
;

25 
btf_ty≥
;

27 
bpf_obje˘
;

29 
	ebtf_ídü¬ess
 {

30 
BTF_LITTLE_ENDIAN
 = 0,

31 
BTF_BIG_ENDIAN
 = 1,

38 
LIBBPF_API
 
btf__‰ì
(
btf
 *btf);

54 
LIBBPF_API
 
btf
 *
btf__√w
(c⁄° *
d©a
, 
__u32
 
size
);

76 
LIBBPF_API
 
btf
 *
btf__√w_•lô
(c⁄° *
d©a
, 
__u32
 
size
, bt‡*
ba£_btf
);

90 
LIBBPF_API
 
btf
 *
btf__√w_em±y
();

108 
LIBBPF_API
 
btf
 *
btf__√w_em±y_•lô
(bt‡*
ba£_btf
);

110 
LIBBPF_API
 
btf
 *
btf__∑r£
(c⁄° *
∑th
, 
btf_ext
 **btf_ext);

111 
LIBBPF_API
 
btf
 *
btf__∑r£_•lô
(c⁄° *
∑th
, bt‡*
ba£_btf
);

112 
LIBBPF_API
 
btf
 *
btf__∑r£_ñf
(c⁄° *
∑th
, 
btf_ext
 **btf_ext);

113 
LIBBPF_API
 
btf
 *
btf__∑r£_ñf_•lô
(c⁄° *
∑th
, bt‡*
ba£_btf
);

114 
LIBBPF_API
 
btf
 *
btf__∑r£_øw
(c⁄° *
∑th
);

115 
LIBBPF_API
 
btf
 *
btf__∑r£_øw_•lô
(c⁄° *
∑th
, bt‡*
ba£_btf
);

117 
LIBBPF_API
 
btf
 *
btf__lﬂd_vmlöux_btf
();

118 
LIBBPF_API
 
btf
 *
btf__lﬂd_moduÀ_btf
(c⁄° *
moduÀ_«me
, bt‡*
vmlöux_btf
);

119 
LIBBPF_API
 
btf
 *
libbpf_föd_kî√l_btf
();

121 
LIBBPF_API
 
btf
 *
btf__lﬂd_‰om_kî√l_by_id
(
__u32
 
id
);

122 
LIBBPF_API
 
btf
 *
btf__lﬂd_‰om_kî√l_by_id_•lô
(
__u32
 
id
, bt‡*
ba£_btf
);

123 
LIBBPF_DEPRECATED_SINCE
(0, 6, "use btf__load_from_kernel_by_id instead")

124 
LIBBPF_API
 
btf__gë_‰om_id
(
__u32
 
id
, 
btf
 **btf);

126 
LIBBPF_DEPRECATED_SINCE
(0, 6, "intended for internalÜibbpf use only")

127 
LIBBPF_API
 
btf__föÆize_d©a
(
bpf_obje˘
 *
obj
, 
btf
 *btf);

128 
LIBBPF_DEPRECATED_SINCE
(0, 6, "use btf__load_into_kernel instead")

129 
LIBBPF_API
 
btf__lﬂd
(
btf
 *btf);

130 
LIBBPF_API
 
btf__lﬂd_öto_kî√l
(
btf
 *btf);

131 
LIBBPF_API
 
__s32
 
btf__föd_by_«me
(c⁄° 
btf
 *btf,

132 c⁄° *
ty≥_«me
);

133 
LIBBPF_API
 
__s32
 
btf__föd_by_«me_köd
(c⁄° 
btf
 *btf,

134 c⁄° *
ty≥_«me
, 
__u32
 
köd
);

135 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use btf__type_cnt() instead;ÇoteÅhat btf__get_nr_types() == btf__type_cnt() - 1")

136 
LIBBPF_API
 
__u32
 
btf__gë_ƒ_ty≥s
(c⁄° 
btf
 *btf);

137 
LIBBPF_API
 
__u32
 
btf__ty≥_˙t
(c⁄° 
btf
 *btf);

138 
LIBBPF_API
 c⁄° 
btf
 *
btf__ba£_btf
(const btf *btf);

139 
LIBBPF_API
 c⁄° 
btf_ty≥
 *
btf__ty≥_by_id
(c⁄° 
btf
 *btf,

140 
__u32
 
id
);

141 
LIBBPF_API
 
size_t
 
btf__poöãr_size
(c⁄° 
btf
 *btf);

142 
LIBBPF_API
 
btf__£t_poöãr_size
(
btf
 *btf, 
size_t
 
±r_sz
);

143 
LIBBPF_API
 
btf_ídü¬ess
 
btf__ídü¬ess
(c⁄° 
btf
 *btf);

144 
LIBBPF_API
 
btf__£t_ídü¬ess
(
btf
 *btf, 
btf_ídü¬ess
 
ídün
);

145 
LIBBPF_API
 
__s64
 
btf__ªsﬁve_size
(c⁄° 
btf
 *btf, 
__u32
 
ty≥_id
);

146 
LIBBPF_API
 
btf__ªsﬁve_ty≥
(c⁄° 
btf
 *btf, 
__u32
 
ty≥_id
);

147 
LIBBPF_API
 
btf__Æign_of
(c⁄° 
btf
 *btf, 
__u32
 
id
);

148 
LIBBPF_API
 
btf__fd
(c⁄° 
btf
 *btf);

149 
LIBBPF_API
 
btf__£t_fd
(
btf
 *btf, 
fd
);

150 
LIBBPF_API
 c⁄° *
btf__øw_d©a
(c⁄° 
btf
 *btf, 
__u32
 *
size
);

151 
LIBBPF_API
 c⁄° *
btf__«me_by_off£t
(c⁄° 
btf
 *btf, 
__u32
 
off£t
);

152 
LIBBPF_API
 c⁄° *
btf__°r_by_off£t
(c⁄° 
btf
 *btf, 
__u32
 
off£t
);

153 
LIBBPF_DEPRECATED_SINCE
(0, 7, "this API isÇotÇecessary when BTF-defined mapsáre used")

154 
LIBBPF_API
 
btf__gë_m≠_kv_tids
(c⁄° 
btf
 *btf, c⁄° *
m≠_«me
,

155 
__u32
 
ex≥˘ed_key_size
,

156 
__u32
 
ex≥˘ed_vÆue_size
,

157 
__u32
 *
key_ty≥_id
, __u32 *
vÆue_ty≥_id
);

159 
LIBBPF_API
 
btf_ext
 *
btf_ext__√w
(c⁄° 
__u8
 *
d©a
, 
__u32
 
size
);

160 
LIBBPF_API
 
btf_ext__‰ì
(
btf_ext
 *btf_ext);

161 
LIBBPF_API
 c⁄° *
btf_ext__øw_d©a
(c⁄° 
btf_ext
 *btf_ext, 
__u32
 *
size
);

162 
LIBBPF_API
 
LIBBPF_DEPRECATED
("btf_ext__reloc_func_info wasÇever meantásáÖublic APIánd has wrongássumptionsÉmbedded in it; it will beÑemoved inÅhe futureÜibbpf versions")

163 
btf_ext__ªloc_func_öfo
(c⁄° 
btf
 *btf,

164 c⁄° 
btf_ext
 *btf_ext,

165 c⁄° *
£c_«me
, 
__u32
 
ö¢s_˙t
,

166 **
func_öfo
, 
__u32
 *
˙t
);

167 
LIBBPF_API
 
LIBBPF_DEPRECATED
("btf_ext__reloc_line_info wasÇever meantásáÖublic APIánd has wrongássumptionsÉmbedded in it; it will beÑemoved inÅhe futureÜibbpf versions")

168 
btf_ext__ªloc_löe_öfo
(c⁄° 
btf
 *btf,

169 c⁄° 
btf_ext
 *btf_ext,

170 c⁄° *
£c_«me
, 
__u32
 
ö¢s_˙t
,

171 **
löe_öfo
, 
__u32
 *
˙t
);

172 
LIBBPF_API
 
LIBBPF_DEPRECATED
("btf_ext__reloc_func_info is deprecated; write custom func_infoÖarsingÅo fetchÑec_size")

173 
__u32
 
btf_ext__func_öfo_ªc_size
(c⁄° 
btf_ext
 *btf_ext);

174 
LIBBPF_API
 
LIBBPF_DEPRECATED
("btf_ext__reloc_line_info is deprecated; write customÜine_infoÖarsingÅo fetchÑec_size")

175 
__u32
 
btf_ext__löe_öfo_ªc_size
(c⁄° 
btf_ext
 *btf_ext);

177 
LIBBPF_API
 
btf__föd_°r
(
btf
 *btf, c⁄° *
s
);

178 
LIBBPF_API
 
btf__add_°r
(
btf
 *btf, c⁄° *
s
);

179 
LIBBPF_API
 
btf__add_ty≥
(
btf
 *btf, c⁄° bt‡*
§c_btf
,

180 c⁄° 
btf_ty≥
 *
§c_ty≥
);

202 
LIBBPF_API
 
btf__add_btf
(
btf
 *btf, c⁄° bt‡*
§c_btf
);

204 
LIBBPF_API
 
btf__add_öt
(
btf
 *btf, c⁄° *
«me
, 
size_t
 
byã_sz
, 
ícodög
);

205 
LIBBPF_API
 
btf__add_Êﬂt
(
btf
 *btf, c⁄° *
«me
, 
size_t
 
byã_sz
);

206 
LIBBPF_API
 
btf__add_±r
(
btf
 *btf, 
ªf_ty≥_id
);

207 
LIBBPF_API
 
btf__add_¨øy
(
btf
 *btf,

208 
ödex_ty≥_id
, 
ñem_ty≥_id
, 
__u32
 
ƒ_ñems
);

210 
LIBBPF_API
 
btf__add_°ru˘
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
sz
);

211 
LIBBPF_API
 
btf__add_uni⁄
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
sz
);

212 
LIBBPF_API
 
btf__add_fõld
(
btf
 *btf, c⁄° *
«me
, 
fõld_ty≥_id
,

213 
__u32
 
bô_off£t
, __u32 
bô_size
);

216 
LIBBPF_API
 
btf__add_íum
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
byãs_sz
);

217 
LIBBPF_API
 
btf__add_íum_vÆue
(
btf
 *btf, c⁄° *
«me
, 
__s64
 
vÆue
);

219 
	ebtf_fwd_köd
 {

220 
BTF_FWD_STRUCT
 = 0,

221 
BTF_FWD_UNION
 = 1,

222 
BTF_FWD_ENUM
 = 2,

225 
LIBBPF_API
 
btf__add_fwd
(
btf
 *btf, c⁄° *
«me
, 
btf_fwd_köd
 
fwd_köd
);

226 
LIBBPF_API
 
btf__add_ty≥def
(
btf
 *btf, c⁄° *
«me
, 
ªf_ty≥_id
);

227 
LIBBPF_API
 
btf__add_vﬁ©ûe
(
btf
 *btf, 
ªf_ty≥_id
);

228 
LIBBPF_API
 
btf__add_c⁄°
(
btf
 *btf, 
ªf_ty≥_id
);

229 
LIBBPF_API
 
btf__add_ª°ri˘
(
btf
 *btf, 
ªf_ty≥_id
);

230 
LIBBPF_API
 
btf__add_ty≥_èg
(
btf
 *btf, c⁄° *
vÆue
, 
ªf_ty≥_id
);

233 
LIBBPF_API
 
btf__add_func
(
btf
 *btf, c⁄° *
«me
,

234 
btf_func_lökage
 
lökage
, 
¥Ÿo_ty≥_id
);

235 
LIBBPF_API
 
btf__add_func_¥Ÿo
(
btf
 *btf, 
ªt_ty≥_id
);

236 
LIBBPF_API
 
btf__add_func_∑øm
(
btf
 *btf, c⁄° *
«me
, 
ty≥_id
);

239 
LIBBPF_API
 
btf__add_v¨
(
btf
 *btf, c⁄° *
«me
, 
lökage
, 
ty≥_id
);

240 
LIBBPF_API
 
btf__add_d©a£c
(
btf
 *btf, c⁄° *
«me
, 
__u32
 
byã_sz
);

241 
LIBBPF_API
 
btf__add_d©a£c_v¨_öfo
(
btf
 *btf, 
v¨_ty≥_id
,

242 
__u32
 
off£t
, __u32 
byã_sz
);

245 
LIBBPF_API
 
btf__add_de˛_èg
(
btf
 *btf, c⁄° *
vÆue
, 
ªf_ty≥_id
,

246 
comp⁄ít_idx
);

248 
	sbtf_dedup_›ts
 {

249 
size_t
 
sz
;

251 
btf_ext
 *btf_ext;

253 
boﬁ
 
f‹˚_cﬁlisi⁄s
;

254 
size_t
 :0;

256 
	#btf_dedup_›ts__œ°_fõld
 
f‹˚_cﬁlisi⁄s


	)

258 
LIBBPF_API
 
btf__dedup
(
btf
 *btf, c⁄° 
btf_dedup_›ts
 *
›ts
);

260 
LIBBPF_API
 
btf__dedup_v0_6_0
(
btf
 *btf, c⁄° 
btf_dedup_›ts
 *
›ts
);

262 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use btf__dedup() instead")

263 
LIBBPF_API
 
btf__dedup_dïªˇãd
(
btf
 *btf, 
btf_ext
 *btf_ext, c⁄° *
›ts
);

264 
	#btf__dedup
(...Ë
	`___libbpf_ovîlﬂd
(
___btf_dedup
, 
__VA_ARGS__
)

	)

265 
	#___btf_dedup3
(
btf
, 
btf_ext
, 
›ts
Ë
	`btf__dedup_dïªˇãd
(btf, btf_ext, o±s)

	)

266 
	#___btf_dedup2
(
btf
, 
›ts
Ë
	`btf__dedup
(btf, o±s)

	)

268 
btf_dump
;

270 
	sbtf_dump_›ts
 {

272 
size_t
 
sz
;

273 *
˘x
;

277 (*
btf_dump_¥ötf_‚_t
)(*
	t˘x
, c⁄° *
	tfmt
, 
	tva_li°
 
	t¨gs
);

279 
LIBBPF_API
 
btf_dump
 *
btf_dump__√w
(c⁄° 
btf
 *btf,

280 
btf_dump_¥ötf_‚_t
 
¥ötf_‚
,

281 *
˘x
,

282 c⁄° 
btf_dump_›ts
 *
›ts
);

284 
LIBBPF_API
 
btf_dump
 *
btf_dump__√w_v0_6_0
(c⁄° 
btf
 *btf,

285 
btf_dump_¥ötf_‚_t
 
¥ötf_‚
,

286 *
˘x
,

287 c⁄° 
btf_dump_›ts
 *
›ts
);

289 
LIBBPF_API
 
btf_dump
 *
btf_dump__√w_dïªˇãd
(c⁄° 
btf
 *btf,

290 c⁄° 
btf_ext
 *btf_ext,

291 c⁄° 
btf_dump_›ts
 *
›ts
,

292 
btf_dump_¥ötf_‚_t
 
¥ötf_‚
);

321 #i‚de‡
__˝lu•lus


322 
	#btf_dump__√w
(
a1
, 
a2
, 
a3
, 
a4
Ë
	`__buûtö_choo£_ex¥
( \

323 
	`__buûtö_ty≥s_com∑tibÀ_p
(
	`ty≥of
(
a4
), 
btf_dump_¥ötf_‚_t
) || \

324 
	`__buûtö_ty≥s_com∑tibÀ_p
(
	`ty≥of
(
a4
), (*, c⁄° *, 
va_li°
)), \

325 
	`btf_dump__√w_dïªˇãd
((*)
a1
, (*)
a2
, (*)
a3
, (*)
a4
), \

326 
	`btf_dump__√w
((*)
a1
, (*)
a2
, (*)
a3
, (*)
a4
))

	)

329 
LIBBPF_API
 
btf_dump__‰ì
(
btf_dump
 *
d
);

331 
LIBBPF_API
 
btf_dump__dump_ty≥
(
btf_dump
 *
d
, 
__u32
 
id
);

333 
	sbtf_dump_emô_ty≥_de˛_›ts
 {

335 
size_t
 
sz
;

341 c⁄° *
fõld_«me
;

347 
ödít_Àvñ
;

349 
boﬁ
 
°rù_mods
;

350 
size_t
 :0;

352 
	#btf_dump_emô_ty≥_de˛_›ts__œ°_fõld
 
°rù_mods


	)

354 
LIBBPF_API
 

355 
btf_dump__emô_ty≥_de˛
(
btf_dump
 *
d
, 
__u32
 
id
,

356 c⁄° 
btf_dump_emô_ty≥_de˛_›ts
 *
›ts
);

359 
	sbtf_dump_ty≥_d©a_›ts
 {

361 
size_t
 
sz
;

362 c⁄° *
ödít_°r
;

363 
ödít_Àvñ
;

365 
boﬁ
 
com∑˘
;

366 
boﬁ
 
skù_«mes
;

367 
boﬁ
 
emô_zî€s
;

368 
size_t
 :0;

370 
	#btf_dump_ty≥_d©a_›ts__œ°_fõld
 
emô_zî€s


	)

372 
LIBBPF_API
 

373 
btf_dump__dump_ty≥_d©a
(
btf_dump
 *
d
, 
__u32
 
id
,

374 c⁄° *
d©a
, 
size_t
 
d©a_sz
,

375 c⁄° 
btf_dump_ty≥_d©a_›ts
 *
›ts
);

385 #i‚de‡
BTF_KIND_FUNC


386 
	#BTF_KIND_FUNC
 12

	)

387 
	#BTF_KIND_FUNC_PROTO
 13

	)

389 #i‚de‡
BTF_KIND_VAR


390 
	#BTF_KIND_VAR
 14

	)

391 
	#BTF_KIND_DATASEC
 15

	)

393 #i‚de‡
BTF_KIND_FLOAT


394 
	#BTF_KIND_FLOAT
 16

	)

397 
	#BTF_KIND_DECL_TAG
 17

	)

398 
	#BTF_KIND_TYPE_TAG
 18

	)

399 
	#BTF_KIND_ENUM64
 19

	)

401 
ölöe
 
__u16
 
btf_köd
(c⁄° 
btf_ty≥
 *
t
)

403  
BTF_INFO_KIND
(
t
->
öfo
);

406 
ölöe
 
__u16
 
btf_vÀn
(c⁄° 
btf_ty≥
 *
t
)

408  
BTF_INFO_VLEN
(
t
->
öfo
);

411 
ölöe
 
boﬁ
 
btf_kÊag
(c⁄° 
btf_ty≥
 *
t
)

413  
BTF_INFO_KFLAG
(
t
->
öfo
);

416 
ölöe
 
boﬁ
 
btf_is_void
(c⁄° 
btf_ty≥
 *
t
)

418  
btf_köd
(
t
Ë=
BTF_KIND_UNKN
;

421 
ölöe
 
boﬁ
 
btf_is_öt
(c⁄° 
btf_ty≥
 *
t
)

423  
btf_köd
(
t
Ë=
BTF_KIND_INT
;

426 
ölöe
 
boﬁ
 
btf_is_±r
(c⁄° 
btf_ty≥
 *
t
)

428  
btf_köd
(
t
Ë=
BTF_KIND_PTR
;

431 
ölöe
 
boﬁ
 
btf_is_¨øy
(c⁄° 
btf_ty≥
 *
t
)

433  
btf_köd
(
t
Ë=
BTF_KIND_ARRAY
;

436 
ölöe
 
boﬁ
 
btf_is_°ru˘
(c⁄° 
btf_ty≥
 *
t
)

438  
btf_köd
(
t
Ë=
BTF_KIND_STRUCT
;

441 
ölöe
 
boﬁ
 
btf_is_uni⁄
(c⁄° 
btf_ty≥
 *
t
)

443  
btf_köd
(
t
Ë=
BTF_KIND_UNION
;

446 
ölöe
 
boﬁ
 
btf_is_composôe
(c⁄° 
btf_ty≥
 *
t
)

448 
__u16
 
köd
 = 
btf_köd
(
t
);

450  
köd
 =
BTF_KIND_STRUCT
 || köd =
BTF_KIND_UNION
;

453 
ölöe
 
boﬁ
 
btf_is_íum
(c⁄° 
btf_ty≥
 *
t
)

455  
btf_köd
(
t
Ë=
BTF_KIND_ENUM
;

458 
ölöe
 
boﬁ
 
btf_is_íum64
(c⁄° 
btf_ty≥
 *
t
)

460  
btf_köd
(
t
Ë=
BTF_KIND_ENUM64
;

463 
ölöe
 
boﬁ
 
btf_is_fwd
(c⁄° 
btf_ty≥
 *
t
)

465  
btf_köd
(
t
Ë=
BTF_KIND_FWD
;

468 
ölöe
 
boﬁ
 
btf_is_ty≥def
(c⁄° 
btf_ty≥
 *
t
)

470  
btf_köd
(
t
Ë=
BTF_KIND_TYPEDEF
;

473 
ölöe
 
boﬁ
 
btf_is_vﬁ©ûe
(c⁄° 
btf_ty≥
 *
t
)

475  
btf_köd
(
t
Ë=
BTF_KIND_VOLATILE
;

478 
ölöe
 
boﬁ
 
btf_is_c⁄°
(c⁄° 
btf_ty≥
 *
t
)

480  
btf_köd
(
t
Ë=
BTF_KIND_CONST
;

483 
ölöe
 
boﬁ
 
btf_is_ª°ri˘
(c⁄° 
btf_ty≥
 *
t
)

485  
btf_köd
(
t
Ë=
BTF_KIND_RESTRICT
;

488 
ölöe
 
boﬁ
 
btf_is_mod
(c⁄° 
btf_ty≥
 *
t
)

490 
__u16
 
köd
 = 
btf_köd
(
t
);

492  
köd
 =
BTF_KIND_VOLATILE
 ||

493 
köd
 =
BTF_KIND_CONST
 ||

494 
köd
 =
BTF_KIND_RESTRICT
 ||

495 
köd
 =
BTF_KIND_TYPE_TAG
;

498 
ölöe
 
boﬁ
 
btf_is_func
(c⁄° 
btf_ty≥
 *
t
)

500  
btf_köd
(
t
Ë=
BTF_KIND_FUNC
;

503 
ölöe
 
boﬁ
 
btf_is_func_¥Ÿo
(c⁄° 
btf_ty≥
 *
t
)

505  
btf_köd
(
t
Ë=
BTF_KIND_FUNC_PROTO
;

508 
ölöe
 
boﬁ
 
btf_is_v¨
(c⁄° 
btf_ty≥
 *
t
)

510  
btf_köd
(
t
Ë=
BTF_KIND_VAR
;

513 
ölöe
 
boﬁ
 
btf_is_d©a£c
(c⁄° 
btf_ty≥
 *
t
)

515  
btf_köd
(
t
Ë=
BTF_KIND_DATASEC
;

518 
ölöe
 
boﬁ
 
btf_is_Êﬂt
(c⁄° 
btf_ty≥
 *
t
)

520  
btf_köd
(
t
Ë=
BTF_KIND_FLOAT
;

523 
ölöe
 
boﬁ
 
btf_is_de˛_èg
(c⁄° 
btf_ty≥
 *
t
)

525  
btf_köd
(
t
Ë=
BTF_KIND_DECL_TAG
;

528 
ölöe
 
boﬁ
 
btf_is_ty≥_èg
(c⁄° 
btf_ty≥
 *
t
)

530  
btf_köd
(
t
Ë=
BTF_KIND_TYPE_TAG
;

533 
ölöe
 
__u8
 
btf_öt_ícodög
(c⁄° 
btf_ty≥
 *
t
)

535  
BTF_INT_ENCODING
(*(
__u32
 *)(
t
 + 1));

538 
ölöe
 
__u8
 
btf_öt_off£t
(c⁄° 
btf_ty≥
 *
t
)

540  
BTF_INT_OFFSET
(*(
__u32
 *)(
t
 + 1));

543 
ölöe
 
__u8
 
btf_öt_bôs
(c⁄° 
btf_ty≥
 *
t
)

545  
BTF_INT_BITS
(*(
__u32
 *)(
t
 + 1));

548 
ölöe
 
btf_¨øy
 *btf_¨øy(c⁄° 
btf_ty≥
 *
t
)

550  (
btf_¨øy
 *)(
t
 + 1);

553 
ölöe
 
btf_íum
 *btf_íum(c⁄° 
btf_ty≥
 *
t
)

555  (
btf_íum
 *)(
t
 + 1);

558 
ölöe
 
btf_membî
 *
btf_membîs
(c⁄° 
btf_ty≥
 *
t
)

560  (
btf_membî
 *)(
t
 + 1);

564 
ölöe
 
__u32
 
btf_membî_bô_off£t
(c⁄° 
btf_ty≥
 *
t
,

565 
__u32
 
membî_idx
)

567 c⁄° 
btf_membî
 *
m
 = 
btf_membîs
(
t
Ë+ 
membî_idx
;

568 
boﬁ
 
kÊag
 = 
btf_kÊag
(
t
);

570  
kÊag
 ? 
BTF_MEMBER_BIT_OFFSET
(
m
->
off£t
) : m->offset;

576 
ölöe
 
__u32
 
btf_membî_bôfõld_size
(c⁄° 
btf_ty≥
 *
t
,

577 
__u32
 
membî_idx
)

579 c⁄° 
btf_membî
 *
m
 = 
btf_membîs
(
t
Ë+ 
membî_idx
;

580 
boﬁ
 
kÊag
 = 
btf_kÊag
(
t
);

582  
kÊag
 ? 
BTF_MEMBER_BITFIELD_SIZE
(
m
->
off£t
) : 0;

585 
ölöe
 
btf_∑øm
 *
btf_∑øms
(c⁄° 
btf_ty≥
 *
t
)

587  (
btf_∑øm
 *)(
t
 + 1);

590 
ölöe
 
btf_v¨
 *btf_v¨(c⁄° 
btf_ty≥
 *
t
)

592  (
btf_v¨
 *)(
t
 + 1);

595 
ölöe
 
btf_v¨_£cöfo
 *

596 
btf_v¨_£cöfos
(c⁄° 
btf_ty≥
 *
t
)

598  (
btf_v¨_£cöfo
 *)(
t
 + 1);

601 
btf_de˛_èg
;

602 
ölöe
 
btf_de˛_èg
 *btf_de˛_èg(c⁄° 
btf_ty≥
 *
t
)

604  (
btf_de˛_èg
 *)(
t
 + 1);

607 #ifde‡
__˝lu•lus


	@build/usr/include/bpf/libbpf.h

10 #i‚de‡
__LIBBPF_LIBBPF_H


11 
	#__LIBBPF_LIBBPF_H


	)

13 
	~<°d¨g.h
>

14 
	~<°dio.h
>

15 
	~<°döt.h
>

16 
	~<°dboﬁ.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<löux/bpf.h
>

20 
	~"libbpf_comm⁄.h
"

21 
	~"libbpf_Àgacy.h
"

23 #ifde‡
__˝lu•lus


27 
LIBBPF_API
 
__u32
 
libbpf_maj‹_vîsi⁄
();

28 
LIBBPF_API
 
__u32
 
libbpf_mö‹_vîsi⁄
();

29 
LIBBPF_API
 c⁄° *
libbpf_vîsi⁄_°rög
();

31 
	elibbpf_î∫o
 {

32 
__LIBBPF_ERRNO__START
 = 4000,

35 
LIBBPF_ERRNO__LIBELF
 = 
__LIBBPF_ERRNO__START
,

36 
LIBBPF_ERRNO__FORMAT
,

37 
LIBBPF_ERRNO__KVERSION
,

38 
LIBBPF_ERRNO__ENDIAN
,

39 
LIBBPF_ERRNO__INTERNAL
,

40 
LIBBPF_ERRNO__RELOC
,

41 
LIBBPF_ERRNO__LOAD
,

42 
LIBBPF_ERRNO__VERIFY
,

43 
LIBBPF_ERRNO__PROG2BIG
,

44 
LIBBPF_ERRNO__KVER
,

45 
LIBBPF_ERRNO__PROGTYPE
,

46 
LIBBPF_ERRNO__WRNGPID
,

47 
LIBBPF_ERRNO__INVSEQ
,

48 
LIBBPF_ERRNO__NLPARSE
,

49 
__LIBBPF_ERRNO__END
,

52 
LIBBPF_API
 
libbpf_°ªº‹
(
îr
, *
buf
, 
size_t
 
size
);

54 
	elibbpf_¥öt_Àvñ
 {

55 
LIBBPF_WARN
,

56 
LIBBPF_INFO
,

57 
LIBBPF_DEBUG
,

60 (*
libbpf_¥öt_‚_t
)(
	tlibbpf_¥öt_Àvñ
 
	tÀvñ
,

61 c⁄° *, 
	tva_li°
 
	t≠
);

63 
LIBBPF_API
 
libbpf_¥öt_‚_t
 
libbpf_£t_¥öt
÷ibbpf_¥öt_‚_à
‚
);

66 
bpf_obje˘
;

68 
	sbpf_obje˘_›í_©å
 {

69 c⁄° *
fûe
;

70 
bpf_¥og_ty≥
 
¥og_ty≥
;

73 
	sbpf_obje˘_›í_›ts
 {

75 
size_t
 
sz
;

82 c⁄° *
obje˘_«me
;

84 
boﬁ
 
ªœxed_m≠s
;

90 
LIBBPF_DEPRECATED_SINCE
(0, 6, "field hasÇoÉffect")

91 
boﬁ
 
ªœxed_c‹e_ªlocs
;

96 c⁄° *
pö_roŸ_∑th
;

98 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_program__set_attach_target() onÉach individual bpf_program")

99 
__u32
 
©èch_¥og_fd
;

103 c⁄° *
kc⁄fig
;

110 c⁄° *
btf_cu°om_∑th
;

132 *
kî√l_log_buf
;

133 
size_t
 
kî√l_log_size
;

147 
__u32
 
kî√l_log_Àvñ
;

149 
size_t
 :0;

151 
	#bpf_obje˘_›í_›ts__œ°_fõld
 
kî√l_log_Àvñ


	)

153 
LIBBPF_API
 
bpf_obje˘
 *
bpf_obje˘__›í
(c⁄° *
∑th
);

165 
LIBBPF_API
 
bpf_obje˘
 *

166 
bpf_obje˘__›í_fûe
(c⁄° *
∑th
, c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
);

178 
LIBBPF_API
 
bpf_obje˘
 *

179 
bpf_obje˘__›í_mem
(c⁄° *
obj_buf
, 
size_t
 
obj_buf_sz
,

180 c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
);

183 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_object__open_mem() instead")

184 
LIBBPF_API
 
bpf_obje˘
 *

185 
bpf_obje˘__›í_buf„r
(c⁄° *
obj_buf
, 
size_t
 
obj_buf_sz
,

186 c⁄° *
«me
);

187 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__open_file() instead")

188 
LIBBPF_API
 
bpf_obje˘
 *

189 
bpf_obje˘__›í_x©å
(
bpf_obje˘_›í_©å
 *
©å
);

191 
	elibbpf_pö_ty≥
 {

192 
LIBBPF_PIN_NONE
,

194 
LIBBPF_PIN_BY_NAME
,

201 
LIBBPF_API
 
bpf_obje˘__pö_m≠s
(
bpf_obje˘
 *
obj
, c⁄° *
∑th
);

202 
LIBBPF_API
 
bpf_obje˘__u≈ö_m≠s
(
bpf_obje˘
 *
obj
,

203 c⁄° *
∑th
);

204 
LIBBPF_API
 
bpf_obje˘__pö_¥ogøms
(
bpf_obje˘
 *
obj
,

205 c⁄° *
∑th
);

206 
LIBBPF_API
 
bpf_obje˘__u≈ö_¥ogøms
(
bpf_obje˘
 *
obj
,

207 c⁄° *
∑th
);

208 
LIBBPF_API
 
bpf_obje˘__pö
(
bpf_obje˘
 *
obje˘
, c⁄° *
∑th
);

209 
LIBBPF_API
 
bpf_obje˘__˛o£
(
bpf_obje˘
 *
obje˘
);

211 
	sbpf_obje˘_lﬂd_©å
 {

212 
bpf_obje˘
 *
obj
;

213 
log_Àvñ
;

214 c⁄° *
èrgë_btf_∑th
;

218 
LIBBPF_API
 
bpf_obje˘__lﬂd
(
bpf_obje˘
 *
obj
);

219 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_object__load() instead")

220 
LIBBPF_API
 
bpf_obje˘__lﬂd_x©å
(
bpf_obje˘_lﬂd_©å
 *
©å
);

221 
LIBBPF_DEPRECATED_SINCE
(0, 6, "bpf_object__unload() is deprecated, use bpf_object__close() instead")

222 
LIBBPF_API
 
bpf_obje˘__u∆ﬂd
(
bpf_obje˘
 *
obj
);

224 
LIBBPF_API
 c⁄° *
bpf_obje˘__«me
(c⁄° 
bpf_obje˘
 *
obj
);

225 
LIBBPF_API
 
bpf_obje˘__kvîsi⁄
(c⁄° 
bpf_obje˘
 *
obj
);

226 
LIBBPF_API
 
bpf_obje˘__£t_kvîsi⁄
(
bpf_obje˘
 *
obj
, 
__u32
 
kîn_vîsi⁄
);

228 
btf
;

229 
LIBBPF_API
 
btf
 *
bpf_obje˘__btf
(c⁄° 
bpf_obje˘
 *
obj
);

230 
LIBBPF_API
 
bpf_obje˘__btf_fd
(c⁄° 
bpf_obje˘
 *
obj
);

232 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__find_program_by_name() instead")

233 
LIBBPF_API
 
bpf_¥ogøm
 *

234 
bpf_obje˘__föd_¥ogøm_by_tôÀ
(c⁄° 
bpf_obje˘
 *
obj
,

235 c⁄° *
tôÀ
);

236 
LIBBPF_API
 
bpf_¥ogøm
 *

237 
bpf_obje˘__föd_¥ogøm_by_«me
(c⁄° 
bpf_obje˘
 *
obj
,

238 c⁄° *
«me
);

240 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "track bpf_objects inápplication code instead")

241 
bpf_obje˘
 *
bpf_obje˘__√xt
(bpf_obje˘ *
¥ev
);

242 
	#bpf_obje˘__f‹_óch_ß„
(
pos
, 
tmp
) \

243 (
pos
Ë
	`bpf_obje˘__√xt
(
NULL
), \

244 (
tmp
Ë
	`bpf_obje˘__√xt
(
pos
); \

245 (
pos
Ë!
NULL
; \

246 (
pos
Ë(
tmp
), (tmpË
	`bpf_obje˘__√xt
—mp))

	)

248 (*
bpf_obje˘_˛ór_¥iv_t
)(
	tbpf_obje˘
 *, *);

249 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

250 
LIBBPF_API
 
bpf_obje˘__£t_¥iv
(
bpf_obje˘
 *
obj
, *
¥iv
,

251 
bpf_obje˘_˛ór_¥iv_t
 
˛ór_¥iv
);

252 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

253 
LIBBPF_API
 *
bpf_obje˘__¥iv
(c⁄° 
bpf_obje˘
 *
¥og
);

255 
LIBBPF_API
 

256 
libbpf_¥og_ty≥_by_«me
(c⁄° *
«me
, 
bpf_¥og_ty≥
 *
¥og_ty≥
,

257 
bpf_©èch_ty≥
 *
ex≥˘ed_©èch_ty≥
);

258 
LIBBPF_API
 
libbpf_©èch_ty≥_by_«me
(c⁄° *
«me
,

259 
bpf_©èch_ty≥
 *
©èch_ty≥
);

260 
LIBBPF_API
 
libbpf_föd_vmlöux_btf_id
(c⁄° *
«me
,

261 
bpf_©èch_ty≥
 
©èch_ty≥
);

264 
bpf_¥ogøm
;

265 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__next_program() instead")

266 
bpf_¥ogøm
 *
bpf_¥ogøm__√xt
(bpf_¥ogøm *
¥og
,

267 c⁄° 
bpf_obje˘
 *
obj
);

268 
LIBBPF_API
 
bpf_¥ogøm
 *

269 
bpf_obje˘__√xt_¥ogøm
(c⁄° 
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
¥og
);

271 
	#bpf_obje˘__f‹_óch_¥ogøm
(
pos
, 
obj
) \

272 (
pos
Ë
	`bpf_obje˘__√xt_¥ogøm
((
obj
), 
NULL
); \

273 (
pos
Ë!
NULL
; \

274 (
pos
Ë
	`bpf_obje˘__√xt_¥ogøm
((
obj
), (pos)))

	)

276 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__prev_program() instead")

277 
bpf_¥ogøm
 *
bpf_¥ogøm__¥ev
(bpf_¥ogøm *
¥og
,

278 c⁄° 
bpf_obje˘
 *
obj
);

279 
LIBBPF_API
 
bpf_¥ogøm
 *

280 
bpf_obje˘__¥ev_¥ogøm
(c⁄° 
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
¥og
);

282 (*
bpf_¥ogøm_˛ór_¥iv_t
)(
	tbpf_¥ogøm
 *, *);

284 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

285 
LIBBPF_API
 
bpf_¥ogøm__£t_¥iv
(
bpf_¥ogøm
 *
¥og
, *
¥iv
,

286 
bpf_¥ogøm_˛ór_¥iv_t
 
˛ór_¥iv
);

287 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

288 
LIBBPF_API
 *
bpf_¥ogøm__¥iv
(c⁄° 
bpf_¥ogøm
 *
¥og
);

289 
LIBBPF_API
 
bpf_¥ogøm__£t_ifödex
(
bpf_¥ogøm
 *
¥og
,

290 
__u32
 
ifödex
);

292 
LIBBPF_API
 c⁄° *
bpf_¥ogøm__«me
(c⁄° 
bpf_¥ogøm
 *
¥og
);

293 
LIBBPF_API
 c⁄° *
bpf_¥ogøm__£˘i⁄_«me
(c⁄° 
bpf_¥ogøm
 *
¥og
);

294 
LIBBPF_API
 
LIBBPF_DEPRECATED
("BPFÖrogramÅitle is confusingÅerm;Ölease use bpf_program__section_name() instead")

295 c⁄° *
bpf_¥ogøm__tôÀ
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
boﬁ
 
√eds_c›y
);

296 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__autﬁﬂd
(c⁄° 
bpf_¥ogøm
 *
¥og
);

297 
LIBBPF_API
 
bpf_¥ogøm__£t_autﬁﬂd
(
bpf_¥ogøm
 *
¥og
, 
boﬁ
 
autﬁﬂd
);

300 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_program__insn_cnt() instead")

301 
LIBBPF_API
 
size_t
 
bpf_¥ogøm__size
(c⁄° 
bpf_¥ogøm
 *
¥og
);

303 
bpf_ö¢
;

325 
LIBBPF_API
 c⁄° 
bpf_ö¢
 *
bpf_¥ogøm__ö¢s
(c⁄° 
bpf_¥ogøm
 *
¥og
);

341 
LIBBPF_API
 
bpf_¥ogøm__£t_ö¢s
(
bpf_¥ogøm
 *
¥og
,

342 
bpf_ö¢
 *
√w_ö¢s
, 
size_t
 
√w_ö¢_˙t
);

353 
LIBBPF_API
 
size_t
 
bpf_¥ogøm__ö¢_˙t
(c⁄° 
bpf_¥ogøm
 *
¥og
);

355 
LIBBPF_DEPRECATED_SINCE
(0, 6, "use bpf_object__load() instead")

356 
LIBBPF_API
 
bpf_¥ogøm__lﬂd
(
bpf_¥ogøm
 *
¥og
, c⁄° *
li˚n£
, 
__u32
 
kîn_vîsi⁄
);

357 
LIBBPF_API
 
bpf_¥ogøm__fd
(c⁄° 
bpf_¥ogøm
 *
¥og
);

358 
LIBBPF_DEPRECATED_SINCE
(0, 7, "multi-instance bpf_program support is deprecated")

359 
LIBBPF_API
 
bpf_¥ogøm__pö_ö°™˚
(
bpf_¥ogøm
 *
¥og
,

360 c⁄° *
∑th
,

361 
ö°™˚
);

362 
LIBBPF_DEPRECATED_SINCE
(0, 7, "multi-instance bpf_program support is deprecated")

363 
LIBBPF_API
 
bpf_¥ogøm__u≈ö_ö°™˚
(
bpf_¥ogøm
 *
¥og
,

364 c⁄° *
∑th
,

365 
ö°™˚
);

377 
LIBBPF_API
 
bpf_¥ogøm__pö
(
bpf_¥ogøm
 *
¥og
, c⁄° *
∑th
);

391 
LIBBPF_API
 
bpf_¥ogøm__u≈ö
(
bpf_¥ogøm
 *
¥og
, c⁄° *
∑th
);

392 
LIBBPF_API
 
bpf_¥ogøm__u∆ﬂd
(
bpf_¥ogøm
 *
¥og
);

394 
bpf_lök
;

396 
LIBBPF_API
 
bpf_lök
 *
bpf_lök__›í
(c⁄° *
∑th
);

397 
LIBBPF_API
 
bpf_lök__fd
(c⁄° 
bpf_lök
 *
lök
);

398 
LIBBPF_API
 c⁄° *
bpf_lök__pö_∑th
(c⁄° 
bpf_lök
 *
lök
);

410 
LIBBPF_API
 
bpf_lök__pö
(
bpf_lök
 *
lök
, c⁄° *
∑th
);

424 
LIBBPF_API
 
bpf_lök__u≈ö
(
bpf_lök
 *
lök
);

425 
LIBBPF_API
 
bpf_lök__upd©e_¥ogøm
(
bpf_lök
 *
lök
,

426 
bpf_¥ogøm
 *
¥og
);

427 
LIBBPF_API
 
bpf_lök__disc⁄√˘
(
bpf_lök
 *
lök
);

428 
LIBBPF_API
 
bpf_lök__dëach
(
bpf_lök
 *
lök
);

429 
LIBBPF_API
 
bpf_lök__de°roy
(
bpf_lök
 *
lök
);

447 
LIBBPF_API
 
bpf_lök
 *

448 
bpf_¥ogøm__©èch
(c⁄° 
bpf_¥ogøm
 *
¥og
);

450 
	sbpf_≥rf_evít_›ts
 {

452 
size_t
 
sz
;

454 
__u64
 
bpf_cookõ
;

456 
	#bpf_≥rf_evít_›ts__œ°_fõld
 
bpf_cookõ


	)

458 
LIBBPF_API
 
bpf_lök
 *

459 
bpf_¥ogøm__©èch_≥rf_evít
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
pfd
);

461 
LIBBPF_API
 
bpf_lök
 *

462 
bpf_¥ogøm__©èch_≥rf_evít_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
pfd
,

463 c⁄° 
bpf_≥rf_evít_›ts
 *
›ts
);

465 
	sbpf_k¥obe_›ts
 {

467 
size_t
 
sz
;

469 
__u64
 
bpf_cookõ
;

471 
size_t
 
off£t
;

473 
boﬁ
 
ªçrobe
;

474 
size_t
 :0;

476 
	#bpf_k¥obe_›ts__œ°_fõld
 
ªçrobe


	)

478 
LIBBPF_API
 
bpf_lök
 *

479 
bpf_¥ogøm__©èch_k¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
boﬁ
 
ªçrobe
,

480 c⁄° *
func_«me
);

481 
LIBBPF_API
 
bpf_lök
 *

482 
bpf_¥ogøm__©èch_k¥obe_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
,

483 c⁄° *
func_«me
,

484 c⁄° 
bpf_k¥obe_›ts
 *
›ts
);

486 
	sbpf_k¥obe_mu…i_›ts
 {

488 
size_t
 
sz
;

490 c⁄° **
syms
;

492 c⁄° *
addrs
;

494 c⁄° 
__u64
 *
cookõs
;

496 
size_t
 
˙t
;

498 
boﬁ
 
ªçrobe
;

499 
size_t
 :0;

502 
	#bpf_k¥obe_mu…i_›ts__œ°_fõld
 
ªçrobe


	)

504 
LIBBPF_API
 
bpf_lök
 *

505 
bpf_¥ogøm__©èch_k¥obe_mu…i_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
,

506 c⁄° *
∑âîn
,

507 c⁄° 
bpf_k¥obe_mu…i_›ts
 *
›ts
);

509 
	sbpf_u¥obe_›ts
 {

511 
size_t
 
sz
;

515 
size_t
 
ªf_˘r_off£t
;

517 
__u64
 
bpf_cookõ
;

519 
boﬁ
 
ªçrobe
;

527 c⁄° *
func_«me
;

528 
size_t
 :0;

530 
	#bpf_u¥obe_›ts__œ°_fõld
 
func_«me


	)

548 
LIBBPF_API
 
bpf_lök
 *

549 
bpf_¥ogøm__©èch_u¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
boﬁ
 
ªçrobe
,

550 
pid_t
 
pid
, c⁄° *
bö¨y_∑th
,

551 
size_t
 
func_off£t
);

567 
LIBBPF_API
 
bpf_lök
 *

568 
bpf_¥ogøm__©èch_u¥obe_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
pid_t
 
pid
,

569 c⁄° *
bö¨y_∑th
, 
size_t
 
func_off£t
,

570 c⁄° 
bpf_u¥obe_›ts
 *
›ts
);

572 
	sbpf_usdt_›ts
 {

574 
size_t
 
sz
;

576 
__u64
 
usdt_cookõ
;

577 
size_t
 :0;

579 
	#bpf_usdt_›ts__œ°_fõld
 
usdt_cookõ


	)

597 
LIBBPF_API
 
bpf_lök
 *

598 
bpf_¥ogøm__©èch_usdt
(c⁄° 
bpf_¥ogøm
 *
¥og
,

599 
pid_t
 
pid
, c⁄° *
bö¨y_∑th
,

600 c⁄° *
usdt_¥ovidî
, c⁄° *
usdt_«me
,

601 c⁄° 
bpf_usdt_›ts
 *
›ts
);

603 
	sbpf_åa˚poöt_›ts
 {

605 
size_t
 
sz
;

607 
__u64
 
bpf_cookõ
;

609 
	#bpf_åa˚poöt_›ts__œ°_fõld
 
bpf_cookõ


	)

611 
LIBBPF_API
 
bpf_lök
 *

612 
bpf_¥ogøm__©èch_åa˚poöt
(c⁄° 
bpf_¥ogøm
 *
¥og
,

613 c⁄° *
ç_ˇãg‹y
,

614 c⁄° *
ç_«me
);

615 
LIBBPF_API
 
bpf_lök
 *

616 
bpf_¥ogøm__©èch_åa˚poöt_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
,

617 c⁄° *
ç_ˇãg‹y
,

618 c⁄° *
ç_«me
,

619 c⁄° 
bpf_åa˚poöt_›ts
 *
›ts
);

621 
LIBBPF_API
 
bpf_lök
 *

622 
bpf_¥ogøm__©èch_øw_åa˚poöt
(c⁄° 
bpf_¥ogøm
 *
¥og
,

623 c⁄° *
ç_«me
);

625 
	sbpf_åa˚_›ts
 {

627 
size_t
 
sz
;

629 
__u64
 
cookõ
;

631 
	#bpf_åa˚_›ts__œ°_fõld
 
cookõ


	)

633 
LIBBPF_API
 
bpf_lök
 *

634 
bpf_¥ogøm__©èch_åa˚
(c⁄° 
bpf_¥ogøm
 *
¥og
);

635 
LIBBPF_API
 
bpf_lök
 *

636 
bpf_¥ogøm__©èch_åa˚_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
, c⁄° 
bpf_åa˚_›ts
 *
›ts
);

638 
LIBBPF_API
 
bpf_lök
 *

639 
bpf_¥ogøm__©èch_lsm
(c⁄° 
bpf_¥ogøm
 *
¥og
);

640 
LIBBPF_API
 
bpf_lök
 *

641 
bpf_¥ogøm__©èch_cgroup
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cgroup_fd
);

642 
LIBBPF_API
 
bpf_lök
 *

643 
bpf_¥ogøm__©èch_√äs
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
√äs_fd
);

644 
LIBBPF_API
 
bpf_lök
 *

645 
bpf_¥ogøm__©èch_xdp
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
ifödex
);

646 
LIBBPF_API
 
bpf_lök
 *

647 
bpf_¥ogøm__©èch_‰ïœ˚
(c⁄° 
bpf_¥ogøm
 *
¥og
,

648 
èrgë_fd
, c⁄° *
©èch_func_«me
);

650 
bpf_m≠
;

652 
LIBBPF_API
 
bpf_lök
 *
bpf_m≠__©èch_°ru˘_›s
(c⁄° 
bpf_m≠
 *
m≠
);

654 
	sbpf_ôî_©èch_›ts
 {

655 
size_t
 
sz
;

656 
bpf_ôî_lök_öfo
 *
lök_öfo
;

657 
__u32
 
lök_öfo_Àn
;

659 
	#bpf_ôî_©èch_›ts__œ°_fõld
 
lök_öfo_Àn


	)

661 
LIBBPF_API
 
bpf_lök
 *

662 
bpf_¥ogøm__©èch_ôî
(c⁄° 
bpf_¥ogøm
 *
¥og
,

663 c⁄° 
bpf_ôî_©èch_›ts
 *
›ts
);

693 
	sbpf_¥og_¥ï_ªsu…
 {

698 
bpf_ö¢
 *
√w_ö¢_±r
;

699 
√w_ö¢_˙t
;

702 *
pfd
;

717 (*
bpf_¥ogøm_¥ï_t
)(
	tbpf_¥ogøm
 *
	t¥og
, 
	tn
,

718 
	tbpf_ö¢
 *
	tö¢s
, 
	tö¢s_˙t
,

719 
	tbpf_¥og_¥ï_ªsu…
 *
	tªs
);

721 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_program__insns() for getting bpf_program instructions")

722 
LIBBPF_API
 
bpf_¥ogøm__£t_¥ï
(
bpf_¥ogøm
 *
¥og
, 
ƒ_ö°™˚
,

723 
bpf_¥ogøm_¥ï_t
 
¥ï
);

725 
LIBBPF_DEPRECATED_SINCE
(0, 7, "multi-instance bpf_program support is deprecated")

726 
LIBBPF_API
 
bpf_¥ogøm__¡h_fd
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
n
);

731 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

732 
LIBBPF_API
 
bpf_¥ogøm__£t_sockë_fûãr
(
bpf_¥ogøm
 *
¥og
);

733 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

734 
LIBBPF_API
 
bpf_¥ogøm__£t_åa˚poöt
(
bpf_¥ogøm
 *
¥og
);

735 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

736 
LIBBPF_API
 
bpf_¥ogøm__£t_øw_åa˚poöt
(
bpf_¥ogøm
 *
¥og
);

737 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

738 
LIBBPF_API
 
bpf_¥ogøm__£t_k¥obe
(
bpf_¥ogøm
 *
¥og
);

739 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

740 
LIBBPF_API
 
bpf_¥ogøm__£t_lsm
(
bpf_¥ogøm
 *
¥og
);

741 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

742 
LIBBPF_API
 
bpf_¥ogøm__£t_sched_˛s
(
bpf_¥ogøm
 *
¥og
);

743 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

744 
LIBBPF_API
 
bpf_¥ogøm__£t_sched_a˘
(
bpf_¥ogøm
 *
¥og
);

745 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

746 
LIBBPF_API
 
bpf_¥ogøm__£t_xdp
(
bpf_¥ogøm
 *
¥og
);

747 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

748 
LIBBPF_API
 
bpf_¥ogøm__£t_≥rf_evít
(
bpf_¥ogøm
 *
¥og
);

749 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

750 
LIBBPF_API
 
bpf_¥ogøm__£t_åacög
(
bpf_¥ogøm
 *
¥og
);

751 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

752 
LIBBPF_API
 
bpf_¥ogøm__£t_°ru˘_›s
(
bpf_¥ogøm
 *
¥og
);

753 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

754 
LIBBPF_API
 
bpf_¥ogøm__£t_exãnsi⁄
(
bpf_¥ogøm
 *
¥og
);

755 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

756 
LIBBPF_API
 
bpf_¥ogøm__£t_sk_lookup
(
bpf_¥ogøm
 *
¥og
);

758 
LIBBPF_API
 
bpf_¥og_ty≥
 
bpf_¥ogøm__ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
);

771 
LIBBPF_API
 
bpf_¥ogøm__£t_ty≥
(
bpf_¥ogøm
 *
¥og
,

772 
bpf_¥og_ty≥
 
ty≥
);

774 
LIBBPF_API
 
bpf_©èch_ty≥


775 
bpf_¥ogøm__ex≥˘ed_©èch_ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
);

789 
LIBBPF_API
 

790 
bpf_¥ogøm__£t_ex≥˘ed_©èch_ty≥
(
bpf_¥ogøm
 *
¥og
,

791 
bpf_©èch_ty≥
 
ty≥
);

793 
LIBBPF_API
 
__u32
 
bpf_¥ogøm__Êags
(c⁄° 
bpf_¥ogøm
 *
¥og
);

794 
LIBBPF_API
 
bpf_¥ogøm__£t_Êags
(
bpf_¥ogøm
 *
¥og
, 
__u32
 
Êags
);

800 
LIBBPF_API
 
__u32
 
bpf_¥ogøm__log_Àvñ
(c⁄° 
bpf_¥ogøm
 *
¥og
);

801 
LIBBPF_API
 
bpf_¥ogøm__£t_log_Àvñ
(
bpf_¥ogøm
 *
¥og
, 
__u32
 
log_Àvñ
);

802 
LIBBPF_API
 c⁄° *
bpf_¥ogøm__log_buf
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
size_t
 *
log_size
);

803 
LIBBPF_API
 
bpf_¥ogøm__£t_log_buf
(
bpf_¥ogøm
 *
¥og
, *
log_buf
, 
size_t
 
log_size
);

816 
LIBBPF_API
 

817 
bpf_¥ogøm__£t_©èch_èrgë
(
bpf_¥ogøm
 *
¥og
, 
©èch_¥og_fd
,

818 c⁄° *
©èch_func_«me
);

820 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

821 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_sockë_fûãr
(c⁄° 
bpf_¥ogøm
 *
¥og
);

822 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

823 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_åa˚poöt
(c⁄° 
bpf_¥ogøm
 *
¥og
);

824 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

825 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_øw_åa˚poöt
(c⁄° 
bpf_¥ogøm
 *
¥og
);

826 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

827 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_k¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
);

828 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

829 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_lsm
(c⁄° 
bpf_¥ogøm
 *
¥og
);

830 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

831 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_sched_˛s
(c⁄° 
bpf_¥ogøm
 *
¥og
);

832 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

833 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_sched_a˘
(c⁄° 
bpf_¥ogøm
 *
¥og
);

834 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

835 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_xdp
(c⁄° 
bpf_¥ogøm
 *
¥og
);

836 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

837 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_≥rf_evít
(c⁄° 
bpf_¥ogøm
 *
¥og
);

838 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

839 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_åacög
(c⁄° 
bpf_¥ogøm
 *
¥og
);

840 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

841 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_°ru˘_›s
(c⁄° 
bpf_¥ogøm
 *
¥og
);

842 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

843 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_exãnsi⁄
(c⁄° 
bpf_¥ogøm
 *
¥og
);

844 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

845 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_sk_lookup
(c⁄° 
bpf_¥ogøm
 *
¥og
);

853 
	sbpf_m≠_def
 {

854 
ty≥
;

855 
key_size
;

856 
vÆue_size
;

857 
max_íåõs
;

858 
m≠_Êags
;

869 
LIBBPF_API
 
bpf_m≠
 *

870 
bpf_obje˘__föd_m≠_by_«me
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° *
«me
);

872 
LIBBPF_API
 

873 
bpf_obje˘__föd_m≠_fd_by_«me
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° *
«me
);

879 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_object__find_map_by_name() instead")

880 
bpf_m≠
 *

881 
bpf_obje˘__föd_m≠_by_off£t
(
bpf_obje˘
 *
obj
, 
size_t
 
off£t
);

883 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__next_map() instead")

884 
bpf_m≠
 *
bpf_m≠__√xt
(c⁄° bpf_m≠ *
m≠
, c⁄° 
bpf_obje˘
 *
obj
);

885 
LIBBPF_API
 
bpf_m≠
 *

886 
bpf_obje˘__√xt_m≠
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° 
bpf_m≠
 *
m≠
);

888 
	#bpf_obje˘__f‹_óch_m≠
(
pos
, 
obj
) \

889 (
pos
Ë
	`bpf_obje˘__√xt_m≠
((
obj
), 
NULL
); \

890 (
pos
Ë!
NULL
; \

891 (
pos
Ë
	`bpf_obje˘__√xt_m≠
((
obj
), (pos)))

	)

892 
	#bpf_m≠__f‹_óch
 
bpf_obje˘__f‹_óch_m≠


	)

894 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__prev_map() instead")

895 
bpf_m≠
 *
bpf_m≠__¥ev
(c⁄° bpf_m≠ *
m≠
, c⁄° 
bpf_obje˘
 *
obj
);

896 
LIBBPF_API
 
bpf_m≠
 *

897 
bpf_obje˘__¥ev_m≠
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° 
bpf_m≠
 *
m≠
);

918 
LIBBPF_API
 
bpf_m≠__£t_auto¸óã
(
bpf_m≠
 *
m≠
, 
boﬁ
 
auto¸óã
);

919 
LIBBPF_API
 
boﬁ
 
bpf_m≠__auto¸óã
(c⁄° 
bpf_m≠
 *
m≠
);

927 
LIBBPF_API
 
bpf_m≠__fd
(c⁄° 
bpf_m≠
 *
m≠
);

928 
LIBBPF_API
 
bpf_m≠__ªu£_fd
(
bpf_m≠
 *
m≠
, 
fd
);

930 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 8, "useáppropriate getters or setters instead")

931 c⁄° 
bpf_m≠_def
 *
bpf_m≠__def
(c⁄° 
bpf_m≠
 *
m≠
);

933 
LIBBPF_API
 c⁄° *
bpf_m≠__«me
(c⁄° 
bpf_m≠
 *
m≠
);

935 
LIBBPF_API
 
bpf_m≠_ty≥
 
bpf_m≠__ty≥
(c⁄° 
bpf_m≠
 *
m≠
);

936 
LIBBPF_API
 
bpf_m≠__£t_ty≥
(
bpf_m≠
 *
m≠
, 
bpf_m≠_ty≥
 
ty≥
);

938 
LIBBPF_API
 
__u32
 
bpf_m≠__max_íåõs
(c⁄° 
bpf_m≠
 *
m≠
);

939 
LIBBPF_API
 
bpf_m≠__£t_max_íåõs
(
bpf_m≠
 *
m≠
, 
__u32
 
max_íåõs
);

940 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_map__set_max_entries() instead")

941 
LIBBPF_API
 
bpf_m≠__ªsize
(
bpf_m≠
 *
m≠
, 
__u32
 
max_íåõs
);

943 
LIBBPF_API
 
__u32
 
bpf_m≠__m≠_Êags
(c⁄° 
bpf_m≠
 *
m≠
);

944 
LIBBPF_API
 
bpf_m≠__£t_m≠_Êags
(
bpf_m≠
 *
m≠
, 
__u32
 
Êags
);

946 
LIBBPF_API
 
__u32
 
bpf_m≠__numa_node
(c⁄° 
bpf_m≠
 *
m≠
);

947 
LIBBPF_API
 
bpf_m≠__£t_numa_node
(
bpf_m≠
 *
m≠
, 
__u32
 
numa_node
);

949 
LIBBPF_API
 
__u32
 
bpf_m≠__key_size
(c⁄° 
bpf_m≠
 *
m≠
);

950 
LIBBPF_API
 
bpf_m≠__£t_key_size
(
bpf_m≠
 *
m≠
, 
__u32
 
size
);

952 
LIBBPF_API
 
__u32
 
bpf_m≠__vÆue_size
(c⁄° 
bpf_m≠
 *
m≠
);

953 
LIBBPF_API
 
bpf_m≠__£t_vÆue_size
(
bpf_m≠
 *
m≠
, 
__u32
 
size
);

955 
LIBBPF_API
 
__u32
 
bpf_m≠__btf_key_ty≥_id
(c⁄° 
bpf_m≠
 *
m≠
);

956 
LIBBPF_API
 
__u32
 
bpf_m≠__btf_vÆue_ty≥_id
(c⁄° 
bpf_m≠
 *
m≠
);

958 
LIBBPF_API
 
__u32
 
bpf_m≠__ifödex
(c⁄° 
bpf_m≠
 *
m≠
);

959 
LIBBPF_API
 
bpf_m≠__£t_ifödex
(
bpf_m≠
 *
m≠
, 
__u32
 
ifödex
);

961 
LIBBPF_API
 
__u64
 
bpf_m≠__m≠_exåa
(c⁄° 
bpf_m≠
 *
m≠
);

962 
LIBBPF_API
 
bpf_m≠__£t_m≠_exåa
(
bpf_m≠
 *
m≠
, 
__u64
 
m≠_exåa
);

964 (*
bpf_m≠_˛ór_¥iv_t
)(
	tbpf_m≠
 *, *);

965 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

966 
LIBBPF_API
 
bpf_m≠__£t_¥iv
(
bpf_m≠
 *
m≠
, *
¥iv
,

967 
bpf_m≠_˛ór_¥iv_t
 
˛ór_¥iv
);

968 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

969 
LIBBPF_API
 *
bpf_m≠__¥iv
(c⁄° 
bpf_m≠
 *
m≠
);

970 
LIBBPF_API
 
bpf_m≠__£t_öôül_vÆue
(
bpf_m≠
 *
m≠
,

971 c⁄° *
d©a
, 
size_t
 
size
);

972 
LIBBPF_API
 c⁄° *
bpf_m≠__öôül_vÆue
(
bpf_m≠
 *
m≠
, 
size_t
 *
psize
);

973 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_map__type() instead")

974 
LIBBPF_API
 
boﬁ
 
bpf_m≠__is_ofÊﬂd_√uåÆ
(c⁄° 
bpf_m≠
 *
m≠
);

983 
LIBBPF_API
 
boﬁ
 
bpf_m≠__is_öã∫Æ
(c⁄° 
bpf_m≠
 *
m≠
);

984 
LIBBPF_API
 
bpf_m≠__£t_pö_∑th
(
bpf_m≠
 *
m≠
, c⁄° *
∑th
);

985 
LIBBPF_API
 c⁄° *
bpf_m≠__pö_∑th
(c⁄° 
bpf_m≠
 *
m≠
);

986 
LIBBPF_API
 
boﬁ
 
bpf_m≠__is_pö√d
(c⁄° 
bpf_m≠
 *
m≠
);

987 
LIBBPF_API
 
bpf_m≠__pö
(
bpf_m≠
 *
m≠
, c⁄° *
∑th
);

988 
LIBBPF_API
 
bpf_m≠__u≈ö
(
bpf_m≠
 *
m≠
, c⁄° *
∑th
);

990 
LIBBPF_API
 
bpf_m≠__£t_ö√r_m≠_fd
(
bpf_m≠
 *
m≠
, 
fd
);

991 
LIBBPF_API
 
bpf_m≠
 *
bpf_m≠__ö√r_m≠
(bpf_m≠ *
m≠
);

1013 
LIBBPF_API
 
bpf_m≠__lookup_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

1014 c⁄° *
key
, 
size_t
 
key_sz
,

1015 *
vÆue
, 
size_t
 
vÆue_sz
, 
__u64
 
Êags
);

1037 
LIBBPF_API
 
bpf_m≠__upd©e_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

1038 c⁄° *
key
, 
size_t
 
key_sz
,

1039 c⁄° *
vÆue
, 
size_t
 
vÆue_sz
, 
__u64
 
Êags
);

1053 
LIBBPF_API
 
bpf_m≠__dñëe_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

1054 c⁄° *
key
, 
size_t
 
key_sz
, 
__u64
 
Êags
);

1076 
LIBBPF_API
 
bpf_m≠__lookup_™d_dñëe_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

1077 c⁄° *
key
, 
size_t
 
key_sz
,

1078 *
vÆue
, 
size_t
 
vÆue_sz
, 
__u64
 
Êags
);

1094 
LIBBPF_API
 
bpf_m≠__gë_√xt_key
(c⁄° 
bpf_m≠
 *
m≠
,

1095 c⁄° *
cur_key
, *
√xt_key
, 
size_t
 
key_sz
);

1129 
LIBBPF_API
 
libbpf_gë_îr‹
(c⁄° *
±r
);

1131 
	sbpf_¥og_lﬂd_©å
 {

1132 c⁄° *
fûe
;

1133 
bpf_¥og_ty≥
 
¥og_ty≥
;

1134 
bpf_©èch_ty≥
 
ex≥˘ed_©èch_ty≥
;

1135 
ifödex
;

1136 
log_Àvñ
;

1137 
¥og_Êags
;

1140 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_object__open()ánd bpf_object__load() instead")

1141 
LIBBPF_API
 
bpf_¥og_lﬂd_x©å
(c⁄° 
bpf_¥og_lﬂd_©å
 *
©å
,

1142 
bpf_obje˘
 **
pobj
, *
¥og_fd
);

1143 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__open()ánd bpf_object__load() instead")

1144 
LIBBPF_API
 
bpf_¥og_lﬂd_dïªˇãd
(c⁄° *
fûe
, 
bpf_¥og_ty≥
 
ty≥
,

1145 
bpf_obje˘
 **
pobj
, *
¥og_fd
);

1148 
	sxdp_lök_öfo
 {

1149 
__u32
 
¥og_id
;

1150 
__u32
 
drv_¥og_id
;

1151 
__u32
 
hw_¥og_id
;

1152 
__u32
 
skb_¥og_id
;

1153 
__u8
 
©èch_mode
;

1156 
	sbpf_xdp_£t_lök_›ts
 {

1157 
size_t
 
sz
;

1158 
ﬁd_fd
;

1159 
size_t
 :0;

1161 
	#bpf_xdp_£t_lök_›ts__œ°_fõld
 
ﬁd_fd


	)

1163 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_xdp_attach() instead")

1164 
LIBBPF_API
 
bpf_£t_lök_xdp_fd
(
ifödex
, 
fd
, 
__u32
 
Êags
);

1165 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_xdp_attach() instead")

1166 
LIBBPF_API
 
bpf_£t_lök_xdp_fd_›ts
(
ifödex
, 
fd
, 
__u32
 
Êags
,

1167 c⁄° 
bpf_xdp_£t_lök_›ts
 *
›ts
);

1168 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_xdp_query_id() instead")

1169 
LIBBPF_API
 
bpf_gë_lök_xdp_id
(
ifödex
, 
__u32
 *
¥og_id
, __u32 
Êags
);

1170 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_xdp_query() instead")

1171 
LIBBPF_API
 
bpf_gë_lök_xdp_öfo
(
ifödex
, 
xdp_lök_öfo
 *
öfo
,

1172 
size_t
 
öfo_size
, 
__u32
 
Êags
);

1174 
	sbpf_xdp_©èch_›ts
 {

1175 
size_t
 
sz
;

1176 
ﬁd_¥og_fd
;

1177 
size_t
 :0;

1179 
	#bpf_xdp_©èch_›ts__œ°_fõld
 
ﬁd_¥og_fd


	)

1181 
	sbpf_xdp_quîy_›ts
 {

1182 
size_t
 
sz
;

1183 
__u32
 
¥og_id
;

1184 
__u32
 
drv_¥og_id
;

1185 
__u32
 
hw_¥og_id
;

1186 
__u32
 
skb_¥og_id
;

1187 
__u8
 
©èch_mode
;

1188 
size_t
 :0;

1190 
	#bpf_xdp_quîy_›ts__œ°_fõld
 
©èch_mode


	)

1192 
LIBBPF_API
 
bpf_xdp_©èch
(
ifödex
, 
¥og_fd
, 
__u32
 
Êags
,

1193 c⁄° 
bpf_xdp_©èch_›ts
 *
›ts
);

1194 
LIBBPF_API
 
bpf_xdp_dëach
(
ifödex
, 
__u32
 
Êags
,

1195 c⁄° 
bpf_xdp_©èch_›ts
 *
›ts
);

1196 
LIBBPF_API
 
bpf_xdp_quîy
(
ifödex
, 
Êags
, 
bpf_xdp_quîy_›ts
 *
›ts
);

1197 
LIBBPF_API
 
bpf_xdp_quîy_id
(
ifödex
, 
Êags
, 
__u32
 *
¥og_id
);

1200 
	ebpf_tc_©èch_poöt
 {

1201 
BPF_TC_INGRESS
 = 1 << 0,

1202 
BPF_TC_EGRESS
 = 1 << 1,

1203 
BPF_TC_CUSTOM
 = 1 << 2,

1206 
	#BPF_TC_PARENT
(
a
, 
b
) \

1207 ((((
a
Ë<< 16Ë& 0xFFFF0000UË| ((
b
Ë& 0x0000FFFFU))

	)

1209 
	ebpf_tc_Êags
 {

1210 
BPF_TC_F_REPLACE
 = 1 << 0,

1213 
	sbpf_tc_hook
 {

1214 
size_t
 
sz
;

1215 
ifödex
;

1216 
bpf_tc_©èch_poöt
 
©èch_poöt
;

1217 
__u32
 
∑ª¡
;

1218 
size_t
 :0;

1220 
	#bpf_tc_hook__œ°_fõld
 
∑ª¡


	)

1222 
	sbpf_tc_›ts
 {

1223 
size_t
 
sz
;

1224 
¥og_fd
;

1225 
__u32
 
Êags
;

1226 
__u32
 
¥og_id
;

1227 
__u32
 
h™dÀ
;

1228 
__u32
 
¥i‹ôy
;

1229 
size_t
 :0;

1231 
	#bpf_tc_›ts__œ°_fõld
 
¥i‹ôy


	)

1233 
LIBBPF_API
 
bpf_tc_hook_¸óã
(
bpf_tc_hook
 *
hook
);

1234 
LIBBPF_API
 
bpf_tc_hook_de°roy
(
bpf_tc_hook
 *
hook
);

1235 
LIBBPF_API
 
bpf_tc_©èch
(c⁄° 
bpf_tc_hook
 *
hook
,

1236 
bpf_tc_›ts
 *
›ts
);

1237 
LIBBPF_API
 
bpf_tc_dëach
(c⁄° 
bpf_tc_hook
 *
hook
,

1238 c⁄° 
bpf_tc_›ts
 *
›ts
);

1239 
LIBBPF_API
 
bpf_tc_quîy
(c⁄° 
bpf_tc_hook
 *
hook
,

1240 
bpf_tc_›ts
 *
›ts
);

1243 
rög_buf„r
;

1245 (*
rög_buf„r_ßm∂e_‚
)(*
	t˘x
, *
	td©a
, 
	tsize_t
 
	tsize
);

1247 
	srög_buf„r_›ts
 {

1248 
size_t
 
sz
;

1251 
	#rög_buf„r_›ts__œ°_fõld
 
sz


	)

1253 
LIBBPF_API
 
rög_buf„r
 *

1254 
rög_buf„r__√w
(
m≠_fd
, 
rög_buf„r_ßm∂e_‚
 
ßm∂e_cb
, *
˘x
,

1255 c⁄° 
rög_buf„r_›ts
 *
›ts
);

1256 
LIBBPF_API
 
rög_buf„r__‰ì
(
rög_buf„r
 *
rb
);

1257 
LIBBPF_API
 
rög_buf„r__add
(
rög_buf„r
 *
rb
, 
m≠_fd
,

1258 
rög_buf„r_ßm∂e_‚
 
ßm∂e_cb
, *
˘x
);

1259 
LIBBPF_API
 
rög_buf„r__pﬁl
(
rög_buf„r
 *
rb
, 
timeout_ms
);

1260 
LIBBPF_API
 
rög_buf„r__c⁄sume
(
rög_buf„r
 *
rb
);

1261 
LIBBPF_API
 
rög_buf„r__ïﬁl_fd
(c⁄° 
rög_buf„r
 *
rb
);

1264 
≥rf_buf„r
;

1266 (*
≥rf_buf„r_ßm∂e_‚
)(*
	t˘x
, 
	t˝u
,

1267 *
	td©a
, 
	t__u32
 
	tsize
);

1268 (*
≥rf_buf„r_lo°_‚
)(*
	t˘x
, 
	t˝u
, 
	t__u64
 
	t˙t
);

1271 
	s≥rf_buf„r_›ts
 {

1273 
size_t
 
sz
;

1276 
≥rf_buf„r_ßm∂e_‚
 
ßm∂e_cb
;

1278 
≥rf_buf„r_lo°_‚
 
lo°_cb
;

1280 *
˘x
;

1284 
	#≥rf_buf„r_›ts__œ°_fõld
 
sz


	)

1298 
LIBBPF_API
 
≥rf_buf„r
 *

1299 
≥rf_buf„r__√w
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

1300 
≥rf_buf„r_ßm∂e_‚
 
ßm∂e_cb
, 
≥rf_buf„r_lo°_‚
 
lo°_cb
, *
˘x
,

1301 c⁄° 
≥rf_buf„r_›ts
 *
›ts
);

1303 
LIBBPF_API
 
≥rf_buf„r
 *

1304 
≥rf_buf„r__√w_v0_6_0
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

1305 
≥rf_buf„r_ßm∂e_‚
 
ßm∂e_cb
, 
≥rf_buf„r_lo°_‚
 
lo°_cb
, *
˘x
,

1306 c⁄° 
≥rf_buf„r_›ts
 *
›ts
);

1308 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "useÇew variant ofÖerf_buffer__new() instead")

1309 
≥rf_buf„r
 *
≥rf_buf„r__√w_dïªˇãd
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

1310 c⁄° 
≥rf_buf„r_›ts
 *
›ts
);

1312 
	#≥rf_buf„r__√w
(...Ë
	`___libbpf_ovîlﬂd
(
___≥rf_buf„r_√w
, 
__VA_ARGS__
)

	)

1313 
	#___≥rf_buf„r_√w6
(
m≠_fd
, 
∑ge_˙t
, 
ßm∂e_cb
, 
lo°_cb
, 
˘x
, 
›ts
) \

1314 
	`≥rf_buf„r__√w
(
m≠_fd
, 
∑ge_˙t
, 
ßm∂e_cb
, 
lo°_cb
, 
˘x
, 
›ts
)

	)

1315 
	#___≥rf_buf„r_√w3
(
m≠_fd
, 
∑ge_˙t
, 
›ts
) \

1316 
	`≥rf_buf„r__√w_dïªˇãd
(
m≠_fd
, 
∑ge_˙t
, 
›ts
)

	)

1318 
	ebpf_≥rf_evít_ªt
 {

1319 
LIBBPF_PERF_EVENT_DONE
 = 0,

1320 
LIBBPF_PERF_EVENT_ERROR
 = -1,

1321 
LIBBPF_PERF_EVENT_CONT
 = -2,

1324 
≥rf_evít_hódî
;

1326 
bpf_≥rf_evít_ªt


1327 (*
	t≥rf_buf„r_evít_‚
)(*
	t˘x
, 
	t˝u
, 
	t≥rf_evít_hódî
 *
	tevít
);

1330 
	s≥rf_buf„r_øw_›ts
 {

1333 
size_t
 
sz
;

1339 
≥rf_evít_©å
 *
©å
;

1341 
≥rf_buf„r_evít_‚
 
evít_cb
;

1343 *
˘x
;

1349 
˝u_˙t
;

1351 *
˝us
;

1353 *
m≠_keys
;

1355 
	#≥rf_buf„r_øw_›ts__œ°_fõld
 
m≠_keys


	)

1357 
LIBBPF_API
 
≥rf_buf„r
 *

1358 
≥rf_buf„r__√w_øw
(
m≠_fd
, 
size_t
 
∑ge_˙t
, 
≥rf_evít_©å
 *
©å
,

1359 
≥rf_buf„r_evít_‚
 
evít_cb
, *
˘x
,

1360 c⁄° 
≥rf_buf„r_øw_›ts
 *
›ts
);

1362 
LIBBPF_API
 
≥rf_buf„r
 *

1363 
≥rf_buf„r__√w_øw_v0_6_0
(
m≠_fd
, 
size_t
 
∑ge_˙t
, 
≥rf_evít_©å
 *
©å
,

1364 
≥rf_buf„r_evít_‚
 
evít_cb
, *
˘x
,

1365 c⁄° 
≥rf_buf„r_øw_›ts
 *
›ts
);

1367 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "useÇew variant ofÖerf_buffer__new_raw() instead")

1368 
≥rf_buf„r
 *
≥rf_buf„r__√w_øw_dïªˇãd
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

1369 c⁄° 
≥rf_buf„r_øw_›ts
 *
›ts
);

1371 
	#≥rf_buf„r__√w_øw
(...Ë
	`___libbpf_ovîlﬂd
(
___≥rf_buf„r_√w_øw
, 
__VA_ARGS__
)

	)

1372 
	#___≥rf_buf„r_√w_øw6
(
m≠_fd
, 
∑ge_˙t
, 
©å
, 
evít_cb
, 
˘x
, 
›ts
) \

1373 
	`≥rf_buf„r__√w_øw
(
m≠_fd
, 
∑ge_˙t
, 
©å
, 
evít_cb
, 
˘x
, 
›ts
)

	)

1374 
	#___≥rf_buf„r_√w_øw3
(
m≠_fd
, 
∑ge_˙t
, 
›ts
) \

1375 
	`≥rf_buf„r__√w_øw_dïªˇãd
(
m≠_fd
, 
∑ge_˙t
, 
›ts
)

	)

1377 
LIBBPF_API
 
≥rf_buf„r__‰ì
(
≥rf_buf„r
 *
pb
);

1378 
LIBBPF_API
 
≥rf_buf„r__ïﬁl_fd
(c⁄° 
≥rf_buf„r
 *
pb
);

1379 
LIBBPF_API
 
≥rf_buf„r__pﬁl
(
≥rf_buf„r
 *
pb
, 
timeout_ms
);

1380 
LIBBPF_API
 
≥rf_buf„r__c⁄sume
(
≥rf_buf„r
 *
pb
);

1381 
LIBBPF_API
 
≥rf_buf„r__c⁄sume_buf„r
(
≥rf_buf„r
 *
pb
, 
size_t
 
buf_idx
);

1382 
LIBBPF_API
 
size_t
 
≥rf_buf„r__buf„r_˙t
(c⁄° 
≥rf_buf„r
 *
pb
);

1383 
LIBBPF_API
 
≥rf_buf„r__buf„r_fd
(c⁄° 
≥rf_buf„r
 *
pb
, 
size_t
 
buf_idx
);

1385 
bpf_≥rf_evít_ªt


1386 (*
	tbpf_≥rf_evít_¥öt_t
)(
	t≥rf_evít_hódî
 *
	thdr
,

1387 *
	t¥iv©e_d©a
);

1388 
LIBBPF_DEPRECATED_SINCE
(0, 8, "useÖerf_buffer__poll() orÖerf_buffer__consume() instead")

1389 
LIBBPF_API
 
bpf_≥rf_evít_ªt


1390 
bpf_≥rf_evít_ªad_sim∂e
(*
mm≠_mem
, 
size_t
 
mm≠_size
, size_à
∑ge_size
,

1391 **
c›y_mem
, 
size_t
 *
c›y_size
,

1392 
bpf_≥rf_evít_¥öt_t
 
‚
, *
¥iv©e_d©a
);

1394 
bpf_¥og_löfo
;

1395 
bpf_¥og_öfo
;

1397 
LIBBPF_API
 
bpf_¥og_löfo__‰ì
(
bpf_¥og_löfo
 *
¥og_löfo
);

1398 
LIBBPF_API
 
bpf_¥og_löfo
 *

1399 
bpf_¥og_löfo__√w
(c⁄° 
bpf_¥og_öfo
 *
öfo
);

1400 
LIBBPF_API
 c⁄° 
bpf_löe_öfo
 *

1401 
bpf_¥og_löfo__lföd_addr_func
(c⁄° 
bpf_¥og_löfo
 *
¥og_löfo
,

1402 
__u64
 
addr
, 
__u32
 
func_idx
, __u32 
ƒ_skù
);

1403 
LIBBPF_API
 c⁄° 
bpf_löe_öfo
 *

1404 
bpf_¥og_löfo__lföd
(c⁄° 
bpf_¥og_löfo
 *
¥og_löfo
,

1405 
__u32
 
ö¢_off
, __u32 
ƒ_skù
);

1415 
LIBBPF_DEPRECATED_SINCE
(0, 8, "useÜibbpf_probe_bpf_prog_type() instead")

1416 
LIBBPF_API
 
boﬁ
 
bpf_¥obe_¥og_ty≥
(
bpf_¥og_ty≥
 
¥og_ty≥
, 
__u32
 
ifödex
);

1417 
LIBBPF_DEPRECATED_SINCE
(0, 8, "useÜibbpf_probe_bpf_map_type() instead")

1418 
LIBBPF_API
 
boﬁ
 
bpf_¥obe_m≠_ty≥
(
bpf_m≠_ty≥
 
m≠_ty≥
, 
__u32
 
ifödex
);

1419 
LIBBPF_DEPRECATED_SINCE
(0, 8, "useÜibbpf_probe_bpf_helper() instead")

1420 
LIBBPF_API
 
boﬁ
 
bpf_¥obe_hñ≥r
(
bpf_func_id
 
id
, 
bpf_¥og_ty≥
 
¥og_ty≥
, 
__u32
 
ifödex
);

1421 
LIBBPF_DEPRECATED_SINCE
(0, 8, "implement your own or use bpftool for feature detection")

1422 
LIBBPF_API
 
boﬁ
 
bpf_¥obe_œrge_ö¢_limô
(
__u32
 
ifödex
);

1436 
LIBBPF_API
 
libbpf_¥obe_bpf_¥og_ty≥
(
bpf_¥og_ty≥
 
¥og_ty≥
, c⁄° *
›ts
);

1449 
LIBBPF_API
 
libbpf_¥obe_bpf_m≠_ty≥
(
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
›ts
);

1463 
LIBBPF_API
 
libbpf_¥obe_bpf_hñ≥r
(
bpf_¥og_ty≥
 
¥og_ty≥
,

1464 
bpf_func_id
 
hñ≥r_id
, c⁄° *
›ts
);

1495 
	ebpf_¥og_öfo_¨øy
 {

1496 
BPF_PROG_INFO_FIRST_ARRAY
 = 0,

1497 
BPF_PROG_INFO_JITED_INSNS
 = 0,

1498 
BPF_PROG_INFO_XLATED_INSNS
,

1499 
BPF_PROG_INFO_MAP_IDS
,

1500 
BPF_PROG_INFO_JITED_KSYMS
,

1501 
BPF_PROG_INFO_JITED_FUNC_LENS
,

1502 
BPF_PROG_INFO_FUNC_INFO
,

1503 
BPF_PROG_INFO_LINE_INFO
,

1504 
BPF_PROG_INFO_JITED_LINE_INFO
,

1505 
BPF_PROG_INFO_PROG_TAGS
,

1506 
BPF_PROG_INFO_LAST_ARRAY
,

1509 
	sbpf_¥og_öfo_löór
 {

1511 
__u32
 
öfo_Àn
;

1513 
__u32
 
d©a_Àn
;

1515 
__u64
 
¨øys
;

1516 
bpf_¥og_öfo
 
öfo
;

1517 
__u8
 
d©a
[];

1520 
LIBBPF_DEPRECATED_SINCE
(0, 6, "useá customÜinearÖrog_info wrapper")

1521 
LIBBPF_API
 
bpf_¥og_öfo_löór
 *

1522 
bpf_¥ogøm__gë_¥og_öfo_löór
(
fd
, 
__u64
 
¨øys
);

1524 
LIBBPF_DEPRECATED_SINCE
(0, 6, "useá customÜinearÖrog_info wrapper")

1525 
LIBBPF_API
 

1526 
bpf_¥ogøm__bpû_addr_to_offs
(
bpf_¥og_öfo_löór
 *
öfo_löór
);

1528 
LIBBPF_DEPRECATED_SINCE
(0, 6, "useá customÜinearÖrog_info wrapper")

1529 
LIBBPF_API
 

1530 
bpf_¥ogøm__bpû_offs_to_addr
(
bpf_¥og_öfo_löór
 *
öfo_löór
);

1546 
LIBBPF_API
 
libbpf_num_possibÀ_˝us
();

1548 
	sbpf_m≠_skñë⁄
 {

1549 c⁄° *
«me
;

1550 
bpf_m≠
 **
m≠
;

1551 **
mm≠ed
;

1554 
	sbpf_¥og_skñë⁄
 {

1555 c⁄° *
«me
;

1556 
bpf_¥ogøm
 **
¥og
;

1557 
bpf_lök
 **
lök
;

1560 
	sbpf_obje˘_skñë⁄
 {

1561 
size_t
 
sz
;

1563 c⁄° *
«me
;

1564 c⁄° *
d©a
;

1565 
size_t
 
d©a_sz
;

1567 
bpf_obje˘
 **
obj
;

1569 
m≠_˙t
;

1570 
m≠_skñ_sz
;

1571 
bpf_m≠_skñë⁄
 *
m≠s
;

1573 
¥og_˙t
;

1574 
¥og_skñ_sz
;

1575 
bpf_¥og_skñë⁄
 *
¥ogs
;

1578 
LIBBPF_API
 

1579 
bpf_obje˘__›í_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
,

1580 c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
);

1581 
LIBBPF_API
 
bpf_obje˘__lﬂd_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
);

1582 
LIBBPF_API
 
bpf_obje˘__©èch_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
);

1583 
LIBBPF_API
 
bpf_obje˘__dëach_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
);

1584 
LIBBPF_API
 
bpf_obje˘__de°roy_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
);

1586 
	sbpf_v¨_skñë⁄
 {

1587 c⁄° *
«me
;

1588 
bpf_m≠
 **
m≠
;

1589 **
addr
;

1592 
	sbpf_obje˘_subskñë⁄
 {

1593 
size_t
 
sz
;

1595 c⁄° 
bpf_obje˘
 *
obj
;

1597 
m≠_˙t
;

1598 
m≠_skñ_sz
;

1599 
bpf_m≠_skñë⁄
 *
m≠s
;

1601 
¥og_˙t
;

1602 
¥og_skñ_sz
;

1603 
bpf_¥og_skñë⁄
 *
¥ogs
;

1605 
v¨_˙t
;

1606 
v¨_skñ_sz
;

1607 
bpf_v¨_skñë⁄
 *
v¨s
;

1610 
LIBBPF_API
 

1611 
bpf_obje˘__›í_subskñë⁄
(
bpf_obje˘_subskñë⁄
 *
s
);

1612 
LIBBPF_API
 

1613 
bpf_obje˘__de°roy_subskñë⁄
(
bpf_obje˘_subskñë⁄
 *
s
);

1615 
	sgí_lﬂdî_›ts
 {

1616 
size_t
 
sz
;

1617 c⁄° *
d©a
;

1618 c⁄° *
ö¢s
;

1619 
__u32
 
d©a_sz
;

1620 
__u32
 
ö¢s_sz
;

1623 
	#gí_lﬂdî_›ts__œ°_fõld
 
ö¢s_sz


	)

1624 
LIBBPF_API
 
bpf_obje˘__gí_lﬂdî
(
bpf_obje˘
 *
obj
,

1625 
gí_lﬂdî_›ts
 *
›ts
);

1627 
	elibbpf_åi°©e
 {

1628 
TRI_NO
 = 0,

1629 
TRI_YES
 = 1,

1630 
TRI_MODULE
 = 2,

1633 
	sbpf_lökî_›ts
 {

1635 
size_t
 
sz
;

1637 
	#bpf_lökî_›ts__œ°_fõld
 
sz


	)

1639 
	sbpf_lökî_fûe_›ts
 {

1641 
size_t
 
sz
;

1643 
	#bpf_lökî_fûe_›ts__œ°_fõld
 
sz


	)

1645 
bpf_lökî
;

1647 
LIBBPF_API
 
bpf_lökî
 *
bpf_lökî__√w
(c⁄° *
fûíame
, 
bpf_lökî_›ts
 *
›ts
);

1648 
LIBBPF_API
 
bpf_lökî__add_fûe
(
bpf_lökî
 *
lökî
,

1649 c⁄° *
fûíame
,

1650 c⁄° 
bpf_lökî_fûe_›ts
 *
›ts
);

1651 
LIBBPF_API
 
bpf_lökî__föÆize
(
bpf_lökî
 *
lökî
);

1652 
LIBBPF_API
 
bpf_lökî__‰ì
(
bpf_lökî
 *
lökî
);

1658 
bpf_¥og_lﬂd_›ts
;

1664 (*
libbpf_¥og_£tup_‚_t
)(
	tbpf_¥ogøm
 *
	t¥og
, 
	tcookõ
);

1669 (*
libbpf_¥og_¥ï¨e_lﬂd_‚_t
)(
	tbpf_¥ogøm
 *
	t¥og
,

1670 
	tbpf_¥og_lﬂd_›ts
 *
	t›ts
, 
	tcookõ
);

1679 (*
libbpf_¥og_©èch_‚_t
)(c⁄° 
	tbpf_¥ogøm
 *
	t¥og
, 
	tcookõ
,

1680 
	tbpf_lök
 **
	tlök
);

1682 
	slibbpf_¥og_h™dÀr_›ts
 {

1684 
size_t
 
sz
;

1692 
cookõ
;

1696 
libbpf_¥og_£tup_‚_t
 
¥og_£tup_‚
;

1700 
libbpf_¥og_¥ï¨e_lﬂd_‚_t
 
¥og_¥ï¨e_lﬂd_‚
;

1704 
libbpf_¥og_©èch_‚_t
 
¥og_©èch_‚
;

1706 
	#libbpf_¥og_h™dÀr_›ts__œ°_fõld
 
¥og_©èch_‚


	)

1745 
LIBBPF_API
 
libbpf_ªgi°î_¥og_h™dÀr
(c⁄° *
£c
,

1746 
bpf_¥og_ty≥
 
¥og_ty≥
,

1747 
bpf_©èch_ty≥
 
exp_©èch_ty≥
,

1748 c⁄° 
libbpf_¥og_h™dÀr_›ts
 *
›ts
);

1761 
LIBBPF_API
 
libbpf_uƒegi°î_¥og_h™dÀr
(
h™dÀr_id
);

1777 
LIBBPF_API
 
libbpf_num_⁄löe_˝us
();

1779 #ifde‡
__˝lu•lus


	@build/usr/include/bpf/libbpf_common.h

9 #i‚de‡
__LIBBPF_LIBBPF_COMMON_H


10 
	#__LIBBPF_LIBBPF_COMMON_H


	)

12 
	~<°rög.h
>

13 
	~"libbpf_vîsi⁄.h
"

15 #i‚de‡
LIBBPF_API


16 
	#LIBBPF_API
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

19 
	#LIBBPF_DEPRECATED
(
msg
Ë
	`__©åibuã__
((
	`dïªˇãd
(msg)))

	)

22 
	#LIBBPF_DEPRECATED_SINCE
(
maj‹
, 
mö‹
, 
msg
) \

23 
__LIBBPF_MARK_DEPRECATED_
 ## 
maj‹
 ## 
_
 ## 
mö‹
 \

24 (
	`LIBBPF_DEPRECATED
("libbp‡v" #maj‹ "." #mö‹ "+: " 
msg
))

	)

26 
	#__LIBBPF_CURRENT_VERSION_GEQ
(
maj‹
, 
mö‹
) \

27 (
LIBBPF_MAJOR_VERSION
 > (
maj‹
) || \

28 (
LIBBPF_MAJOR_VERSION
 =(
maj‹
Ë&& 
LIBBPF_MINOR_VERSION
 >(
mö‹
)))

	)

33 #i‡
__LIBBPF_CURRENT_VERSION_GEQ
(0, 6)

34 
	#__LIBBPF_MARK_DEPRECATED_0_6
(
X
Ë
	)
X

36 
	#__LIBBPF_MARK_DEPRECATED_0_6
(
X
)

	)

38 #i‡
__LIBBPF_CURRENT_VERSION_GEQ
(0, 7)

39 
	#__LIBBPF_MARK_DEPRECATED_0_7
(
X
Ë
	)
X

41 
	#__LIBBPF_MARK_DEPRECATED_0_7
(
X
)

	)

43 #i‡
__LIBBPF_CURRENT_VERSION_GEQ
(0, 8)

44 
	#__LIBBPF_MARK_DEPRECATED_0_8
(
X
Ë
	)
X

46 
	#__LIBBPF_MARK_DEPRECATED_0_8
(
X
)

	)

55 
	#___libbpf_ˇt
(
A
, 
B
ËA ## 
	)
B

56 
	#___libbpf_£À˘
(
NAME
, 
NUM
Ë
	`___libbpf_ˇt
(NAME, NUM)

	)

57 
	#___libbpf_¡h
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
N
, ...Ë
	)
N

58 
	#___libbpf_˙t
(...Ë
	`___libbpf_¡h
(
__VA_ARGS__
, 6, 5, 4, 3, 2, 1)

	)

59 
	#___libbpf_ovîlﬂd
(
NAME
, ...Ë
	`___libbpf_£À˘
(NAME, 
	`___libbpf_˙t
(
__VA_ARGS__
))(__VA_ARGS__)

	)

74 
	#LIBBPF_OPTS
(
TYPE
, 
NAME
, ...) \

75 
TYPE
 
NAME
 = ({ \

76 
	`mem£t
(&
NAME
, 0, (
TYPE
)); \

77 (
TYPE
) { \

78 .
sz
 = (
TYPE
), \

79 
__VA_ARGS__
 \

81 })

	)

	@build/usr/include/bpf/libbpf_legacy.h

10 #i‚de‡
__LIBBPF_LEGACY_BPF_H


11 
	#__LIBBPF_LEGACY_BPF_H


	)

13 
	~<löux/bpf.h
>

14 
	~<°dboﬁ.h
>

15 
	~<°ddef.h
>

16 
	~<°döt.h
>

17 
	~"libbpf_comm⁄.h
"

19 #ifde‡
__˝lu•lus


23 
	elibbpf_°ri˘_mode
 {

28 
LIBBPF_STRICT_ALL
 = 0xffffffff,

35 
LIBBPF_STRICT_NONE
 = 0x00,

41 
LIBBPF_STRICT_CLEAN_PTRS
 = 0x01,

47 
LIBBPF_STRICT_DIRECT_ERRS
 = 0x02,

62 
LIBBPF_STRICT_SEC_NAME
 = 0x04,

68 
LIBBPF_STRICT_NO_OBJECT_LIST
 = 0x08,

79 
LIBBPF_STRICT_AUTO_RLIMIT_MEMLOCK
 = 0x10,

84 
LIBBPF_STRICT_MAP_DEFINITIONS
 = 0x20,

86 
__LIBBPF_STRICT_LAST
,

89 
LIBBPF_API
 
libbpf_£t_°ri˘_mode
(
libbpf_°ri˘_mode
 
mode
);

91 
	#DECLARE_LIBBPF_OPTS
 
LIBBPF_OPTS


	)

99 
bpf_¥ogøm
;

100 
bpf_m≠
;

101 
btf
;

102 
btf_ext
;

104 
LIBBPF_API
 
bpf_¥og_ty≥
 
bpf_¥ogøm__gë_ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
);

105 
LIBBPF_API
 
bpf_©èch_ty≥
 
bpf_¥ogøm__gë_ex≥˘ed_©èch_ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
);

106 
LIBBPF_API
 c⁄° *
bpf_m≠__gë_pö_∑th
(c⁄° 
bpf_m≠
 *
m≠
);

107 
LIBBPF_API
 c⁄° *
btf__gë_øw_d©a
(c⁄° 
btf
 *btf, 
__u32
 *
size
);

108 
LIBBPF_API
 c⁄° *
btf_ext__gë_øw_d©a
(c⁄° 
btf_ext
 *btf_ext, 
__u32
 *
size
);

110 #ifde‡
__˝lu•lus


	@build/usr/include/bpf/libbpf_version.h

3 #i‚de‡
__LIBBPF_VERSION_H


4 
	#__LIBBPF_VERSION_H


	)

6 
	#LIBBPF_MAJOR_VERSION
 0

	)

7 
	#LIBBPF_MINOR_VERSION
 8

	)

	@build/usr/include/bpf/skel_internal.h

3 #i‚de‡
__SKEL_INTERNAL_H


4 
	#__SKEL_INTERNAL_H


	)

6 #ifde‡
__KERNEL__


7 
	~<löux/fdèbÀ.h
>

8 
	~<löux/mm.h
>

9 
	~<löux/mm™.h
>

10 
	~<löux/¶ab.h
>

11 
	~<löux/bpf.h
>

13 
	~<uni°d.h
>

14 
	~<sys/sysˇŒ.h
>

15 
	~<sys/mm™.h
>

16 
	~<°dlib.h
>

17 
	~"bpf.h
"

20 #i‚de‡
__NR_bpf


21 #i‡
deföed
(
__mùs__
Ë&& deföed(
_ABIO32
)

22 
	#__NR_bpf
 4355

	)

23 #ñi‡
deföed
(
__mùs__
Ë&& deföed(
_ABIN32
)

24 
	#__NR_bpf
 6319

	)

25 #ñi‡
deföed
(
__mùs__
Ë&& deföed(
_ABI64
)

26 
	#__NR_bpf
 5315

	)

37 
	sbpf_m≠_desc
 {

39 
	mm≠_fd
;

41 
__u32
 
	mmax_íåõs
;

42 
__Æig√d_u64
 
	möôül_vÆue
;

44 
	sbpf_¥og_desc
 {

45 
	m¥og_fd
;

49 
	mBPF_SKEL_KERNEL
 = (1ULL << 0),

52 
	sbpf_lﬂdî_˘x
 {

53 
__u32
 
	msz
;

54 
__u32
 
	mÊags
;

55 
__u32
 
	mlog_Àvñ
;

56 
__u32
 
	mlog_size
;

57 
__u64
 
	mlog_buf
;

60 
	sbpf_lﬂd_™d_run_›ts
 {

61 
bpf_lﬂdî_˘x
 *
	m˘x
;

62 c⁄° *
	md©a
;

63 c⁄° *
	mö¢s
;

64 
__u32
 
	md©a_sz
;

65 
__u32
 
	mö¢s_sz
;

66 c⁄° *
	mîr°r
;

69 
bpf_sys_bpf
(
__u32
 
cmd
, *
©å
, __u32 
©å_size
);

71 
ölöe
 
	$skñ_sys_bpf
(
bpf_cmd
 
cmd
, 
bpf_©å
 *
©å
,

72 
size
)

74 #ifde‡
__KERNEL__


75  
	`bpf_sys_bpf
(
cmd
, 
©å
, 
size
);

77  
	`sysˇŒ
(
__NR_bpf
, 
cmd
, 
©å
, 
size
);

79 
	}
}

81 #ifde‡
__KERNEL__


82 
ölöe
 
	$˛o£
(
fd
)

84  
	`˛o£_fd
(
fd
);

85 
	}
}

87 
ölöe
 *
	$skñ_Æloc
(
size_t
 
size
)

89 
bpf_lﬂdî_˘x
 *
˘x
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

91 i‡(!
˘x
)

92  
NULL
;

93 
˘x
->
Êags
 |
BPF_SKEL_KERNEL
;

94  
˘x
;

95 
	}
}

97 
ölöe
 
	$skñ_‰ì
(c⁄° *
p
)

99 
	`k‰ì
(
p
);

100 
	}
}

124 
ölöe
 
	$skñ_‰ì_m≠_d©a
(*
p
, 
__u64
 
addr
, 
size_t
 
sz
)

126 i‡(
addr
 != ~0ULL)

127 
	`kv‰ì
(
p
);

131 
	}
}

133 
ölöe
 *
	$skñ_¥ï_m≠_d©a
(c⁄° *
vÆ
, 
size_t
 
mm≠_sz
, size_à
vÆ_sz
)

135 *
addr
;

137 
addr
 = 
	`kvmÆloc
(
vÆ_sz
, 
GFP_KERNEL
);

138 i‡(!
addr
)

139  
NULL
;

140 
	`mem˝y
(
addr
, 
vÆ
, 
vÆ_sz
);

141  
addr
;

142 
	}
}

144 
ölöe
 *
	$skñ_föÆize_m≠_d©a
(
__u64
 *
öô_vÆ
, 
size_t
 
mm≠_sz
, 
Êags
, 
fd
)

146 
bpf_m≠
 *
m≠
;

147 *
addr
 = 
NULL
;

149 
	`kv‰ì
((*Ë(Ë*
öô_vÆ
);

150 *
öô_vÆ
 = ~0ULL;

155 
m≠
 = 
	`bpf_m≠_gë
(
fd
);

156 i‡(
	`IS_ERR
(
m≠
))

157  
NULL
;

158 i‡(
m≠
->
m≠_ty≥
 !
BPF_MAP_TYPE_ARRAY
)

159 
out
;

160 
addr
 = ((
bpf_¨øy
 *)
m≠
)->
vÆue
;

162 
out
:

163 
	`bpf_m≠_put
(
m≠
);

164  
addr
;

165 
	}
}

169 
ölöe
 *
	$skñ_Æloc
(
size_t
 
size
)

171  
	`ˇŒoc
(1, 
size
);

172 
	}
}

174 
ölöe
 
	$skñ_‰ì
(*
p
)

176 
	`‰ì
(
p
);

177 
	}
}

179 
ölöe
 
	$skñ_‰ì_m≠_d©a
(*
p
, 
__u64
 
addr
, 
size_t
 
sz
)

181 
	`munm≠
(
p
, 
sz
);

182 
	}
}

184 
ölöe
 *
	$skñ_¥ï_m≠_d©a
(c⁄° *
vÆ
, 
size_t
 
mm≠_sz
, size_à
vÆ_sz
)

186 *
addr
;

188 
addr
 = 
	`mm≠
(
NULL
, 
mm≠_sz
, 
PROT_READ
 | 
PROT_WRITE
,

189 
MAP_SHARED
 | 
MAP_ANONYMOUS
, -1, 0);

190 i‡(
addr
 == (*) -1)

191  
NULL
;

192 
	`mem˝y
(
addr
, 
vÆ
, 
vÆ_sz
);

193  
addr
;

194 
	}
}

196 
ölöe
 *
	$skñ_föÆize_m≠_d©a
(
__u64
 *
öô_vÆ
, 
size_t
 
mm≠_sz
, 
Êags
, 
fd
)

198 *
addr
;

200 
addr
 = 
	`mm≠
((*Ë(Ë*
öô_vÆ
, 
mm≠_sz
, 
Êags
, 
MAP_SHARED
 | 
MAP_FIXED
, 
fd
, 0);

201 i‡(
addr
 == (*) -1)

202  
NULL
;

203  
addr
;

204 
	}
}

207 
ölöe
 
	$skñ_˛o£nz
(
fd
)

209 i‡(
fd
 > 0)

210  
	`˛o£
(
fd
);

211  -
EINVAL
;

212 
	}
}

214 #i‚de‡
off£to„nd


215 
	#off£to„nd
(
TYPE
, 
MEMBER
) \

216 (
	`off£tof
(
TYPE
, 
MEMBER
Ë+ ((((TYPE *)0)->MEMBER)))

	)

219 
ölöe
 
	$skñ_m≠_¸óã
(
bpf_m≠_ty≥
 
m≠_ty≥
,

220 c⁄° *
m≠_«me
,

221 
__u32
 
key_size
,

222 
__u32
 
vÆue_size
,

223 
__u32
 
max_íåõs
)

225 c⁄° 
size_t
 
©å_sz
 = 
	`off£to„nd
(
bpf_©å
, 
m≠_exåa
);

226 
bpf_©å
 
©å
;

228 
	`mem£t
(&
©å
, 0, 
©å_sz
);

230 
©å
.
m≠_ty≥
 = map_type;

231 
	`°∫˝y
(
©å
.
m≠_«me
, map_name, (attr.map_name));

232 
©å
.
key_size
 = key_size;

233 
©å
.
vÆue_size
 = value_size;

234 
©å
.
max_íåõs
 = max_entries;

236  
	`skñ_sys_bpf
(
BPF_MAP_CREATE
, &
©å
, 
©å_sz
);

237 
	}
}

239 
ölöe
 
	$skñ_m≠_upd©e_ñem
(
fd
, c⁄° *
key
,

240 c⁄° *
vÆue
, 
__u64
 
Êags
)

242 c⁄° 
size_t
 
©å_sz
 = 
	`off£to„nd
(
bpf_©å
, 
Êags
);

243 
bpf_©å
 
©å
;

245 
	`mem£t
(&
©å
, 0, 
©å_sz
);

246 
©å
.
m≠_fd
 = 
fd
;

247 
©å
.
key
 = () key;

248 
©å
.
vÆue
 = () value;

249 
©å
.
Êags
 = flags;

251  
	`skñ_sys_bpf
(
BPF_MAP_UPDATE_ELEM
, &
©å
, 
©å_sz
);

252 
	}
}

254 
ölöe
 
	$skñ_øw_åa˚poöt_›í
(c⁄° *
«me
, 
¥og_fd
)

256 c⁄° 
size_t
 
©å_sz
 = 
	`off£to„nd
(
bpf_©å
, 
øw_åa˚poöt
.
¥og_fd
);

257 
bpf_©å
 
©å
;

259 
	`mem£t
(&
©å
, 0, 
©å_sz
);

260 
©å
.
øw_åa˚poöt
.
«me
 = ()Çame;

261 
©å
.
øw_åa˚poöt
.
¥og_fd
 =Örog_fd;

263  
	`skñ_sys_bpf
(
BPF_RAW_TRACEPOINT_OPEN
, &
©å
, 
©å_sz
);

264 
	}
}

266 
ölöe
 
	$skñ_lök_¸óã
(
¥og_fd
, 
èrgë_fd
,

267 
bpf_©èch_ty≥
 
©èch_ty≥
)

269 c⁄° 
size_t
 
©å_sz
 = 
	`off£to„nd
(
bpf_©å
, 
lök_¸óã
.
ôî_öfo_Àn
);

270 
bpf_©å
 
©å
;

272 
	`mem£t
(&
©å
, 0, 
©å_sz
);

273 
©å
.
lök_¸óã
.
¥og_fd
 =Örog_fd;

274 
©å
.
lök_¸óã
.
èrgë_fd
 =Åarget_fd;

275 
©å
.
lök_¸óã
.
©èch_ty≥
 =áttach_type;

277  
	`skñ_sys_bpf
(
BPF_LINK_CREATE
, &
©å
, 
©å_sz
);

278 
	}
}

280 #ifde‡
__KERNEL__


281 
	#£t_îr


	)

283 
	#£t_îr
 
îr
 = -
î∫o


	)

286 
ölöe
 
	$bpf_lﬂd_™d_run
(
bpf_lﬂd_™d_run_›ts
 *
›ts
)

288 
m≠_fd
 = -1, 
¥og_fd
 = -1, 
key
 = 0, 
îr
;

289 
bpf_©å
 
©å
;

291 
îr
 = 
m≠_fd
 = 
	`skñ_m≠_¸óã
(
BPF_MAP_TYPE_ARRAY
, "__lﬂdî.m≠", 4, 
›ts
->
d©a_sz
, 1);

292 i‡(
m≠_fd
 < 0) {

293 
›ts
->
îr°r
 = "failedÅo createÜoader map";

294 
£t_îr
;

295 
out
;

298 
îr
 = 
	`skñ_m≠_upd©e_ñem
(
m≠_fd
, &
key
, 
›ts
->
d©a
, 0);

299 i‡(
îr
 < 0) {

300 
›ts
->
îr°r
 = "failedÅo updateÜoader map";

301 
£t_îr
;

302 
out
;

305 
	`mem£t
(&
©å
, 0, (attr));

306 
©å
.
¥og_ty≥
 = 
BPF_PROG_TYPE_SYSCALL
;

307 
©å
.
ö¢s
 = (Ë
›ts
->insns;

308 
©å
.
ö¢_˙t
 = 
›ts
->
ö¢s_sz
 / (
bpf_ö¢
);

309 
©å
.
li˚n£
 = () "Dual BSD/GPL";

310 
	`mem˝y
(
©å
.
¥og_«me
, "__loader.prog", ("__loader.prog"));

311 
©å
.
fd_¨øy
 = (Ë&
m≠_fd
;

312 
©å
.
log_Àvñ
 = 
›ts
->
˘x
->log_level;

313 
©å
.
log_size
 = 
›ts
->
˘x
->log_size;

314 
©å
.
log_buf
 = 
›ts
->
˘x
->log_buf;

315 
©å
.
¥og_Êags
 = 
BPF_F_SLEEPABLE
;

316 
îr
 = 
¥og_fd
 = 
	`skñ_sys_bpf
(
BPF_PROG_LOAD
, &
©å
, (attr));

317 i‡(
¥og_fd
 < 0) {

318 
›ts
->
îr°r
 = "failedÅoÜoadÜoaderÖrog";

319 
£t_îr
;

320 
out
;

323 
	`mem£t
(&
©å
, 0, (attr));

324 
©å
.
ã°
.
¥og_fd
 =Örog_fd;

325 
©å
.
ã°
.
˘x_ö
 = (Ë
›ts
->
˘x
;

326 
©å
.
ã°
.
˘x_size_ö
 = 
›ts
->
˘x
->
sz
;

327 
îr
 = 
	`skñ_sys_bpf
(
BPF_PROG_RUN
, &
©å
, (attr));

328 i‡(
îr
 < 0 || ()
©å
.
ã°
.
ªtvÆ
 < 0) {

329 
›ts
->
îr°r
 = "failedÅoÉxecuteÜoaderÖrog";

330 i‡(
îr
 < 0) {

331 
£t_îr
;

333 
îr
 = ()
©å
.
ã°
.
ªtvÆ
;

334 #i‚de‡
__KERNEL__


335 
î∫o
 = -
îr
;

338 
out
;

340 
îr
 = 0;

341 
out
:

342 i‡(
m≠_fd
 >= 0)

343 
	`˛o£
(
m≠_fd
);

344 i‡(
¥og_fd
 >= 0)

345 
	`˛o£
(
¥og_fd
);

346  
îr
;

347 
	}
}

	@build/usr/include/bpf/usdt.bpf.h

3 #i‚de‡
__USDT_BPF_H__


4 
	#__USDT_BPF_H__


	)

6 
	~<löux/î∫o.h
>

7 
	~<bpf/bpf_hñ≥rs.h
>

8 
	~<bpf/bpf_åacög.h
>

9 
	~<bpf/bpf_c‹e_ªad.h
>

21 #i‚de‡
BPF_USDT_MAX_SPEC_CNT


22 
	#BPF_USDT_MAX_SPEC_CNT
 256

	)

30 #i‚de‡
BPF_USDT_MAX_IP_CNT


31 
	#BPF_USDT_MAX_IP_CNT
 (4 * 
BPF_USDT_MAX_SPEC_CNT
)

	)

37 #i‚de‡
BPF_USDT_HAS_BPF_COOKIE


38 
	#BPF_USDT_HAS_BPF_COOKIE
 \

39 
	`bpf_c‹e_íum_vÆue_exi°s
(
bpf_func_id___usdt
, 
BPF_FUNC_gë_©èch_cookõ___usdt
)

	)

42 
	e__bpf_usdt_¨g_ty≥
 {

43 
	mBPF_USDT_ARG_CONST
,

44 
	mBPF_USDT_ARG_REG
,

45 
	mBPF_USDT_ARG_REG_DEREF
,

48 
	s__bpf_usdt_¨g_•ec
 {

50 
__u64
 
	mvÆ_off
;

52 
__bpf_usdt_¨g_ty≥
 
	m¨g_ty≥
;

54 
	mªg_off
;

56 
boﬁ
 
	m¨g_sig√d
;

61 
	m¨g_bôshi·
;

65 
	#BPF_USDT_MAX_ARG_CNT
 12

	)

66 
	s__bpf_usdt_•ec
 {

67 
__bpf_usdt_¨g_•ec
 
	m¨gs
[
BPF_USDT_MAX_ARG_CNT
];

68 
__u64
 
	musdt_cookõ
;

69 
	m¨g_˙t
;

73 
__uöt
(
ty≥
, 
BPF_MAP_TYPE_ARRAY
);

74 
__uöt
(
max_íåõs
, 
BPF_USDT_MAX_SPEC_CNT
);

75 
__ty≥
(
key
, );

76 
__ty≥
(
vÆue
, 
__bpf_usdt_•ec
);

77 } 
__bpf_usdt_•ecs
 
SEC
(".m≠s"Ë
	g__wók
;

80 
__uöt
(
ty≥
, 
BPF_MAP_TYPE_HASH
);

81 
__uöt
(
max_íåõs
, 
BPF_USDT_MAX_IP_CNT
);

82 
__ty≥
(
key
, );

83 
__ty≥
(
vÆue
, 
__u32
);

84 } 
__bpf_usdt_ù_to_•ec_id
 
SEC
(".m≠s"Ë
	g__wók
;

87 
	ebpf_func_id___usdt
 {

88 
	mBPF_FUNC_gë_©èch_cookõ___usdt
 = 0xBAD,

91 
__Æways_ölöe


92 
	$__bpf_usdt_•ec_id
(
±_ªgs
 *
˘x
)

94 i‡(!
BPF_USDT_HAS_BPF_COOKIE
) {

95 
ù
 = 
	`PT_REGS_IP
(
˘x
);

96 *
•ec_id_±r
;

98 
•ec_id_±r
 = 
	`bpf_m≠_lookup_ñem
(&
__bpf_usdt_ù_to_•ec_id
, &
ù
);

99  
•ec_id_±r
 ? *•ec_id_±∏: -
ESRCH
;

102  
	`bpf_gë_©èch_cookõ
(
˘x
);

103 
	}
}

106 
__wók
 
__hiddí


107 
	$bpf_usdt_¨g_˙t
(
±_ªgs
 *
˘x
)

109 
__bpf_usdt_•ec
 *
•ec
;

110 
•ec_id
;

112 
•ec_id
 = 
	`__bpf_usdt_•ec_id
(
˘x
);

113 i‡(
•ec_id
 < 0)

114  -
ESRCH
;

116 
•ec
 = 
	`bpf_m≠_lookup_ñem
(&
__bpf_usdt_•ecs
, &
•ec_id
);

117 i‡(!
•ec
)

118  -
ESRCH
;

120  
•ec
->
¨g_˙t
;

121 
	}
}

127 
__wók
 
__hiddí


128 
	$bpf_usdt_¨g
(
±_ªgs
 *
˘x
, 
__u64
 
¨g_num
, *
ªs
)

130 
__bpf_usdt_•ec
 *
•ec
;

131 
__bpf_usdt_¨g_•ec
 *
¨g_•ec
;

132 
vÆ
;

133 
îr
, 
•ec_id
;

135 *
ªs
 = 0;

137 
•ec_id
 = 
	`__bpf_usdt_•ec_id
(
˘x
);

138 i‡(
•ec_id
 < 0)

139  -
ESRCH
;

141 
•ec
 = 
	`bpf_m≠_lookup_ñem
(&
__bpf_usdt_•ecs
, &
•ec_id
);

142 i‡(!
•ec
)

143  -
ESRCH
;

145 i‡(
¨g_num
 >
BPF_USDT_MAX_ARG_CNT
 ||árg_num >
•ec
->
¨g_˙t
)

146  -
ENOENT
;

148 
¨g_•ec
 = &
•ec
->
¨gs
[
¨g_num
];

149 
¨g_•ec
->
¨g_ty≥
) {

150 
BPF_USDT_ARG_CONST
:

154 
vÆ
 = 
¨g_•ec
->
vÆ_off
;

156 
BPF_USDT_ARG_REG
:

162 
îr
 = 
	`bpf_¥obe_ªad_kî√l
(&
vÆ
, (vÆ), (*)
˘x
 + 
¨g_•ec
->
ªg_off
);

163 i‡(
îr
)

164  
îr
;

166 
BPF_USDT_ARG_REG_DEREF
:

174 
îr
 = 
	`bpf_¥obe_ªad_kî√l
(&
vÆ
, (vÆ), (*)
˘x
 + 
¨g_•ec
->
ªg_off
);

175 i‡(
îr
)

176  
îr
;

177 
îr
 = 
	`bpf_¥obe_ªad_u£r
(&
vÆ
, (vÆ), (*)vÆ + 
¨g_•ec
->
vÆ_off
);

178 i‡(
îr
)

179  
îr
;

180 #i‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


181 
vÆ
 >>
¨g_•ec
->
¨g_bôshi·
;

185  -
EINVAL
;

192 
vÆ
 <<
¨g_•ec
->
¨g_bôshi·
;

193 i‡(
¨g_•ec
->
¨g_sig√d
)

194 
vÆ
 = (()vÆË>> 
¨g_•ec
->
¨g_bôshi·
;

196 
vÆ
 = vÆ >> 
¨g_•ec
->
¨g_bôshi·
;

197 *
ªs
 = 
vÆ
;

199 
	}
}

207 
__wók
 
__hiddí


208 
	$bpf_usdt_cookõ
(
±_ªgs
 *
˘x
)

210 
__bpf_usdt_•ec
 *
•ec
;

211 
•ec_id
;

213 
•ec_id
 = 
	`__bpf_usdt_•ec_id
(
˘x
);

214 i‡(
•ec_id
 < 0)

217 
•ec
 = 
	`bpf_m≠_lookup_ñem
(&
__bpf_usdt_•ecs
, &
•ec_id
);

218 i‡(!
•ec
)

221  
•ec
->
usdt_cookõ
;

222 
	}
}

225 
	#___bpf_usdt_¨gs0
(Ë
˘x


	)

226 
	#___bpf_usdt_¨gs1
(
x
Ë
	`___bpf_usdt_¨gs0
(), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 0, &_x); (*)_x; })

	)

227 
	#___bpf_usdt_¨gs2
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs1
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 1, &_x); (*)_x; })

	)

228 
	#___bpf_usdt_¨gs3
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs2
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 2, &_x); (*)_x; })

	)

229 
	#___bpf_usdt_¨gs4
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs3
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 3, &_x); (*)_x; })

	)

230 
	#___bpf_usdt_¨gs5
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs4
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 4, &_x); (*)_x; })

	)

231 
	#___bpf_usdt_¨gs6
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs5
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 5, &_x); (*)_x; })

	)

232 
	#___bpf_usdt_¨gs7
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs6
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 6, &_x); (*)_x; })

	)

233 
	#___bpf_usdt_¨gs8
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs7
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 7, &_x); (*)_x; })

	)

234 
	#___bpf_usdt_¨gs9
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs8
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 8, &_x); (*)_x; })

	)

235 
	#___bpf_usdt_¨gs10
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs9
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 9, &_x); (*)_x; })

	)

236 
	#___bpf_usdt_¨gs11
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs10
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 10, &_x); (*)_x; })

	)

237 
	#___bpf_usdt_¨gs12
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs11
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 11, &_x); (*)_x; })

	)

238 
	#___bpf_usdt_¨gs
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_usdt_¨gs
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

245 
	#BPF_USDT
(
«me
, 
¨gs
...) \

246 
	`«me
(
±_ªgs
 *
˘x
); \

247 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

248 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
); \

249 
	`ty≥of
(
	`«me
(0)Ë«me(
±_ªgs
 *
˘x
) \

251 
	`_Pøgma
("GCC diagnosticÖush") \

252 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

253  
____
##
	`«me
(
	`___bpf_usdt_¨gs
(
¨gs
)); \

254 
	`_Pøgma
("GCC diagnosticÖop") \

256 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

257 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
)

	)

	@build/usr/include/bpf/xsk.h

12 #i‚de‡
__LIBBPF_XSK_H


13 
	#__LIBBPF_XSK_H


	)

15 
	~<°dio.h
>

16 
	~<°döt.h
>

17 
	~<°dboﬁ.h
>

18 
	~<löux/if_xdp.h
>

20 
	~"libbpf.h
"

22 #ifde‡
__˝lu•lus


39 
	#__XSK_READ_ONCE
(
x
Ë(*(vﬁ©ûê
	`ty≥of
(xË*)&x)

	)

40 
	#__XSK_WRITE_ONCE
(
x
, 
v
Ë(*(vﬁ©ûê
	`ty≥of
(xË*)&xË(v)

	)

42 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

43 
	#libbpf_smp_°‹e_ªÀa£
(
p
, 
v
) \

45 
asm
 volatile("" : : : "memory"); \

46 
	`__XSK_WRITE_ONCE
(*
p
, 
v
); \

47 } 0)

	)

48 
	#libbpf_smp_lﬂd_acquúe
(
p
) \

50 
	`ty≥of
(*
p
Ë
___p1
 = 
	`__XSK_READ_ONCE
(*p); \

51 
asm
 volatile("" : : : "memory"); \

52 
___p1
; \

53 })

	)

54 #ñi‡
deföed
(
__Ørch64__
)

55 
	#libbpf_smp_°‹e_ªÀa£
(
p
, 
v
) \

56 
asm
 vﬁ©ûê("°Ã %w1, %0" : "=Q" (*
p
Ë: "r" (
v
Ë: "mem‹y")

	)

57 
	#libbpf_smp_lﬂd_acquúe
(
p
) \

59 
	`ty≥of
(*
p
Ë
___p1
; \

60 
asm
 volatile ("ldar %w0, %1" \

61 : "Ù" (
___p1
Ë: "Q" (*
p
) : "memory"); \

62 
___p1
; \

63 })

	)

64 #ñi‡
deföed
(
__riscv
)

65 
	#libbpf_smp_°‹e_ªÀa£
(
p
, 
v
) \

67 
asm
 volatile ("fenceÑw,w" : : : "memory"); \

68 
	`__XSK_WRITE_ONCE
(*
p
, 
v
); \

69 } 0)

	)

70 
	#libbpf_smp_lﬂd_acquúe
(
p
) \

72 
	`ty≥of
(*
p
Ë
___p1
 = 
	`__XSK_READ_ONCE
(*p); \

73 
asm
 volatile ("fenceÑ,rw" : : : "memory"); \

74 
___p1
; \

75 })

	)

78 #i‚de‡
libbpf_smp_°‹e_ªÀa£


79 
	#libbpf_smp_°‹e_ªÀa£
(
p
, 
v
) \

81 
	`__sync_synchr⁄ize
(); \

82 
	`__XSK_WRITE_ONCE
(*
p
, 
v
); \

83 } 0)

	)

86 #i‚de‡
libbpf_smp_lﬂd_acquúe


87 
	#libbpf_smp_lﬂd_acquúe
(
p
) \

89 
	`ty≥of
(*
p
Ë
___p1
 = 
	`__XSK_READ_ONCE
(*p); \

90 
	`__sync_synchr⁄ize
(); \

91 
___p1
; \

92 })

	)

98 
	#DEFINE_XSK_RING
(
«me
) \

99 
	s«me
 { \

100 
__u32
 
ˇched_¥od
; \

101 
__u32
 
ˇched_c⁄s
; \

102 
__u32
 
mask
; \

103 
__u32
 
size
; \

104 
__u32
 *
¥odu˚r
; \

105 
__u32
 *
c⁄sumî
; \

106 *
rög
; \

107 
__u32
 *
Êags
; \

108 }

	)

110 
DEFINE_XSK_RING
(
xsk_rög_¥od
);

111 
DEFINE_XSK_RING
(
xsk_rög_c⁄s
);

117 
xsk_umem
;

118 
xsk_sockë
;

120 
ölöe
 
__u64
 *
xsk_rög_¥od__fûl_addr
(
xsk_rög_¥od
 *
fûl
,

121 
__u32
 
idx
)

123 
__u64
 *
addrs
 = (__u64 *)
fûl
->
rög
;

125  &
addrs
[
idx
 & 
fûl
->
mask
];

128 
ölöe
 c⁄° 
__u64
 *

129 
xsk_rög_c⁄s__comp_addr
(c⁄° 
xsk_rög_c⁄s
 *
comp
, 
__u32
 
idx
)

131 c⁄° 
__u64
 *
addrs
 = (c⁄° __u64 *)
comp
->
rög
;

133  &
addrs
[
idx
 & 
comp
->
mask
];

136 
ölöe
 
xdp_desc
 *
xsk_rög_¥od__tx_desc
(
xsk_rög_¥od
 *
tx
,

137 
__u32
 
idx
)

139 
xdp_desc
 *
descs
 = (xdp_des¯*)
tx
->
rög
;

141  &
descs
[
idx
 & 
tx
->
mask
];

144 
ölöe
 c⁄° 
xdp_desc
 *

145 
xsk_rög_c⁄s__rx_desc
(c⁄° 
xsk_rög_c⁄s
 *
rx
, 
__u32
 
idx
)

147 c⁄° 
xdp_desc
 *
descs
 = (c⁄° xdp_des¯*)
rx
->
rög
;

149  &
descs
[
idx
 & 
rx
->
mask
];

152 
ölöe
 
xsk_rög_¥od__√eds_wakeup
(c⁄° 
xsk_rög_¥od
 *
r
)

154  *
r
->
Êags
 & 
XDP_RING_NEED_WAKEUP
;

157 
ölöe
 
__u32
 
xsk_¥od_nb_‰ì
(
xsk_rög_¥od
 *
r
, __u32 
nb
)

159 
__u32
 
‰ì_íåõs
 = 
r
->
ˇched_c⁄s
 -Ñ->
ˇched_¥od
;

161 i‡(
‰ì_íåõs
 >
nb
)

162  
‰ì_íåõs
;

171 
r
->
ˇched_c⁄s
 = 
libbpf_smp_lﬂd_acquúe
‘->
c⁄sumî
);

172 
r
->
ˇched_c⁄s
 +r->
size
;

174  
r
->
ˇched_c⁄s
 -Ñ->
ˇched_¥od
;

177 
ölöe
 
__u32
 
xsk_c⁄s_nb_avaû
(
xsk_rög_c⁄s
 *
r
, __u32 
nb
)

179 
__u32
 
íåõs
 = 
r
->
ˇched_¥od
 -Ñ->
ˇched_c⁄s
;

181 i‡(
íåõs
 == 0) {

182 
r
->
ˇched_¥od
 = 
libbpf_smp_lﬂd_acquúe
‘->
¥odu˚r
);

183 
íåõs
 = 
r
->
ˇched_¥od
 -Ñ->
ˇched_c⁄s
;

186  (
íåõs
 > 
nb
) ?Çb :Éntries;

189 
ölöe
 
__u32
 
xsk_rög_¥od__ª£rve
(
xsk_rög_¥od
 *
¥od
, __u32 
nb
, __u32 *
idx
)

191 i‡(
xsk_¥od_nb_‰ì
(
¥od
, 
nb
) <Çb)

194 *
idx
 = 
¥od
->
ˇched_¥od
;

195 
¥od
->
ˇched_¥od
 +
nb
;

197  
nb
;

200 
ölöe
 
xsk_rög_¥od__submô
(
xsk_rög_¥od
 *
¥od
, 
__u32
 
nb
)

205 
libbpf_smp_°‹e_ªÀa£
(
¥od
->
¥odu˚r
, *¥od->¥odu˚∏+ 
nb
);

208 
ölöe
 
__u32
 
xsk_rög_c⁄s__≥ek
(
xsk_rög_c⁄s
 *
c⁄s
, __u32 
nb
, __u32 *
idx
)

210 
__u32
 
íåõs
 = 
xsk_c⁄s_nb_avaû
(
c⁄s
, 
nb
);

212 i‡(
íåõs
 > 0) {

213 *
idx
 = 
c⁄s
->
ˇched_c⁄s
;

214 
c⁄s
->
ˇched_c⁄s
 +
íåõs
;

217  
íåõs
;

220 
ölöe
 
xsk_rög_c⁄s__ˇn˚l
(
xsk_rög_c⁄s
 *
c⁄s
, 
__u32
 
nb
)

222 
c⁄s
->
ˇched_c⁄s
 -
nb
;

225 
ölöe
 
xsk_rög_c⁄s__ªÀa£
(
xsk_rög_c⁄s
 *
c⁄s
, 
__u32
 
nb
)

230 
libbpf_smp_°‹e_ªÀa£
(
c⁄s
->
c⁄sumî
, *c⁄s->c⁄sumî + 
nb
);

234 
ölöe
 *
xsk_umem__gë_d©a
(*
umem_¨ó
, 
__u64
 
addr
)

236  &((*)
umem_¨ó
)[
addr
];

239 
ölöe
 
__u64
 
xsk_umem__exåa˘_addr
(__u64 
addr
)

241  
addr
 & 
XSK_UNALIGNED_BUF_ADDR_MASK
;

244 
ölöe
 
__u64
 
xsk_umem__exåa˘_off£t
(__u64 
addr
)

246  
addr
 >> 
XSK_UNALIGNED_BUF_OFFSET_SHIFT
;

249 
ölöe
 
__u64
 
xsk_umem__add_off£t_to_addr
(__u64 
addr
)

251  
xsk_umem__exåa˘_addr
(
addr
Ë+ 
xsk_umem__exåa˘_off£t
(addr);

254 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

255 
xsk_umem__fd
(c⁄° 
xsk_umem
 *
umem
);

256 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

257 
xsk_sockë__fd
(c⁄° 
xsk_sockë
 *
xsk
);

259 
	#XSK_RING_CONS__DEFAULT_NUM_DESCS
 2048

	)

260 
	#XSK_RING_PROD__DEFAULT_NUM_DESCS
 2048

	)

261 
	#XSK_UMEM__DEFAULT_FRAME_SHIFT
 12

	)

262 
	#XSK_UMEM__DEFAULT_FRAME_SIZE
 (1 << 
XSK_UMEM__DEFAULT_FRAME_SHIFT
)

	)

263 
	#XSK_UMEM__DEFAULT_FRAME_HEADROOM
 0

	)

264 
	#XSK_UMEM__DEFAULT_FLAGS
 0

	)

266 
	sxsk_umem_c⁄fig
 {

267 
__u32
 
fûl_size
;

268 
__u32
 
comp_size
;

269 
__u32
 
‰ame_size
;

270 
__u32
 
‰ame_hódroom
;

271 
__u32
 
Êags
;

274 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

275 
xsk_£tup_xdp_¥og
(
ifödex
, *
xsks_m≠_fd
);

276 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

277 
xsk_sockë__upd©e_xskm≠
(
xsk_sockë
 *
xsk
, 
xsks_m≠_fd
);

280 
	#XSK_LIBBPF_FLAGS__INHIBIT_PROG_LOAD
 (1 << 0)

	)

282 
	sxsk_sockë_c⁄fig
 {

283 
__u32
 
rx_size
;

284 
__u32
 
tx_size
;

285 
__u32
 
libbpf_Êags
;

286 
__u32
 
xdp_Êags
;

287 
__u16
 
böd_Êags
;

291 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

292 
xsk_umem__¸óã
(
xsk_umem
 **
umem
,

293 *
umem_¨ó
, 
__u64
 
size
,

294 
xsk_rög_¥od
 *
fûl
,

295 
xsk_rög_c⁄s
 *
comp
,

296 c⁄° 
xsk_umem_c⁄fig
 *
c⁄fig
);

297 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

298 
xsk_umem__¸óã_v0_0_2
(
xsk_umem
 **
umem
,

299 *
umem_¨ó
, 
__u64
 
size
,

300 
xsk_rög_¥od
 *
fûl
,

301 
xsk_rög_c⁄s
 *
comp
,

302 c⁄° 
xsk_umem_c⁄fig
 *
c⁄fig
);

303 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

304 
xsk_umem__¸óã_v0_0_4
(
xsk_umem
 **
umem
,

305 *
umem_¨ó
, 
__u64
 
size
,

306 
xsk_rög_¥od
 *
fûl
,

307 
xsk_rög_c⁄s
 *
comp
,

308 c⁄° 
xsk_umem_c⁄fig
 *
c⁄fig
);

309 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

310 
xsk_sockë__¸óã
(
xsk_sockë
 **
xsk
,

311 c⁄° *
i‚ame
, 
__u32
 
queue_id
,

312 
xsk_umem
 *
umem
,

313 
xsk_rög_c⁄s
 *
rx
,

314 
xsk_rög_¥od
 *
tx
,

315 c⁄° 
xsk_sockë_c⁄fig
 *
c⁄fig
);

316 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

317 
xsk_sockë__¸óã_sh¨ed
(
xsk_sockë
 **
xsk_±r
,

318 c⁄° *
i‚ame
,

319 
__u32
 
queue_id
, 
xsk_umem
 *
umem
,

320 
xsk_rög_c⁄s
 *
rx
,

321 
xsk_rög_¥od
 *
tx
,

322 
xsk_rög_¥od
 *
fûl
,

323 
xsk_rög_c⁄s
 *
comp
,

324 c⁄° 
xsk_sockë_c⁄fig
 *
c⁄fig
);

327 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

328 
xsk_umem__dñëe
(
xsk_umem
 *
umem
);

329 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

330 
xsk_sockë__dñëe
(
xsk_sockë
 *
xsk
);

332 #ifde‡
__˝lu•lus


	@gen_loader.c

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<î∫o.h
>

7 
	~<löux/fûãr.h
>

8 
	~<sys/∑øm.h
>

9 
	~"btf.h
"

10 
	~"bpf.h
"

11 
	~"libbpf.h
"

12 
	~"libbpf_öã∫Æ.h
"

13 
	~"hashm≠.h
"

14 
	~"bpf_gí_öã∫Æ.h
"

15 
	~"skñ_öã∫Æ.h
"

16 
	~<asm/byã‹dî.h
>

18 
	#MAX_USED_MAPS
 64

	)

19 
	#MAX_USED_PROGS
 32

	)

20 
	#MAX_KFUNC_DESCS
 256

	)

21 
	#MAX_FD_ARRAY_SZ
 (
MAX_USED_MAPS
 + 
MAX_KFUNC_DESCS
)

	)

34 
	slﬂdî_°ack
 {

35 
__u32
 
	mbtf_fd
;

36 
__u32
 
	mö√r_m≠_fd
;

37 
__u32
 
	m¥og_fd
[
MAX_USED_PROGS
];

40 
	#°ack_off
(
fõld
) \

41 (
__s16
)(-(
lﬂdî_°ack
Ë+ 
	`off£tof
(lﬂdî_°ack, 
fõld
))

	)

43 
	#©å_fõld
(
©å
, 
fõld
Ë◊â∏+ 
	`off£tof
(
bpf_©å
, fõld))

	)

45 
	$blob_fd_¨øy_off
(
bpf_gí
 *
gí
, 
ödex
)

47  
gí
->
fd_¨øy
 + 
ödex
 * ();

48 
	}
}

50 
	$ªÆloc_ö¢_buf
(
bpf_gí
 *
gí
, 
__u32
 
size
)

52 
size_t
 
off
 = 
gí
->
ö¢_cur
 - gí->
ö¢_°¨t
;

53 *
ö¢_°¨t
;

55 i‡(
gí
->
îr‹
)

56  
gí
->
îr‹
;

57 i‡(
size
 > 
INT32_MAX
 || 
off
 + size > INT32_MAX) {

58 
gí
->
îr‹
 = -
ERANGE
;

59  -
ERANGE
;

61 
ö¢_°¨t
 = 
	`ªÆloc
(
gí
->ö¢_°¨t, 
off
 + 
size
);

62 i‡(!
ö¢_°¨t
) {

63 
gí
->
îr‹
 = -
ENOMEM
;

64 
	`‰ì
(
gí
->
ö¢_°¨t
);

65 
gí
->
ö¢_°¨t
 = 
NULL
;

66  -
ENOMEM
;

68 
gí
->
ö¢_°¨t
 = insn_start;

69 
gí
->
ö¢_cur
 = 
ö¢_°¨t
 + 
off
;

71 
	}
}

73 
	$ªÆloc_d©a_buf
(
bpf_gí
 *
gí
, 
__u32
 
size
)

75 
size_t
 
off
 = 
gí
->
d©a_cur
 - gí->
d©a_°¨t
;

76 *
d©a_°¨t
;

78 i‡(
gí
->
îr‹
)

79  
gí
->
îr‹
;

80 i‡(
size
 > 
INT32_MAX
 || 
off
 + size > INT32_MAX) {

81 
gí
->
îr‹
 = -
ERANGE
;

82  -
ERANGE
;

84 
d©a_°¨t
 = 
	`ªÆloc
(
gí
->d©a_°¨t, 
off
 + 
size
);

85 i‡(!
d©a_°¨t
) {

86 
gí
->
îr‹
 = -
ENOMEM
;

87 
	`‰ì
(
gí
->
d©a_°¨t
);

88 
gí
->
d©a_°¨t
 = 
NULL
;

89  -
ENOMEM
;

91 
gí
->
d©a_°¨t
 = data_start;

92 
gí
->
d©a_cur
 = 
d©a_°¨t
 + 
off
;

94 
	}
}

96 
	$emô
(
bpf_gí
 *
gí
, 
bpf_ö¢
 
ö¢
)

98 i‡(
	`ªÆloc_ö¢_buf
(
gí
, (
ö¢
)))

100 
	`mem˝y
(
gí
->
ö¢_cur
, &
ö¢
, (insn));

101 
gí
->
ö¢_cur
 +(
ö¢
);

102 
	}
}

104 
	$emô2
(
bpf_gí
 *
gí
, 
bpf_ö¢
 
ö¢1
, bpf_ö¢ 
ö¢2
)

106 
	`emô
(
gí
, 
ö¢1
);

107 
	`emô
(
gí
, 
ö¢2
);

108 
	}
}

110 
add_d©a
(
bpf_gí
 *
gí
, c⁄° *
d©a
, 
__u32
 
size
);

111 
emô_sys_˛o£_blob
(
bpf_gí
 *
gí
, 
blob_off
);

113 
	$bpf_gí__öô
(
bpf_gí
 *
gí
, 
log_Àvñ
, 
ƒ_¥ogs
, 
ƒ_m≠s
)

115 
size_t
 
°ack_sz
 = (
lﬂdî_°ack
), 
ƒ_¥ogs_sz
;

116 
i
;

118 
gí
->
fd_¨øy
 = 
	`add_d©a
(gí, 
NULL
, 
MAX_FD_ARRAY_SZ
 * ());

119 
gí
->
log_Àvñ
 =Üog_level;

121 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_6
, 
BPF_REG_1
));

124 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_1
, 
BPF_REG_10
));

125 
	`emô
(
gí
, 
	`BPF_ALU64_IMM
(
BPF_ADD
, 
BPF_REG_1
, -
°ack_sz
));

126 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_2
, 
°ack_sz
));

127 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_3
, 0));

128 
	`emô
(
gí
, 
	`BPF_EMIT_CALL
(
BPF_FUNC_¥obe_ªad_kî√l
));

131 
ƒ_¥ogs_sz
 = 
	`off£tof
(
lﬂdî_°ack
, 
¥og_fd
[
ƒ_¥ogs
]);

133 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JA
, 0, 0,

135 (
ƒ_¥ogs_sz
 / 4) * 3 + 2 +

139 
ƒ_m≠s
 * (6 + (
gí
->
log_Àvñ
 ? 6 : 0))));

142 
gí
->
˛ónup_œbñ
 = gí->
ö¢_cur
 - gí->
ö¢_°¨t
;

144 
i
 = 0; i < 
ƒ_¥ogs_sz
; i += 4) {

145 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_W
, 
BPF_REG_1
, 
BPF_REG_10
, -
°ack_sz
 + 
i
));

146 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JSLE
, 
BPF_REG_1
, 0, 1));

147 
	`emô
(
gí
, 
	`BPF_EMIT_CALL
(
BPF_FUNC_sys_˛o£
));

149 
i
 = 0; i < 
ƒ_m≠s
; i++)

150 
	`emô_sys_˛o£_blob
(
gí
, 
	`blob_fd_¨øy_off
(gí, 
i
));

152 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_0
, 
BPF_REG_7
));

153 
	`emô
(
gí
, 
	`BPF_EXIT_INSN
());

154 
	}
}

156 
	$add_d©a
(
bpf_gí
 *
gí
, c⁄° *
d©a
, 
__u32
 
size
)

158 
__u32
 
size8
 = 
	`roundup
(
size
, 8);

159 
__u64
 
zîo
 = 0;

160 *
¥ev
;

162 i‡(
	`ªÆloc_d©a_buf
(
gí
, 
size8
))

164 
¥ev
 = 
gí
->
d©a_cur
;

165 i‡(
d©a
) {

166 
	`mem˝y
(
gí
->
d©a_cur
, 
d©a
, 
size
);

167 
	`mem˝y
(
gí
->
d©a_cur
 + 
size
, &
zîo
, 
size8
 - size);

169 
	`mem£t
(
gí
->
d©a_cur
, 0, 
size8
);

171 
gí
->
d©a_cur
 +
size8
;

172  
¥ev
 - 
gí
->
d©a_°¨t
;

173 
	}
}

178 
	$add_m≠_fd
(
bpf_gí
 *
gí
)

180 i‡(
gí
->
ƒ_m≠s
 =
MAX_USED_MAPS
) {

181 
	`¥_w¨n
("TŸÆ m≠†ex˚ed†%d\n", 
MAX_USED_MAPS
);

182 
gí
->
îr‹
 = -
E2BIG
;

185  
gí
->
ƒ_m≠s
++;

186 
	}
}

188 
	$add_kfunc_btf_fd
(
bpf_gí
 *
gí
)

190 
cur
;

192 i‡(
gí
->
ƒ_fd_¨øy
 =
MAX_KFUNC_DESCS
) {

193 
cur
 = 
	`add_d©a
(
gí
, 
NULL
, ());

194  (
cur
 - 
gí
->
fd_¨øy
) / ();

196  
MAX_USED_MAPS
 + 
gí
->
ƒ_fd_¨øy
++;

197 
	}
}

199 
	$ö¢_byãs_to_bpf_size
(
__u32
 
sz
)

201 
sz
) {

202 8:  
BPF_DW
;

203 4:  
BPF_W
;

204 2:  
BPF_H
;

205 1:  
BPF_B
;

208 
	}
}

211 
	$emô_ªl_°‹e
(
bpf_gí
 *
gí
, 
off
, 
d©a
)

213 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_0
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

214 0, 0, 0, 
d©a
));

215 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_1
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

216 0, 0, 0, 
off
));

217 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_DW
, 
BPF_REG_1
, 
BPF_REG_0
, 0));

218 
	}
}

220 
	$move_blob2blob
(
bpf_gí
 *
gí
, 
off
, 
size
, 
blob_off
)

222 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_2
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

223 0, 0, 0, 
blob_off
));

224 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
	`ö¢_byãs_to_bpf_size
(
size
), 
BPF_REG_0
, 
BPF_REG_2
, 0));

225 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_1
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

226 0, 0, 0, 
off
));

227 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
	`ö¢_byãs_to_bpf_size
(
size
), 
BPF_REG_1
, 
BPF_REG_0
, 0));

228 
	}
}

230 
	$move_blob2˘x
(
bpf_gí
 *
gí
, 
˘x_off
, 
size
, 
blob_off
)

232 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_1
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

233 0, 0, 0, 
blob_off
));

234 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
	`ö¢_byãs_to_bpf_size
(
size
), 
BPF_REG_0
, 
BPF_REG_1
, 0));

235 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
	`ö¢_byãs_to_bpf_size
(
size
), 
BPF_REG_6
, 
BPF_REG_0
, 
˘x_off
));

236 
	}
}

238 
	$move_˘x2blob
(
bpf_gí
 *
gí
, 
off
, 
size
, 
˘x_off
,

239 
boﬁ
 
check_n⁄_zîo
)

241 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
	`ö¢_byãs_to_bpf_size
(
size
), 
BPF_REG_0
, 
BPF_REG_6
, 
˘x_off
));

242 i‡(
check_n⁄_zîo
)

246 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JEQ
, 
BPF_REG_0
, 0, 3));

247 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_1
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

248 0, 0, 0, 
off
));

249 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
	`ö¢_byãs_to_bpf_size
(
size
), 
BPF_REG_1
, 
BPF_REG_0
, 0));

250 
	}
}

252 
	$move_°ack2blob
(
bpf_gí
 *
gí
, 
off
, 
size
, 
°ack_off
)

254 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
	`ö¢_byãs_to_bpf_size
(
size
), 
BPF_REG_0
, 
BPF_REG_10
, 
°ack_off
));

255 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_1
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

256 0, 0, 0, 
off
));

257 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
	`ö¢_byãs_to_bpf_size
(
size
), 
BPF_REG_1
, 
BPF_REG_0
, 0));

258 
	}
}

260 
	$move_°ack2˘x
(
bpf_gí
 *
gí
, 
˘x_off
, 
size
, 
°ack_off
)

262 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
	`ö¢_byãs_to_bpf_size
(
size
), 
BPF_REG_0
, 
BPF_REG_10
, 
°ack_off
));

263 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
	`ö¢_byãs_to_bpf_size
(
size
), 
BPF_REG_6
, 
BPF_REG_0
, 
˘x_off
));

264 
	}
}

266 
	$emô_sys_bpf
(
bpf_gí
 *
gí
, 
cmd
, 
©å
, 
©å_size
)

268 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_1
, 
cmd
));

269 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_2
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

270 0, 0, 0, 
©å
));

271 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_3
, 
©å_size
));

272 
	`emô
(
gí
, 
	`BPF_EMIT_CALL
(
BPF_FUNC_sys_bpf
));

274 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_7
, 
BPF_REG_0
));

275 
	}
}

277 
boﬁ
 
	$is_simm16
(
__s64
 
vÆue
)

279  
vÆue
 =(
__s64
)(
__s16
)value;

280 
	}
}

282 
	$emô_check_îr
(
bpf_gí
 *
gí
)

284 
__s64
 
off
 = -(
gí
->
ö¢_cur
 - gí->
ö¢_°¨t
 - gí->
˛ónup_œbñ
) / 8 - 1;

289 i‡(
	`is_simm16
(
off
)) {

290 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JSLT
, 
BPF_REG_7
, 0, 
off
));

292 
gí
->
îr‹
 = -
ERANGE
;

293 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JA
, 0, 0, -1));

295 
	}
}

298 
	$emô_debug
(
bpf_gí
 *
gí
, 
ªg1
, 
ªg2
,

299 c⁄° *
fmt
, 
va_li°
 
¨gs
)

301 
buf
[1024];

302 
addr
, 
Àn
, 
ªt
;

304 i‡(!
gí
->
log_Àvñ
)

306 
ªt
 = 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

307 i‡(
ªt
 < 1024 - 7 && 
ªg1
 >0 && 
ªg2
 < 0)

312 
	`°rˇt
(
buf
, "Ñ=%d");

313 
Àn
 = 
	`°æí
(
buf
) + 1;

314 
addr
 = 
	`add_d©a
(
gí
, 
buf
, 
Àn
);

316 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_1
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

317 0, 0, 0, 
addr
));

318 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_2
, 
Àn
));

319 i‡(
ªg1
 >= 0)

320 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_3
, 
ªg1
));

321 i‡(
ªg2
 >= 0)

322 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_4
, 
ªg2
));

323 
	`emô
(
gí
, 
	`BPF_EMIT_CALL
(
BPF_FUNC_åa˚_¥ötk
));

324 
	}
}

326 
	$debug_ªgs
(
bpf_gí
 *
gí
, 
ªg1
, 
ªg2
, c⁄° *
fmt
, ...)

328 
va_li°
 
¨gs
;

330 
	`va_°¨t
(
¨gs
, 
fmt
);

331 
	`emô_debug
(
gí
, 
ªg1
, 
ªg2
, 
fmt
, 
¨gs
);

332 
	`va_íd
(
¨gs
);

333 
	}
}

335 
	$debug_ªt
(
bpf_gí
 *
gí
, c⁄° *
fmt
, ...)

337 
va_li°
 
¨gs
;

339 
	`va_°¨t
(
¨gs
, 
fmt
);

340 
	`emô_debug
(
gí
, 
BPF_REG_7
, -1, 
fmt
, 
¨gs
);

341 
	`va_íd
(
¨gs
);

342 
	}
}

344 
	$__emô_sys_˛o£
(
bpf_gí
 *
gí
)

346 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JSLE
, 
BPF_REG_1
, 0,

350 2 + (
gí
->
log_Àvñ
 ? 6 : 0)));

351 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_9
, 
BPF_REG_1
));

352 
	`emô
(
gí
, 
	`BPF_EMIT_CALL
(
BPF_FUNC_sys_˛o£
));

353 
	`debug_ªgs
(
gí
, 
BPF_REG_9
, 
BPF_REG_0
, "close(%%d) = %%d");

354 
	}
}

356 
	$emô_sys_˛o£_°ack
(
bpf_gí
 *
gí
, 
°ack_off
)

358 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_W
, 
BPF_REG_1
, 
BPF_REG_10
, 
°ack_off
));

359 
	`__emô_sys_˛o£
(
gí
);

360 
	}
}

362 
	$emô_sys_˛o£_blob
(
bpf_gí
 *
gí
, 
blob_off
)

364 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_0
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

365 0, 0, 0, 
blob_off
));

366 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_W
, 
BPF_REG_1
, 
BPF_REG_0
, 0));

367 
	`__emô_sys_˛o£
(
gí
);

368 
	}
}

370 
	$bpf_gí__föish
(
bpf_gí
 *
gí
, 
ƒ_¥ogs
, 
ƒ_m≠s
)

372 
i
;

374 i‡(
ƒ_¥ogs
 < 
gí
->ƒ_¥og†|| 
ƒ_m≠s
 != gen->nr_maps) {

375 
	`¥_w¨n
("nr_progs %d/%dÇr_maps %d/%d mismatch\n",

376 
ƒ_¥ogs
, 
gí
->ƒ_¥ogs, 
ƒ_m≠s
, gen->nr_maps);

377 
gí
->
îr‹
 = -
EFAULT
;

378  
gí
->
îr‹
;

380 
	`emô_sys_˛o£_°ack
(
gí
, 
	`°ack_off
(
btf_fd
));

381 
i
 = 0; i < 
gí
->
ƒ_¥ogs
; i++)

382 
	`move_°ack2˘x
(
gí
,

383 (
bpf_lﬂdî_˘x
) +

384 (
bpf_m≠_desc
Ë* 
gí
->
ƒ_m≠s
 +

385 (
bpf_¥og_desc
Ë* 
i
 +

386 
	`off£tof
(
bpf_¥og_desc
, 
¥og_fd
), 4,

387 
	`°ack_off
(
¥og_fd
[
i
]));

388 
i
 = 0; i < 
gí
->
ƒ_m≠s
; i++)

389 
	`move_blob2˘x
(
gí
,

390 (
bpf_lﬂdî_˘x
) +

391 (
bpf_m≠_desc
Ë* 
i
 +

392 
	`off£tof
(
bpf_m≠_desc
, 
m≠_fd
), 4,

393 
	`blob_fd_¨øy_off
(
gí
, 
i
));

394 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 0));

395 
	`emô
(
gí
, 
	`BPF_EXIT_INSN
());

396 
	`¥_debug
("gí: föish %d\n", 
gí
->
îr‹
);

397 i‡(!
gí
->
îr‹
) {

398 
gí_lﬂdî_›ts
 *
›ts
 = 
gí
->opts;

400 
›ts
->
ö¢s
 = 
gí
->
ö¢_°¨t
;

401 
›ts
->
ö¢s_sz
 = 
gí
->
ö¢_cur
 - gí->
ö¢_°¨t
;

402 
›ts
->
d©a
 = 
gí
->
d©a_°¨t
;

403 
›ts
->
d©a_sz
 = 
gí
->
d©a_cur
 - gí->
d©a_°¨t
;

405  
gí
->
îr‹
;

406 
	}
}

408 
	$bpf_gí__‰ì
(
bpf_gí
 *
gí
)

410 i‡(!
gí
)

412 
	`‰ì
(
gí
->
d©a_°¨t
);

413 
	`‰ì
(
gí
->
ö¢_°¨t
);

414 
	`‰ì
(
gí
);

415 
	}
}

417 
	$bpf_gí__lﬂd_btf
(
bpf_gí
 *
gí
, c⁄° *
btf_øw_d©a
,

418 
__u32
 
btf_øw_size
)

420 
©å_size
 = 
	`off£to„nd
(
bpf_©å
, 
btf_log_Àvñ
);

421 
btf_d©a
, 
btf_lﬂd_©å
;

422 
bpf_©å
 
©å
;

424 
	`mem£t
(&
©å
, 0, 
©å_size
);

425 
	`¥_debug
("gí:Üﬂd_btf: sizê%d\n", 
btf_øw_size
);

426 
btf_d©a
 = 
	`add_d©a
(
gí
, 
btf_øw_d©a
, 
btf_øw_size
);

428 
©å
.
btf_size
 = 
btf_øw_size
;

429 
btf_lﬂd_©å
 = 
	`add_d©a
(
gí
, &
©å
, 
©å_size
);

432 
	`move_˘x2blob
(
gí
, 
	`©å_fõld
(
btf_lﬂd_©å
, 
btf_log_Àvñ
), 4,

433 
	`off£tof
(
bpf_lﬂdî_˘x
, 
log_Àvñ
), 
Ál£
);

434 
	`move_˘x2blob
(
gí
, 
	`©å_fõld
(
btf_lﬂd_©å
, 
btf_log_size
), 4,

435 
	`off£tof
(
bpf_lﬂdî_˘x
, 
log_size
), 
Ál£
);

436 
	`move_˘x2blob
(
gí
, 
	`©å_fõld
(
btf_lﬂd_©å
, 
btf_log_buf
), 8,

437 
	`off£tof
(
bpf_lﬂdî_˘x
, 
log_buf
), 
Ál£
);

439 
	`emô_ªl_°‹e
(
gí
, 
	`©å_fõld
(
btf_lﬂd_©å
, 
btf
), 
btf_d©a
);

441 
	`emô_sys_bpf
(
gí
, 
BPF_BTF_LOAD
, 
btf_lﬂd_©å
, 
©å_size
);

442 
	`debug_ªt
(
gí
, "btf_lﬂd sizê%d", 
btf_øw_size
);

443 
	`emô_check_îr
(
gí
);

445 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_10
, 
BPF_REG_7
, 
	`°ack_off
(
btf_fd
)));

446 
	}
}

448 
	$bpf_gí__m≠_¸óã
(
bpf_gí
 *
gí
,

449 
bpf_m≠_ty≥
 
m≠_ty≥
,

450 c⁄° *
m≠_«me
,

451 
__u32
 
key_size
, __u32 
vÆue_size
, __u32 
max_íåõs
,

452 
bpf_m≠_¸óã_›ts
 *
m≠_©å
, 
m≠_idx
)

454 
©å_size
 = 
	`off£to„nd
(
bpf_©å
, 
m≠_exåa
);

455 
boﬁ
 
˛o£_ö√r_m≠_fd
 = 
Ál£
;

456 
m≠_¸óã_©å
, 
idx
;

457 
bpf_©å
 
©å
;

459 
	`mem£t
(&
©å
, 0, 
©å_size
);

460 
©å
.
m≠_ty≥
 = map_type;

461 
©å
.
key_size
 = key_size;

462 
©å
.
vÆue_size
 = value_size;

463 
©å
.
m≠_Êags
 = 
m≠_©å
->map_flags;

464 
©å
.
m≠_exåa
 = 
m≠_©å
->map_extra;

465 i‡(
m≠_«me
)

466 
	`libbpf_°æ˝y
(
©å
.
m≠_«me
, map_name, (attr.map_name));

467 
©å
.
numa_node
 = 
m≠_©å
->numa_node;

468 
©å
.
m≠_ifödex
 = 
m≠_©å
->map_ifindex;

469 
©å
.
max_íåõs
 = max_entries;

470 
©å
.
btf_key_ty≥_id
 = 
m≠_©å
->btf_key_type_id;

471 
©å
.
btf_vÆue_ty≥_id
 = 
m≠_©å
->btf_value_type_id;

473 
	`¥_debug
("gen: map_create: %s idx %dÅype %d value_type_id %d\n",

474 
©å
.
m≠_«me
, 
m≠_idx
, 
m≠_ty≥
,áâr.
btf_vÆue_ty≥_id
);

476 
m≠_¸óã_©å
 = 
	`add_d©a
(
gí
, &
©å
, 
©å_size
);

477 i‡(
©å
.
btf_vÆue_ty≥_id
)

479 
	`move_°ack2blob
(
gí
, 
	`©å_fõld
(
m≠_¸óã_©å
, 
btf_fd
), 4,

480 
	`°ack_off
(
btf_fd
));

481 
©å
.
m≠_ty≥
) {

482 
BPF_MAP_TYPE_ARRAY_OF_MAPS
:

483 
BPF_MAP_TYPE_HASH_OF_MAPS
:

484 
	`move_°ack2blob
(
gí
, 
	`©å_fõld
(
m≠_¸óã_©å
, 
ö√r_m≠_fd
), 4,

485 
	`°ack_off
(
ö√r_m≠_fd
));

486 
˛o£_ö√r_m≠_fd
 = 
åue
;

492 i‡(
m≠_idx
 >= 0)

493 
	`move_˘x2blob
(
gí
, 
	`©å_fõld
(
m≠_¸óã_©å
, 
max_íåõs
), 4,

494 (
bpf_lﬂdî_˘x
) +

495 (
bpf_m≠_desc
Ë* 
m≠_idx
 +

496 
	`off£tof
(
bpf_m≠_desc
, 
max_íåõs
),

497 
åue
 );

499 
	`emô_sys_bpf
(
gí
, 
BPF_MAP_CREATE
, 
m≠_¸óã_©å
, 
©å_size
);

500 
	`debug_ªt
(
gí
, "map_create %s idx %dÅype %d value_size %d value_btf_id %d",

501 
©å
.
m≠_«me
, 
m≠_idx
, 
m≠_ty≥
, 
vÆue_size
,

502 
©å
.
btf_vÆue_ty≥_id
);

503 
	`emô_check_îr
(
gí
);

505 i‡(
m≠_idx
 < 0) {

510 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_10
, 
BPF_REG_7
,

511 
	`°ack_off
(
ö√r_m≠_fd
)));

512 } i‡(
m≠_idx
 !
gí
->
ƒ_m≠s
) {

513 
gí
->
îr‹
 = -
EDOM
;

517 
idx
 = 
	`add_m≠_fd
(
gí
);

518 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_1
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

519 0, 0, 0, 
	`blob_fd_¨øy_off
(
gí
, 
idx
)));

520 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_1
, 
BPF_REG_7
, 0));

522 i‡(
˛o£_ö√r_m≠_fd
)

523 
	`emô_sys_˛o£_°ack
(
gí
, 
	`°ack_off
(
ö√r_m≠_fd
));

524 
	}
}

526 
	$bpf_gí__ªc‹d_©èch_èrgë
(
bpf_gí
 *
gí
, c⁄° *
©èch_«me
,

527 
bpf_©èch_ty≥
 
ty≥
)

529 c⁄° *
¥efix
;

530 
köd
, 
ªt
;

532 
	`btf_gë_kî√l_¥efix_köd
(
ty≥
, &
¥efix
, &
köd
);

533 
gí
->
©èch_köd
 = 
köd
;

534 
ªt
 = 
	`¢¥ötf
(
gí
->
©èch_èrgë
, (gen->attach_target), "%s%s",

535 
¥efix
, 
©èch_«me
);

536 i‡(
ªt
 =(
gí
->
©èch_èrgë
))

537 
gí
->
îr‹
 = -
ENOSPC
;

538 
	}
}

540 
	$emô_föd_©èch_èrgë
(
bpf_gí
 *
gí
)

542 
«me
, 
Àn
 = 
	`°æí
(
gí
->
©èch_èrgë
) + 1;

544 
	`¥_debug
("gí: föd_©èch_tgà%†%d\n", 
gí
->
©èch_èrgë
, gí->
©èch_köd
);

545 
«me
 = 
	`add_d©a
(
gí
, gí->
©èch_èrgë
, 
Àn
);

547 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_1
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

548 0, 0, 0, 
«me
));

549 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_2
, 
Àn
));

550 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_3
, gí->
©èch_köd
));

551 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_4
, 0));

552 
	`emô
(
gí
, 
	`BPF_EMIT_CALL
(
BPF_FUNC_btf_föd_by_«me_köd
));

553 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_7
, 
BPF_REG_0
));

554 
	`debug_ªt
(
gí
, "find_by_name_kind(%s,%d)",

555 
gí
->
©èch_èrgë
, gí->
©èch_köd
);

556 
	`emô_check_îr
(
gí
);

560 
	}
}

562 
	$bpf_gí__ªc‹d_exã∫
(
bpf_gí
 *
gí
, c⁄° *
«me
, 
boﬁ
 
is_wók
,

563 
boﬁ
 
is_ty≥Àss
, 
köd
, 
ö¢_idx
)

565 
ksym_ªlo_desc
 *
ªlo
;

567 
ªlo
 = 
	`libbpf_ªÆloˇºay
(
gí
->
ªlos
, gí->
ªlo_˙t
 + 1, (*relo));

568 i‡(!
ªlo
) {

569 
gí
->
îr‹
 = -
ENOMEM
;

572 
gí
->
ªlos
 = 
ªlo
;

573 
ªlo
 +
gí
->
ªlo_˙t
;

574 
ªlo
->
«me
 =Çame;

575 
ªlo
->
is_wók
 = is_weak;

576 
ªlo
->
is_ty≥Àss
 = is_typeless;

577 
ªlo
->
köd
 = kind;

578 
ªlo
->
ö¢_idx
 = insn_idx;

579 
gí
->
ªlo_˙t
++;

580 
	}
}

583 
ksym_desc
 *
	$gë_ksym_desc
(
bpf_gí
 *
gí
, 
ksym_ªlo_desc
 *
ªlo
)

585 
ksym_desc
 *
kdesc
;

586 
i
;

588 
i
 = 0; i < 
gí
->
ƒ_ksyms
; i++) {

589 i‡(!
	`°rcmp
(
gí
->
ksyms
[
i
].
«me
, 
ªlo
->name)) {

590 
gí
->
ksyms
[
i
].
ªf
++;

591  &
gí
->
ksyms
[
i
];

594 
kdesc
 = 
	`libbpf_ªÆloˇºay
(
gí
->
ksyms
, gí->
ƒ_ksyms
 + 1, (*kdesc));

595 i‡(!
kdesc
) {

596 
gí
->
îr‹
 = -
ENOMEM
;

597  
NULL
;

599 
gí
->
ksyms
 = 
kdesc
;

600 
kdesc
 = &
gí
->
ksyms
[gí->
ƒ_ksyms
++];

601 
kdesc
->
«me
 = 
ªlo
->name;

602 
kdesc
->
köd
 = 
ªlo
->kind;

603 
kdesc
->
ªf
 = 1;

604 
kdesc
->
off
 = 0;

605 
kdesc
->
ö¢
 = 0;

606  
kdesc
;

607 
	}
}

612 
	$emô_bpf_föd_by_«me_köd
(
bpf_gí
 *
gí
, 
ksym_ªlo_desc
 *
ªlo
)

614 
«me_off
, 
Àn
 = 
	`°æí
(
ªlo
->
«me
) + 1;

616 
«me_off
 = 
	`add_d©a
(
gí
, 
ªlo
->
«me
, 
Àn
);

617 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_1
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

618 0, 0, 0, 
«me_off
));

619 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_2
, 
Àn
));

620 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_3
, 
ªlo
->
köd
));

621 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_4
, 0));

622 
	`emô
(
gí
, 
	`BPF_EMIT_CALL
(
BPF_FUNC_btf_föd_by_«me_köd
));

623 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_7
, 
BPF_REG_0
));

624 
	`debug_ªt
(
gí
, "föd_by_«me_köd(%s,%d)", 
ªlo
->
«me
,Ñño->
köd
);

625 
	}
}

631 
	$emô_bpf_kÆlsyms_lookup_«me
(
bpf_gí
 *
gí
, 
ksym_ªlo_desc
 *
ªlo
)

633 
«me_off
, 
Àn
 = 
	`°æí
(
ªlo
->
«me
Ë+ 1, 
ªs_off
;

635 
«me_off
 = 
	`add_d©a
(
gí
, 
ªlo
->
«me
, 
Àn
);

636 
ªs_off
 = 
	`add_d©a
(
gí
, 
NULL
, 8);

637 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_1
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

638 0, 0, 0, 
«me_off
));

639 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_2
, 
Àn
));

640 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_3
, 0));

641 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_4
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

642 0, 0, 0, 
ªs_off
));

643 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_7
, 
BPF_REG_4
));

644 
	`emô
(
gí
, 
	`BPF_EMIT_CALL
(
BPF_FUNC_kÆlsyms_lookup_«me
));

645 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_DW
, 
BPF_REG_9
, 
BPF_REG_7
, 0));

646 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_7
, 
BPF_REG_0
));

647 
	`debug_ªt
(
gí
, "kÆlsyms_lookup_«me(%s,%d)", 
ªlo
->
«me
,Ñño->
köd
);

648 
	}
}

660 
	$emô_ªlo_kfunc_btf
(
bpf_gí
 *
gí
, 
ksym_ªlo_desc
 *
ªlo
, 
ö¢
)

662 
ksym_desc
 *
kdesc
;

663 
btf_fd_idx
;

665 
kdesc
 = 
	`gë_ksym_desc
(
gí
, 
ªlo
);

666 i‡(!
kdesc
)

669 i‡(
kdesc
->
ªf
 > 1) {

670 
	`move_blob2blob
(
gí
, 
ö¢
 + 
	`off£tof
(
bpf_ö¢
, 
imm
), 4,

671 
kdesc
->
ö¢
 + 
	`off£tof
(
bpf_ö¢
, 
imm
));

672 
	`move_blob2blob
(
gí
, 
ö¢
 + 
	`off£tof
(
bpf_ö¢
, 
off
), 2,

673 
kdesc
->
ö¢
 + 
	`off£tof
(
bpf_ö¢
, 
off
));

674 
log
;

677 
kdesc
->
ö¢
 = insn;

678 
	`emô_bpf_föd_by_«me_köd
(
gí
, 
ªlo
);

679 i‡(!
ªlo
->
is_wók
)

680 
	`emô_check_îr
(
gí
);

682 
btf_fd_idx
 = 
	`add_kfunc_btf_fd
(
gí
);

683 i‡(
btf_fd_idx
 > 
INT16_MAX
) {

684 
	`¥_w¨n
("BTF fd off %d for kfunc %sÉxceeds INT16_MAX, cannotÖrocessÑelocation\n",

685 
btf_fd_idx
, 
ªlo
->
«me
);

686 
gí
->
îr‹
 = -
E2BIG
;

689 
kdesc
->
off
 = 
btf_fd_idx
;

691 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JSGE
, 
BPF_REG_7
, 0, 3));

693 
	`emô
(
gí
, 
	`BPF_ST_MEM
(
BPF_W
, 
BPF_REG_8
, 
	`off£tof
(
bpf_ö¢
, 
imm
), 0));

694 
	`emô
(
gí
, 
	`BPF_ST_MEM
(
BPF_H
, 
BPF_REG_8
, 
	`off£tof
(
bpf_ö¢
, 
off
), 0));

696 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JA
, 0, 0, 10));

698 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_8
, 
BPF_REG_7
, 
	`off£tof
(
bpf_ö¢
, 
imm
)));

700 
	`emô
(
gí
, 
	`BPF_MOV64_REG
(
BPF_REG_9
, 
BPF_REG_7
));

701 
	`emô
(
gí
, 
	`BPF_ALU64_IMM
(
BPF_RSH
, 
BPF_REG_9
, 32));

703 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JNE
, 
BPF_REG_9
, 0, 2));

705 
	`emô
(
gí
, 
	`BPF_ST_MEM
(
BPF_H
, 
BPF_REG_8
, 
	`off£tof
(
bpf_ö¢
, 
off
), 0));

707 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JA
, 0, 0, 4));

709 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_0
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

710 0, 0, 0, 
	`blob_fd_¨øy_off
(
gí
, 
btf_fd_idx
)));

712 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_0
, 
BPF_REG_9
, 0));

714 
	`emô
(
gí
, 
	`BPF_ST_MEM
(
BPF_H
, 
BPF_REG_8
, 
	`off£tof
(
bpf_ö¢
, 
off
), 
btf_fd_idx
));

715 
log
:

716 i‡(!
gí
->
log_Àvñ
)

718 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_W
, 
BPF_REG_7
, 
BPF_REG_8
,

719 
	`off£tof
(
bpf_ö¢
, 
imm
)));

720 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_H
, 
BPF_REG_9
, 
BPF_REG_8
,

721 
	`off£tof
(
bpf_ö¢
, 
off
)));

722 
	`debug_ªgs
(
gí
, 
BPF_REG_7
, 
BPF_REG_9
, " func (%s:count=%d): imm: %%d, off: %%d",

723 
ªlo
->
«me
, 
kdesc
->
ªf
);

724 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_0
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

725 0, 0, 0, 
	`blob_fd_¨øy_off
(
gí
, 
kdesc
->
off
)));

726 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_W
, 
BPF_REG_9
, 
BPF_REG_0
, 0));

727 
	`debug_ªgs
(
gí
, 
BPF_REG_9
, -1, " func (%s:count=%d): btf_fd",

728 
ªlo
->
«me
, 
kdesc
->
ªf
);

729 
	}
}

731 
	$emô_ksym_ªlo_log
(
bpf_gí
 *
gí
, 
ksym_ªlo_desc
 *
ªlo
,

732 
ªf
)

734 i‡(!
gí
->
log_Àvñ
)

736 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_W
, 
BPF_REG_7
, 
BPF_REG_8
,

737 
	`off£tof
(
bpf_ö¢
, 
imm
)));

738 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_H
, 
BPF_REG_9
, 
BPF_REG_8
, (
bpf_ö¢
) +

739 
	`off£tof
(
bpf_ö¢
, 
imm
)));

740 
	`debug_ªgs
(
gí
, 
BPF_REG_7
, 
BPF_REG_9
, " varÅ=%d w=%d (%s:count=%d): imm[0]: %%d, imm[1]: %%d",

741 
ªlo
->
is_ty≥Àss
,Ñño->
is_wók
,Ñño->
«me
, 
ªf
);

742 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_B
, 
BPF_REG_9
, 
BPF_REG_8
, 
	`off£to„nd
(
bpf_ö¢
, 
code
)));

743 
	`debug_ªgs
(
gí
, 
BPF_REG_9
, -1, " varÅ=%d w=%d (%s:count=%d): insn.reg",

744 
ªlo
->
is_ty≥Àss
,Ñño->
is_wók
,Ñño->
«me
, 
ªf
);

745 
	}
}

750 
	$emô_ªlo_ksym_ty≥Àss
(
bpf_gí
 *
gí
,

751 
ksym_ªlo_desc
 *
ªlo
, 
ö¢
)

753 
ksym_desc
 *
kdesc
;

755 
kdesc
 = 
	`gë_ksym_desc
(
gí
, 
ªlo
);

756 i‡(!
kdesc
)

759 i‡(
kdesc
->
ªf
 > 1) {

760 
	`move_blob2blob
(
gí
, 
ö¢
 + 
	`off£tof
(
bpf_ö¢
, 
imm
), 4,

761 
kdesc
->
ö¢
 + 
	`off£tof
(
bpf_ö¢
, 
imm
));

762 
	`move_blob2blob
(
gí
, 
ö¢
 + (
bpf_ö¢
Ë+ 
	`off£tof
(bpf_ö¢, 
imm
), 4,

763 
kdesc
->
ö¢
 + (
bpf_ö¢
Ë+ 
	`off£tof
(bpf_ö¢, 
imm
));

764 
log
;

767 
kdesc
->
ö¢
 = insn;

769 
kdesc
->
ty≥Àss
 = 
åue
;

770 
	`emô_bpf_kÆlsyms_lookup_«me
(
gí
, 
ªlo
);

771 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JEQ
, 
BPF_REG_7
, -
ENOENT
, 1));

772 
	`emô_check_îr
(
gí
);

774 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_8
, 
BPF_REG_9
, 
	`off£tof
(
bpf_ö¢
, 
imm
)));

776 
	`emô
(
gí
, 
	`BPF_ALU64_IMM
(
BPF_RSH
, 
BPF_REG_9
, 32));

777 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_8
, 
BPF_REG_9
,

778 (
bpf_ö¢
Ë+ 
	`off£tof
(bpf_ö¢, 
imm
)));

779 
log
:

780 
	`emô_ksym_ªlo_log
(
gí
, 
ªlo
, 
kdesc
->
ªf
);

781 
	}
}

783 
__u32
 
	$§c_ªg_mask
()

785 #i‡
	`deföed
(
__LITTLE_ENDIAN_BITFIELD
)

787 #ñi‡
	`deföed
(
__BIG_ENDIAN_BITFIELD
)

792 
	}
}

797 
	$emô_ªlo_ksym_btf
(
bpf_gí
 *
gí
, 
ksym_ªlo_desc
 *
ªlo
, 
ö¢
)

799 
ksym_desc
 *
kdesc
;

800 
__u32
 
ªg_mask
;

802 
kdesc
 = 
	`gë_ksym_desc
(
gí
, 
ªlo
);

803 i‡(!
kdesc
)

806 i‡(
kdesc
->
ªf
 > 1) {

807 
	`move_blob2blob
(
gí
, 
ö¢
 + 
	`off£tof
(
bpf_ö¢
, 
imm
), 4,

808 
kdesc
->
ö¢
 + 
	`off£tof
(
bpf_ö¢
, 
imm
));

809 
	`move_blob2blob
(
gí
, 
ö¢
 + (
bpf_ö¢
Ë+ 
	`off£tof
(bpf_ö¢, 
imm
), 4,

810 
kdesc
->
ö¢
 + (
bpf_ö¢
Ë+ 
	`off£tof
(bpf_ö¢, 
imm
));

812 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JNE
, 
BPF_REG_0
, 0, 3));

813 
˛ór_§c_ªg
;

816 
kdesc
->
ö¢
 = insn;

817 
	`emô_bpf_föd_by_«me_köd
(
gí
, 
ªlo
);

818 i‡(!
ªlo
->
is_wók
)

819 
	`emô_check_îr
(
gí
);

821 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JSGE
, 
BPF_REG_7
, 0, 3));

823 
	`emô
(
gí
, 
	`BPF_ST_MEM
(
BPF_W
, 
BPF_REG_8
, 
	`off£tof
(
bpf_ö¢
, 
imm
), 0));

824 
	`emô
(
gí
, 
	`BPF_ST_MEM
(
BPF_W
, 
BPF_REG_8
, (
bpf_ö¢
Ë+ 
	`off£tof
(bpf_ö¢, 
imm
), 0));

826 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JA
, 0, 0, 4));

828 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_8
, 
BPF_REG_7
, 
	`off£tof
(
bpf_ö¢
, 
imm
)));

830 
	`emô
(
gí
, 
	`BPF_ALU64_IMM
(
BPF_RSH
, 
BPF_REG_7
, 32));

831 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_8
, 
BPF_REG_7
,

832 (
bpf_ö¢
Ë+ 
	`off£tof
(bpf_ö¢, 
imm
)));

834 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JSGE
, 
BPF_REG_7
, 0, 3));

835 
˛ór_§c_ªg
:

837 
ªg_mask
 = 
	`§c_ªg_mask
();

838 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_B
, 
BPF_REG_9
, 
BPF_REG_8
, 
	`off£to„nd
(
bpf_ö¢
, 
code
)));

839 
	`emô
(
gí
, 
	`BPF_ALU32_IMM
(
BPF_AND
, 
BPF_REG_9
, 
ªg_mask
));

840 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_B
, 
BPF_REG_8
, 
BPF_REG_9
, 
	`off£to„nd
(
bpf_ö¢
, 
code
)));

842 
	`emô_ksym_ªlo_log
(
gí
, 
ªlo
, 
kdesc
->
ªf
);

843 
	}
}

845 
	$bpf_gí__ªc‹d_ªlo_c‹e
(
bpf_gí
 *
gí
,

846 c⁄° 
bpf_c‹e_ªlo
 *
c‹e_ªlo
)

848 
bpf_c‹e_ªlo
 *
ªlos
;

850 
ªlos
 = 
	`libbpf_ªÆloˇºay
(
gí
->
c‹e_ªlos
, gí->
c‹e_ªlo_˙t
 + 1, (*relos));

851 i‡(!
ªlos
) {

852 
gí
->
îr‹
 = -
ENOMEM
;

855 
gí
->
c‹e_ªlos
 = 
ªlos
;

856 
ªlos
 +
gí
->
c‹e_ªlo_˙t
;

857 
	`mem˝y
(
ªlos
, 
c‹e_ªlo
, (*relos));

858 
gí
->
c‹e_ªlo_˙t
++;

859 
	}
}

861 
	$emô_ªlo
(
bpf_gí
 *
gí
, 
ksym_ªlo_desc
 *
ªlo
, 
ö¢s
)

863 
ö¢
;

865 
	`¥_debug
("gí:Émô_ªlÿ(%d): %†© %d\n", 
ªlo
->
köd
,Ñño->
«me
,Ñño->
ö¢_idx
);

866 
ö¢
 = 
ö¢s
 + (
bpf_ö¢
Ë* 
ªlo
->
ö¢_idx
;

867 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_8
, 
BPF_PSEUDO_MAP_IDX_VALUE
, 0, 0, 0, 
ö¢
));

868 
ªlo
->
köd
) {

869 
BTF_KIND_VAR
:

870 i‡(
ªlo
->
is_ty≥Àss
)

871 
	`emô_ªlo_ksym_ty≥Àss
(
gí
, 
ªlo
, 
ö¢
);

873 
	`emô_ªlo_ksym_btf
(
gí
, 
ªlo
, 
ö¢
);

875 
BTF_KIND_FUNC
:

876 
	`emô_ªlo_kfunc_btf
(
gí
, 
ªlo
, 
ö¢
);

879 
	`¥_w¨n
("Unknow¿ªloˇti⁄ köd '%d'\n", 
ªlo
->
köd
);

880 
gí
->
îr‹
 = -
EDOM
;

883 
	}
}

885 
	$emô_ªlos
(
bpf_gí
 *
gí
, 
ö¢s
)

887 
i
;

889 
i
 = 0; i < 
gí
->
ªlo_˙t
; i++)

890 
	`emô_ªlo
(
gí
, gí->
ªlos
 + 
i
, 
ö¢s
);

891 
	}
}

893 
	$˛ónup_c‹e_ªlo
(
bpf_gí
 *
gí
)

895 i‡(!
gí
->
c‹e_ªlo_˙t
)

897 
	`‰ì
(
gí
->
c‹e_ªlos
);

898 
gí
->
c‹e_ªlo_˙t
 = 0;

899 
gí
->
c‹e_ªlos
 = 
NULL
;

900 
	}
}

902 
	$˛ónup_ªlos
(
bpf_gí
 *
gí
, 
ö¢s
)

904 
i
, 
ö¢
;

906 
i
 = 0; i < 
gí
->
ƒ_ksyms
; i++) {

908 i‡(
gí
->
ksyms
[
i
].
köd
 =
BTF_KIND_VAR
 && !gí->ksyms[i].
ty≥Àss
) {

910 
ö¢
 = 
gí
->
ksyms
[
i
].insn;

911 
ö¢
 +(
bpf_ö¢
Ë+ 
	`off£tof
(bpf_ö¢, 
imm
);

912 
	`emô_sys_˛o£_blob
(
gí
, 
ö¢
);

913 } i‡(
gí
->
ksyms
[
i
].
köd
 =
BTF_KIND_FUNC
) {

914 
	`emô_sys_˛o£_blob
(
gí
, 
	`blob_fd_¨øy_off
(gí, gí->
ksyms
[
i
].
off
));

915 i‡(
gí
->
ksyms
[
i
].
off
 < 
MAX_FD_ARRAY_SZ
)

916 
gí
->
ƒ_fd_¨øy
--;

919 i‡(
gí
->
ƒ_ksyms
) {

920 
	`‰ì
(
gí
->
ksyms
);

921 
gí
->
ƒ_ksyms
 = 0;

922 
gí
->
ksyms
 = 
NULL
;

924 i‡(
gí
->
ªlo_˙t
) {

925 
	`‰ì
(
gí
->
ªlos
);

926 
gí
->
ªlo_˙t
 = 0;

927 
gí
->
ªlos
 = 
NULL
;

929 
	`˛ónup_c‹e_ªlo
(
gí
);

930 
	}
}

932 
	$bpf_gí__¥og_lﬂd
(
bpf_gí
 *
gí
,

933 
bpf_¥og_ty≥
 
¥og_ty≥
, c⁄° *
¥og_«me
,

934 c⁄° *
li˚n£
, 
bpf_ö¢
 *
ö¢s
, 
size_t
 
ö¢_˙t
,

935 
bpf_¥og_lﬂd_›ts
 *
lﬂd_©å
, 
¥og_idx
)

937 
¥og_lﬂd_©å
, 
li˚n£_off
, 
ö¢s_off
, 
func_öfo
, 
löe_öfo
, 
c‹e_ªlos
;

938 
©å_size
 = 
	`off£to„nd
(
bpf_©å
, 
c‹e_ªlo_ªc_size
);

939 
bpf_©å
 
©å
;

941 
	`mem£t
(&
©å
, 0, 
©å_size
);

942 
	`¥_debug
("gen:Örog_load:Åype %d insns_cnt %zdÖrogi_idx %d\n",

943 
¥og_ty≥
, 
ö¢_˙t
, 
¥og_idx
);

945 
li˚n£_off
 = 
	`add_d©a
(
gí
, 
li˚n£
, 
	`°æí
(license) + 1);

947 
ö¢s_off
 = 
	`add_d©a
(
gí
, 
ö¢s
, 
ö¢_˙t
 * (
bpf_ö¢
));

949 
©å
.
¥og_ty≥
 =Örog_type;

950 
©å
.
ex≥˘ed_©èch_ty≥
 = 
lﬂd_©å
->expected_attach_type;

951 
©å
.
©èch_btf_id
 = 
lﬂd_©å
->attach_btf_id;

952 
©å
.
¥og_ifödex
 = 
lﬂd_©å
->prog_ifindex;

953 
©å
.
kîn_vîsi⁄
 = 0;

954 
©å
.
ö¢_˙t
 = (
__u32
)insn_cnt;

955 
©å
.
¥og_Êags
 = 
lﬂd_©å
->prog_flags;

957 
©å
.
func_öfo_ªc_size
 = 
lﬂd_©å
->func_info_rec_size;

958 
©å
.
func_öfo_˙t
 = 
lﬂd_©å
->func_info_cnt;

959 
func_öfo
 = 
	`add_d©a
(
gí
, 
lﬂd_©å
->func_info,

960 
©å
.
func_öfo_˙t
 *áâr.
func_öfo_ªc_size
);

962 
©å
.
löe_öfo_ªc_size
 = 
lﬂd_©å
->line_info_rec_size;

963 
©å
.
löe_öfo_˙t
 = 
lﬂd_©å
->line_info_cnt;

964 
löe_öfo
 = 
	`add_d©a
(
gí
, 
lﬂd_©å
->line_info,

965 
©å
.
löe_öfo_˙t
 *áâr.
löe_öfo_ªc_size
);

967 
©å
.
c‹e_ªlo_ªc_size
 = (
bpf_c‹e_ªlo
);

968 
©å
.
c‹e_ªlo_˙t
 = 
gí
->core_relo_cnt;

969 
c‹e_ªlos
 = 
	`add_d©a
(
gí
, gen->core_relos,

970 
©å
.
c‹e_ªlo_˙t
 *áâr.
c‹e_ªlo_ªc_size
);

972 
	`libbpf_°æ˝y
(
©å
.
¥og_«me
,Örog_name, (attr.prog_name));

973 
¥og_lﬂd_©å
 = 
	`add_d©a
(
gí
, &
©å
, 
©å_size
);

976 
	`emô_ªl_°‹e
(
gí
, 
	`©å_fõld
(
¥og_lﬂd_©å
, 
li˚n£
), 
li˚n£_off
);

979 
	`emô_ªl_°‹e
(
gí
, 
	`©å_fõld
(
¥og_lﬂd_©å
, 
ö¢s
), 
ö¢s_off
);

982 
	`emô_ªl_°‹e
(
gí
, 
	`©å_fõld
(
¥og_lﬂd_©å
, 
func_öfo
), func_info);

985 
	`emô_ªl_°‹e
(
gí
, 
	`©å_fõld
(
¥og_lﬂd_©å
, 
löe_öfo
),Üine_info);

988 
	`emô_ªl_°‹e
(
gí
, 
	`©å_fõld
(
¥og_lﬂd_©å
, 
c‹e_ªlos
), core_relos);

991 
	`emô_ªl_°‹e
(
gí
, 
	`©å_fõld
(
¥og_lﬂd_©å
, 
fd_¨øy
), gen->fd_array);

994 
	`move_˘x2blob
(
gí
, 
	`©å_fõld
(
¥og_lﬂd_©å
, 
log_Àvñ
), 4,

995 
	`off£tof
(
bpf_lﬂdî_˘x
, 
log_Àvñ
), 
Ál£
);

996 
	`move_˘x2blob
(
gí
, 
	`©å_fõld
(
¥og_lﬂd_©å
, 
log_size
), 4,

997 
	`off£tof
(
bpf_lﬂdî_˘x
, 
log_size
), 
Ál£
);

998 
	`move_˘x2blob
(
gí
, 
	`©å_fõld
(
¥og_lﬂd_©å
, 
log_buf
), 8,

999 
	`off£tof
(
bpf_lﬂdî_˘x
, 
log_buf
), 
Ál£
);

1001 
	`move_°ack2blob
(
gí
, 
	`©å_fõld
(
¥og_lﬂd_©å
, 
¥og_btf_fd
), 4,

1002 
	`°ack_off
(
btf_fd
));

1003 i‡(
gí
->
©èch_köd
) {

1004 
	`emô_föd_©èch_èrgë
(
gí
);

1006 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_0
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

1007 0, 0, 0, 
¥og_lﬂd_©å
));

1008 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_0
, 
BPF_REG_7
,

1009 
	`off£tof
(
bpf_©å
, 
©èch_btf_id
)));

1010 
	`emô
(
gí
, 
	`BPF_ALU64_IMM
(
BPF_RSH
, 
BPF_REG_7
, 32));

1011 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_0
, 
BPF_REG_7
,

1012 
	`off£tof
(
bpf_©å
, 
©èch_btf_obj_fd
)));

1014 
	`emô_ªlos
(
gí
, 
ö¢s_off
);

1016 
	`emô_sys_bpf
(
gí
, 
BPF_PROG_LOAD
, 
¥og_lﬂd_©å
, 
©å_size
);

1017 
	`debug_ªt
(
gí
, "¥og_lﬂd %†ö¢_˙à%d", 
©å
.
¥og_«me
,áâr.
ö¢_˙t
);

1019 
	`˛ónup_ªlos
(
gí
, 
ö¢s_off
);

1020 i‡(
gí
->
©èch_köd
) {

1021 
	`emô_sys_˛o£_blob
(
gí
,

1022 
	`©å_fõld
(
¥og_lﬂd_©å
, 
©èch_btf_obj_fd
));

1023 
gí
->
©èch_köd
 = 0;

1025 
	`emô_check_îr
(
gí
);

1027 
	`emô
(
gí
, 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_10
, 
BPF_REG_7
,

1028 
	`°ack_off
(
¥og_fd
[
gí
->
ƒ_¥ogs
])));

1029 
gí
->
ƒ_¥ogs
++;

1030 
	}
}

1032 
	$bpf_gí__m≠_upd©e_ñem
(
bpf_gí
 *
gí
, 
m≠_idx
, *
pvÆue
,

1033 
__u32
 
vÆue_size
)

1035 
©å_size
 = 
	`off£to„nd
(
bpf_©å
, 
Êags
);

1036 
m≠_upd©e_©å
, 
vÆue
, 
key
;

1037 
bpf_©å
 
©å
;

1038 
zîo
 = 0;

1040 
	`mem£t
(&
©å
, 0, 
©å_size
);

1041 
	`¥_debug
("gí: m≠_upd©e_ñem: idx %d\n", 
m≠_idx
);

1043 
vÆue
 = 
	`add_d©a
(
gí
, 
pvÆue
, 
vÆue_size
);

1044 
key
 = 
	`add_d©a
(
gí
, &
zîo
, (zero));

1053 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_DW
, 
BPF_REG_3
, 
BPF_REG_6
,

1054 (
bpf_lﬂdî_˘x
) +

1055 (
bpf_m≠_desc
Ë* 
m≠_idx
 +

1056 
	`off£tof
(
bpf_m≠_desc
, 
öôül_vÆue
)));

1057 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JEQ
, 
BPF_REG_3
, 0, 8));

1058 
	`emô2
(
gí
, 
	`BPF_LD_IMM64_RAW_FULL
(
BPF_REG_1
, 
BPF_PSEUDO_MAP_IDX_VALUE
,

1059 0, 0, 0, 
vÆue
));

1060 
	`emô
(
gí
, 
	`BPF_MOV64_IMM
(
BPF_REG_2
, 
vÆue_size
));

1061 
	`emô
(
gí
, 
	`BPF_LDX_MEM
(
BPF_W
, 
BPF_REG_0
, 
BPF_REG_6
,

1062 
	`off£tof
(
bpf_lﬂdî_˘x
, 
Êags
)));

1063 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JSET
, 
BPF_REG_0
, 
BPF_SKEL_KERNEL
, 2));

1064 
	`emô
(
gí
, 
	`BPF_EMIT_CALL
(
BPF_FUNC_c›y_‰om_u£r
));

1065 
	`emô
(
gí
, 
	`BPF_JMP_IMM
(
BPF_JA
, 0, 0, 1));

1066 
	`emô
(
gí
, 
	`BPF_EMIT_CALL
(
BPF_FUNC_¥obe_ªad_kî√l
));

1068 
m≠_upd©e_©å
 = 
	`add_d©a
(
gí
, &
©å
, 
©å_size
);

1069 
	`move_blob2blob
(
gí
, 
	`©å_fõld
(
m≠_upd©e_©å
, 
m≠_fd
), 4,

1070 
	`blob_fd_¨øy_off
(
gí
, 
m≠_idx
));

1071 
	`emô_ªl_°‹e
(
gí
, 
	`©å_fõld
(
m≠_upd©e_©å
, 
key
), key);

1072 
	`emô_ªl_°‹e
(
gí
, 
	`©å_fõld
(
m≠_upd©e_©å
, 
vÆue
), value);

1074 
	`emô_sys_bpf
(
gí
, 
BPF_MAP_UPDATE_ELEM
, 
m≠_upd©e_©å
, 
©å_size
);

1075 
	`debug_ªt
(
gí
, "upd©e_ñem idx %d vÆue_sizê%d", 
m≠_idx
, 
vÆue_size
);

1076 
	`emô_check_îr
(
gí
);

1077 
	}
}

1079 
	$bpf_gí__p›uœã_ouãr_m≠
(
bpf_gí
 *
gí
, 
ouãr_m≠_idx
, 
¶Ÿ
,

1080 
ö√r_m≠_idx
)

1082 
©å_size
 = 
	`off£to„nd
(
bpf_©å
, 
Êags
);

1083 
m≠_upd©e_©å
, 
key
;

1084 
bpf_©å
 
©å
;

1086 
	`mem£t
(&
©å
, 0, 
©å_size
);

1087 
	`¥_debug
("gen:Öopulate_outer_map: outer %d key %d inner %d\n",

1088 
ouãr_m≠_idx
, 
¶Ÿ
, 
ö√r_m≠_idx
);

1090 
key
 = 
	`add_d©a
(
gí
, &
¶Ÿ
, (slot));

1092 
m≠_upd©e_©å
 = 
	`add_d©a
(
gí
, &
©å
, 
©å_size
);

1093 
	`move_blob2blob
(
gí
, 
	`©å_fõld
(
m≠_upd©e_©å
, 
m≠_fd
), 4,

1094 
	`blob_fd_¨øy_off
(
gí
, 
ouãr_m≠_idx
));

1095 
	`emô_ªl_°‹e
(
gí
, 
	`©å_fõld
(
m≠_upd©e_©å
, 
key
), key);

1096 
	`emô_ªl_°‹e
(
gí
, 
	`©å_fõld
(
m≠_upd©e_©å
, 
vÆue
),

1097 
	`blob_fd_¨øy_off
(
gí
, 
ö√r_m≠_idx
));

1100 
	`emô_sys_bpf
(
gí
, 
BPF_MAP_UPDATE_ELEM
, 
m≠_upd©e_©å
, 
©å_size
);

1101 
	`debug_ªt
(
gí
, "populate_outer_map outer %d key %d inner %d",

1102 
ouãr_m≠_idx
, 
¶Ÿ
, 
ö√r_m≠_idx
);

1103 
	`emô_check_îr
(
gí
);

1104 
	}
}

1106 
	$bpf_gí__m≠_‰ìze
(
bpf_gí
 *
gí
, 
m≠_idx
)

1108 
©å_size
 = 
	`off£to„nd
(
bpf_©å
, 
m≠_fd
);

1109 
m≠_‰ìze_©å
;

1110 
bpf_©å
 
©å
;

1112 
	`mem£t
(&
©å
, 0, 
©å_size
);

1113 
	`¥_debug
("gí: m≠_‰ìze: idx %d\n", 
m≠_idx
);

1114 
m≠_‰ìze_©å
 = 
	`add_d©a
(
gí
, &
©å
, 
©å_size
);

1115 
	`move_blob2blob
(
gí
, 
	`©å_fõld
(
m≠_‰ìze_©å
, 
m≠_fd
), 4,

1116 
	`blob_fd_¨øy_off
(
gí
, 
m≠_idx
));

1118 
	`emô_sys_bpf
(
gí
, 
BPF_MAP_FREEZE
, 
m≠_‰ìze_©å
, 
©å_size
);

1119 
	`debug_ªt
(
gí
, "map_freeze");

1120 
	`emô_check_îr
(
gí
);

1121 
	}
}

	@hashmap.c

8 
	~<°döt.h
>

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<î∫o.h
>

12 
	~<löux/îr.h
>

13 
	~"hashm≠.h
"

16 #¥agm®
GCC
 
pois⁄
 
u8
 
u16
 
u32
 
u64
 
s8
 
s16
 
s32
 
s64


19 #¥agm®
GCC
 
pois⁄
 
ªÆloˇºay


22 
	#HASHMAP_MIN_CAP_BITS
 2

	)

24 
	$hashm≠_add_íåy
(
hashm≠_íåy
 **
µªv
,

25 
hashm≠_íåy
 *
íåy
)

27 
íåy
->
√xt
 = *
µªv
;

28 *
µªv
 = 
íåy
;

29 
	}
}

31 
	$hashm≠_dñ_íåy
(
hashm≠_íåy
 **
µªv
,

32 
hashm≠_íåy
 *
íåy
)

34 *
µªv
 = 
íåy
->
√xt
;

35 
íåy
->
√xt
 = 
NULL
;

36 
	}
}

38 
	$hashm≠__öô
(
hashm≠
 *
m≠
, 
hashm≠_hash_‚
 
hash_‚
,

39 
hashm≠_equÆ_‚
 
equÆ_‚
, *
˘x
)

41 
m≠
->
hash_‚
 = hash_fn;

42 
m≠
->
equÆ_‚
 =Équal_fn;

43 
m≠
->
˘x
 = ctx;

45 
m≠
->
buckës
 = 
NULL
;

46 
m≠
->
ˇp
 = 0;

47 
m≠
->
ˇp_bôs
 = 0;

48 
m≠
->
sz
 = 0;

49 
	}
}

51 
hashm≠
 *
	$hashm≠__√w
(
hashm≠_hash_‚
 
hash_‚
,

52 
hashm≠_equÆ_‚
 
equÆ_‚
,

53 *
˘x
)

55 
hashm≠
 *
m≠
 = 
	`mÆloc
((hashmap));

57 i‡(!
m≠
)

58  
	`ERR_PTR
(-
ENOMEM
);

59 
	`hashm≠__öô
(
m≠
, 
hash_‚
, 
equÆ_‚
, 
˘x
);

60  
m≠
;

61 
	}
}

63 
	$hashm≠__˛ór
(
hashm≠
 *
m≠
)

65 
hashm≠_íåy
 *
cur
, *
tmp
;

66 
size_t
 
bkt
;

68 
	`hashm≠__f‹_óch_íåy_ß„
(
m≠
, 
cur
, 
tmp
, 
bkt
) {

69 
	`‰ì
(
cur
);

71 
	`‰ì
(
m≠
->
buckës
);

72 
m≠
->
buckës
 = 
NULL
;

73 
m≠
->
ˇp
 = m≠->
ˇp_bôs
 = m≠->
sz
 = 0;

74 
	}
}

76 
	$hashm≠__‰ì
(
hashm≠
 *
m≠
)

78 i‡(
	`IS_ERR_OR_NULL
(
m≠
))

81 
	`hashm≠__˛ór
(
m≠
);

82 
	`‰ì
(
m≠
);

83 
	}
}

85 
size_t
 
	$hashm≠__size
(c⁄° 
hashm≠
 *
m≠
)

87  
m≠
->
sz
;

88 
	}
}

90 
size_t
 
	$hashm≠__ˇ∑côy
(c⁄° 
hashm≠
 *
m≠
)

92  
m≠
->
ˇp
;

93 
	}
}

95 
boﬁ
 
	$hashm≠_√eds_to_grow
(
hashm≠
 *
m≠
)

98  (
m≠
->
ˇp
 =0Ë|| ((m≠->
sz
 + 1) * 4 / 3 > map->cap);

99 
	}
}

101 
	$hashm≠_grow
(
hashm≠
 *
m≠
)

103 
hashm≠_íåy
 **
√w_buckës
;

104 
hashm≠_íåy
 *
cur
, *
tmp
;

105 
size_t
 
√w_ˇp_bôs
, 
√w_ˇp
;

106 
size_t
 
h
, 
bkt
;

108 
√w_ˇp_bôs
 = 
m≠
->
ˇp_bôs
 + 1;

109 i‡(
√w_ˇp_bôs
 < 
HASHMAP_MIN_CAP_BITS
)

110 
√w_ˇp_bôs
 = 
HASHMAP_MIN_CAP_BITS
;

112 
√w_ˇp
 = 1UL << 
√w_ˇp_bôs
;

113 
√w_buckës
 = 
	`ˇŒoc
(
√w_ˇp
, (new_buckets[0]));

114 i‡(!
√w_buckës
)

115  -
ENOMEM
;

117 
	`hashm≠__f‹_óch_íåy_ß„
(
m≠
, 
cur
, 
tmp
, 
bkt
) {

118 
h
 = 
	`hash_bôs
(
m≠
->
	`hash_‚
(
cur
->
key
, m≠->
˘x
), 
√w_ˇp_bôs
);

119 
	`hashm≠_add_íåy
(&
√w_buckës
[
h
], 
cur
);

122 
m≠
->
ˇp
 = 
√w_ˇp
;

123 
m≠
->
ˇp_bôs
 = 
√w_ˇp_bôs
;

124 
	`‰ì
(
m≠
->
buckës
);

125 
m≠
->
buckës
 = 
√w_buckës
;

128 
	}
}

130 
boﬁ
 
	$hashm≠_föd_íåy
(c⁄° 
hashm≠
 *
m≠
,

131 c⁄° *
key
, 
size_t
 
hash
,

132 
hashm≠_íåy
 ***
µªv
,

133 
hashm≠_íåy
 **
íåy
)

135 
hashm≠_íåy
 *
cur
, **
¥ev_±r
;

137 i‡(!
m≠
->
buckës
)

138  
Ál£
;

140 
¥ev_±r
 = &
m≠
->
buckës
[
hash
], 
cur
 = *prev_ptr;

141 
cur
;

142 
¥ev_±r
 = &
cur
->
√xt
, cur = cur->next) {

143 i‡(
m≠
->
	`equÆ_‚
(
cur
->
key
, key, m≠->
˘x
)) {

144 i‡(
µªv
)

145 *
µªv
 = 
¥ev_±r
;

146 *
íåy
 = 
cur
;

147  
åue
;

151  
Ál£
;

152 
	}
}

154 
	$hashm≠__ö£π
(
hashm≠
 *
m≠
, c⁄° *
key
, *
vÆue
,

155 
hashm≠_ö£π_°øãgy
 
°øãgy
,

156 c⁄° **
ﬁd_key
, **
ﬁd_vÆue
)

158 
hashm≠_íåy
 *
íåy
;

159 
size_t
 
h
;

160 
îr
;

162 i‡(
ﬁd_key
)

163 *
ﬁd_key
 = 
NULL
;

164 i‡(
ﬁd_vÆue
)

165 *
ﬁd_vÆue
 = 
NULL
;

167 
h
 = 
	`hash_bôs
(
m≠
->
	`hash_‚
(
key
, m≠->
˘x
), m≠->
ˇp_bôs
);

168 i‡(
°øãgy
 !
HASHMAP_APPEND
 &&

169 
	`hashm≠_föd_íåy
(
m≠
, 
key
, 
h
, 
NULL
, &
íåy
)) {

170 i‡(
ﬁd_key
)

171 *
ﬁd_key
 = 
íåy
->
key
;

172 i‡(
ﬁd_vÆue
)

173 *
ﬁd_vÆue
 = 
íåy
->
vÆue
;

175 i‡(
°øãgy
 =
HASHMAP_SET
 || så©egy =
HASHMAP_UPDATE
) {

176 
íåy
->
key
 = key;

177 
íåy
->
vÆue
 = value;

179 } i‡(
°øãgy
 =
HASHMAP_ADD
) {

180  -
EEXIST
;

184 i‡(
°øãgy
 =
HASHMAP_UPDATE
)

185  -
ENOENT
;

187 i‡(
	`hashm≠_√eds_to_grow
(
m≠
)) {

188 
îr
 = 
	`hashm≠_grow
(
m≠
);

189 i‡(
îr
)

190  
îr
;

191 
h
 = 
	`hash_bôs
(
m≠
->
	`hash_‚
(
key
, m≠->
˘x
), m≠->
ˇp_bôs
);

194 
íåy
 = 
	`mÆloc
((
hashm≠_íåy
));

195 i‡(!
íåy
)

196  -
ENOMEM
;

198 
íåy
->
key
 = key;

199 
íåy
->
vÆue
 = value;

200 
	`hashm≠_add_íåy
(&
m≠
->
buckës
[
h
], 
íåy
);

201 
m≠
->
sz
++;

204 
	}
}

206 
boﬁ
 
	$hashm≠__föd
(c⁄° 
hashm≠
 *
m≠
, c⁄° *
key
, **
vÆue
)

208 
hashm≠_íåy
 *
íåy
;

209 
size_t
 
h
;

211 
h
 = 
	`hash_bôs
(
m≠
->
	`hash_‚
(
key
, m≠->
˘x
), m≠->
ˇp_bôs
);

212 i‡(!
	`hashm≠_föd_íåy
(
m≠
, 
key
, 
h
, 
NULL
, &
íåy
))

213  
Ál£
;

215 i‡(
vÆue
)

216 *
vÆue
 = 
íåy
->value;

217  
åue
;

218 
	}
}

220 
boﬁ
 
	$hashm≠__dñëe
(
hashm≠
 *
m≠
, c⁄° *
key
,

221 c⁄° **
ﬁd_key
, **
ﬁd_vÆue
)

223 
hashm≠_íåy
 **
µªv
, *
íåy
;

224 
size_t
 
h
;

226 
h
 = 
	`hash_bôs
(
m≠
->
	`hash_‚
(
key
, m≠->
˘x
), m≠->
ˇp_bôs
);

227 i‡(!
	`hashm≠_föd_íåy
(
m≠
, 
key
, 
h
, &
µªv
, &
íåy
))

228  
Ál£
;

230 i‡(
ﬁd_key
)

231 *
ﬁd_key
 = 
íåy
->
key
;

232 i‡(
ﬁd_vÆue
)

233 *
ﬁd_vÆue
 = 
íåy
->
vÆue
;

235 
	`hashm≠_dñ_íåy
(
µªv
, 
íåy
);

236 
	`‰ì
(
íåy
);

237 
m≠
->
sz
--;

239  
åue
;

240 
	}
}

	@hashmap.h

8 #i‚de‡
__LIBBPF_HASHMAP_H


9 
	#__LIBBPF_HASHMAP_H


	)

11 
	~<°dboﬁ.h
>

12 
	~<°ddef.h
>

13 
	~<limôs.h
>

15 
ölöe
 
size_t
 
	$hash_bôs
(
size_t
 
h
, 
bôs
)

18 i‡(
bôs
 == 0)

21 #i‡(
__SIZEOF_SIZE_T__
 =
__SIZEOF_LONG_LONG__
)

23  (
h
 * 11400714819323198485ŒuË>> (
__SIZEOF_LONG_LONG__
 * 8 - 
bôs
);

24 #ñi‡(
__SIZEOF_SIZE_T__
 <
__SIZEOF_LONG__
)

25  (
h
 * 2654435769luË>> (
__SIZEOF_LONG__
 * 8 - 
bôs
);

29 
	}
}

32 
ölöe
 
size_t
 
	$°r_hash
(c⁄° *
s
)

34 
size_t
 
h
 = 0;

36 *
s
) {

37 
h
 = h * 31 + *
s
;

38 
s
++;

40  
h
;

41 
	}
}

43 
	$size_t
 (*
	thashm≠_hash_‚
)(c⁄° *
	tkey
, *
	t˘x
);

44 
	$boﬁ
 (*
	thashm≠_equÆ_‚
)(c⁄° *
	tkey1
, c⁄° *
	tkey2
, *
	t˘x
);

46 
	shashm≠_íåy
 {

47 c⁄° *
key
;

48 *
vÆue
;

49 
hashm≠_íåy
 *
√xt
;

52 
	shashm≠
 {

53 
hashm≠_hash_‚
 
hash_‚
;

54 
hashm≠_equÆ_‚
 
equÆ_‚
;

55 *
˘x
;

57 
hashm≠_íåy
 **
buckës
;

58 
size_t
 
ˇp
;

59 
size_t
 
ˇp_bôs
;

60 
size_t
 
sz
;

63 
	#HASHMAP_INIT
(
hash_‚
, 
equÆ_‚
, 
˘x
) { \

64 .
hash_‚
 = (hash_fn), \

65 .
equÆ_‚
 = (equal_fn), \

66 .
˘x
 = (ctx), \

67 .
buckës
 = 
NULL
, \

68 .
ˇp
 = 0, \

69 .
ˇp_bôs
 = 0, \

70 .
sz
 = 0, \

71 
	}

	)
}

73 
hashm≠__öô
(
hashm≠
 *
m≠
, 
hashm≠_hash_‚
 
hash_‚
,

74 
hashm≠_equÆ_‚
 
equÆ_‚
, *
˘x
);

75 
hashm≠
 *
hashm≠__√w
(
hashm≠_hash_‚
 
hash_‚
,

76 
hashm≠_equÆ_‚
 
equÆ_‚
,

77 *
˘x
);

78 
hashm≠__˛ór
(
hashm≠
 *
m≠
);

79 
hashm≠__‰ì
(
hashm≠
 *
m≠
);

81 
size_t
 
hashm≠__size
(c⁄° 
hashm≠
 *
m≠
);

82 
size_t
 
hashm≠__ˇ∑côy
(c⁄° 
hashm≠
 *
m≠
);

98 
	ehashm≠_ö£π_°øãgy
 {

99 
	mHASHMAP_ADD
,

100 
	mHASHMAP_SET
,

101 
	mHASHMAP_UPDATE
,

102 
	mHASHMAP_APPEND
,

112 
hashm≠__ö£π
(
hashm≠
 *
m≠
, c⁄° *
key
, *
vÆue
,

113 
hashm≠_ö£π_°øãgy
 
°øãgy
,

114 c⁄° **
ﬁd_key
, **
ﬁd_vÆue
);

116 
ölöe
 
	$hashm≠__add
(
hashm≠
 *
m≠
,

117 c⁄° *
key
, *
vÆue
)

119  
	`hashm≠__ö£π
(
m≠
, 
key
, 
vÆue
, 
HASHMAP_ADD
, 
NULL
, NULL);

120 
	}
}

122 
ölöe
 
	$hashm≠__£t
(
hashm≠
 *
m≠
,

123 c⁄° *
key
, *
vÆue
,

124 c⁄° **
ﬁd_key
, **
ﬁd_vÆue
)

126  
	`hashm≠__ö£π
(
m≠
, 
key
, 
vÆue
, 
HASHMAP_SET
,

127 
ﬁd_key
, 
ﬁd_vÆue
);

128 
	}
}

130 
ölöe
 
	$hashm≠__upd©e
(
hashm≠
 *
m≠
,

131 c⁄° *
key
, *
vÆue
,

132 c⁄° **
ﬁd_key
, **
ﬁd_vÆue
)

134  
	`hashm≠__ö£π
(
m≠
, 
key
, 
vÆue
, 
HASHMAP_UPDATE
,

135 
ﬁd_key
, 
ﬁd_vÆue
);

136 
	}
}

138 
ölöe
 
	$hashm≠__≠≥nd
(
hashm≠
 *
m≠
,

139 c⁄° *
key
, *
vÆue
)

141  
	`hashm≠__ö£π
(
m≠
, 
key
, 
vÆue
, 
HASHMAP_APPEND
, 
NULL
, NULL);

142 
	}
}

144 
boﬁ
 
hashm≠__dñëe
(
hashm≠
 *
m≠
, c⁄° *
key
,

145 c⁄° **
ﬁd_key
, **
ﬁd_vÆue
);

147 
boﬁ
 
hashm≠__föd
(c⁄° 
hashm≠
 *
m≠
, c⁄° *
key
, **
vÆue
);

155 
	#hashm≠__f‹_óch_íåy
(
m≠
, 
cur
, 
bkt
) \

156 
bkt
 = 0; bkà< 
m≠
->
ˇp
; bkt++) \

157 
cur
 = 
m≠
->
buckës
[
bkt
]; cur; cu∏cur->
√xt
)

	)

167 
	#hashm≠__f‹_óch_íåy_ß„
(
m≠
, 
cur
, 
tmp
, 
bkt
) \

168 
bkt
 = 0; bkà< 
m≠
->
ˇp
; bkt++) \

169 
cur
 = 
m≠
->
buckës
[
bkt
]; \

170 
cur
 && ({
tmp
 = cur->
√xt
; 
åue
; }); \

171 
cur
 = 
tmp
)

	)

179 
	#hashm≠__f‹_óch_key_íåy
(
m≠
, 
cur
, 
_key
) \

180 
cur
 = 
m≠
->
buckës
 \

181 ? 
m≠
->
buckës
[
	`hash_bôs
(m≠->
	`hash_‚
((
_key
), m≠->
˘x
), m≠->
ˇp_bôs
)] \

182 : 
NULL
; \

183 
cur
; \

184 
cur
 = cur->
√xt
) \

185 i‡(
m≠
->
	`equÆ_‚
(
cur
->
key
, (
_key
), m≠->
˘x
))

	)

187 
	#hashm≠__f‹_óch_key_íåy_ß„
(
m≠
, 
cur
, 
tmp
, 
_key
) \

188 
cur
 = 
m≠
->
buckës
 \

189 ? 
m≠
->
buckës
[
	`hash_bôs
(m≠->
	`hash_‚
((
_key
), m≠->
˘x
), m≠->
ˇp_bôs
)] \

190 : 
NULL
; \

191 
cur
 && ({ 
tmp
 = cur->
√xt
; 
åue
; }); \

192 
cur
 = 
tmp
) \

193 i‡(
m≠
->
	`equÆ_‚
(
cur
->
key
, (
_key
), m≠->
˘x
))

	)

	@libbpf.c

13 #i‚de‡
_GNU_SOURCE


14 
	#_GNU_SOURCE


	)

16 
	~<°dlib.h
>

17 
	~<°dio.h
>

18 
	~<°d¨g.h
>

19 
	~<libgí.h
>

20 
	~<öây≥s.h
>

21 
	~<limôs.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

24 
	~<ídün.h
>

25 
	~<f˙é.h
>

26 
	~<î∫o.h
>

27 
	~<˘y≥.h
>

28 
	~<asm/uni°d.h
>

29 
	~<löux/îr.h
>

30 
	~<löux/kî√l.h
>

31 
	~<löux/bpf.h
>

32 
	~<löux/btf.h
>

33 
	~<löux/fûãr.h
>

34 
	~<löux/li°.h
>

35 
	~<löux/limôs.h
>

36 
	~<löux/≥rf_evít.h
>

37 
	~<löux/rög_buf„r.h
>

38 
	~<löux/vîsi⁄.h
>

39 
	~<sys/ïﬁl.h
>

40 
	~<sys/io˘l.h
>

41 
	~<sys/mm™.h
>

42 
	~<sys/°©.h
>

43 
	~<sys/ty≥s.h
>

44 
	~<sys/vfs.h
>

45 
	~<sys/ut¢ame.h
>

46 
	~<sys/ªsour˚.h
>

47 
	~<libñf.h
>

48 
	~<gñf.h
>

49 
	~<zlib.h
>

51 
	~"libbpf.h
"

52 
	~"bpf.h
"

53 
	~"btf.h
"

54 
	~"°r_îr‹.h
"

55 
	~"libbpf_öã∫Æ.h
"

56 
	~"hashm≠.h
"

57 
	~"bpf_gí_öã∫Æ.h
"

59 #i‚de‡
BPF_FS_MAGIC


60 
	#BPF_FS_MAGIC
 0xˇ„4a11

	)

63 
	#BPF_INSN_SZ
 ((
bpf_ö¢
))

	)

68 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wformat-nonliteral"

70 
	#__¥ötf
(
a
, 
b
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,á, b)))

	)

72 
bpf_m≠
 *
bpf_obje˘__add_m≠
(
bpf_obje˘
 *
obj
);

73 
boﬁ
 
¥og_is_sub¥og
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° 
bpf_¥ogøm
 *
¥og
);

75 
	$__ba£_¥
(
libbpf_¥öt_Àvñ
 
Àvñ
, c⁄° *
f‹m©
,

76 
va_li°
 
¨gs
)

78 i‡(
Àvñ
 =
LIBBPF_DEBUG
)

81  
	`vÂrötf
(
°dîr
, 
f‹m©
, 
¨gs
);

82 
	}
}

84 
libbpf_¥öt_‚_t
 
	g__libbpf_¥
 = 
__ba£_¥
;

86 
libbpf_¥öt_‚_t
 
	$libbpf_£t_¥öt
(
libbpf_¥öt_‚_t
 
‚
)

88 
libbpf_¥öt_‚_t
 
ﬁd_¥öt_‚
 = 
__libbpf_¥
;

90 
__libbpf_¥
 = 
‚
;

91  
ﬁd_¥öt_‚
;

92 
	}
}

94 
	$__¥ötf
(2, 3)

95 
	$libbpf_¥öt
(
libbpf_¥öt_Àvñ
 
Àvñ
, c⁄° *
f‹m©
, ...)

97 
va_li°
 
¨gs
;

99 i‡(!
__libbpf_¥
)

102 
	`va_°¨t
(
¨gs
, 
f‹m©
);

103 
	`__libbpf_¥
(
Àvñ
, 
f‹m©
, 
¨gs
);

104 
	`va_íd
(
¨gs
);

105 
	}
}

107 
	$¥_≥rm_msg
(
îr
)

109 
æimô
 
limô
;

110 
buf
[100];

112 i‡(
îr
 !-
EPERM
 || 
	`gëeuid
() != 0)

115 
îr
 = 
	`gëæimô
(
RLIMIT_MEMLOCK
, &
limô
);

116 i‡(
îr
)

119 i‡(
limô
.
æim_cur
 =
RLIM_INFINITY
)

122 i‡(
limô
.
æim_cur
 < 1024)

123 
	`¢¥ötf
(
buf
, (buf), "%zu byãs", (
size_t
)
limô
.
æim_cur
);

124 i‡(
limô
.
æim_cur
 < 1024*1024)

125 
	`¢¥ötf
(
buf
, (buf), "%.1‡KiB", ()
limô
.
æim_cur
 / 1024);

127 
	`¢¥ötf
(
buf
, (buf), "%.1‡MiB", ()
limô
.
æim_cur
 / (1024*1024));

129 
	`¥_w¨n
("permissionÉrror whileÑunningásÑoot;ÅryÑaising 'ulimit -l'? current value: %s\n",

130 
buf
);

131 
	}
}

133 
	#STRERR_BUFSIZE
 128

	)

136 #i‚de‡
z‰ì


137 
	#z‰ì
(
±r
Ë({ 
	`‰ì
(*±r); *±∏
NULL
; })

	)

140 #i‚de‡
z˛o£


141 
	#z˛o£
(
fd
) ({ \

142 
___îr
 = 0; \

143 i‡((
fd
) >= 0) \

144 
___îr
 = 
	`˛o£
((
fd
)); \

145 
fd
 = -1; \

146 
___îr
; })

	)

149 
ölöe
 
__u64
 
	$±r_to_u64
(c⁄° *
±r
)

151  (
__u64
Ë(Ë
±r
;

152 
	}
}

155 
libbpf_°ri˘_mode
 
	glibbpf_mode
 = 
LIBBPF_STRICT_NONE
;

157 
	$libbpf_£t_°ri˘_mode
(
libbpf_°ri˘_mode
 
mode
)

159 
libbpf_mode
 = 
mode
;

161 
	}
}

163 
__u32
 
	$libbpf_maj‹_vîsi⁄
()

165  
LIBBPF_MAJOR_VERSION
;

166 
	}
}

168 
__u32
 
	$libbpf_mö‹_vîsi⁄
()

170  
LIBBPF_MINOR_VERSION
;

171 
	}
}

173 c⁄° *
	$libbpf_vîsi⁄_°rög
()

175 
	#__S
(
X
Ë#X

	)

176 
	#_S
(
X
Ë
	`__S
(X)

	)

177  "v" 
	`_S
(
LIBBPF_MAJOR_VERSION
Ë"." _S(
LIBBPF_MINOR_VERSION
);

178 #unde‡
_S


179 #unde‡
__S


180 
	}
}

182 
	eªloc_ty≥
 {

183 
	mRELO_LD64
,

184 
	mRELO_CALL
,

185 
	mRELO_DATA
,

186 
	mRELO_EXTERN_VAR
,

187 
	mRELO_EXTERN_FUNC
,

188 
	mRELO_SUBPROG_ADDR
,

189 
	mRELO_CORE
,

192 
	sªloc_desc
 {

193 
ªloc_ty≥
 
	mty≥
;

194 
	mö¢_idx
;

196 c⁄° 
bpf_c‹e_ªlo
 *
	mc‹e_ªlo
;

198 
	mm≠_idx
;

199 
	msym_off
;

205 
	e£c_def_Êags
 {

206 
	mSEC_NONE
 = 0,

208 
	mSEC_EXP_ATTACH_OPT
 = 1,

215 
	mSEC_ATTACHABLE
 = 2,

216 
	mSEC_ATTACHABLE_OPT
 = 
SEC_ATTACHABLE
 | 
SEC_EXP_ATTACH_OPT
,

219 
	mSEC_ATTACH_BTF
 = 4,

221 
	mSEC_SLEEPABLE
 = 8,

223 
	mSEC_SLOPPY_PFX
 = 16,

225 
	mSEC_XDP_FRAGS
 = 32,

227 
	mSEC_DEPRECATED
 = 64,

230 
	sbpf_£c_def
 {

231 *
	m£c
;

232 
bpf_¥og_ty≥
 
	m¥og_ty≥
;

233 
bpf_©èch_ty≥
 
	mex≥˘ed_©èch_ty≥
;

234 
	mcookõ
;

235 
	mh™dÀr_id
;

237 
libbpf_¥og_£tup_‚_t
 
	m¥og_£tup_‚
;

238 
libbpf_¥og_¥ï¨e_lﬂd_‚_t
 
	m¥og_¥ï¨e_lﬂd_‚
;

239 
libbpf_¥og_©èch_‚_t
 
	m¥og_©èch_‚
;

246 
	sbpf_¥ogøm
 {

247 c⁄° 
bpf_£c_def
 *
	m£c_def
;

248 *
	m£c_«me
;

249 
size_t
 
	m£c_idx
;

253 
size_t
 
	m£c_ö¢_off
;

258 
size_t
 
	m£c_ö¢_˙t
;

267 
size_t
 
	msub_ö¢_off
;

269 *
	m«me
;

273 *
	mpö_«me
;

280 
bpf_ö¢
 *
	mö¢s
;

285 
size_t
 
	mö¢s_˙t
;

287 
ªloc_desc
 *
	mªloc_desc
;

288 
	mƒ_ªloc
;

291 *
	mlog_buf
;

292 
size_t
 
	mlog_size
;

293 
__u32
 
	mlog_Àvñ
;

296 
	mƒ
;

297 *
	mfds
;

298 } 
	mö°™˚s
;

299 
bpf_¥ogøm_¥ï_t
 
	m¥ïro˚ss‹
;

301 
bpf_obje˘
 *
	mobj
;

302 *
	m¥iv
;

303 
bpf_¥ogøm_˛ór_¥iv_t
 
	m˛ór_¥iv
;

305 
boﬁ
 
	mautﬁﬂd
;

306 
boﬁ
 
	mm¨k_btf_°©ic
;

307 
bpf_¥og_ty≥
 
	mty≥
;

308 
bpf_©èch_ty≥
 
	mex≥˘ed_©èch_ty≥
;

309 
	m¥og_ifödex
;

310 
__u32
 
	m©èch_btf_obj_fd
;

311 
__u32
 
	m©èch_btf_id
;

312 
__u32
 
	m©èch_¥og_fd
;

313 *
	mfunc_öfo
;

314 
__u32
 
	mfunc_öfo_ªc_size
;

315 
__u32
 
	mfunc_öfo_˙t
;

317 *
	mlöe_öfo
;

318 
__u32
 
	mlöe_öfo_ªc_size
;

319 
__u32
 
	mlöe_öfo_˙t
;

320 
__u32
 
	m¥og_Êags
;

323 
	sbpf_°ru˘_›s
 {

324 c⁄° *
	mäame
;

325 c⁄° 
btf_ty≥
 *
	mty≥
;

326 
bpf_¥ogøm
 **
	m¥ogs
;

327 
__u32
 *
	mkîn_func_off
;

329 *
	md©a
;

340 *
	mkîn_vd©a
;

341 
__u32
 
	mty≥_id
;

344 
	#DATA_SEC
 ".d©a"

	)

345 
	#BSS_SEC
 ".bss"

	)

346 
	#RODATA_SEC
 ".rod©a"

	)

347 
	#KCONFIG_SEC
 ".kc⁄fig"

	)

348 
	#KSYMS_SEC
 ".ksyms"

	)

349 
	#STRUCT_OPS_SEC
 ".°ru˘_›s"

	)

351 
	elibbpf_m≠_ty≥
 {

352 
	mLIBBPF_MAP_UNSPEC
,

353 
	mLIBBPF_MAP_DATA
,

354 
	mLIBBPF_MAP_BSS
,

355 
	mLIBBPF_MAP_RODATA
,

356 
	mLIBBPF_MAP_KCONFIG
,

359 
	sbpf_m≠
 {

360 
bpf_obje˘
 *
	mobj
;

361 *
	m«me
;

367 *
	mªÆ_«me
;

368 
	mfd
;

369 
	m£c_idx
;

370 
size_t
 
	m£c_off£t
;

371 
	mm≠_ifödex
;

372 
	mö√r_m≠_fd
;

373 
bpf_m≠_def
 
	mdef
;

374 
__u32
 
	mnuma_node
;

375 
__u32
 
	mbtf_v¨_idx
;

376 
__u32
 
	mbtf_key_ty≥_id
;

377 
__u32
 
	mbtf_vÆue_ty≥_id
;

378 
__u32
 
	mbtf_vmlöux_vÆue_ty≥_id
;

379 *
	m¥iv
;

380 
bpf_m≠_˛ór_¥iv_t
 
	m˛ór_¥iv
;

381 
libbpf_m≠_ty≥
 
	mlibbpf_ty≥
;

382 *
	mmm≠ed
;

383 
bpf_°ru˘_›s
 *
	m°_›s
;

384 
bpf_m≠
 *
	mö√r_m≠
;

385 **
	möô_¶Ÿs
;

386 
	möô_¶Ÿs_sz
;

387 *
	mpö_∑th
;

388 
boﬁ
 
	mpö√d
;

389 
boﬁ
 
	mªu£d
;

390 
boﬁ
 
	mauto¸óã
;

391 
__u64
 
	mm≠_exåa
;

394 
	eexã∫_ty≥
 {

395 
	mEXT_UNKNOWN
,

396 
	mEXT_KCFG
,

397 
	mEXT_KSYM
,

400 
	ekcfg_ty≥
 {

401 
	mKCFG_UNKNOWN
,

402 
	mKCFG_CHAR
,

403 
	mKCFG_BOOL
,

404 
	mKCFG_INT
,

405 
	mKCFG_TRISTATE
,

406 
	mKCFG_CHAR_ARR
,

409 
	sexã∫_desc
 {

410 
exã∫_ty≥
 
	mty≥
;

411 
	msym_idx
;

412 
	mbtf_id
;

413 
	m£c_btf_id
;

414 c⁄° *
	m«me
;

415 
boﬁ
 
	mis_£t
;

416 
boﬁ
 
	mis_wók
;

419 
kcfg_ty≥
 
	mty≥
;

420 
	msz
;

421 
	mÆign
;

422 
	md©a_off
;

423 
boﬁ
 
	mis_sig√d
;

424 } 
	mkcfg
;

426 
	maddr
;

429 
	mkî√l_btf_obj_fd
;

430 
	mkî√l_btf_id
;

433 
__u32
 
	mty≥_id
;

438 
__s16
 
	mbtf_fd_idx
;

439 } 
	mksym
;

443 
LIST_HEAD
(
bpf_obje˘s_li°
);

445 
	smoduÀ_btf
 {

446 
btf
 *
	mbtf
;

447 *
	m«me
;

448 
__u32
 
	mid
;

449 
	mfd
;

450 
	mfd_¨øy_idx
;

453 
	e£c_ty≥
 {

454 
	mSEC_UNUSED
 = 0,

455 
	mSEC_RELO
,

456 
	mSEC_BSS
,

457 
	mSEC_DATA
,

458 
	mSEC_RODATA
,

461 
	sñf_£c_desc
 {

462 
£c_ty≥
 
	m£c_ty≥
;

463 
Elf64_Shdr
 *
	mshdr
;

464 
Elf_D©a
 *
	md©a
;

467 
	sñf_°©e
 {

468 
	mfd
;

469 c⁄° *
	mobj_buf
;

470 
size_t
 
	mobj_buf_sz
;

471 
Elf
 *
	mñf
;

472 
Elf64_Ehdr
 *
	mehdr
;

473 
Elf_D©a
 *
	msymbﬁs
;

474 
Elf_D©a
 *
	m°_›s_d©a
;

475 
size_t
 
	msh°∫dx
;

476 
size_t
 
	m°πabidx
;

477 
ñf_£c_desc
 *
	m£cs
;

478 
	m£c_˙t
;

479 
	mm≠s_shndx
;

480 
	mbtf_m≠s_shndx
;

481 
__u32
 
	mbtf_m≠s_£c_btf_id
;

482 
	mãxt_shndx
;

483 
	msymbﬁs_shndx
;

484 
	m°_›s_shndx
;

487 
	gusdt_m™agî
;

489 
	sbpf_obje˘
 {

490 
	m«me
[
BPF_OBJ_NAME_LEN
];

491 
	mli˚n£
[64];

492 
__u32
 
	mkîn_vîsi⁄
;

494 
bpf_¥ogøm
 *
	m¥ogøms
;

495 
size_t
 
	mƒ_¥ogøms
;

496 
bpf_m≠
 *
	mm≠s
;

497 
size_t
 
	mƒ_m≠s
;

498 
size_t
 
	mm≠s_ˇp
;

500 *
	mkc⁄fig
;

501 
exã∫_desc
 *
	mexã∫s
;

502 
	mƒ_exã∫
;

503 
	mkc⁄fig_m≠_idx
;

505 
boﬁ
 
	mlﬂded
;

506 
boﬁ
 
	mhas_subˇŒs
;

507 
boﬁ
 
	mhas_rod©a
;

509 
bpf_gí
 *
	mgí_lﬂdî
;

512 
ñf_°©e
 
	mefûe
;

518 
li°_hód
 
	mli°
;

520 
btf
 *
	mbtf
;

521 
btf_ext
 *
	mbtf_ext
;

526 
btf
 *
	mbtf_vmlöux
;

530 *
	mbtf_cu°om_∑th
;

532 
btf
 *
	mbtf_vmlöux_ovîride
;

534 
moduÀ_btf
 *
	mbtf_moduÀs
;

535 
boﬁ
 
	mbtf_moduÀs_lﬂded
;

536 
size_t
 
	mbtf_moduÀ_˙t
;

537 
size_t
 
	mbtf_moduÀ_ˇp
;

540 *
	mlog_buf
;

541 
size_t
 
	mlog_size
;

542 
__u32
 
	mlog_Àvñ
;

544 *
	m¥iv
;

545 
bpf_obje˘_˛ór_¥iv_t
 
	m˛ór_¥iv
;

547 *
	mfd_¨øy
;

548 
size_t
 
	mfd_¨øy_ˇp
;

549 
size_t
 
	mfd_¨øy_˙t
;

551 
usdt_m™agî
 *
	musdt_m™
;

553 
	m∑th
[];

556 c⁄° *
ñf_sym_°r
(c⁄° 
bpf_obje˘
 *
obj
, 
size_t
 
off
);

557 c⁄° *
ñf_£c_°r
(c⁄° 
bpf_obje˘
 *
obj
, 
size_t
 
off
);

558 
Elf_S˙
 *
ñf_£c_by_idx
(c⁄° 
bpf_obje˘
 *
obj
, 
size_t
 
idx
);

559 
Elf_S˙
 *
ñf_£c_by_«me
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° *
«me
);

560 
Elf64_Shdr
 *
ñf_£c_hdr
(c⁄° 
bpf_obje˘
 *
obj
, 
Elf_S˙
 *
s˙
);

561 c⁄° *
ñf_£c_«me
(c⁄° 
bpf_obje˘
 *
obj
, 
Elf_S˙
 *
s˙
);

562 
Elf_D©a
 *
ñf_£c_d©a
(c⁄° 
bpf_obje˘
 *
obj
, 
Elf_S˙
 *
s˙
);

563 
Elf64_Sym
 *
ñf_sym_by_idx
(c⁄° 
bpf_obje˘
 *
obj
, 
size_t
 
idx
);

564 
Elf64_Rñ
 *
ñf_ªl_by_idx
(
Elf_D©a
 *
d©a
, 
size_t
 
idx
);

566 
	$bpf_¥ogøm__u∆ﬂd
(
bpf_¥ogøm
 *
¥og
)

568 
i
;

570 i‡(!
¥og
)

577 i‡(
¥og
->
ö°™˚s
.
ƒ
 > 0) {

578 
i
 = 0; i < 
¥og
->
ö°™˚s
.
ƒ
; i++)

579 
	`z˛o£
(
¥og
->
ö°™˚s
.
fds
[
i
]);

580 } i‡(
¥og
->
ö°™˚s
.
ƒ
 != -1) {

581 
	`¥_w¨n
("InternalÉrror: instances.nr is %d\n",

582 
¥og
->
ö°™˚s
.
ƒ
);

585 
¥og
->
ö°™˚s
.
ƒ
 = -1;

586 
	`z‰ì
(&
¥og
->
ö°™˚s
.
fds
);

588 
	`z‰ì
(&
¥og
->
func_öfo
);

589 
	`z‰ì
(&
¥og
->
löe_öfo
);

590 
	}
}

592 
	$bpf_¥ogøm__exô
(
bpf_¥ogøm
 *
¥og
)

594 i‡(!
¥og
)

597 i‡(
¥og
->
˛ór_¥iv
)

598 
¥og
->
	`˛ór_¥iv
’rog,Örog->
¥iv
);

600 
¥og
->
¥iv
 = 
NULL
;

601 
¥og
->
˛ór_¥iv
 = 
NULL
;

603 
	`bpf_¥ogøm__u∆ﬂd
(
¥og
);

604 
	`z‰ì
(&
¥og
->
«me
);

605 
	`z‰ì
(&
¥og
->
£c_«me
);

606 
	`z‰ì
(&
¥og
->
pö_«me
);

607 
	`z‰ì
(&
¥og
->
ö¢s
);

608 
	`z‰ì
(&
¥og
->
ªloc_desc
);

610 
¥og
->
ƒ_ªloc
 = 0;

611 
¥og
->
ö¢s_˙t
 = 0;

612 
¥og
->
£c_idx
 = -1;

613 
	}
}

615 *
	$__bpf_¥ogøm__pö_«me
(
bpf_¥ogøm
 *
¥og
)

617 *
«me
, *
p
;

619 i‡(
libbpf_mode
 & 
LIBBPF_STRICT_SEC_NAME
)

620 
«me
 = 
	`°rdup
(
¥og
->name);

622 
«me
 = 
	`°rdup
(
¥og
->
£c_«me
);

624 i‡(!
«me
)

625  
NULL
;

627 
p
 = 
«me
;

629 (
p
 = 
	`°rchr
(p, '/')))

630 *
p
 = '_';

632  
«me
;

633 
	}
}

635 
boﬁ
 
	$ö¢_is_sub¥og_ˇŒ
(c⁄° 
bpf_ö¢
 *
ö¢
)

637  
	`BPF_CLASS
(
ö¢
->
code
Ë=
BPF_JMP
 &&

638 
	`BPF_OP
(
ö¢
->
code
Ë=
BPF_CALL
 &&

639 
	`BPF_SRC
(
ö¢
->
code
Ë=
BPF_K
 &&

640 
ö¢
->
§c_ªg
 =
BPF_PSEUDO_CALL
 &&

641 
ö¢
->
d°_ªg
 == 0 &&

642 
ö¢
->
off
 == 0;

643 
	}
}

645 
boﬁ
 
	$is_ˇŒ_ö¢
(c⁄° 
bpf_ö¢
 *
ö¢
)

647  
ö¢
->
code
 =(
BPF_JMP
 | 
BPF_CALL
);

648 
	}
}

650 
boﬁ
 
	$ö¢_is_p£udo_func
(
bpf_ö¢
 *
ö¢
)

652  
	`is_ldimm64_ö¢
(
ö¢
Ë&& in¢->
§c_ªg
 =
BPF_PSEUDO_FUNC
;

653 
	}
}

656 
	$bpf_obje˘__öô_¥og
(
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
¥og
,

657 c⁄° *
«me
, 
size_t
 
£c_idx
, c⁄° *
£c_«me
,

658 
size_t
 
£c_off
, *
ö¢_d©a
, size_à
ö¢_d©a_sz
)

660 i‡(
ö¢_d©a_sz
 =0 || in¢_d©a_sz % 
BPF_INSN_SZ
 || 
£c_off
 % BPF_INSN_SZ) {

661 
	`¥_w¨n
("sec '%s': corruptedÖrogram '%s', offset %zu, size %zu\n",

662 
£c_«me
, 
«me
, 
£c_off
, 
ö¢_d©a_sz
);

663  -
EINVAL
;

666 
	`mem£t
(
¥og
, 0, (*prog));

667 
¥og
->
obj
 = obj;

669 
¥og
->
£c_idx
 = sec_idx;

670 
¥og
->
£c_ö¢_off
 = 
£c_off
 / 
BPF_INSN_SZ
;

671 
¥og
->
£c_ö¢_˙t
 = 
ö¢_d©a_sz
 / 
BPF_INSN_SZ
;

673 
¥og
->
ö¢s_˙t
 =Örog->
£c_ö¢_˙t
;

675 
¥og
->
ty≥
 = 
BPF_PROG_TYPE_UNSPEC
;

681 i‡(
£c_«me
[0] == '?') {

682 
¥og
->
autﬁﬂd
 = 
Ál£
;

684 
£c_«me
++;

686 
¥og
->
autﬁﬂd
 = 
åue
;

689 
¥og
->
ö°™˚s
.
fds
 = 
NULL
;

690 
¥og
->
ö°™˚s
.
ƒ
 = -1;

693 
¥og
->
log_Àvñ
 = 
obj
->log_level;

695 
¥og
->
£c_«me
 = 
	`°rdup
(sec_name);

696 i‡(!
¥og
->
£c_«me
)

697 
îrout
;

699 
¥og
->
«me
 = 
	`°rdup
(name);

700 i‡(!
¥og
->
«me
)

701 
îrout
;

703 
¥og
->
pö_«me
 = 
	`__bpf_¥ogøm__pö_«me
(prog);

704 i‡(!
¥og
->
pö_«me
)

705 
îrout
;

707 
¥og
->
ö¢s
 = 
	`mÆloc
(
ö¢_d©a_sz
);

708 i‡(!
¥og
->
ö¢s
)

709 
îrout
;

710 
	`mem˝y
(
¥og
->
ö¢s
, 
ö¢_d©a
, 
ö¢_d©a_sz
);

713 
îrout
:

714 
	`¥_w¨n
("£¯'%s': faûedÅÿÆloˇã mem‹y f‹Örog '%s'\n", 
£c_«me
, 
«me
);

715 
	`bpf_¥ogøm__exô
(
¥og
);

716  -
ENOMEM
;

717 
	}
}

720 
	$bpf_obje˘__add_¥ogøms
(
bpf_obje˘
 *
obj
, 
Elf_D©a
 *
£c_d©a
,

721 c⁄° *
£c_«me
, 
£c_idx
)

723 
Elf_D©a
 *
symbﬁs
 = 
obj
->
efûe
.symbols;

724 
bpf_¥ogøm
 *
¥og
, *
¥ogs
;

725 *
d©a
 = 
£c_d©a
->
d_buf
;

726 
size_t
 
£c_sz
 = 
£c_d©a
->
d_size
, 
£c_off
, 
¥og_sz
, 
ƒ_syms
;

727 
ƒ_¥ogs
, 
îr
, 
i
;

728 c⁄° *
«me
;

729 
Elf64_Sym
 *
sym
;

731 
¥ogs
 = 
obj
->
¥ogøms
;

732 
ƒ_¥ogs
 = 
obj
->
ƒ_¥ogøms
;

733 
ƒ_syms
 = 
symbﬁs
->
d_size
 / (
Elf64_Sym
);

734 
£c_off
 = 0;

736 
i
 = 0; i < 
ƒ_syms
; i++) {

737 
sym
 = 
	`ñf_sym_by_idx
(
obj
, 
i
);

739 i‡(
sym
->
°_shndx
 !
£c_idx
)

741 i‡(
	`ELF64_ST_TYPE
(
sym
->
°_öfo
Ë!
STT_FUNC
)

744 
¥og_sz
 = 
sym
->
°_size
;

745 
£c_off
 = 
sym
->
°_vÆue
;

747 
«me
 = 
	`ñf_sym_°r
(
obj
, 
sym
->
°_«me
);

748 i‡(!
«me
) {

749 
	`¥_w¨n
("sec '%s': failedÅo get symbolÇame for offset %zu\n",

750 
£c_«me
, 
£c_off
);

751  -
LIBBPF_ERRNO__FORMAT
;

754 i‡(
£c_off
 + 
¥og_sz
 > 
£c_sz
) {

755 
	`¥_w¨n
("sec '%s':Örogramát offset %zu crosses section boundary\n",

756 
£c_«me
, 
£c_off
);

757  -
LIBBPF_ERRNO__FORMAT
;

760 i‡(
£c_idx
 !
obj
->
efûe
.
ãxt_shndx
 && 
	`ELF64_ST_BIND
(
sym
->
°_öfo
Ë=
STB_LOCAL
) {

761 
	`¥_w¨n
("£¯'%s':Örogøm '%s' i†°©i¯™dÇŸ suµ‹ãd\n", 
£c_«me
, 
«me
);

762  -
ENOTSUP
;

765 
	`¥_debug
("sec '%s': foundÖrogram '%s'át insn offset %zu (%zu bytes), code size %zu insns (%zu bytes)\n",

766 
£c_«me
, 
«me
, 
£c_off
 / 
BPF_INSN_SZ
, sec_off, 
¥og_sz
 / BPF_INSN_SZ,Örog_sz);

768 
¥ogs
 = 
	`libbpf_ªÆloˇºay
’rogs, 
ƒ_¥ogs
 + 1, (*progs));

769 i‡(!
¥ogs
) {

775 
	`¥_w¨n
("sec '%s': failedÅoálloc memory forÇewÖrogram '%s'\n",

776 
£c_«me
, 
«me
);

777  -
ENOMEM
;

779 
obj
->
¥ogøms
 = 
¥ogs
;

781 
¥og
 = &
¥ogs
[
ƒ_¥ogs
];

783 
îr
 = 
	`bpf_obje˘__öô_¥og
(
obj
, 
¥og
, 
«me
, 
£c_idx
, 
£c_«me
,

784 
£c_off
, 
d©a
 + sec_off, 
¥og_sz
);

785 i‡(
îr
)

786  
îr
;

793 i‡(
	`ELF64_ST_BIND
(
sym
->
°_öfo
Ë!
STB_LOCAL


794 && (
	`ELF64_ST_VISIBILITY
(
sym
->
°_Ÿhî
Ë=
STV_HIDDEN


795 || 
	`ELF64_ST_VISIBILITY
(
sym
->
°_Ÿhî
Ë=
STV_INTERNAL
))

796 
¥og
->
m¨k_btf_°©ic
 = 
åue
;

798 
ƒ_¥ogs
++;

799 
obj
->
ƒ_¥ogøms
 = 
ƒ_¥ogs
;

803 
	}
}

805 
__u32
 
	$gë_kî√l_vîsi⁄
()

817 c⁄° *
ubu¡u_kvî_fûe
 = "/proc/version_signature";

818 
__u32
 
maj‹
, 
mö‹
, 
∑tch
;

819 
ut¢ame
 
öfo
;

821 i‡(
	`ac˚ss
(
ubu¡u_kvî_fûe
, 
R_OK
) == 0) {

822 
FILE
 *
f
;

824 
f
 = 
	`f›í
(
ubu¡u_kvî_fûe
, "r");

825 i‡(
f
) {

826 i‡(
	`fsˇnf
(
f
, "%*†%*†%d.%d.%d\n", &
maj‹
, &
mö‹
, &
∑tch
) == 3) {

827 
	`f˛o£
(
f
);

828  
	`KERNEL_VERSION
(
maj‹
, 
mö‹
, 
∑tch
);

830 
	`f˛o£
(
f
);

835 
	`u«me
(&
öfo
);

836 i‡(
	`ssˇnf
(
öfo
.
ªÀa£
, "%u.%u.%u", &
maj‹
, &
mö‹
, &
∑tch
) != 3)

838  
	`KERNEL_VERSION
(
maj‹
, 
mö‹
, 
∑tch
);

839 
	}
}

841 c⁄° 
btf_membî
 *

842 
	$föd_membî_by_off£t
(c⁄° 
btf_ty≥
 *
t
, 
__u32
 
bô_off£t
)

844 
btf_membî
 *
m
;

845 
i
;

847 
i
 = 0, 
m
 = 
	`btf_membîs
(
t
); i < 
	`btf_vÀn
(t); i++, m++) {

848 i‡(
	`btf_membî_bô_off£t
(
t
, 
i
Ë=
bô_off£t
)

849  
m
;

852  
NULL
;

853 
	}
}

855 c⁄° 
btf_membî
 *

856 
	$föd_membî_by_«me
(c⁄° 
btf
 *btf, c⁄° 
btf_ty≥
 *
t
,

857 c⁄° *
«me
)

859 
btf_membî
 *
m
;

860 
i
;

862 
i
 = 0, 
m
 = 
	`btf_membîs
(
t
); i < 
	`btf_vÀn
(t); i++, m++) {

863 i‡(!
	`°rcmp
(
	`btf__«me_by_off£t
(
btf
, 
m
->
«me_off
), 
«me
))

864  
m
;

867  
NULL
;

868 
	}
}

870 
	#STRUCT_OPS_VALUE_PREFIX
 "bpf_°ru˘_›s_"

	)

871 
föd_btf_by_¥efix_köd
(c⁄° 
btf
 *btf, c⁄° *
¥efix
,

872 c⁄° *
«me
, 
__u32
 
köd
);

875 
	$föd_°ru˘_›s_kîn_ty≥s
(c⁄° 
btf
 *btf, c⁄° *
äame
,

876 c⁄° 
btf_ty≥
 **
ty≥
, 
__u32
 *
ty≥_id
,

877 c⁄° 
btf_ty≥
 **
vty≥
, 
__u32
 *
vty≥_id
,

878 c⁄° 
btf_membî
 **
d©a_membî
)

880 c⁄° 
btf_ty≥
 *
kîn_ty≥
, *
kîn_vty≥
;

881 c⁄° 
btf_membî
 *
kîn_d©a_membî
;

882 
__s32
 
kîn_vty≥_id
, 
kîn_ty≥_id
;

883 
__u32
 
i
;

885 
kîn_ty≥_id
 = 
	`btf__föd_by_«me_köd
(
btf
, 
äame
, 
BTF_KIND_STRUCT
);

886 i‡(
kîn_ty≥_id
 < 0) {

887 
	`¥_w¨n
("struct_ops init_kern: struct %s isÇot found in kernel BTF\n",

888 
äame
);

889  
kîn_ty≥_id
;

891 
kîn_ty≥
 = 
	`btf__ty≥_by_id
(
btf
, 
kîn_ty≥_id
);

898 
kîn_vty≥_id
 = 
	`föd_btf_by_¥efix_köd
(
btf
, 
STRUCT_OPS_VALUE_PREFIX
,

899 
äame
, 
BTF_KIND_STRUCT
);

900 i‡(
kîn_vty≥_id
 < 0) {

901 
	`¥_w¨n
("struct_ops init_kern: struct %s%s isÇot found in kernel BTF\n",

902 
STRUCT_OPS_VALUE_PREFIX
, 
äame
);

903  
kîn_vty≥_id
;

905 
kîn_vty≥
 = 
	`btf__ty≥_by_id
(
btf
, 
kîn_vty≥_id
);

913 
kîn_d©a_membî
 = 
	`btf_membîs
(
kîn_vty≥
);

914 
i
 = 0; i < 
	`btf_vÀn
(
kîn_vty≥
); i++, 
kîn_d©a_membî
++) {

915 i‡(
kîn_d©a_membî
->
ty≥
 =
kîn_ty≥_id
)

918 i‡(
i
 =
	`btf_vÀn
(
kîn_vty≥
)) {

919 
	`¥_w¨n
("struct_ops init_kern: struct %s data isÇot found in struct %s%s\n",

920 
äame
, 
STRUCT_OPS_VALUE_PREFIX
,Åname);

921  -
EINVAL
;

924 *
ty≥
 = 
kîn_ty≥
;

925 *
ty≥_id
 = 
kîn_ty≥_id
;

926 *
vty≥
 = 
kîn_vty≥
;

927 *
vty≥_id
 = 
kîn_vty≥_id
;

928 *
d©a_membî
 = 
kîn_d©a_membî
;

931 
	}
}

933 
boﬁ
 
	$bpf_m≠__is_°ru˘_›s
(c⁄° 
bpf_m≠
 *
m≠
)

935  
m≠
->
def
.
ty≥
 =
BPF_MAP_TYPE_STRUCT_OPS
;

936 
	}
}

939 
	$bpf_m≠__öô_kîn_°ru˘_›s
(
bpf_m≠
 *
m≠
,

940 c⁄° 
btf
 *btf,

941 c⁄° 
btf
 *
kîn_btf
)

943 c⁄° 
btf_membî
 *
membî
, *
kîn_membî
, *
kîn_d©a_membî
;

944 c⁄° 
btf_ty≥
 *
ty≥
, *
kîn_ty≥
, *
kîn_vty≥
;

945 
__u32
 
i
, 
kîn_ty≥_id
, 
kîn_vty≥_id
, 
kîn_d©a_off
;

946 
bpf_°ru˘_›s
 *
°_›s
;

947 *
d©a
, *
kîn_d©a
;

948 c⁄° *
äame
;

949 
îr
;

951 
°_›s
 = 
m≠
->st_ops;

952 
ty≥
 = 
°_›s
->type;

953 
äame
 = 
°_›s
->tname;

954 
îr
 = 
	`föd_°ru˘_›s_kîn_ty≥s
(
kîn_btf
, 
äame
,

955 &
kîn_ty≥
, &
kîn_ty≥_id
,

956 &
kîn_vty≥
, &
kîn_vty≥_id
,

957 &
kîn_d©a_membî
);

958 i‡(
îr
)

959  
îr
;

961 
	`¥_debug
("struct_ops init_kern %s:Åype_id:%u kern_type_id:%u kern_vtype_id:%u\n",

962 
m≠
->
«me
, 
°_›s
->
ty≥_id
, 
kîn_ty≥_id
, 
kîn_vty≥_id
);

964 
m≠
->
def
.
vÆue_size
 = 
kîn_vty≥
->
size
;

965 
m≠
->
btf_vmlöux_vÆue_ty≥_id
 = 
kîn_vty≥_id
;

967 
°_›s
->
kîn_vd©a
 = 
	`ˇŒoc
(1, 
kîn_vty≥
->
size
);

968 i‡(!
°_›s
->
kîn_vd©a
)

969  -
ENOMEM
;

971 
d©a
 = 
°_›s
->data;

972 
kîn_d©a_off
 = 
kîn_d©a_membî
->
off£t
 / 8;

973 
kîn_d©a
 = 
°_›s
->
kîn_vd©a
 + 
kîn_d©a_off
;

975 
membî
 = 
	`btf_membîs
(
ty≥
);

976 
i
 = 0; i < 
	`btf_vÀn
(
ty≥
); i++, 
membî
++) {

977 c⁄° 
btf_ty≥
 *
mty≥
, *
kîn_mty≥
;

978 
__u32
 
mty≥_id
, 
kîn_mty≥_id
;

979 *
md©a
, *
kîn_md©a
;

980 
__s64
 
msize
, 
kîn_msize
;

981 
__u32
 
moff
, 
kîn_moff
;

982 
__u32
 
kîn_membî_idx
;

983 c⁄° *
m«me
;

985 
m«me
 = 
	`btf__«me_by_off£t
(
btf
, 
membî
->
«me_off
);

986 
kîn_membî
 = 
	`föd_membî_by_«me
(
kîn_btf
, 
kîn_ty≥
, 
m«me
);

987 i‡(!
kîn_membî
) {

988 
	`¥_w¨n
("struct_ops init_kern %s: Cannot find member %s in kernel BTF\n",

989 
m≠
->
«me
, 
m«me
);

990  -
ENOTSUP
;

993 
kîn_membî_idx
 = 
kîn_membî
 - 
	`btf_membîs
(
kîn_ty≥
);

994 i‡(
	`btf_membî_bôfõld_size
(
ty≥
, 
i
) ||

995 
	`btf_membî_bôfõld_size
(
kîn_ty≥
, 
kîn_membî_idx
)) {

996 
	`¥_w¨n
("struct_ops init_kern %s: bitfield %s isÇot supported\n",

997 
m≠
->
«me
, 
m«me
);

998  -
ENOTSUP
;

1001 
moff
 = 
membî
->
off£t
 / 8;

1002 
kîn_moff
 = 
kîn_membî
->
off£t
 / 8;

1004 
md©a
 = 
d©a
 + 
moff
;

1005 
kîn_md©a
 = 
kîn_d©a
 + 
kîn_moff
;

1007 
mty≥
 = 
	`skù_mods_™d_ty≥defs
(
btf
, 
membî
->
ty≥
, &
mty≥_id
);

1008 
kîn_mty≥
 = 
	`skù_mods_™d_ty≥defs
(
kîn_btf
, 
kîn_membî
->
ty≥
,

1009 &
kîn_mty≥_id
);

1010 i‡(
	`BTF_INFO_KIND
(
mty≥
->
öfo
) !=

1011 
	`BTF_INFO_KIND
(
kîn_mty≥
->
öfo
)) {

1012 
	`¥_w¨n
("struct_ops init_kern %s: Unmatched memberÅype %s %u != %u(kernel)\n",

1013 
m≠
->
«me
, 
m«me
, 
	`BTF_INFO_KIND
(
mty≥
->
öfo
),

1014 
	`BTF_INFO_KIND
(
kîn_mty≥
->
öfo
));

1015  -
ENOTSUP
;

1018 i‡(
	`btf_is_±r
(
mty≥
)) {

1019 
bpf_¥ogøm
 *
¥og
;

1021 
¥og
 = 
°_›s
->
¥ogs
[
i
];

1022 i‡(!
¥og
)

1025 
kîn_mty≥
 = 
	`skù_mods_™d_ty≥defs
(
kîn_btf
,

1026 
kîn_mty≥
->
ty≥
,

1027 &
kîn_mty≥_id
);

1033 i‡(!
	`btf_is_func_¥Ÿo
(
kîn_mty≥
)) {

1034 
	`¥_w¨n
("struct_ops init_kern %s: kernel member %s isÇotá funcÖtr\n",

1035 
m≠
->
«me
, 
m«me
);

1036  -
ENOTSUP
;

1039 
¥og
->
©èch_btf_id
 = 
kîn_ty≥_id
;

1040 
¥og
->
ex≥˘ed_©èch_ty≥
 = 
kîn_membî_idx
;

1042 
°_›s
->
kîn_func_off
[
i
] = 
kîn_d©a_off
 + 
kîn_moff
;

1044 
	`¥_debug
("struct_ops init_kern %s: funcÖtr %s is setÅoÖrog %s from data(+%u)Åo kern_data(+%u)\n",

1045 
m≠
->
«me
, 
m«me
, 
¥og
->«me, 
moff
,

1046 
kîn_moff
);

1051 
msize
 = 
	`btf__ªsﬁve_size
(
btf
, 
mty≥_id
);

1052 
kîn_msize
 = 
	`btf__ªsﬁve_size
(
kîn_btf
, 
kîn_mty≥_id
);

1053 i‡(
msize
 < 0 || 
kîn_msize
 < 0 || msize != kern_msize) {

1054 
	`¥_w¨n
("struct_ops init_kern %s: Error in size of member %s: %zd != %zd(kernel)\n",

1055 
m≠
->
«me
, 
m«me
, (
ssize_t
)
msize
,

1056 (
ssize_t
)
kîn_msize
);

1057  -
ENOTSUP
;

1060 
	`¥_debug
("struct_ops init_kern %s: copy %s %u bytes from data(+%u)Åo kern_data(+%u)\n",

1061 
m≠
->
«me
, 
m«me
, ()
msize
,

1062 
moff
, 
kîn_moff
);

1063 
	`mem˝y
(
kîn_md©a
, 
md©a
, 
msize
);

1067 
	}
}

1069 
	$bpf_obje˘__öô_kîn_°ru˘_›s_m≠s
(
bpf_obje˘
 *
obj
)

1071 
bpf_m≠
 *
m≠
;

1072 
size_t
 
i
;

1073 
îr
;

1075 
i
 = 0; i < 
obj
->
ƒ_m≠s
; i++) {

1076 
m≠
 = &
obj
->
m≠s
[
i
];

1078 i‡(!
	`bpf_m≠__is_°ru˘_›s
(
m≠
))

1081 
îr
 = 
	`bpf_m≠__öô_kîn_°ru˘_›s
(
m≠
, 
obj
->
btf
,

1082 
obj
->
btf_vmlöux
);

1083 i‡(
îr
)

1084  
îr
;

1088 
	}
}

1090 
	$bpf_obje˘__öô_°ru˘_›s_m≠s
(
bpf_obje˘
 *
obj
)

1092 c⁄° 
btf_ty≥
 *
ty≥
, *
d©a£c
;

1093 c⁄° 
btf_v¨_£cöfo
 *
vsi
;

1094 
bpf_°ru˘_›s
 *
°_›s
;

1095 c⁄° *
äame
, *
v¨_«me
;

1096 
__s32
 
ty≥_id
, 
d©a£c_id
;

1097 c⁄° 
btf
 *btf;

1098 
bpf_m≠
 *
m≠
;

1099 
__u32
 
i
;

1101 i‡(
obj
->
efûe
.
°_›s_shndx
 == -1)

1104 
btf
 = 
obj
->btf;

1105 
d©a£c_id
 = 
	`btf__föd_by_«me_köd
(
btf
, 
STRUCT_OPS_SEC
,

1106 
BTF_KIND_DATASEC
);

1107 i‡(
d©a£c_id
 < 0) {

1108 
	`¥_w¨n
("struct_ops init: DATASEC %sÇot found\n",

1109 
STRUCT_OPS_SEC
);

1110  -
EINVAL
;

1113 
d©a£c
 = 
	`btf__ty≥_by_id
(
btf
, 
d©a£c_id
);

1114 
vsi
 = 
	`btf_v¨_£cöfos
(
d©a£c
);

1115 
i
 = 0; i < 
	`btf_vÀn
(
d©a£c
); i++, 
vsi
++) {

1116 
ty≥
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
vsi
->type);

1117 
v¨_«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
ty≥
->
«me_off
);

1119 
ty≥_id
 = 
	`btf__ªsﬁve_ty≥
(
obj
->
btf
, 
vsi
->
ty≥
);

1120 i‡(
ty≥_id
 < 0) {

1121 
	`¥_w¨n
("struct_ops init: CannotÑesolve varÅype_id %u in DATASEC %s\n",

1122 
vsi
->
ty≥
, 
STRUCT_OPS_SEC
);

1123  -
EINVAL
;

1126 
ty≥
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
ty≥_id
);

1127 
äame
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
ty≥
->
«me_off
);

1128 i‡(!
äame
[0]) {

1129 
	`¥_w¨n
("struct_ops init:ánonymousÅype isÇot supported\n");

1130  -
ENOTSUP
;

1132 i‡(!
	`btf_is_°ru˘
(
ty≥
)) {

1133 
	`¥_w¨n
("°ru˘_›†öô: %†i†nŸá såu˘\n", 
äame
);

1134  -
EINVAL
;

1137 
m≠
 = 
	`bpf_obje˘__add_m≠
(
obj
);

1138 i‡(
	`IS_ERR
(
m≠
))

1139  
	`PTR_ERR
(
m≠
);

1141 
m≠
->
£c_idx
 = 
obj
->
efûe
.
°_›s_shndx
;

1142 
m≠
->
£c_off£t
 = 
vsi
->
off£t
;

1143 
m≠
->
«me
 = 
	`°rdup
(
v¨_«me
);

1144 i‡(!
m≠
->
«me
)

1145  -
ENOMEM
;

1147 
m≠
->
def
.
ty≥
 = 
BPF_MAP_TYPE_STRUCT_OPS
;

1148 
m≠
->
def
.
key_size
 = ();

1149 
m≠
->
def
.
vÆue_size
 = 
ty≥
->
size
;

1150 
m≠
->
def
.
max_íåõs
 = 1;

1152 
m≠
->
°_›s
 = 
	`ˇŒoc
(1, (*map->st_ops));

1153 i‡(!
m≠
->
°_›s
)

1154  -
ENOMEM
;

1155 
°_›s
 = 
m≠
->st_ops;

1156 
°_›s
->
d©a
 = 
	`mÆloc
(
ty≥
->
size
);

1157 
°_›s
->
¥ogs
 = 
	`ˇŒoc
(
	`btf_vÀn
(
ty≥
), (*st_ops->progs));

1158 
°_›s
->
kîn_func_off
 = 
	`mÆloc
(
	`btf_vÀn
(
ty≥
) *

1159 (*
°_›s
->
kîn_func_off
));

1160 i‡(!
°_›s
->
d©a
 || !°_›s->
¥ogs
 || !°_›s->
kîn_func_off
)

1161  -
ENOMEM
;

1163 i‡(
vsi
->
off£t
 + 
ty≥
->
size
 > 
obj
->
efûe
.
°_›s_d©a
->
d_size
) {

1164 
	`¥_w¨n
("struct_ops init: var %s is beyondÅheÉnd of DATASEC %s\n",

1165 
v¨_«me
, 
STRUCT_OPS_SEC
);

1166  -
EINVAL
;

1169 
	`mem˝y
(
°_›s
->
d©a
,

1170 
obj
->
efûe
.
°_›s_d©a
->
d_buf
 + 
vsi
->
off£t
,

1171 
ty≥
->
size
);

1172 
°_›s
->
äame
 =Åname;

1173 
°_›s
->
ty≥
 =Åype;

1174 
°_›s
->
ty≥_id
 =Åype_id;

1176 
	`¥_debug
("struct_ops init: struct %s(type_id=%u) %s foundát offset %u\n",

1177 
äame
, 
ty≥_id
, 
v¨_«me
, 
vsi
->
off£t
);

1181 
	}
}

1183 
bpf_obje˘
 *
	$bpf_obje˘__√w
(c⁄° *
∑th
,

1184 c⁄° *
obj_buf
,

1185 
size_t
 
obj_buf_sz
,

1186 c⁄° *
obj_«me
)

1188 
boﬁ
 
°ri˘
 = (
libbpf_mode
 & 
LIBBPF_STRICT_NO_OBJECT_LIST
);

1189 
bpf_obje˘
 *
obj
;

1190 *
íd
;

1192 
obj
 = 
	`ˇŒoc
(1, (
bpf_obje˘
Ë+ 
	`°æí
(
∑th
) + 1);

1193 i‡(!
obj
) {

1194 
	`¥_w¨n
("Ælo¯mem‹y faûed f‹ %s\n", 
∑th
);

1195  
	`ERR_PTR
(-
ENOMEM
);

1198 
	`°r˝y
(
obj
->
∑th
,Öath);

1199 i‡(
obj_«me
) {

1200 
	`libbpf_°æ˝y
(
obj
->
«me
, 
obj_«me
, (obj->name));

1203 
	`libbpf_°æ˝y
(
obj
->
«me
, 
	`ba£«me
((*)
∑th
), (obj->name));

1204 
íd
 = 
	`°rchr
(
obj
->
«me
, '.');

1205 i‡(
íd
)

1206 *
íd
 = 0;

1209 
obj
->
efûe
.
fd
 = -1;

1216 
obj
->
efûe
.
obj_buf
 = obj_buf;

1217 
obj
->
efûe
.
obj_buf_sz
 = obj_buf_sz;

1218 
obj
->
efûe
.
m≠s_shndx
 = -1;

1219 
obj
->
efûe
.
btf_m≠s_shndx
 = -1;

1220 
obj
->
efûe
.
°_›s_shndx
 = -1;

1221 
obj
->
kc⁄fig_m≠_idx
 = -1;

1223 
obj
->
kîn_vîsi⁄
 = 
	`gë_kî√l_vîsi⁄
();

1224 
obj
->
lﬂded
 = 
Ál£
;

1226 
	`INIT_LIST_HEAD
(&
obj
->
li°
);

1227 i‡(!
°ri˘
)

1228 
	`li°_add
(&
obj
->
li°
, &
bpf_obje˘s_li°
);

1229  
obj
;

1230 
	}
}

1232 
	$bpf_obje˘__ñf_föish
(
bpf_obje˘
 *
obj
)

1234 i‡(!
obj
->
efûe
.
ñf
)

1237 
	`ñf_íd
(
obj
->
efûe
.
ñf
);

1238 
obj
->
efûe
.
ñf
 = 
NULL
;

1239 
obj
->
efûe
.
symbﬁs
 = 
NULL
;

1240 
obj
->
efûe
.
°_›s_d©a
 = 
NULL
;

1242 
	`z‰ì
(&
obj
->
efûe
.
£cs
);

1243 
obj
->
efûe
.
£c_˙t
 = 0;

1244 
	`z˛o£
(
obj
->
efûe
.
fd
);

1245 
obj
->
efûe
.
obj_buf
 = 
NULL
;

1246 
obj
->
efûe
.
obj_buf_sz
 = 0;

1247 
	}
}

1249 
	$bpf_obje˘__ñf_öô
(
bpf_obje˘
 *
obj
)

1251 
Elf64_Ehdr
 *
ehdr
;

1252 
îr
 = 0;

1253 
Elf
 *
ñf
;

1255 i‡(
obj
->
efûe
.
ñf
) {

1256 
	`¥_w¨n
("elf: init internalÉrror\n");

1257  -
LIBBPF_ERRNO__LIBELF
;

1260 i‡(
obj
->
efûe
.
obj_buf_sz
 > 0) {

1265 
ñf
 = 
	`ñf_mem‹y
((*)
obj
->
efûe
.
obj_buf
, obj->efûe.
obj_buf_sz
);

1267 
obj
->
efûe
.
fd
 = 
	`›í
(obj->
∑th
, 
O_RDONLY
 | 
O_CLOEXEC
);

1268 i‡(
obj
->
efûe
.
fd
 < 0) {

1269 
îrmsg
[
STRERR_BUFSIZE
], *
˝
;

1271 
îr
 = -
î∫o
;

1272 
˝
 = 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg));

1273 
	`¥_w¨n
("ñf: faûedÅÿ›í %s: %s\n", 
obj
->
∑th
, 
˝
);

1274  
îr
;

1277 
ñf
 = 
	`ñf_begö
(
obj
->
efûe
.
fd
, 
ELF_C_READ_MMAP
, 
NULL
);

1280 i‡(!
ñf
) {

1281 
	`¥_w¨n
("ñf: faûedÅÿ›í %†a†ELF fûe: %s\n", 
obj
->
∑th
, 
	`ñf_îrmsg
(-1));

1282 
îr
 = -
LIBBPF_ERRNO__LIBELF
;

1283 
îrout
;

1286 
obj
->
efûe
.
ñf
 =Élf;

1288 i‡(
	`ñf_köd
(
ñf
Ë!
ELF_K_ELF
) {

1289 
îr
 = -
LIBBPF_ERRNO__FORMAT
;

1290 
	`¥_w¨n
("ñf: '%s' i†nŸáÖr›î ELF obje˘\n", 
obj
->
∑th
);

1291 
îrout
;

1294 i‡(
	`gñf_gë˛ass
(
ñf
Ë!
ELFCLASS64
) {

1295 
îr
 = -
LIBBPF_ERRNO__FORMAT
;

1296 
	`¥_w¨n
("ñf: '%s' i†nŸá 64-bô ELF obje˘\n", 
obj
->
∑th
);

1297 
îrout
;

1300 
obj
->
efûe
.
ehdr
 =Éhd∏
	`ñf64_gëehdr
(
ñf
);

1301 i‡(!
obj
->
efûe
.
ehdr
) {

1302 
	`¥_w¨n
("ñf: faûedÅÿgë ELF hódî from %s: %s\n", 
obj
->
∑th
, 
	`ñf_îrmsg
(-1));

1303 
îr
 = -
LIBBPF_ERRNO__FORMAT
;

1304 
îrout
;

1307 i‡(
	`ñf_gëshdr°∫dx
(
ñf
, &
obj
->
efûe
.
sh°∫dx
)) {

1308 
	`¥_w¨n
("elf: failedÅo get sectionÇames section index for %s: %s\n",

1309 
obj
->
∑th
, 
	`ñf_îrmsg
(-1));

1310 
îr
 = -
LIBBPF_ERRNO__FORMAT
;

1311 
îrout
;

1315 i‡(!
	`ñf_øwd©a
(
	`ñf_gës˙
(
ñf
, 
obj
->
efûe
.
sh°∫dx
), 
NULL
)) {

1316 
	`¥_w¨n
("elf: failedÅo get sectionÇames strings from %s: %s\n",

1317 
obj
->
∑th
, 
	`ñf_îrmsg
(-1));

1318 
îr
 = -
LIBBPF_ERRNO__FORMAT
;

1319 
îrout
;

1323 i‡(
ehdr
->
e_ty≥
 !
ET_REL
 || (ehdr->
e_machöe
 &&Éhdr->e_machöê!
EM_BPF
)) {

1324 
	`¥_w¨n
("ñf: %†i†nŸá vÆidÉBPF obje˘ fûe\n", 
obj
->
∑th
);

1325 
îr
 = -
LIBBPF_ERRNO__FORMAT
;

1326 
îrout
;

1330 
îrout
:

1331 
	`bpf_obje˘__ñf_föish
(
obj
);

1332  
îr
;

1333 
	}
}

1335 
	$bpf_obje˘__check_ídü¬ess
(
bpf_obje˘
 *
obj
)

1337 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


1338 i‡(
obj
->
efûe
.
ehdr
->
e_idít
[
EI_DATA
] =
ELFDATA2LSB
)

1340 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


1341 i‡(
obj
->
efûe
.
ehdr
->
e_idít
[
EI_DATA
] =
ELFDATA2MSB
)

1346 
	`¥_w¨n
("ñf:Éndü¬es†mism©ch i¿%s.\n", 
obj
->
∑th
);

1347  -
LIBBPF_ERRNO__ENDIAN
;

1348 
	}
}

1351 
	$bpf_obje˘__öô_li˚n£
(
bpf_obje˘
 *
obj
, *
d©a
, 
size_t
 
size
)

1356 
	`libbpf_°æ˝y
(
obj
->
li˚n£
, 
d©a
, 
	`mö
(
size
 + 1, (obj->license)));

1357 
	`¥_debug
("li˚n£ o‡%†i†%s\n", 
obj
->
∑th
, obj->
li˚n£
);

1359 
	}
}

1362 
	$bpf_obje˘__öô_kvîsi⁄
(
bpf_obje˘
 *
obj
, *
d©a
, 
size_t
 
size
)

1364 
__u32
 
kvî
;

1366 i‡(
size
 !(
kvî
)) {

1367 
	`¥_w¨n
("övÆid kvî se˘i⁄ i¿%s\n", 
obj
->
∑th
);

1368  -
LIBBPF_ERRNO__FORMAT
;

1370 
	`mem˝y
(&
kvî
, 
d©a
, (kver));

1371 
obj
->
kîn_vîsi⁄
 = 
kvî
;

1372 
	`¥_debug
("kî√»vîsi⁄ o‡%†i†%x\n", 
obj
->
∑th
, obj->
kîn_vîsi⁄
);

1374 
	}
}

1376 
boﬁ
 
	$bpf_m≠_ty≥__is_m≠_ö_m≠
(
bpf_m≠_ty≥
 
ty≥
)

1378 i‡(
ty≥
 =
BPF_MAP_TYPE_ARRAY_OF_MAPS
 ||

1379 
ty≥
 =
BPF_MAP_TYPE_HASH_OF_MAPS
)

1380  
åue
;

1381  
Ál£
;

1382 
	}
}

1384 
	$föd_ñf_£c_sz
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° *
«me
, 
__u32
 *
size
)

1386 
Elf_D©a
 *
d©a
;

1387 
Elf_S˙
 *
s˙
;

1389 i‡(!
«me
)

1390  -
EINVAL
;

1392 
s˙
 = 
	`ñf_£c_by_«me
(
obj
, 
«me
);

1393 
d©a
 = 
	`ñf_£c_d©a
(
obj
, 
s˙
);

1394 i‡(
d©a
) {

1395 *
size
 = 
d©a
->
d_size
;

1399  -
ENOENT
;

1400 
	}
}

1402 
	$föd_ñf_v¨_off£t
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° *
«me
, 
__u32
 *
off
)

1404 
Elf_D©a
 *
symbﬁs
 = 
obj
->
efûe
.symbols;

1405 c⁄° *
¢ame
;

1406 
size_t
 
si
;

1408 i‡(!
«me
 || !
off
)

1409  -
EINVAL
;

1411 
si
 = 0; sò< 
symbﬁs
->
d_size
 / (
Elf64_Sym
); si++) {

1412 
Elf64_Sym
 *
sym
 = 
	`ñf_sym_by_idx
(
obj
, 
si
);

1414 i‡(
	`ELF64_ST_TYPE
(
sym
->
°_öfo
Ë!
STT_OBJECT
)

1417 i‡(
	`ELF64_ST_BIND
(
sym
->
°_öfo
Ë!
STB_GLOBAL
 &&

1418 
	`ELF64_ST_BIND
(
sym
->
°_öfo
Ë!
STB_WEAK
)

1421 
¢ame
 = 
	`ñf_sym_°r
(
obj
, 
sym
->
°_«me
);

1422 i‡(!
¢ame
) {

1423 
	`¥_w¨n
("ÁûedÅÿgë symÇamê°rög f‹ v¨ %s\n", 
«me
);

1424  -
EIO
;

1426 i‡(
	`°rcmp
(
«me
, 
¢ame
) == 0) {

1427 *
off
 = 
sym
->
°_vÆue
;

1432  -
ENOENT
;

1433 
	}
}

1435 
bpf_m≠
 *
	$bpf_obje˘__add_m≠
(
bpf_obje˘
 *
obj
)

1437 
bpf_m≠
 *
m≠
;

1438 
îr
;

1440 
îr
 = 
	`libbpf_ísuª_mem
((**)&
obj
->
m≠s
, &obj->
m≠s_ˇp
,

1441 (*
obj
->
m≠s
), obj->
ƒ_m≠s
 + 1);

1442 i‡(
îr
)

1443  
	`ERR_PTR
(
îr
);

1445 
m≠
 = &
obj
->
m≠s
[obj->
ƒ_m≠s
++];

1446 
m≠
->
obj
 = obj;

1447 
m≠
->
fd
 = -1;

1448 
m≠
->
ö√r_m≠_fd
 = -1;

1449 
m≠
->
auto¸óã
 = 
åue
;

1451  
m≠
;

1452 
	}
}

1454 
size_t
 
	$bpf_m≠_mm≠_sz
(c⁄° 
bpf_m≠
 *
m≠
)

1456 
∑ge_sz
 = 
	`sysc⁄f
(
_SC_PAGE_SIZE
);

1457 
size_t
 
m≠_sz
;

1459 
m≠_sz
 = (
size_t
)
	`roundup
(
m≠
->
def
.
vÆue_size
, 8Ë* m≠->def.
max_íåõs
;

1460 
m≠_sz
 = 
	`roundup
(m≠_sz, 
∑ge_sz
);

1461  
m≠_sz
;

1462 
	}
}

1464 *
	$öã∫Æ_m≠_«me
(
bpf_obje˘
 *
obj
, c⁄° *
ªÆ_«me
)

1466 
m≠_«me
[
BPF_OBJ_NAME_LEN
], *
p
;

1467 
pfx_Àn
, 
sfx_Àn
 = 
	`max
((
size_t
)7, 
	`°æí
(
ªÆ_«me
));

1502 i‡(
sfx_Àn
 >
BPF_OBJ_NAME_LEN
)

1503 
sfx_Àn
 = 
BPF_OBJ_NAME_LEN
 - 1;

1506 i‡(
	`°rchr
(
ªÆ_«me
 + 1, '.'Ë!
NULL
)

1507 
pfx_Àn
 = 0;

1509 
pfx_Àn
 = 
	`mö
((
size_t
)
BPF_OBJ_NAME_LEN
 - 
sfx_Àn
 - 1, 
	`°æí
(
obj
->
«me
));

1511 
	`¢¥ötf
(
m≠_«me
, (m≠_«me), "%.*s%.*s", 
pfx_Àn
, 
obj
->
«me
,

1512 
sfx_Àn
, 
ªÆ_«me
);

1515 
p
 = 
m≠_«me
; *p &&Ö < map_name + (map_name);Ö++)

1516 i‡(!
	`iß um
(*
p
) && *p != '_' && *p != '.')

1517 *
p
 = '_';

1519  
	`°rdup
(
m≠_«me
);

1520 
	}
}

1523 
bpf_m≠_föd_btf_öfo
(
bpf_obje˘
 *
obj
, 
bpf_m≠
 *
m≠
);

1526 
	$bpf_obje˘__öô_öã∫Æ_m≠
(
bpf_obje˘
 *
obj
, 
libbpf_m≠_ty≥
 
ty≥
,

1527 c⁄° *
ªÆ_«me
, 
£c_idx
, *
d©a
, 
size_t
 
d©a_sz
)

1529 
bpf_m≠_def
 *
def
;

1530 
bpf_m≠
 *
m≠
;

1531 
îr
;

1533 
m≠
 = 
	`bpf_obje˘__add_m≠
(
obj
);

1534 i‡(
	`IS_ERR
(
m≠
))

1535  
	`PTR_ERR
(
m≠
);

1537 
m≠
->
libbpf_ty≥
 = 
ty≥
;

1538 
m≠
->
£c_idx
 = sec_idx;

1539 
m≠
->
£c_off£t
 = 0;

1540 
m≠
->
ªÆ_«me
 = 
	`°rdup
(real_name);

1541 
m≠
->
«me
 = 
	`öã∫Æ_m≠_«me
(
obj
, 
ªÆ_«me
);

1542 i‡(!
m≠
->
ªÆ_«me
 || !m≠->
«me
) {

1543 
	`z‰ì
(&
m≠
->
ªÆ_«me
);

1544 
	`z‰ì
(&
m≠
->
«me
);

1545  -
ENOMEM
;

1548 
def
 = &
m≠
->def;

1549 
def
->
ty≥
 = 
BPF_MAP_TYPE_ARRAY
;

1550 
def
->
key_size
 = ();

1551 
def
->
vÆue_size
 = 
d©a_sz
;

1552 
def
->
max_íåõs
 = 1;

1553 
def
->
m≠_Êags
 = 
ty≥
 =
LIBBPF_MAP_RODATA
 ||Åy≥ =
LIBBPF_MAP_KCONFIG


1554 ? 
BPF_F_RDONLY_PROG
 : 0;

1555 
def
->
m≠_Êags
 |
BPF_F_MMAPABLE
;

1557 
	`¥_debug
("map '%s' (global data):át sec_idx %d, offset %zu, flags %x.\n",

1558 
m≠
->
«me
, m≠->
£c_idx
, m≠->
£c_off£t
, 
def
->
m≠_Êags
);

1560 
m≠
->
mm≠ed
 = 
	`mm≠
(
NULL
, 
	`bpf_m≠_mm≠_sz
(m≠), 
PROT_READ
 | 
PROT_WRITE
,

1561 
MAP_SHARED
 | 
MAP_ANONYMOUS
, -1, 0);

1562 i‡(
m≠
->
mm≠ed
 =
MAP_FAILED
) {

1563 
îr
 = -
î∫o
;

1564 
m≠
->
mm≠ed
 = 
NULL
;

1565 
	`¥_w¨n
("failedÅoálloc map '%s' content buffer: %d\n",

1566 
m≠
->
«me
, 
îr
);

1567 
	`z‰ì
(&
m≠
->
ªÆ_«me
);

1568 
	`z‰ì
(&
m≠
->
«me
);

1569  
îr
;

1573 (Ë
	`bpf_m≠_föd_btf_öfo
(
obj
, 
m≠
);

1575 i‡(
d©a
)

1576 
	`mem˝y
(
m≠
->
mm≠ed
, 
d©a
, 
d©a_sz
);

1578 
	`¥_debug
("m≠ %td i†\"%s\"\n", 
m≠
 - 
obj
->
m≠s
, m≠->
«me
);

1580 
	}
}

1582 
	$bpf_obje˘__öô_globÆ_d©a_m≠s
(
bpf_obje˘
 *
obj
)

1584 
ñf_£c_desc
 *
£c_desc
;

1585 c⁄° *
£c_«me
;

1586 
îr
 = 0, 
£c_idx
;

1591 
£c_idx
 = 1; sec_idx < 
obj
->
efûe
.
£c_˙t
; sec_idx++) {

1592 
£c_desc
 = &
obj
->
efûe
.
£cs
[
£c_idx
];

1594 
£c_desc
->
£c_ty≥
) {

1595 
SEC_DATA
:

1596 
£c_«me
 = 
	`ñf_£c_«me
(
obj
, 
	`ñf_£c_by_idx
(obj, 
£c_idx
));

1597 
îr
 = 
	`bpf_obje˘__öô_öã∫Æ_m≠
(
obj
, 
LIBBPF_MAP_DATA
,

1598 
£c_«me
, 
£c_idx
,

1599 
£c_desc
->
d©a
->
d_buf
,

1600 
£c_desc
->
d©a
->
d_size
);

1602 
SEC_RODATA
:

1603 
obj
->
has_rod©a
 = 
åue
;

1604 
£c_«me
 = 
	`ñf_£c_«me
(
obj
, 
	`ñf_£c_by_idx
(obj, 
£c_idx
));

1605 
îr
 = 
	`bpf_obje˘__öô_öã∫Æ_m≠
(
obj
, 
LIBBPF_MAP_RODATA
,

1606 
£c_«me
, 
£c_idx
,

1607 
£c_desc
->
d©a
->
d_buf
,

1608 
£c_desc
->
d©a
->
d_size
);

1610 
SEC_BSS
:

1611 
£c_«me
 = 
	`ñf_£c_«me
(
obj
, 
	`ñf_£c_by_idx
(obj, 
£c_idx
));

1612 
îr
 = 
	`bpf_obje˘__öô_öã∫Æ_m≠
(
obj
, 
LIBBPF_MAP_BSS
,

1613 
£c_«me
, 
£c_idx
,

1614 
NULL
,

1615 
£c_desc
->
d©a
->
d_size
);

1621 i‡(
îr
)

1622  
îr
;

1625 
	}
}

1628 
exã∫_desc
 *
	$föd_exã∫_by_«me
(c⁄° 
bpf_obje˘
 *
obj
,

1629 c⁄° *
«me
)

1631 
i
;

1633 
i
 = 0; i < 
obj
->
ƒ_exã∫
; i++) {

1634 i‡(
	`°rcmp
(
obj
->
exã∫s
[
i
].
«me
,Çame) == 0)

1635  &
obj
->
exã∫s
[
i
];

1637  
NULL
;

1638 
	}
}

1640 
	$£t_kcfg_vÆue_åi
(
exã∫_desc
 *
ext
, *
ext_vÆ
,

1641 
vÆue
)

1643 
ext
->
kcfg
.
ty≥
) {

1644 
KCFG_BOOL
:

1645 i‡(
vÆue
 == 'm') {

1646 
	`¥_w¨n
("extern (kcfg) %s=%c should beÅristate or char\n",

1647 
ext
->
«me
, 
vÆue
);

1648  -
EINVAL
;

1650 *(
boﬁ
 *)
ext_vÆ
 = 
vÆue
 ='y' ? 
åue
 : 
Ál£
;

1652 
KCFG_TRISTATE
:

1653 i‡(
vÆue
 == 'y')

1654 *(
libbpf_åi°©e
 *)
ext_vÆ
 = 
TRI_YES
;

1655 i‡(
vÆue
 == 'm')

1656 *(
libbpf_åi°©e
 *)
ext_vÆ
 = 
TRI_MODULE
;

1658 *(
libbpf_åi°©e
 *)
ext_vÆ
 = 
TRI_NO
;

1660 
KCFG_CHAR
:

1661 *(*)
ext_vÆ
 = 
vÆue
;

1663 
KCFG_UNKNOWN
:

1664 
KCFG_INT
:

1665 
KCFG_CHAR_ARR
:

1667 
	`¥_w¨n
("extern (kcfg) %s=%c should be bool,Åristate, or char\n",

1668 
ext
->
«me
, 
vÆue
);

1669  -
EINVAL
;

1671 
ext
->
is_£t
 = 
åue
;

1673 
	}
}

1675 
	$£t_kcfg_vÆue_°r
(
exã∫_desc
 *
ext
, *
ext_vÆ
,

1676 c⁄° *
vÆue
)

1678 
size_t
 
Àn
;

1680 i‡(
ext
->
kcfg
.
ty≥
 !
KCFG_CHAR_ARR
) {

1681 
	`¥_w¨n
("exã∫ (kcfgË%s=%†should bêch¨áºay\n", 
ext
->
«me
, 
vÆue
);

1682  -
EINVAL
;

1685 
Àn
 = 
	`°æí
(
vÆue
);

1686 i‡(
vÆue
[
Àn
 - 1] != '"') {

1687 
	`¥_w¨n
("extern (kcfg) '%s': invalid string config '%s'\n",

1688 
ext
->
«me
, 
vÆue
);

1689  -
EINVAL
;

1693 
Àn
 -= 2;

1694 i‡(
Àn
 >
ext
->
kcfg
.
sz
) {

1695 
	`¥_w¨n
("extern (kcfg) '%s':Üong string config %s of (%zu bytes)ÅruncatedÅo %d bytes\n",

1696 
ext
->
«me
, 
vÆue
, 
Àn
,Éxt->
kcfg
.
sz
 - 1);

1697 
Àn
 = 
ext
->
kcfg
.
sz
 - 1;

1699 
	`mem˝y
(
ext_vÆ
, 
vÆue
 + 1, 
Àn
);

1700 
ext_vÆ
[
Àn
] = '\0';

1701 
ext
->
is_£t
 = 
åue
;

1703 
	}
}

1705 
	$∑r£_u64
(c⁄° *
vÆue
, 
__u64
 *
ªs
)

1707 *
vÆue_íd
;

1708 
îr
;

1710 
î∫o
 = 0;

1711 *
ªs
 = 
	`°πouŒ
(
vÆue
, &
vÆue_íd
, 0);

1712 i‡(
î∫o
) {

1713 
îr
 = -
î∫o
;

1714 
	`¥_w¨n
("ÁûedÅÿ∑r£ '%s'á†öãgî: %d\n", 
vÆue
, 
îr
);

1715  
îr
;

1717 i‡(*
vÆue_íd
) {

1718 
	`¥_w¨n
("ÁûedÅÿ∑r£ '%s'á†öãgî com∂ëñy\n", 
vÆue
);

1719  -
EINVAL
;

1722 
	}
}

1724 
boﬁ
 
	$is_kcfg_vÆue_ö_ønge
(c⁄° 
exã∫_desc
 *
ext
, 
__u64
 
v
)

1726 
bô_sz
 = 
ext
->
kcfg
.
sz
 * 8;

1728 i‡(
ext
->
kcfg
.
sz
 == 8)

1729  
åue
;

1743 i‡(
ext
->
kcfg
.
is_sig√d
)

1744  
v
 + (1ULL << (
bô_sz
 - 1)) < (1ULL << bit_sz);

1746  (
v
 >> 
bô_sz
) == 0;

1747 
	}
}

1749 
	$£t_kcfg_vÆue_num
(
exã∫_desc
 *
ext
, *
ext_vÆ
,

1750 
__u64
 
vÆue
)

1752 i‡(
ext
->
kcfg
.
ty≥
 !
KCFG_INT
 &&Éxt->kcfg.ty≥ !
KCFG_CHAR
) {

1753 
	`¥_w¨n
("extern (kcfg) %s=%llu should be integer\n",

1754 
ext
->
«me
, ()
vÆue
);

1755  -
EINVAL
;

1757 i‡(!
	`is_kcfg_vÆue_ö_ønge
(
ext
, 
vÆue
)) {

1758 
	`¥_w¨n
("extern (kcfg) %s=%llu value doesn't fit in %d bytes\n",

1759 
ext
->
«me
, ()
vÆue
,Éxt->
kcfg
.
sz
);

1760  -
ERANGE
;

1762 
ext
->
kcfg
.
sz
) {

1763 1: *(
__u8
 *)
ext_vÆ
 = 
vÆue
; ;

1764 2: *(
__u16
 *)
ext_vÆ
 = 
vÆue
; ;

1765 4: *(
__u32
 *)
ext_vÆ
 = 
vÆue
; ;

1766 8: *(
__u64
 *)
ext_vÆ
 = 
vÆue
; ;

1768  -
EINVAL
;

1770 
ext
->
is_£t
 = 
åue
;

1772 
	}
}

1774 
	$bpf_obje˘__¥o˚ss_kc⁄fig_löe
(
bpf_obje˘
 *
obj
,

1775 *
buf
, *
d©a
)

1777 
exã∫_desc
 *
ext
;

1778 *
£p
, *
vÆue
;

1779 
Àn
, 
îr
 = 0;

1780 *
ext_vÆ
;

1781 
__u64
 
num
;

1783 i‡(!
	`°r_has_pfx
(
buf
, "CONFIG_"))

1786 
£p
 = 
	`°rchr
(
buf
, '=');

1787 i‡(!
£p
) {

1788 
	`¥_w¨n
("ÁûedÅÿ∑r£ '%s':Çÿ£∑øt‹\n", 
buf
);

1789  -
EINVAL
;

1793 
Àn
 = 
	`°æí
(
buf
);

1794 i‡(
buf
[
Àn
 - 1] == '\n')

1795 
buf
[
Àn
 - 1] = '\0';

1797 *
£p
 = '\0';

1798 i‡(!
£p
[1]) {

1799 *
£p
 = '=';

1800 
	`¥_w¨n
("ÁûedÅÿ∑r£ '%s':ÇÿvÆue\n", 
buf
);

1801  -
EINVAL
;

1804 
ext
 = 
	`föd_exã∫_by_«me
(
obj
, 
buf
);

1805 i‡(!
ext
 ||Éxt->
is_£t
)

1808 
ext_vÆ
 = 
d©a
 + 
ext
->
kcfg
.
d©a_off
;

1809 
vÆue
 = 
£p
 + 1;

1811 *
vÆue
) {

1813 
îr
 = 
	`£t_kcfg_vÆue_åi
(
ext
, 
ext_vÆ
, *
vÆue
);

1816 
îr
 = 
	`£t_kcfg_vÆue_°r
(
ext
, 
ext_vÆ
, 
vÆue
);

1820 
îr
 = 
	`∑r£_u64
(
vÆue
, &
num
);

1821 i‡(
îr
) {

1822 
	`¥_w¨n
("extern (kcfg) %s=%s should be integer\n",

1823 
ext
->
«me
, 
vÆue
);

1824  
îr
;

1826 
îr
 = 
	`£t_kcfg_vÆue_num
(
ext
, 
ext_vÆ
, 
num
);

1829 i‡(
îr
)

1830  
îr
;

1831 
	`¥_debug
("exã∫ (kcfgË%s=%s\n", 
ext
->
«me
, 
vÆue
);

1833 
	}
}

1835 
	$bpf_obje˘__ªad_kc⁄fig_fûe
(
bpf_obje˘
 *
obj
, *
d©a
)

1837 
buf
[
PATH_MAX
];

1838 
ut¢ame
 
uts
;

1839 
Àn
, 
îr
 = 0;

1840 
gzFûe
 
fûe
;

1842 
	`u«me
(&
uts
);

1843 
Àn
 = 
	`¢¥ötf
(
buf
, 
PATH_MAX
, "/boŸ/c⁄fig-%s", 
uts
.
ªÀa£
);

1844 i‡(
Àn
 < 0)

1845  -
EINVAL
;

1846 i‡(
Àn
 >
PATH_MAX
)

1847  -
ENAMETOOLONG
;

1850 
fûe
 = 
	`gz›í
(
buf
, "r");

1851 i‡(!
fûe
)

1852 
fûe
 = 
	`gz›í
("/proc/config.gz", "r");

1854 i‡(!
fûe
) {

1855 
	`¥_w¨n
("failedÅo open system Kconfig\n");

1856  -
ENOENT
;

1859 
	`gzgës
(
fûe
, 
buf
, (buf))) {

1860 
îr
 = 
	`bpf_obje˘__¥o˚ss_kc⁄fig_löe
(
obj
, 
buf
, 
d©a
);

1861 i‡(
îr
) {

1862 
	`¥_w¨n
("errorÖarsing system KconfigÜine '%s': %d\n",

1863 
buf
, 
îr
);

1864 
out
;

1868 
out
:

1869 
	`gz˛o£
(
fûe
);

1870  
îr
;

1871 
	}
}

1873 
	$bpf_obje˘__ªad_kc⁄fig_mem
(
bpf_obje˘
 *
obj
,

1874 c⁄° *
c⁄fig
, *
d©a
)

1876 
buf
[
PATH_MAX
];

1877 
îr
 = 0;

1878 
FILE
 *
fûe
;

1880 
fûe
 = 
	`fmem›í
((*)
c⁄fig
, 
	`°æí
(config), "r");

1881 i‡(!
fûe
) {

1882 
îr
 = -
î∫o
;

1883 
	`¥_w¨n
("ÁûedÅÿ›í in-mem‹y Kc⁄fig: %d\n", 
îr
);

1884  
îr
;

1887 
	`fgës
(
buf
, (buf), 
fûe
)) {

1888 
îr
 = 
	`bpf_obje˘__¥o˚ss_kc⁄fig_löe
(
obj
, 
buf
, 
d©a
);

1889 i‡(
îr
) {

1890 
	`¥_w¨n
("errorÖarsing in-memory KconfigÜine '%s': %d\n",

1891 
buf
, 
îr
);

1896 
	`f˛o£
(
fûe
);

1897  
îr
;

1898 
	}
}

1900 
	$bpf_obje˘__öô_kc⁄fig_m≠
(
bpf_obje˘
 *
obj
)

1902 
exã∫_desc
 *
œ°_ext
 = 
NULL
, *
ext
;

1903 
size_t
 
m≠_sz
;

1904 
i
, 
îr
;

1906 
i
 = 0; i < 
obj
->
ƒ_exã∫
; i++) {

1907 
ext
 = &
obj
->
exã∫s
[
i
];

1908 i‡(
ext
->
ty≥
 =
EXT_KCFG
)

1909 
œ°_ext
 = 
ext
;

1912 i‡(!
œ°_ext
)

1915 
m≠_sz
 = 
œ°_ext
->
kcfg
.
d©a_off
 +Üa°_ext->kcfg.
sz
;

1916 
îr
 = 
	`bpf_obje˘__öô_öã∫Æ_m≠
(
obj
, 
LIBBPF_MAP_KCONFIG
,

1917 ".kc⁄fig", 
obj
->
efûe
.
symbﬁs_shndx
,

1918 
NULL
, 
m≠_sz
);

1919 i‡(
îr
)

1920  
îr
;

1922 
obj
->
kc⁄fig_m≠_idx
 = obj->
ƒ_m≠s
 - 1;

1925 
	}
}

1927 
	$bpf_obje˘__öô_u£r_m≠s
(
bpf_obje˘
 *
obj
, 
boﬁ
 
°ri˘
)

1929 
Elf_D©a
 *
symbﬁs
 = 
obj
->
efûe
.symbols;

1930 
i
, 
m≠_def_sz
 = 0, 
ƒ_m≠s
 = 0, 
ƒ_syms
;

1931 
Elf_D©a
 *
d©a
 = 
NULL
;

1932 
Elf_S˙
 *
s˙
;

1934 i‡(
obj
->
efûe
.
m≠s_shndx
 < 0)

1937 i‡(
libbpf_mode
 & 
LIBBPF_STRICT_MAP_DEFINITIONS
) {

1938 
	`¥_w¨n
("legacy map definitions in SEC(\"maps\")áreÇot supported\n");

1939  -
EOPNOTSUPP
;

1942 i‡(!
symbﬁs
)

1943  -
EINVAL
;

1945 
s˙
 = 
	`ñf_£c_by_idx
(
obj
, obj->
efûe
.
m≠s_shndx
);

1946 
d©a
 = 
	`ñf_£c_d©a
(
obj
, 
s˙
);

1947 i‡(!
s˙
 || !
d©a
) {

1948 
	`¥_w¨n
("elf: failedÅo getÜegacy map definitions for %s\n",

1949 
obj
->
∑th
);

1950  -
EINVAL
;

1960 
ƒ_syms
 = 
symbﬁs
->
d_size
 / (
Elf64_Sym
);

1961 
i
 = 0; i < 
ƒ_syms
; i++) {

1962 
Elf64_Sym
 *
sym
 = 
	`ñf_sym_by_idx
(
obj
, 
i
);

1964 i‡(
sym
->
°_shndx
 !
obj
->
efûe
.
m≠s_shndx
)

1966 i‡(
	`ELF64_ST_TYPE
(
sym
->
°_öfo
Ë=
STT_SECTION
)

1968 
ƒ_m≠s
++;

1971 
	`¥_debug
("elf: found %dÜegacy map definitions (%zd bytes) in %s\n",

1972 
ƒ_m≠s
, 
d©a
->
d_size
, 
obj
->
∑th
);

1974 i‡(!
d©a
->
d_size
 || 
ƒ_m≠s
 == 0 || (data->d_size %Çr_maps) != 0) {

1975 
	`¥_w¨n
("elf: unableÅo determineÜegacy map definition size in %s\n",

1976 
obj
->
∑th
);

1977  -
EINVAL
;

1979 
m≠_def_sz
 = 
d©a
->
d_size
 / 
ƒ_m≠s
;

1982 
i
 = 0; i < 
ƒ_syms
; i++) {

1983 
Elf64_Sym
 *
sym
 = 
	`ñf_sym_by_idx
(
obj
, 
i
);

1984 c⁄° *
m≠_«me
;

1985 
bpf_m≠_def
 *
def
;

1986 
bpf_m≠
 *
m≠
;

1988 i‡(
sym
->
°_shndx
 !
obj
->
efûe
.
m≠s_shndx
)

1990 i‡(
	`ELF64_ST_TYPE
(
sym
->
°_öfo
Ë=
STT_SECTION
)

1993 
m≠
 = 
	`bpf_obje˘__add_m≠
(
obj
);

1994 i‡(
	`IS_ERR
(
m≠
))

1995  
	`PTR_ERR
(
m≠
);

1997 
m≠_«me
 = 
	`ñf_sym_°r
(
obj
, 
sym
->
°_«me
);

1998 i‡(!
m≠_«me
) {

1999 
	`¥_w¨n
("failedÅo get map #%dÇame sym string for obj %s\n",

2000 
i
, 
obj
->
∑th
);

2001  -
LIBBPF_ERRNO__FORMAT
;

2004 
	`¥_w¨n
("m≠ '%s' (Àgacy):Üegacy m≠ deföôi⁄†¨êdïªˇãd, u£ BTF-deföed m≠†ö°ód\n", 
m≠_«me
);

2006 i‡(
	`ELF64_ST_BIND
(
sym
->
°_öfo
Ë=
STB_LOCAL
) {

2007 
	`¥_w¨n
("m≠ '%s' (Àgacy): sèti¯m≠†¨ênŸ suµ‹ãd\n", 
m≠_«me
);

2008  -
ENOTSUP
;

2011 
m≠
->
libbpf_ty≥
 = 
LIBBPF_MAP_UNSPEC
;

2012 
m≠
->
£c_idx
 = 
sym
->
°_shndx
;

2013 
m≠
->
£c_off£t
 = 
sym
->
°_vÆue
;

2014 
	`¥_debug
("map '%s' (legacy):át sec_idx %d, offset %zu.\n",

2015 
m≠_«me
, 
m≠
->
£c_idx
, m≠->
£c_off£t
);

2016 i‡(
sym
->
°_vÆue
 + 
m≠_def_sz
 > 
d©a
->
d_size
) {

2017 
	`¥_w¨n
("corrupted maps section in %s:Üast map \"%s\"Åoo small\n",

2018 
obj
->
∑th
, 
m≠_«me
);

2019  -
EINVAL
;

2022 
m≠
->
«me
 = 
	`°rdup
(
m≠_«me
);

2023 i‡(!
m≠
->
«me
) {

2024 
	`¥_w¨n
("m≠ '%s': faûedÅÿÆlo¯m≠Çame\n", 
m≠_«me
);

2025  -
ENOMEM
;

2027 
	`¥_debug
("m≠ %d i†\"%s\"\n", 
i
, 
m≠
->
«me
);

2028 
def
 = (
bpf_m≠_def
 *)(
d©a
->
d_buf
 + 
sym
->
°_vÆue
);

2035 i‡(
m≠_def_sz
 <(
bpf_m≠_def
)) {

2036 
	`mem˝y
(&
m≠
->
def
, def, 
m≠_def_sz
);

2044 *
b
;

2046 
b
 = ((*)
def
Ë+ (
bpf_m≠_def
);

2047 
b
 < ((*)
def
Ë+ 
m≠_def_sz
; b++) {

2048 i‡(*
b
 != 0) {

2049 
	`¥_w¨n
("maps section in %s: \"%s\" has unrecognized,Çon-zero options\n",

2050 
obj
->
∑th
, 
m≠_«me
);

2051 i‡(
°ri˘
)

2052  -
EINVAL
;

2055 
	`mem˝y
(&
m≠
->
def
, def, (
bpf_m≠_def
));

2059 (Ë
	`bpf_m≠_föd_btf_öfo
(
obj
, 
m≠
);

2062 
	}
}

2064 c⁄° 
btf_ty≥
 *

2065 
	$skù_mods_™d_ty≥defs
(c⁄° 
btf
 *btf, 
__u32
 
id
, __u32 *
ªs_id
)

2067 c⁄° 
btf_ty≥
 *
t
 = 
	`btf__ty≥_by_id
(
btf
, 
id
);

2069 i‡(
ªs_id
)

2070 *
ªs_id
 = 
id
;

2072 
	`btf_is_mod
(
t
Ë|| 
	`btf_is_ty≥def
(t)) {

2073 i‡(
ªs_id
)

2074 *
ªs_id
 = 
t
->
ty≥
;

2075 
t
 = 
	`btf__ty≥_by_id
(
btf
,Å->
ty≥
);

2078  
t
;

2079 
	}
}

2081 c⁄° 
btf_ty≥
 *

2082 
	$ªsﬁve_func_±r
(c⁄° 
btf
 *btf, 
__u32
 
id
, __u32 *
ªs_id
)

2084 c⁄° 
btf_ty≥
 *
t
;

2086 
t
 = 
	`skù_mods_™d_ty≥defs
(
btf
, 
id
, 
NULL
);

2087 i‡(!
	`btf_is_±r
(
t
))

2088  
NULL
;

2090 
t
 = 
	`skù_mods_™d_ty≥defs
(
btf
,Å->
ty≥
, 
ªs_id
);

2092  
	`btf_is_func_¥Ÿo
(
t
Ë?Å : 
NULL
;

2093 
	}
}

2095 c⁄° *
	$__btf_köd_°r
(
__u16
 
köd
)

2097 
köd
) {

2098 
BTF_KIND_UNKN
:  "void";

2099 
BTF_KIND_INT
:  "int";

2100 
BTF_KIND_PTR
:  "ptr";

2101 
BTF_KIND_ARRAY
:  "array";

2102 
BTF_KIND_STRUCT
:  "struct";

2103 
BTF_KIND_UNION
:  "union";

2104 
BTF_KIND_ENUM
:  "enum";

2105 
BTF_KIND_FWD
:  "fwd";

2106 
BTF_KIND_TYPEDEF
:  "typedef";

2107 
BTF_KIND_VOLATILE
:  "volatile";

2108 
BTF_KIND_CONST
:  "const";

2109 
BTF_KIND_RESTRICT
:  "restrict";

2110 
BTF_KIND_FUNC
:  "func";

2111 
BTF_KIND_FUNC_PROTO
:  "func_proto";

2112 
BTF_KIND_VAR
:  "var";

2113 
BTF_KIND_DATASEC
:  "datasec";

2114 
BTF_KIND_FLOAT
:  "float";

2115 
BTF_KIND_DECL_TAG
:  "decl_tag";

2116 
BTF_KIND_TYPE_TAG
:  "type_tag";

2117 
BTF_KIND_ENUM64
:  "enum64";

2120 
	}
}

2122 c⁄° *
	$btf_köd_°r
(c⁄° 
btf_ty≥
 *
t
)

2124  
	`__btf_köd_°r
(
	`btf_köd
(
t
));

2125 
	}
}

2134 
boﬁ
 
	$gë_m≠_fõld_öt
(c⁄° *
m≠_«me
, c⁄° 
btf
 *btf,

2135 c⁄° 
btf_membî
 *
m
, 
__u32
 *
ªs
)

2137 c⁄° 
btf_ty≥
 *
t
 = 
	`skù_mods_™d_ty≥defs
(
btf
, 
m
->
ty≥
, 
NULL
);

2138 c⁄° *
«me
 = 
	`btf__«me_by_off£t
(
btf
, 
m
->
«me_off
);

2139 c⁄° 
btf_¨øy
 *
¨r_öfo
;

2140 c⁄° 
btf_ty≥
 *
¨r_t
;

2142 i‡(!
	`btf_is_±r
(
t
)) {

2143 
	`¥_w¨n
("map '%s':áttr '%s':Éxpected PTR, got %s.\n",

2144 
m≠_«me
, 
«me
, 
	`btf_köd_°r
(
t
));

2145  
Ál£
;

2148 
¨r_t
 = 
	`btf__ty≥_by_id
(
btf
, 
t
->
ty≥
);

2149 i‡(!
¨r_t
) {

2150 
	`¥_w¨n
("map '%s':áttr '%s':Åype [%u]Çot found.\n",

2151 
m≠_«me
, 
«me
, 
t
->
ty≥
);

2152  
Ál£
;

2154 i‡(!
	`btf_is_¨øy
(
¨r_t
)) {

2155 
	`¥_w¨n
("map '%s':áttr '%s':Éxpected ARRAY, got %s.\n",

2156 
m≠_«me
, 
«me
, 
	`btf_köd_°r
(
¨r_t
));

2157  
Ál£
;

2159 
¨r_öfo
 = 
	`btf_¨øy
(
¨r_t
);

2160 *
ªs
 = 
¨r_öfo
->
√Àms
;

2161  
åue
;

2162 
	}
}

2164 
	$buûd_m≠_pö_∑th
(
bpf_m≠
 *
m≠
, c⁄° *
∑th
)

2166 
buf
[
PATH_MAX
];

2167 
Àn
;

2169 i‡(!
∑th
)

2170 
∑th
 = "/sys/fs/bpf";

2172 
Àn
 = 
	`¢¥ötf
(
buf
, 
PATH_MAX
, "%s/%s", 
∑th
, 
	`bpf_m≠__«me
(
m≠
));

2173 i‡(
Àn
 < 0)

2174  -
EINVAL
;

2175 i‡(
Àn
 >
PATH_MAX
)

2176  -
ENAMETOOLONG
;

2178  
	`bpf_m≠__£t_pö_∑th
(
m≠
, 
buf
);

2179 
	}
}

2181 
	$∑r£_btf_m≠_def
(c⁄° *
m≠_«me
, 
btf
 *btf,

2182 c⁄° 
btf_ty≥
 *
def_t
, 
boﬁ
 
°ri˘
,

2183 
btf_m≠_def
 *
m≠_def
, btf_m≠_de‡*
ö√r_def
)

2185 c⁄° 
btf_ty≥
 *
t
;

2186 c⁄° 
btf_membî
 *
m
;

2187 
boﬁ
 
is_ö√r
 = 
ö√r_def
 =
NULL
;

2188 
vÀn
, 
i
;

2190 
vÀn
 = 
	`btf_vÀn
(
def_t
);

2191 
m
 = 
	`btf_membîs
(
def_t
);

2192 
i
 = 0; i < 
vÀn
; i++, 
m
++) {

2193 c⁄° *
«me
 = 
	`btf__«me_by_off£t
(
btf
, 
m
->
«me_off
);

2195 i‡(!
«me
) {

2196 
	`¥_w¨n
("m≠ '%s': invÆid fõld #%d.\n", 
m≠_«me
, 
i
);

2197  -
EINVAL
;

2199 i‡(
	`°rcmp
(
«me
, "type") == 0) {

2200 i‡(!
	`gë_m≠_fõld_öt
(
m≠_«me
, 
btf
, 
m
, &
m≠_def
->
m≠_ty≥
))

2201  -
EINVAL
;

2202 
m≠_def
->
∑πs
 |
MAP_DEF_MAP_TYPE
;

2203 } i‡(
	`°rcmp
(
«me
, "max_entries") == 0) {

2204 i‡(!
	`gë_m≠_fõld_öt
(
m≠_«me
, 
btf
, 
m
, &
m≠_def
->
max_íåõs
))

2205  -
EINVAL
;

2206 
m≠_def
->
∑πs
 |
MAP_DEF_MAX_ENTRIES
;

2207 } i‡(
	`°rcmp
(
«me
, "map_flags") == 0) {

2208 i‡(!
	`gë_m≠_fõld_öt
(
m≠_«me
, 
btf
, 
m
, &
m≠_def
->
m≠_Êags
))

2209  -
EINVAL
;

2210 
m≠_def
->
∑πs
 |
MAP_DEF_MAP_FLAGS
;

2211 } i‡(
	`°rcmp
(
«me
, "numa_node") == 0) {

2212 i‡(!
	`gë_m≠_fõld_öt
(
m≠_«me
, 
btf
, 
m
, &
m≠_def
->
numa_node
))

2213  -
EINVAL
;

2214 
m≠_def
->
∑πs
 |
MAP_DEF_NUMA_NODE
;

2215 } i‡(
	`°rcmp
(
«me
, "key_size") == 0) {

2216 
__u32
 
sz
;

2218 i‡(!
	`gë_m≠_fõld_öt
(
m≠_«me
, 
btf
, 
m
, &
sz
))

2219  -
EINVAL
;

2220 i‡(
m≠_def
->
key_size
 && m≠_def->key_sizê!
sz
) {

2221 
	`¥_w¨n
("map '%s': conflicting key size %u != %u.\n",

2222 
m≠_«me
, 
m≠_def
->
key_size
, 
sz
);

2223  -
EINVAL
;

2225 
m≠_def
->
key_size
 = 
sz
;

2226 
m≠_def
->
∑πs
 |
MAP_DEF_KEY_SIZE
;

2227 } i‡(
	`°rcmp
(
«me
, "key") == 0) {

2228 
__s64
 
sz
;

2230 
t
 = 
	`btf__ty≥_by_id
(
btf
, 
m
->
ty≥
);

2231 i‡(!
t
) {

2232 
	`¥_w¨n
("map '%s': keyÅype [%d]Çot found.\n",

2233 
m≠_«me
, 
m
->
ty≥
);

2234  -
EINVAL
;

2236 i‡(!
	`btf_is_±r
(
t
)) {

2237 
	`¥_w¨n
("map '%s': key spec isÇot PTR: %s.\n",

2238 
m≠_«me
, 
	`btf_köd_°r
(
t
));

2239  -
EINVAL
;

2241 
sz
 = 
	`btf__ªsﬁve_size
(
btf
, 
t
->
ty≥
);

2242 i‡(
sz
 < 0) {

2243 
	`¥_w¨n
("map '%s': can't determine key size forÅype [%u]: %zd.\n",

2244 
m≠_«me
, 
t
->
ty≥
, (
ssize_t
)
sz
);

2245  
sz
;

2247 i‡(
m≠_def
->
key_size
 && m≠_def->key_sizê!
sz
) {

2248 
	`¥_w¨n
("map '%s': conflicting key size %u != %zd.\n",

2249 
m≠_«me
, 
m≠_def
->
key_size
, (
ssize_t
)
sz
);

2250  -
EINVAL
;

2252 
m≠_def
->
key_size
 = 
sz
;

2253 
m≠_def
->
key_ty≥_id
 = 
t
->
ty≥
;

2254 
m≠_def
->
∑πs
 |
MAP_DEF_KEY_SIZE
 | 
MAP_DEF_KEY_TYPE
;

2255 } i‡(
	`°rcmp
(
«me
, "value_size") == 0) {

2256 
__u32
 
sz
;

2258 i‡(!
	`gë_m≠_fõld_öt
(
m≠_«me
, 
btf
, 
m
, &
sz
))

2259  -
EINVAL
;

2260 i‡(
m≠_def
->
vÆue_size
 && m≠_def->vÆue_sizê!
sz
) {

2261 
	`¥_w¨n
("map '%s': conflicting value size %u != %u.\n",

2262 
m≠_«me
, 
m≠_def
->
vÆue_size
, 
sz
);

2263  -
EINVAL
;

2265 
m≠_def
->
vÆue_size
 = 
sz
;

2266 
m≠_def
->
∑πs
 |
MAP_DEF_VALUE_SIZE
;

2267 } i‡(
	`°rcmp
(
«me
, "value") == 0) {

2268 
__s64
 
sz
;

2270 
t
 = 
	`btf__ty≥_by_id
(
btf
, 
m
->
ty≥
);

2271 i‡(!
t
) {

2272 
	`¥_w¨n
("map '%s': valueÅype [%d]Çot found.\n",

2273 
m≠_«me
, 
m
->
ty≥
);

2274  -
EINVAL
;

2276 i‡(!
	`btf_is_±r
(
t
)) {

2277 
	`¥_w¨n
("map '%s': value spec isÇot PTR: %s.\n",

2278 
m≠_«me
, 
	`btf_köd_°r
(
t
));

2279  -
EINVAL
;

2281 
sz
 = 
	`btf__ªsﬁve_size
(
btf
, 
t
->
ty≥
);

2282 i‡(
sz
 < 0) {

2283 
	`¥_w¨n
("map '%s': can't determine value size forÅype [%u]: %zd.\n",

2284 
m≠_«me
, 
t
->
ty≥
, (
ssize_t
)
sz
);

2285  
sz
;

2287 i‡(
m≠_def
->
vÆue_size
 && m≠_def->vÆue_sizê!
sz
) {

2288 
	`¥_w¨n
("map '%s': conflicting value size %u != %zd.\n",

2289 
m≠_«me
, 
m≠_def
->
vÆue_size
, (
ssize_t
)
sz
);

2290  -
EINVAL
;

2292 
m≠_def
->
vÆue_size
 = 
sz
;

2293 
m≠_def
->
vÆue_ty≥_id
 = 
t
->
ty≥
;

2294 
m≠_def
->
∑πs
 |
MAP_DEF_VALUE_SIZE
 | 
MAP_DEF_VALUE_TYPE
;

2296 i‡(
	`°rcmp
(
«me
, "values") == 0) {

2297 
boﬁ
 
is_m≠_ö_m≠
 = 
	`bpf_m≠_ty≥__is_m≠_ö_m≠
(
m≠_def
->
m≠_ty≥
);

2298 
boﬁ
 
is_¥og_¨øy
 = 
m≠_def
->
m≠_ty≥
 =
BPF_MAP_TYPE_PROG_ARRAY
;

2299 c⁄° *
desc
 = 
is_m≠_ö_m≠
 ? "map-in-map inner" : "prog-array value";

2300 
ö√r_m≠_«me
[128];

2301 
îr
;

2303 i‡(
is_ö√r
) {

2304 
	`¥_w¨n
("map '%s': multi-level inner mapsÇot supported.\n",

2305 
m≠_«me
);

2306  -
ENOTSUP
;

2308 i‡(
i
 !
vÀn
 - 1) {

2309 
	`¥_w¨n
("map '%s': '%s' member should beÜast.\n",

2310 
m≠_«me
, 
«me
);

2311  -
EINVAL
;

2313 i‡(!
is_m≠_ö_m≠
 && !
is_¥og_¨øy
) {

2314 
	`¥_w¨n
("map '%s': should be map-in-map orÖrog-array.\n",

2315 
m≠_«me
);

2316  -
ENOTSUP
;

2318 i‡(
m≠_def
->
vÆue_size
 && map_def->value_size != 4) {

2319 
	`¥_w¨n
("map '%s': conflicting value size %u != 4.\n",

2320 
m≠_«me
, 
m≠_def
->
vÆue_size
);

2321  -
EINVAL
;

2323 
m≠_def
->
vÆue_size
 = 4;

2324 
t
 = 
	`btf__ty≥_by_id
(
btf
, 
m
->
ty≥
);

2325 i‡(!
t
) {

2326 
	`¥_w¨n
("map '%s': %sÅype [%d]Çot found.\n",

2327 
m≠_«me
, 
desc
, 
m
->
ty≥
);

2328  -
EINVAL
;

2330 i‡(!
	`btf_is_¨øy
(
t
Ë|| 
	`btf_¨øy
—)->
√Àms
) {

2331 
	`¥_w¨n
("map '%s': %s spec isÇotá zero-sizedárray.\n",

2332 
m≠_«me
, 
desc
);

2333  -
EINVAL
;

2335 
t
 = 
	`skù_mods_™d_ty≥defs
(
btf
, 
	`btf_¨øy
—)->
ty≥
, 
NULL
);

2336 i‡(!
	`btf_is_±r
(
t
)) {

2337 
	`¥_w¨n
("map '%s': %s def is of unexpected kind %s.\n",

2338 
m≠_«me
, 
desc
, 
	`btf_köd_°r
(
t
));

2339  -
EINVAL
;

2341 
t
 = 
	`skù_mods_™d_ty≥defs
(
btf
,Å->
ty≥
, 
NULL
);

2342 i‡(
is_¥og_¨øy
) {

2343 i‡(!
	`btf_is_func_¥Ÿo
(
t
)) {

2344 
	`¥_w¨n
("map '%s':Örog-array value def is of unexpected kind %s.\n",

2345 
m≠_«me
, 
	`btf_köd_°r
(
t
));

2346  -
EINVAL
;

2350 i‡(!
	`btf_is_°ru˘
(
t
)) {

2351 
	`¥_w¨n
("map '%s': map-in-map inner def is of unexpected kind %s.\n",

2352 
m≠_«me
, 
	`btf_köd_°r
(
t
));

2353  -
EINVAL
;

2356 
	`¢¥ötf
(
ö√r_m≠_«me
, (ö√r_m≠_«me), "%s.ö√r", 
m≠_«me
);

2357 
îr
 = 
	`∑r£_btf_m≠_def
(
ö√r_m≠_«me
, 
btf
, 
t
, 
°ri˘
, 
ö√r_def
, 
NULL
);

2358 i‡(
îr
)

2359  
îr
;

2361 
m≠_def
->
∑πs
 |
MAP_DEF_INNER_MAP
;

2362 } i‡(
	`°rcmp
(
«me
, "pinning") == 0) {

2363 
__u32
 
vÆ
;

2365 i‡(
is_ö√r
) {

2366 
	`¥_w¨n
("m≠ '%s': i¬î de‡ˇn'àbêpö√d.\n", 
m≠_«me
);

2367  -
EINVAL
;

2369 i‡(!
	`gë_m≠_fõld_öt
(
m≠_«me
, 
btf
, 
m
, &
vÆ
))

2370  -
EINVAL
;

2371 i‡(
vÆ
 !
LIBBPF_PIN_NONE
 && vÆ !
LIBBPF_PIN_BY_NAME
) {

2372 
	`¥_w¨n
("map '%s': invalidÖinning value %u.\n",

2373 
m≠_«me
, 
vÆ
);

2374  -
EINVAL
;

2376 
m≠_def
->
pönög
 = 
vÆ
;

2377 
m≠_def
->
∑πs
 |
MAP_DEF_PINNING
;

2378 } i‡(
	`°rcmp
(
«me
, "map_extra") == 0) {

2379 
__u32
 
m≠_exåa
;

2381 i‡(!
	`gë_m≠_fõld_öt
(
m≠_«me
, 
btf
, 
m
, &
m≠_exåa
))

2382  -
EINVAL
;

2383 
m≠_def
->
m≠_exåa
 = map_extra;

2384 
m≠_def
->
∑πs
 |
MAP_DEF_MAP_EXTRA
;

2386 i‡(
°ri˘
) {

2387 
	`¥_w¨n
("m≠ '%s': unknow¿fõld '%s'.\n", 
m≠_«me
, 
«me
);

2388  -
ENOTSUP
;

2390 
	`¥_debug
("m≠ '%s': ign‹ög unknow¿fõld '%s'.\n", 
m≠_«me
, 
«me
);

2394 i‡(
m≠_def
->
m≠_ty≥
 =
BPF_MAP_TYPE_UNSPEC
) {

2395 
	`¥_w¨n
("m≠ '%s': m≠Åy≥ i¢'à•ecifõd.\n", 
m≠_«me
);

2396  -
EINVAL
;

2400 
	}
}

2402 
	$fûl_m≠_‰om_def
(
bpf_m≠
 *
m≠
, c⁄° 
btf_m≠_def
 *
def
)

2404 
m≠
->
def
.
ty≥
 = def->
m≠_ty≥
;

2405 
m≠
->
def
.
key_size
 = def->key_size;

2406 
m≠
->
def
.
vÆue_size
 = def->value_size;

2407 
m≠
->
def
.
max_íåõs
 = def->max_entries;

2408 
m≠
->
def
.
m≠_Êags
 = def->map_flags;

2409 
m≠
->
m≠_exåa
 = 
def
->map_extra;

2411 
m≠
->
numa_node
 = 
def
->numa_node;

2412 
m≠
->
btf_key_ty≥_id
 = 
def
->
key_ty≥_id
;

2413 
m≠
->
btf_vÆue_ty≥_id
 = 
def
->
vÆue_ty≥_id
;

2415 i‡(
def
->
∑πs
 & 
MAP_DEF_MAP_TYPE
)

2416 
	`¥_debug
("m≠ '%s': foundÅy≥ = %u.\n", 
m≠
->
«me
, 
def
->
m≠_ty≥
);

2418 i‡(
def
->
∑πs
 & 
MAP_DEF_KEY_TYPE
)

2419 
	`¥_debug
("map '%s': found key [%u], sz = %u.\n",

2420 
m≠
->
«me
, 
def
->
key_ty≥_id
, def->
key_size
);

2421 i‡(
def
->
∑πs
 & 
MAP_DEF_KEY_SIZE
)

2422 
	`¥_debug
("m≠ '%s': found key_sizê%u.\n", 
m≠
->
«me
, 
def
->
key_size
);

2424 i‡(
def
->
∑πs
 & 
MAP_DEF_VALUE_TYPE
)

2425 
	`¥_debug
("map '%s': found value [%u], sz = %u.\n",

2426 
m≠
->
«me
, 
def
->
vÆue_ty≥_id
, def->
vÆue_size
);

2427 i‡(
def
->
∑πs
 & 
MAP_DEF_VALUE_SIZE
)

2428 
	`¥_debug
("m≠ '%s': found vÆue_sizê%u.\n", 
m≠
->
«me
, 
def
->
vÆue_size
);

2430 i‡(
def
->
∑πs
 & 
MAP_DEF_MAX_ENTRIES
)

2431 
	`¥_debug
("m≠ '%s': found max_íåõ†%u.\n", 
m≠
->
«me
, 
def
->
max_íåõs
);

2432 i‡(
def
->
∑πs
 & 
MAP_DEF_MAP_FLAGS
)

2433 
	`¥_debug
("m≠ '%s': found m≠_Êag†0x%x.\n", 
m≠
->
«me
, 
def
->
m≠_Êags
);

2434 i‡(
def
->
∑πs
 & 
MAP_DEF_MAP_EXTRA
)

2435 
	`¥_debug
("m≠ '%s': found m≠_exå®0x%Œx.\n", 
m≠
->
«me
,

2436 ()
def
->
m≠_exåa
);

2437 i‡(
def
->
∑πs
 & 
MAP_DEF_PINNING
)

2438 
	`¥_debug
("m≠ '%s': foundÖönög = %u.\n", 
m≠
->
«me
, 
def
->
pönög
);

2439 i‡(
def
->
∑πs
 & 
MAP_DEF_NUMA_NODE
)

2440 
	`¥_debug
("m≠ '%s': foundÇuma_nodê%u.\n", 
m≠
->
«me
, 
def
->
numa_node
);

2442 i‡(
def
->
∑πs
 & 
MAP_DEF_INNER_MAP
)

2443 
	`¥_debug
("m≠ '%s': found i¬î m≠ deföôi⁄.\n", 
m≠
->
«me
);

2444 
	}
}

2446 c⁄° *
	$btf_v¨_lökage_°r
(
__u32
 
lökage
)

2448 
lökage
) {

2449 
BTF_VAR_STATIC
:  "static";

2450 
BTF_VAR_GLOBAL_ALLOCATED
:  "global";

2451 
BTF_VAR_GLOBAL_EXTERN
:  "extern";

2454 
	}
}

2456 
	$bpf_obje˘__öô_u£r_btf_m≠
(
bpf_obje˘
 *
obj
,

2457 c⁄° 
btf_ty≥
 *
£c
,

2458 
v¨_idx
, 
£c_idx
,

2459 c⁄° 
Elf_D©a
 *
d©a
, 
boﬁ
 
°ri˘
,

2460 c⁄° *
pö_roŸ_∑th
)

2462 
btf_m≠_def
 
m≠_def
 = {}, 
ö√r_def
 = {};

2463 c⁄° 
btf_ty≥
 *
v¨
, *
def
;

2464 c⁄° 
btf_v¨_£cöfo
 *
vi
;

2465 c⁄° 
btf_v¨
 *
v¨_exåa
;

2466 c⁄° *
m≠_«me
;

2467 
bpf_m≠
 *
m≠
;

2468 
îr
;

2470 
vi
 = 
	`btf_v¨_£cöfos
(
£c
Ë+ 
v¨_idx
;

2471 
v¨
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
vi
->
ty≥
);

2472 
v¨_exåa
 = 
	`btf_v¨
(
v¨
);

2473 
m≠_«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
v¨
->
«me_off
);

2475 i‡(
m≠_«me
 =
NULL
 || map_name[0] == '\0') {

2476 
	`¥_w¨n
("m≠ #%d:Ém±yÇame.\n", 
v¨_idx
);

2477  -
EINVAL
;

2479 i‡((
__u64
)
vi
->
off£t
 + vi->
size
 > 
d©a
->
d_size
) {

2480 
	`¥_w¨n
("m≠ '%s' BTF d©®i†c‹ru±ed.\n", 
m≠_«me
);

2481  -
EINVAL
;

2483 i‡(!
	`btf_is_v¨
(
v¨
)) {

2484 
	`¥_w¨n
("map '%s': unexpected var kind %s.\n",

2485 
m≠_«me
, 
	`btf_köd_°r
(
v¨
));

2486  -
EINVAL
;

2488 i‡(
v¨_exåa
->
lökage
 !
BTF_VAR_GLOBAL_ALLOCATED
) {

2489 
	`¥_w¨n
("map '%s': unsupported mapÜinkage %s.\n",

2490 
m≠_«me
, 
	`btf_v¨_lökage_°r
(
v¨_exåa
->
lökage
));

2491  -
EOPNOTSUPP
;

2494 
def
 = 
	`skù_mods_™d_ty≥defs
(
obj
->
btf
, 
v¨
->
ty≥
, 
NULL
);

2495 i‡(!
	`btf_is_°ru˘
(
def
)) {

2496 
	`¥_w¨n
("map '%s': unexpected def kind %s.\n",

2497 
m≠_«me
, 
	`btf_köd_°r
(
v¨
));

2498  -
EINVAL
;

2500 i‡(
def
->
size
 > 
vi
->size) {

2501 
	`¥_w¨n
("m≠ '%s': invÆid de‡size.\n", 
m≠_«me
);

2502  -
EINVAL
;

2505 
m≠
 = 
	`bpf_obje˘__add_m≠
(
obj
);

2506 i‡(
	`IS_ERR
(
m≠
))

2507  
	`PTR_ERR
(
m≠
);

2508 
m≠
->
«me
 = 
	`°rdup
(
m≠_«me
);

2509 i‡(!
m≠
->
«me
) {

2510 
	`¥_w¨n
("m≠ '%s': faûedÅÿÆlo¯m≠Çame.\n", 
m≠_«me
);

2511  -
ENOMEM
;

2513 
m≠
->
libbpf_ty≥
 = 
LIBBPF_MAP_UNSPEC
;

2514 
m≠
->
def
.
ty≥
 = 
BPF_MAP_TYPE_UNSPEC
;

2515 
m≠
->
£c_idx
 = sec_idx;

2516 
m≠
->
£c_off£t
 = 
vi
->
off£t
;

2517 
m≠
->
btf_v¨_idx
 = 
v¨_idx
;

2518 
	`¥_debug
("map '%s':át sec_idx %d, offset %zu.\n",

2519 
m≠_«me
, 
m≠
->
£c_idx
, m≠->
£c_off£t
);

2521 
îr
 = 
	`∑r£_btf_m≠_def
(
m≠
->
«me
, 
obj
->
btf
, 
def
, 
°ri˘
, &
m≠_def
, &
ö√r_def
);

2522 i‡(
îr
)

2523  
îr
;

2525 
	`fûl_m≠_‰om_def
(
m≠
, &
m≠_def
);

2527 i‡(
m≠_def
.
pönög
 =
LIBBPF_PIN_BY_NAME
) {

2528 
îr
 = 
	`buûd_m≠_pö_∑th
(
m≠
, 
pö_roŸ_∑th
);

2529 i‡(
îr
) {

2530 
	`¥_w¨n
("m≠ '%s': couldn'àbuûdÖöÖ©h.\n", 
m≠
->
«me
);

2531  
îr
;

2535 i‡(
m≠_def
.
∑πs
 & 
MAP_DEF_INNER_MAP
) {

2536 
m≠
->
ö√r_m≠
 = 
	`ˇŒoc
(1, (*map->inner_map));

2537 i‡(!
m≠
->
ö√r_m≠
)

2538  -
ENOMEM
;

2539 
m≠
->
ö√r_m≠
->
fd
 = -1;

2540 
m≠
->
ö√r_m≠
->
£c_idx
 = sec_idx;

2541 
m≠
->
ö√r_m≠
->
«me
 = 
	`mÆloc
(
	`°æí
(
m≠_«me
) + (".inner") + 1);

2542 i‡(!
m≠
->
ö√r_m≠
->
«me
)

2543  -
ENOMEM
;

2544 
	`•rötf
(
m≠
->
ö√r_m≠
->
«me
, "%s.ö√r", 
m≠_«me
);

2546 
	`fûl_m≠_‰om_def
(
m≠
->
ö√r_m≠
, &
ö√r_def
);

2549 
îr
 = 
	`bpf_m≠_föd_btf_öfo
(
obj
, 
m≠
);

2550 i‡(
îr
)

2551  
îr
;

2554 
	}
}

2556 
	$bpf_obje˘__öô_u£r_btf_m≠s
(
bpf_obje˘
 *
obj
, 
boﬁ
 
°ri˘
,

2557 c⁄° *
pö_roŸ_∑th
)

2559 c⁄° 
btf_ty≥
 *
£c
 = 
NULL
;

2560 
ƒ_ty≥s
, 
i
, 
vÀn
, 
îr
;

2561 c⁄° 
btf_ty≥
 *
t
;

2562 c⁄° *
«me
;

2563 
Elf_D©a
 *
d©a
;

2564 
Elf_S˙
 *
s˙
;

2566 i‡(
obj
->
efûe
.
btf_m≠s_shndx
 < 0)

2569 
s˙
 = 
	`ñf_£c_by_idx
(
obj
, obj->
efûe
.
btf_m≠s_shndx
);

2570 
d©a
 = 
	`ñf_£c_d©a
(
obj
, 
s˙
);

2571 i‡(!
s˙
 || !
d©a
) {

2572 
	`¥_w¨n
("elf: failedÅo get %s map definitions for %s\n",

2573 
MAPS_ELF_SEC
, 
obj
->
∑th
);

2574  -
EINVAL
;

2577 
ƒ_ty≥s
 = 
	`btf__ty≥_˙t
(
obj
->
btf
);

2578 
i
 = 1; i < 
ƒ_ty≥s
; i++) {

2579 
t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
i
);

2580 i‡(!
	`btf_is_d©a£c
(
t
))

2582 
«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
t
->
«me_off
);

2583 i‡(
	`°rcmp
(
«me
, 
MAPS_ELF_SEC
) == 0) {

2584 
£c
 = 
t
;

2585 
obj
->
efûe
.
btf_m≠s_£c_btf_id
 = 
i
;

2590 i‡(!
£c
) {

2591 
	`¥_w¨n
("DATASEC '%s'ÇŸ found.\n", 
MAPS_ELF_SEC
);

2592  -
ENOENT
;

2595 
vÀn
 = 
	`btf_vÀn
(
£c
);

2596 
i
 = 0; i < 
vÀn
; i++) {

2597 
îr
 = 
	`bpf_obje˘__öô_u£r_btf_m≠
(
obj
, 
£c
, 
i
,

2598 
obj
->
efûe
.
btf_m≠s_shndx
,

2599 
d©a
, 
°ri˘
,

2600 
pö_roŸ_∑th
);

2601 i‡(
îr
)

2602  
îr
;

2606 
	}
}

2608 
	$bpf_obje˘__öô_m≠s
(
bpf_obje˘
 *
obj
,

2609 c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
)

2611 c⁄° *
pö_roŸ_∑th
;

2612 
boﬁ
 
°ri˘
;

2613 
îr
;

2615 
°ri˘
 = !
	`OPTS_GET
(
›ts
, 
ªœxed_m≠s
, 
Ál£
);

2616 
pö_roŸ_∑th
 = 
	`OPTS_GET
(
›ts
,Öö_roŸ_∑th, 
NULL
);

2618 
îr
 = 
	`bpf_obje˘__öô_u£r_m≠s
(
obj
, 
°ri˘
);

2619 
îr
 =Éº ?: 
	`bpf_obje˘__öô_u£r_btf_m≠s
(
obj
, 
°ri˘
, 
pö_roŸ_∑th
);

2620 
îr
 =Éº ?: 
	`bpf_obje˘__öô_globÆ_d©a_m≠s
(
obj
);

2621 
îr
 =Éº ?: 
	`bpf_obje˘__öô_kc⁄fig_m≠
(
obj
);

2622 
îr
 =Éº ?: 
	`bpf_obje˘__öô_°ru˘_›s_m≠s
(
obj
);

2624  
îr
;

2625 
	}
}

2627 
boﬁ
 
	$£˘i⁄_have_execö°r
(
bpf_obje˘
 *
obj
, 
idx
)

2629 
Elf64_Shdr
 *
sh
;

2631 
sh
 = 
	`ñf_£c_hdr
(
obj
, 
	`ñf_£c_by_idx
(obj, 
idx
));

2632 i‡(!
sh
)

2633  
Ál£
;

2635  
sh
->
sh_Êags
 & 
SHF_EXECINSTR
;

2636 
	}
}

2638 
boﬁ
 
	$btf_√eds_ßnôiz©i⁄
(
bpf_obje˘
 *
obj
)

2640 
boﬁ
 
has_func_globÆ
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_GLOBAL_FUNC
);

2641 
boﬁ
 
has_d©a£c
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_DATASEC
);

2642 
boﬁ
 
has_Êﬂt
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_FLOAT
);

2643 
boﬁ
 
has_func
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_FUNC
);

2644 
boﬁ
 
has_de˛_èg
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_DECL_TAG
);

2645 
boﬁ
 
has_ty≥_èg
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_TYPE_TAG
);

2646 
boﬁ
 
has_íum64
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_ENUM64
);

2648  !
has_func
 || !
has_d©a£c
 || !
has_func_globÆ
 || !
has_Êﬂt
 ||

2649 !
has_de˛_èg
 || !
has_ty≥_èg
 || !
has_íum64
;

2650 
	}
}

2652 
	$bpf_obje˘__ßnôize_btf
(
bpf_obje˘
 *
obj
, 
btf
 *btf)

2654 
boﬁ
 
has_func_globÆ
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_GLOBAL_FUNC
);

2655 
boﬁ
 
has_d©a£c
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_DATASEC
);

2656 
boﬁ
 
has_Êﬂt
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_FLOAT
);

2657 
boﬁ
 
has_func
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_FUNC
);

2658 
boﬁ
 
has_de˛_èg
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_DECL_TAG
);

2659 
boﬁ
 
has_ty≥_èg
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_TYPE_TAG
);

2660 
boﬁ
 
has_íum64
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_ENUM64
);

2661 
__u32
 
íum64_∂a˚hﬁdî_id
 = 0;

2662 
btf_ty≥
 *
t
;

2663 
i
, 
j
, 
vÀn
;

2665 
i
 = 1; i < 
	`btf__ty≥_˙t
(
btf
); i++) {

2666 
t
 = (
btf_ty≥
 *)
	`btf__ty≥_by_id
(
btf
, 
i
);

2668 i‡((!
has_d©a£c
 && 
	`btf_is_v¨
(
t
)Ë|| (!
has_de˛_èg
 && 
	`btf_is_de˛_èg
(t))) {

2670 
t
->
öfo
 = 
	`BTF_INFO_ENC
(
BTF_KIND_INT
, 0, 0);

2676 
t
->
size
 = 1;

2677 *(*)(
t
 + 1Ë
	`BTF_INT_ENC
(0, 0, 8);

2678 } i‡(!
has_d©a£c
 && 
	`btf_is_d©a£c
(
t
)) {

2680 c⁄° 
btf_v¨_£cöfo
 *
v
 = 
	`btf_v¨_£cöfos
(
t
);

2681 
btf_membî
 *
m
 = 
	`btf_membîs
(
t
);

2682 
btf_ty≥
 *
vt
;

2683 *
«me
;

2685 
«me
 = (*)
	`btf__«me_by_off£t
(
btf
, 
t
->
«me_off
);

2686 *
«me
) {

2687 i‡(*
«me
 == '.')

2688 *
«me
 = '_';

2689 
«me
++;

2692 
vÀn
 = 
	`btf_vÀn
(
t
);

2693 
t
->
öfo
 = 
	`BTF_INFO_ENC
(
BTF_KIND_STRUCT
, 0, 
vÀn
);

2694 
j
 = 0; j < 
vÀn
; j++, 
v
++, 
m
++) {

2696 
m
->
off£t
 = 
v
->offset * 8;

2697 
m
->
ty≥
 = 
v
->type;

2699 
vt
 = (*)
	`btf__ty≥_by_id
(
btf
, 
v
->
ty≥
);

2700 
m
->
«me_off
 = 
vt
->name_off;

2702 } i‡(!
has_func
 && 
	`btf_is_func_¥Ÿo
(
t
)) {

2704 
vÀn
 = 
	`btf_vÀn
(
t
);

2705 
t
->
öfo
 = 
	`BTF_INFO_ENC
(
BTF_KIND_ENUM
, 0, 
vÀn
);

2706 
t
->
size
 = (
__u32
);

2707 } i‡(!
has_func
 && 
	`btf_is_func
(
t
)) {

2709 
t
->
öfo
 = 
	`BTF_INFO_ENC
(
BTF_KIND_TYPEDEF
, 0, 0);

2710 } i‡(!
has_func_globÆ
 && 
	`btf_is_func
(
t
)) {

2712 
t
->
öfo
 = 
	`BTF_INFO_ENC
(
BTF_KIND_FUNC
, 0, 0);

2713 } i‡(!
has_Êﬂt
 && 
	`btf_is_Êﬂt
(
t
)) {

2718 
t
->
«me_off
 = 0;

2719 
t
->
öfo
 = 
	`BTF_INFO_ENC
(
BTF_KIND_STRUCT
, 0, 0);

2720 } i‡(!
has_ty≥_èg
 && 
	`btf_is_ty≥_èg
(
t
)) {

2722 
t
->
«me_off
 = 0;

2723 
t
->
öfo
 = 
	`BTF_INFO_ENC
(
BTF_KIND_CONST
, 0, 0);

2724 } i‡(!
has_íum64
 && 
	`btf_is_íum
(
t
)) {

2726 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
	`btf_köd
—), 
	`btf_vÀn
—), 
Ál£
);

2727 } i‡(!
has_íum64
 && 
	`btf_is_íum64
(
t
)) {

2729 
btf_membî
 *
m
;

2731 i‡(
íum64_∂a˚hﬁdî_id
 == 0) {

2732 
íum64_∂a˚hﬁdî_id
 = 
	`btf__add_öt
(
btf
, "enum64_placeholder", 1, 0);

2733 i‡(
íum64_∂a˚hﬁdî_id
 < 0)

2736 
t
 = (
btf_ty≥
 *)
	`btf__ty≥_by_id
(
btf
, 
i
);

2739 
m
 = 
	`btf_membîs
(
t
);

2740 
vÀn
 = 
	`btf_vÀn
(
t
);

2741 
t
->
öfo
 = 
	`BTF_INFO_ENC
(
BTF_KIND_UNION
, 0, 
vÀn
);

2742 
j
 = 0; j < 
vÀn
; j++, 
m
++) {

2743 
m
->
ty≥
 = 
íum64_∂a˚hﬁdî_id
;

2744 
m
->
off£t
 = 0;

2750 
	}
}

2752 
boﬁ
 
	$libbpf_√eds_btf
(c⁄° 
bpf_obje˘
 *
obj
)

2754  
obj
->
efûe
.
btf_m≠s_shndx
 >= 0 ||

2755 
obj
->
efûe
.
°_›s_shndx
 >= 0 ||

2756 
obj
->
ƒ_exã∫
 > 0;

2757 
	}
}

2759 
boﬁ
 
	$kî√l_√eds_btf
(c⁄° 
bpf_obje˘
 *
obj
)

2761  
obj
->
efûe
.
°_›s_shndx
 >= 0;

2762 
	}
}

2764 
	$bpf_obje˘__öô_btf
(
bpf_obje˘
 *
obj
,

2765 
Elf_D©a
 *
btf_d©a
,

2766 
Elf_D©a
 *
btf_ext_d©a
)

2768 
îr
 = -
ENOENT
;

2770 i‡(
btf_d©a
) {

2771 
obj
->
btf
 = 
	`btf__√w
(
btf_d©a
->
d_buf
, btf_d©a->
d_size
);

2772 
îr
 = 
	`libbpf_gë_îr‹
(
obj
->
btf
);

2773 i‡(
îr
) {

2774 
obj
->
btf
 = 
NULL
;

2775 
	`¥_w¨n
("Eº‹Üﬂdög ELF se˘i⁄ %s: %d.\n", 
BTF_ELF_SEC
, 
îr
);

2776 
out
;

2779 
	`btf__£t_poöãr_size
(
obj
->
btf
, 8);

2781 i‡(
btf_ext_d©a
) {

2782 
btf_ext_öfo
 *
ext_£gs
[3];

2783 
£g_num
, 
£c_num
;

2785 i‡(!
obj
->
btf
) {

2786 
	`¥_debug
("Ignore ELF section %s because its depending ELF section %s isÇot found.\n",

2787 
BTF_EXT_ELF_SEC
, 
BTF_ELF_SEC
);

2788 
out
;

2790 
obj
->
btf_ext
 = 
	`btf_ext__√w
(
btf_ext_d©a
->
d_buf
, btf_ext_d©a->
d_size
);

2791 
îr
 = 
	`libbpf_gë_îr‹
(
obj
->
btf_ext
);

2792 i‡(
îr
) {

2793 
	`¥_w¨n
("ErrorÜoading ELF section %s: %d. Ignoredánd continue.\n",

2794 
BTF_EXT_ELF_SEC
, 
îr
);

2795 
obj
->
btf_ext
 = 
NULL
;

2796 
out
;

2800 
ext_£gs
[0] = &
obj
->
btf_ext
->
func_öfo
;

2801 
ext_£gs
[1] = &
obj
->
btf_ext
->
löe_öfo
;

2802 
ext_£gs
[2] = &
obj
->
btf_ext
->
c‹e_ªlo_öfo
;

2803 
£g_num
 = 0; seg_num < 
	`ARRAY_SIZE
(
ext_£gs
); seg_num++) {

2804 
btf_ext_öfo
 *
£g
 = 
ext_£gs
[
£g_num
];

2805 c⁄° 
btf_ext_öfo_£c
 *
£c
;

2806 c⁄° *
£c_«me
;

2807 
Elf_S˙
 *
s˙
;

2809 i‡(
£g
->
£c_˙t
 == 0)

2812 
£g
->
£c_idxs
 = 
	`ˇŒoc
(£g->
£c_˙t
, (*seg->sec_idxs));

2813 i‡(!
£g
->
£c_idxs
) {

2814 
îr
 = -
ENOMEM
;

2815 
out
;

2818 
£c_num
 = 0;

2819 
	`f‹_óch_btf_ext_£c
(
£g
, 
£c
) {

2823 
£c_num
++;

2825 
£c_«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
£c
->
£c_«me_off
);

2826 i‡(
	`°r_is_em±y
(
£c_«me
))

2828 
s˙
 = 
	`ñf_£c_by_«me
(
obj
, 
£c_«me
);

2829 i‡(!
s˙
)

2832 
£g
->
£c_idxs
[
£c_num
 - 1] = 
	`ñf_ndxs˙
(
s˙
);

2836 
out
:

2837 i‡(
îr
 && 
	`libbpf_√eds_btf
(
obj
)) {

2838 
	`¥_w¨n
("BTF isÑequired, but is missing or corrupted.\n");

2839  
îr
;

2842 
	}
}

2844 
	$com∑ª_vsi_off
(c⁄° *
_a
, c⁄° *
_b
)

2846 c⁄° 
btf_v¨_£cöfo
 *
a
 = 
_a
;

2847 c⁄° 
btf_v¨_£cöfo
 *
b
 = 
_b
;

2849  
a
->
off£t
 - 
b
->offset;

2850 
	}
}

2852 
	$btf_fixup_d©a£c
(
bpf_obje˘
 *
obj
, 
btf
 *btf,

2853 
btf_ty≥
 *
t
)

2855 
__u32
 
size
 = 0, 
off
 = 0, 
i
, 
v¨s
 = 
	`btf_vÀn
(
t
);

2856 c⁄° *
«me
 = 
	`btf__«me_by_off£t
(
btf
, 
t
->
«me_off
);

2857 c⁄° 
btf_ty≥
 *
t_v¨
;

2858 
btf_v¨_£cöfo
 *
vsi
;

2859 c⁄° 
btf_v¨
 *
v¨
;

2860 
ªt
;

2862 i‡(!
«me
) {

2863 
	`¥_debug
("NoÇame found in string section for DATASEC kind.\n");

2864  -
ENOENT
;

2870 i‡(
t
->
size
)

2871 
s‹t_v¨s
;

2873 
ªt
 = 
	`föd_ñf_£c_sz
(
obj
, 
«me
, &
size
);

2874 i‡(
ªt
 || !
size
) {

2875 
	`¥_debug
("InvÆid sizêf‹ se˘i⁄ %s: %u byãs\n", 
«me
, 
size
);

2876  -
ENOENT
;

2879 
t
->
size
 = size;

2881 
i
 = 0, 
vsi
 = 
	`btf_v¨_£cöfos
(
t
); i < 
v¨s
; i++, vsi++) {

2882 
t_v¨
 = 
	`btf__ty≥_by_id
(
btf
, 
vsi
->
ty≥
);

2883 i‡(!
t_v¨
 || !
	`btf_is_v¨
(t_var)) {

2884 
	`¥_debug
("N⁄-VARÅy≥ sì¿ö se˘i⁄ %s\n", 
«me
);

2885  -
EINVAL
;

2888 
v¨
 = 
	`btf_v¨
(
t_v¨
);

2889 i‡(
v¨
->
lökage
 =
BTF_VAR_STATIC
)

2892 
«me
 = 
	`btf__«me_by_off£t
(
btf
, 
t_v¨
->
«me_off
);

2893 i‡(!
«me
) {

2894 
	`¥_debug
("NoÇame found in string section for VAR kind\n");

2895  -
ENOENT
;

2898 
ªt
 = 
	`föd_ñf_v¨_off£t
(
obj
, 
«me
, &
off
);

2899 i‡(
ªt
) {

2900 
	`¥_debug
("No offset found in symbolÅable for VAR %s\n",

2901 
«me
);

2902  -
ENOENT
;

2905 
vsi
->
off£t
 = 
off
;

2908 
s‹t_v¨s
:

2909 
	`qs‹t
(
	`btf_v¨_£cöfos
(
t
), 
v¨s
, (*
vsi
), 
com∑ª_vsi_off
);

2911 
	}
}

2913 
	$btf_föÆize_d©a
(
bpf_obje˘
 *
obj
, 
btf
 *btf)

2915 
îr
 = 0;

2916 
__u32
 
i
, 
n
 = 
	`btf__ty≥_˙t
(
btf
);

2918 
i
 = 1; i < 
n
; i++) {

2919 
btf_ty≥
 *
t
 = 
	`btf_ty≥_by_id
(
btf
, 
i
);

2926 i‡(
	`btf_is_d©a£c
(
t
)) {

2927 
îr
 = 
	`btf_fixup_d©a£c
(
obj
, 
btf
, 
t
);

2928 i‡(
îr
)

2933  
	`libbpf_îr
(
îr
);

2934 
	}
}

2936 
	$btf__föÆize_d©a
(
bpf_obje˘
 *
obj
, 
btf
 *btf)

2938  
	`btf_föÆize_d©a
(
obj
, 
btf
);

2939 
	}
}

2941 
	$bpf_obje˘__föÆize_btf
(
bpf_obje˘
 *
obj
)

2943 
îr
;

2945 i‡(!
obj
->
btf
)

2948 
îr
 = 
	`btf_föÆize_d©a
(
obj
, obj->
btf
);

2949 i‡(
îr
) {

2950 
	`¥_w¨n
("Eº‹ föÆizög %s: %d.\n", 
BTF_ELF_SEC
, 
îr
);

2951  
îr
;

2955 
	}
}

2957 
boﬁ
 
	$¥og_√eds_vmlöux_btf
(
bpf_¥ogøm
 *
¥og
)

2959 i‡(
¥og
->
ty≥
 =
BPF_PROG_TYPE_STRUCT_OPS
 ||

2960 
¥og
->
ty≥
 =
BPF_PROG_TYPE_LSM
)

2961  
åue
;

2966 i‡(
¥og
->
ty≥
 =
BPF_PROG_TYPE_TRACING
 && !¥og->
©èch_¥og_fd
)

2967  
åue
;

2969  
Ál£
;

2970 
	}
}

2972 
boﬁ
 
	$obj_√eds_vmlöux_btf
(c⁄° 
bpf_obje˘
 *
obj
)

2974 
bpf_¥ogøm
 *
¥og
;

2975 
i
;

2980 i‡(
obj
->
btf_ext
 && obj->btf_ext->
c‹e_ªlo_öfo
.
Àn
 && !obj->
btf_cu°om_∑th
)

2981  
åue
;

2984 
i
 = 0; i < 
obj
->
ƒ_exã∫
; i++) {

2985 c⁄° 
exã∫_desc
 *
ext
;

2987 
ext
 = &
obj
->
exã∫s
[
i
];

2988 i‡(
ext
->
ty≥
 =
EXT_KSYM
 &&Éxt->
ksym
.
ty≥_id
)

2989  
åue
;

2992 
	`bpf_obje˘__f‹_óch_¥ogøm
(
¥og
, 
obj
) {

2993 i‡(!
¥og
->
autﬁﬂd
)

2995 i‡(
	`¥og_√eds_vmlöux_btf
(
¥og
))

2996  
åue
;

2999  
Ál£
;

3000 
	}
}

3002 
	$bpf_obje˘__lﬂd_vmlöux_btf
(
bpf_obje˘
 *
obj
, 
boﬁ
 
f‹˚
)

3004 
îr
;

3007 i‡(
obj
->
btf_vmlöux
 || obj->
gí_lﬂdî
)

3010 i‡(!
f‹˚
 && !
	`obj_√eds_vmlöux_btf
(
obj
))

3013 
obj
->
btf_vmlöux
 = 
	`btf__lﬂd_vmlöux_btf
();

3014 
îr
 = 
	`libbpf_gë_îr‹
(
obj
->
btf_vmlöux
);

3015 i‡(
îr
) {

3016 
	`¥_w¨n
("Eº‹Üﬂdög vmlöux BTF: %d\n", 
îr
);

3017 
obj
->
btf_vmlöux
 = 
NULL
;

3018  
îr
;

3021 
	}
}

3023 
	$bpf_obje˘__ßnôize_™d_lﬂd_btf
(
bpf_obje˘
 *
obj
)

3025 
btf
 *
kîn_btf
 = 
obj
->btf;

3026 
boﬁ
 
btf_m™d©‹y
, 
ßnôize
;

3027 
i
, 
îr
 = 0;

3029 i‡(!
obj
->
btf
)

3032 i‡(!
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF
)) {

3033 i‡(
	`kî√l_√eds_btf
(
obj
)) {

3034 
îr
 = -
EOPNOTSUPP
;

3035 
ªp‹t
;

3037 
	`¥_debug
("Kernel doesn't support BTF, skipping uploading it.\n");

3049 
i
 = 0; i < 
obj
->
ƒ_¥ogøms
; i++) {

3050 
bpf_¥ogøm
 *
¥og
 = &
obj
->
¥ogøms
[
i
];

3051 
btf_ty≥
 *
t
;

3052 c⁄° *
«me
;

3053 
j
, 
n
;

3055 i‡(!
¥og
->
m¨k_btf_°©ic
 || !
	`¥og_is_sub¥og
(
obj
,Örog))

3058 
n
 = 
	`btf__ty≥_˙t
(
obj
->
btf
);

3059 
j
 = 1; j < 
n
; j++) {

3060 
t
 = 
	`btf_ty≥_by_id
(
obj
->
btf
, 
j
);

3061 i‡(!
	`btf_is_func
(
t
Ë|| 
	`btf_func_lökage
—Ë!
BTF_FUNC_GLOBAL
)

3064 
«me
 = 
	`btf__°r_by_off£t
(
obj
->
btf
, 
t
->
«me_off
);

3065 i‡(
	`°rcmp
(
«me
, 
¥og
->name) != 0)

3068 
t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_FUNC
, 
BTF_FUNC_STATIC
, 0);

3073 
ßnôize
 = 
	`btf_√eds_ßnôiz©i⁄
(
obj
);

3074 i‡(
ßnôize
) {

3075 c⁄° *
øw_d©a
;

3076 
__u32
 
sz
;

3079 
øw_d©a
 = 
	`btf__øw_d©a
(
obj
->
btf
, &
sz
);

3080 
kîn_btf
 = 
	`btf__√w
(
øw_d©a
, 
sz
);

3081 
îr
 = 
	`libbpf_gë_îr‹
(
kîn_btf
);

3082 i‡(
îr
)

3083  
îr
;

3086 
	`btf__£t_poöãr_size
(
obj
->
btf
, 8);

3087 
	`bpf_obje˘__ßnôize_btf
(
obj
, 
kîn_btf
);

3090 i‡(
obj
->
gí_lﬂdî
) {

3091 
__u32
 
øw_size
 = 0;

3092 c⁄° *
øw_d©a
 = 
	`btf__øw_d©a
(
kîn_btf
, &
øw_size
);

3094 i‡(!
øw_d©a
)

3095  -
ENOMEM
;

3096 
	`bpf_gí__lﬂd_btf
(
obj
->
gí_lﬂdî
, 
øw_d©a
, 
øw_size
);

3100 
	`btf__£t_fd
(
kîn_btf
, 0);

3103 
îr
 = 
	`btf_lﬂd_öto_kî√l
(
kîn_btf
, 
obj
->
log_buf
, obj->
log_size
,

3104 
obj
->
log_Àvñ
 ? 1 : 0);

3106 i‡(
ßnôize
) {

3107 i‡(!
îr
) {

3109 
	`btf__£t_fd
(
obj
->
btf
, 
	`btf__fd
(
kîn_btf
));

3110 
	`btf__£t_fd
(
kîn_btf
, -1);

3112 
	`btf__‰ì
(
kîn_btf
);

3114 
ªp‹t
:

3115 i‡(
îr
) {

3116 
btf_m™d©‹y
 = 
	`kî√l_√eds_btf
(
obj
);

3117 
	`¥_w¨n
("Eº‹Üﬂdög .BTF i¡ÿkî√l: %d. %s\n", 
îr
,

3118 
btf_m™d©‹y
 ? "BTF is mandatory, can'tÖroceed."

3120 i‡(!
btf_m™d©‹y
)

3121 
îr
 = 0;

3123  
îr
;

3124 
	}
}

3126 c⁄° *
	$ñf_sym_°r
(c⁄° 
bpf_obje˘
 *
obj
, 
size_t
 
off
)

3128 c⁄° *
«me
;

3130 
«me
 = 
	`ñf_°Ωå
(
obj
->
efûe
.
ñf
, obj->efûe.
°πabidx
, 
off
);

3131 i‡(!
«me
) {

3132 
	`¥_w¨n
("elf: failedÅo get sectionÇame stringát offset %zu from %s: %s\n",

3133 
off
, 
obj
->
∑th
, 
	`ñf_îrmsg
(-1));

3134  
NULL
;

3137  
«me
;

3138 
	}
}

3140 c⁄° *
	$ñf_£c_°r
(c⁄° 
bpf_obje˘
 *
obj
, 
size_t
 
off
)

3142 c⁄° *
«me
;

3144 
«me
 = 
	`ñf_°Ωå
(
obj
->
efûe
.
ñf
, obj->efûe.
sh°∫dx
, 
off
);

3145 i‡(!
«me
) {

3146 
	`¥_w¨n
("elf: failedÅo get sectionÇame stringát offset %zu from %s: %s\n",

3147 
off
, 
obj
->
∑th
, 
	`ñf_îrmsg
(-1));

3148  
NULL
;

3151  
«me
;

3152 
	}
}

3154 
Elf_S˙
 *
	$ñf_£c_by_idx
(c⁄° 
bpf_obje˘
 *
obj
, 
size_t
 
idx
)

3156 
Elf_S˙
 *
s˙
;

3158 
s˙
 = 
	`ñf_gës˙
(
obj
->
efûe
.
ñf
, 
idx
);

3159 i‡(!
s˙
) {

3160 
	`¥_w¨n
("elf: failedÅo get section(%zu) from %s: %s\n",

3161 
idx
, 
obj
->
∑th
, 
	`ñf_îrmsg
(-1));

3162  
NULL
;

3164  
s˙
;

3165 
	}
}

3167 
Elf_S˙
 *
	$ñf_£c_by_«me
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° *
«me
)

3169 
Elf_S˙
 *
s˙
 = 
NULL
;

3170 
Elf
 *
ñf
 = 
obj
->
efûe
.elf;

3171 c⁄° *
£c_«me
;

3173 (
s˙
 = 
	`ñf_√xts˙
(
ñf
, s˙)Ë!
NULL
) {

3174 
£c_«me
 = 
	`ñf_£c_«me
(
obj
, 
s˙
);

3175 i‡(!
£c_«me
)

3176  
NULL
;

3178 i‡(
	`°rcmp
(
£c_«me
, 
«me
) != 0)

3181  
s˙
;

3183  
NULL
;

3184 
	}
}

3186 
Elf64_Shdr
 *
	$ñf_£c_hdr
(c⁄° 
bpf_obje˘
 *
obj
, 
Elf_S˙
 *
s˙
)

3188 
Elf64_Shdr
 *
shdr
;

3190 i‡(!
s˙
)

3191  
NULL
;

3193 
shdr
 = 
	`ñf64_gëshdr
(
s˙
);

3194 i‡(!
shdr
) {

3195 
	`¥_w¨n
("elf: failedÅo get section(%zu) header from %s: %s\n",

3196 
	`ñf_ndxs˙
(
s˙
), 
obj
->
∑th
, 
	`ñf_îrmsg
(-1));

3197  
NULL
;

3200  
shdr
;

3201 
	}
}

3203 c⁄° *
	$ñf_£c_«me
(c⁄° 
bpf_obje˘
 *
obj
, 
Elf_S˙
 *
s˙
)

3205 c⁄° *
«me
;

3206 
Elf64_Shdr
 *
sh
;

3208 i‡(!
s˙
)

3209  
NULL
;

3211 
sh
 = 
	`ñf_£c_hdr
(
obj
, 
s˙
);

3212 i‡(!
sh
)

3213  
NULL
;

3215 
«me
 = 
	`ñf_£c_°r
(
obj
, 
sh
->
sh_«me
);

3216 i‡(!
«me
) {

3217 
	`¥_w¨n
("elf: failedÅo get section(%zu)Çame from %s: %s\n",

3218 
	`ñf_ndxs˙
(
s˙
), 
obj
->
∑th
, 
	`ñf_îrmsg
(-1));

3219  
NULL
;

3222  
«me
;

3223 
	}
}

3225 
Elf_D©a
 *
	$ñf_£c_d©a
(c⁄° 
bpf_obje˘
 *
obj
, 
Elf_S˙
 *
s˙
)

3227 
Elf_D©a
 *
d©a
;

3229 i‡(!
s˙
)

3230  
NULL
;

3232 
d©a
 = 
	`ñf_gëd©a
(
s˙
, 0);

3233 i‡(!
d©a
) {

3234 
	`¥_w¨n
("elf: failedÅo get section(%zu) %s data from %s: %s\n",

3235 
	`ñf_ndxs˙
(
s˙
), 
	`ñf_£c_«me
(
obj
, scn) ?: "<?>",

3236 
obj
->
∑th
, 
	`ñf_îrmsg
(-1));

3237  
NULL
;

3240  
d©a
;

3241 
	}
}

3243 
Elf64_Sym
 *
	$ñf_sym_by_idx
(c⁄° 
bpf_obje˘
 *
obj
, 
size_t
 
idx
)

3245 i‡(
idx
 >
obj
->
efûe
.
symbﬁs
->
d_size
 / (
Elf64_Sym
))

3246  
NULL
;

3248  (
Elf64_Sym
 *)
obj
->
efûe
.
symbﬁs
->
d_buf
 + 
idx
;

3249 
	}
}

3251 
Elf64_Rñ
 *
	$ñf_ªl_by_idx
(
Elf_D©a
 *
d©a
, 
size_t
 
idx
)

3253 i‡(
idx
 >
d©a
->
d_size
 / (
Elf64_Rñ
))

3254  
NULL
;

3256  (
Elf64_Rñ
 *)
d©a
->
d_buf
 + 
idx
;

3257 
	}
}

3259 
boﬁ
 
	$is_£c_«me_dw¨f
(c⁄° *
«me
)

3262  
	`°r_has_pfx
(
«me
, ".debug_");

3263 
	}
}

3265 
boﬁ
 
	$ign‹e_ñf_£˘i⁄
(
Elf64_Shdr
 *
hdr
, c⁄° *
«me
)

3268 i‡(
hdr
->
sh_ty≥
 =
SHT_STRTAB
)

3269  
åue
;

3272 i‡(
hdr
->
sh_ty≥
 =
SHT_LLVM_ADDRSIG
)

3273  
åue
;

3276 i‡(
hdr
->
sh_ty≥
 =
SHT_PROGBITS
 && hdr->
sh_size
 == 0 &&

3277 
	`°rcmp
(
«me
, ".text") == 0)

3278  
åue
;

3281 i‡(
	`is_£c_«me_dw¨f
(
«me
))

3282  
åue
;

3284 i‡(
	`°r_has_pfx
(
«me
, ".rel")) {

3285 
«me
 += (".rel") - 1;

3287 i‡(
	`is_£c_«me_dw¨f
(
«me
))

3288  
åue
;

3291 i‡(
	`°rcmp
(
«me
, 
BTF_ELF_SEC
) == 0 ||

3292 
	`°rcmp
(
«me
, 
BTF_EXT_ELF_SEC
) == 0)

3293  
åue
;

3296  
Ál£
;

3297 
	}
}

3299 
	$cmp_¥ogs
(c⁄° *
_a
, c⁄° *
_b
)

3301 c⁄° 
bpf_¥ogøm
 *
a
 = 
_a
;

3302 c⁄° 
bpf_¥ogøm
 *
b
 = 
_b
;

3304 i‡(
a
->
£c_idx
 !
b
->sec_idx)

3305  
a
->
£c_idx
 < 
b
->sec_idx ? -1 : 1;

3308  
a
->
£c_ö¢_off
 < 
b
->sec_insn_off ? -1 : 1;

3309 
	}
}

3311 
	$bpf_obje˘__ñf_cﬁÀ˘
(
bpf_obje˘
 *
obj
)

3313 
ñf_£c_desc
 *
£c_desc
;

3314 
Elf
 *
ñf
 = 
obj
->
efûe
.elf;

3315 
Elf_D©a
 *
btf_ext_d©a
 = 
NULL
;

3316 
Elf_D©a
 *
btf_d©a
 = 
NULL
;

3317 
idx
 = 0, 
îr
 = 0;

3318 c⁄° *
«me
;

3319 
Elf_D©a
 *
d©a
;

3320 
Elf_S˙
 *
s˙
;

3321 
Elf64_Shdr
 *
sh
;

3327 
obj
->
efûe
.
£c_˙t
 = obj->efûe.
ehdr
->
e_shnum
;

3328 
obj
->
efûe
.
£cs
 = 
	`ˇŒoc
(obj->efûe.
£c_˙t
, (*obj->efile.secs));

3329 i‡(!
obj
->
efûe
.
£cs
)

3330  -
ENOMEM
;

3335 
s˙
 = 
NULL
;

3336 (
s˙
 = 
	`ñf_√xts˙
(
ñf
, s˙)Ë!
NULL
) {

3337 
sh
 = 
	`ñf_£c_hdr
(
obj
, 
s˙
);

3338 i‡(!
sh
)

3339  -
LIBBPF_ERRNO__FORMAT
;

3341 i‡(
sh
->
sh_ty≥
 =
SHT_SYMTAB
) {

3342 i‡(
obj
->
efûe
.
symbﬁs
) {

3343 
	`¥_w¨n
("ñf: mu…ùÀ symbﬁÅabÀ†ö %s\n", 
obj
->
∑th
);

3344  -
LIBBPF_ERRNO__FORMAT
;

3347 
d©a
 = 
	`ñf_£c_d©a
(
obj
, 
s˙
);

3348 i‡(!
d©a
)

3349  -
LIBBPF_ERRNO__FORMAT
;

3351 
idx
 = 
	`ñf_ndxs˙
(
s˙
);

3353 
obj
->
efûe
.
symbﬁs
 = 
d©a
;

3354 
obj
->
efûe
.
symbﬁs_shndx
 = 
idx
;

3355 
obj
->
efûe
.
°πabidx
 = 
sh
->
sh_lök
;

3359 i‡(!
obj
->
efûe
.
symbﬁs
) {

3360 
	`¥_w¨n
("elf: couldn't find symbolÅable in %s, stripped object file?\n",

3361 
obj
->
∑th
);

3362  -
ENOENT
;

3365 
s˙
 = 
NULL
;

3366 (
s˙
 = 
	`ñf_√xts˙
(
ñf
, s˙)Ë!
NULL
) {

3367 
idx
 = 
	`ñf_ndxs˙
(
s˙
);

3368 
£c_desc
 = &
obj
->
efûe
.
£cs
[
idx
];

3370 
sh
 = 
	`ñf_£c_hdr
(
obj
, 
s˙
);

3371 i‡(!
sh
)

3372  -
LIBBPF_ERRNO__FORMAT
;

3374 
«me
 = 
	`ñf_£c_°r
(
obj
, 
sh
->
sh_«me
);

3375 i‡(!
«me
)

3376  -
LIBBPF_ERRNO__FORMAT
;

3378 i‡(
	`ign‹e_ñf_£˘i⁄
(
sh
, 
«me
))

3381 
d©a
 = 
	`ñf_£c_d©a
(
obj
, 
s˙
);

3382 i‡(!
d©a
)

3383  -
LIBBPF_ERRNO__FORMAT
;

3385 
	`¥_debug
("elf: section(%d) %s, size %ld,Üink %d, flags %lx,Åype=%d\n",

3386 
idx
, 
«me
, ()
d©a
->
d_size
,

3387 ()
sh
->
sh_lök
, ()sh->
sh_Êags
,

3388 ()
sh
->
sh_ty≥
);

3390 i‡(
	`°rcmp
(
«me
, "license") == 0) {

3391 
îr
 = 
	`bpf_obje˘__öô_li˚n£
(
obj
, 
d©a
->
d_buf
, d©a->
d_size
);

3392 i‡(
îr
)

3393  
îr
;

3394 } i‡(
	`°rcmp
(
«me
, "version") == 0) {

3395 
îr
 = 
	`bpf_obje˘__öô_kvîsi⁄
(
obj
, 
d©a
->
d_buf
, d©a->
d_size
);

3396 i‡(
îr
)

3397  
îr
;

3398 } i‡(
	`°rcmp
(
«me
, "maps") == 0) {

3399 
obj
->
efûe
.
m≠s_shndx
 = 
idx
;

3400 } i‡(
	`°rcmp
(
«me
, 
MAPS_ELF_SEC
) == 0) {

3401 
obj
->
efûe
.
btf_m≠s_shndx
 = 
idx
;

3402 } i‡(
	`°rcmp
(
«me
, 
BTF_ELF_SEC
) == 0) {

3403 i‡(
sh
->
sh_ty≥
 !
SHT_PROGBITS
)

3404  -
LIBBPF_ERRNO__FORMAT
;

3405 
btf_d©a
 = 
d©a
;

3406 } i‡(
	`°rcmp
(
«me
, 
BTF_EXT_ELF_SEC
) == 0) {

3407 i‡(
sh
->
sh_ty≥
 !
SHT_PROGBITS
)

3408  -
LIBBPF_ERRNO__FORMAT
;

3409 
btf_ext_d©a
 = 
d©a
;

3410 } i‡(
sh
->
sh_ty≥
 =
SHT_SYMTAB
) {

3412 } i‡(
sh
->
sh_ty≥
 =
SHT_PROGBITS
 && 
d©a
->
d_size
 > 0) {

3413 i‡(
sh
->
sh_Êags
 & 
SHF_EXECINSTR
) {

3414 i‡(
	`°rcmp
(
«me
, ".text") == 0)

3415 
obj
->
efûe
.
ãxt_shndx
 = 
idx
;

3416 
îr
 = 
	`bpf_obje˘__add_¥ogøms
(
obj
, 
d©a
, 
«me
, 
idx
);

3417 i‡(
îr
)

3418  
îr
;

3419 } i‡(
	`°rcmp
(
«me
, 
DATA_SEC
) == 0 ||

3420 
	`°r_has_pfx
(
«me
, 
DATA_SEC
 ".")) {

3421 
£c_desc
->
£c_ty≥
 = 
SEC_DATA
;

3422 
£c_desc
->
shdr
 = 
sh
;

3423 
£c_desc
->
d©a
 = data;

3424 } i‡(
	`°rcmp
(
«me
, 
RODATA_SEC
) == 0 ||

3425 
	`°r_has_pfx
(
«me
, 
RODATA_SEC
 ".")) {

3426 
£c_desc
->
£c_ty≥
 = 
SEC_RODATA
;

3427 
£c_desc
->
shdr
 = 
sh
;

3428 
£c_desc
->
d©a
 = data;

3429 } i‡(
	`°rcmp
(
«me
, 
STRUCT_OPS_SEC
) == 0) {

3430 
obj
->
efûe
.
°_›s_d©a
 = 
d©a
;

3431 
obj
->
efûe
.
°_›s_shndx
 = 
idx
;

3433 
	`¥_öfo
("elf: skipping unrecognized data section(%d) %s\n",

3434 
idx
, 
«me
);

3436 } i‡(
sh
->
sh_ty≥
 =
SHT_REL
) {

3437 
èrg_£c_idx
 = 
sh
->
sh_öfo
;

3439 i‡(
sh
->
sh_ítsize
 !(
Elf64_Rñ
) ||

3440 
èrg_£c_idx
 >
obj
->
efûe
.
£c_˙t
)

3441  -
LIBBPF_ERRNO__FORMAT
;

3444 i‡(!
	`£˘i⁄_have_execö°r
(
obj
, 
èrg_£c_idx
) &&

3445 
	`°rcmp
(
«me
, ".ªl" 
STRUCT_OPS_SEC
) &&

3446 
	`°rcmp
(
«me
, ".ªl" 
MAPS_ELF_SEC
)) {

3447 
	`¥_öfo
("elf: skippingÑelo section(%d) %s for section(%d) %s\n",

3448 
idx
, 
«me
, 
èrg_£c_idx
,

3449 
	`ñf_£c_«me
(
obj
, 
	`ñf_£c_by_idx
(obj, 
èrg_£c_idx
)) ?: "<?>");

3453 
£c_desc
->
£c_ty≥
 = 
SEC_RELO
;

3454 
£c_desc
->
shdr
 = 
sh
;

3455 
£c_desc
->
d©a
 = data;

3456 } i‡(
sh
->
sh_ty≥
 =
SHT_NOBITS
 && 
	`°rcmp
(
«me
, 
BSS_SEC
) == 0) {

3457 
£c_desc
->
£c_ty≥
 = 
SEC_BSS
;

3458 
£c_desc
->
shdr
 = 
sh
;

3459 
£c_desc
->
d©a
 = data;

3461 
	`¥_öfo
("ñf: skùpög se˘i⁄(%dË%†(sizê%zu)\n", 
idx
, 
«me
,

3462 (
size_t
)
sh
->
sh_size
);

3466 i‡(!
obj
->
efûe
.
°πabidx
 || obj->efûe.°πabidx > 
idx
) {

3467 
	`¥_w¨n
("ñf: symbﬁ såög†£˘i⁄ missög o∏övÆid i¿%s\n", 
obj
->
∑th
);

3468  -
LIBBPF_ERRNO__FORMAT
;

3473 i‡(
obj
->
ƒ_¥ogøms
)

3474 
	`qs‹t
(
obj
->
¥ogøms
, obj->
ƒ_¥ogøms
, (*obj->¥ogøms), 
cmp_¥ogs
);

3476  
	`bpf_obje˘__öô_btf
(
obj
, 
btf_d©a
, 
btf_ext_d©a
);

3477 
	}
}

3479 
boﬁ
 
	$sym_is_exã∫
(c⁄° 
Elf64_Sym
 *
sym
)

3481 
böd
 = 
	`ELF64_ST_BIND
(
sym
->
°_öfo
);

3483  
sym
->
°_shndx
 =
SHN_UNDEF
 &&

3484 (
böd
 =
STB_GLOBAL
 || böd =
STB_WEAK
) &&

3485 
	`ELF64_ST_TYPE
(
sym
->
°_öfo
Ë=
STT_NOTYPE
;

3486 
	}
}

3488 
boﬁ
 
	$sym_is_sub¥og
(c⁄° 
Elf64_Sym
 *
sym
, 
ãxt_shndx
)

3490 
böd
 = 
	`ELF64_ST_BIND
(
sym
->
°_öfo
);

3491 
ty≥
 = 
	`ELF64_ST_TYPE
(
sym
->
°_öfo
);

3494 i‡(
sym
->
°_shndx
 !
ãxt_shndx
)

3495  
Ál£
;

3498 i‡(
böd
 =
STB_LOCAL
 && 
ty≥
 =
STT_SECTION
)

3499  
åue
;

3502  
böd
 =
STB_GLOBAL
 && 
ty≥
 =
STT_FUNC
;

3503 
	}
}

3505 
	$föd_exã∫_btf_id
(c⁄° 
btf
 *btf, c⁄° *
ext_«me
)

3507 c⁄° 
btf_ty≥
 *
t
;

3508 c⁄° *
äame
;

3509 
i
, 
n
;

3511 i‡(!
btf
)

3512  -
ESRCH
;

3514 
n
 = 
	`btf__ty≥_˙t
(
btf
);

3515 
i
 = 1; i < 
n
; i++) {

3516 
t
 = 
	`btf__ty≥_by_id
(
btf
, 
i
);

3518 i‡(!
	`btf_is_v¨
(
t
Ë&& !
	`btf_is_func
(t))

3521 
äame
 = 
	`btf__«me_by_off£t
(
btf
, 
t
->
«me_off
);

3522 i‡(
	`°rcmp
(
äame
, 
ext_«me
))

3525 i‡(
	`btf_is_v¨
(
t
) &&

3526 
	`btf_v¨
(
t
)->
lökage
 !
BTF_VAR_GLOBAL_EXTERN
)

3527  -
EINVAL
;

3529 i‡(
	`btf_is_func
(
t
Ë&& 
	`btf_func_lökage
—Ë!
BTF_FUNC_EXTERN
)

3530  -
EINVAL
;

3532  
i
;

3535  -
ENOENT
;

3536 
	}
}

3538 
	$föd_exã∫_£c_btf_id
(
btf
 *btf, 
ext_btf_id
) {

3539 c⁄° 
btf_v¨_£cöfo
 *
vs
;

3540 c⁄° 
btf_ty≥
 *
t
;

3541 
i
, 
j
, 
n
;

3543 i‡(!
btf
)

3544  -
ESRCH
;

3546 
n
 = 
	`btf__ty≥_˙t
(
btf
);

3547 
i
 = 1; i < 
n
; i++) {

3548 
t
 = 
	`btf__ty≥_by_id
(
btf
, 
i
);

3550 i‡(!
	`btf_is_d©a£c
(
t
))

3553 
vs
 = 
	`btf_v¨_£cöfos
(
t
);

3554 
j
 = 0; j < 
	`btf_vÀn
(
t
); j++, 
vs
++) {

3555 i‡(
vs
->
ty≥
 =
ext_btf_id
)

3556  
i
;

3560  -
ENOENT
;

3561 
	}
}

3563 
kcfg_ty≥
 
	$föd_kcfg_ty≥
(c⁄° 
btf
 *btf, 
id
,

3564 
boﬁ
 *
is_sig√d
)

3566 c⁄° 
btf_ty≥
 *
t
;

3567 c⁄° *
«me
;

3569 
t
 = 
	`skù_mods_™d_ty≥defs
(
btf
, 
id
, 
NULL
);

3570 
«me
 = 
	`btf__«me_by_off£t
(
btf
, 
t
->
«me_off
);

3572 i‡(
is_sig√d
)

3573 *
is_sig√d
 = 
Ál£
;

3574 
	`btf_köd
(
t
)) {

3575 
BTF_KIND_INT
: {

3576 
íc
 = 
	`btf_öt_ícodög
(
t
);

3578 i‡(
íc
 & 
BTF_INT_BOOL
)

3579  
t
->
size
 =1 ? 
KCFG_BOOL
 : 
KCFG_UNKNOWN
;

3580 i‡(
is_sig√d
)

3581 *
is_sig√d
 = 
íc
 & 
BTF_INT_SIGNED
;

3582 i‡(
t
->
size
 == 1)

3583  
KCFG_CHAR
;

3584 i‡(
t
->
size
 < 1 ||Å->size > 8 || (t->size & (t->size - 1)))

3585  
KCFG_UNKNOWN
;

3586  
KCFG_INT
;

3588 
BTF_KIND_ENUM
:

3589 i‡(
t
->
size
 != 4)

3590  
KCFG_UNKNOWN
;

3591 i‡(
	`°rcmp
(
«me
, "libbpf_tristate"))

3592  
KCFG_UNKNOWN
;

3593  
KCFG_TRISTATE
;

3594 
BTF_KIND_ENUM64
:

3595 i‡(
	`°rcmp
(
«me
, "libbpf_tristate"))

3596  
KCFG_UNKNOWN
;

3597  
KCFG_TRISTATE
;

3598 
BTF_KIND_ARRAY
:

3599 i‡(
	`btf_¨øy
(
t
)->
√Àms
 == 0)

3600  
KCFG_UNKNOWN
;

3601 i‡(
	`föd_kcfg_ty≥
(
btf
, 
	`btf_¨øy
(
t
)->
ty≥
, 
NULL
Ë!
KCFG_CHAR
)

3602  
KCFG_UNKNOWN
;

3603  
KCFG_CHAR_ARR
;

3605  
KCFG_UNKNOWN
;

3607 
	}
}

3609 
	$cmp_exã∫s
(c⁄° *
_a
, c⁄° *
_b
)

3611 c⁄° 
exã∫_desc
 *
a
 = 
_a
;

3612 c⁄° 
exã∫_desc
 *
b
 = 
_b
;

3614 i‡(
a
->
ty≥
 !
b
->type)

3615  
a
->
ty≥
 < 
b
->type ? -1 : 1;

3617 i‡(
a
->
ty≥
 =
EXT_KCFG
) {

3619 i‡(
a
->
kcfg
.
Æign
 !
b
->kcfg.align)

3620  
a
->
kcfg
.
Æign
 > 
b
->kcfg.align ? -1 : 1;

3622 i‡(
a
->
kcfg
.
sz
 !
b
->kcfg.sz)

3623  
a
->
kcfg
.
sz
 < 
b
->kcfg.sz ? -1 : 1;

3627  
	`°rcmp
(
a
->
«me
, 
b
->name);

3628 
	}
}

3630 
	$föd_öt_btf_id
(c⁄° 
btf
 *btf)

3632 c⁄° 
btf_ty≥
 *
t
;

3633 
i
, 
n
;

3635 
n
 = 
	`btf__ty≥_˙t
(
btf
);

3636 
i
 = 1; i < 
n
; i++) {

3637 
t
 = 
	`btf__ty≥_by_id
(
btf
, 
i
);

3639 i‡(
	`btf_is_öt
(
t
Ë&& 
	`btf_öt_bôs
(t) == 32)

3640  
i
;

3644 
	}
}

3646 
	$add_dummy_ksym_v¨
(
btf
 *btf)

3648 
i
, 
öt_btf_id
, 
£c_btf_id
, 
dummy_v¨_btf_id
;

3649 c⁄° 
btf_v¨_£cöfo
 *
vs
;

3650 c⁄° 
btf_ty≥
 *
£c
;

3652 i‡(!
btf
)

3655 
£c_btf_id
 = 
	`btf__föd_by_«me_köd
(
btf
, 
KSYMS_SEC
,

3656 
BTF_KIND_DATASEC
);

3657 i‡(
£c_btf_id
 < 0)

3660 
£c
 = 
	`btf__ty≥_by_id
(
btf
, 
£c_btf_id
);

3661 
vs
 = 
	`btf_v¨_£cöfos
(
£c
);

3662 
i
 = 0; i < 
	`btf_vÀn
(
£c
); i++, 
vs
++) {

3663 c⁄° 
btf_ty≥
 *
vt
;

3665 
vt
 = 
	`btf__ty≥_by_id
(
btf
, 
vs
->
ty≥
);

3666 i‡(
	`btf_is_func
(
vt
))

3671 i‡(
i
 =
	`btf_vÀn
(
£c
))

3674 
öt_btf_id
 = 
	`föd_öt_btf_id
(
btf
);

3675 
dummy_v¨_btf_id
 = 
	`btf__add_v¨
(
btf
,

3677 
BTF_VAR_GLOBAL_ALLOCATED
,

3678 
öt_btf_id
);

3679 i‡(
dummy_v¨_btf_id
 < 0)

3680 
	`¥_w¨n
("cannot createá dummy_ksym var\n");

3682  
dummy_v¨_btf_id
;

3683 
	}
}

3685 
	$bpf_obje˘__cﬁÀ˘_exã∫s
(
bpf_obje˘
 *
obj
)

3687 
btf_ty≥
 *
£c
, *
kcfg_£c
 = 
NULL
, *
ksym_£c
 = NULL;

3688 c⁄° 
btf_ty≥
 *
t
;

3689 
exã∫_desc
 *
ext
;

3690 
i
, 
n
, 
off
, 
dummy_v¨_btf_id
;

3691 c⁄° *
ext_«me
, *
£c_«me
;

3692 
Elf_S˙
 *
s˙
;

3693 
Elf64_Shdr
 *
sh
;

3695 i‡(!
obj
->
efûe
.
symbﬁs
)

3698 
s˙
 = 
	`ñf_£c_by_idx
(
obj
, obj->
efûe
.
symbﬁs_shndx
);

3699 
sh
 = 
	`ñf_£c_hdr
(
obj
, 
s˙
);

3700 i‡(!
sh
 || sh->
sh_ítsize
 !(
Elf64_Sym
))

3701  -
LIBBPF_ERRNO__FORMAT
;

3703 
dummy_v¨_btf_id
 = 
	`add_dummy_ksym_v¨
(
obj
->
btf
);

3704 i‡(
dummy_v¨_btf_id
 < 0)

3705  
dummy_v¨_btf_id
;

3707 
n
 = 
sh
->
sh_size
 / sh->
sh_ítsize
;

3708 
	`¥_debug
("lookög f‹Éxã∫†am⁄g %d symbﬁs...\n", 
n
);

3710 
i
 = 0; i < 
n
; i++) {

3711 
Elf64_Sym
 *
sym
 = 
	`ñf_sym_by_idx
(
obj
, 
i
);

3713 i‡(!
sym
)

3714  -
LIBBPF_ERRNO__FORMAT
;

3715 i‡(!
	`sym_is_exã∫
(
sym
))

3717 
ext_«me
 = 
	`ñf_sym_°r
(
obj
, 
sym
->
°_«me
);

3718 i‡(!
ext_«me
 || !ext_name[0])

3721 
ext
 = 
obj
->
exã∫s
;

3722 
ext
 = 
	`libbpf_ªÆloˇºay
”xt, 
obj
->
ƒ_exã∫
 + 1, (*ext));

3723 i‡(!
ext
)

3724  -
ENOMEM
;

3725 
obj
->
exã∫s
 = 
ext
;

3726 
ext
 = &ext[
obj
->
ƒ_exã∫
];

3727 
	`mem£t
(
ext
, 0, (*ext));

3728 
obj
->
ƒ_exã∫
++;

3730 
ext
->
btf_id
 = 
	`föd_exã∫_btf_id
(
obj
->
btf
, 
ext_«me
);

3731 i‡(
ext
->
btf_id
 <= 0) {

3732 
	`¥_w¨n
("failedÅo find BTF forÉxtern '%s': %d\n",

3733 
ext_«me
, 
ext
->
btf_id
);

3734  
ext
->
btf_id
;

3736 
t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
ext
->
btf_id
);

3737 
ext
->
«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
t
->
«me_off
);

3738 
ext
->
sym_idx
 = 
i
;

3739 
ext
->
is_wók
 = 
	`ELF64_ST_BIND
(
sym
->
°_öfo
Ë=
STB_WEAK
;

3741 
ext
->
£c_btf_id
 = 
	`föd_exã∫_£c_btf_id
(
obj
->
btf
,Éxt->
btf_id
);

3742 i‡(
ext
->
£c_btf_id
 <= 0) {

3743 
	`¥_w¨n
("failedÅo find BTF forÉxtern '%s' [%d] section: %d\n",

3744 
ext_«me
, 
ext
->
btf_id
,Éxt->
£c_btf_id
);

3745  
ext
->
£c_btf_id
;

3747 
£c
 = (*)
	`btf__ty≥_by_id
(
obj
->
btf
, 
ext
->
£c_btf_id
);

3748 
£c_«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
£c
->
«me_off
);

3750 i‡(
	`°rcmp
(
£c_«me
, 
KCONFIG_SEC
) == 0) {

3751 i‡(
	`btf_is_func
(
t
)) {

3752 
	`¥_w¨n
("extern function %s is unsupported under %s section\n",

3753 
ext
->
«me
, 
KCONFIG_SEC
);

3754  -
ENOTSUP
;

3756 
kcfg_£c
 = 
£c
;

3757 
ext
->
ty≥
 = 
EXT_KCFG
;

3758 
ext
->
kcfg
.
sz
 = 
	`btf__ªsﬁve_size
(
obj
->
btf
, 
t
->
ty≥
);

3759 i‡(
ext
->
kcfg
.
sz
 <= 0) {

3760 
	`¥_w¨n
("failedÅoÑesolve size ofÉxtern (kcfg) '%s': %d\n",

3761 
ext_«me
, 
ext
->
kcfg
.
sz
);

3762  
ext
->
kcfg
.
sz
;

3764 
ext
->
kcfg
.
Æign
 = 
	`btf__Æign_of
(
obj
->
btf
, 
t
->
ty≥
);

3765 i‡(
ext
->
kcfg
.
Æign
 <= 0) {

3766 
	`¥_w¨n
("failedÅo determineálignment ofÉxtern (kcfg) '%s': %d\n",

3767 
ext_«me
, 
ext
->
kcfg
.
Æign
);

3768  -
EINVAL
;

3770 
ext
->
kcfg
.
ty≥
 = 
	`föd_kcfg_ty≥
(
obj
->
btf
, 
t
->type,

3771 &
ext
->
kcfg
.
is_sig√d
);

3772 i‡(
ext
->
kcfg
.
ty≥
 =
KCFG_UNKNOWN
) {

3773 
	`¥_w¨n
("exã∫ (kcfgË'%s'Åy≥ i†unsuµ‹ãd\n", 
ext_«me
);

3774  -
ENOTSUP
;

3776 } i‡(
	`°rcmp
(
£c_«me
, 
KSYMS_SEC
) == 0) {

3777 
ksym_£c
 = 
£c
;

3778 
ext
->
ty≥
 = 
EXT_KSYM
;

3779 
	`skù_mods_™d_ty≥defs
(
obj
->
btf
, 
t
->
ty≥
,

3780 &
ext
->
ksym
.
ty≥_id
);

3782 
	`¥_w¨n
("uƒecognizedÉxã∫ se˘i⁄ '%s'\n", 
£c_«me
);

3783  -
ENOTSUP
;

3786 
	`¥_debug
("cﬁÀ˘ed %dÉxã∫†tŸÆ\n", 
obj
->
ƒ_exã∫
);

3788 i‡(!
obj
->
ƒ_exã∫
)

3792 
	`qs‹t
(
obj
->
exã∫s
, obj->
ƒ_exã∫
, (*
ext
), 
cmp_exã∫s
);

3798 i‡(
ksym_£c
) {

3802 
öt_btf_id
 = 
	`föd_öt_btf_id
(
obj
->
btf
);

3808 c⁄° 
btf_ty≥
 *
dummy_v¨
;

3810 
dummy_v¨
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
dummy_v¨_btf_id
);

3811 
i
 = 0; i < 
obj
->
ƒ_exã∫
; i++) {

3812 
ext
 = &
obj
->
exã∫s
[
i
];

3813 i‡(
ext
->
ty≥
 !
EXT_KSYM
)

3815 
	`¥_debug
("extern (ksym) #%d: symbol %d,Çame %s\n",

3816 
i
, 
ext
->
sym_idx
,Éxt->
«me
);

3819 
£c
 = 
ksym_£c
;

3820 
n
 = 
	`btf_vÀn
(
£c
);

3821 
i
 = 0, 
off
 = 0; i < 
n
; i++, off += ()) {

3822 
btf_v¨_£cöfo
 *
vs
 = 
	`btf_v¨_£cöfos
(
£c
Ë+ 
i
;

3823 
btf_ty≥
 *
vt
;

3825 
vt
 = (*)
	`btf__ty≥_by_id
(
obj
->
btf
, 
vs
->
ty≥
);

3826 
ext_«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
vt
->
«me_off
);

3827 
ext
 = 
	`föd_exã∫_by_«me
(
obj
, 
ext_«me
);

3828 i‡(!
ext
) {

3829 
	`¥_w¨n
("failedÅo findÉxtern definition for BTF %s '%s'\n",

3830 
	`btf_köd_°r
(
vt
), 
ext_«me
);

3831  -
ESRCH
;

3833 i‡(
	`btf_is_func
(
vt
)) {

3834 c⁄° 
btf_ty≥
 *
func_¥Ÿo
;

3835 
btf_∑øm
 *
∑øm
;

3836 
j
;

3838 
func_¥Ÿo
 = 
	`btf__ty≥_by_id
(
obj
->
btf
,

3839 
vt
->
ty≥
);

3840 
∑øm
 = 
	`btf_∑øms
(
func_¥Ÿo
);

3844 
j
 = 0; j < 
	`btf_vÀn
(
func_¥Ÿo
); j++)

3845 i‡(
∑øm
[
j
].
ty≥
 && !∑øm[j].
«me_off
)

3846 
∑øm
[
j
].
«me_off
 =

3847 
dummy_v¨
->
«me_off
;

3848 
vs
->
ty≥
 = 
dummy_v¨_btf_id
;

3849 
vt
->
öfo
 &= ~0xffff;

3850 
vt
->
öfo
 |
BTF_FUNC_GLOBAL
;

3852 
	`btf_v¨
(
vt
)->
lökage
 = 
BTF_VAR_GLOBAL_ALLOCATED
;

3853 
vt
->
ty≥
 = 
öt_btf_id
;

3855 
vs
->
off£t
 = 
off
;

3856 
vs
->
size
 = ();

3858 
£c
->
size
 = 
off
;

3861 i‡(
kcfg_£c
) {

3862 
£c
 = 
kcfg_£c
;

3864 
off
 = 0;

3865 
i
 = 0; i < 
obj
->
ƒ_exã∫
; i++) {

3866 
ext
 = &
obj
->
exã∫s
[
i
];

3867 i‡(
ext
->
ty≥
 !
EXT_KCFG
)

3870 
ext
->
kcfg
.
d©a_off
 = 
	`roundup
(
off
,Éxt->kcfg.
Æign
);

3871 
off
 = 
ext
->
kcfg
.
d©a_off
 +Éxt->kcfg.
sz
;

3872 
	`¥_debug
("extern (kcfg) #%d: symbol %d, off %u,Çame %s\n",

3873 
i
, 
ext
->
sym_idx
,Éxt->
kcfg
.
d©a_off
,Éxt->
«me
);

3875 
£c
->
size
 = 
off
;

3876 
n
 = 
	`btf_vÀn
(
£c
);

3877 
i
 = 0; i < 
n
; i++) {

3878 
btf_v¨_£cöfo
 *
vs
 = 
	`btf_v¨_£cöfos
(
£c
Ë+ 
i
;

3880 
t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
vs
->
ty≥
);

3881 
ext_«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
t
->
«me_off
);

3882 
ext
 = 
	`föd_exã∫_by_«me
(
obj
, 
ext_«me
);

3883 i‡(!
ext
) {

3884 
	`¥_w¨n
("failedÅo findÉxtern definition for BTF var '%s'\n",

3885 
ext_«me
);

3886  -
ESRCH
;

3888 
	`btf_v¨
(
t
)->
lökage
 = 
BTF_VAR_GLOBAL_ALLOCATED
;

3889 
vs
->
off£t
 = 
ext
->
kcfg
.
d©a_off
;

3893 
	}
}

3895 
bpf_¥ogøm
 *

3896 
	$bpf_obje˘__föd_¥ogøm_by_tôÀ
(c⁄° 
bpf_obje˘
 *
obj
,

3897 c⁄° *
tôÀ
)

3899 
bpf_¥ogøm
 *
pos
;

3901 
	`bpf_obje˘__f‹_óch_¥ogøm
(
pos
, 
obj
) {

3902 i‡(
pos
->
£c_«me
 && !
	`°rcmp
’os->£c_«me, 
tôÀ
))

3903  
pos
;

3905  
î∫o
 = 
ENOENT
, 
NULL
;

3906 
	}
}

3908 
boﬁ
 
	$¥og_is_sub¥og
(c⁄° 
bpf_obje˘
 *
obj
,

3909 c⁄° 
bpf_¥ogøm
 *
¥og
)

3927 i‡(
libbpf_mode
 & 
LIBBPF_STRICT_SEC_NAME
)

3928  
¥og
->
£c_idx
 =
obj
->
efûe
.
ãxt_shndx
;

3930  
¥og
->
£c_idx
 =
obj
->
efûe
.
ãxt_shndx
 && obj->
ƒ_¥ogøms
 > 1;

3931 
	}
}

3933 
bpf_¥ogøm
 *

3934 
	$bpf_obje˘__föd_¥ogøm_by_«me
(c⁄° 
bpf_obje˘
 *
obj
,

3935 c⁄° *
«me
)

3937 
bpf_¥ogøm
 *
¥og
;

3939 
	`bpf_obje˘__f‹_óch_¥ogøm
(
¥og
, 
obj
) {

3940 i‡(
	`¥og_is_sub¥og
(
obj
, 
¥og
))

3942 i‡(!
	`°rcmp
(
¥og
->
«me
,Çame))

3943  
¥og
;

3945  
î∫o
 = 
ENOENT
, 
NULL
;

3946 
	}
}

3948 
boﬁ
 
	$bpf_obje˘__shndx_is_d©a
(c⁄° 
bpf_obje˘
 *
obj
,

3949 
shndx
)

3951 
obj
->
efûe
.
£cs
[
shndx
].
£c_ty≥
) {

3952 
SEC_BSS
:

3953 
SEC_DATA
:

3954 
SEC_RODATA
:

3955  
åue
;

3957  
Ál£
;

3959 
	}
}

3961 
boﬁ
 
	$bpf_obje˘__shndx_is_m≠s
(c⁄° 
bpf_obje˘
 *
obj
,

3962 
shndx
)

3964  
shndx
 =
obj
->
efûe
.
m≠s_shndx
 ||

3965 
shndx
 =
obj
->
efûe
.
btf_m≠s_shndx
;

3966 
	}
}

3968 
libbpf_m≠_ty≥


3969 
	$bpf_obje˘__£˘i⁄_to_libbpf_m≠_ty≥
(c⁄° 
bpf_obje˘
 *
obj
, 
shndx
)

3971 i‡(
shndx
 =
obj
->
efûe
.
symbﬁs_shndx
)

3972  
LIBBPF_MAP_KCONFIG
;

3974 
obj
->
efûe
.
£cs
[
shndx
].
£c_ty≥
) {

3975 
SEC_BSS
:

3976  
LIBBPF_MAP_BSS
;

3977 
SEC_DATA
:

3978  
LIBBPF_MAP_DATA
;

3979 
SEC_RODATA
:

3980  
LIBBPF_MAP_RODATA
;

3982  
LIBBPF_MAP_UNSPEC
;

3984 
	}
}

3986 
	$bpf_¥ogøm__ªc‹d_ªloc
(
bpf_¥ogøm
 *
¥og
,

3987 
ªloc_desc
 *reloc_desc,

3988 
__u32
 
ö¢_idx
, c⁄° *
sym_«me
,

3989 c⁄° 
Elf64_Sym
 *
sym
, c⁄° 
Elf64_Rñ
 *
ªl
)

3991 
bpf_ö¢
 *
ö¢
 = &
¥og
->
ö¢s
[
ö¢_idx
];

3992 
size_t
 
m≠_idx
, 
ƒ_m≠s
 = 
¥og
->
obj
->nr_maps;

3993 
bpf_obje˘
 *
obj
 = 
¥og
->obj;

3994 
__u32
 
shdr_idx
 = 
sym
->
°_shndx
;

3995 
libbpf_m≠_ty≥
 
ty≥
;

3996 c⁄° *
sym_£c_«me
;

3997 
bpf_m≠
 *
m≠
;

3999 i‡(!
	`is_ˇŒ_ö¢
(
ö¢
Ë&& !
	`is_ldimm64_ö¢
(insn)) {

4000 
	`¥_w¨n
("prog '%s': invalidÑeloágainst '%s' for insns[%d].code 0x%x\n",

4001 
¥og
->
«me
, 
sym_«me
, 
ö¢_idx
, 
ö¢
->
code
);

4002  -
LIBBPF_ERRNO__RELOC
;

4005 i‡(
	`sym_is_exã∫
(
sym
)) {

4006 
sym_idx
 = 
	`ELF64_R_SYM
(
ªl
->
r_öfo
);

4007 
i
, 
n
 = 
obj
->
ƒ_exã∫
;

4008 
exã∫_desc
 *
ext
;

4010 
i
 = 0; i < 
n
; i++) {

4011 
ext
 = &
obj
->
exã∫s
[
i
];

4012 i‡(
ext
->
sym_idx
 == sym_idx)

4015 i‡(
i
 >
n
) {

4016 
	`¥_w¨n
("prog '%s':ÉxternÑelo failedÅo findÉxtern for '%s' (%d)\n",

4017 
¥og
->
«me
, 
sym_«me
, 
sym_idx
);

4018  -
LIBBPF_ERRNO__RELOC
;

4020 
	`¥_debug
("prog '%s': foundÉxtern #%d '%s' (sym %d) for insn #%u\n",

4021 
¥og
->
«me
, 
i
, 
ext
->«me,Éxt->
sym_idx
, 
ö¢_idx
);

4022 i‡(
ö¢
->
code
 =(
BPF_JMP
 | 
BPF_CALL
))

4023 
ªloc_desc
->
ty≥
 = 
RELO_EXTERN_FUNC
;

4025 
ªloc_desc
->
ty≥
 = 
RELO_EXTERN_VAR
;

4026 
ªloc_desc
->
ö¢_idx
 = insn_idx;

4027 
ªloc_desc
->
sym_off
 = 
i
;

4032 i‡(
	`is_ˇŒ_ö¢
(
ö¢
)) {

4033 i‡(
ö¢
->
§c_ªg
 !
BPF_PSEUDO_CALL
) {

4034 
	`¥_w¨n
("¥og '%s': inc‹ª˘ bpf_ˇŒ opcode\n", 
¥og
->
«me
);

4035  -
LIBBPF_ERRNO__RELOC
;

4038 i‡(!
shdr_idx
 || shdr_idx !
obj
->
efûe
.
ãxt_shndx
) {

4039 
sym_£c_«me
 = 
	`ñf_£c_«me
(
obj
, 
	`ñf_£c_by_idx
(obj, 
shdr_idx
));

4040 
	`¥_w¨n
("prog '%s': bad callÑeloágainst '%s' in section '%s'\n",

4041 
¥og
->
«me
, 
sym_«me
, 
sym_£c_«me
);

4042  -
LIBBPF_ERRNO__RELOC
;

4044 i‡(
sym
->
°_vÆue
 % 
BPF_INSN_SZ
) {

4045 
	`¥_w¨n
("prog '%s': bad callÑeloágainst '%s'át offset %zu\n",

4046 
¥og
->
«me
, 
sym_«me
, (
size_t
)
sym
->
°_vÆue
);

4047  -
LIBBPF_ERRNO__RELOC
;

4049 
ªloc_desc
->
ty≥
 = 
RELO_CALL
;

4050 
ªloc_desc
->
ö¢_idx
 = insn_idx;

4051 
ªloc_desc
->
sym_off
 = 
sym
->
°_vÆue
;

4055 i‡(!
shdr_idx
 || shdr_idx >
SHN_LORESERVE
) {

4056 
	`¥_w¨n
("prog '%s': invalidÑeloágainst '%s' in special section 0x%x; forgotÅo initialize global var?..\n",

4057 
¥og
->
«me
, 
sym_«me
, 
shdr_idx
);

4058  -
LIBBPF_ERRNO__RELOC
;

4062 i‡(
	`sym_is_sub¥og
(
sym
, 
obj
->
efûe
.
ãxt_shndx
)) {

4066 i‡((
sym
->
°_vÆue
 % 
BPF_INSN_SZ
Ë|| (
ö¢
->
imm
 % BPF_INSN_SZ)) {

4067 
	`¥_w¨n
("prog '%s': bad subprogáddrÑeloágainst '%s'át offset %zu+%d\n",

4068 
¥og
->
«me
, 
sym_«me
, (
size_t
)
sym
->
°_vÆue
, 
ö¢
->
imm
);

4069  -
LIBBPF_ERRNO__RELOC
;

4072 
ªloc_desc
->
ty≥
 = 
RELO_SUBPROG_ADDR
;

4073 
ªloc_desc
->
ö¢_idx
 = insn_idx;

4074 
ªloc_desc
->
sym_off
 = 
sym
->
°_vÆue
;

4078 
ty≥
 = 
	`bpf_obje˘__£˘i⁄_to_libbpf_m≠_ty≥
(
obj
, 
shdr_idx
);

4079 
sym_£c_«me
 = 
	`ñf_£c_«me
(
obj
, 
	`ñf_£c_by_idx
(obj, 
shdr_idx
));

4082 i‡(
ty≥
 =
LIBBPF_MAP_UNSPEC
) {

4083 i‡(!
	`bpf_obje˘__shndx_is_m≠s
(
obj
, 
shdr_idx
)) {

4084 
	`¥_w¨n
("prog '%s': bad mapÑeloágainst '%s' in section '%s'\n",

4085 
¥og
->
«me
, 
sym_«me
, 
sym_£c_«me
);

4086  -
LIBBPF_ERRNO__RELOC
;

4088 
m≠_idx
 = 0; m≠_idx < 
ƒ_m≠s
; map_idx++) {

4089 
m≠
 = &
obj
->
m≠s
[
m≠_idx
];

4090 i‡(
m≠
->
libbpf_ty≥
 !
ty≥
 ||

4091 
m≠
->
£c_idx
 !
sym
->
°_shndx
 ||

4092 
m≠
->
£c_off£t
 !
sym
->
°_vÆue
)

4094 
	`¥_debug
("prog '%s': found map %zd (%s, sec %d, off %zu) for insn #%u\n",

4095 
¥og
->
«me
, 
m≠_idx
, 
m≠
->«me, m≠->
£c_idx
,

4096 
m≠
->
£c_off£t
, 
ö¢_idx
);

4099 i‡(
m≠_idx
 >
ƒ_m≠s
) {

4100 
	`¥_w¨n
("prog '%s': mapÑelo failedÅo find map for section '%s', off %zu\n",

4101 
¥og
->
«me
, 
sym_£c_«me
, (
size_t
)
sym
->
°_vÆue
);

4102  -
LIBBPF_ERRNO__RELOC
;

4104 
ªloc_desc
->
ty≥
 = 
RELO_LD64
;

4105 
ªloc_desc
->
ö¢_idx
 = insn_idx;

4106 
ªloc_desc
->
m≠_idx
 = map_idx;

4107 
ªloc_desc
->
sym_off
 = 0;

4112 i‡(!
	`bpf_obje˘__shndx_is_d©a
(
obj
, 
shdr_idx
)) {

4113 
	`¥_w¨n
("prog '%s': bad dataÑeloágainst section '%s'\n",

4114 
¥og
->
«me
, 
sym_£c_«me
);

4115  -
LIBBPF_ERRNO__RELOC
;

4117 
m≠_idx
 = 0; m≠_idx < 
ƒ_m≠s
; map_idx++) {

4118 
m≠
 = &
obj
->
m≠s
[
m≠_idx
];

4119 i‡(
m≠
->
libbpf_ty≥
 !
ty≥
 || m≠->
£c_idx
 !
sym
->
°_shndx
)

4121 
	`¥_debug
("prog '%s': found data map %zd (%s, sec %d, off %zu) for insn %u\n",

4122 
¥og
->
«me
, 
m≠_idx
, 
m≠
->«me, m≠->
£c_idx
,

4123 
m≠
->
£c_off£t
, 
ö¢_idx
);

4126 i‡(
m≠_idx
 >
ƒ_m≠s
) {

4127 
	`¥_w¨n
("prog '%s': dataÑelo failedÅo find map for section '%s'\n",

4128 
¥og
->
«me
, 
sym_£c_«me
);

4129  -
LIBBPF_ERRNO__RELOC
;

4132 
ªloc_desc
->
ty≥
 = 
RELO_DATA
;

4133 
ªloc_desc
->
ö¢_idx
 = insn_idx;

4134 
ªloc_desc
->
m≠_idx
 = map_idx;

4135 
ªloc_desc
->
sym_off
 = 
sym
->
°_vÆue
;

4137 
	}
}

4139 
boﬁ
 
	$¥og_c⁄èös_ö¢
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
size_t
 
ö¢_idx
)

4141  
ö¢_idx
 >
¥og
->
£c_ö¢_off
 &&

4142 
ö¢_idx
 < 
¥og
->
£c_ö¢_off
 +Örog->
£c_ö¢_˙t
;

4143 
	}
}

4145 
bpf_¥ogøm
 *
	$föd_¥og_by_£c_ö¢
(c⁄° 
bpf_obje˘
 *
obj
,

4146 
size_t
 
£c_idx
, size_à
ö¢_idx
)

4148 
l
 = 0, 
r
 = 
obj
->
ƒ_¥ogøms
 - 1, 
m
;

4149 
bpf_¥ogøm
 *
¥og
;

4151 
l
 < 
r
) {

4152 
m
 = 
l
 + (
r
 -Ü + 1) / 2;

4153 
¥og
 = &
obj
->
¥ogøms
[
m
];

4155 i‡(
¥og
->
£c_idx
 < sec_idx ||

4156 (
¥og
->
£c_idx
 =£c_idx &&Örog->
£c_ö¢_off
 <
ö¢_idx
))

4157 
l
 = 
m
;

4159 
r
 = 
m
 - 1;

4164 
¥og
 = &
obj
->
¥ogøms
[
l
];

4165 i‡(
¥og
->
£c_idx
 =£c_idx && 
	`¥og_c⁄èös_ö¢
’rog, 
ö¢_idx
))

4166  
¥og
;

4167  
NULL
;

4168 
	}
}

4171 
	$bpf_obje˘__cﬁÀ˘_¥og_ªlos
(
bpf_obje˘
 *
obj
, 
Elf64_Shdr
 *
shdr
, 
Elf_D©a
 *
d©a
)

4173 c⁄° *
ªlo_£c_«me
, *
£c_«me
;

4174 
size_t
 
£c_idx
 = 
shdr
->
sh_öfo
, 
sym_idx
;

4175 
bpf_¥ogøm
 *
¥og
;

4176 
ªloc_desc
 *
ªlos
;

4177 
îr
, 
i
, 
ƒñs
;

4178 c⁄° *
sym_«me
;

4179 
__u32
 
ö¢_idx
;

4180 
Elf_S˙
 *
s˙
;

4181 
Elf_D©a
 *
s˙_d©a
;

4182 
Elf64_Sym
 *
sym
;

4183 
Elf64_Rñ
 *
ªl
;

4185 i‡(
£c_idx
 >
obj
->
efûe
.
£c_˙t
)

4186  -
EINVAL
;

4188 
s˙
 = 
	`ñf_£c_by_idx
(
obj
, 
£c_idx
);

4189 
s˙_d©a
 = 
	`ñf_£c_d©a
(
obj
, 
s˙
);

4191 
ªlo_£c_«me
 = 
	`ñf_£c_°r
(
obj
, 
shdr
->
sh_«me
);

4192 
£c_«me
 = 
	`ñf_£c_«me
(
obj
, 
s˙
);

4193 i‡(!
ªlo_£c_«me
 || !
£c_«me
)

4194  -
EINVAL
;

4196 
	`¥_debug
("sec '%s': collectingÑelocation for section(%zu) '%s'\n",

4197 
ªlo_£c_«me
, 
£c_idx
, 
£c_«me
);

4198 
ƒñs
 = 
shdr
->
sh_size
 / shdr->
sh_ítsize
;

4200 
i
 = 0; i < 
ƒñs
; i++) {

4201 
ªl
 = 
	`ñf_ªl_by_idx
(
d©a
, 
i
);

4202 i‡(!
ªl
) {

4203 
	`¥_w¨n
("£¯'%s': faûedÅÿgëÑñÿ#%d\n", 
ªlo_£c_«me
, 
i
);

4204  -
LIBBPF_ERRNO__FORMAT
;

4207 
sym_idx
 = 
	`ELF64_R_SYM
(
ªl
->
r_öfo
);

4208 
sym
 = 
	`ñf_sym_by_idx
(
obj
, 
sym_idx
);

4209 i‡(!
sym
) {

4210 
	`¥_w¨n
("sec '%s': symbol #%zuÇot found forÑelo #%d\n",

4211 
ªlo_£c_«me
, 
sym_idx
, 
i
);

4212  -
LIBBPF_ERRNO__FORMAT
;

4215 i‡(
sym
->
°_shndx
 >
obj
->
efûe
.
£c_˙t
) {

4216 
	`¥_w¨n
("sec '%s': corrupted symbol #%zuÖointingÅo invalid section #%zu forÑelo #%d\n",

4217 
ªlo_£c_«me
, 
sym_idx
, (
size_t
)
sym
->
°_shndx
, 
i
);

4218  -
LIBBPF_ERRNO__FORMAT
;

4221 i‡(
ªl
->
r_off£t
 % 
BPF_INSN_SZ
 ||Ññ->r_off£à>
s˙_d©a
->
d_size
) {

4222 
	`¥_w¨n
("sec '%s': invalid offset 0x%zx forÑelo #%d\n",

4223 
ªlo_£c_«me
, (
size_t
)
ªl
->
r_off£t
, 
i
);

4224  -
LIBBPF_ERRNO__FORMAT
;

4227 
ö¢_idx
 = 
ªl
->
r_off£t
 / 
BPF_INSN_SZ
;

4234 i‡(
	`ELF64_ST_TYPE
(
sym
->
°_öfo
Ë=
STT_SECTION
 && sym->
°_«me
 == 0)

4235 
sym_«me
 = 
	`ñf_£c_«me
(
obj
, 
	`ñf_£c_by_idx
(obj, 
sym
->
°_shndx
));

4237 
sym_«me
 = 
	`ñf_sym_°r
(
obj
, 
sym
->
°_«me
);

4238 
sym_«me
 = sym_name ?: "<?";

4240 
	`¥_debug
("sec '%s':Ñelo #%d: insn #%uágainst '%s'\n",

4241 
ªlo_£c_«me
, 
i
, 
ö¢_idx
, 
sym_«me
);

4243 
¥og
 = 
	`föd_¥og_by_£c_ö¢
(
obj
, 
£c_idx
, 
ö¢_idx
);

4244 i‡(!
¥og
) {

4245 
	`¥_debug
("sec '%s':Ñelo #%d: couldn't findÖrogram in section '%s' for insn #%u,Örobably overridden weak function, skipping...\n",

4246 
ªlo_£c_«me
, 
i
, 
£c_«me
, 
ö¢_idx
);

4250 
ªlos
 = 
	`libbpf_ªÆloˇºay
(
¥og
->
ªloc_desc
,

4251 
¥og
->
ƒ_ªloc
 + 1, (*
ªlos
));

4252 i‡(!
ªlos
)

4253  -
ENOMEM
;

4254 
¥og
->
ªloc_desc
 = 
ªlos
;

4257 
ö¢_idx
 -
¥og
->
£c_ö¢_off
;

4258 
îr
 = 
	`bpf_¥ogøm__ªc‹d_ªloc
(
¥og
, &
ªlos
[¥og->
ƒ_ªloc
],

4259 
ö¢_idx
, 
sym_«me
, 
sym
, 
ªl
);

4260 i‡(
îr
)

4261  
îr
;

4263 
¥og
->
ƒ_ªloc
++;

4266 
	}
}

4268 
	$bpf_m≠_föd_btf_öfo
(
bpf_obje˘
 *
obj
, 
bpf_m≠
 *
m≠
)

4270 
bpf_m≠_def
 *
def
 = &
m≠
->def;

4271 
__u32
 
key_ty≥_id
 = 0, 
vÆue_ty≥_id
 = 0;

4272 
ªt
;

4274 i‡(!
obj
->
btf
)

4275  -
ENOENT
;

4281 i‡(
m≠
->
£c_idx
 =
obj
->
efûe
.
btf_m≠s_shndx
 ||

4282 
	`bpf_m≠__is_°ru˘_›s
(
m≠
))

4285 i‡(!
	`bpf_m≠__is_öã∫Æ
(
m≠
)) {

4286 
	`¥_w¨n
("Use of BPF_ANNOTATE_KV_PAIR is deprecated, use BTF-defined maps in .maps section instead\n");

4287 #¥agm®
GCC
 
dügno°ic
 
push


4288 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wdeprecated-declarations"

4289 
ªt
 = 
	`btf__gë_m≠_kv_tids
(
obj
->
btf
, 
m≠
->
«me
, 
def
->
key_size
,

4290 
def
->
vÆue_size
, &
key_ty≥_id
,

4291 &
vÆue_ty≥_id
);

4292 #¥agm®
GCC
 
dügno°ic
 
p›


4298 
ªt
 = 
	`btf__föd_by_«me
(
obj
->
btf
, 
m≠
->
ªÆ_«me
);

4300 i‡(
ªt
 < 0)

4301  
ªt
;

4303 
m≠
->
btf_key_ty≥_id
 = 
key_ty≥_id
;

4304 
m≠
->
btf_vÆue_ty≥_id
 = 
	`bpf_m≠__is_öã∫Æ
(map) ?

4305 
ªt
 : 
vÆue_ty≥_id
;

4307 
	}
}

4309 
	$bpf_gë_m≠_öfo_‰om_fdöfo
(
fd
, 
bpf_m≠_öfo
 *
öfo
)

4311 
fûe
[
PATH_MAX
], 
buff
[4096];

4312 
FILE
 *
Â
;

4313 
__u32
 
vÆ
;

4314 
îr
;

4316 
	`¢¥ötf
(
fûe
, (fûe), "/¥oc/%d/fdöfo/%d", 
	`gëpid
(), 
fd
);

4317 
	`mem£t
(
öfo
, 0, (*info));

4319 
Â
 = 
	`f›í
(
fûe
, "r");

4320 i‡(!
Â
) {

4321 
îr
 = -
î∫o
;

4322 
	`¥_w¨n
("ÁûedÅÿ›í %s: %d. Nÿ¥ocf†suµ‹t?\n", 
fûe
,

4323 
îr
);

4324  
îr
;

4327 
	`fgës
(
buff
, (buff), 
Â
)) {

4328 i‡(
	`ssˇnf
(
buff
, "m≠_ty≥:\t%u", &
vÆ
) == 1)

4329 
öfo
->
ty≥
 = 
vÆ
;

4330 i‡(
	`ssˇnf
(
buff
, "key_size:\t%u", &
vÆ
) == 1)

4331 
öfo
->
key_size
 = 
vÆ
;

4332 i‡(
	`ssˇnf
(
buff
, "vÆue_size:\t%u", &
vÆ
) == 1)

4333 
öfo
->
vÆue_size
 = 
vÆ
;

4334 i‡(
	`ssˇnf
(
buff
, "max_íåõs:\t%u", &
vÆ
) == 1)

4335 
öfo
->
max_íåõs
 = 
vÆ
;

4336 i‡(
	`ssˇnf
(
buff
, "m≠_Êags:\t%i", &
vÆ
) == 1)

4337 
öfo
->
m≠_Êags
 = 
vÆ
;

4340 
	`f˛o£
(
Â
);

4343 
	}
}

4345 
boﬁ
 
	$bpf_m≠__auto¸óã
(c⁄° 
bpf_m≠
 *
m≠
)

4347  
m≠
->
auto¸óã
;

4348 
	}
}

4350 
	$bpf_m≠__£t_auto¸óã
(
bpf_m≠
 *
m≠
, 
boﬁ
 
auto¸óã
)

4352 i‡(
m≠
->
obj
->
lﬂded
)

4353  
	`libbpf_îr
(-
EBUSY
);

4355 
m≠
->
auto¸óã
 =áutocreate;

4357 
	}
}

4359 
	$bpf_m≠__ªu£_fd
(
bpf_m≠
 *
m≠
, 
fd
)

4361 
bpf_m≠_öfo
 
öfo
 = {};

4362 
__u32
 
Àn
 = (
öfo
);

4363 
√w_fd
, 
îr
;

4364 *
√w_«me
;

4366 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
fd
, &
öfo
, &
Àn
);

4367 i‡(
îr
 && 
î∫o
 =
EINVAL
)

4368 
îr
 = 
	`bpf_gë_m≠_öfo_‰om_fdöfo
(
fd
, &
öfo
);

4369 i‡(
îr
)

4370  
	`libbpf_îr
(
îr
);

4372 
√w_«me
 = 
	`°rdup
(
öfo
.
«me
);

4373 i‡(!
√w_«me
)

4374  
	`libbpf_îr
(-
î∫o
);

4376 
√w_fd
 = 
	`›í
("/", 
O_RDONLY
 | 
O_CLOEXEC
);

4377 i‡(
√w_fd
 < 0) {

4378 
îr
 = -
î∫o
;

4379 
îr_‰ì_√w_«me
;

4382 
√w_fd
 = 
	`dup3
(
fd
,Çew_fd, 
O_CLOEXEC
);

4383 i‡(
√w_fd
 < 0) {

4384 
îr
 = -
î∫o
;

4385 
îr_˛o£_√w_fd
;

4388 
îr
 = 
	`z˛o£
(
m≠
->
fd
);

4389 i‡(
îr
) {

4390 
îr
 = -
î∫o
;

4391 
îr_˛o£_√w_fd
;

4393 
	`‰ì
(
m≠
->
«me
);

4395 
m≠
->
fd
 = 
√w_fd
;

4396 
m≠
->
«me
 = 
√w_«me
;

4397 
m≠
->
def
.
ty≥
 = 
öfo
.type;

4398 
m≠
->
def
.
key_size
 = 
öfo
.key_size;

4399 
m≠
->
def
.
vÆue_size
 = 
öfo
.value_size;

4400 
m≠
->
def
.
max_íåõs
 = 
öfo
.max_entries;

4401 
m≠
->
def
.
m≠_Êags
 = 
öfo
.map_flags;

4402 
m≠
->
btf_key_ty≥_id
 = 
öfo
.btf_key_type_id;

4403 
m≠
->
btf_vÆue_ty≥_id
 = 
öfo
.btf_value_type_id;

4404 
m≠
->
ªu£d
 = 
åue
;

4405 
m≠
->
m≠_exåa
 = 
öfo
.map_extra;

4409 
îr_˛o£_√w_fd
:

4410 
	`˛o£
(
√w_fd
);

4411 
îr_‰ì_√w_«me
:

4412 
	`‰ì
(
√w_«me
);

4413  
	`libbpf_îr
(
îr
);

4414 
	}
}

4416 
__u32
 
	$bpf_m≠__max_íåõs
(c⁄° 
bpf_m≠
 *
m≠
)

4418  
m≠
->
def
.
max_íåõs
;

4419 
	}
}

4421 
bpf_m≠
 *
	$bpf_m≠__ö√r_m≠
(
bpf_m≠
 *
m≠
)

4423 i‡(!
	`bpf_m≠_ty≥__is_m≠_ö_m≠
(
m≠
->
def
.
ty≥
))

4424  
î∫o
 = 
EINVAL
, 
NULL
;

4426  
m≠
->
ö√r_m≠
;

4427 
	}
}

4429 
	$bpf_m≠__£t_max_íåõs
(
bpf_m≠
 *
m≠
, 
__u32
 
max_íåõs
)

4431 i‡(
m≠
->
fd
 >= 0)

4432  
	`libbpf_îr
(-
EBUSY
);

4433 
m≠
->
def
.
max_íåõs
 = max_entries;

4435 
	}
}

4437 
	$bpf_m≠__ªsize
(
bpf_m≠
 *
m≠
, 
__u32
 
max_íåõs
)

4439 i‡(!
m≠
 || !
max_íåõs
)

4440  
	`libbpf_îr
(-
EINVAL
);

4442  
	`bpf_m≠__£t_max_íåõs
(
m≠
, 
max_íåõs
);

4443 
	}
}

4446 
	$bpf_obje˘__¥obe_lﬂdög
(
bpf_obje˘
 *
obj
)

4448 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

4449 
bpf_ö¢
 
ö¢s
[] = {

4450 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 0),

4451 
	`BPF_EXIT_INSN
(),

4453 
ªt
, 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

4455 i‡(
obj
->
gí_lﬂdî
)

4458 
ªt
 = 
	`bump_æimô_memlock
();

4459 i‡(
ªt
)

4460 
	`¥_w¨n
("FaûedÅÿbum∞RLIMIT_MEMLOCK (î∏%d), you mighà√edÅÿdÿôÉx∂icôly!\n", 
ªt
);

4463 
ªt
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_SOCKET_FILTER
, 
NULL
, "GPL", 
ö¢s
, 
ö¢_˙t
, NULL);

4464 i‡(
ªt
 < 0)

4465 
ªt
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_TRACEPOINT
, 
NULL
, "GPL", 
ö¢s
, 
ö¢_˙t
, NULL);

4466 i‡(
ªt
 < 0) {

4467 
ªt
 = 
î∫o
;

4468 
˝
 = 
	`libbpf_°ªº‹_r
(
ªt
, 
îrmsg
, (errmsg));

4469 
	`¥_w¨n
("Error in %s():%s(%d). Couldn'tÜoadÅrivial BPF "

4472 "£àtÿbigÉnough vÆue.\n", 
__func__
, 
˝
, 
ªt
);

4473  -
ªt
;

4475 
	`˛o£
(
ªt
);

4478 
	}
}

4480 
	$¥obe_fd
(
fd
)

4482 i‡(
fd
 >= 0)

4483 
	`˛o£
(
fd
);

4484  
fd
 >= 0;

4485 
	}
}

4487 
	$¥obe_kîn_¥og_«me
()

4489 
bpf_ö¢
 
ö¢s
[] = {

4490 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 0),

4491 
	`BPF_EXIT_INSN
(),

4493 
ªt
, 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

4496 
ªt
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_SOCKET_FILTER
, "ã°", "GPL", 
ö¢s
, 
ö¢_˙t
, 
NULL
);

4497  
	`¥obe_fd
(
ªt
);

4498 
	}
}

4500 
	$¥obe_kîn_globÆ_d©a
()

4502 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

4503 
bpf_ö¢
 
ö¢s
[] = {

4504 
	`BPF_LD_MAP_VALUE
(
BPF_REG_1
, 0, 16),

4505 
	`BPF_ST_MEM
(
BPF_DW
, 
BPF_REG_1
, 0, 42),

4506 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 0),

4507 
	`BPF_EXIT_INSN
(),

4509 
ªt
, 
m≠
, 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

4511 
m≠
 = 
	`bpf_m≠_¸óã
(
BPF_MAP_TYPE_ARRAY
, 
NULL
, (), 32, 1, NULL);

4512 i‡(
m≠
 < 0) {

4513 
ªt
 = -
î∫o
;

4514 
˝
 = 
	`libbpf_°ªº‹_r
(
ªt
, 
îrmsg
, (errmsg));

4515 
	`¥_w¨n
("Error in %s():%s(%d). Couldn't create simpleárray map.\n",

4516 
__func__
, 
˝
, -
ªt
);

4517  
ªt
;

4520 
ö¢s
[0].
imm
 = 
m≠
;

4522 
ªt
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_SOCKET_FILTER
, 
NULL
, "GPL", 
ö¢s
, 
ö¢_˙t
, NULL);

4523 
	`˛o£
(
m≠
);

4524  
	`¥obe_fd
(
ªt
);

4525 
	}
}

4527 
	$¥obe_kîn_btf
()

4529 c⁄° 
°rs
[] = "\0int";

4530 
__u32
 
ty≥s
[] = {

4532 
	`BTF_TYPE_INT_ENC
(1, 
BTF_INT_SIGNED
, 0, 32, 4),

4535  
	`¥obe_fd
(
	`libbpf__lﬂd_øw_btf
((*)
ty≥s
, (types),

4536 
°rs
, (strs)));

4537 
	}
}

4539 
	$¥obe_kîn_btf_func
()

4541 c⁄° 
°rs
[] = "\0int\0x\0a";

4543 
__u32
 
ty≥s
[] = {

4545 
	`BTF_TYPE_INT_ENC
(1, 
BTF_INT_SIGNED
, 0, 32, 4),

4547 
	`BTF_TYPE_ENC
(0, 
	`BTF_INFO_ENC
(
BTF_KIND_FUNC_PROTO
, 0, 1), 0),

4548 
	`BTF_PARAM_ENC
(7, 1),

4550 
	`BTF_TYPE_ENC
(5, 
	`BTF_INFO_ENC
(
BTF_KIND_FUNC
, 0, 0), 2),

4553  
	`¥obe_fd
(
	`libbpf__lﬂd_øw_btf
((*)
ty≥s
, (types),

4554 
°rs
, (strs)));

4555 
	}
}

4557 
	$¥obe_kîn_btf_func_globÆ
()

4559 c⁄° 
°rs
[] = "\0int\0x\0a";

4561 
__u32
 
ty≥s
[] = {

4563 
	`BTF_TYPE_INT_ENC
(1, 
BTF_INT_SIGNED
, 0, 32, 4),

4565 
	`BTF_TYPE_ENC
(0, 
	`BTF_INFO_ENC
(
BTF_KIND_FUNC_PROTO
, 0, 1), 0),

4566 
	`BTF_PARAM_ENC
(7, 1),

4568 
	`BTF_TYPE_ENC
(5, 
	`BTF_INFO_ENC
(
BTF_KIND_FUNC
, 0, 
BTF_FUNC_GLOBAL
), 2),

4571  
	`¥obe_fd
(
	`libbpf__lﬂd_øw_btf
((*)
ty≥s
, (types),

4572 
°rs
, (strs)));

4573 
	}
}

4575 
	$¥obe_kîn_btf_d©a£c
()

4577 c⁄° 
°rs
[] = "\0x\0.data";

4579 
__u32
 
ty≥s
[] = {

4581 
	`BTF_TYPE_INT_ENC
(0, 
BTF_INT_SIGNED
, 0, 32, 4),

4583 
	`BTF_TYPE_ENC
(1, 
	`BTF_INFO_ENC
(
BTF_KIND_VAR
, 0, 0), 1),

4584 
BTF_VAR_STATIC
,

4586 
	`BTF_TYPE_ENC
(3, 
	`BTF_INFO_ENC
(
BTF_KIND_DATASEC
, 0, 1), 4),

4587 
	`BTF_VAR_SECINFO_ENC
(2, 0, 4),

4590  
	`¥obe_fd
(
	`libbpf__lﬂd_øw_btf
((*)
ty≥s
, (types),

4591 
°rs
, (strs)));

4592 
	}
}

4594 
	$¥obe_kîn_btf_Êﬂt
()

4596 c⁄° 
°rs
[] = "\0float";

4597 
__u32
 
ty≥s
[] = {

4599 
	`BTF_TYPE_FLOAT_ENC
(1, 4),

4602  
	`¥obe_fd
(
	`libbpf__lﬂd_øw_btf
((*)
ty≥s
, (types),

4603 
°rs
, (strs)));

4604 
	}
}

4606 
	$¥obe_kîn_btf_de˛_èg
()

4608 c⁄° 
°rs
[] = "\0tag";

4609 
__u32
 
ty≥s
[] = {

4611 
	`BTF_TYPE_INT_ENC
(0, 
BTF_INT_SIGNED
, 0, 32, 4),

4613 
	`BTF_TYPE_ENC
(1, 
	`BTF_INFO_ENC
(
BTF_KIND_VAR
, 0, 0), 1),

4614 
BTF_VAR_STATIC
,

4616 
	`BTF_TYPE_DECL_TAG_ENC
(1, 2, -1),

4619  
	`¥obe_fd
(
	`libbpf__lﬂd_øw_btf
((*)
ty≥s
, (types),

4620 
°rs
, (strs)));

4621 
	}
}

4623 
	$¥obe_kîn_btf_ty≥_èg
()

4625 c⁄° 
°rs
[] = "\0tag";

4626 
__u32
 
ty≥s
[] = {

4628 
	`BTF_TYPE_INT_ENC
(0, 
BTF_INT_SIGNED
, 0, 32, 4),

4630 
	`BTF_TYPE_TYPE_TAG_ENC
(1, 1),

4632 
	`BTF_TYPE_ENC
(0, 
	`BTF_INFO_ENC
(
BTF_KIND_PTR
, 0, 0), 2),

4635  
	`¥obe_fd
(
	`libbpf__lﬂd_øw_btf
((*)
ty≥s
, (types),

4636 
°rs
, (strs)));

4637 
	}
}

4639 
	$¥obe_kîn_¨øy_mm≠
()

4641 
	`LIBBPF_OPTS
(
bpf_m≠_¸óã_›ts
, 
›ts
, .
m≠_Êags
 = 
BPF_F_MMAPABLE
);

4642 
fd
;

4644 
fd
 = 
	`bpf_m≠_¸óã
(
BPF_MAP_TYPE_ARRAY
, 
NULL
, (), (), 1, &
›ts
);

4645  
	`¥obe_fd
(
fd
);

4646 
	}
}

4648 
	$¥obe_kîn_exp_©èch_ty≥
()

4650 
	`LIBBPF_OPTS
(
bpf_¥og_lﬂd_›ts
, 
›ts
, .
ex≥˘ed_©èch_ty≥
 = 
BPF_CGROUP_INET_SOCK_CREATE
);

4651 
bpf_ö¢
 
ö¢s
[] = {

4652 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 0),

4653 
	`BPF_EXIT_INSN
(),

4655 
fd
, 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

4662 
fd
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_CGROUP_SOCK
, 
NULL
, "GPL", 
ö¢s
, 
ö¢_˙t
, &
›ts
);

4663  
	`¥obe_fd
(
fd
);

4664 
	}
}

4666 
	$¥obe_kîn_¥obe_ªad_kî√l
()

4668 
bpf_ö¢
 
ö¢s
[] = {

4669 
	`BPF_MOV64_REG
(
BPF_REG_1
, 
BPF_REG_10
),

4670 
	`BPF_ALU64_IMM
(
BPF_ADD
, 
BPF_REG_1
, -8),

4671 
	`BPF_MOV64_IMM
(
BPF_REG_2
, 8),

4672 
	`BPF_MOV64_IMM
(
BPF_REG_3
, 0),

4673 
	`BPF_RAW_INSN
(
BPF_JMP
 | 
BPF_CALL
, 0, 0, 0, 
BPF_FUNC_¥obe_ªad_kî√l
),

4674 
	`BPF_EXIT_INSN
(),

4676 
fd
, 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

4678 
fd
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_TRACEPOINT
, 
NULL
, "GPL", 
ö¢s
, 
ö¢_˙t
, NULL);

4679  
	`¥obe_fd
(
fd
);

4680 
	}
}

4682 
	$¥obe_¥og_böd_m≠
()

4684 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

4685 
bpf_ö¢
 
ö¢s
[] = {

4686 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 0),

4687 
	`BPF_EXIT_INSN
(),

4689 
ªt
, 
m≠
, 
¥og
, 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

4691 
m≠
 = 
	`bpf_m≠_¸óã
(
BPF_MAP_TYPE_ARRAY
, 
NULL
, (), 32, 1, NULL);

4692 i‡(
m≠
 < 0) {

4693 
ªt
 = -
î∫o
;

4694 
˝
 = 
	`libbpf_°ªº‹_r
(
ªt
, 
îrmsg
, (errmsg));

4695 
	`¥_w¨n
("Error in %s():%s(%d). Couldn't create simpleárray map.\n",

4696 
__func__
, 
˝
, -
ªt
);

4697  
ªt
;

4700 
¥og
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_SOCKET_FILTER
, 
NULL
, "GPL", 
ö¢s
, 
ö¢_˙t
, NULL);

4701 i‡(
¥og
 < 0) {

4702 
	`˛o£
(
m≠
);

4706 
ªt
 = 
	`bpf_¥og_böd_m≠
(
¥og
, 
m≠
, 
NULL
);

4708 
	`˛o£
(
m≠
);

4709 
	`˛o£
(
¥og
);

4711  
ªt
 >= 0;

4712 
	}
}

4714 
	$¥obe_moduÀ_btf
()

4716 c⁄° 
°rs
[] = "\0int";

4717 
__u32
 
ty≥s
[] = {

4719 
	`BTF_TYPE_INT_ENC
(1, 
BTF_INT_SIGNED
, 0, 32, 4),

4721 
bpf_btf_öfo
 
öfo
;

4722 
__u32
 
Àn
 = (
öfo
);

4723 
«me
[16];

4724 
fd
, 
îr
;

4726 
fd
 = 
	`libbpf__lﬂd_øw_btf
((*)
ty≥s
, —y≥s), 
°rs
, (strs));

4727 i‡(
fd
 < 0)

4730 
	`mem£t
(&
öfo
, 0, (info));

4731 
öfo
.
«me
 = 
	`±r_to_u64
(name);

4732 
öfo
.
«me_Àn
 = (
«me
);

4738 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
fd
, &
öfo
, &
Àn
);

4739 
	`˛o£
(
fd
);

4740  !
îr
;

4741 
	}
}

4743 
	$¥obe_≥rf_lök
()

4745 
bpf_ö¢
 
ö¢s
[] = {

4746 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 0),

4747 
	`BPF_EXIT_INSN
(),

4749 
¥og_fd
, 
lök_fd
, 
îr
;

4751 
¥og_fd
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_TRACEPOINT
, 
NULL
, "GPL",

4752 
ö¢s
, 
	`ARRAY_SIZE
(ö¢s), 
NULL
);

4753 i‡(
¥og_fd
 < 0)

4754  -
î∫o
;

4759 
lök_fd
 = 
	`bpf_lök_¸óã
(
¥og_fd
, -1, 
BPF_PERF_EVENT
, 
NULL
);

4760 
îr
 = -
î∫o
;

4762 i‡(
lök_fd
 >= 0)

4763 
	`˛o£
(
lök_fd
);

4764 
	`˛o£
(
¥og_fd
);

4766  
lök_fd
 < 0 && 
îr
 =-
EBADF
;

4767 
	}
}

4769 
	$¥obe_kîn_bpf_cookõ
()

4771 
bpf_ö¢
 
ö¢s
[] = {

4772 
	`BPF_RAW_INSN
(
BPF_JMP
 | 
BPF_CALL
, 0, 0, 0, 
BPF_FUNC_gë_©èch_cookõ
),

4773 
	`BPF_EXIT_INSN
(),

4775 
ªt
, 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

4777 
ªt
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_KPROBE
, 
NULL
, "GPL", 
ö¢s
, 
ö¢_˙t
, NULL);

4778  
	`¥obe_fd
(
ªt
);

4779 
	}
}

4781 
	$¥obe_kîn_btf_íum64
()

4783 c⁄° 
°rs
[] = "\0enum64";

4784 
__u32
 
ty≥s
[] = {

4785 
	`BTF_TYPE_ENC
(1, 
	`BTF_INFO_ENC
(
BTF_KIND_ENUM64
, 0, 0), 8),

4788  
	`¥obe_fd
(
	`libbpf__lﬂd_øw_btf
((*)
ty≥s
, (types),

4789 
°rs
, (strs)));

4790 
	}
}

4792 
	ekîn_„©uª_ªsu…
 {

4793 
	mFEAT_UNKNOWN
 = 0,

4794 
	mFEAT_SUPPORTED
 = 1,

4795 
	mFEAT_MISSING
 = 2,

4798 (*
	t„©uª_¥obe_‚
)();

4800 
	skîn_„©uª_desc
 {

4801 c⁄° *
desc
;

4802 
„©uª_¥obe_‚
 
¥obe
;

4803 
kîn_„©uª_ªsu…
 
ªs
;

4804 } 
„©uª_¥obes
[
__FEAT_CNT
] = {

4805 [
FEAT_PROG_NAME
] = {

4806 "BPFÖrogømÇame", 
¥obe_kîn_¥og_«me
,

4808 [
FEAT_GLOBAL_DATA
] = {

4809 "globÆ v¨übÀs", 
¥obe_kîn_globÆ_d©a
,

4811 [
FEAT_BTF
] = {

4812 "möimÆ BTF", 
¥obe_kîn_btf
,

4814 [
FEAT_BTF_FUNC
] = {

4815 "BTF fun˘i⁄s", 
¥obe_kîn_btf_func
,

4817 [
FEAT_BTF_GLOBAL_FUNC
] = {

4818 "BTF globÆ fun˘i⁄", 
¥obe_kîn_btf_func_globÆ
,

4820 [
FEAT_BTF_DATASEC
] = {

4821 "BTF d©®£˘i⁄ánd v¨übÀ", 
¥obe_kîn_btf_d©a£c
,

4823 [
FEAT_ARRAY_MMAP
] = {

4824 "ARRAY m≠ mm≠()", 
¥obe_kîn_¨øy_mm≠
,

4826 [
FEAT_EXP_ATTACH_TYPE
] = {

4828 
¥obe_kîn_exp_©èch_ty≥
,

4830 [
FEAT_PROBE_READ_KERN
] = {

4831 "bpf_¥obe_ªad_kî√l(Ëhñ≥r", 
¥obe_kîn_¥obe_ªad_kî√l
,

4833 [
FEAT_PROG_BIND_MAP
] = {

4834 "BPF_PROG_BIND_MAP suµ‹t", 
¥obe_¥og_böd_m≠
,

4836 [
FEAT_MODULE_BTF
] = {

4837 "moduÀ BTF suµ‹t", 
¥obe_moduÀ_btf
,

4839 [
FEAT_BTF_FLOAT
] = {

4840 "BTF_KIND_FLOAT suµ‹t", 
¥obe_kîn_btf_Êﬂt
,

4842 [
FEAT_PERF_LINK
] = {

4843 "BPFÖî‡lök suµ‹t", 
¥obe_≥rf_lök
,

4845 [
FEAT_BTF_DECL_TAG
] = {

4846 "BTF_KIND_DECL_TAG suµ‹t", 
¥obe_kîn_btf_de˛_èg
,

4848 [
FEAT_BTF_TYPE_TAG
] = {

4849 "BTF_KIND_TYPE_TAG suµ‹t", 
¥obe_kîn_btf_ty≥_èg
,

4851 [
FEAT_MEMCG_ACCOUNT
] = {

4852 "memcg-ba£d mem‹yáccou¡ög", 
¥obe_memcg_accou¡
,

4854 [
FEAT_BPF_COOKIE
] = {

4855 "BPF cookõ suµ‹t", 
¥obe_kîn_bpf_cookõ
,

4857 [
FEAT_BTF_ENUM64
] = {

4858 "BTF_KIND_ENUM64 suµ‹t", 
¥obe_kîn_btf_íum64
,

4860 
	}
};

4862 
boﬁ
 
	$kî√l_suµ‹ts
(c⁄° 
bpf_obje˘
 *
obj
, 
kîn_„©uª_id
 
„©_id
)

4864 
kîn_„©uª_desc
 *
„©
 = &
„©uª_¥obes
[
„©_id
];

4865 
ªt
;

4867 i‡(
obj
 && obj->
gí_lﬂdî
)

4871  
åue
;

4873 i‡(
	`READ_ONCE
(
„©
->
ªs
Ë=
FEAT_UNKNOWN
) {

4874 
ªt
 = 
„©
->
	`¥obe
();

4875 i‡(
ªt
 > 0) {

4876 
	`WRITE_ONCE
(
„©
->
ªs
, 
FEAT_SUPPORTED
);

4877 } i‡(
ªt
 == 0) {

4878 
	`WRITE_ONCE
(
„©
->
ªs
, 
FEAT_MISSING
);

4880 
	`¥_w¨n
("Dëe˘i⁄ o‡kî√»%†suµ‹àÁûed: %d\n", 
„©
->
desc
, 
ªt
);

4881 
	`WRITE_ONCE
(
„©
->
ªs
, 
FEAT_MISSING
);

4885  
	`READ_ONCE
(
„©
->
ªs
Ë=
FEAT_SUPPORTED
;

4886 
	}
}

4888 
boﬁ
 
	$m≠_is_ªu£_com∑t
(c⁄° 
bpf_m≠
 *
m≠
, 
m≠_fd
)

4890 
bpf_m≠_öfo
 
m≠_öfo
 = {};

4891 
msg
[
STRERR_BUFSIZE
];

4892 
__u32
 
m≠_öfo_Àn
;

4893 
îr
;

4895 
m≠_öfo_Àn
 = (
m≠_öfo
);

4897 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
m≠_fd
, &
m≠_öfo
, &
m≠_öfo_Àn
);

4898 i‡(
îr
 && 
î∫o
 =
EINVAL
)

4899 
îr
 = 
	`bpf_gë_m≠_öfo_‰om_fdöfo
(
m≠_fd
, &
m≠_öfo
);

4900 i‡(
îr
) {

4901 
	`¥_w¨n
("ÁûedÅÿgë m≠ infÿf‹ m≠ FD %d: %s\n", 
m≠_fd
,

4902 
	`libbpf_°ªº‹_r
(
î∫o
, 
msg
, (msg)));

4903  
Ál£
;

4906  (
m≠_öfo
.
ty≥
 =
m≠
->
def
.type &&

4907 
m≠_öfo
.
key_size
 =
m≠
->
def
.key_size &&

4908 
m≠_öfo
.
vÆue_size
 =
m≠
->
def
.value_size &&

4909 
m≠_öfo
.
max_íåõs
 =
m≠
->
def
.max_entries &&

4910 
m≠_öfo
.
m≠_Êags
 =
m≠
->
def
.map_flags &&

4911 
m≠_öfo
.
m≠_exåa
 =
m≠
->map_extra);

4912 
	}
}

4915 
	$bpf_obje˘__ªu£_m≠
(
bpf_m≠
 *
m≠
)

4917 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

4918 
îr
, 
pö_fd
;

4920 
pö_fd
 = 
	`bpf_obj_gë
(
m≠
->
pö_∑th
);

4921 i‡(
pö_fd
 < 0) {

4922 
îr
 = -
î∫o
;

4923 i‡(
îr
 =-
ENOENT
) {

4924 
	`¥_debug
("foundÇoÖinned mapÅoÑeuseát '%s'\n",

4925 
m≠
->
pö_∑th
);

4929 
˝
 = 
	`libbpf_°ªº‹_r
(-
îr
, 
îrmsg
, (errmsg));

4930 
	`¥_w¨n
("couldn'tÑetrieveÖinned map '%s': %s\n",

4931 
m≠
->
pö_∑th
, 
˝
);

4932  
îr
;

4935 i‡(!
	`m≠_is_ªu£_com∑t
(
m≠
, 
pö_fd
)) {

4936 
	`¥_w¨n
("couldn'tÑeuseÖinned mapát '%s':Öarameter mismatch\n",

4937 
m≠
->
pö_∑th
);

4938 
	`˛o£
(
pö_fd
);

4939  -
EINVAL
;

4942 
îr
 = 
	`bpf_m≠__ªu£_fd
(
m≠
, 
pö_fd
);

4943 
	`˛o£
(
pö_fd
);

4944 i‡(
îr
) {

4945  
îr
;

4947 
m≠
->
pö√d
 = 
åue
;

4948 
	`¥_debug
("ªu£dÖö√d m≠áà'%s'\n", 
m≠
->
pö_∑th
);

4951 
	}
}

4954 
	$bpf_obje˘__p›uœã_öã∫Æ_m≠
(
bpf_obje˘
 *
obj
, 
bpf_m≠
 *
m≠
)

4956 
libbpf_m≠_ty≥
 
m≠_ty≥
 = 
m≠
->
libbpf_ty≥
;

4957 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

4958 
îr
, 
zîo
 = 0;

4960 i‡(
obj
->
gí_lﬂdî
) {

4961 
	`bpf_gí__m≠_upd©e_ñem
(
obj
->
gí_lﬂdî
, 
m≠
 - obj->
m≠s
,

4962 
m≠
->
mm≠ed
, m≠->
def
.
vÆue_size
);

4963 i‡(
m≠_ty≥
 =
LIBBPF_MAP_RODATA
 || m≠_ty≥ =
LIBBPF_MAP_KCONFIG
)

4964 
	`bpf_gí__m≠_‰ìze
(
obj
->
gí_lﬂdî
, 
m≠
 - obj->
m≠s
);

4967 
îr
 = 
	`bpf_m≠_upd©e_ñem
(
m≠
->
fd
, &
zîo
, m≠->
mm≠ed
, 0);

4968 i‡(
îr
) {

4969 
îr
 = -
î∫o
;

4970 
˝
 = 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg));

4971 
	`¥_w¨n
("Error setting initial map(%s) contents: %s\n",

4972 
m≠
->
«me
, 
˝
);

4973  
îr
;

4977 i‡(
m≠_ty≥
 =
LIBBPF_MAP_RODATA
 || m≠_ty≥ =
LIBBPF_MAP_KCONFIG
) {

4978 
îr
 = 
	`bpf_m≠_‰ìze
(
m≠
->
fd
);

4979 i‡(
îr
) {

4980 
îr
 = -
î∫o
;

4981 
˝
 = 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg));

4982 
	`¥_w¨n
("Error freezing map(%s)ásÑead-only: %s\n",

4983 
m≠
->
«me
, 
˝
);

4984  
îr
;

4988 
	}
}

4990 
bpf_m≠__de°roy
(
bpf_m≠
 *
m≠
);

4992 
boﬁ
 
	$is_pow_of_2
(
size_t
 
x
)

4994  
x
 && (x & (x - 1));

4995 
	}
}

4997 
size_t
 
	$adju°_rögbuf_sz
(
size_t
 
sz
)

4999 
__u32
 
∑ge_sz
 = 
	`sysc⁄f
(
_SC_PAGE_SIZE
);

5000 
__u32
 
mul
;

5003 i‡(
sz
 == 0)

5009 i‡((
sz
 % 
∑ge_sz
Ë=0 && 
	`is_pow_of_2
(sz /Öage_sz))

5010  
sz
;

5016 
mul
 = 1; mu»<
UINT_MAX
 / 
∑ge_sz
; mul <<= 1) {

5017 i‡(
mul
 * 
∑ge_sz
 > 
sz
)

5018  
mul
 * 
∑ge_sz
;

5025  
sz
;

5026 
	}
}

5028 
	$bpf_obje˘__¸óã_m≠
(
bpf_obje˘
 *
obj
, 
bpf_m≠
 *
m≠
, 
boﬁ
 
is_ö√r
)

5030 
	`LIBBPF_OPTS
(
bpf_m≠_¸óã_›ts
, 
¸óã_©å
);

5031 
bpf_m≠_def
 *
def
 = &
m≠
->def;

5032 c⁄° *
m≠_«me
 = 
NULL
;

5033 
îr
 = 0;

5035 i‡(
	`kî√l_suµ‹ts
(
obj
, 
FEAT_PROG_NAME
))

5036 
m≠_«me
 = 
m≠
->
«me
;

5037 
¸óã_©å
.
m≠_ifödex
 = 
m≠
->map_ifindex;

5038 
¸óã_©å
.
m≠_Êags
 = 
def
->map_flags;

5039 
¸óã_©å
.
numa_node
 = 
m≠
->numa_node;

5040 
¸óã_©å
.
m≠_exåa
 = 
m≠
->map_extra;

5042 i‡(
	`bpf_m≠__is_°ru˘_›s
(
m≠
))

5043 
¸óã_©å
.
btf_vmlöux_vÆue_ty≥_id
 = 
m≠
->btf_vmlinux_value_type_id;

5045 i‡(
obj
->
btf
 && 
	`btf__fd
(obj->btf) >= 0) {

5046 
¸óã_©å
.
btf_fd
 = 
	`btf__fd
(
obj
->
btf
);

5047 
¸óã_©å
.
btf_key_ty≥_id
 = 
m≠
->btf_key_type_id;

5048 
¸óã_©å
.
btf_vÆue_ty≥_id
 = 
m≠
->btf_value_type_id;

5051 i‡(
	`bpf_m≠_ty≥__is_m≠_ö_m≠
(
def
->
ty≥
)) {

5052 i‡(
m≠
->
ö√r_m≠
) {

5053 
îr
 = 
	`bpf_obje˘__¸óã_m≠
(
obj
, 
m≠
->
ö√r_m≠
, 
åue
);

5054 i‡(
îr
) {

5055 
	`¥_w¨n
("map '%s': failedÅo create inner map: %d\n",

5056 
m≠
->
«me
, 
îr
);

5057  
îr
;

5059 
m≠
->
ö√r_m≠_fd
 = 
	`bpf_m≠__fd
(m≠->
ö√r_m≠
);

5061 i‡(
m≠
->
ö√r_m≠_fd
 >= 0)

5062 
¸óã_©å
.
ö√r_m≠_fd
 = 
m≠
->inner_map_fd;

5065 
def
->
ty≥
) {

5066 
BPF_MAP_TYPE_RINGBUF
:

5067 
m≠
->
def
.
max_íåõs
 = 
	`adju°_rögbuf_sz
(map->def.max_entries);

5069 
BPF_MAP_TYPE_PERF_EVENT_ARRAY
:

5070 
BPF_MAP_TYPE_CGROUP_ARRAY
:

5071 
BPF_MAP_TYPE_STACK_TRACE
:

5072 
BPF_MAP_TYPE_ARRAY_OF_MAPS
:

5073 
BPF_MAP_TYPE_HASH_OF_MAPS
:

5074 
BPF_MAP_TYPE_DEVMAP
:

5075 
BPF_MAP_TYPE_DEVMAP_HASH
:

5076 
BPF_MAP_TYPE_CPUMAP
:

5077 
BPF_MAP_TYPE_XSKMAP
:

5078 
BPF_MAP_TYPE_SOCKMAP
:

5079 
BPF_MAP_TYPE_SOCKHASH
:

5080 
BPF_MAP_TYPE_QUEUE
:

5081 
BPF_MAP_TYPE_STACK
:

5082 
¸óã_©å
.
btf_fd
 = 0;

5083 
¸óã_©å
.
btf_key_ty≥_id
 = 0;

5084 
¸óã_©å
.
btf_vÆue_ty≥_id
 = 0;

5085 
m≠
->
btf_key_ty≥_id
 = 0;

5086 
m≠
->
btf_vÆue_ty≥_id
 = 0;

5091 i‡(
obj
->
gí_lﬂdî
) {

5092 
	`bpf_gí__m≠_¸óã
(
obj
->
gí_lﬂdî
, 
def
->
ty≥
, 
m≠_«me
,

5093 
def
->
key_size
, def->
vÆue_size
, def->
max_íåõs
,

5094 &
¸óã_©å
, 
is_ö√r
 ? -1 : 
m≠
 - 
obj
->
m≠s
);

5098 
m≠
->
fd
 = 0;

5100 
m≠
->
fd
 = 
	`bpf_m≠_¸óã
(
def
->
ty≥
, 
m≠_«me
,

5101 
def
->
key_size
, def->
vÆue_size
,

5102 
def
->
max_íåõs
, &
¸óã_©å
);

5104 i‡(
m≠
->
fd
 < 0 && (
¸óã_©å
.
btf_key_ty≥_id
 ||

5105 
¸óã_©å
.
btf_vÆue_ty≥_id
)) {

5106 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

5108 
îr
 = -
î∫o
;

5109 
˝
 = 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg));

5110 
	`¥_w¨n
("Error in bpf_create_map_xattr(%s):%s(%d). Retrying without BTF.\n",

5111 
m≠
->
«me
, 
˝
, 
îr
);

5112 
¸óã_©å
.
btf_fd
 = 0;

5113 
¸óã_©å
.
btf_key_ty≥_id
 = 0;

5114 
¸óã_©å
.
btf_vÆue_ty≥_id
 = 0;

5115 
m≠
->
btf_key_ty≥_id
 = 0;

5116 
m≠
->
btf_vÆue_ty≥_id
 = 0;

5117 
m≠
->
fd
 = 
	`bpf_m≠_¸óã
(
def
->
ty≥
, 
m≠_«me
,

5118 
def
->
key_size
, def->
vÆue_size
,

5119 
def
->
max_íåõs
, &
¸óã_©å
);

5122 
îr
 = 
m≠
->
fd
 < 0 ? -
î∫o
 : 0;

5124 i‡(
	`bpf_m≠_ty≥__is_m≠_ö_m≠
(
def
->
ty≥
Ë&& 
m≠
->
ö√r_m≠
) {

5125 i‡(
obj
->
gí_lﬂdî
)

5126 
m≠
->
ö√r_m≠
->
fd
 = -1;

5127 
	`bpf_m≠__de°roy
(
m≠
->
ö√r_m≠
);

5128 
	`z‰ì
(&
m≠
->
ö√r_m≠
);

5131  
îr
;

5132 
	}
}

5134 
	$öô_m≠_ö_m≠_¶Ÿs
(
bpf_obje˘
 *
obj
, 
bpf_m≠
 *
m≠
)

5136 c⁄° 
bpf_m≠
 *
èrg_m≠
;

5137 
i
;

5138 
fd
, 
îr
 = 0;

5140 
i
 = 0; i < 
m≠
->
öô_¶Ÿs_sz
; i++) {

5141 i‡(!
m≠
->
öô_¶Ÿs
[
i
])

5144 
èrg_m≠
 = 
m≠
->
öô_¶Ÿs
[
i
];

5145 
fd
 = 
	`bpf_m≠__fd
(
èrg_m≠
);

5147 i‡(
obj
->
gí_lﬂdî
) {

5148 
	`bpf_gí__p›uœã_ouãr_m≠
(
obj
->
gí_lﬂdî
,

5149 
m≠
 - 
obj
->
m≠s
, 
i
,

5150 
èrg_m≠
 - 
obj
->
m≠s
);

5152 
îr
 = 
	`bpf_m≠_upd©e_ñem
(
m≠
->
fd
, &
i
, &fd, 0);

5154 i‡(
îr
) {

5155 
îr
 = -
î∫o
;

5156 
	`¥_w¨n
("map '%s': failedÅo initialize slot [%d]Åo map '%s' fd=%d: %d\n",

5157 
m≠
->
«me
, 
i
, 
èrg_m≠
->«me, 
fd
, 
îr
);

5158  
îr
;

5160 
	`¥_debug
("map '%s': slot [%d] setÅo map '%s' fd=%d\n",

5161 
m≠
->
«me
, 
i
, 
èrg_m≠
->«me, 
fd
);

5164 
	`z‰ì
(&
m≠
->
öô_¶Ÿs
);

5165 
m≠
->
öô_¶Ÿs_sz
 = 0;

5168 
	}
}

5170 
	$öô_¥og_¨øy_¶Ÿs
(
bpf_obje˘
 *
obj
, 
bpf_m≠
 *
m≠
)

5172 c⁄° 
bpf_¥ogøm
 *
èrg_¥og
;

5173 
i
;

5174 
fd
, 
îr
;

5176 i‡(
obj
->
gí_lﬂdî
)

5177  -
ENOTSUP
;

5179 
i
 = 0; i < 
m≠
->
öô_¶Ÿs_sz
; i++) {

5180 i‡(!
m≠
->
öô_¶Ÿs
[
i
])

5183 
èrg_¥og
 = 
m≠
->
öô_¶Ÿs
[
i
];

5184 
fd
 = 
	`bpf_¥ogøm__fd
(
èrg_¥og
);

5186 
îr
 = 
	`bpf_m≠_upd©e_ñem
(
m≠
->
fd
, &
i
, &fd, 0);

5187 i‡(
îr
) {

5188 
îr
 = -
î∫o
;

5189 
	`¥_w¨n
("map '%s': failedÅo initialize slot [%d]ÅoÖrog '%s' fd=%d: %d\n",

5190 
m≠
->
«me
, 
i
, 
èrg_¥og
->«me, 
fd
, 
îr
);

5191  
îr
;

5193 
	`¥_debug
("map '%s': slot [%d] setÅoÖrog '%s' fd=%d\n",

5194 
m≠
->
«me
, 
i
, 
èrg_¥og
->«me, 
fd
);

5197 
	`z‰ì
(&
m≠
->
öô_¶Ÿs
);

5198 
m≠
->
öô_¶Ÿs_sz
 = 0;

5201 
	}
}

5203 
	$bpf_obje˘_öô_¥og_¨øys
(
bpf_obje˘
 *
obj
)

5205 
bpf_m≠
 *
m≠
;

5206 
i
, 
îr
;

5208 
i
 = 0; i < 
obj
->
ƒ_m≠s
; i++) {

5209 
m≠
 = &
obj
->
m≠s
[
i
];

5211 i‡(!
m≠
->
öô_¶Ÿs_sz
 || m≠->
def
.
ty≥
 !
BPF_MAP_TYPE_PROG_ARRAY
)

5214 
îr
 = 
	`öô_¥og_¨øy_¶Ÿs
(
obj
, 
m≠
);

5215 i‡(
îr
 < 0) {

5216 
	`z˛o£
(
m≠
->
fd
);

5217  
îr
;

5221 
	}
}

5223 
	$m≠_£t_def_max_íåõs
(
bpf_m≠
 *
m≠
)

5225 i‡(
m≠
->
def
.
ty≥
 =
BPF_MAP_TYPE_PERF_EVENT_ARRAY
 && !m≠->def.
max_íåõs
) {

5226 
ƒ_˝us
;

5228 
ƒ_˝us
 = 
	`libbpf_num_possibÀ_˝us
();

5229 i‡(
ƒ_˝us
 < 0) {

5230 
	`¥_w¨n
("map '%s': failedÅo determineÇumber of system CPUs: %d\n",

5231 
m≠
->
«me
, 
ƒ_˝us
);

5232  
ƒ_˝us
;

5234 
	`¥_debug
("m≠ '%s': sëtög sizêtÿ%d\n", 
m≠
->
«me
, 
ƒ_˝us
);

5235 
m≠
->
def
.
max_íåõs
 = 
ƒ_˝us
;

5239 
	}
}

5242 
	$bpf_obje˘__¸óã_m≠s
(
bpf_obje˘
 *
obj
)

5244 
bpf_m≠
 *
m≠
;

5245 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

5246 
i
, 
j
;

5247 
îr
;

5248 
boﬁ
 
ªåõd
;

5250 
i
 = 0; i < 
obj
->
ƒ_m≠s
; i++) {

5251 
m≠
 = &
obj
->
m≠s
[
i
];

5267 i‡(
	`bpf_m≠__is_öã∫Æ
(
m≠
Ë&& !
	`kî√l_suµ‹ts
(
obj
, 
FEAT_GLOBAL_DATA
))

5268 
m≠
->
auto¸óã
 = 
Ál£
;

5271 
	`¥_debug
("m≠ '%s': I¡î«»%d %d\n\n\n", 
m≠
->
«me
, 
	`bpf_m≠__is_öã∫Æ
(m≠), 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_GLOBAL_DATA
));

5273 i‡(!
m≠
->
auto¸óã
) {

5274 
	`¥_debug
("m≠ '%s': skù≥dáuto-¸ótög...\n", 
m≠
->
«me
);

5278 
îr
 = 
	`m≠_£t_def_max_íåõs
(
m≠
);

5279 i‡(
îr
)

5280 
îr_out
;

5282 
ªåõd
 = 
Ál£
;

5283 
ªåy
:

5284 i‡(
m≠
->
pö_∑th
) {

5285 
îr
 = 
	`bpf_obje˘__ªu£_m≠
(
m≠
);

5286 i‡(
îr
) {

5287 
	`¥_w¨n
("map '%s':ÉrrorÑeusingÖinned map\n",

5288 
m≠
->
«me
);

5289 
îr_out
;

5291 i‡(
ªåõd
 && 
m≠
->
fd
 < 0) {

5292 
	`¥_w¨n
("map '%s': cannot findÖinned map\n",

5293 
m≠
->
«me
);

5294 
îr
 = -
ENOENT
;

5295 
îr_out
;

5299 i‡(
m≠
->
fd
 >= 0) {

5300 
	`¥_debug
("map '%s': skipping creation (preset fd=%d)\n",

5301 
m≠
->
«me
, m≠->
fd
);

5303 
îr
 = 
	`bpf_obje˘__¸óã_m≠
(
obj
, 
m≠
, 
Ál£
);

5304 i‡(
îr
)

5305 
îr_out
;

5307 
	`¥_debug
("map '%s': created successfully, fd=%d\n",

5308 
m≠
->
«me
, m≠->
fd
);

5310 i‡(
	`bpf_m≠__is_öã∫Æ
(
m≠
)) {

5311 
îr
 = 
	`bpf_obje˘__p›uœã_öã∫Æ_m≠
(
obj
, 
m≠
);

5312 i‡(
îr
 < 0) {

5313 
	`z˛o£
(
m≠
->
fd
);

5314 
îr_out
;

5318 i‡(
m≠
->
öô_¶Ÿs_sz
 && m≠->
def
.
ty≥
 !
BPF_MAP_TYPE_PROG_ARRAY
) {

5319 
îr
 = 
	`öô_m≠_ö_m≠_¶Ÿs
(
obj
, 
m≠
);

5320 i‡(
îr
 < 0) {

5321 
	`z˛o£
(
m≠
->
fd
);

5322 
îr_out
;

5327 i‡(
m≠
->
pö_∑th
 && !m≠->
pö√d
) {

5328 
îr
 = 
	`bpf_m≠__pö
(
m≠
, 
NULL
);

5329 i‡(
îr
) {

5330 
	`z˛o£
(
m≠
->
fd
);

5331 i‡(!
ªåõd
 && 
îr
 =-
EEXIST
) {

5332 
ªåõd
 = 
åue
;

5333 
ªåy
;

5335 
	`¥_w¨n
("map '%s': failedÅoáuto-pinát '%s': %d\n",

5336 
m≠
->
«me
, m≠->
pö_∑th
, 
îr
);

5337 
îr_out
;

5344 
îr_out
:

5345 
˝
 = 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg));

5346 
	`¥_w¨n
("m≠ '%s': faûedÅÿ¸óã: %s(%d)\n", 
m≠
->
«me
, 
˝
, 
îr
);

5347 
	`¥_≥rm_msg
(
îr
);

5348 
j
 = 0; j < 
i
; j++)

5349 
	`z˛o£
(
obj
->
m≠s
[
j
].
fd
);

5350  
îr
;

5351 
	}
}

5353 
boﬁ
 
	$bpf_c‹e_is_Êav‹_£p
(c⁄° *
s
)

5356  
s
[0] != '_' &&

5357 
s
[1] == '_' && s[2] == '_' && s[3] == '_' &&

5358 
s
[4] != '_';

5359 
	}
}

5365 
size_t
 
	$bpf_c‹e_es£¡ül_«me_Àn
(c⁄° *
«me
)

5367 
size_t
 
n
 = 
	`°æí
(
«me
);

5368 
i
;

5370 
i
 = 
n
 - 5; i >= 0; i--) {

5371 i‡(
	`bpf_c‹e_is_Êav‹_£p
(
«me
 + 
i
))

5372  
i
 + 1;

5374  
n
;

5375 
	}
}

5377 
	$bpf_c‹e_‰ì_ˇnds
(
bpf_c‹e_ˇnd_li°
 *
ˇnds
)

5379 i‡(!
ˇnds
)

5382 
	`‰ì
(
ˇnds
->cands);

5383 
	`‰ì
(
ˇnds
);

5384 
	}
}

5386 
	$bpf_c‹e_add_ˇnds
(
bpf_c‹e_ˇnd
 *
loˇl_ˇnd
,

5387 
size_t
 
loˇl_es£¡_Àn
,

5388 c⁄° 
btf
 *
èrg_btf
,

5389 c⁄° *
èrg_btf_«me
,

5390 
èrg_°¨t_id
,

5391 
bpf_c‹e_ˇnd_li°
 *
ˇnds
)

5393 
bpf_c‹e_ˇnd
 *
√w_ˇnds
, *
ˇnd
;

5394 c⁄° 
btf_ty≥
 *
t
, *
loˇl_t
;

5395 c⁄° *
èrg_«me
, *
loˇl_«me
;

5396 
size_t
 
èrg_es£¡_Àn
;

5397 
n
, 
i
;

5399 
loˇl_t
 = 
	`btf__ty≥_by_id
(
loˇl_ˇnd
->
btf
,Üoˇl_ˇnd->
id
);

5400 
loˇl_«me
 = 
	`btf__°r_by_off£t
(
loˇl_ˇnd
->
btf
, 
loˇl_t
->
«me_off
);

5402 
n
 = 
	`btf__ty≥_˙t
(
èrg_btf
);

5403 
i
 = 
èrg_°¨t_id
; i < 
n
; i++) {

5404 
t
 = 
	`btf__ty≥_by_id
(
èrg_btf
, 
i
);

5405 i‡(
	`btf_köd
(
t
Ë!btf_köd(
loˇl_t
))

5408 
èrg_«me
 = 
	`btf__«me_by_off£t
(
èrg_btf
, 
t
->
«me_off
);

5409 i‡(
	`°r_is_em±y
(
èrg_«me
))

5412 
èrg_es£¡_Àn
 = 
	`bpf_c‹e_es£¡ül_«me_Àn
(
èrg_«me
);

5413 i‡(
èrg_es£¡_Àn
 !
loˇl_es£¡_Àn
)

5416 i‡(
	`°∫cmp
(
loˇl_«me
, 
èrg_«me
, 
loˇl_es£¡_Àn
) != 0)

5419 
	`¥_debug
("CO-REÑelocating [%d] %s %s: foundÅarget candidate [%d] %s %s in [%s]\n",

5420 
loˇl_ˇnd
->
id
, 
	`btf_köd_°r
(
loˇl_t
),

5421 
loˇl_«me
, 
i
, 
	`btf_köd_°r
(
t
), 
èrg_«me
,

5422 
èrg_btf_«me
);

5423 
√w_ˇnds
 = 
	`libbpf_ªÆloˇºay
(
ˇnds
->ˇnds, c™ds->
Àn
 + 1,

5424 (*
ˇnds
->cands));

5425 i‡(!
√w_ˇnds
)

5426  -
ENOMEM
;

5428 
ˇnd
 = &
√w_ˇnds
[
ˇnds
->
Àn
];

5429 
ˇnd
->
btf
 = 
èrg_btf
;

5430 
ˇnd
->
id
 = 
i
;

5432 
ˇnds
->ˇnd†
√w_ˇnds
;

5433 
ˇnds
->
Àn
++;

5436 
	}
}

5438 
	$lﬂd_moduÀ_btfs
(
bpf_obje˘
 *
obj
)

5440 
bpf_btf_öfo
 
öfo
;

5441 
moduÀ_btf
 *
mod_btf
;

5442 
btf
 *btf;

5443 
«me
[64];

5444 
__u32
 
id
 = 0, 
Àn
;

5445 
îr
, 
fd
;

5447 i‡(
obj
->
btf_moduÀs_lﬂded
)

5450 i‡(
obj
->
gí_lﬂdî
)

5454 
obj
->
btf_moduÀs_lﬂded
 = 
åue
;

5457 i‡(!
	`kî√l_suµ‹ts
(
obj
, 
FEAT_MODULE_BTF
))

5460 
åue
) {

5461 
îr
 = 
	`bpf_btf_gë_√xt_id
(
id
, &id);

5462 i‡(
îr
 && 
î∫o
 =
ENOENT
)

5464 i‡(
îr
) {

5465 
îr
 = -
î∫o
;

5466 
	`¥_w¨n
("ÁûedÅÿôî©êBTF obje˘s: %d\n", 
îr
);

5467  
îr
;

5470 
fd
 = 
	`bpf_btf_gë_fd_by_id
(
id
);

5471 i‡(
fd
 < 0) {

5472 i‡(
î∫o
 =
ENOENT
)

5474 
îr
 = -
î∫o
;

5475 
	`¥_w¨n
("ÁûedÅÿgë BTF obje˘ #%d FD: %d\n", 
id
, 
îr
);

5476  
îr
;

5479 
Àn
 = (
öfo
);

5480 
	`mem£t
(&
öfo
, 0, (info));

5481 
öfo
.
«me
 = 
	`±r_to_u64
(name);

5482 
öfo
.
«me_Àn
 = (
«me
);

5484 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
fd
, &
öfo
, &
Àn
);

5485 i‡(
îr
) {

5486 
îr
 = -
î∫o
;

5487 
	`¥_w¨n
("ÁûedÅÿgë BTF obje˘ #%d info: %d\n", 
id
, 
îr
);

5488 
îr_out
;

5492 i‡(!
öfo
.
kî√l_btf
 || 
	`°rcmp
(
«me
, "vmlinux") == 0) {

5493 
	`˛o£
(
fd
);

5497 
btf
 = 
	`btf_gë_‰om_fd
(
fd
, 
obj
->
btf_vmlöux
);

5498 
îr
 = 
	`libbpf_gë_îr‹
(
btf
);

5499 i‡(
îr
) {

5500 
	`¥_w¨n
("failedÅoÜoad module [%s]'s BTF object #%d: %d\n",

5501 
«me
, 
id
, 
îr
);

5502 
îr_out
;

5505 
îr
 = 
	`libbpf_ísuª_mem
((**)&
obj
->
btf_moduÀs
, &obj->
btf_moduÀ_ˇp
,

5506 (*
obj
->
btf_moduÀs
), obj->
btf_moduÀ_˙t
 + 1);

5507 i‡(
îr
)

5508 
îr_out
;

5510 
mod_btf
 = &
obj
->
btf_moduÀs
[obj->
btf_moduÀ_˙t
++];

5512 
mod_btf
->
btf
 = btf;

5513 
mod_btf
->
id
 = id;

5514 
mod_btf
->
fd
 = fd;

5515 
mod_btf
->
«me
 = 
	`°rdup
(name);

5516 i‡(!
mod_btf
->
«me
) {

5517 
îr
 = -
ENOMEM
;

5518 
îr_out
;

5522 
îr_out
:

5523 
	`˛o£
(
fd
);

5524  
îr
;

5528 
	}
}

5530 
bpf_c‹e_ˇnd_li°
 *

5531 
	$bpf_c‹e_föd_ˇnds
(
bpf_obje˘
 *
obj
, c⁄° 
btf
 *
loˇl_btf
, 
__u32
 
loˇl_ty≥_id
)

5533 
bpf_c‹e_ˇnd
 
loˇl_ˇnd
 = {};

5534 
bpf_c‹e_ˇnd_li°
 *
ˇnds
;

5535 c⁄° 
btf
 *
maö_btf
;

5536 c⁄° 
btf_ty≥
 *
loˇl_t
;

5537 c⁄° *
loˇl_«me
;

5538 
size_t
 
loˇl_es£¡_Àn
;

5539 
îr
, 
i
;

5541 
loˇl_ˇnd
.
btf
 = 
loˇl_btf
;

5542 
loˇl_ˇnd
.
id
 = 
loˇl_ty≥_id
;

5543 
loˇl_t
 = 
	`btf__ty≥_by_id
(
loˇl_btf
, 
loˇl_ty≥_id
);

5544 i‡(!
loˇl_t
)

5545  
	`ERR_PTR
(-
EINVAL
);

5547 
loˇl_«me
 = 
	`btf__«me_by_off£t
(
loˇl_btf
, 
loˇl_t
->
«me_off
);

5548 i‡(
	`°r_is_em±y
(
loˇl_«me
))

5549  
	`ERR_PTR
(-
EINVAL
);

5550 
loˇl_es£¡_Àn
 = 
	`bpf_c‹e_es£¡ül_«me_Àn
(
loˇl_«me
);

5552 
ˇnds
 = 
	`ˇŒoc
(1, (*cands));

5553 i‡(!
ˇnds
)

5554  
	`ERR_PTR
(-
ENOMEM
);

5557 
maö_btf
 = 
obj
->
btf_vmlöux_ovîride
 ?: obj->
btf_vmlöux
;

5558 
îr
 = 
	`bpf_c‹e_add_ˇnds
(&
loˇl_ˇnd
, 
loˇl_es£¡_Àn
, 
maö_btf
, "vmlöux", 1, 
ˇnds
);

5559 i‡(
îr
)

5560 
îr_out
;

5563 i‡(
ˇnds
->
Àn
)

5564  
ˇnds
;

5567 i‡(
obj
->
btf_vmlöux_ovîride
)

5568  
ˇnds
;

5571 
îr
 = 
	`lﬂd_moduÀ_btfs
(
obj
);

5572 i‡(
îr
)

5573 
îr_out
;

5575 
i
 = 0; i < 
obj
->
btf_moduÀ_˙t
; i++) {

5576 
îr
 = 
	`bpf_c‹e_add_ˇnds
(&
loˇl_ˇnd
, 
loˇl_es£¡_Àn
,

5577 
obj
->
btf_moduÀs
[
i
].
btf
,

5578 
obj
->
btf_moduÀs
[
i
].
«me
,

5579 
	`btf__ty≥_˙t
(
obj
->
btf_vmlöux
),

5580 
ˇnds
);

5581 i‡(
îr
)

5582 
îr_out
;

5585  
ˇnds
;

5586 
îr_out
:

5587 
	`bpf_c‹e_‰ì_ˇnds
(
ˇnds
);

5588  
	`ERR_PTR
(
îr
);

5589 
	}
}

5610 
	$bpf_c‹e_ty≥s_¨e_com∑t
(c⁄° 
btf
 *
loˇl_btf
, 
__u32
 
loˇl_id
,

5611 c⁄° 
btf
 *
èrg_btf
, 
__u32
 
èrg_id
)

5613 c⁄° 
btf_ty≥
 *
loˇl_ty≥
, *
èrg_ty≥
;

5614 
dïth
 = 32;

5617 
loˇl_ty≥
 = 
	`btf__ty≥_by_id
(
loˇl_btf
, 
loˇl_id
);

5618 
èrg_ty≥
 = 
	`btf__ty≥_by_id
(
èrg_btf
, 
èrg_id
);

5619 i‡(
	`btf_köd
(
loˇl_ty≥
Ë!btf_köd(
èrg_ty≥
))

5622 
ªcur
:

5623 
dïth
--;

5624 i‡(
dïth
 < 0)

5625  -
EINVAL
;

5627 
loˇl_ty≥
 = 
	`skù_mods_™d_ty≥defs
(
loˇl_btf
, 
loˇl_id
, &local_id);

5628 
èrg_ty≥
 = 
	`skù_mods_™d_ty≥defs
(
èrg_btf
, 
èrg_id
, &targ_id);

5629 i‡(!
loˇl_ty≥
 || !
èrg_ty≥
)

5630  -
EINVAL
;

5632 i‡(
	`btf_köd
(
loˇl_ty≥
Ë!btf_köd(
èrg_ty≥
))

5635 
	`btf_köd
(
loˇl_ty≥
)) {

5636 
BTF_KIND_UNKN
:

5637 
BTF_KIND_STRUCT
:

5638 
BTF_KIND_UNION
:

5639 
BTF_KIND_ENUM
:

5640 
BTF_KIND_FWD
:

5642 
BTF_KIND_INT
:

5646  
	`btf_öt_off£t
(
loˇl_ty≥
Ë=0 && btf_öt_off£t(
èrg_ty≥
) == 0;

5647 
BTF_KIND_PTR
:

5648 
loˇl_id
 = 
loˇl_ty≥
->
ty≥
;

5649 
èrg_id
 = 
èrg_ty≥
->
ty≥
;

5650 
ªcur
;

5651 
BTF_KIND_ARRAY
:

5652 
loˇl_id
 = 
	`btf_¨øy
(
loˇl_ty≥
)->
ty≥
;

5653 
èrg_id
 = 
	`btf_¨øy
(
èrg_ty≥
)->
ty≥
;

5654 
ªcur
;

5655 
BTF_KIND_FUNC_PROTO
: {

5656 
btf_∑øm
 *
loˇl_p
 = 
	`btf_∑øms
(
loˇl_ty≥
);

5657 
btf_∑øm
 *
èrg_p
 = 
	`btf_∑øms
(
èrg_ty≥
);

5658 
__u16
 
loˇl_vÀn
 = 
	`btf_vÀn
(
loˇl_ty≥
);

5659 
__u16
 
èrg_vÀn
 = 
	`btf_vÀn
(
èrg_ty≥
);

5660 
i
, 
îr
;

5662 i‡(
loˇl_vÀn
 !
èrg_vÀn
)

5665 
i
 = 0; i < 
loˇl_vÀn
; i++, 
loˇl_p
++, 
èrg_p
++) {

5666 
	`skù_mods_™d_ty≥defs
(
loˇl_btf
, 
loˇl_p
->
ty≥
, &
loˇl_id
);

5667 
	`skù_mods_™d_ty≥defs
(
èrg_btf
, 
èrg_p
->
ty≥
, &
èrg_id
);

5668 
îr
 = 
	`bpf_c‹e_ty≥s_¨e_com∑t
(
loˇl_btf
, 
loˇl_id
, 
èrg_btf
, 
èrg_id
);

5669 i‡(
îr
 <= 0)

5670  
îr
;

5674 
	`skù_mods_™d_ty≥defs
(
loˇl_btf
, 
loˇl_ty≥
->
ty≥
, &
loˇl_id
);

5675 
	`skù_mods_™d_ty≥defs
(
èrg_btf
, 
èrg_ty≥
->
ty≥
, &
èrg_id
);

5676 
ªcur
;

5679 
	`¥_w¨n
("unexpected kind %sÑelocated,Üocal [%d],Åarget [%d]\n",

5680 
	`btf_köd_°r
(
loˇl_ty≥
), 
loˇl_id
, 
èrg_id
);

5683 
	}
}

5685 
size_t
 
	$bpf_c‹e_hash_‚
(c⁄° *
key
, *
˘x
)

5687  (
size_t
)
key
;

5688 
	}
}

5690 
boﬁ
 
	$bpf_c‹e_equÆ_‚
(c⁄° *
k1
, c⁄° *
k2
, *
˘x
)

5692  
k1
 =
k2
;

5693 
	}
}

5695 *
	$u32_as_hash_key
(
__u32
 
x
)

5697  (*)(
uöçå_t
)
x
;

5698 
	}
}

5700 
	$ªc‹d_ªlo_c‹e
(
bpf_¥ogøm
 *
¥og
,

5701 c⁄° 
bpf_c‹e_ªlo
 *
c‹e_ªlo
, 
ö¢_idx
)

5703 
ªloc_desc
 *
ªlos
, *
ªlo
;

5705 
ªlos
 = 
	`libbpf_ªÆloˇºay
(
¥og
->
ªloc_desc
,

5706 
¥og
->
ƒ_ªloc
 + 1, (*
ªlos
));

5707 i‡(!
ªlos
)

5708  -
ENOMEM
;

5709 
ªlo
 = &
ªlos
[
¥og
->
ƒ_ªloc
];

5710 
ªlo
->
ty≥
 = 
RELO_CORE
;

5711 
ªlo
->
ö¢_idx
 = insn_idx;

5712 
ªlo
->
c‹e_ªlo
 = core_relo;

5713 
¥og
->
ªloc_desc
 = 
ªlos
;

5714 
¥og
->
ƒ_ªloc
++;

5716 
	}
}

5718 c⁄° 
bpf_c‹e_ªlo
 *
	$föd_ªlo_c‹e
(
bpf_¥ogøm
 *
¥og
, 
ö¢_idx
)

5720 
ªloc_desc
 *
ªlo
;

5721 
i
;

5723 
i
 = 0; i < 
¥og
->
ƒ_ªloc
; i++) {

5724 
ªlo
 = &
¥og
->
ªloc_desc
[
i
];

5725 i‡(
ªlo
->
ty≥
 !
RELO_CORE
 ||Ñño->
ö¢_idx
 != insn_idx)

5728  
ªlo
->
c‹e_ªlo
;

5731  
NULL
;

5732 
	}
}

5734 
	$bpf_c‹e_ªsﬁve_ªlo
(
bpf_¥ogøm
 *
¥og
,

5735 c⁄° 
bpf_c‹e_ªlo
 *
ªlo
,

5736 
ªlo_idx
,

5737 c⁄° 
btf
 *
loˇl_btf
,

5738 
hashm≠
 *
ˇnd_ˇche
,

5739 
bpf_c‹e_ªlo_ªs
 *
èrg_ªs
)

5741 
bpf_c‹e_•ec
 
•ecs_s¸©ch
[3] = {};

5742 c⁄° *
ty≥_key
 = 
	`u32_as_hash_key
(
ªlo
->
ty≥_id
);

5743 
bpf_c‹e_ˇnd_li°
 *
ˇnds
 = 
NULL
;

5744 c⁄° *
¥og_«me
 = 
¥og
->
«me
;

5745 c⁄° 
btf_ty≥
 *
loˇl_ty≥
;

5746 c⁄° *
loˇl_«me
;

5747 
__u32
 
loˇl_id
 = 
ªlo
->
ty≥_id
;

5748 
îr
;

5750 
loˇl_ty≥
 = 
	`btf__ty≥_by_id
(
loˇl_btf
, 
loˇl_id
);

5751 i‡(!
loˇl_ty≥
)

5752  -
EINVAL
;

5754 
loˇl_«me
 = 
	`btf__«me_by_off£t
(
loˇl_btf
, 
loˇl_ty≥
->
«me_off
);

5755 i‡(!
loˇl_«me
)

5756  -
EINVAL
;

5758 i‡(
ªlo
->
köd
 !
BPF_CORE_TYPE_ID_LOCAL
 &&

5759 !
	`hashm≠__föd
(
ˇnd_ˇche
, 
ty≥_key
, (**)&
ˇnds
)) {

5760 
ˇnds
 = 
	`bpf_c‹e_föd_ˇnds
(
¥og
->
obj
, 
loˇl_btf
, 
loˇl_id
);

5761 i‡(
	`IS_ERR
(
ˇnds
)) {

5762 
	`¥_w¨n
("prog '%s':Ñelo #%d:Åarget candidate search failed for [%d] %s %s: %ld\n",

5763 
¥og_«me
, 
ªlo_idx
, 
loˇl_id
, 
	`btf_köd_°r
(
loˇl_ty≥
),

5764 
loˇl_«me
, 
	`PTR_ERR
(
ˇnds
));

5765  
	`PTR_ERR
(
ˇnds
);

5767 
îr
 = 
	`hashm≠__£t
(
ˇnd_ˇche
, 
ty≥_key
, 
ˇnds
, 
NULL
, NULL);

5768 i‡(
îr
) {

5769 
	`bpf_c‹e_‰ì_ˇnds
(
ˇnds
);

5770  
îr
;

5774  
	`bpf_c‹e_ˇlc_ªlo_ö¢
(
¥og_«me
, 
ªlo
, 
ªlo_idx
, 
loˇl_btf
, 
ˇnds
, 
•ecs_s¸©ch
,

5775 
èrg_ªs
);

5776 
	}
}

5779 
	$bpf_obje˘__ªloˇã_c‹e
(
bpf_obje˘
 *
obj
, c⁄° *
èrg_btf_∑th
)

5781 c⁄° 
btf_ext_öfo_£c
 *
£c
;

5782 
bpf_c‹e_ªlo_ªs
 
èrg_ªs
;

5783 c⁄° 
bpf_c‹e_ªlo
 *
ªc
;

5784 c⁄° 
btf_ext_öfo
 *
£g
;

5785 
hashm≠_íåy
 *
íåy
;

5786 
hashm≠
 *
ˇnd_ˇche
 = 
NULL
;

5787 
bpf_¥ogøm
 *
¥og
;

5788 
bpf_ö¢
 *
ö¢
;

5789 c⁄° *
£c_«me
;

5790 
i
, 
îr
 = 0, 
ö¢_idx
, 
£c_idx
, 
£c_num
;

5792 i‡(
obj
->
btf_ext
->
c‹e_ªlo_öfo
.
Àn
 == 0)

5795 i‡(
èrg_btf_∑th
) {

5796 
obj
->
btf_vmlöux_ovîride
 = 
	`btf__∑r£
(
èrg_btf_∑th
, 
NULL
);

5797 
îr
 = 
	`libbpf_gë_îr‹
(
obj
->
btf_vmlöux_ovîride
);

5798 i‡(
îr
) {

5799 
	`¥_w¨n
("ÁûedÅÿ∑r£Å¨gë BTF: %d\n", 
îr
);

5800  
îr
;

5804 
ˇnd_ˇche
 = 
	`hashm≠__√w
(
bpf_c‹e_hash_‚
, 
bpf_c‹e_equÆ_‚
, 
NULL
);

5805 i‡(
	`IS_ERR
(
ˇnd_ˇche
)) {

5806 
îr
 = 
	`PTR_ERR
(
ˇnd_ˇche
);

5807 
out
;

5810 
£g
 = &
obj
->
btf_ext
->
c‹e_ªlo_öfo
;

5811 
£c_num
 = 0;

5812 
	`f‹_óch_btf_ext_£c
(
£g
, 
£c
) {

5813 
£c_idx
 = 
£g
->
£c_idxs
[
£c_num
];

5814 
£c_num
++;

5816 
£c_«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
£c
->
£c_«me_off
);

5817 i‡(
	`°r_is_em±y
(
£c_«me
)) {

5818 
îr
 = -
EINVAL
;

5819 
out
;

5822 
	`¥_debug
("£¯'%s': found %d CO-REÑñoˇti⁄s\n", 
£c_«me
, 
£c
->
num_öfo
);

5824 
	`f‹_óch_btf_ext_ªc
(
£g
, 
£c
, 
i
, 
ªc
) {

5825 i‡(
ªc
->
ö¢_off
 % 
BPF_INSN_SZ
)

5826  -
EINVAL
;

5827 
ö¢_idx
 = 
ªc
->
ö¢_off
 / 
BPF_INSN_SZ
;

5828 
¥og
 = 
	`föd_¥og_by_£c_ö¢
(
obj
, 
£c_idx
, 
ö¢_idx
);

5829 i‡(!
¥og
) {

5838 
	`¥_debug
("sec '%s': skipping CO-REÑelocation #%d for insn #%d belongingÅoÉliminated weak subprogram\n",

5839 
£c_«me
, 
i
, 
ö¢_idx
);

5845 i‡(!
¥og
->
autﬁﬂd
)

5852 
ö¢_idx
 = in¢_idx - 
¥og
->
£c_ö¢_off
;

5853 i‡(
ö¢_idx
 >
¥og
->
ö¢s_˙t
)

5854  -
EINVAL
;

5855 
ö¢
 = &
¥og
->
ö¢s
[
ö¢_idx
];

5857 
îr
 = 
	`ªc‹d_ªlo_c‹e
(
¥og
, 
ªc
, 
ö¢_idx
);

5858 i‡(
îr
) {

5859 
	`¥_w¨n
("prog '%s':Ñelo #%d: failedÅoÑecordÑelocation: %d\n",

5860 
¥og
->
«me
, 
i
, 
îr
);

5861 
out
;

5864 i‡(
¥og
->
obj
->
gí_lﬂdî
)

5867 
îr
 = 
	`bpf_c‹e_ªsﬁve_ªlo
(
¥og
, 
ªc
, 
i
, 
obj
->
btf
, 
ˇnd_ˇche
, &
èrg_ªs
);

5868 i‡(
îr
) {

5869 
	`¥_w¨n
("prog '%s':Ñelo #%d: failedÅoÑelocate: %d\n",

5870 
¥og
->
«me
, 
i
, 
îr
);

5871 
out
;

5874 
îr
 = 
	`bpf_c‹e_∑tch_ö¢
(
¥og
->
«me
, 
ö¢
, 
ö¢_idx
, 
ªc
, 
i
, &
èrg_ªs
);

5875 i‡(
îr
) {

5876 
	`¥_w¨n
("prog '%s':Ñelo #%d: failedÅoÖatch insn #%u: %d\n",

5877 
¥og
->
«me
, 
i
, 
ö¢_idx
, 
îr
);

5878 
out
;

5883 
out
:

5885 
	`btf__‰ì
(
obj
->
btf_vmlöux_ovîride
);

5886 
obj
->
btf_vmlöux_ovîride
 = 
NULL
;

5888 i‡(!
	`IS_ERR_OR_NULL
(
ˇnd_ˇche
)) {

5889 
	`hashm≠__f‹_óch_íåy
(
ˇnd_ˇche
, 
íåy
, 
i
) {

5890 
	`bpf_c‹e_‰ì_ˇnds
(
íåy
->
vÆue
);

5892 
	`hashm≠__‰ì
(
ˇnd_ˇche
);

5894  
îr
;

5895 
	}
}

5898 
	#MAP_LDIMM64_POISON_BASE
 2001000000

	)

5899 
	#MAP_LDIMM64_POISON_PFX
 "200100"

	)

5901 
	$pois⁄_m≠_ldimm64
(
bpf_¥ogøm
 *
¥og
, 
ªlo_idx
,

5902 
ö¢_idx
, 
bpf_ö¢
 *
ö¢
,

5903 
m≠_idx
, c⁄° 
bpf_m≠
 *
m≠
)

5905 
i
;

5907 
	`¥_debug
("prog '%s':Ñelo #%d:Öoisoning insn #%dÅhatÜoads map #%d '%s'\n",

5908 
¥og
->
«me
, 
ªlo_idx
, 
ö¢_idx
, 
m≠_idx
, 
m≠
->name);

5911 
i
 = 0; i < 2; i++) {

5912 
ö¢
->
code
 = 
BPF_JMP
 | 
BPF_CALL
;

5913 
ö¢
->
d°_ªg
 = 0;

5914 
ö¢
->
§c_ªg
 = 0;

5915 
ö¢
->
off
 = 0;

5921 
ö¢
->
imm
 = 
MAP_LDIMM64_POISON_BASE
 + 
m≠_idx
;

5923 
ö¢
++;

5925 
	}
}

5933 
	$bpf_obje˘__ªloˇã_d©a
(
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
¥og
)

5935 
i
;

5937 
i
 = 0; i < 
¥og
->
ƒ_ªloc
; i++) {

5938 
ªloc_desc
 *
ªlo
 = &
¥og
->ªloc_desc[
i
];

5939 
bpf_ö¢
 *
ö¢
 = &
¥og
->
ö¢s
[
ªlo
->
ö¢_idx
];

5940 c⁄° 
bpf_m≠
 *
m≠
;

5941 
exã∫_desc
 *
ext
;

5943 
ªlo
->
ty≥
) {

5944 
RELO_LD64
:

5945 
m≠
 = &
obj
->
m≠s
[
ªlo
->
m≠_idx
];

5946 i‡(
obj
->
gí_lﬂdî
) {

5947 
ö¢
[0].
§c_ªg
 = 
BPF_PSEUDO_MAP_IDX
;

5948 
ö¢
[0].
imm
 = 
ªlo
->
m≠_idx
;

5949 } i‡(
m≠
->
auto¸óã
) {

5950 
ö¢
[0].
§c_ªg
 = 
BPF_PSEUDO_MAP_FD
;

5951 
ö¢
[0].
imm
 = 
m≠
->
fd
;

5953 
	`pois⁄_m≠_ldimm64
(
¥og
, 
i
, 
ªlo
->
ö¢_idx
, 
ö¢
,

5954 
ªlo
->
m≠_idx
, 
m≠
);

5957 
RELO_DATA
:

5958 
m≠
 = &
obj
->
m≠s
[
ªlo
->
m≠_idx
];

5959 
ö¢
[1].
imm
 = in¢[0].imm + 
ªlo
->
sym_off
;

5960 i‡(
obj
->
gí_lﬂdî
) {

5961 
ö¢
[0].
§c_ªg
 = 
BPF_PSEUDO_MAP_IDX_VALUE
;

5962 
ö¢
[0].
imm
 = 
ªlo
->
m≠_idx
;

5963 } i‡(
m≠
->
auto¸óã
) {

5964 
ö¢
[0].
§c_ªg
 = 
BPF_PSEUDO_MAP_VALUE
;

5965 
ö¢
[0].
imm
 = 
m≠
->
fd
;

5967 
	`pois⁄_m≠_ldimm64
(
¥og
, 
i
, 
ªlo
->
ö¢_idx
, 
ö¢
,

5968 
ªlo
->
m≠_idx
, 
m≠
);

5971 
RELO_EXTERN_VAR
:

5972 
ext
 = &
obj
->
exã∫s
[
ªlo
->
sym_off
];

5973 i‡(
ext
->
ty≥
 =
EXT_KCFG
) {

5974 i‡(
obj
->
gí_lﬂdî
) {

5975 
ö¢
[0].
§c_ªg
 = 
BPF_PSEUDO_MAP_IDX_VALUE
;

5976 
ö¢
[0].
imm
 = 
obj
->
kc⁄fig_m≠_idx
;

5978 
ö¢
[0].
§c_ªg
 = 
BPF_PSEUDO_MAP_VALUE
;

5979 
ö¢
[0].
imm
 = 
obj
->
m≠s
[obj->
kc⁄fig_m≠_idx
].
fd
;

5981 
ö¢
[1].
imm
 = 
ext
->
kcfg
.
d©a_off
;

5983 i‡(
ext
->
ksym
.
ty≥_id
 &&Éxt->
is_£t
) {

5984 
ö¢
[0].
§c_ªg
 = 
BPF_PSEUDO_BTF_ID
;

5985 
ö¢
[0].
imm
 = 
ext
->
ksym
.
kî√l_btf_id
;

5986 
ö¢
[1].
imm
 = 
ext
->
ksym
.
kî√l_btf_obj_fd
;

5988 
ö¢
[0].
imm
 = (
__u32
)
ext
->
ksym
.
addr
;

5989 
ö¢
[1].
imm
 = 
ext
->
ksym
.
addr
 >> 32;

5993 
RELO_EXTERN_FUNC
:

5994 
ext
 = &
obj
->
exã∫s
[
ªlo
->
sym_off
];

5995 
ö¢
[0].
§c_ªg
 = 
BPF_PSEUDO_KFUNC_CALL
;

5996 i‡(
ext
->
is_£t
) {

5997 
ö¢
[0].
imm
 = 
ext
->
ksym
.
kî√l_btf_id
;

5998 
ö¢
[0].
off
 = 
ext
->
ksym
.
btf_fd_idx
;

6000 
ö¢
[0].
imm
 = 0;

6001 
ö¢
[0].
off
 = 0;

6004 
RELO_SUBPROG_ADDR
:

6005 i‡(
ö¢
[0].
§c_ªg
 !
BPF_PSEUDO_FUNC
) {

6006 
	`¥_w¨n
("prog '%s':Ñelo #%d: bad insn\n",

6007 
¥og
->
«me
, 
i
);

6008  -
EINVAL
;

6012 
RELO_CALL
:

6015 
RELO_CORE
:

6019 
	`¥_w¨n
("prog '%s':Ñelo #%d: badÑeloÅype %d\n",

6020 
¥og
->
«me
, 
i
, 
ªlo
->
ty≥
);

6021  -
EINVAL
;

6026 
	}
}

6028 
	$adju°_¥og_btf_ext_öfo
(c⁄° 
bpf_obje˘
 *
obj
,

6029 c⁄° 
bpf_¥ogøm
 *
¥og
,

6030 c⁄° 
btf_ext_öfo
 *
ext_öfo
,

6031 **
¥og_öfo
, 
__u32
 *
¥og_ªc_˙t
,

6032 
__u32
 *
¥og_ªc_sz
)

6034 *
c›y_°¨t
 = 
NULL
, *
c›y_íd
 = NULL;

6035 *
ªc
, *
ªc_íd
, *
√w_¥og_öfo
;

6036 c⁄° 
btf_ext_öfo_£c
 *
£c
;

6037 
size_t
 
ﬁd_sz
, 
√w_sz
;

6038 
i
, 
£c_num
, 
£c_idx
, 
off_adj
;

6040 
£c_num
 = 0;

6041 
	`f‹_óch_btf_ext_£c
(
ext_öfo
, 
£c
) {

6042 
£c_idx
 = 
ext_öfo
->
£c_idxs
[
£c_num
];

6043 
£c_num
++;

6044 i‡(
¥og
->
£c_idx
 != sec_idx)

6047 
	`f‹_óch_btf_ext_ªc
(
ext_öfo
, 
£c
, 
i
, 
ªc
) {

6048 
__u32
 
ö¢_off
 = *(__u32 *)
ªc
 / 
BPF_INSN_SZ
;

6050 i‡(
ö¢_off
 < 
¥og
->
£c_ö¢_off
)

6052 i‡(
ö¢_off
 >
¥og
->
£c_ö¢_off
 +Örog->
£c_ö¢_˙t
)

6055 i‡(!
c›y_°¨t
)

6056 
c›y_°¨t
 = 
ªc
;

6057 
c›y_íd
 = 
ªc
 + 
ext_öfo
->
ªc_size
;

6060 i‡(!
c›y_°¨t
)

6061  -
ENOENT
;

6066 
ﬁd_sz
 = (
size_t
)(*
¥og_ªc_˙t
Ë* 
ext_öfo
->
ªc_size
;

6067 
√w_sz
 = 
ﬁd_sz
 + (
c›y_íd
 - 
c›y_°¨t
);

6068 
√w_¥og_öfo
 = 
	`ªÆloc
(*
¥og_öfo
, 
√w_sz
);

6069 i‡(!
√w_¥og_öfo
)

6070  -
ENOMEM
;

6071 *
¥og_öfo
 = 
√w_¥og_öfo
;

6072 *
¥og_ªc_˙t
 = 
√w_sz
 / 
ext_öfo
->
ªc_size
;

6073 
	`mem˝y
(
√w_¥og_öfo
 + 
ﬁd_sz
, 
c›y_°¨t
, 
c›y_íd
 - copy_start);

6081 
off_adj
 = 
¥og
->
sub_ö¢_off
 -Örog->
£c_ö¢_off
;

6082 
ªc
 = 
√w_¥og_öfo
 + 
ﬁd_sz
;

6083 
ªc_íd
 = 
√w_¥og_öfo
 + 
√w_sz
;

6084 ; 
ªc
 < 
ªc_íd
;Ñe¯+
ext_öfo
->
ªc_size
) {

6085 
__u32
 *
ö¢_off
 = 
ªc
;

6087 *
ö¢_off
 = *ö¢_of‡/ 
BPF_INSN_SZ
 + 
off_adj
;

6089 *
¥og_ªc_sz
 = 
ext_öfo
->
ªc_size
;

6093  -
ENOENT
;

6094 
	}
}

6097 
	$ªloc_¥og_func_™d_löe_öfo
(c⁄° 
bpf_obje˘
 *
obj
,

6098 
bpf_¥ogøm
 *
maö_¥og
,

6099 c⁄° 
bpf_¥ogøm
 *
¥og
)

6101 
îr
;

6106 i‡(!
obj
->
btf_ext
 || !
	`kî√l_suµ‹ts
(obj, 
FEAT_BTF_FUNC
))

6112 i‡(
maö_¥og
 !
¥og
 && !maö_¥og->
func_öfo
)

6113 
löe_öfo
;

6115 
îr
 = 
	`adju°_¥og_btf_ext_öfo
(
obj
, 
¥og
, &obj->
btf_ext
->
func_öfo
,

6116 &
maö_¥og
->
func_öfo
,

6117 &
maö_¥og
->
func_öfo_˙t
,

6118 &
maö_¥og
->
func_öfo_ªc_size
);

6119 i‡(
îr
) {

6120 i‡(
îr
 !-
ENOENT
) {

6121 
	`¥_w¨n
("prog '%s':ÉrrorÑelocating .BTF.ext function info: %d\n",

6122 
¥og
->
«me
, 
îr
);

6123  
îr
;

6125 i‡(
maö_¥og
->
func_öfo
) {

6130 
	`¥_w¨n
("¥og '%s': missög .BTF.exàfun˘i⁄ info.\n", 
¥og
->
«me
);

6131  
îr
;

6134 
	`¥_w¨n
("prog '%s': missing .BTF.ext function info forÅhe mainÖrogram, skippingáll of .BTF.ext func info.\n",

6135 
¥og
->
«me
);

6138 
löe_öfo
:

6140 i‡(
maö_¥og
 !
¥og
 && !maö_¥og->
löe_öfo
)

6143 
îr
 = 
	`adju°_¥og_btf_ext_öfo
(
obj
, 
¥og
, &obj->
btf_ext
->
löe_öfo
,

6144 &
maö_¥og
->
löe_öfo
,

6145 &
maö_¥og
->
löe_öfo_˙t
,

6146 &
maö_¥og
->
löe_öfo_ªc_size
);

6147 i‡(
îr
) {

6148 i‡(
îr
 !-
ENOENT
) {

6149 
	`¥_w¨n
("prog '%s':ÉrrorÑelocating .BTF.extÜine info: %d\n",

6150 
¥og
->
«me
, 
îr
);

6151  
îr
;

6153 i‡(
maö_¥og
->
löe_öfo
) {

6158 
	`¥_w¨n
("¥og '%s': missög .BTF.exàlöêöfo.\n", 
¥og
->
«me
);

6159  
îr
;

6162 
	`¥_w¨n
("prog '%s': missing .BTF.extÜine info forÅhe mainÖrogram, skippingáll of .BTF.extÜine info.\n",

6163 
¥og
->
«me
);

6166 
	}
}

6168 
	$cmp_ªlo_by_ö¢_idx
(c⁄° *
key
, c⁄° *
ñem
)

6170 
size_t
 
ö¢_idx
 = *(c⁄° size_à*)
key
;

6171 c⁄° 
ªloc_desc
 *
ªlo
 = 
ñem
;

6173 i‡(
ö¢_idx
 =
ªlo
->insn_idx)

6175  
ö¢_idx
 < 
ªlo
->insn_idx ? -1 : 1;

6176 
	}
}

6178 
ªloc_desc
 *
	$föd_¥og_ö¢_ªlo
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
size_t
 
ö¢_idx
)

6180 i‡(!
¥og
->
ƒ_ªloc
)

6181  
NULL
;

6182  
	`b£¨ch
(&
ö¢_idx
, 
¥og
->
ªloc_desc
,Örog->
ƒ_ªloc
,

6183 (*
¥og
->
ªloc_desc
), 
cmp_ªlo_by_ö¢_idx
);

6184 
	}
}

6186 
	$≠≥nd_sub¥og_ªlos
(
bpf_¥ogøm
 *
maö_¥og
, bpf_¥ogøm *
sub¥og
)

6188 
√w_˙t
 = 
maö_¥og
->
ƒ_ªloc
 + 
sub¥og
->nr_reloc;

6189 
ªloc_desc
 *
ªlos
;

6190 
i
;

6192 i‡(
maö_¥og
 =
sub¥og
)

6194 
ªlos
 = 
	`libbpf_ªÆloˇºay
(
maö_¥og
->
ªloc_desc
, 
√w_˙t
, (*relos));

6195 i‡(!
ªlos
)

6196  -
ENOMEM
;

6197 i‡(
sub¥og
->
ƒ_ªloc
)

6198 
	`mem˝y
(
ªlos
 + 
maö_¥og
->
ƒ_ªloc
, 
sub¥og
->
ªloc_desc
,

6199 (*
ªlos
Ë* 
sub¥og
->
ƒ_ªloc
);

6201 
i
 = 
maö_¥og
->
ƒ_ªloc
; i < 
√w_˙t
; i++)

6202 
ªlos
[
i
].
ö¢_idx
 +
sub¥og
->
sub_ö¢_off
;

6206 
maö_¥og
->
ªloc_desc
 = 
ªlos
;

6207 
maö_¥og
->
ƒ_ªloc
 = 
√w_˙t
;

6209 
	}
}

6212 
	$bpf_obje˘__ªloc_code
(
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
maö_¥og
,

6213 
bpf_¥ogøm
 *
¥og
)

6215 
size_t
 
sub_ö¢_idx
, 
ö¢_idx
, 
√w_˙t
;

6216 
bpf_¥ogøm
 *
sub¥og
;

6217 
bpf_ö¢
 *
ö¢s
, *
ö¢
;

6218 
ªloc_desc
 *
ªlo
;

6219 
îr
;

6221 
îr
 = 
	`ªloc_¥og_func_™d_löe_öfo
(
obj
, 
maö_¥og
, 
¥og
);

6222 i‡(
îr
)

6223  
îr
;

6225 
ö¢_idx
 = 0; in¢_idx < 
¥og
->
£c_ö¢_˙t
; insn_idx++) {

6226 
ö¢
 = &
maö_¥og
->
ö¢s
[
¥og
->
sub_ö¢_off
 + 
ö¢_idx
];

6227 i‡(!
	`ö¢_is_sub¥og_ˇŒ
(
ö¢
Ë&& !
	`ö¢_is_p£udo_func
(insn))

6230 
ªlo
 = 
	`föd_¥og_ö¢_ªlo
(
¥og
, 
ö¢_idx
);

6231 i‡(
ªlo
 &&Ñño->
ty≥
 =
RELO_EXTERN_FUNC
)

6236 i‡(
ªlo
 &&Ñño->
ty≥
 !
RELO_CALL
 &&Ñño->ty≥ !
RELO_SUBPROG_ADDR
) {

6237 
	`¥_w¨n
("prog '%s': unexpectedÑelo for insn #%zu,Åype %d\n",

6238 
¥og
->
«me
, 
ö¢_idx
, 
ªlo
->
ty≥
);

6239  -
LIBBPF_ERRNO__RELOC
;

6241 i‡(
ªlo
) {

6252 i‡(
ªlo
->
ty≥
 =
RELO_CALL
)

6253 
sub_ö¢_idx
 = 
ªlo
->
sym_off
 / 
BPF_INSN_SZ
 + 
ö¢
->
imm
 + 1;

6255 
sub_ö¢_idx
 = (
ªlo
->
sym_off
 + 
ö¢
->
imm
Ë/ 
BPF_INSN_SZ
;

6256 } i‡(
	`ö¢_is_p£udo_func
(
ö¢
)) {

6261 
	`¥_w¨n
("prog '%s': missing subprogáddrÑelo for insn #%zu\n",

6262 
¥og
->
«me
, 
ö¢_idx
);

6263  -
LIBBPF_ERRNO__RELOC
;

6271 
sub_ö¢_idx
 = 
¥og
->
£c_ö¢_off
 + 
ö¢_idx
 + 
ö¢
->
imm
 + 1;

6275 
sub¥og
 = 
	`föd_¥og_by_£c_ö¢
(
obj
, obj->
efûe
.
ãxt_shndx
, 
sub_ö¢_idx
);

6276 i‡(!
sub¥og
) {

6277 
	`¥_w¨n
("prog '%s':Ço .text section found yet sub-program callÉxists\n",

6278 
¥og
->
«me
);

6279  -
LIBBPF_ERRNO__RELOC
;

6292 i‡(
sub¥og
->
sub_ö¢_off
 == 0) {

6293 
sub¥og
->
sub_ö¢_off
 = 
maö_¥og
->
ö¢s_˙t
;

6295 
√w_˙t
 = 
maö_¥og
->
ö¢s_˙t
 + 
sub¥og
->insns_cnt;

6296 
ö¢s
 = 
	`libbpf_ªÆloˇºay
(
maö_¥og
->ö¢s, 
√w_˙t
, (*insns));

6297 i‡(!
ö¢s
) {

6298 
	`¥_w¨n
("¥og '%s': faûedÅÿªÆlo¯¥og code\n", 
maö_¥og
->
«me
);

6299  -
ENOMEM
;

6301 
maö_¥og
->
ö¢s
 = insns;

6302 
maö_¥og
->
ö¢s_˙t
 = 
√w_˙t
;

6304 
	`mem˝y
(
maö_¥og
->
ö¢s
 + 
sub¥og
->
sub_ö¢_off
, subprog->insns,

6305 
sub¥og
->
ö¢s_˙t
 * (*
ö¢s
));

6307 
	`¥_debug
("prog '%s':ádded %zu insns from sub-prog '%s'\n",

6308 
maö_¥og
->
«me
, 
sub¥og
->
ö¢s_˙t
, subprog->name);

6311 
îr
 = 
	`≠≥nd_sub¥og_ªlos
(
maö_¥og
, 
sub¥og
);

6312 i‡(
îr
)

6313  
îr
;

6314 
îr
 = 
	`bpf_obje˘__ªloc_code
(
obj
, 
maö_¥og
, 
sub¥og
);

6315 i‡(
îr
)

6316  
îr
;

6322 
ö¢
 = &
maö_¥og
->
ö¢s
[
¥og
->
sub_ö¢_off
 + 
ö¢_idx
];

6328 
ö¢
->
imm
 = 
sub¥og
->
sub_ö¢_off
 - (
¥og
->sub_ö¢_of‡+ 
ö¢_idx
) - 1;

6330 
	`¥_debug
("prog '%s': insn #%zuÑelocated, imm %dÖointsÅo subprog '%s' (nowát %zu offset)\n",

6331 
¥og
->
«me
, 
ö¢_idx
, 
ö¢
->
imm
, 
sub¥og
->«me, sub¥og->
sub_ö¢_off
);

6335 
	}
}

6419 
	$bpf_obje˘__ªloˇã_ˇŒs
(
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
¥og
)

6421 
bpf_¥ogøm
 *
sub¥og
;

6422 
i
, 
îr
;

6427 
i
 = 0; i < 
obj
->
ƒ_¥ogøms
; i++) {

6428 
sub¥og
 = &
obj
->
¥ogøms
[
i
];

6429 i‡(!
	`¥og_is_sub¥og
(
obj
, 
sub¥og
))

6432 
sub¥og
->
sub_ö¢_off
 = 0;

6435 
îr
 = 
	`bpf_obje˘__ªloc_code
(
obj
, 
¥og
,Örog);

6436 i‡(
îr
)

6437  
îr
;

6440 
	}
}

6443 
	$bpf_obje˘__‰ì_ªlocs
(
bpf_obje˘
 *
obj
)

6445 
bpf_¥ogøm
 *
¥og
;

6446 
i
;

6449 
i
 = 0; i < 
obj
->
ƒ_¥ogøms
; i++) {

6450 
¥og
 = &
obj
->
¥ogøms
[
i
];

6451 
	`z‰ì
(&
¥og
->
ªloc_desc
);

6452 
¥og
->
ƒ_ªloc
 = 0;

6454 
	}
}

6456 
	$cmp_ªlocs
(c⁄° *
_a
, c⁄° *
_b
)

6458 c⁄° 
ªloc_desc
 *
a
 = 
_a
;

6459 c⁄° 
ªloc_desc
 *
b
 = 
_b
;

6461 i‡(
a
->
ö¢_idx
 !
b
->insn_idx)

6462  
a
->
ö¢_idx
 < 
b
->insn_idx ? -1 : 1;

6465 i‡(
a
->
ty≥
 !
b
->type)

6466  
a
->
ty≥
 < 
b
->type ? -1 : 1;

6469 
	}
}

6471 
	$bpf_obje˘__s‹t_ªlos
(
bpf_obje˘
 *
obj
)

6473 
i
;

6475 
i
 = 0; i < 
obj
->
ƒ_¥ogøms
; i++) {

6476 
bpf_¥ogøm
 *
p
 = &
obj
->
¥ogøms
[
i
];

6478 i‡(!
p
->
ƒ_ªloc
)

6481 
	`qs‹t
(
p
->
ªloc_desc
,Ö->
ƒ_ªloc
, (*p->ªloc_desc), 
cmp_ªlocs
);

6483 
	}
}

6486 
	$bpf_obje˘__ªloˇã
(
bpf_obje˘
 *
obj
, c⁄° *
èrg_btf_∑th
)

6488 
bpf_¥ogøm
 *
¥og
;

6489 
size_t
 
i
, 
j
;

6490 
îr
;

6492 i‡(
obj
->
btf_ext
) {

6493 
îr
 = 
	`bpf_obje˘__ªloˇã_c‹e
(
obj
, 
èrg_btf_∑th
);

6494 i‡(
îr
) {

6495 
	`¥_w¨n
("failedÅoÖerform CO-REÑelocations: %d\n",

6496 
îr
);

6497  
îr
;

6499 
	`bpf_obje˘__s‹t_ªlos
(
obj
);

6509 
i
 = 0; i < 
obj
->
ƒ_¥ogøms
; i++) {

6510 
¥og
 = &
obj
->
¥ogøms
[
i
];

6511 
j
 = 0; j < 
¥og
->
ƒ_ªloc
; j++) {

6512 
ªloc_desc
 *
ªlo
 = &
¥og
->ªloc_desc[
j
];

6513 
bpf_ö¢
 *
ö¢
 = &
¥og
->
ö¢s
[
ªlo
->
ö¢_idx
];

6516 i‡(
ªlo
->
ty≥
 =
RELO_SUBPROG_ADDR
)

6517 
ö¢
[0].
§c_ªg
 = 
BPF_PSEUDO_FUNC
;

6528 
i
 = 0; i < 
obj
->
ƒ_¥ogøms
; i++) {

6529 
¥og
 = &
obj
->
¥ogøms
[
i
];

6533 i‡(
	`¥og_is_sub¥og
(
obj
, 
¥og
))

6535 i‡(!
¥og
->
autﬁﬂd
)

6538 
îr
 = 
	`bpf_obje˘__ªloˇã_ˇŒs
(
obj
, 
¥og
);

6539 i‡(
îr
) {

6540 
	`¥_w¨n
("prog '%s': failedÅoÑelocate calls: %d\n",

6541 
¥og
->
«me
, 
îr
);

6542  
îr
;

6546 
i
 = 0; i < 
obj
->
ƒ_¥ogøms
; i++) {

6547 
¥og
 = &
obj
->
¥ogøms
[
i
];

6548 i‡(
	`¥og_is_sub¥og
(
obj
, 
¥og
))

6550 i‡(!
¥og
->
autﬁﬂd
)

6552 
îr
 = 
	`bpf_obje˘__ªloˇã_d©a
(
obj
, 
¥og
);

6553 i‡(
îr
) {

6554 
	`¥_w¨n
("prog '%s': failedÅoÑelocate dataÑeferences: %d\n",

6555 
¥og
->
«me
, 
îr
);

6556  
îr
;

6561 
	}
}

6563 
bpf_obje˘__cﬁÀ˘_°_›s_ªlos
(
bpf_obje˘
 *
obj
,

6564 
Elf64_Shdr
 *
shdr
, 
Elf_D©a
 *
d©a
);

6566 
	$bpf_obje˘__cﬁÀ˘_m≠_ªlos
(
bpf_obje˘
 *
obj
,

6567 
Elf64_Shdr
 *
shdr
, 
Elf_D©a
 *
d©a
)

6569 c⁄° 
bpf_±r_sz
 = 8, 
ho°_±r_sz
 = (*);

6570 
i
, 
j
, 
ƒñs
, 
√w_sz
;

6571 c⁄° 
btf_v¨_£cöfo
 *
vi
 = 
NULL
;

6572 c⁄° 
btf_ty≥
 *
£c
, *
v¨
, *
def
;

6573 
bpf_m≠
 *
m≠
 = 
NULL
, *
èrg_m≠
 = NULL;

6574 
bpf_¥ogøm
 *
èrg_¥og
 = 
NULL
;

6575 
boﬁ
 
is_¥og_¨øy
, 
is_m≠_ö_m≠
;

6576 c⁄° 
btf_membî
 *
membî
;

6577 c⁄° *
«me
, *
m«me
, *
ty≥
;

6578 
moff
;

6579 
Elf64_Sym
 *
sym
;

6580 
Elf64_Rñ
 *
ªl
;

6581 *
tmp
;

6583 i‡(!
obj
->
efûe
.
btf_m≠s_£c_btf_id
 || !obj->
btf
)

6584  -
EINVAL
;

6585 
£c
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, obj->
efûe
.
btf_m≠s_£c_btf_id
);

6586 i‡(!
£c
)

6587  -
EINVAL
;

6589 
ƒñs
 = 
shdr
->
sh_size
 / shdr->
sh_ítsize
;

6590 
i
 = 0; i < 
ƒñs
; i++) {

6591 
ªl
 = 
	`ñf_ªl_by_idx
(
d©a
, 
i
);

6592 i‡(!
ªl
) {

6593 
	`¥_w¨n
(".m≠†ªlÿ#%d: faûedÅÿgë ELFÑño\n", 
i
);

6594  -
LIBBPF_ERRNO__FORMAT
;

6597 
sym
 = 
	`ñf_sym_by_idx
(
obj
, 
	`ELF64_R_SYM
(
ªl
->
r_öfo
));

6598 i‡(!
sym
) {

6599 
	`¥_w¨n
(".mapsÑelo #%d: symbol %zxÇot found\n",

6600 
i
, (
size_t
)
	`ELF64_R_SYM
(
ªl
->
r_öfo
));

6601  -
LIBBPF_ERRNO__FORMAT
;

6603 
«me
 = 
	`ñf_sym_°r
(
obj
, 
sym
->
°_«me
) ?: "<?>";

6605 
	`¥_debug
(".mapsÑelo #%d: for %zd value %zdÑel->r_offset %zuÇame %d ('%s')\n",

6606 
i
, (
ssize_t
)(
ªl
->
r_öfo
 >> 32), (
size_t
)
sym
->
°_vÆue
,

6607 (
size_t
)
ªl
->
r_off£t
, 
sym
->
°_«me
, 
«me
);

6609 
j
 = 0; j < 
obj
->
ƒ_m≠s
; j++) {

6610 
m≠
 = &
obj
->
m≠s
[
j
];

6611 i‡(
m≠
->
£c_idx
 !
obj
->
efûe
.
btf_m≠s_shndx
)

6614 
vi
 = 
	`btf_v¨_£cöfos
(
£c
Ë+ 
m≠
->
btf_v¨_idx
;

6615 i‡(
vi
->
off£t
 <
ªl
->
r_off£t
 &&

6616 
ªl
->
r_off£t
 + 
bpf_±r_sz
 <
vi
->
off£t
 + vi->
size
)

6619 i‡(
j
 =
obj
->
ƒ_m≠s
) {

6620 
	`¥_w¨n
(".mapsÑelo #%d: cannot find map '%s'átÑel->r_offset %zu\n",

6621 
i
, 
«me
, (
size_t
)
ªl
->
r_off£t
);

6622  -
EINVAL
;

6625 
is_m≠_ö_m≠
 = 
	`bpf_m≠_ty≥__is_m≠_ö_m≠
(
m≠
->
def
.
ty≥
);

6626 
is_¥og_¨øy
 = 
m≠
->
def
.
ty≥
 =
BPF_MAP_TYPE_PROG_ARRAY
;

6627 
ty≥
 = 
is_m≠_ö_m≠
 ? "map" : "prog";

6628 i‡(
is_m≠_ö_m≠
) {

6629 i‡(
sym
->
°_shndx
 !
obj
->
efûe
.
btf_m≠s_shndx
) {

6630 
	`¥_w¨n
(".mapsÑelo #%d: '%s' isn'tá BTF-defined map\n",

6631 
i
, 
«me
);

6632  -
LIBBPF_ERRNO__RELOC
;

6634 i‡(
m≠
->
def
.
ty≥
 =
BPF_MAP_TYPE_HASH_OF_MAPS
 &&

6635 
m≠
->
def
.
key_size
 != ()) {

6636 
	`¥_w¨n
(".mapsÑelo #%d: hash-of-maps '%s' should have key size %zu.\n",

6637 
i
, 
m≠
->
«me
, ());

6638  -
EINVAL
;

6640 
èrg_m≠
 = 
	`bpf_obje˘__föd_m≠_by_«me
(
obj
, 
«me
);

6641 i‡(!
èrg_m≠
) {

6642 
	`¥_w¨n
(".mapsÑelo #%d: '%s' isn'tá valid mapÑeference\n",

6643 
i
, 
«me
);

6644  -
ESRCH
;

6646 } i‡(
is_¥og_¨øy
) {

6647 
èrg_¥og
 = 
	`bpf_obje˘__föd_¥ogøm_by_«me
(
obj
, 
«me
);

6648 i‡(!
èrg_¥og
) {

6649 
	`¥_w¨n
(".mapsÑelo #%d: '%s' isn'tá validÖrogramÑeference\n",

6650 
i
, 
«me
);

6651  -
ESRCH
;

6653 i‡(
èrg_¥og
->
£c_idx
 !
sym
->
°_shndx
 ||

6654 
èrg_¥og
->
£c_ö¢_off
 * 8 !
sym
->
°_vÆue
 ||

6655 
	`¥og_is_sub¥og
(
obj
, 
èrg_¥og
)) {

6656 
	`¥_w¨n
(".mapsÑelo #%d: '%s' isn'tánÉntry-pointÖrogram\n",

6657 
i
, 
«me
);

6658  -
LIBBPF_ERRNO__RELOC
;

6661  -
EINVAL
;

6664 
v¨
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
vi
->
ty≥
);

6665 
def
 = 
	`skù_mods_™d_ty≥defs
(
obj
->
btf
, 
v¨
->
ty≥
, 
NULL
);

6666 i‡(
	`btf_vÀn
(
def
) == 0)

6667  -
EINVAL
;

6668 
membî
 = 
	`btf_membîs
(
def
Ë+ 
	`btf_vÀn
(def) - 1;

6669 
m«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
membî
->
«me_off
);

6670 i‡(
	`°rcmp
(
m«me
, "values"))

6671  -
EINVAL
;

6673 
moff
 = 
	`btf_membî_bô_off£t
(
def
, 
	`btf_vÀn
(def) - 1) / 8;

6674 i‡(
ªl
->
r_off£t
 - 
vi
->
off£t
 < 
moff
)

6675  -
EINVAL
;

6677 
moff
 = 
ªl
->
r_off£t
 - 
vi
->
off£t
 - moff;

6681 i‡(
moff
 % 
bpf_±r_sz
)

6682  -
EINVAL
;

6683 
moff
 /
bpf_±r_sz
;

6684 i‡(
moff
 >
m≠
->
öô_¶Ÿs_sz
) {

6685 
√w_sz
 = 
moff
 + 1;

6686 
tmp
 = 
	`libbpf_ªÆloˇºay
(
m≠
->
öô_¶Ÿs
, 
√w_sz
, 
ho°_±r_sz
);

6687 i‡(!
tmp
)

6688  -
ENOMEM
;

6689 
m≠
->
öô_¶Ÿs
 = 
tmp
;

6690 
	`mem£t
(
m≠
->
öô_¶Ÿs
 + m≠->
öô_¶Ÿs_sz
, 0,

6691 (
√w_sz
 - 
m≠
->
öô_¶Ÿs_sz
Ë* 
ho°_±r_sz
);

6692 
m≠
->
öô_¶Ÿs_sz
 = 
√w_sz
;

6694 
m≠
->
öô_¶Ÿs
[
moff
] = 
is_m≠_ö_m≠
 ? (*)
èrg_m≠
 : (*)
èrg_¥og
;

6696 
	`¥_debug
(".mapsÑelo #%d: map '%s' slot [%d]ÖointsÅo %s '%s'\n",

6697 
i
, 
m≠
->
«me
, 
moff
, 
ty≥
,Çame);

6701 
	}
}

6703 
	$bpf_obje˘__cﬁÀ˘_ªlos
(
bpf_obje˘
 *
obj
)

6705 
i
, 
îr
;

6707 
i
 = 0; i < 
obj
->
efûe
.
£c_˙t
; i++) {

6708 
ñf_£c_desc
 *
£c_desc
 = &
obj
->
efûe
.
£cs
[
i
];

6709 
Elf64_Shdr
 *
shdr
;

6710 
Elf_D©a
 *
d©a
;

6711 
idx
;

6713 i‡(
£c_desc
->
£c_ty≥
 !
SEC_RELO
)

6716 
shdr
 = 
£c_desc
->shdr;

6717 
d©a
 = 
£c_desc
->data;

6718 
idx
 = 
shdr
->
sh_öfo
;

6720 i‡(
shdr
->
sh_ty≥
 !
SHT_REL
) {

6721 
	`¥_w¨n
("öã∫ÆÉº‹áà%d\n", 
__LINE__
);

6722  -
LIBBPF_ERRNO__INTERNAL
;

6725 i‡(
idx
 =
obj
->
efûe
.
°_›s_shndx
)

6726 
îr
 = 
	`bpf_obje˘__cﬁÀ˘_°_›s_ªlos
(
obj
, 
shdr
, 
d©a
);

6727 i‡(
idx
 =
obj
->
efûe
.
btf_m≠s_shndx
)

6728 
îr
 = 
	`bpf_obje˘__cﬁÀ˘_m≠_ªlos
(
obj
, 
shdr
, 
d©a
);

6730 
îr
 = 
	`bpf_obje˘__cﬁÀ˘_¥og_ªlos
(
obj
, 
shdr
, 
d©a
);

6731 i‡(
îr
)

6732  
îr
;

6735 
	`bpf_obje˘__s‹t_ªlos
(
obj
);

6737 
	}
}

6739 
boﬁ
 
	$ö¢_is_hñ≥r_ˇŒ
(
bpf_ö¢
 *
ö¢
, 
bpf_func_id
 *
func_id
)

6741 i‡(
	`BPF_CLASS
(
ö¢
->
code
Ë=
BPF_JMP
 &&

6742 
	`BPF_OP
(
ö¢
->
code
Ë=
BPF_CALL
 &&

6743 
	`BPF_SRC
(
ö¢
->
code
Ë=
BPF_K
 &&

6744 
ö¢
->
§c_ªg
 == 0 &&

6745 
ö¢
->
d°_ªg
 == 0) {

6746 *
func_id
 = 
ö¢
->
imm
;

6747  
åue
;

6749  
Ál£
;

6750 
	}
}

6752 
	$bpf_obje˘__ßnôize_¥og
(
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
¥og
)

6754 
bpf_ö¢
 *
ö¢
 = 
¥og
->
ö¢s
;

6755 
bpf_func_id
 
func_id
;

6756 
i
;

6758 i‡(
obj
->
gí_lﬂdî
)

6761 
i
 = 0; i < 
¥og
->
ö¢s_˙t
; i++, 
ö¢
++) {

6762 i‡(!
	`ö¢_is_hñ≥r_ˇŒ
(
ö¢
, &
func_id
))

6769 
func_id
) {

6770 
BPF_FUNC_¥obe_ªad_kî√l
:

6771 
BPF_FUNC_¥obe_ªad_u£r
:

6772 i‡(!
	`kî√l_suµ‹ts
(
obj
, 
FEAT_PROBE_READ_KERN
))

6773 
ö¢
->
imm
 = 
BPF_FUNC_¥obe_ªad
;

6775 
BPF_FUNC_¥obe_ªad_kî√l_°r
:

6776 
BPF_FUNC_¥obe_ªad_u£r_°r
:

6777 i‡(!
	`kî√l_suµ‹ts
(
obj
, 
FEAT_PROBE_READ_KERN
))

6778 
ö¢
->
imm
 = 
BPF_FUNC_¥obe_ªad_°r
;

6785 
	}
}

6787 
libbpf_föd_©èch_btf_id
(
bpf_¥ogøm
 *
¥og
, c⁄° *
©èch_«me
,

6788 *
btf_obj_fd
, *
btf_ty≥_id
);

6791 
	$libbpf_¥ï¨e_¥og_lﬂd
(
bpf_¥ogøm
 *
¥og
,

6792 
bpf_¥og_lﬂd_›ts
 *
›ts
, 
cookõ
)

6794 
£c_def_Êags
 
def
 = 
cookõ
;

6797 i‡((
def
 & 
SEC_EXP_ATTACH_OPT
Ë&& !
	`kî√l_suµ‹ts
(
¥og
->
obj
, 
FEAT_EXP_ATTACH_TYPE
))

6798 
›ts
->
ex≥˘ed_©èch_ty≥
 = 0;

6800 i‡(
def
 & 
SEC_SLEEPABLE
)

6801 
›ts
->
¥og_Êags
 |
BPF_F_SLEEPABLE
;

6803 i‡(
¥og
->
ty≥
 =
BPF_PROG_TYPE_XDP
 && (
def
 & 
SEC_XDP_FRAGS
))

6804 
›ts
->
¥og_Êags
 |
BPF_F_XDP_HAS_FRAGS
;

6806 i‡(
def
 & 
SEC_DEPRECATED
) {

6807 
	`¥_w¨n
("SEC(\"%s\") is deprecated,Ölease see https://github.com/libbpf/libbpf/wiki/Libbpf-1.0-migration-guide#bpf-program-sec-annotation-deprecations for details\n",

6808 
¥og
->
£c_«me
);

6811 i‡((
def
 & 
SEC_ATTACH_BTF
Ë&& !
¥og
->
©èch_btf_id
) {

6812 
btf_obj_fd
 = 0, 
btf_ty≥_id
 = 0, 
îr
;

6813 c⁄° *
©èch_«me
;

6815 
©èch_«me
 = 
	`°rchr
(
¥og
->
£c_«me
, '/');

6816 i‡(!
©èch_«me
) {

6826 
	`¥_w¨n
("prog '%s':Ço BTF-basedáttachÅarget is specified, use bpf_program__set_attach_target()\n",

6827 
¥og
->
«me
);

6828  -
EINVAL
;

6830 
©èch_«me
++;

6832 
îr
 = 
	`libbpf_föd_©èch_btf_id
(
¥og
, 
©èch_«me
, &
btf_obj_fd
, &
btf_ty≥_id
);

6833 i‡(
îr
)

6834  
îr
;

6837 
¥og
->
©èch_btf_obj_fd
 = 
btf_obj_fd
;

6838 
¥og
->
©èch_btf_id
 = 
btf_ty≥_id
;

6845 
›ts
->
©èch_btf_obj_fd
 = 
btf_obj_fd
;

6846 
›ts
->
©èch_btf_id
 = 
btf_ty≥_id
;

6849 
	}
}

6851 
fixup_vîifõr_log
(
bpf_¥ogøm
 *
¥og
, *
buf
, 
size_t
 
buf_sz
);

6853 
	$bpf_obje˘_lﬂd_¥og_ö°™˚
(
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
¥og
,

6854 
bpf_ö¢
 *
ö¢s
, 
ö¢s_˙t
,

6855 c⁄° *
li˚n£
, 
__u32
 
kîn_vîsi⁄
,

6856 *
¥og_fd
)

6858 
	`LIBBPF_OPTS
(
bpf_¥og_lﬂd_›ts
, 
lﬂd_©å
);

6859 c⁄° *
¥og_«me
 = 
NULL
;

6860 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

6861 
size_t
 
log_buf_size
 = 0;

6862 *
log_buf
 = 
NULL
, *
tmp
;

6863 
btf_fd
, 
ªt
, 
îr
;

6864 
boﬁ
 
own_log_buf
 = 
åue
;

6865 
__u32
 
log_Àvñ
 = 
¥og
->log_level;

6867 i‡(
¥og
->
ty≥
 =
BPF_PROG_TYPE_UNSPEC
) {

6872 
	`¥_w¨n
("prog '%s': missing BPFÖrogÅype, check ELF sectionÇame '%s'\n",

6873 
¥og
->
«me
,Örog->
£c_«me
);

6874  -
EINVAL
;

6877 i‡(!
ö¢s
 || !
ö¢s_˙t
)

6878  -
EINVAL
;

6880 
lﬂd_©å
.
ex≥˘ed_©èch_ty≥
 = 
¥og
->expected_attach_type;

6881 i‡(
	`kî√l_suµ‹ts
(
obj
, 
FEAT_PROG_NAME
))

6882 
¥og_«me
 = 
¥og
->
«me
;

6883 
lﬂd_©å
.
©èch_¥og_fd
 = 
¥og
->attach_prog_fd;

6884 
lﬂd_©å
.
©èch_btf_obj_fd
 = 
¥og
->attach_btf_obj_fd;

6885 
lﬂd_©å
.
©èch_btf_id
 = 
¥og
->attach_btf_id;

6886 
lﬂd_©å
.
kîn_vîsi⁄
 = kern_version;

6887 
lﬂd_©å
.
¥og_ifödex
 = 
¥og
->prog_ifindex;

6890 
btf_fd
 = 
	`bpf_obje˘__btf_fd
(
obj
);

6891 i‡(
btf_fd
 >0 && 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BTF_FUNC
)) {

6892 
lﬂd_©å
.
¥og_btf_fd
 = 
btf_fd
;

6893 
lﬂd_©å
.
func_öfo
 = 
¥og
->func_info;

6894 
lﬂd_©å
.
func_öfo_ªc_size
 = 
¥og
->func_info_rec_size;

6895 
lﬂd_©å
.
func_öfo_˙t
 = 
¥og
->func_info_cnt;

6896 
lﬂd_©å
.
löe_öfo
 = 
¥og
->line_info;

6897 
lﬂd_©å
.
löe_öfo_ªc_size
 = 
¥og
->line_info_rec_size;

6898 
lﬂd_©å
.
löe_öfo_˙t
 = 
¥og
->line_info_cnt;

6900 
lﬂd_©å
.
log_Àvñ
 =Üog_level;

6901 
lﬂd_©å
.
¥og_Êags
 = 
¥og
->prog_flags;

6902 
lﬂd_©å
.
fd_¨øy
 = 
obj
->fd_array;

6905 i‡(
¥og
->
£c_def
 &&Örog->£c_def->
¥og_¥ï¨e_lﬂd_‚
) {

6906 
îr
 = 
¥og
->
£c_def
->
	`¥og_¥ï¨e_lﬂd_‚
’rog, &
lﬂd_©å
,Örog->£c_def->
cookõ
);

6907 i‡(
îr
 < 0) {

6908 
	`¥_w¨n
("prog '%s': failedÅoÖrepareÜoadáttributes: %d\n",

6909 
¥og
->
«me
, 
îr
);

6910  
îr
;

6912 
ö¢s
 = 
¥og
->insns;

6913 
ö¢s_˙t
 = 
¥og
->insns_cnt;

6916 i‡(
obj
->
gí_lﬂdî
) {

6917 
	`bpf_gí__¥og_lﬂd
(
obj
->
gí_lﬂdî
, 
¥og
->
ty≥
,Örog->
«me
,

6918 
li˚n£
, 
ö¢s
, 
ö¢s_˙t
, &
lﬂd_©å
,

6919 
¥og
 - 
obj
->
¥ogøms
);

6920 *
¥og_fd
 = -1;

6924 
ªåy_lﬂd
:

6930 i‡(
log_Àvñ
) {

6931 i‡(
¥og
->
log_buf
) {

6932 
log_buf
 = 
¥og
->log_buf;

6933 
log_buf_size
 = 
¥og
->
log_size
;

6934 
own_log_buf
 = 
Ál£
;

6935 } i‡(
obj
->
log_buf
) {

6936 
log_buf
 = 
obj
->log_buf;

6937 
log_buf_size
 = 
obj
->
log_size
;

6938 
own_log_buf
 = 
Ál£
;

6940 
log_buf_size
 = 
	`max
((
size_t
)
BPF_LOG_BUF_SIZE
,Üog_buf_size * 2);

6941 
tmp
 = 
	`ªÆloc
(
log_buf
, 
log_buf_size
);

6942 i‡(!
tmp
) {

6943 
ªt
 = -
ENOMEM
;

6944 
out
;

6946 
log_buf
 = 
tmp
;

6947 
log_buf
[0] = '\0';

6948 
own_log_buf
 = 
åue
;

6952 
lﬂd_©å
.
log_buf
 =Üog_buf;

6953 
lﬂd_©å
.
log_size
 = 
log_buf_size
;

6954 
lﬂd_©å
.
log_Àvñ
 =Üog_level;

6956 
ªt
 = 
	`bpf_¥og_lﬂd
(
¥og
->
ty≥
, 
¥og_«me
, 
li˚n£
, 
ö¢s
, 
ö¢s_˙t
, &
lﬂd_©å
);

6957 i‡(
ªt
 >= 0) {

6958 i‡(
log_Àvñ
 && 
own_log_buf
) {

6959 
	`¥_debug
("prog '%s': -- BEGIN PROG LOAD LOG --\n%s-- END PROG LOAD LOG --\n",

6960 
¥og
->
«me
, 
log_buf
);

6963 i‡(
obj
->
has_rod©a
 && 
	`kî√l_suµ‹ts
(obj, 
FEAT_PROG_BIND_MAP
)) {

6964 
bpf_m≠
 *
m≠
;

6965 
i
;

6967 
i
 = 0; i < 
obj
->
ƒ_m≠s
; i++) {

6968 
m≠
 = &
¥og
->
obj
->
m≠s
[
i
];

6969 i‡(
m≠
->
libbpf_ty≥
 !
LIBBPF_MAP_RODATA
)

6972 i‡(
	`bpf_¥og_böd_m≠
(
ªt
, 
	`bpf_m≠__fd
(
m≠
), 
NULL
)) {

6973 
˝
 = 
	`libbpf_°ªº‹_r
(
î∫o
, 
îrmsg
, (errmsg));

6974 
	`¥_w¨n
("prog '%s': failedÅo bind map '%s': %s\n",

6975 
¥og
->
«me
, 
m≠
->
ªÆ_«me
, 
˝
);

6981 *
¥og_fd
 = 
ªt
;

6982 
ªt
 = 0;

6983 
out
;

6986 i‡(
log_Àvñ
 == 0) {

6987 
log_Àvñ
 = 1;

6988 
ªåy_lﬂd
;

6997 i‡(
own_log_buf
 && 
î∫o
 =
ENOSPC
 && 
log_buf_size
 <
UINT_MAX
 / 2)

6998 
ªåy_lﬂd
;

7000 
ªt
 = -
î∫o
;

7003 
	`fixup_vîifõr_log
(
¥og
, 
log_buf
, 
log_buf_size
);

7005 
˝
 = 
	`libbpf_°ªº‹_r
(
î∫o
, 
îrmsg
, (errmsg));

7006 
	`¥_w¨n
("¥og '%s': BPFÖrogømÜﬂd faûed: %s\n", 
¥og
->
«me
, 
˝
);

7007 
	`¥_≥rm_msg
(
ªt
);

7009 i‡(
own_log_buf
 && 
log_buf
 &&Üog_buf[0] != '\0') {

7010 
	`¥_w¨n
("prog '%s': -- BEGIN PROG LOAD LOG --\n%s-- END PROG LOAD LOG --\n",

7011 
¥og
->
«me
, 
log_buf
);

7014 
out
:

7015 i‡(
own_log_buf
)

7016 
	`‰ì
(
log_buf
);

7017  
ªt
;

7018 
	}
}

7020 *
	$föd_¥ev_löe
(*
buf
, *
cur
)

7022 *
p
;

7024 i‡(
cur
 =
buf
)

7025  
NULL
;

7027 
p
 = 
cur
 - 1;

7028 
p
 - 1 >
buf
 && *(p - 1) != '\n')

7029 
p
--;

7031  
p
;

7032 
	}
}

7034 
	$∑tch_log
(*
buf
, 
size_t
 
buf_sz
, size_à
log_sz
,

7035 *
‹ig
, 
size_t
 
‹ig_sz
, c⁄° *
∑tch
)

7038 
size_t
 
ªm_sz
 = (
buf
 + 
log_sz
Ë- (
‹ig
 + 
‹ig_sz
);

7039 
size_t
 
∑tch_sz
 = 
	`°æí
(
∑tch
);

7041 i‡(
∑tch_sz
 !
‹ig_sz
) {

7054 i‡(
∑tch_sz
 > 
‹ig_sz
) {

7055 i‡(
‹ig
 + 
∑tch_sz
 >
buf
 + 
buf_sz
) {

7057 
∑tch_sz
 -(
‹ig
 +Ö©ch_szË- (
buf
 + 
buf_sz
) + 1;

7058 
ªm_sz
 = 0;

7059 } i‡(
∑tch_sz
 - 
‹ig_sz
 > 
buf_sz
 - 
log_sz
) {

7061 
ªm_sz
 -(
∑tch_sz
 - 
‹ig_sz
Ë- (
buf_sz
 - 
log_sz
);

7065 
	`memmove
(
‹ig
 + 
∑tch_sz
, orig + 
‹ig_sz
, 
ªm_sz
);

7068 
	`mem˝y
(
‹ig
, 
∑tch
, 
∑tch_sz
);

7069 
	}
}

7071 
	$fixup_log_Áûed_c‹e_ªlo
(
bpf_¥ogøm
 *
¥og
,

7072 *
buf
, 
size_t
 
buf_sz
, size_à
log_sz
,

7073 *
löe1
, *
löe2
, *
löe3
)

7085 c⁄° 
bpf_c‹e_ªlo
 *
ªlo
;

7086 
bpf_c‹e_•ec
 
•ec
;

7087 
∑tch
[512], 
•ec_buf
[256];

7088 
ö¢_idx
, 
îr
, 
•ec_Àn
;

7090 i‡(
	`ssˇnf
(
löe1
, "%d: (%*dËˇŒ unknown#195896080\n", &
ö¢_idx
) != 1)

7093 
ªlo
 = 
	`föd_ªlo_c‹e
(
¥og
, 
ö¢_idx
);

7094 i‡(!
ªlo
)

7097 
îr
 = 
	`bpf_c‹e_∑r£_•ec
(
¥og
->
«me
,Örog->
obj
->
btf
, 
ªlo
, &
•ec
);

7098 i‡(
îr
)

7101 
•ec_Àn
 = 
	`bpf_c‹e_f‹m©_•ec
(
•ec_buf
, (•ec_buf), &
•ec
);

7102 
	`¢¥ötf
(
∑tch
, (patch),

7105 
ö¢_idx
, 
•ec_buf
, 
•ec_Àn
 >= (spec_buf) ? "..." : "");

7107 
	`∑tch_log
(
buf
, 
buf_sz
, 
log_sz
, 
löe1
, 
löe3
 -Üöe1, 
∑tch
);

7108 
	}
}

7110 
	$fixup_log_missög_m≠_lﬂd
(
bpf_¥ogøm
 *
¥og
,

7111 *
buf
, 
size_t
 
buf_sz
, size_à
log_sz
,

7112 *
löe1
, *
löe2
, *
löe3
)

7122 
bpf_obje˘
 *
obj
 = 
¥og
->obj;

7123 c⁄° 
bpf_m≠
 *
m≠
;

7124 
ö¢_idx
, 
m≠_idx
;

7125 
∑tch
[128];

7127 i‡(
	`ssˇnf
(
löe1
, "%d: (%*dËˇŒ unknown#%d\n", &
ö¢_idx
, &
m≠_idx
) != 2)

7130 
m≠_idx
 -
MAP_LDIMM64_POISON_BASE
;

7131 i‡(
m≠_idx
 < 0 || m≠_idx >
obj
->
ƒ_m≠s
)

7133 
m≠
 = &
obj
->
m≠s
[
m≠_idx
];

7135 
	`¢¥ötf
(
∑tch
, (patch),

7138 
ö¢_idx
, 
m≠
->
«me
);

7140 
	`∑tch_log
(
buf
, 
buf_sz
, 
log_sz
, 
löe1
, 
löe3
 -Üöe1, 
∑tch
);

7141 
	}
}

7143 
	$fixup_vîifõr_log
(
bpf_¥ogøm
 *
¥og
, *
buf
, 
size_t
 
buf_sz
)

7146 c⁄° 
size_t
 
max_œ°_löe_˙t
 = 10;

7147 *
¥ev_löe
, *
cur_löe
, *
√xt_löe
;

7148 
size_t
 
log_sz
;

7149 
i
;

7151 i‡(!
buf
)

7154 
log_sz
 = 
	`°æí
(
buf
) + 1;

7155 
√xt_löe
 = 
buf
 + 
log_sz
 - 1;

7157 
i
 = 0; i < 
max_œ°_löe_˙t
; i++, 
√xt_löe
 = 
cur_löe
) {

7158 
cur_löe
 = 
	`föd_¥ev_löe
(
buf
, 
√xt_löe
);

7159 i‡(!
cur_löe
)

7163 i‡(
	`°r_has_pfx
(
cur_löe
, "invalid func unknown#195896080\n")) {

7164 
¥ev_löe
 = 
	`föd_¥ev_löe
(
buf
, 
cur_löe
);

7165 i‡(!
¥ev_löe
)

7168 
	`fixup_log_Áûed_c‹e_ªlo
(
¥og
, 
buf
, 
buf_sz
, 
log_sz
,

7169 
¥ev_löe
, 
cur_löe
, 
√xt_löe
);

7171 } i‡(
	`°r_has_pfx
(
cur_löe
, "övÆid fun¯unknown#"
MAP_LDIMM64_POISON_PFX
)) {

7172 
¥ev_löe
 = 
	`föd_¥ev_löe
(
buf
, 
cur_löe
);

7173 i‡(!
¥ev_löe
)

7176 
	`fixup_log_missög_m≠_lﬂd
(
¥og
, 
buf
, 
buf_sz
, 
log_sz
,

7177 
¥ev_löe
, 
cur_löe
, 
√xt_löe
);

7181 
	}
}

7183 
	$bpf_¥ogøm_ªc‹d_ªlos
(
bpf_¥ogøm
 *
¥og
)

7185 
bpf_obje˘
 *
obj
 = 
¥og
->obj;

7186 
i
;

7188 
i
 = 0; i < 
¥og
->
ƒ_ªloc
; i++) {

7189 
ªloc_desc
 *
ªlo
 = &
¥og
->ªloc_desc[
i
];

7190 
exã∫_desc
 *
ext
 = &
obj
->
exã∫s
[
ªlo
->
sym_off
];

7192 
ªlo
->
ty≥
) {

7193 
RELO_EXTERN_VAR
:

7194 i‡(
ext
->
ty≥
 !
EXT_KSYM
)

7196 
	`bpf_gí__ªc‹d_exã∫
(
obj
->
gí_lﬂdî
, 
ext
->
«me
,

7197 
ext
->
is_wók
, !ext->
ksym
.
ty≥_id
,

7198 
BTF_KIND_VAR
, 
ªlo
->
ö¢_idx
);

7200 
RELO_EXTERN_FUNC
:

7201 
	`bpf_gí__ªc‹d_exã∫
(
obj
->
gí_lﬂdî
, 
ext
->
«me
,

7202 
ext
->
is_wók
, 
Ál£
, 
BTF_KIND_FUNC
,

7203 
ªlo
->
ö¢_idx
);

7205 
RELO_CORE
: {

7206 
bpf_c‹e_ªlo
 
¸
 = {

7207 .
ö¢_off
 = 
ªlo
->
ö¢_idx
 * 8,

7208 .
ty≥_id
 = 
ªlo
->
c‹e_ªlo
->type_id,

7209 .
ac˚ss_°r_off
 = 
ªlo
->
c‹e_ªlo
->access_str_off,

7210 .
köd
 = 
ªlo
->
c‹e_ªlo
->kind,

7213 
	`bpf_gí__ªc‹d_ªlo_c‹e
(
obj
->
gí_lﬂdî
, &
¸
);

7221 
	}
}

7223 
	$bpf_obje˘_lﬂd_¥og
(
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
¥og
,

7224 c⁄° *
li˚n£
, 
__u32
 
kîn_vî
)

7226 
îr
 = 0, 
fd
, 
i
;

7228 i‡(
obj
->
lﬂded
) {

7229 
	`¥_w¨n
("¥og '%s': c™'àlﬂdá·î obje˘ wa†lﬂded\n", 
¥og
->
«me
);

7230  
	`libbpf_îr
(-
EINVAL
);

7233 i‡(
¥og
->
ö°™˚s
.
ƒ
 < 0 || !¥og->ö°™˚s.
fds
) {

7234 i‡(
¥og
->
¥ïro˚ss‹
) {

7235 
	`¥_w¨n
("InternalÉrror: can'tÜoadÖrogram '%s'\n",

7236 
¥og
->
«me
);

7237  
	`libbpf_îr
(-
LIBBPF_ERRNO__INTERNAL
);

7240 
¥og
->
ö°™˚s
.
fds
 = 
	`mÆloc
(());

7241 i‡(!
¥og
->
ö°™˚s
.
fds
) {

7242 
	`¥_w¨n
("NotÉnough memory for BPF fds\n");

7243  
	`libbpf_îr
(-
ENOMEM
);

7245 
¥og
->
ö°™˚s
.
ƒ
 = 1;

7246 
¥og
->
ö°™˚s
.
fds
[0] = -1;

7249 i‡(!
¥og
->
¥ïro˚ss‹
) {

7250 i‡(
¥og
->
ö°™˚s
.
ƒ
 != 1) {

7251 
	`¥_w¨n
("prog '%s': inconsistentÇr(%d) != 1\n",

7252 
¥og
->
«me
,Örog->
ö°™˚s
.
ƒ
);

7254 i‡(
obj
->
gí_lﬂdî
)

7255 
	`bpf_¥ogøm_ªc‹d_ªlos
(
¥og
);

7256 
îr
 = 
	`bpf_obje˘_lﬂd_¥og_ö°™˚
(
obj
, 
¥og
,

7257 
¥og
->
ö¢s
,Örog->
ö¢s_˙t
,

7258 
li˚n£
, 
kîn_vî
, &
fd
);

7259 i‡(!
îr
)

7260 
¥og
->
ö°™˚s
.
fds
[0] = 
fd
;

7261 
out
;

7264 
i
 = 0; i < 
¥og
->
ö°™˚s
.
ƒ
; i++) {

7265 
bpf_¥og_¥ï_ªsu…
 
ªsu…
;

7266 
bpf_¥ogøm_¥ï_t
 
¥ïro˚ss‹
 = 
¥og
->preprocessor;

7268 
	`mem£t
(&
ªsu…
, 0, (result));

7269 
îr
 = 
	`¥ïro˚ss‹
(
¥og
, 
i
,Örog->
ö¢s
,

7270 
¥og
->
ö¢s_˙t
, &
ªsu…
);

7271 i‡(
îr
) {

7272 
	`¥_w¨n
("PreprocessingÅhe %dth instance ofÖrogram '%s' failed\n",

7273 
i
, 
¥og
->
«me
);

7274 
out
;

7277 i‡(!
ªsu…
.
√w_ö¢_±r
 || !ªsu….
√w_ö¢_˙t
) {

7278 
	`¥_debug
("SkipÜoadingÅhe %dth instance ofÖrogram '%s'\n",

7279 
i
, 
¥og
->
«me
);

7280 
¥og
->
ö°™˚s
.
fds
[
i
] = -1;

7281 i‡(
ªsu…
.
pfd
)

7282 *
ªsu…
.
pfd
 = -1;

7286 
îr
 = 
	`bpf_obje˘_lﬂd_¥og_ö°™˚
(
obj
, 
¥og
,

7287 
ªsu…
.
√w_ö¢_±r
,Ñesu….
√w_ö¢_˙t
,

7288 
li˚n£
, 
kîn_vî
, &
fd
);

7289 i‡(
îr
) {

7290 
	`¥_w¨n
("LoadingÅhe %dth instance ofÖrogram '%s' failed\n",

7291 
i
, 
¥og
->
«me
);

7292 
out
;

7295 i‡(
ªsu…
.
pfd
)

7296 *
ªsu…
.
pfd
 = 
fd
;

7297 
¥og
->
ö°™˚s
.
fds
[
i
] = 
fd
;

7299 
out
:

7300 i‡(
îr
)

7301 
	`¥_w¨n
("ÁûedÅÿlﬂdÖrogøm '%s'\n", 
¥og
->
«me
);

7302  
	`libbpf_îr
(
îr
);

7303 
	}
}

7305 
	$bpf_¥ogøm__lﬂd
(
bpf_¥ogøm
 *
¥og
, c⁄° *
li˚n£
, 
__u32
 
kîn_vî
)

7307  
	`bpf_obje˘_lﬂd_¥og
(
¥og
->
obj
,Örog, 
li˚n£
, 
kîn_vî
);

7308 
	}
}

7311 
	$bpf_obje˘__lﬂd_¥ogs
(
bpf_obje˘
 *
obj
, 
log_Àvñ
)

7313 
bpf_¥ogøm
 *
¥og
;

7314 
size_t
 
i
;

7315 
îr
;

7317 
i
 = 0; i < 
obj
->
ƒ_¥ogøms
; i++) {

7318 
¥og
 = &
obj
->
¥ogøms
[
i
];

7319 
îr
 = 
	`bpf_obje˘__ßnôize_¥og
(
obj
, 
¥og
);

7320 i‡(
îr
)

7321  
îr
;

7324 
i
 = 0; i < 
obj
->
ƒ_¥ogøms
; i++) {

7325 
¥og
 = &
obj
->
¥ogøms
[
i
];

7326 i‡(
	`¥og_is_sub¥og
(
obj
, 
¥og
))

7328 i‡(!
¥og
->
autﬁﬂd
) {

7329 
	`¥_debug
("¥og '%s': skù≥dÜﬂdög\n", 
¥og
->
«me
);

7332 
¥og
->
log_Àvñ
 |=Üog_level;

7333 
îr
 = 
	`bpf_obje˘_lﬂd_¥og
(
obj
, 
¥og
, obj->
li˚n£
, obj->
kîn_vîsi⁄
);

7334 i‡(
îr
)

7335  
îr
;

7338 
	`bpf_obje˘__‰ì_ªlocs
(
obj
);

7340 
	}
}

7342 c⁄° 
bpf_£c_def
 *
föd_£c_def
(c⁄° *
£c_«me
);

7344 
	$bpf_obje˘_öô_¥ogs
(
bpf_obje˘
 *
obj
, c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
)

7346 
bpf_¥ogøm
 *
¥og
;

7347 
îr
;

7349 
	`bpf_obje˘__f‹_óch_¥ogøm
(
¥og
, 
obj
) {

7350 
¥og
->
£c_def
 = 
	`föd_£c_def
’rog->
£c_«me
);

7351 i‡(!
¥og
->
£c_def
) {

7353 
	`¥_debug
("prog '%s': unrecognized ELF sectionÇame '%s'\n",

7354 
¥og
->
«me
,Örog->
£c_«me
);

7358 
¥og
->
ty≥
 =Örog->
£c_def
->
¥og_ty≥
;

7359 
¥og
->
ex≥˘ed_©èch_ty≥
 =Örog->
£c_def
->expected_attach_type;

7361 #¥agm®
GCC
 
dügno°ic
 
push


7362 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wdeprecated-declarations"

7363 i‡(
¥og
->
£c_def
->
¥og_ty≥
 =
BPF_PROG_TYPE_TRACING
 ||

7364 
¥og
->
£c_def
->
¥og_ty≥
 =
BPF_PROG_TYPE_EXT
)

7365 
¥og
->
©èch_¥og_fd
 = 
	`OPTS_GET
(
›ts
,áttach_prog_fd, 0);

7366 #¥agm®
GCC
 
dügno°ic
 
p›


7371 i‡(
¥og
->
£c_def
->
¥og_£tup_‚
) {

7372 
îr
 = 
¥og
->
£c_def
->
	`¥og_£tup_‚
’rog,Örog->£c_def->
cookõ
);

7373 i‡(
îr
 < 0) {

7374 
	`¥_w¨n
("prog '%s': failedÅo initialize: %d\n",

7375 
¥og
->
«me
, 
îr
);

7376  
îr
;

7382 
	}
}

7384 
bpf_obje˘
 *
	$bpf_obje˘_›í
(c⁄° *
∑th
, c⁄° *
obj_buf
, 
size_t
 
obj_buf_sz
,

7385 c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
)

7387 c⁄° *
obj_«me
, *
kc⁄fig
, *
btf_tmp_∑th
;

7388 
bpf_obje˘
 *
obj
;

7389 
tmp_«me
[64];

7390 
îr
;

7391 *
log_buf
;

7392 
size_t
 
log_size
;

7393 
__u32
 
log_Àvñ
;

7395 i‡(
	`ñf_vîsi⁄
(
EV_CURRENT
Ë=
EV_NONE
) {

7396 
	`¥_w¨n
("failedÅo initÜibelf for %s\n",

7397 
∑th
 ? : "(mem buf)");

7398  
	`ERR_PTR
(-
LIBBPF_ERRNO__LIBELF
);

7401 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_obje˘_›í_›ts
))

7402  
	`ERR_PTR
(-
EINVAL
);

7404 
obj_«me
 = 
	`OPTS_GET
(
›ts
, 
obje˘_«me
, 
NULL
);

7405 i‡(
obj_buf
) {

7406 i‡(!
obj_«me
) {

7407 
	`¢¥ötf
(
tmp_«me
, (tmp_name), "%lx-%lx",

7408 ()
obj_buf
,

7409 ()
obj_buf_sz
);

7410 
obj_«me
 = 
tmp_«me
;

7412 
∑th
 = 
obj_«me
;

7413 
	`¥_debug
("lﬂdög obje˘ '%s' from buf„r\n", 
obj_«me
);

7416 
log_buf
 = 
	`OPTS_GET
(
›ts
, 
kî√l_log_buf
, 
NULL
);

7417 
log_size
 = 
	`OPTS_GET
(
›ts
, 
kî√l_log_size
, 0);

7418 
log_Àvñ
 = 
	`OPTS_GET
(
›ts
, 
kî√l_log_Àvñ
, 0);

7419 i‡(
log_size
 > 
UINT_MAX
)

7420  
	`ERR_PTR
(-
EINVAL
);

7421 i‡(
log_size
 && !
log_buf
)

7422  
	`ERR_PTR
(-
EINVAL
);

7424 
obj
 = 
	`bpf_obje˘__√w
(
∑th
, 
obj_buf
, 
obj_buf_sz
, 
obj_«me
);

7425 i‡(
	`IS_ERR
(
obj
))

7426  
obj
;

7428 
obj
->
log_buf
 =Üog_buf;

7429 
obj
->
log_size
 =Üog_size;

7430 
obj
->
log_Àvñ
 =Üog_level;

7432 
btf_tmp_∑th
 = 
	`OPTS_GET
(
›ts
, 
btf_cu°om_∑th
, 
NULL
);

7433 i‡(
btf_tmp_∑th
) {

7434 i‡(
	`°æí
(
btf_tmp_∑th
Ë>
PATH_MAX
) {

7435 
îr
 = -
ENAMETOOLONG
;

7436 
out
;

7438 
obj
->
btf_cu°om_∑th
 = 
	`°rdup
(
btf_tmp_∑th
);

7439 i‡(!
obj
->
btf_cu°om_∑th
) {

7440 
îr
 = -
ENOMEM
;

7441 
out
;

7445 
kc⁄fig
 = 
	`OPTS_GET
(
›ts
, kc⁄fig, 
NULL
);

7446 i‡(
kc⁄fig
) {

7447 
obj
->
kc⁄fig
 = 
	`°rdup
(kconfig);

7448 i‡(!
obj
->
kc⁄fig
) {

7449 
îr
 = -
ENOMEM
;

7450 
out
;

7454 
îr
 = 
	`bpf_obje˘__ñf_öô
(
obj
);

7455 
îr
 =Éº ? : 
	`bpf_obje˘__check_ídü¬ess
(
obj
);

7456 
îr
 =Éº ? : 
	`bpf_obje˘__ñf_cﬁÀ˘
(
obj
);

7457 
îr
 =Éº ? : 
	`bpf_obje˘__cﬁÀ˘_exã∫s
(
obj
);

7458 
îr
 =Éº ? : 
	`bpf_obje˘__föÆize_btf
(
obj
);

7459 
îr
 =Éº ? : 
	`bpf_obje˘__öô_m≠s
(
obj
, 
›ts
);

7460 
îr
 =Éº ? : 
	`bpf_obje˘_öô_¥ogs
(
obj
, 
›ts
);

7461 
îr
 =Éº ? : 
	`bpf_obje˘__cﬁÀ˘_ªlos
(
obj
);

7462 i‡(
îr
)

7463 
out
;

7465 
	`bpf_obje˘__ñf_föish
(
obj
);

7467  
obj
;

7468 
out
:

7469 
	`bpf_obje˘__˛o£
(
obj
);

7470  
	`ERR_PTR
(
îr
);

7471 
	}
}

7473 
bpf_obje˘
 *

7474 
	$__bpf_obje˘__›í_x©å
(
bpf_obje˘_›í_©å
 *
©å
, 
Êags
)

7476 
	`DECLARE_LIBBPF_OPTS
(
bpf_obje˘_›í_›ts
, 
›ts
,

7477 .
ªœxed_m≠s
 = 
Êags
 & 
MAPS_RELAX_COMPAT
,

7481 i‡(!
©å
->
fûe
)

7482  
NULL
;

7484 
	`¥_debug
("lﬂdög %s\n", 
©å
->
fûe
);

7485  
	`bpf_obje˘_›í
(
©å
->
fûe
, 
NULL
, 0, &
›ts
);

7486 
	}
}

7488 
bpf_obje˘
 *
	$bpf_obje˘__›í_x©å
(
bpf_obje˘_›í_©å
 *
©å
)

7490  
	`libbpf_±r
(
	`__bpf_obje˘__›í_x©å
(
©å
, 0));

7491 
	}
}

7493 
bpf_obje˘
 *
	$bpf_obje˘__›í
(c⁄° *
∑th
)

7495 
bpf_obje˘_›í_©å
 
©å
 = {

7496 .
fûe
 = 
∑th
,

7497 .
¥og_ty≥
 = 
BPF_PROG_TYPE_UNSPEC
,

7500  
	`libbpf_±r
(
	`__bpf_obje˘__›í_x©å
(&
©å
, 0));

7501 
	}
}

7503 
bpf_obje˘
 *

7504 
	$bpf_obje˘__›í_fûe
(c⁄° *
∑th
, c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
)

7506 i‡(!
∑th
)

7507  
	`libbpf_îr_±r
(-
EINVAL
);

7509 
	`¥_debug
("lﬂdög %s\n", 
∑th
);

7511  
	`libbpf_±r
(
	`bpf_obje˘_›í
(
∑th
, 
NULL
, 0, 
›ts
));

7512 
	}
}

7514 
bpf_obje˘
 *

7515 
	$bpf_obje˘__›í_mem
(c⁄° *
obj_buf
, 
size_t
 
obj_buf_sz
,

7516 c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
)

7518 i‡(!
obj_buf
 || 
obj_buf_sz
 == 0)

7519  
	`libbpf_îr_±r
(-
EINVAL
);

7521  
	`libbpf_±r
(
	`bpf_obje˘_›í
(
NULL
, 
obj_buf
, 
obj_buf_sz
, 
›ts
));

7522 
	}
}

7524 
bpf_obje˘
 *

7525 
	$bpf_obje˘__›í_buf„r
(c⁄° *
obj_buf
, 
size_t
 
obj_buf_sz
,

7526 c⁄° *
«me
)

7528 
	`DECLARE_LIBBPF_OPTS
(
bpf_obje˘_›í_›ts
, 
›ts
,

7529 .
obje˘_«me
 = 
«me
,

7531 .
ªœxed_m≠s
 = 
åue
,

7535 i‡(!
obj_buf
 || 
obj_buf_sz
 == 0)

7536  
î∫o
 = 
EINVAL
, 
NULL
;

7538  
	`libbpf_±r
(
	`bpf_obje˘_›í
(
NULL
, 
obj_buf
, 
obj_buf_sz
, &
›ts
));

7539 
	}
}

7541 
	$bpf_obje˘_u∆ﬂd
(
bpf_obje˘
 *
obj
)

7543 
size_t
 
i
;

7545 i‡(!
obj
)

7546  
	`libbpf_îr
(-
EINVAL
);

7548 
i
 = 0; i < 
obj
->
ƒ_m≠s
; i++) {

7549 
	`z˛o£
(
obj
->
m≠s
[
i
].
fd
);

7550 i‡(
obj
->
m≠s
[
i
].
°_›s
)

7551 
	`z‰ì
(&
obj
->
m≠s
[
i
].
°_›s
->
kîn_vd©a
);

7554 
i
 = 0; i < 
obj
->
ƒ_¥ogøms
; i++)

7555 
	`bpf_¥ogøm__u∆ﬂd
(&
obj
->
¥ogøms
[
i
]);

7558 
	}
}

7560 
	$bpf_obje˘__u∆ﬂd
(
bpf_obje˘
 *
obj
Ë
	`__©åibuã__
((
	`Æüs
("bpf_object_unload")));

7562 
	$bpf_obje˘__ßnôize_m≠s
(
bpf_obje˘
 *
obj
)

7564 
bpf_m≠
 *
m
;

7566 
	`bpf_obje˘__f‹_óch_m≠
(
m
, 
obj
) {

7567 i‡(!
	`bpf_m≠__is_öã∫Æ
(
m
))

7569 i‡(!
	`kî√l_suµ‹ts
(
obj
, 
FEAT_ARRAY_MMAP
))

7570 
m
->
def
.
m≠_Êags
 ^
BPF_F_MMAPABLE
;

7574 
	}
}

7576 
	$libbpf_kÆlsyms_∑r£
(
kÆlsyms_cb_t
 
cb
, *
˘x
)

7578 
sym_ty≥
, 
sym_«me
[500];

7579 
sym_addr
;

7580 
ªt
, 
îr
 = 0;

7581 
FILE
 *
f
;

7583 
f
 = 
	`f›í
("/proc/kallsyms", "r");

7584 i‡(!
f
) {

7585 
îr
 = -
î∫o
;

7586 
	`¥_w¨n
("ÁûedÅÿ›í /¥oc/kÆlsyms: %d\n", 
îr
);

7587  
îr
;

7590 
åue
) {

7591 
ªt
 = 
	`fsˇnf
(
f
, "%llx %c %499s%*[^\n]\n",

7592 &
sym_addr
, &
sym_ty≥
, 
sym_«me
);

7593 i‡(
ªt
 =
EOF
 && 
	`„of
(
f
))

7595 i‡(
ªt
 != 3) {

7596 
	`¥_w¨n
("ÁûedÅÿªad kÆlsym†íåy: %d\n", 
ªt
);

7597 
îr
 = -
EINVAL
;

7601 
îr
 = 
	`cb
(
sym_addr
, 
sym_ty≥
, 
sym_«me
, 
˘x
);

7602 i‡(
îr
)

7606 
	`f˛o£
(
f
);

7607  
îr
;

7608 
	}
}

7610 
	$kÆlsyms_cb
(
sym_addr
, 
sym_ty≥
,

7611 c⁄° *
sym_«me
, *
˘x
)

7613 
bpf_obje˘
 *
obj
 = 
˘x
;

7614 c⁄° 
btf_ty≥
 *
t
;

7615 
exã∫_desc
 *
ext
;

7617 
ext
 = 
	`föd_exã∫_by_«me
(
obj
, 
sym_«me
);

7618 i‡(!
ext
 ||Éxt->
ty≥
 !
EXT_KSYM
)

7621 
t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
ext
->
btf_id
);

7622 i‡(!
	`btf_is_v¨
(
t
))

7625 i‡(
ext
->
is_£t
 &&Éxt->
ksym
.
addr
 !
sym_addr
) {

7626 
	`¥_w¨n
("extern (ksym) '%s'Ñesolution isámbiguous: 0x%llx or 0x%llx\n",

7627 
sym_«me
, 
ext
->
ksym
.
addr
, 
sym_addr
);

7628  -
EINVAL
;

7630 i‡(!
ext
->
is_£t
) {

7631 
ext
->
is_£t
 = 
åue
;

7632 
ext
->
ksym
.
addr
 = 
sym_addr
;

7633 
	`¥_debug
("exã∫ (ksymË%s=0x%Œx\n", 
sym_«me
, 
sym_addr
);

7636 
	}
}

7638 
	$bpf_obje˘__ªad_kÆlsyms_fûe
(
bpf_obje˘
 *
obj
)

7640  
	`libbpf_kÆlsyms_∑r£
(
kÆlsyms_cb
, 
obj
);

7641 
	}
}

7643 
	$föd_ksym_btf_id
(
bpf_obje˘
 *
obj
, c⁄° *
ksym_«me
,

7644 
__u16
 
köd
, 
btf
 **
ªs_btf
,

7645 
moduÀ_btf
 **
ªs_mod_btf
)

7647 
moduÀ_btf
 *
mod_btf
;

7648 
btf
 *btf;

7649 
i
, 
id
, 
îr
;

7651 
btf
 = 
obj
->
btf_vmlöux
;

7652 
mod_btf
 = 
NULL
;

7653 
id
 = 
	`btf__föd_by_«me_köd
(
btf
, 
ksym_«me
, 
köd
);

7655 i‡(
id
 =-
ENOENT
) {

7656 
îr
 = 
	`lﬂd_moduÀ_btfs
(
obj
);

7657 i‡(
îr
)

7658  
îr
;

7660 
i
 = 0; i < 
obj
->
btf_moduÀ_˙t
; i++) {

7662 
mod_btf
 = &
obj
->
btf_moduÀs
[
i
];

7663 
btf
 = 
mod_btf
->btf;

7664 
id
 = 
	`btf__föd_by_«me_köd_own
(
btf
, 
ksym_«me
, 
köd
);

7665 i‡(
id
 !-
ENOENT
)

7669 i‡(
id
 <= 0)

7670  -
ESRCH
;

7672 *
ªs_btf
 = 
btf
;

7673 *
ªs_mod_btf
 = 
mod_btf
;

7674  
id
;

7675 
	}
}

7677 
	$bpf_obje˘__ªsﬁve_ksym_v¨_btf_id
(
bpf_obje˘
 *
obj
,

7678 
exã∫_desc
 *
ext
)

7680 c⁄° 
btf_ty≥
 *
èrg_v¨
, *
èrg_ty≥
;

7681 
__u32
 
èrg_ty≥_id
, 
loˇl_ty≥_id
;

7682 
moduÀ_btf
 *
mod_btf
 = 
NULL
;

7683 c⁄° *
èrg_v¨_«me
;

7684 
btf
 *bt‡
NULL
;

7685 
id
, 
îr
;

7687 
id
 = 
	`föd_ksym_btf_id
(
obj
, 
ext
->
«me
, 
BTF_KIND_VAR
, &
btf
, &
mod_btf
);

7688 i‡(
id
 < 0) {

7689 i‡(
id
 =-
ESRCH
 && 
ext
->
is_wók
)

7691 
	`¥_w¨n
("extern (var ksym) '%s':Çot found in kernel BTF\n",

7692 
ext
->
«me
);

7693  
id
;

7697 
loˇl_ty≥_id
 = 
ext
->
ksym
.
ty≥_id
;

7700 
èrg_v¨
 = 
	`btf__ty≥_by_id
(
btf
, 
id
);

7701 
èrg_v¨_«me
 = 
	`btf__«me_by_off£t
(
btf
, 
èrg_v¨
->
«me_off
);

7702 
èrg_ty≥
 = 
	`skù_mods_™d_ty≥defs
(
btf
, 
èrg_v¨
->
ty≥
, &
èrg_ty≥_id
);

7704 
îr
 = 
	`bpf_c‹e_ty≥s_¨e_com∑t
(
obj
->
btf
, 
loˇl_ty≥_id
,

7705 
btf
, 
èrg_ty≥_id
);

7706 i‡(
îr
 <= 0) {

7707 c⁄° 
btf_ty≥
 *
loˇl_ty≥
;

7708 c⁄° *
èrg_«me
, *
loˇl_«me
;

7710 
loˇl_ty≥
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
loˇl_ty≥_id
);

7711 
loˇl_«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
loˇl_ty≥
->
«me_off
);

7712 
èrg_«me
 = 
	`btf__«me_by_off£t
(
btf
, 
èrg_ty≥
->
«me_off
);

7714 
	`¥_w¨n
("extern (var ksym) '%s': incompatibleÅypes,Éxpected [%d] %s %s, but kernel has [%d] %s %s\n",

7715 
ext
->
«me
, 
loˇl_ty≥_id
,

7716 
	`btf_köd_°r
(
loˇl_ty≥
), 
loˇl_«me
, 
èrg_ty≥_id
,

7717 
	`btf_köd_°r
(
èrg_ty≥
), 
èrg_«me
);

7718  -
EINVAL
;

7721 
ext
->
is_£t
 = 
åue
;

7722 
ext
->
ksym
.
kî√l_btf_obj_fd
 = 
mod_btf
 ? mod_btf->
fd
 : 0;

7723 
ext
->
ksym
.
kî√l_btf_id
 = 
id
;

7724 
	`¥_debug
("extern (var ksym) '%s':ÑesolvedÅo [%d] %s %s\n",

7725 
ext
->
«me
, 
id
, 
	`btf_köd_°r
(
èrg_v¨
), 
èrg_v¨_«me
);

7728 
	}
}

7730 
	$bpf_obje˘__ªsﬁve_ksym_func_btf_id
(
bpf_obje˘
 *
obj
,

7731 
exã∫_desc
 *
ext
)

7733 
loˇl_func_¥Ÿo_id
, 
kfunc_¥Ÿo_id
, 
kfunc_id
;

7734 
moduÀ_btf
 *
mod_btf
 = 
NULL
;

7735 c⁄° 
btf_ty≥
 *
kîn_func
;

7736 
btf
 *
kîn_btf
 = 
NULL
;

7737 
ªt
;

7739 
loˇl_func_¥Ÿo_id
 = 
ext
->
ksym
.
ty≥_id
;

7741 
kfunc_id
 = 
	`föd_ksym_btf_id
(
obj
, 
ext
->
«me
, 
BTF_KIND_FUNC
, &
kîn_btf
, &
mod_btf
);

7742 i‡(
kfunc_id
 < 0) {

7743 i‡(
kfunc_id
 =-
ESRCH
 && 
ext
->
is_wók
)

7745 
	`¥_w¨n
("extern (func ksym) '%s':Çot found in kernel or module BTFs\n",

7746 
ext
->
«me
);

7747  
kfunc_id
;

7750 
kîn_func
 = 
	`btf__ty≥_by_id
(
kîn_btf
, 
kfunc_id
);

7751 
kfunc_¥Ÿo_id
 = 
kîn_func
->
ty≥
;

7753 
ªt
 = 
	`bpf_c‹e_ty≥s_¨e_com∑t
(
obj
->
btf
, 
loˇl_func_¥Ÿo_id
,

7754 
kîn_btf
, 
kfunc_¥Ÿo_id
);

7755 i‡(
ªt
 <= 0) {

7756 
	`¥_w¨n
("extern (func ksym) '%s': func_proto [%d] incompatible with kernel [%d]\n",

7757 
ext
->
«me
, 
loˇl_func_¥Ÿo_id
, 
kfunc_¥Ÿo_id
);

7758  -
EINVAL
;

7762 i‡(
mod_btf
 && !mod_btf->
fd_¨øy_idx
) {

7764 i‡(
obj
->
fd_¨øy_˙t
 =
INT16_MAX
) {

7765 
	`¥_w¨n
("extern (func ksym) '%s': module BTF fd index %dÅoo bigÅo fit in bpf_insn offset\n",

7766 
ext
->
«me
, 
mod_btf
->
fd_¨øy_idx
);

7767  -
E2BIG
;

7770 i‡(!
obj
->
fd_¨øy_˙t
)

7771 
obj
->
fd_¨øy_˙t
 = 1;

7773 
ªt
 = 
	`libbpf_ísuª_mem
((**)&
obj
->
fd_¨øy
, &obj->
fd_¨øy_ˇp
, (),

7774 
obj
->
fd_¨øy_˙t
 + 1);

7775 i‡(
ªt
)

7776  
ªt
;

7777 
mod_btf
->
fd_¨øy_idx
 = 
obj
->
fd_¨øy_˙t
;

7779 
obj
->
fd_¨øy
[obj->
fd_¨øy_˙t
++] = 
mod_btf
->
fd
;

7782 
ext
->
is_£t
 = 
åue
;

7783 
ext
->
ksym
.
kî√l_btf_id
 = 
kfunc_id
;

7784 
ext
->
ksym
.
btf_fd_idx
 = 
mod_btf
 ? mod_btf->
fd_¨øy_idx
 : 0;

7785 
	`¥_debug
("extern (func ksym) '%s':ÑesolvedÅo kernel [%d]\n",

7786 
ext
->
«me
, 
kfunc_id
);

7789 
	}
}

7791 
	$bpf_obje˘__ªsﬁve_ksyms_btf_id
(
bpf_obje˘
 *
obj
)

7793 c⁄° 
btf_ty≥
 *
t
;

7794 
exã∫_desc
 *
ext
;

7795 
i
, 
îr
;

7797 
i
 = 0; i < 
obj
->
ƒ_exã∫
; i++) {

7798 
ext
 = &
obj
->
exã∫s
[
i
];

7799 i‡(
ext
->
ty≥
 !
EXT_KSYM
 || !ext->
ksym
.
ty≥_id
)

7802 i‡(
obj
->
gí_lﬂdî
) {

7803 
ext
->
is_£t
 = 
åue
;

7804 
ext
->
ksym
.
kî√l_btf_obj_fd
 = 0;

7805 
ext
->
ksym
.
kî√l_btf_id
 = 0;

7808 
t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
ext
->
btf_id
);

7809 i‡(
	`btf_is_v¨
(
t
))

7810 
îr
 = 
	`bpf_obje˘__ªsﬁve_ksym_v¨_btf_id
(
obj
, 
ext
);

7812 
îr
 = 
	`bpf_obje˘__ªsﬁve_ksym_func_btf_id
(
obj
, 
ext
);

7813 i‡(
îr
)

7814  
îr
;

7817 
	}
}

7819 
	$bpf_obje˘__ªsﬁve_exã∫s
(
bpf_obje˘
 *
obj
,

7820 c⁄° *
exåa_kc⁄fig
)

7822 
boﬁ
 
√ed_c⁄fig
 = 
Ál£
, 
√ed_kÆlsyms
 = false;

7823 
boﬁ
 
√ed_vmlöux_btf
 = 
Ál£
;

7824 
exã∫_desc
 *
ext
;

7825 *
kcfg_d©a
 = 
NULL
;

7826 
îr
, 
i
;

7828 i‡(
obj
->
ƒ_exã∫
 == 0)

7831 i‡(
obj
->
kc⁄fig_m≠_idx
 >= 0)

7832 
kcfg_d©a
 = 
obj
->
m≠s
[obj->
kc⁄fig_m≠_idx
].
mm≠ed
;

7834 
i
 = 0; i < 
obj
->
ƒ_exã∫
; i++) {

7835 
ext
 = &
obj
->
exã∫s
[
i
];

7837 i‡(
ext
->
ty≥
 =
EXT_KCFG
 &&

7838 
	`°rcmp
(
ext
->
«me
, "LINUX_KERNEL_VERSION") == 0) {

7839 *
ext_vÆ
 = 
kcfg_d©a
 + 
ext
->
kcfg
.
d©a_off
;

7840 
__u32
 
kvî
 = 
	`gë_kî√l_vîsi⁄
();

7842 i‡(!
kvî
) {

7843 
	`¥_w¨n
("failedÅo get kernel version\n");

7844  -
EINVAL
;

7846 
îr
 = 
	`£t_kcfg_vÆue_num
(
ext
, 
ext_vÆ
, 
kvî
);

7847 i‡(
îr
)

7848  
îr
;

7849 
	`¥_debug
("exã∫ (kcfgË%s=0x%x\n", 
ext
->
«me
, 
kvî
);

7850 } i‡(
ext
->
ty≥
 =
EXT_KCFG
 && 
	`°r_has_pfx
”xt->
«me
, "CONFIG_")) {

7851 
√ed_c⁄fig
 = 
åue
;

7852 } i‡(
ext
->
ty≥
 =
EXT_KSYM
) {

7853 i‡(
ext
->
ksym
.
ty≥_id
)

7854 
√ed_vmlöux_btf
 = 
åue
;

7856 
√ed_kÆlsyms
 = 
åue
;

7858 
	`¥_w¨n
("uƒecognizedÉxã∫ '%s'\n", 
ext
->
«me
);

7859  -
EINVAL
;

7862 i‡(
√ed_c⁄fig
 && 
exåa_kc⁄fig
) {

7863 
îr
 = 
	`bpf_obje˘__ªad_kc⁄fig_mem
(
obj
, 
exåa_kc⁄fig
, 
kcfg_d©a
);

7864 i‡(
îr
)

7865  -
EINVAL
;

7866 
√ed_c⁄fig
 = 
Ál£
;

7867 
i
 = 0; i < 
obj
->
ƒ_exã∫
; i++) {

7868 
ext
 = &
obj
->
exã∫s
[
i
];

7869 i‡(
ext
->
ty≥
 =
EXT_KCFG
 && !ext->
is_£t
) {

7870 
√ed_c⁄fig
 = 
åue
;

7875 i‡(
√ed_c⁄fig
) {

7876 
îr
 = 
	`bpf_obje˘__ªad_kc⁄fig_fûe
(
obj
, 
kcfg_d©a
);

7877 i‡(
îr
)

7878  -
EINVAL
;

7880 i‡(
√ed_kÆlsyms
) {

7881 
îr
 = 
	`bpf_obje˘__ªad_kÆlsyms_fûe
(
obj
);

7882 i‡(
îr
)

7883  -
EINVAL
;

7885 i‡(
√ed_vmlöux_btf
) {

7886 
îr
 = 
	`bpf_obje˘__ªsﬁve_ksyms_btf_id
(
obj
);

7887 i‡(
îr
)

7888  -
EINVAL
;

7890 
i
 = 0; i < 
obj
->
ƒ_exã∫
; i++) {

7891 
ext
 = &
obj
->
exã∫s
[
i
];

7893 i‡(!
ext
->
is_£t
 && !ext->
is_wók
) {

7894 
	`¥_w¨n
("exã∫ %†(°r⁄gËnŸÑesﬁved\n", 
ext
->
«me
);

7895  -
ESRCH
;

7896 } i‡(!
ext
->
is_£t
) {

7897 
	`¥_debug
("extern %s (weak)ÇotÑesolved, defaultingÅo zero\n",

7898 
ext
->
«me
);

7903 
	}
}

7905 
	$bpf_obje˘_lﬂd
(
bpf_obje˘
 *
obj
, 
exåa_log_Àvñ
, c⁄° *
èrgë_btf_∑th
)

7907 
îr
, 
i
;

7909 i‡(!
obj
)

7910  
	`libbpf_îr
(-
EINVAL
);

7912 i‡(
obj
->
lﬂded
) {

7913 
	`¥_w¨n
("obje˘ '%s':Üﬂd c™'àbê©ãm±edÅwi˚\n", 
obj
->
«me
);

7914  
	`libbpf_îr
(-
EINVAL
);

7917 i‡(
obj
->
gí_lﬂdî
)

7918 
	`bpf_gí__öô
(
obj
->
gí_lﬂdî
, 
exåa_log_Àvñ
, obj->
ƒ_¥ogøms
, obj->
ƒ_m≠s
);

7920 
îr
 = 
	`bpf_obje˘__¥obe_lﬂdög
(
obj
);

7921 
îr
 =Éº ? : 
	`bpf_obje˘__lﬂd_vmlöux_btf
(
obj
, 
Ál£
);

7922 
îr
 =Éº ? : 
	`bpf_obje˘__ªsﬁve_exã∫s
(
obj
, obj->
kc⁄fig
);

7923 
îr
 =Éº ? : 
	`bpf_obje˘__ßnôize_™d_lﬂd_btf
(
obj
);

7924 
îr
 =Éº ? : 
	`bpf_obje˘__ßnôize_m≠s
(
obj
);

7925 
îr
 =Éº ? : 
	`bpf_obje˘__öô_kîn_°ru˘_›s_m≠s
(
obj
);

7926 
îr
 =Éº ? : 
	`bpf_obje˘__¸óã_m≠s
(
obj
);

7927 
îr
 =Éº ? : 
	`bpf_obje˘__ªloˇã
(
obj
, obj->
btf_cu°om_∑th
 ? : 
èrgë_btf_∑th
);

7928 
îr
 =Éº ? : 
	`bpf_obje˘__lﬂd_¥ogs
(
obj
, 
exåa_log_Àvñ
);

7929 
îr
 =Éº ? : 
	`bpf_obje˘_öô_¥og_¨øys
(
obj
);

7931 i‡(
obj
->
gí_lﬂdî
) {

7933 i‡(
obj
->
btf
)

7934 
	`btf__£t_fd
(
obj
->
btf
, -1);

7935 
i
 = 0; i < 
obj
->
ƒ_m≠s
; i++)

7936 
obj
->
m≠s
[
i
].
fd
 = -1;

7937 i‡(!
îr
)

7938 
îr
 = 
	`bpf_gí__föish
(
obj
->
gí_lﬂdî
, obj->
ƒ_¥ogøms
, obj->
ƒ_m≠s
);

7942 
	`z‰ì
(&
obj
->
fd_¨øy
);

7945 
i
 = 0; i < 
obj
->
btf_moduÀ_˙t
; i++) {

7946 
	`˛o£
(
obj
->
btf_moduÀs
[
i
].
fd
);

7947 
	`btf__‰ì
(
obj
->
btf_moduÀs
[
i
].
btf
);

7948 
	`‰ì
(
obj
->
btf_moduÀs
[
i
].
«me
);

7950 
	`‰ì
(
obj
->
btf_moduÀs
);

7953 
	`btf__‰ì
(
obj
->
btf_vmlöux
);

7954 
obj
->
btf_vmlöux
 = 
NULL
;

7956 
obj
->
lﬂded
 = 
åue
;

7958 i‡(
îr
)

7959 
out
;

7962 
out
:

7964 
i
 = 0; i < 
obj
->
ƒ_m≠s
; i++)

7965 i‡(
obj
->
m≠s
[
i
].
pö√d
 && !obj->m≠s[i].
ªu£d
)

7966 
	`bpf_m≠__u≈ö
(&
obj
->
m≠s
[
i
], 
NULL
);

7968 
	`bpf_obje˘_u∆ﬂd
(
obj
);

7969 
	`¥_w¨n
("ÁûedÅÿlﬂd obje˘ '%s'\n", 
obj
->
∑th
);

7970  
	`libbpf_îr
(
îr
);

7971 
	}
}

7973 
	$bpf_obje˘__lﬂd_x©å
(
bpf_obje˘_lﬂd_©å
 *
©å
)

7975  
	`bpf_obje˘_lﬂd
(
©å
->
obj
,áâr->
log_Àvñ
,áâr->
èrgë_btf_∑th
);

7976 
	}
}

7978 
	$bpf_obje˘__lﬂd
(
bpf_obje˘
 *
obj
)

7980  
	`bpf_obje˘_lﬂd
(
obj
, 0, 
NULL
);

7981 
	}
}

7983 
	$make_∑ª¡_dú
(c⁄° *
∑th
)

7985 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

7986 *
d«me
, *
dú
;

7987 
îr
 = 0;

7989 
d«me
 = 
	`°rdup
(
∑th
);

7990 i‡(
d«me
 =
NULL
)

7991  -
ENOMEM
;

7993 
dú
 = 
	`dú«me
(
d«me
);

7994 i‡(
	`mkdú
(
dú
, 0700Ë&& 
î∫o
 !
EEXIST
)

7995 
îr
 = -
î∫o
;

7997 
	`‰ì
(
d«me
);

7998 i‡(
îr
) {

7999 
˝
 = 
	`libbpf_°ªº‹_r
(-
îr
, 
îrmsg
, (errmsg));

8000 
	`¥_w¨n
("ÁûedÅÿmkdú %s: %s\n", 
∑th
, 
˝
);

8002  
îr
;

8003 
	}
}

8005 
	$check_∑th
(c⁄° *
∑th
)

8007 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

8008 
°©fs
 
°_fs
;

8009 *
d«me
, *
dú
;

8010 
îr
 = 0;

8012 i‡(
∑th
 =
NULL
)

8013  -
EINVAL
;

8015 
d«me
 = 
	`°rdup
(
∑th
);

8016 i‡(
d«me
 =
NULL
)

8017  -
ENOMEM
;

8019 
dú
 = 
	`dú«me
(
d«me
);

8020 i‡(
	`°©fs
(
dú
, &
°_fs
)) {

8021 
˝
 = 
	`libbpf_°ªº‹_r
(
î∫o
, 
îrmsg
, (errmsg));

8022 
	`¥_w¨n
("ÁûedÅÿ°©f†%s: %s\n", 
dú
, 
˝
);

8023 
îr
 = -
î∫o
;

8025 
	`‰ì
(
d«me
);

8027 i‡(!
îr
 && 
°_fs
.
f_ty≥
 !
BPF_FS_MAGIC
) {

8028 
	`¥_w¨n
("•ecifõdÖ©h %†i†nŸ o¿BPF FS\n", 
∑th
);

8029 
îr
 = -
EINVAL
;

8032  
îr
;

8033 
	}
}

8035 
	$bpf_¥ogøm_pö_ö°™˚
(
bpf_¥ogøm
 *
¥og
, c⁄° *
∑th
, 
ö°™˚
)

8037 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

8038 
îr
;

8040 
îr
 = 
	`make_∑ª¡_dú
(
∑th
);

8041 i‡(
îr
)

8042  
	`libbpf_îr
(
îr
);

8044 
îr
 = 
	`check_∑th
(
∑th
);

8045 i‡(
îr
)

8046  
	`libbpf_îr
(
îr
);

8048 i‡(
¥og
 =
NULL
) {

8049 
	`¥_w¨n
("invalidÖrogramÖointer\n");

8050  
	`libbpf_îr
(-
EINVAL
);

8053 i‡(
ö°™˚
 < 0 || in°™˚ >
¥og
->
ö°™˚s
.
ƒ
) {

8054 
	`¥_w¨n
("invalidÖrog instance %d ofÖrog %s (max %d)\n",

8055 
ö°™˚
, 
¥og
->
«me
,Örog->
ö°™˚s
.
ƒ
);

8056  
	`libbpf_îr
(-
EINVAL
);

8059 i‡(
	`bpf_obj_pö
(
¥og
->
ö°™˚s
.
fds
[
ö°™˚
], 
∑th
)) {

8060 
îr
 = -
î∫o
;

8061 
˝
 = 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg));

8062 
	`¥_w¨n
("ÁûedÅÿpöÖrogøm: %s\n", 
˝
);

8063  
	`libbpf_îr
(
îr
);

8065 
	`¥_debug
("pö√dÖrogøm '%s'\n", 
∑th
);

8068 
	}
}

8070 
	$bpf_¥ogøm_u≈ö_ö°™˚
(
bpf_¥ogøm
 *
¥og
, c⁄° *
∑th
, 
ö°™˚
)

8072 
îr
;

8074 
îr
 = 
	`check_∑th
(
∑th
);

8075 i‡(
îr
)

8076  
	`libbpf_îr
(
îr
);

8078 i‡(
¥og
 =
NULL
) {

8079 
	`¥_w¨n
("invalidÖrogramÖointer\n");

8080  
	`libbpf_îr
(-
EINVAL
);

8083 i‡(
ö°™˚
 < 0 || in°™˚ >
¥og
->
ö°™˚s
.
ƒ
) {

8084 
	`¥_w¨n
("invalidÖrog instance %d ofÖrog %s (max %d)\n",

8085 
ö°™˚
, 
¥og
->
«me
,Örog->
ö°™˚s
.
ƒ
);

8086  
	`libbpf_îr
(-
EINVAL
);

8089 
îr
 = 
	`u∆ök
(
∑th
);

8090 i‡(
îr
 != 0)

8091  
	`libbpf_îr
(-
î∫o
);

8093 
	`¥_debug
("u≈ö√dÖrogøm '%s'\n", 
∑th
);

8096 
	}
}

8098 
__©åibuã__
((
Æüs
("bpf_program_pin_instance")))

8099 
bpf_obje˘__pö_ö°™˚
(
bpf_¥ogøm
 *
¥og
, c⁄° *
∑th
, 
ö°™˚
);

8101 
__©åibuã__
((
Æüs
("bpf_program_unpin_instance")))

8102 
bpf_¥ogøm__u≈ö_ö°™˚
(
bpf_¥ogøm
 *
¥og
, c⁄° *
∑th
, 
ö°™˚
);

8104 
	$bpf_¥ogøm__pö
(
bpf_¥ogøm
 *
¥og
, c⁄° *
∑th
)

8106 
i
, 
îr
;

8108 
îr
 = 
	`make_∑ª¡_dú
(
∑th
);

8109 i‡(
îr
)

8110  
	`libbpf_îr
(
îr
);

8112 
îr
 = 
	`check_∑th
(
∑th
);

8113 i‡(
îr
)

8114  
	`libbpf_îr
(
îr
);

8116 i‡(
¥og
 =
NULL
) {

8117 
	`¥_w¨n
("invalidÖrogramÖointer\n");

8118  
	`libbpf_îr
(-
EINVAL
);

8121 i‡(
¥og
->
ö°™˚s
.
ƒ
 <= 0) {

8122 
	`¥_w¨n
("nÿö°™˚†o‡¥og %†tÿpö\n", 
¥og
->
«me
);

8123  
	`libbpf_îr
(-
EINVAL
);

8126 i‡(
¥og
->
ö°™˚s
.
ƒ
 == 1) {

8128  
	`bpf_¥ogøm_pö_ö°™˚
(
¥og
, 
∑th
, 0);

8131 
i
 = 0; i < 
¥og
->
ö°™˚s
.
ƒ
; i++) {

8132 
buf
[
PATH_MAX
];

8133 
Àn
;

8135 
Àn
 = 
	`¢¥ötf
(
buf
, 
PATH_MAX
, "%s/%d", 
∑th
, 
i
);

8136 i‡(
Àn
 < 0) {

8137 
îr
 = -
EINVAL
;

8138 
îr_u≈ö
;

8139 } i‡(
Àn
 >
PATH_MAX
) {

8140 
îr
 = -
ENAMETOOLONG
;

8141 
îr_u≈ö
;

8144 
îr
 = 
	`bpf_¥ogøm_pö_ö°™˚
(
¥og
, 
buf
, 
i
);

8145 i‡(
îr
)

8146 
îr_u≈ö
;

8151 
îr_u≈ö
:

8152 
i
 = i - 1; i >= 0; i--) {

8153 
buf
[
PATH_MAX
];

8154 
Àn
;

8156 
Àn
 = 
	`¢¥ötf
(
buf
, 
PATH_MAX
, "%s/%d", 
∑th
, 
i
);

8157 i‡(
Àn
 < 0)

8159 i‡(
Àn
 >
PATH_MAX
)

8162 
	`bpf_¥ogøm_u≈ö_ö°™˚
(
¥og
, 
buf
, 
i
);

8165 
	`rmdú
(
∑th
);

8167  
	`libbpf_îr
(
îr
);

8168 
	}
}

8170 
	$bpf_¥ogøm__u≈ö
(
bpf_¥ogøm
 *
¥og
, c⁄° *
∑th
)

8172 
i
, 
îr
;

8174 
îr
 = 
	`check_∑th
(
∑th
);

8175 i‡(
îr
)

8176  
	`libbpf_îr
(
îr
);

8178 i‡(
¥og
 =
NULL
) {

8179 
	`¥_w¨n
("invalidÖrogramÖointer\n");

8180  
	`libbpf_îr
(-
EINVAL
);

8183 i‡(
¥og
->
ö°™˚s
.
ƒ
 <= 0) {

8184 
	`¥_w¨n
("nÿö°™˚†o‡¥og %†tÿpö\n", 
¥og
->
«me
);

8185  
	`libbpf_îr
(-
EINVAL
);

8188 i‡(
¥og
->
ö°™˚s
.
ƒ
 == 1) {

8190  
	`bpf_¥ogøm_u≈ö_ö°™˚
(
¥og
, 
∑th
, 0);

8193 
i
 = 0; i < 
¥og
->
ö°™˚s
.
ƒ
; i++) {

8194 
buf
[
PATH_MAX
];

8195 
Àn
;

8197 
Àn
 = 
	`¢¥ötf
(
buf
, 
PATH_MAX
, "%s/%d", 
∑th
, 
i
);

8198 i‡(
Àn
 < 0)

8199  
	`libbpf_îr
(-
EINVAL
);

8200 i‡(
Àn
 >
PATH_MAX
)

8201  
	`libbpf_îr
(-
ENAMETOOLONG
);

8203 
îr
 = 
	`bpf_¥ogøm_u≈ö_ö°™˚
(
¥og
, 
buf
, 
i
);

8204 i‡(
îr
)

8205  
îr
;

8208 
îr
 = 
	`rmdú
(
∑th
);

8209 i‡(
îr
)

8210  
	`libbpf_îr
(-
î∫o
);

8213 
	}
}

8215 
	$bpf_m≠__pö
(
bpf_m≠
 *
m≠
, c⁄° *
∑th
)

8217 *
˝
, 
îrmsg
[
STRERR_BUFSIZE
];

8218 
îr
;

8220 i‡(
m≠
 =
NULL
) {

8221 
	`¥_w¨n
("invalid mapÖointer\n");

8222  
	`libbpf_îr
(-
EINVAL
);

8225 i‡(
m≠
->
pö_∑th
) {

8226 i‡(
∑th
 && 
	`°rcmp
’©h, 
m≠
->
pö_∑th
)) {

8227 
	`¥_w¨n
("map '%s'álready hasÖinÖath '%s' different from '%s'\n",

8228 
	`bpf_m≠__«me
(
m≠
), m≠->
pö_∑th
, 
∑th
);

8229  
	`libbpf_îr
(-
EINVAL
);

8230 } i‡(
m≠
->
pö√d
) {

8231 
	`¥_debug
("map '%s'álreadyÖinnedát '%s';ÇotÑe-pinning\n",

8232 
	`bpf_m≠__«me
(
m≠
), m≠->
pö_∑th
);

8236 i‡(!
∑th
) {

8237 
	`¥_w¨n
("missingáÖathÅoÖin map '%s'át\n",

8238 
	`bpf_m≠__«me
(
m≠
));

8239  
	`libbpf_îr
(-
EINVAL
);

8240 } i‡(
m≠
->
pö√d
) {

8241 
	`¥_w¨n
("m≠ '%s'áÃódyÖö√d\n", 
	`bpf_m≠__«me
(
m≠
));

8242  
	`libbpf_îr
(-
EEXIST
);

8245 
m≠
->
pö_∑th
 = 
	`°rdup
(
∑th
);

8246 i‡(!
m≠
->
pö_∑th
) {

8247 
îr
 = -
î∫o
;

8248 
out_îr
;

8252 
îr
 = 
	`make_∑ª¡_dú
(
m≠
->
pö_∑th
);

8253 i‡(
îr
)

8254  
	`libbpf_îr
(
îr
);

8256 
îr
 = 
	`check_∑th
(
m≠
->
pö_∑th
);

8257 i‡(
îr
)

8258  
	`libbpf_îr
(
îr
);

8260 i‡(
	`bpf_obj_pö
(
m≠
->
fd
, m≠->
pö_∑th
)) {

8261 
îr
 = -
î∫o
;

8262 
out_îr
;

8265 
m≠
->
pö√d
 = 
åue
;

8266 
	`¥_debug
("pö√d m≠ '%s'\n", 
m≠
->
pö_∑th
);

8270 
out_îr
:

8271 
˝
 = 
	`libbpf_°ªº‹_r
(-
îr
, 
îrmsg
, (errmsg));

8272 
	`¥_w¨n
("ÁûedÅÿpö m≠: %s\n", 
˝
);

8273  
	`libbpf_îr
(
îr
);

8274 
	}
}

8276 
	$bpf_m≠__u≈ö
(
bpf_m≠
 *
m≠
, c⁄° *
∑th
)

8278 
îr
;

8280 i‡(
m≠
 =
NULL
) {

8281 
	`¥_w¨n
("invalid mapÖointer\n");

8282  
	`libbpf_îr
(-
EINVAL
);

8285 i‡(
m≠
->
pö_∑th
) {

8286 i‡(
∑th
 && 
	`°rcmp
’©h, 
m≠
->
pö_∑th
)) {

8287 
	`¥_w¨n
("map '%s'álready hasÖinÖath '%s' different from '%s'\n",

8288 
	`bpf_m≠__«me
(
m≠
), m≠->
pö_∑th
, 
∑th
);

8289  
	`libbpf_îr
(-
EINVAL
);

8291 
∑th
 = 
m≠
->
pö_∑th
;

8292 } i‡(!
∑th
) {

8293 
	`¥_w¨n
("noÖathÅo unpin map '%s' from\n",

8294 
	`bpf_m≠__«me
(
m≠
));

8295  
	`libbpf_îr
(-
EINVAL
);

8298 
îr
 = 
	`check_∑th
(
∑th
);

8299 i‡(
îr
)

8300  
	`libbpf_îr
(
îr
);

8302 
îr
 = 
	`u∆ök
(
∑th
);

8303 i‡(
îr
 != 0)

8304  
	`libbpf_îr
(-
î∫o
);

8306 
m≠
->
pö√d
 = 
Ál£
;

8307 
	`¥_debug
("u≈ö√d m≠ '%s' from '%s'\n", 
	`bpf_m≠__«me
(
m≠
), 
∑th
);

8310 
	}
}

8312 
	$bpf_m≠__£t_pö_∑th
(
bpf_m≠
 *
m≠
, c⁄° *
∑th
)

8314 *
√w
 = 
NULL
;

8316 i‡(
∑th
) {

8317 
√w
 = 
	`°rdup
(
∑th
);

8318 i‡(!
√w
)

8319  
	`libbpf_îr
(-
î∫o
);

8322 
	`‰ì
(
m≠
->
pö_∑th
);

8323 
m≠
->
pö_∑th
 = 
√w
;

8325 
	}
}

8327 
	$__Æüs
(
bpf_m≠__pö_∑th
)

8328 c⁄° *
	`bpf_m≠__gë_pö_∑th
(c⁄° 
bpf_m≠
 *
m≠
);

8330 c⁄° *
	$bpf_m≠__pö_∑th
(c⁄° 
bpf_m≠
 *
m≠
)

8332  
m≠
->
pö_∑th
;

8333 
	}
}

8335 
boﬁ
 
	$bpf_m≠__is_pö√d
(c⁄° 
bpf_m≠
 *
m≠
)

8337  
m≠
->
pö√d
;

8338 
	}
}

8340 
	$ßnôize_pö_∑th
(*
s
)

8343 *
s
) {

8344 i‡(*
s
 == '.')

8345 *
s
 = '_';

8346 
s
++;

8348 
	}
}

8350 
	$bpf_obje˘__pö_m≠s
(
bpf_obje˘
 *
obj
, c⁄° *
∑th
)

8352 
bpf_m≠
 *
m≠
;

8353 
îr
;

8355 i‡(!
obj
)

8356  
	`libbpf_îr
(-
ENOENT
);

8358 i‡(!
obj
->
lﬂded
) {

8359 
	`¥_w¨n
("objectÇot yetÜoaded;Üoad it first\n");

8360  
	`libbpf_îr
(-
ENOENT
);

8363 
	`bpf_obje˘__f‹_óch_m≠
(
m≠
, 
obj
) {

8364 *
pö_∑th
 = 
NULL
;

8365 
buf
[
PATH_MAX
];

8367 i‡(!
m≠
->
auto¸óã
)

8370 i‡(
∑th
) {

8371 
Àn
;

8373 
Àn
 = 
	`¢¥ötf
(
buf
, 
PATH_MAX
, "%s/%s", 
∑th
,

8374 
	`bpf_m≠__«me
(
m≠
));

8375 i‡(
Àn
 < 0) {

8376 
îr
 = -
EINVAL
;

8377 
îr_u≈ö_m≠s
;

8378 } i‡(
Àn
 >
PATH_MAX
) {

8379 
îr
 = -
ENAMETOOLONG
;

8380 
îr_u≈ö_m≠s
;

8382 
	`ßnôize_pö_∑th
(
buf
);

8383 
pö_∑th
 = 
buf
;

8384 } i‡(!
m≠
->
pö_∑th
) {

8388 
	`¥_w¨n
("m≠Öönög %s\n", 
m≠
->
«me
);

8389 
îr
 = 
	`bpf_m≠__pö
(
m≠
, 
pö_∑th
);

8390 i‡(
îr
)

8391 
îr_u≈ö_m≠s
;

8396 
îr_u≈ö_m≠s
:

8397 (
m≠
 = 
	`bpf_obje˘__¥ev_m≠
(
obj
, map))) {

8398 i‡(!
m≠
->
pö_∑th
)

8401 
	`bpf_m≠__u≈ö
(
m≠
, 
NULL
);

8404  
	`libbpf_îr
(
îr
);

8405 
	}
}

8407 
	$bpf_obje˘__u≈ö_m≠s
(
bpf_obje˘
 *
obj
, c⁄° *
∑th
)

8409 
bpf_m≠
 *
m≠
;

8410 
îr
;

8412 i‡(!
obj
)

8413  
	`libbpf_îr
(-
ENOENT
);

8415 
	`bpf_obje˘__f‹_óch_m≠
(
m≠
, 
obj
) {

8416 *
pö_∑th
 = 
NULL
;

8417 
buf
[
PATH_MAX
];

8419 i‡(
∑th
) {

8420 
Àn
;

8422 
Àn
 = 
	`¢¥ötf
(
buf
, 
PATH_MAX
, "%s/%s", 
∑th
,

8423 
	`bpf_m≠__«me
(
m≠
));

8424 i‡(
Àn
 < 0)

8425  
	`libbpf_îr
(-
EINVAL
);

8426 i‡(
Àn
 >
PATH_MAX
)

8427  
	`libbpf_îr
(-
ENAMETOOLONG
);

8428 
	`ßnôize_pö_∑th
(
buf
);

8429 
pö_∑th
 = 
buf
;

8430 } i‡(!
m≠
->
pö_∑th
) {

8434 
îr
 = 
	`bpf_m≠__u≈ö
(
m≠
, 
pö_∑th
);

8435 i‡(
îr
)

8436  
	`libbpf_îr
(
îr
);

8440 
	}
}

8442 
	$bpf_obje˘__pö_¥ogøms
(
bpf_obje˘
 *
obj
, c⁄° *
∑th
)

8444 
bpf_¥ogøm
 *
¥og
;

8445 
îr
;

8447 i‡(!
obj
)

8448  
	`libbpf_îr
(-
ENOENT
);

8450 i‡(!
obj
->
lﬂded
) {

8451 
	`¥_w¨n
("objectÇot yetÜoaded;Üoad it first\n");

8452  
	`libbpf_îr
(-
ENOENT
);

8455 
	`bpf_obje˘__f‹_óch_¥ogøm
(
¥og
, 
obj
) {

8456 
buf
[
PATH_MAX
];

8457 
Àn
;

8459 
Àn
 = 
	`¢¥ötf
(
buf
, 
PATH_MAX
, "%s/%s", 
∑th
,

8460 
¥og
->
pö_«me
);

8461 i‡(
Àn
 < 0) {

8462 
îr
 = -
EINVAL
;

8463 
îr_u≈ö_¥ogøms
;

8464 } i‡(
Àn
 >
PATH_MAX
) {

8465 
îr
 = -
ENAMETOOLONG
;

8466 
îr_u≈ö_¥ogøms
;

8469 
îr
 = 
	`bpf_¥ogøm__pö
(
¥og
, 
buf
);

8470 i‡(
îr
)

8471 
îr_u≈ö_¥ogøms
;

8476 
îr_u≈ö_¥ogøms
:

8477 (
¥og
 = 
	`bpf_obje˘__¥ev_¥ogøm
(
obj
,Örog))) {

8478 
buf
[
PATH_MAX
];

8479 
Àn
;

8481 
Àn
 = 
	`¢¥ötf
(
buf
, 
PATH_MAX
, "%s/%s", 
∑th
,

8482 
¥og
->
pö_«me
);

8483 i‡(
Àn
 < 0)

8485 i‡(
Àn
 >
PATH_MAX
)

8488 
	`bpf_¥ogøm__u≈ö
(
¥og
, 
buf
);

8491  
	`libbpf_îr
(
îr
);

8492 
	}
}

8494 
	$bpf_obje˘__u≈ö_¥ogøms
(
bpf_obje˘
 *
obj
, c⁄° *
∑th
)

8496 
bpf_¥ogøm
 *
¥og
;

8497 
îr
;

8499 i‡(!
obj
)

8500  
	`libbpf_îr
(-
ENOENT
);

8502 
	`bpf_obje˘__f‹_óch_¥ogøm
(
¥og
, 
obj
) {

8503 
buf
[
PATH_MAX
];

8504 
Àn
;

8506 
Àn
 = 
	`¢¥ötf
(
buf
, 
PATH_MAX
, "%s/%s", 
∑th
,

8507 
¥og
->
pö_«me
);

8508 i‡(
Àn
 < 0)

8509  
	`libbpf_îr
(-
EINVAL
);

8510 i‡(
Àn
 >
PATH_MAX
)

8511  
	`libbpf_îr
(-
ENAMETOOLONG
);

8513 
îr
 = 
	`bpf_¥ogøm__u≈ö
(
¥og
, 
buf
);

8514 i‡(
îr
)

8515  
	`libbpf_îr
(
îr
);

8519 
	}
}

8521 
	$bpf_obje˘__pö
(
bpf_obje˘
 *
obj
, c⁄° *
∑th
)

8523 
îr
;

8525 
îr
 = 
	`bpf_obje˘__pö_m≠s
(
obj
, 
∑th
);

8526 i‡(
îr
)

8527  
	`libbpf_îr
(
îr
);

8529 
îr
 = 
	`bpf_obje˘__pö_¥ogøms
(
obj
, 
∑th
);

8530 i‡(
îr
) {

8531 
	`bpf_obje˘__u≈ö_m≠s
(
obj
, 
∑th
);

8532  
	`libbpf_îr
(
îr
);

8536 
	}
}

8538 
	$bpf_m≠__de°roy
(
bpf_m≠
 *
m≠
)

8540 i‡(
m≠
->
˛ór_¥iv
)

8541 
m≠
->
	`˛ór_¥iv
(m≠, m≠->
¥iv
);

8542 
m≠
->
¥iv
 = 
NULL
;

8543 
m≠
->
˛ór_¥iv
 = 
NULL
;

8545 i‡(
m≠
->
ö√r_m≠
) {

8546 
	`bpf_m≠__de°roy
(
m≠
->
ö√r_m≠
);

8547 
	`z‰ì
(&
m≠
->
ö√r_m≠
);

8550 
	`z‰ì
(&
m≠
->
öô_¶Ÿs
);

8551 
m≠
->
öô_¶Ÿs_sz
 = 0;

8553 i‡(
m≠
->
mm≠ed
) {

8554 
	`munm≠
(
m≠
->
mm≠ed
, 
	`bpf_m≠_mm≠_sz
(map));

8555 
m≠
->
mm≠ed
 = 
NULL
;

8558 i‡(
m≠
->
°_›s
) {

8559 
	`z‰ì
(&
m≠
->
°_›s
->
d©a
);

8560 
	`z‰ì
(&
m≠
->
°_›s
->
¥ogs
);

8561 
	`z‰ì
(&
m≠
->
°_›s
->
kîn_func_off
);

8562 
	`z‰ì
(&
m≠
->
°_›s
);

8565 
	`z‰ì
(&
m≠
->
«me
);

8566 
	`z‰ì
(&
m≠
->
ªÆ_«me
);

8567 
	`z‰ì
(&
m≠
->
pö_∑th
);

8569 i‡(
m≠
->
fd
 >= 0)

8570 
	`z˛o£
(
m≠
->
fd
);

8571 
	}
}

8573 
	$bpf_obje˘__˛o£
(
bpf_obje˘
 *
obj
)

8575 
size_t
 
i
;

8577 i‡(
	`IS_ERR_OR_NULL
(
obj
))

8580 i‡(
obj
->
˛ór_¥iv
)

8581 
obj
->
	`˛ór_¥iv
(obj, obj->
¥iv
);

8583 
	`usdt_m™agî_‰ì
(
obj
->
usdt_m™
);

8584 
obj
->
usdt_m™
 = 
NULL
;

8586 
	`bpf_gí__‰ì
(
obj
->
gí_lﬂdî
);

8587 
	`bpf_obje˘__ñf_föish
(
obj
);

8588 
	`bpf_obje˘_u∆ﬂd
(
obj
);

8589 
	`btf__‰ì
(
obj
->
btf
);

8590 
	`btf_ext__‰ì
(
obj
->
btf_ext
);

8592 
i
 = 0; i < 
obj
->
ƒ_m≠s
; i++)

8593 
	`bpf_m≠__de°roy
(&
obj
->
m≠s
[
i
]);

8595 
	`z‰ì
(&
obj
->
btf_cu°om_∑th
);

8596 
	`z‰ì
(&
obj
->
kc⁄fig
);

8597 
	`z‰ì
(&
obj
->
exã∫s
);

8598 
obj
->
ƒ_exã∫
 = 0;

8600 
	`z‰ì
(&
obj
->
m≠s
);

8601 
obj
->
ƒ_m≠s
 = 0;

8603 i‡(
obj
->
¥ogøms
 && obj->
ƒ_¥ogøms
) {

8604 
i
 = 0; i < 
obj
->
ƒ_¥ogøms
; i++)

8605 
	`bpf_¥ogøm__exô
(&
obj
->
¥ogøms
[
i
]);

8607 
	`z‰ì
(&
obj
->
¥ogøms
);

8609 
	`li°_dñ
(&
obj
->
li°
);

8610 
	`‰ì
(
obj
);

8611 
	}
}

8613 
bpf_obje˘
 *

8614 
	$bpf_obje˘__√xt
(
bpf_obje˘
 *
¥ev
)

8616 
bpf_obje˘
 *
√xt
;

8617 
boﬁ
 
°ri˘
 = (
libbpf_mode
 & 
LIBBPF_STRICT_NO_OBJECT_LIST
);

8619 i‡(
°ri˘
)

8620  
NULL
;

8622 i‡(!
¥ev
)

8623 
√xt
 = 
	`li°_fú°_íåy
(&
bpf_obje˘s_li°
,

8624 
bpf_obje˘
,

8625 
li°
);

8627 
√xt
 = 
	`li°_√xt_íåy
(
¥ev
, 
li°
);

8630 i‡(&
√xt
->
li°
 =&
bpf_obje˘s_li°
)

8631  
NULL
;

8633  
√xt
;

8634 
	}
}

8636 c⁄° *
	$bpf_obje˘__«me
(c⁄° 
bpf_obje˘
 *
obj
)

8638  
obj
 ? obj->
«me
 : 
	`libbpf_îr_±r
(-
EINVAL
);

8639 
	}
}

8641 
	$bpf_obje˘__kvîsi⁄
(c⁄° 
bpf_obje˘
 *
obj
)

8643  
obj
 ? obj->
kîn_vîsi⁄
 : 0;

8644 
	}
}

8646 
btf
 *
	$bpf_obje˘__btf
(c⁄° 
bpf_obje˘
 *
obj
)

8648  
obj
 ? obj->
btf
 : 
NULL
;

8649 
	}
}

8651 
	$bpf_obje˘__btf_fd
(c⁄° 
bpf_obje˘
 *
obj
)

8653  
obj
->
btf
 ? 
	`btf__fd
(obj->btf) : -1;

8654 
	}
}

8656 
	$bpf_obje˘__£t_kvîsi⁄
(
bpf_obje˘
 *
obj
, 
__u32
 
kîn_vîsi⁄
)

8658 i‡(
obj
->
lﬂded
)

8659  
	`libbpf_îr
(-
EINVAL
);

8661 
obj
->
kîn_vîsi⁄
 = kern_version;

8664 
	}
}

8666 
	$bpf_obje˘__£t_¥iv
(
bpf_obje˘
 *
obj
, *
¥iv
,

8667 
bpf_obje˘_˛ór_¥iv_t
 
˛ór_¥iv
)

8669 i‡(
obj
->
¥iv
 && obj->
˛ór_¥iv
)

8670 
obj
->
	`˛ór_¥iv
(obj, obj->
¥iv
);

8672 
obj
->
¥iv
 =Öriv;

8673 
obj
->
˛ór_¥iv
 = clear_priv;

8675 
	}
}

8677 *
	$bpf_obje˘__¥iv
(c⁄° 
bpf_obje˘
 *
obj
)

8679  
obj
 ? obj->
¥iv
 : 
	`libbpf_îr_±r
(-
EINVAL
);

8680 
	}
}

8682 
	$bpf_obje˘__gí_lﬂdî
(
bpf_obje˘
 *
obj
, 
gí_lﬂdî_›ts
 *
›ts
)

8684 
bpf_gí
 *
gí
;

8686 i‡(!
›ts
)

8687  -
EFAULT
;

8688 i‡(!
	`OPTS_VALID
(
›ts
, 
gí_lﬂdî_›ts
))

8689  -
EINVAL
;

8690 
gí
 = 
	`ˇŒoc
((*gen), 1);

8691 i‡(!
gí
)

8692  -
ENOMEM
;

8693 
gí
->
›ts
 = opts;

8694 
obj
->
gí_lﬂdî
 = 
gí
;

8696 
	}
}

8698 
bpf_¥ogøm
 *

8699 
	$__bpf_¥ogøm__ôî
(c⁄° 
bpf_¥ogøm
 *
p
, c⁄° 
bpf_obje˘
 *
obj
,

8700 
boﬁ
 
f‹w¨d
)

8702 
size_t
 
ƒ_¥ogøms
 = 
obj
->nr_programs;

8703 
ssize_t
 
idx
;

8705 i‡(!
ƒ_¥ogøms
)

8706  
NULL
;

8708 i‡(!
p
)

8710  
f‹w¨d
 ? &
obj
->
¥ogøms
[0] :

8711 &
obj
->
¥ogøms
[
ƒ_¥ogøms
 - 1];

8713 i‡(
p
->
obj
 != obj) {

8714 
	`¥_w¨n
("error:Örogram handler doesn't match object\n");

8715  
î∫o
 = 
EINVAL
, 
NULL
;

8718 
idx
 = (
p
 - 
obj
->
¥ogøms
Ë+ (
f‹w¨d
 ? 1 : -1);

8719 i‡(
idx
 >
obj
->
ƒ_¥ogøms
 || idx < 0)

8720  
NULL
;

8721  &
obj
->
¥ogøms
[
idx
];

8722 
	}
}

8724 
bpf_¥ogøm
 *

8725 
	$bpf_¥ogøm__√xt
(
bpf_¥ogøm
 *
¥ev
, c⁄° 
bpf_obje˘
 *
obj
)

8727  
	`bpf_obje˘__√xt_¥ogøm
(
obj
, 
¥ev
);

8728 
	}
}

8730 
bpf_¥ogøm
 *

8731 
	$bpf_obje˘__√xt_¥ogøm
(c⁄° 
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
¥ev
)

8733 
bpf_¥ogøm
 *
¥og
 = 
¥ev
;

8736 
¥og
 = 
	`__bpf_¥ogøm__ôî
’rog, 
obj
, 
åue
);

8737 } 
¥og
 && 
	`¥og_is_sub¥og
(
obj
,Örog));

8739  
¥og
;

8740 
	}
}

8742 
bpf_¥ogøm
 *

8743 
	$bpf_¥ogøm__¥ev
(
bpf_¥ogøm
 *
√xt
, c⁄° 
bpf_obje˘
 *
obj
)

8745  
	`bpf_obje˘__¥ev_¥ogøm
(
obj
, 
√xt
);

8746 
	}
}

8748 
bpf_¥ogøm
 *

8749 
	$bpf_obje˘__¥ev_¥ogøm
(c⁄° 
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
√xt
)

8751 
bpf_¥ogøm
 *
¥og
 = 
√xt
;

8754 
¥og
 = 
	`__bpf_¥ogøm__ôî
’rog, 
obj
, 
Ál£
);

8755 } 
¥og
 && 
	`¥og_is_sub¥og
(
obj
,Örog));

8757  
¥og
;

8758 
	}
}

8760 
	$bpf_¥ogøm__£t_¥iv
(
bpf_¥ogøm
 *
¥og
, *
¥iv
,

8761 
bpf_¥ogøm_˛ór_¥iv_t
 
˛ór_¥iv
)

8763 i‡(
¥og
->
¥iv
 &&Örog->
˛ór_¥iv
)

8764 
¥og
->
	`˛ór_¥iv
’rog,Örog->
¥iv
);

8766 
¥og
->
¥iv
 =Öriv;

8767 
¥og
->
˛ór_¥iv
 = clear_priv;

8769 
	}
}

8771 *
	$bpf_¥ogøm__¥iv
(c⁄° 
bpf_¥ogøm
 *
¥og
)

8773  
¥og
 ?Örog->
¥iv
 : 
	`libbpf_îr_±r
(-
EINVAL
);

8774 
	}
}

8776 
	$bpf_¥ogøm__£t_ifödex
(
bpf_¥ogøm
 *
¥og
, 
__u32
 
ifödex
)

8778 
¥og
->
¥og_ifödex
 = 
ifödex
;

8779 
	}
}

8781 c⁄° *
	$bpf_¥ogøm__«me
(c⁄° 
bpf_¥ogøm
 *
¥og
)

8783  
¥og
->
«me
;

8784 
	}
}

8786 c⁄° *
	$bpf_¥ogøm__£˘i⁄_«me
(c⁄° 
bpf_¥ogøm
 *
¥og
)

8788  
¥og
->
£c_«me
;

8789 
	}
}

8791 c⁄° *
	$bpf_¥ogøm__tôÀ
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
boﬁ
 
√eds_c›y
)

8793 c⁄° *
tôÀ
;

8795 
tôÀ
 = 
¥og
->
£c_«me
;

8796 i‡(
√eds_c›y
) {

8797 
tôÀ
 = 
	`°rdup
(title);

8798 i‡(!
tôÀ
) {

8799 
	`¥_w¨n
("failedÅo strdupÖrogramÅitle\n");

8800  
	`libbpf_îr_±r
(-
ENOMEM
);

8804  
tôÀ
;

8805 
	}
}

8807 
boﬁ
 
	$bpf_¥ogøm__autﬁﬂd
(c⁄° 
bpf_¥ogøm
 *
¥og
)

8809  
¥og
->
autﬁﬂd
;

8810 
	}
}

8812 
	$bpf_¥ogøm__£t_autﬁﬂd
(
bpf_¥ogøm
 *
¥og
, 
boﬁ
 
autﬁﬂd
)

8814 i‡(
¥og
->
obj
->
lﬂded
)

8815  
	`libbpf_îr
(-
EINVAL
);

8817 
¥og
->
autﬁﬂd
 =áutoload;

8819 
	}
}

8821 
bpf_¥ogøm_¡h_fd
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
n
);

8823 
	$bpf_¥ogøm__fd
(c⁄° 
bpf_¥ogøm
 *
¥og
)

8825  
	`bpf_¥ogøm_¡h_fd
(
¥og
, 0);

8826 
	}
}

8828 
size_t
 
	$bpf_¥ogøm__size
(c⁄° 
bpf_¥ogøm
 *
¥og
)

8830  
¥og
->
ö¢s_˙t
 * 
BPF_INSN_SZ
;

8831 
	}
}

8833 c⁄° 
bpf_ö¢
 *
	$bpf_¥ogøm__ö¢s
(c⁄° 
bpf_¥ogøm
 *
¥og
)

8835  
¥og
->
ö¢s
;

8836 
	}
}

8838 
size_t
 
	$bpf_¥ogøm__ö¢_˙t
(c⁄° 
bpf_¥ogøm
 *
¥og
)

8840  
¥og
->
ö¢s_˙t
;

8841 
	}
}

8843 
	$bpf_¥ogøm__£t_ö¢s
(
bpf_¥ogøm
 *
¥og
,

8844 
bpf_ö¢
 *
√w_ö¢s
, 
size_t
 
√w_ö¢_˙t
)

8846 
bpf_ö¢
 *
ö¢s
;

8848 i‡(
¥og
->
obj
->
lﬂded
)

8849  -
EBUSY
;

8851 
ö¢s
 = 
	`libbpf_ªÆloˇºay
(
¥og
->ö¢s, 
√w_ö¢_˙t
, (*insns));

8852 i‡(!
ö¢s
) {

8853 
	`¥_w¨n
("¥og '%s': faûedÅÿªÆlo¯¥og code\n", 
¥og
->
«me
);

8854  -
ENOMEM
;

8856 
	`mem˝y
(
ö¢s
, 
√w_ö¢s
, 
√w_ö¢_˙t
 * (*insns));

8858 
¥og
->
ö¢s
 = insns;

8859 
¥og
->
ö¢s_˙t
 = 
√w_ö¢_˙t
;

8861 
	}
}

8863 
	$bpf_¥ogøm__£t_¥ï
(
bpf_¥ogøm
 *
¥og
, 
ƒ_ö°™˚s
,

8864 
bpf_¥ogøm_¥ï_t
 
¥ï
)

8866 *
ö°™˚s_fds
;

8868 i‡(
ƒ_ö°™˚s
 <0 || !
¥ï
)

8869  
	`libbpf_îr
(-
EINVAL
);

8871 i‡(
¥og
->
ö°™˚s
.
ƒ
 > 0 ||Örog->ö°™˚s.
fds
) {

8872 
	`¥_w¨n
("Can't setÖre-processoráfterÜoading\n");

8873  
	`libbpf_îr
(-
EINVAL
);

8876 
ö°™˚s_fds
 = 
	`mÆloc
((Ë* 
ƒ_ö°™˚s
);

8877 i‡(!
ö°™˚s_fds
) {

8878 
	`¥_w¨n
("alloc memory failed for fds\n");

8879  
	`libbpf_îr
(-
ENOMEM
);

8883 
	`mem£t
(
ö°™˚s_fds
, -1, (Ë* 
ƒ_ö°™˚s
);

8885 
¥og
->
ö°™˚s
.
ƒ
 = 
ƒ_ö°™˚s
;

8886 
¥og
->
ö°™˚s
.
fds
 = 
ö°™˚s_fds
;

8887 
¥og
->
¥ïro˚ss‹
 = 
¥ï
;

8889 
	}
}

8891 
__©åibuã__
((
Æüs
("bpf_program_nth_fd")))

8892 
bpf_¥ogøm__¡h_fd
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
n
);

8894 
	$bpf_¥ogøm_¡h_fd
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
n
)

8896 
fd
;

8898 i‡(!
¥og
)

8899  
	`libbpf_îr
(-
EINVAL
);

8901 i‡(
n
 >
¥og
->
ö°™˚s
.
ƒ
 ||Ç < 0) {

8902 
	`¥_w¨n
("Can't getÅhe %dth fd fromÖrogram %s: only %d instances\n",

8903 
n
, 
¥og
->
«me
,Örog->
ö°™˚s
.
ƒ
);

8904  
	`libbpf_îr
(-
EINVAL
);

8907 
fd
 = 
¥og
->
ö°™˚s
.
fds
[
n
];

8908 i‡(
fd
 < 0) {

8909 
	`¥_w¨n
("%dth instance ofÖrogram '%s' is invalid\n",

8910 
n
, 
¥og
->
«me
);

8911  
	`libbpf_îr
(-
ENOENT
);

8914  
fd
;

8915 
	}
}

8917 
	$__Æüs
(
bpf_¥ogøm__ty≥
)

8918 
bpf_¥og_ty≥
 
	`bpf_¥ogøm__gë_ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
);

8920 
bpf_¥og_ty≥
 
	$bpf_¥ogøm__ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
)

8922  
¥og
->
ty≥
;

8923 
	}
}

8925 
	$bpf_¥ogøm__£t_ty≥
(
bpf_¥ogøm
 *
¥og
, 
bpf_¥og_ty≥
 
ty≥
)

8927 i‡(
¥og
->
obj
->
lﬂded
)

8928  
	`libbpf_îr
(-
EBUSY
);

8930 
¥og
->
ty≥
 =Åype;

8932 
	}
}

8934 
boﬁ
 
	$bpf_¥ogøm__is_ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
,

8935 
bpf_¥og_ty≥
 
ty≥
)

8937  
¥og
 ? (¥og->
ty≥
 =ty≥Ë: 
Ál£
;

8938 
	}
}

8940 
	#BPF_PROG_TYPE_FNS
(
NAME
, 
TYPE
) \

8941 
bpf_¥ogøm__£t_
##
	`NAME
(
bpf_¥ogøm
 *
¥og
) \

8943 i‡(!
¥og
) \

8944  
	`libbpf_îr
(-
EINVAL
); \

8945  
	`bpf_¥ogøm__£t_ty≥
(
¥og
, 
TYPE
); \

8948 
boﬁ
 
bpf_¥ogøm__is_
##
	`NAME
(c⁄° 
bpf_¥ogøm
 *
¥og
) \

8950  
	`bpf_¥ogøm__is_ty≥
(
¥og
, 
TYPE
); \

8952 

	)

8953 
BPF_PROG_TYPE_FNS
(
sockë_fûãr
, 
BPF_PROG_TYPE_SOCKET_FILTER
);

8954 
BPF_PROG_TYPE_FNS
(
lsm
, 
BPF_PROG_TYPE_LSM
);

8955 
BPF_PROG_TYPE_FNS
(
k¥obe
, 
BPF_PROG_TYPE_KPROBE
);

8956 
BPF_PROG_TYPE_FNS
(
sched_˛s
, 
BPF_PROG_TYPE_SCHED_CLS
);

8957 
BPF_PROG_TYPE_FNS
(
sched_a˘
, 
BPF_PROG_TYPE_SCHED_ACT
);

8958 
BPF_PROG_TYPE_FNS
(
åa˚poöt
, 
BPF_PROG_TYPE_TRACEPOINT
);

8959 
BPF_PROG_TYPE_FNS
(
øw_åa˚poöt
, 
BPF_PROG_TYPE_RAW_TRACEPOINT
);

8960 
BPF_PROG_TYPE_FNS
(
xdp
, 
BPF_PROG_TYPE_XDP
);

8961 
BPF_PROG_TYPE_FNS
(
≥rf_evít
, 
BPF_PROG_TYPE_PERF_EVENT
);

8962 
BPF_PROG_TYPE_FNS
(
åacög
, 
BPF_PROG_TYPE_TRACING
);

8963 
BPF_PROG_TYPE_FNS
(
°ru˘_›s
, 
BPF_PROG_TYPE_STRUCT_OPS
);

8964 
BPF_PROG_TYPE_FNS
(
exãnsi⁄
, 
BPF_PROG_TYPE_EXT
);

8965 
BPF_PROG_TYPE_FNS
(
sk_lookup
, 
BPF_PROG_TYPE_SK_LOOKUP
);

8967 
	$__Æüs
(
bpf_¥ogøm__ex≥˘ed_©èch_ty≥
)

8968 
bpf_©èch_ty≥
 
	`bpf_¥ogøm__gë_ex≥˘ed_©èch_ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
);

8970 
bpf_©èch_ty≥
 
	$bpf_¥ogøm__ex≥˘ed_©èch_ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
)

8972  
¥og
->
ex≥˘ed_©èch_ty≥
;

8973 
	}
}

8975 
	$bpf_¥ogøm__£t_ex≥˘ed_©èch_ty≥
(
bpf_¥ogøm
 *
¥og
,

8976 
bpf_©èch_ty≥
 
ty≥
)

8978 i‡(
¥og
->
obj
->
lﬂded
)

8979  
	`libbpf_îr
(-
EBUSY
);

8981 
¥og
->
ex≥˘ed_©èch_ty≥
 = 
ty≥
;

8983 
	}
}

8985 
__u32
 
	$bpf_¥ogøm__Êags
(c⁄° 
bpf_¥ogøm
 *
¥og
)

8987  
¥og
->
¥og_Êags
;

8988 
	}
}

8990 
	$bpf_¥ogøm__£t_Êags
(
bpf_¥ogøm
 *
¥og
, 
__u32
 
Êags
)

8992 i‡(
¥og
->
obj
->
lﬂded
)

8993  
	`libbpf_îr
(-
EBUSY
);

8995 
¥og
->
¥og_Êags
 = 
Êags
;

8997 
	}
}

8999 
__u32
 
	$bpf_¥ogøm__log_Àvñ
(c⁄° 
bpf_¥ogøm
 *
¥og
)

9001  
¥og
->
log_Àvñ
;

9002 
	}
}

9004 
	$bpf_¥ogøm__£t_log_Àvñ
(
bpf_¥ogøm
 *
¥og
, 
__u32
 
log_Àvñ
)

9006 i‡(
¥og
->
obj
->
lﬂded
)

9007  
	`libbpf_îr
(-
EBUSY
);

9009 
¥og
->
log_Àvñ
 =Üog_level;

9011 
	}
}

9013 c⁄° *
	$bpf_¥ogøm__log_buf
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
size_t
 *
log_size
)

9015 *
log_size
 = 
¥og
->log_size;

9016  
¥og
->
log_buf
;

9017 
	}
}

9019 
	$bpf_¥ogøm__£t_log_buf
(
bpf_¥ogøm
 *
¥og
, *
log_buf
, 
size_t
 
log_size
)

9021 i‡(
log_size
 && !
log_buf
)

9022  -
EINVAL
;

9023 i‡(
¥og
->
log_size
 > 
UINT_MAX
)

9024  -
EINVAL
;

9025 i‡(
¥og
->
obj
->
lﬂded
)

9026  -
EBUSY
;

9028 
¥og
->
log_buf
 =Üog_buf;

9029 
¥og
->
log_size
 =Üog_size;

9031 
	}
}

9033 
	#SEC_DEF
(
£c_pfx
, 
±y≥
, 
©y≥
, 
Êags
, ...) { \

9034 .
£c
 = (*)
£c_pfx
, \

9035 .
¥og_ty≥
 = 
BPF_PROG_TYPE_
##
±y≥
, \

9036 .
ex≥˘ed_©èch_ty≥
 = 
©y≥
, \

9037 .
cookõ
 = ()(
Êags
), \

9038 .
¥og_¥ï¨e_lﬂd_‚
 = 
libbpf_¥ï¨e_¥og_lﬂd
, \

9039 
__VA_ARGS__
 \

9040 }

	)

9042 
©èch_k¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
);

9043 
©èch_u¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
);

9044 
©èch_usdt
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
);

9045 
©èch_ç
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
);

9046 
©èch_øw_ç
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
);

9047 
©èch_åa˚
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
);

9048 
©èch_k¥obe_mu…i
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
);

9049 
©èch_lsm
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
);

9050 
©èch_ôî
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
);

9052 c⁄° 
bpf_£c_def
 
	g£˘i⁄_defs
[] = {

9053 
SEC_DEF
("sockë", 
SOCKET_FILTER
, 0, 
SEC_NONE
 | 
SEC_SLOPPY_PFX
),

9054 
SEC_DEF
("sk_ªu£p‹t/migøã", 
SK_REUSEPORT
, 
BPF_SK_REUSEPORT_SELECT_OR_MIGRATE
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9055 
SEC_DEF
("sk_ªu£p‹t", 
SK_REUSEPORT
, 
BPF_SK_REUSEPORT_SELECT
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9056 
SEC_DEF
("k¥obe+", 
KPROBE
, 0, 
SEC_NONE
, 
©èch_k¥obe
),

9057 
SEC_DEF
("u¥obe+", 
KPROBE
, 0, 
SEC_NONE
, 
©èch_u¥obe
),

9058 
SEC_DEF
("kªçrobe+", 
KPROBE
, 0, 
SEC_NONE
, 
©èch_k¥obe
),

9059 
SEC_DEF
("uªçrobe+", 
KPROBE
, 0, 
SEC_NONE
, 
©èch_u¥obe
),

9060 
SEC_DEF
("k¥obe.mu…i+", 
KPROBE
, 
BPF_TRACE_KPROBE_MULTI
, 
SEC_NONE
, 
©èch_k¥obe_mu…i
),

9061 
SEC_DEF
("kªçrobe.mu…i+", 
KPROBE
, 
BPF_TRACE_KPROBE_MULTI
, 
SEC_NONE
, 
©èch_k¥obe_mu…i
),

9062 
SEC_DEF
("usdt+", 
KPROBE
, 0, 
SEC_NONE
, 
©èch_usdt
),

9063 
SEC_DEF
("tc", 
SCHED_CLS
, 0, 
SEC_NONE
),

9064 
SEC_DEF
("˛assifõr", 
SCHED_CLS
, 0, 
SEC_NONE
 | 
SEC_SLOPPY_PFX
 | 
SEC_DEPRECATED
),

9065 
SEC_DEF
("a˘i⁄", 
SCHED_ACT
, 0, 
SEC_NONE
 | 
SEC_SLOPPY_PFX
),

9066 
SEC_DEF
("åa˚poöt+", 
TRACEPOINT
, 0, 
SEC_NONE
, 
©èch_ç
),

9067 
SEC_DEF
("ç+", 
TRACEPOINT
, 0, 
SEC_NONE
, 
©èch_ç
),

9068 
SEC_DEF
("øw_åa˚poöt+", 
RAW_TRACEPOINT
, 0, 
SEC_NONE
, 
©èch_øw_ç
),

9069 
SEC_DEF
("øw_ç+", 
RAW_TRACEPOINT
, 0, 
SEC_NONE
, 
©èch_øw_ç
),

9070 
SEC_DEF
("øw_åa˚poöt.w+", 
RAW_TRACEPOINT_WRITABLE
, 0, 
SEC_NONE
, 
©èch_øw_ç
),

9071 
SEC_DEF
("øw_ç.w+", 
RAW_TRACEPOINT_WRITABLE
, 0, 
SEC_NONE
, 
©èch_øw_ç
),

9072 
SEC_DEF
("ç_btf+", 
TRACING
, 
BPF_TRACE_RAW_TP
, 
SEC_ATTACH_BTF
, 
©èch_åa˚
),

9073 
SEC_DEF
("„¡ry+", 
TRACING
, 
BPF_TRACE_FENTRY
, 
SEC_ATTACH_BTF
, 
©èch_åa˚
),

9074 
SEC_DEF
("fmod_ªt+", 
TRACING
, 
BPF_MODIFY_RETURN
, 
SEC_ATTACH_BTF
, 
©èch_åa˚
),

9075 
SEC_DEF
("„xô+", 
TRACING
, 
BPF_TRACE_FEXIT
, 
SEC_ATTACH_BTF
, 
©èch_åa˚
),

9076 
SEC_DEF
("„¡ry.s+", 
TRACING
, 
BPF_TRACE_FENTRY
, 
SEC_ATTACH_BTF
 | 
SEC_SLEEPABLE
, 
©èch_åa˚
),

9077 
SEC_DEF
("fmod_ªt.s+", 
TRACING
, 
BPF_MODIFY_RETURN
, 
SEC_ATTACH_BTF
 | 
SEC_SLEEPABLE
, 
©èch_åa˚
),

9078 
SEC_DEF
("„xô.s+", 
TRACING
, 
BPF_TRACE_FEXIT
, 
SEC_ATTACH_BTF
 | 
SEC_SLEEPABLE
, 
©èch_åa˚
),

9079 
SEC_DEF
("‰ïœ˚+", 
EXT
, 0, 
SEC_ATTACH_BTF
, 
©èch_åa˚
),

9080 
SEC_DEF
("lsm+", 
LSM
, 
BPF_LSM_MAC
, 
SEC_ATTACH_BTF
, 
©èch_lsm
),

9081 
SEC_DEF
("lsm.s+", 
LSM
, 
BPF_LSM_MAC
, 
SEC_ATTACH_BTF
 | 
SEC_SLEEPABLE
, 
©èch_lsm
),

9082 
SEC_DEF
("ôî+", 
TRACING
, 
BPF_TRACE_ITER
, 
SEC_ATTACH_BTF
, 
©èch_ôî
),

9083 
SEC_DEF
("ôî.s+", 
TRACING
, 
BPF_TRACE_ITER
, 
SEC_ATTACH_BTF
 | 
SEC_SLEEPABLE
, 
©èch_ôî
),

9084 
SEC_DEF
("sysˇŒ", 
SYSCALL
, 0, 
SEC_SLEEPABLE
),

9085 
SEC_DEF
("xdp.‰ags/devm≠", 
XDP
, 
BPF_XDP_DEVMAP
, 
SEC_XDP_FRAGS
),

9086 
SEC_DEF
("xdp/devm≠", 
XDP
, 
BPF_XDP_DEVMAP
, 
SEC_ATTACHABLE
),

9087 
SEC_DEF
("xdp_devm≠/", 
XDP
, 
BPF_XDP_DEVMAP
, 
SEC_ATTACHABLE
 | 
SEC_DEPRECATED
),

9088 
SEC_DEF
("xdp.‰ags/˝um≠", 
XDP
, 
BPF_XDP_CPUMAP
, 
SEC_XDP_FRAGS
),

9089 
SEC_DEF
("xdp/˝um≠", 
XDP
, 
BPF_XDP_CPUMAP
, 
SEC_ATTACHABLE
),

9090 
SEC_DEF
("xdp_˝um≠/", 
XDP
, 
BPF_XDP_CPUMAP
, 
SEC_ATTACHABLE
 | 
SEC_DEPRECATED
),

9091 
SEC_DEF
("xdp.‰ags", 
XDP
, 
BPF_XDP
, 
SEC_XDP_FRAGS
),

9092 
SEC_DEF
("xdp", 
XDP
, 
BPF_XDP
, 
SEC_ATTACHABLE_OPT
 | 
SEC_SLOPPY_PFX
),

9093 
SEC_DEF
("≥rf_evít", 
PERF_EVENT
, 0, 
SEC_NONE
 | 
SEC_SLOPPY_PFX
),

9094 
SEC_DEF
("lwt_ö", 
LWT_IN
, 0, 
SEC_NONE
 | 
SEC_SLOPPY_PFX
),

9095 
SEC_DEF
("lwt_out", 
LWT_OUT
, 0, 
SEC_NONE
 | 
SEC_SLOPPY_PFX
),

9096 
SEC_DEF
("lwt_xmô", 
LWT_XMIT
, 0, 
SEC_NONE
 | 
SEC_SLOPPY_PFX
),

9097 
SEC_DEF
("lwt_£g6loˇl", 
LWT_SEG6LOCAL
, 0, 
SEC_NONE
 | 
SEC_SLOPPY_PFX
),

9098 
SEC_DEF
("cgroup_skb/ögªss", 
CGROUP_SKB
, 
BPF_CGROUP_INET_INGRESS
, 
SEC_ATTACHABLE_OPT
 | 
SEC_SLOPPY_PFX
),

9099 
SEC_DEF
("cgroup_skb/egªss", 
CGROUP_SKB
, 
BPF_CGROUP_INET_EGRESS
, 
SEC_ATTACHABLE_OPT
 | 
SEC_SLOPPY_PFX
),

9100 
SEC_DEF
("cgroup/skb", 
CGROUP_SKB
, 0, 
SEC_NONE
 | 
SEC_SLOPPY_PFX
),

9101 
SEC_DEF
("cgroup/sock_¸óã", 
CGROUP_SOCK
, 
BPF_CGROUP_INET_SOCK_CREATE
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9102 
SEC_DEF
("cgroup/sock_ªÀa£", 
CGROUP_SOCK
, 
BPF_CGROUP_INET_SOCK_RELEASE
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9103 
SEC_DEF
("cgroup/sock", 
CGROUP_SOCK
, 
BPF_CGROUP_INET_SOCK_CREATE
, 
SEC_ATTACHABLE_OPT
 | 
SEC_SLOPPY_PFX
),

9104 
SEC_DEF
("cgroup/po°_böd4", 
CGROUP_SOCK
, 
BPF_CGROUP_INET4_POST_BIND
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9105 
SEC_DEF
("cgroup/po°_böd6", 
CGROUP_SOCK
, 
BPF_CGROUP_INET6_POST_BIND
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9106 
SEC_DEF
("cgroup/dev", 
CGROUP_DEVICE
, 
BPF_CGROUP_DEVICE
, 
SEC_ATTACHABLE_OPT
 | 
SEC_SLOPPY_PFX
),

9107 
SEC_DEF
("sock›s", 
SOCK_OPS
, 
BPF_CGROUP_SOCK_OPS
, 
SEC_ATTACHABLE_OPT
 | 
SEC_SLOPPY_PFX
),

9108 
SEC_DEF
("sk_skb/°ªam_∑r£r", 
SK_SKB
, 
BPF_SK_SKB_STREAM_PARSER
, 
SEC_ATTACHABLE_OPT
 | 
SEC_SLOPPY_PFX
),

9109 
SEC_DEF
("sk_skb/°ªam_vîdi˘",
SK_SKB
, 
BPF_SK_SKB_STREAM_VERDICT
, 
SEC_ATTACHABLE_OPT
 | 
SEC_SLOPPY_PFX
),

9110 
SEC_DEF
("sk_skb", 
SK_SKB
, 0, 
SEC_NONE
 | 
SEC_SLOPPY_PFX
),

9111 
SEC_DEF
("sk_msg", 
SK_MSG
, 
BPF_SK_MSG_VERDICT
, 
SEC_ATTACHABLE_OPT
 | 
SEC_SLOPPY_PFX
),

9112 
SEC_DEF
("lúc_mode2", 
LIRC_MODE2
, 
BPF_LIRC_MODE2
, 
SEC_ATTACHABLE_OPT
 | 
SEC_SLOPPY_PFX
),

9113 
SEC_DEF
("Êow_dis£˘‹", 
FLOW_DISSECTOR
, 
BPF_FLOW_DISSECTOR
, 
SEC_ATTACHABLE_OPT
 | 
SEC_SLOPPY_PFX
),

9114 
SEC_DEF
("cgroup/böd4", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_INET4_BIND
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9115 
SEC_DEF
("cgroup/böd6", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_INET6_BIND
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9116 
SEC_DEF
("cgroup/c⁄√˘4", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_INET4_CONNECT
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9117 
SEC_DEF
("cgroup/c⁄√˘6", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_INET6_CONNECT
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9118 
SEC_DEF
("cgroup/£ndmsg4", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_UDP4_SENDMSG
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9119 
SEC_DEF
("cgroup/£ndmsg6", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_UDP6_SENDMSG
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9120 
SEC_DEF
("cgroup/ªcvmsg4", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_UDP4_RECVMSG
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9121 
SEC_DEF
("cgroup/ªcvmsg6", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_UDP6_RECVMSG
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9122 
SEC_DEF
("cgroup/gë≥î«me4", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_INET4_GETPEERNAME
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9123 
SEC_DEF
("cgroup/gë≥î«me6", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_INET6_GETPEERNAME
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9124 
SEC_DEF
("cgroup/gësock«me4", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_INET4_GETSOCKNAME
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9125 
SEC_DEF
("cgroup/gësock«me6", 
CGROUP_SOCK_ADDR
, 
BPF_CGROUP_INET6_GETSOCKNAME
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9126 
SEC_DEF
("cgroup/sys˘l", 
CGROUP_SYSCTL
, 
BPF_CGROUP_SYSCTL
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9127 
SEC_DEF
("cgroup/gësock›t", 
CGROUP_SOCKOPT
, 
BPF_CGROUP_GETSOCKOPT
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9128 
SEC_DEF
("cgroup/£tsock›t", 
CGROUP_SOCKOPT
, 
BPF_CGROUP_SETSOCKOPT
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9129 
SEC_DEF
("°ru˘_›s+", 
STRUCT_OPS
, 0, 
SEC_NONE
),

9130 
SEC_DEF
("sk_lookup", 
SK_LOOKUP
, 
BPF_SK_LOOKUP
, 
SEC_ATTACHABLE
 | 
SEC_SLOPPY_PFX
),

9133 
size_t
 
	gcu°om_£c_def_˙t
;

9134 
bpf_£c_def
 *
	gcu°om_£c_defs
;

9135 
bpf_£c_def
 
	gcu°om_ÁŒback_def
;

9136 
boﬁ
 
	ghas_cu°om_ÁŒback_def
;

9138 
	gœ°_cu°om_£c_def_h™dÀr_id
;

9140 
	$libbpf_ªgi°î_¥og_h™dÀr
(c⁄° *
£c
,

9141 
bpf_¥og_ty≥
 
¥og_ty≥
,

9142 
bpf_©èch_ty≥
 
exp_©èch_ty≥
,

9143 c⁄° 
libbpf_¥og_h™dÀr_›ts
 *
›ts
)

9145 
bpf_£c_def
 *
£c_def
;

9147 i‡(!
	`OPTS_VALID
(
›ts
, 
libbpf_¥og_h™dÀr_›ts
))

9148  
	`libbpf_îr
(-
EINVAL
);

9150 i‡(
œ°_cu°om_£c_def_h™dÀr_id
 =
INT_MAX
)

9151  
	`libbpf_îr
(-
E2BIG
);

9153 i‡(
£c
) {

9154 
£c_def
 = 
	`libbpf_ªÆloˇºay
(
cu°om_£c_defs
, 
cu°om_£c_def_˙t
 + 1,

9155 (*
£c_def
));

9156 i‡(!
£c_def
)

9157  
	`libbpf_îr
(-
ENOMEM
);

9159 
cu°om_£c_defs
 = 
£c_def
;

9160 
£c_def
 = &
cu°om_£c_defs
[
cu°om_£c_def_˙t
];

9162 i‡(
has_cu°om_ÁŒback_def
)

9163  
	`libbpf_îr
(-
EBUSY
);

9165 
£c_def
 = &
cu°om_ÁŒback_def
;

9168 
£c_def
->
£c
 = se¯? 
	`°rdup
(£cË: 
NULL
;

9169 i‡(
£c
 && !
£c_def
->sec)

9170  
	`libbpf_îr
(-
ENOMEM
);

9172 
£c_def
->
¥og_ty≥
 =Örog_type;

9173 
£c_def
->
ex≥˘ed_©èch_ty≥
 = 
exp_©èch_ty≥
;

9174 
£c_def
->
cookõ
 = 
	`OPTS_GET
(
›ts
, cookie, 0);

9176 
£c_def
->
¥og_£tup_‚
 = 
	`OPTS_GET
(
›ts
,Örog_£tup_‚, 
NULL
);

9177 
£c_def
->
¥og_¥ï¨e_lﬂd_‚
 = 
	`OPTS_GET
(
›ts
,Örog_¥ï¨e_lﬂd_‚, 
NULL
);

9178 
£c_def
->
¥og_©èch_‚
 = 
	`OPTS_GET
(
›ts
,Örog_©èch_‚, 
NULL
);

9180 
£c_def
->
h™dÀr_id
 = ++
œ°_cu°om_£c_def_h™dÀr_id
;

9182 i‡(
£c
)

9183 
cu°om_£c_def_˙t
++;

9185 
has_cu°om_ÁŒback_def
 = 
åue
;

9187  
£c_def
->
h™dÀr_id
;

9188 
	}
}

9190 
	$libbpf_uƒegi°î_¥og_h™dÀr
(
h™dÀr_id
)

9192 
bpf_£c_def
 *
£c_defs
;

9193 
i
;

9195 i‡(
h™dÀr_id
 <= 0)

9196  
	`libbpf_îr
(-
EINVAL
);

9198 i‡(
has_cu°om_ÁŒback_def
 && 
cu°om_ÁŒback_def
.
h™dÀr_id
 == handler_id) {

9199 
	`mem£t
(&
cu°om_ÁŒback_def
, 0, (custom_fallback_def));

9200 
has_cu°om_ÁŒback_def
 = 
Ál£
;

9204 
i
 = 0; i < 
cu°om_£c_def_˙t
; i++) {

9205 i‡(
cu°om_£c_defs
[
i
].
h™dÀr_id
 == handler_id)

9209 i‡(
i
 =
cu°om_£c_def_˙t
)

9210  
	`libbpf_îr
(-
ENOENT
);

9212 
	`‰ì
(
cu°om_£c_defs
[
i
].
£c
);

9213 
i
 = i + 1; i < 
cu°om_£c_def_˙t
; i++)

9214 
cu°om_£c_defs
[
i
 - 1] = custom_sec_defs[i];

9215 
cu°om_£c_def_˙t
--;

9218 
£c_defs
 = 
	`libbpf_ªÆloˇºay
(
cu°om_£c_defs
, 
cu°om_£c_def_˙t
, (*sec_defs));

9219 i‡(
£c_defs
)

9220 
cu°om_£c_defs
 = 
£c_defs
;

9223 
	}
}

9225 
boﬁ
 
	$£c_def_m©ches
(c⁄° 
bpf_£c_def
 *
£c_def
, c⁄° *
£c_«me
,

9226 
boﬁ
 
Ælow_¶›py
)

9228 
size_t
 
Àn
 = 
	`°æí
(
£c_def
->
£c
);

9231 i‡(
£c_def
->
£c
[
Àn
 - 1] == '/') {

9232 i‡(
	`°r_has_pfx
(
£c_«me
, 
£c_def
->
£c
))

9233  
åue
;

9234  
Ál£
;

9240 i‡(
£c_def
->
£c
[
Àn
 - 1] == '+') {

9241 
Àn
--;

9243 i‡(
	`°∫cmp
(
£c_«me
, 
£c_def
->
£c
, 
Àn
) != 0)

9244  
Ál£
;

9246 i‡(
£c_«me
[
Àn
] == '\0' || sec_name[len] == '/')

9247  
åue
;

9248  
Ál£
;

9256 i‡(
Ælow_¶›py
 && 
	`°r_has_pfx
(
£c_«me
, 
£c_def
->
£c
))

9257  
åue
;

9262  
	`°rcmp
(
£c_«me
, 
£c_def
->
£c
) == 0;

9263 
	}
}

9265 c⁄° 
bpf_£c_def
 *
	$föd_£c_def
(c⁄° *
£c_«me
)

9267 c⁄° 
bpf_£c_def
 *
£c_def
;

9268 
i
, 
n
;

9269 
boﬁ
 
°ri˘
 = 
libbpf_mode
 & 
LIBBPF_STRICT_SEC_NAME
, 
Ælow_¶›py
;

9271 
n
 = 
cu°om_£c_def_˙t
;

9272 
i
 = 0; i < 
n
; i++) {

9273 
£c_def
 = &
cu°om_£c_defs
[
i
];

9274 i‡(
	`£c_def_m©ches
(
£c_def
, 
£c_«me
, 
Ál£
))

9275  
£c_def
;

9278 
n
 = 
	`ARRAY_SIZE
(
£˘i⁄_defs
);

9279 
i
 = 0; i < 
n
; i++) {

9280 
£c_def
 = &
£˘i⁄_defs
[
i
];

9281 
Ælow_¶›py
 = (
£c_def
->
cookõ
 & 
SEC_SLOPPY_PFX
Ë&& !
°ri˘
;

9282 i‡(
	`£c_def_m©ches
(
£c_def
, 
£c_«me
, 
Ælow_¶›py
))

9283  
£c_def
;

9286 i‡(
has_cu°om_ÁŒback_def
)

9287  &
cu°om_ÁŒback_def
;

9289  
NULL
;

9290 
	}
}

9292 
	#MAX_TYPE_NAME_SIZE
 32

	)

9294 *
	$libbpf_gë_ty≥_«mes
(
boﬁ
 
©èch_ty≥
)

9296 
i
, 
Àn
 = 
	`ARRAY_SIZE
(
£˘i⁄_defs
Ë* 
MAX_TYPE_NAME_SIZE
;

9297 *
buf
;

9299 
buf
 = 
	`mÆloc
(
Àn
);

9300 i‡(!
buf
)

9301  
NULL
;

9303 
buf
[0] = '\0';

9305 
i
 = 0; i < 
	`ARRAY_SIZE
(
£˘i⁄_defs
); i++) {

9306 c⁄° 
bpf_£c_def
 *
£c_def
 = &
£˘i⁄_defs
[
i
];

9308 i‡(
©èch_ty≥
) {

9309 i‡(
£c_def
->
¥og_¥ï¨e_lﬂd_‚
 !
libbpf_¥ï¨e_¥og_lﬂd
)

9312 i‡(!(
£c_def
->
cookõ
 & 
SEC_ATTACHABLE
))

9316 i‡(
	`°æí
(
buf
Ë+ såÀn(
£˘i⁄_defs
[
i
].
£c
Ë+ 2 > 
Àn
) {

9317 
	`‰ì
(
buf
);

9318  
NULL
;

9320 
	`°rˇt
(
buf
, " ");

9321 
	`°rˇt
(
buf
, 
£˘i⁄_defs
[
i
].
£c
);

9324  
buf
;

9325 
	}
}

9327 
	$libbpf_¥og_ty≥_by_«me
(c⁄° *
«me
, 
bpf_¥og_ty≥
 *
¥og_ty≥
,

9328 
bpf_©èch_ty≥
 *
ex≥˘ed_©èch_ty≥
)

9330 c⁄° 
bpf_£c_def
 *
£c_def
;

9331 *
ty≥_«mes
;

9333 i‡(!
«me
)

9334  
	`libbpf_îr
(-
EINVAL
);

9336 
£c_def
 = 
	`föd_£c_def
(
«me
);

9337 i‡(
£c_def
) {

9338 *
¥og_ty≥
 = 
£c_def
->prog_type;

9339 *
ex≥˘ed_©èch_ty≥
 = 
£c_def
->expected_attach_type;

9343 
	`¥_debug
("ÁûedÅÿgues†¥ogømÅy≥ from ELF se˘i⁄ '%s'\n", 
«me
);

9344 
ty≥_«mes
 = 
	`libbpf_gë_ty≥_«mes
(
Ál£
);

9345 i‡(
ty≥_«mes
 !
NULL
) {

9346 
	`¥_debug
("suµ‹ãd se˘i⁄—y≥Ë«me†¨e:%s\n", 
ty≥_«mes
);

9347 
	`‰ì
(
ty≥_«mes
);

9350  
	`libbpf_îr
(-
ESRCH
);

9351 
	}
}

9353 
bpf_m≠
 *
	$föd_°ru˘_›s_m≠_by_off£t
(
bpf_obje˘
 *
obj
,

9354 
size_t
 
off£t
)

9356 
bpf_m≠
 *
m≠
;

9357 
size_t
 
i
;

9359 
i
 = 0; i < 
obj
->
ƒ_m≠s
; i++) {

9360 
m≠
 = &
obj
->
m≠s
[
i
];

9361 i‡(!
	`bpf_m≠__is_°ru˘_›s
(
m≠
))

9363 i‡(
m≠
->
£c_off£t
 <
off£t
 &&

9364 
off£t
 - 
m≠
->
£c_off£t
 < m≠->
def
.
vÆue_size
)

9365  
m≠
;

9368  
NULL
;

9369 
	}
}

9372 
	$bpf_obje˘__cﬁÀ˘_°_›s_ªlos
(
bpf_obje˘
 *
obj
,

9373 
Elf64_Shdr
 *
shdr
, 
Elf_D©a
 *
d©a
)

9375 c⁄° 
btf_membî
 *
membî
;

9376 
bpf_°ru˘_›s
 *
°_›s
;

9377 
bpf_¥ogøm
 *
¥og
;

9378 
shdr_idx
;

9379 c⁄° 
btf
 *btf;

9380 
bpf_m≠
 *
m≠
;

9381 
moff
, 
ö¢_idx
;

9382 c⁄° *
«me
;

9383 
__u32
 
membî_idx
;

9384 
Elf64_Sym
 *
sym
;

9385 
Elf64_Rñ
 *
ªl
;

9386 
i
, 
ƒñs
;

9388 
btf
 = 
obj
->btf;

9389 
ƒñs
 = 
shdr
->
sh_size
 / shdr->
sh_ítsize
;

9390 
i
 = 0; i < 
ƒñs
; i++) {

9391 
ªl
 = 
	`ñf_ªl_by_idx
(
d©a
, 
i
);

9392 i‡(!
ªl
) {

9393 
	`¥_w¨n
("°ru˘_›†ªloc: faûedÅÿgë %dÑñoc\n", 
i
);

9394  -
LIBBPF_ERRNO__FORMAT
;

9397 
sym
 = 
	`ñf_sym_by_idx
(
obj
, 
	`ELF64_R_SYM
(
ªl
->
r_öfo
));

9398 i‡(!
sym
) {

9399 
	`¥_w¨n
("struct_opsÑeloc: symbol %zxÇot found\n",

9400 (
size_t
)
	`ELF64_R_SYM
(
ªl
->
r_öfo
));

9401  -
LIBBPF_ERRNO__FORMAT
;

9404 
«me
 = 
	`ñf_sym_°r
(
obj
, 
sym
->
°_«me
) ?: "<?>";

9405 
m≠
 = 
	`föd_°ru˘_›s_m≠_by_off£t
(
obj
, 
ªl
->
r_off£t
);

9406 i‡(!
m≠
) {

9407 
	`¥_w¨n
("struct_opsÑeloc: cannot find mapátÑel->r_offset %zu\n",

9408 (
size_t
)
ªl
->
r_off£t
);

9409  -
EINVAL
;

9412 
moff
 = 
ªl
->
r_off£t
 - 
m≠
->
£c_off£t
;

9413 
shdr_idx
 = 
sym
->
°_shndx
;

9414 
°_›s
 = 
m≠
->st_ops;

9415 
	`¥_debug
("struct_opsÑeloc %s: for %lld value %lld shdr_idx %uÑel->r_offset %zu map->sec_offset %zuÇame %d (\'%s\')\n",

9416 
m≠
->
«me
,

9417 ()(
ªl
->
r_öfo
 >> 32),

9418 ()
sym
->
°_vÆue
,

9419 
shdr_idx
, (
size_t
)
ªl
->
r_off£t
,

9420 
m≠
->
£c_off£t
, 
sym
->
°_«me
, 
«me
);

9422 i‡(
shdr_idx
 >
SHN_LORESERVE
) {

9423 
	`¥_w¨n
("struct_opsÑeloc %s:Ñel->r_offset %zu shdr_idx %u unsupportedÇon-static function\n",

9424 
m≠
->
«me
, (
size_t
)
ªl
->
r_off£t
, 
shdr_idx
);

9425  -
LIBBPF_ERRNO__RELOC
;

9427 i‡(
sym
->
°_vÆue
 % 
BPF_INSN_SZ
) {

9428 
	`¥_w¨n
("struct_opsÑeloc %s: invalidÅargetÖrogram offset %llu\n",

9429 
m≠
->
«me
, ()
sym
->
°_vÆue
);

9430  -
LIBBPF_ERRNO__FORMAT
;

9432 
ö¢_idx
 = 
sym
->
°_vÆue
 / 
BPF_INSN_SZ
;

9434 
membî
 = 
	`föd_membî_by_off£t
(
°_›s
->
ty≥
, 
moff
 * 8);

9435 i‡(!
membî
) {

9436 
	`¥_w¨n
("struct_opsÑeloc %s: cannot find memberát moff %u\n",

9437 
m≠
->
«me
, 
moff
);

9438  -
EINVAL
;

9440 
membî_idx
 = 
membî
 - 
	`btf_membîs
(
°_›s
->
ty≥
);

9441 
«me
 = 
	`btf__«me_by_off£t
(
btf
, 
membî
->
«me_off
);

9443 i‡(!
	`ªsﬁve_func_±r
(
btf
, 
membî
->
ty≥
, 
NULL
)) {

9444 
	`¥_w¨n
("struct_opsÑeloc %s: cannotÑelocateÇon funcÖtr %s\n",

9445 
m≠
->
«me
,Çame);

9446  -
EINVAL
;

9449 
¥og
 = 
	`föd_¥og_by_£c_ö¢
(
obj
, 
shdr_idx
, 
ö¢_idx
);

9450 i‡(!
¥og
) {

9451 
	`¥_w¨n
("struct_opsÑeloc %s: cannot findÖrogát shdr_idx %uÅoÑelocate funcÖtr %s\n",

9452 
m≠
->
«me
, 
shdr_idx
,Çame);

9453  -
EINVAL
;

9457 i‡(
¥og
->
ty≥
 !
BPF_PROG_TYPE_STRUCT_OPS
) {

9458 
	`¥_w¨n
("struct_opsÑeloc %s:Örog %s isÇot struct_ops BPFÖrogram\n",

9459 
m≠
->
«me
, 
¥og
->name);

9460  -
EINVAL
;

9466 i‡(!
¥og
->
©èch_btf_id
) {

9467 
¥og
->
©èch_btf_id
 = 
°_›s
->
ty≥_id
;

9468 
¥og
->
ex≥˘ed_©èch_ty≥
 = 
membî_idx
;

9475 i‡(
¥og
->
©èch_btf_id
 !
°_›s
->
ty≥_id
 ||

9476 
¥og
->
ex≥˘ed_©èch_ty≥
 !
membî_idx
) {

9477 
	`¥_w¨n
("struct_opsÑeloc %s: cannot useÖrog %s in sec %s withÅype %uáttach_btf_id %uÉxpected_attach_type %u for funcÖtr %s\n",

9478 
m≠
->
«me
, 
¥og
->«me,Örog->
£c_«me
,Örog->
ty≥
,

9479 
¥og
->
©èch_btf_id
,Örog->
ex≥˘ed_©èch_ty≥
, 
«me
);

9480  -
EINVAL
;

9483 
°_›s
->
¥ogs
[
membî_idx
] = 
¥og
;

9487 
	}
}

9489 
	#BTF_TRACE_PREFIX
 "btf_åa˚_"

	)

9490 
	#BTF_LSM_PREFIX
 "bpf_lsm_"

	)

9491 
	#BTF_ITER_PREFIX
 "bpf_ôî_"

	)

9492 
	#BTF_MAX_NAME_SIZE
 128

	)

9494 
	$btf_gë_kî√l_¥efix_köd
(
bpf_©èch_ty≥
 
©èch_ty≥
,

9495 c⁄° **
¥efix
, *
köd
)

9497 
©èch_ty≥
) {

9498 
BPF_TRACE_RAW_TP
:

9499 *
¥efix
 = 
BTF_TRACE_PREFIX
;

9500 *
köd
 = 
BTF_KIND_TYPEDEF
;

9502 
BPF_LSM_MAC
:

9503 *
¥efix
 = 
BTF_LSM_PREFIX
;

9504 *
köd
 = 
BTF_KIND_FUNC
;

9506 
BPF_TRACE_ITER
:

9507 *
¥efix
 = 
BTF_ITER_PREFIX
;

9508 *
köd
 = 
BTF_KIND_FUNC
;

9511 *
¥efix
 = "";

9512 *
köd
 = 
BTF_KIND_FUNC
;

9514 
	}
}

9516 
	$föd_btf_by_¥efix_köd
(c⁄° 
btf
 *btf, c⁄° *
¥efix
,

9517 c⁄° *
«me
, 
__u32
 
köd
)

9519 
btf_ty≥_«me
[
BTF_MAX_NAME_SIZE
];

9520 
ªt
;

9522 
ªt
 = 
	`¢¥ötf
(
btf_ty≥_«me
, (btf_type_name),

9523 "%s%s", 
¥efix
, 
«me
);

9528 i‡(
ªt
 < 0 ||Ñë >(
btf_ty≥_«me
))

9529  -
ENAMETOOLONG
;

9530  
	`btf__föd_by_«me_köd
(
btf
, 
btf_ty≥_«me
, 
köd
);

9531 
	}
}

9533 
ölöe
 
	$föd_©èch_btf_id
(
btf
 *btf, c⁄° *
«me
,

9534 
bpf_©èch_ty≥
 
©èch_ty≥
)

9536 c⁄° *
¥efix
;

9537 
köd
;

9539 
	`btf_gë_kî√l_¥efix_köd
(
©èch_ty≥
, &
¥efix
, &
köd
);

9540  
	`föd_btf_by_¥efix_köd
(
btf
, 
¥efix
, 
«me
, 
köd
);

9541 
	}
}

9543 
	$libbpf_föd_vmlöux_btf_id
(c⁄° *
«me
,

9544 
bpf_©èch_ty≥
 
©èch_ty≥
)

9546 
btf
 *btf;

9547 
îr
;

9549 
btf
 = 
	`btf__lﬂd_vmlöux_btf
();

9550 
îr
 = 
	`libbpf_gë_îr‹
(
btf
);

9551 i‡(
îr
) {

9552 
	`¥_w¨n
("vmlinux BTF isÇot found\n");

9553  
	`libbpf_îr
(
îr
);

9556 
îr
 = 
	`föd_©èch_btf_id
(
btf
, 
«me
, 
©èch_ty≥
);

9557 i‡(
îr
 <= 0)

9558 
	`¥_w¨n
("%†i†nŸ found i¿vmlöux BTF\n", 
«me
);

9560 
	`btf__‰ì
(
btf
);

9561  
	`libbpf_îr
(
îr
);

9562 
	}
}

9564 
	$libbpf_föd_¥og_btf_id
(c⁄° *
«me
, 
__u32
 
©èch_¥og_fd
)

9566 
bpf_¥og_öfo
 
öfo
 = {};

9567 
__u32
 
öfo_Àn
 = (
öfo
);

9568 
btf
 *btf;

9569 
îr
;

9571 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
©èch_¥og_fd
, &
öfo
, &
öfo_Àn
);

9572 i‡(
îr
) {

9573 
	`¥_w¨n
("failed bpf_obj_get_info_by_fd for FD %d: %d\n",

9574 
©èch_¥og_fd
, 
îr
);

9575  
îr
;

9578 
îr
 = -
EINVAL
;

9579 i‡(!
öfo
.
btf_id
) {

9580 
	`¥_w¨n
("TheÅargetÖrogram doesn't have BTF\n");

9581 
out
;

9583 
btf
 = 
	`btf__lﬂd_‰om_kî√l_by_id
(
öfo
.
btf_id
);

9584 
îr
 = 
	`libbpf_gë_îr‹
(
btf
);

9585 i‡(
îr
) {

9586 
	`¥_w¨n
("FaûedÅÿgë BTF %d o‡thê¥ogøm: %d\n", 
öfo
.
btf_id
, 
îr
);

9587 
out
;

9589 
îr
 = 
	`btf__föd_by_«me_köd
(
btf
, 
«me
, 
BTF_KIND_FUNC
);

9590 
	`btf__‰ì
(
btf
);

9591 i‡(
îr
 <= 0) {

9592 
	`¥_w¨n
("%†i†nŸ found i¿¥og'†BTF\n", 
«me
);

9593 
out
;

9595 
out
:

9596  
îr
;

9597 
	}
}

9599 
	$föd_kî√l_btf_id
(
bpf_obje˘
 *
obj
, c⁄° *
©èch_«me
,

9600 
bpf_©èch_ty≥
 
©èch_ty≥
,

9601 *
btf_obj_fd
, *
btf_ty≥_id
)

9603 
ªt
, 
i
;

9605 
ªt
 = 
	`föd_©èch_btf_id
(
obj
->
btf_vmlöux
, 
©èch_«me
, 
©èch_ty≥
);

9606 i‡(
ªt
 > 0) {

9607 *
btf_obj_fd
 = 0;

9608 *
btf_ty≥_id
 = 
ªt
;

9611 i‡(
ªt
 !-
ENOENT
)

9612  
ªt
;

9614 
ªt
 = 
	`lﬂd_moduÀ_btfs
(
obj
);

9615 i‡(
ªt
)

9616  
ªt
;

9618 
i
 = 0; i < 
obj
->
btf_moduÀ_˙t
; i++) {

9619 c⁄° 
moduÀ_btf
 *
mod
 = &
obj
->
btf_moduÀs
[
i
];

9621 
ªt
 = 
	`föd_©èch_btf_id
(
mod
->
btf
, 
©èch_«me
, 
©èch_ty≥
);

9622 i‡(
ªt
 > 0) {

9623 *
btf_obj_fd
 = 
mod
->
fd
;

9624 *
btf_ty≥_id
 = 
ªt
;

9627 i‡(
ªt
 =-
ENOENT
)

9630  
ªt
;

9633  -
ESRCH
;

9634 
	}
}

9636 
	$libbpf_föd_©èch_btf_id
(
bpf_¥ogøm
 *
¥og
, c⁄° *
©èch_«me
,

9637 *
btf_obj_fd
, *
btf_ty≥_id
)

9639 
bpf_©èch_ty≥
 
©èch_ty≥
 = 
¥og
->
ex≥˘ed_©èch_ty≥
;

9640 
__u32
 
©èch_¥og_fd
 = 
¥og
->attach_prog_fd;

9641 
îr
 = 0;

9644 i‡(
©èch_¥og_fd
) {

9645 
îr
 = 
	`libbpf_föd_¥og_btf_id
(
©èch_«me
, 
©èch_¥og_fd
);

9646 i‡(
îr
 < 0) {

9647 
	`¥_w¨n
("failedÅo find BPFÖrogram (FD %d) BTF ID for '%s': %d\n",

9648 
©èch_¥og_fd
, 
©èch_«me
, 
îr
);

9649  
îr
;

9651 *
btf_obj_fd
 = 0;

9652 *
btf_ty≥_id
 = 
îr
;

9657 i‡(
¥og
->
obj
->
gí_lﬂdî
) {

9658 
	`bpf_gí__ªc‹d_©èch_èrgë
(
¥og
->
obj
->
gí_lﬂdî
, 
©èch_«me
, 
©èch_ty≥
);

9659 *
btf_obj_fd
 = 0;

9660 *
btf_ty≥_id
 = 1;

9662 
îr
 = 
	`föd_kî√l_btf_id
(
¥og
->
obj
, 
©èch_«me
, 
©èch_ty≥
, 
btf_obj_fd
, 
btf_ty≥_id
);

9664 i‡(
îr
) {

9665 
	`¥_w¨n
("ÁûedÅÿföd kî√»BTFÅy≥ ID o‡'%s': %d\n", 
©èch_«me
, 
îr
);

9666  
îr
;

9669 
	}
}

9671 
	$libbpf_©èch_ty≥_by_«me
(c⁄° *
«me
,

9672 
bpf_©èch_ty≥
 *
©èch_ty≥
)

9674 *
ty≥_«mes
;

9675 c⁄° 
bpf_£c_def
 *
£c_def
;

9677 i‡(!
«me
)

9678  
	`libbpf_îr
(-
EINVAL
);

9680 
£c_def
 = 
	`föd_£c_def
(
«me
);

9681 i‡(!
£c_def
) {

9682 
	`¥_debug
("ÁûedÅÿgues†©èchÅy≥ ba£d o¿ELF se˘i⁄Çamê'%s'\n", 
«me
);

9683 
ty≥_«mes
 = 
	`libbpf_gë_ty≥_«mes
(
åue
);

9684 i‡(
ty≥_«mes
 !
NULL
) {

9685 
	`¥_debug
("©èchabÀ se˘i⁄—y≥Ë«me†¨e:%s\n", 
ty≥_«mes
);

9686 
	`‰ì
(
ty≥_«mes
);

9689  
	`libbpf_îr
(-
EINVAL
);

9692 i‡(
£c_def
->
¥og_¥ï¨e_lﬂd_‚
 !
libbpf_¥ï¨e_¥og_lﬂd
)

9693  
	`libbpf_îr
(-
EINVAL
);

9694 i‡(!(
£c_def
->
cookõ
 & 
SEC_ATTACHABLE
))

9695  
	`libbpf_îr
(-
EINVAL
);

9697 *
©èch_ty≥
 = 
£c_def
->
ex≥˘ed_©èch_ty≥
;

9699 
	}
}

9701 
	$bpf_m≠__fd
(c⁄° 
bpf_m≠
 *
m≠
)

9703  
m≠
 ? m≠->
fd
 : 
	`libbpf_îr
(-
EINVAL
);

9704 
	}
}

9706 c⁄° 
bpf_m≠_def
 *
	$bpf_m≠__def
(c⁄° 
bpf_m≠
 *
m≠
)

9708  
m≠
 ? &m≠->
def
 : 
	`libbpf_îr_±r
(-
EINVAL
);

9709 
	}
}

9711 
boﬁ
 
	$m≠_u£s_ªÆ_«me
(c⁄° 
bpf_m≠
 *
m≠
)

9719 i‡(
m≠
->
libbpf_ty≥
 =
LIBBPF_MAP_DATA
 && 
	`°rcmp
(m≠->
ªÆ_«me
, 
DATA_SEC
) != 0)

9720  
åue
;

9721 i‡(
m≠
->
libbpf_ty≥
 =
LIBBPF_MAP_RODATA
 && 
	`°rcmp
(m≠->
ªÆ_«me
, 
RODATA_SEC
) != 0)

9722  
åue
;

9723  
Ál£
;

9724 
	}
}

9726 c⁄° *
	$bpf_m≠__«me
(c⁄° 
bpf_m≠
 *
m≠
)

9728 i‡(!
m≠
)

9729  
NULL
;

9731 i‡(
	`m≠_u£s_ªÆ_«me
(
m≠
))

9732  
m≠
->
ªÆ_«me
;

9734  
m≠
->
«me
;

9735 
	}
}

9737 
bpf_m≠_ty≥
 
	$bpf_m≠__ty≥
(c⁄° 
bpf_m≠
 *
m≠
)

9739  
m≠
->
def
.
ty≥
;

9740 
	}
}

9742 
	$bpf_m≠__£t_ty≥
(
bpf_m≠
 *
m≠
, 
bpf_m≠_ty≥
 
ty≥
)

9744 i‡(
m≠
->
fd
 >= 0)

9745  
	`libbpf_îr
(-
EBUSY
);

9746 
m≠
->
def
.
ty≥
 =Åype;

9748 
	}
}

9750 
__u32
 
	$bpf_m≠__m≠_Êags
(c⁄° 
bpf_m≠
 *
m≠
)

9752  
m≠
->
def
.
m≠_Êags
;

9753 
	}
}

9755 
	$bpf_m≠__£t_m≠_Êags
(
bpf_m≠
 *
m≠
, 
__u32
 
Êags
)

9757 i‡(
m≠
->
fd
 >= 0)

9758  
	`libbpf_îr
(-
EBUSY
);

9759 
m≠
->
def
.
m≠_Êags
 = 
Êags
;

9761 
	}
}

9763 
__u64
 
	$bpf_m≠__m≠_exåa
(c⁄° 
bpf_m≠
 *
m≠
)

9765  
m≠
->
m≠_exåa
;

9766 
	}
}

9768 
	$bpf_m≠__£t_m≠_exåa
(
bpf_m≠
 *
m≠
, 
__u64
 
m≠_exåa
)

9770 i‡(
m≠
->
fd
 >= 0)

9771  
	`libbpf_îr
(-
EBUSY
);

9772 
m≠
->
m≠_exåa
 = map_extra;

9774 
	}
}

9776 
__u32
 
	$bpf_m≠__numa_node
(c⁄° 
bpf_m≠
 *
m≠
)

9778  
m≠
->
numa_node
;

9779 
	}
}

9781 
	$bpf_m≠__£t_numa_node
(
bpf_m≠
 *
m≠
, 
__u32
 
numa_node
)

9783 i‡(
m≠
->
fd
 >= 0)

9784  
	`libbpf_îr
(-
EBUSY
);

9785 
m≠
->
numa_node
 =Çuma_node;

9787 
	}
}

9789 
__u32
 
	$bpf_m≠__key_size
(c⁄° 
bpf_m≠
 *
m≠
)

9791  
m≠
->
def
.
key_size
;

9792 
	}
}

9794 
	$bpf_m≠__£t_key_size
(
bpf_m≠
 *
m≠
, 
__u32
 
size
)

9796 i‡(
m≠
->
fd
 >= 0)

9797  
	`libbpf_îr
(-
EBUSY
);

9798 
m≠
->
def
.
key_size
 = 
size
;

9800 
	}
}

9802 
__u32
 
	$bpf_m≠__vÆue_size
(c⁄° 
bpf_m≠
 *
m≠
)

9804  
m≠
->
def
.
vÆue_size
;

9805 
	}
}

9807 
	$bpf_m≠__£t_vÆue_size
(
bpf_m≠
 *
m≠
, 
__u32
 
size
)

9809 i‡(
m≠
->
fd
 >= 0)

9810  
	`libbpf_îr
(-
EBUSY
);

9811 
m≠
->
def
.
vÆue_size
 = 
size
;

9813 
	}
}

9815 
__u32
 
	$bpf_m≠__btf_key_ty≥_id
(c⁄° 
bpf_m≠
 *
m≠
)

9817  
m≠
 ? m≠->
btf_key_ty≥_id
 : 0;

9818 
	}
}

9820 
__u32
 
	$bpf_m≠__btf_vÆue_ty≥_id
(c⁄° 
bpf_m≠
 *
m≠
)

9822  
m≠
 ? m≠->
btf_vÆue_ty≥_id
 : 0;

9823 
	}
}

9825 
	$bpf_m≠__£t_¥iv
(
bpf_m≠
 *
m≠
, *
¥iv
,

9826 
bpf_m≠_˛ór_¥iv_t
 
˛ór_¥iv
)

9828 i‡(!
m≠
)

9829  
	`libbpf_îr
(-
EINVAL
);

9831 i‡(
m≠
->
¥iv
) {

9832 i‡(
m≠
->
˛ór_¥iv
)

9833 
m≠
->
	`˛ór_¥iv
(m≠, m≠->
¥iv
);

9836 
m≠
->
¥iv
 =Öriv;

9837 
m≠
->
˛ór_¥iv
 = clear_priv;

9839 
	}
}

9841 *
	$bpf_m≠__¥iv
(c⁄° 
bpf_m≠
 *
m≠
)

9843  
m≠
 ? m≠->
¥iv
 : 
	`libbpf_îr_±r
(-
EINVAL
);

9844 
	}
}

9846 
	$bpf_m≠__£t_öôül_vÆue
(
bpf_m≠
 *
m≠
,

9847 c⁄° *
d©a
, 
size_t
 
size
)

9849 i‡(!
m≠
->
mm≠ed
 || m≠->
libbpf_ty≥
 =
LIBBPF_MAP_KCONFIG
 ||

9850 
size
 !
m≠
->
def
.
vÆue_size
 || m≠->
fd
 >= 0)

9851  
	`libbpf_îr
(-
EINVAL
);

9853 
	`mem˝y
(
m≠
->
mm≠ed
, 
d©a
, 
size
);

9855 
	}
}

9857 c⁄° *
	$bpf_m≠__öôül_vÆue
(
bpf_m≠
 *
m≠
, 
size_t
 *
psize
)

9859 i‡(!
m≠
->
mm≠ed
)

9860  
NULL
;

9861 *
psize
 = 
m≠
->
def
.
vÆue_size
;

9862  
m≠
->
mm≠ed
;

9863 
	}
}

9865 
boﬁ
 
	$bpf_m≠__is_ofÊﬂd_√uåÆ
(c⁄° 
bpf_m≠
 *
m≠
)

9867  
m≠
->
def
.
ty≥
 =
BPF_MAP_TYPE_PERF_EVENT_ARRAY
;

9868 
	}
}

9870 
boﬁ
 
	$bpf_m≠__is_öã∫Æ
(c⁄° 
bpf_m≠
 *
m≠
)

9872  
m≠
->
libbpf_ty≥
 !
LIBBPF_MAP_UNSPEC
;

9873 
	}
}

9875 
__u32
 
	$bpf_m≠__ifödex
(c⁄° 
bpf_m≠
 *
m≠
)

9877  
m≠
->
m≠_ifödex
;

9878 
	}
}

9880 
	$bpf_m≠__£t_ifödex
(
bpf_m≠
 *
m≠
, 
__u32
 
ifödex
)

9882 i‡(
m≠
->
fd
 >= 0)

9883  
	`libbpf_îr
(-
EBUSY
);

9884 
m≠
->
m≠_ifödex
 = 
ifödex
;

9886 
	}
}

9888 
	$bpf_m≠__£t_ö√r_m≠_fd
(
bpf_m≠
 *
m≠
, 
fd
)

9890 i‡(!
	`bpf_m≠_ty≥__is_m≠_ö_m≠
(
m≠
->
def
.
ty≥
)) {

9891 
	`¥_w¨n
("error: unsupported mapÅype\n");

9892  
	`libbpf_îr
(-
EINVAL
);

9894 i‡(
m≠
->
ö√r_m≠_fd
 != -1) {

9895 
	`¥_w¨n
("error: inner_map_fdálready specified\n");

9896  
	`libbpf_îr
(-
EINVAL
);

9898 i‡(
m≠
->
ö√r_m≠
) {

9899 
	`bpf_m≠__de°roy
(
m≠
->
ö√r_m≠
);

9900 
	`z‰ì
(&
m≠
->
ö√r_m≠
);

9902 
m≠
->
ö√r_m≠_fd
 = 
fd
;

9904 
	}
}

9906 
bpf_m≠
 *

9907 
	$__bpf_m≠__ôî
(c⁄° 
bpf_m≠
 *
m
, c⁄° 
bpf_obje˘
 *
obj
, 
i
)

9909 
ssize_t
 
idx
;

9910 
bpf_m≠
 *
s
, *
e
;

9912 i‡(!
obj
 || !obj->
m≠s
)

9913  
î∫o
 = 
EINVAL
, 
NULL
;

9915 
s
 = 
obj
->
m≠s
;

9916 
e
 = 
obj
->
m≠s
 + obj->
ƒ_m≠s
;

9918 i‡((
m
 < 
s
Ë|| (m >
e
)) {

9919 
	`¥_w¨n
("error in %s: map handler doesn't belongÅo object\n",

9920 
__func__
);

9921  
î∫o
 = 
EINVAL
, 
NULL
;

9924 
idx
 = (
m
 - 
obj
->
m≠s
Ë+ 
i
;

9925 i‡(
idx
 >
obj
->
ƒ_m≠s
 || idx < 0)

9926  
NULL
;

9927  &
obj
->
m≠s
[
idx
];

9928 
	}
}

9930 
bpf_m≠
 *

9931 
	$bpf_m≠__√xt
(c⁄° 
bpf_m≠
 *
¥ev
, c⁄° 
bpf_obje˘
 *
obj
)

9933  
	`bpf_obje˘__√xt_m≠
(
obj
, 
¥ev
);

9934 
	}
}

9936 
bpf_m≠
 *

9937 
	$bpf_obje˘__√xt_m≠
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° 
bpf_m≠
 *
¥ev
)

9939 i‡(
¥ev
 =
NULL
)

9940  
obj
->
m≠s
;

9942  
	`__bpf_m≠__ôî
(
¥ev
, 
obj
, 1);

9943 
	}
}

9945 
bpf_m≠
 *

9946 
	$bpf_m≠__¥ev
(c⁄° 
bpf_m≠
 *
√xt
, c⁄° 
bpf_obje˘
 *
obj
)

9948  
	`bpf_obje˘__¥ev_m≠
(
obj
, 
√xt
);

9949 
	}
}

9951 
bpf_m≠
 *

9952 
	$bpf_obje˘__¥ev_m≠
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° 
bpf_m≠
 *
√xt
)

9954 i‡(
√xt
 =
NULL
) {

9955 i‡(!
obj
->
ƒ_m≠s
)

9956  
NULL
;

9957  
obj
->
m≠s
 + obj->
ƒ_m≠s
 - 1;

9960  
	`__bpf_m≠__ôî
(
√xt
, 
obj
, -1);

9961 
	}
}

9963 
bpf_m≠
 *

9964 
	$bpf_obje˘__föd_m≠_by_«me
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° *
«me
)

9966 
bpf_m≠
 *
pos
;

9968 
	`bpf_obje˘__f‹_óch_m≠
(
pos
, 
obj
) {

9973 i‡(
«me
[0] == '.') {

9974 i‡(
pos
->
ªÆ_«me
 && 
	`°rcmp
’os->ªÆ_«me, 
«me
) == 0)

9975  
pos
;

9979 i‡(
	`m≠_u£s_ªÆ_«me
(
pos
)) {

9980 i‡(
	`°rcmp
(
pos
->
ªÆ_«me
, 
«me
) == 0)

9981  
pos
;

9984 i‡(
	`°rcmp
(
pos
->
«me
,Çame) == 0)

9985  
pos
;

9987  
î∫o
 = 
ENOENT
, 
NULL
;

9988 
	}
}

9991 
	$bpf_obje˘__föd_m≠_fd_by_«me
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° *
«me
)

9993  
	`bpf_m≠__fd
(
	`bpf_obje˘__föd_m≠_by_«me
(
obj
, 
«me
));

9994 
	}
}

9996 
bpf_m≠
 *

9997 
	$bpf_obje˘__föd_m≠_by_off£t
(
bpf_obje˘
 *
obj
, 
size_t
 
off£t
)

9999  
	`libbpf_îr_±r
(-
ENOTSUP
);

10000 
	}
}

10002 
	$vÆid©e_m≠_›
(c⁄° 
bpf_m≠
 *
m≠
, 
size_t
 
key_sz
,

10003 
size_t
 
vÆue_sz
, 
boﬁ
 
check_vÆue_sz
)

10005 i‡(
m≠
->
fd
 <= 0)

10006  -
ENOENT
;

10008 i‡(
m≠
->
def
.
key_size
 !
key_sz
) {

10009 
	`¥_w¨n
("map '%s': unexpected key size %zuÖrovided,Éxpected %u\n",

10010 
m≠
->
«me
, 
key_sz
, m≠->
def
.
key_size
);

10011  -
EINVAL
;

10014 i‡(!
check_vÆue_sz
)

10017 
m≠
->
def
.
ty≥
) {

10018 
BPF_MAP_TYPE_PERCPU_ARRAY
:

10019 
BPF_MAP_TYPE_PERCPU_HASH
:

10020 
BPF_MAP_TYPE_LRU_PERCPU_HASH
:

10021 
BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE
: {

10022 
num_˝u
 = 
	`libbpf_num_possibÀ_˝us
();

10023 
size_t
 
ñem_sz
 = 
	`roundup
(
m≠
->
def
.
vÆue_size
, 8);

10025 i‡(
vÆue_sz
 !
num_˝u
 * 
ñem_sz
) {

10026 
	`¥_w¨n
("map '%s': unexpected value size %zuÖrovided forÖer-CPU map,Éxpected %d * %zu = %zd\n",

10027 
m≠
->
«me
, 
vÆue_sz
, 
num_˝u
, 
ñem_sz
,Çum_cpu *Élem_sz);

10028  -
EINVAL
;

10033 i‡(
m≠
->
def
.
vÆue_size
 !
vÆue_sz
) {

10034 
	`¥_w¨n
("map '%s': unexpected value size %zuÖrovided,Éxpected %u\n",

10035 
m≠
->
«me
, 
vÆue_sz
, m≠->
def
.
vÆue_size
);

10036  -
EINVAL
;

10041 
	}
}

10043 
	$bpf_m≠__lookup_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

10044 c⁄° *
key
, 
size_t
 
key_sz
,

10045 *
vÆue
, 
size_t
 
vÆue_sz
, 
__u64
 
Êags
)

10047 
îr
;

10049 
îr
 = 
	`vÆid©e_m≠_›
(
m≠
, 
key_sz
, 
vÆue_sz
, 
åue
);

10050 i‡(
îr
)

10051  
	`libbpf_îr
(
îr
);

10053  
	`bpf_m≠_lookup_ñem_Êags
(
m≠
->
fd
, 
key
, 
vÆue
, 
Êags
);

10054 
	}
}

10056 
	$bpf_m≠__upd©e_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

10057 c⁄° *
key
, 
size_t
 
key_sz
,

10058 c⁄° *
vÆue
, 
size_t
 
vÆue_sz
, 
__u64
 
Êags
)

10060 
îr
;

10062 
îr
 = 
	`vÆid©e_m≠_›
(
m≠
, 
key_sz
, 
vÆue_sz
, 
åue
);

10063 i‡(
îr
)

10064  
	`libbpf_îr
(
îr
);

10066  
	`bpf_m≠_upd©e_ñem
(
m≠
->
fd
, 
key
, 
vÆue
, 
Êags
);

10067 
	}
}

10069 
	$bpf_m≠__dñëe_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

10070 c⁄° *
key
, 
size_t
 
key_sz
, 
__u64
 
Êags
)

10072 
îr
;

10074 
îr
 = 
	`vÆid©e_m≠_›
(
m≠
, 
key_sz
, 0, 
Ál£
 );

10075 i‡(
îr
)

10076  
	`libbpf_îr
(
îr
);

10078  
	`bpf_m≠_dñëe_ñem_Êags
(
m≠
->
fd
, 
key
, 
Êags
);

10079 
	}
}

10081 
	$bpf_m≠__lookup_™d_dñëe_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

10082 c⁄° *
key
, 
size_t
 
key_sz
,

10083 *
vÆue
, 
size_t
 
vÆue_sz
, 
__u64
 
Êags
)

10085 
îr
;

10087 
îr
 = 
	`vÆid©e_m≠_›
(
m≠
, 
key_sz
, 
vÆue_sz
, 
åue
);

10088 i‡(
îr
)

10089  
	`libbpf_îr
(
îr
);

10091  
	`bpf_m≠_lookup_™d_dñëe_ñem_Êags
(
m≠
->
fd
, 
key
, 
vÆue
, 
Êags
);

10092 
	}
}

10094 
	$bpf_m≠__gë_√xt_key
(c⁄° 
bpf_m≠
 *
m≠
,

10095 c⁄° *
cur_key
, *
√xt_key
, 
size_t
 
key_sz
)

10097 
îr
;

10099 
îr
 = 
	`vÆid©e_m≠_›
(
m≠
, 
key_sz
, 0, 
Ál£
 );

10100 i‡(
îr
)

10101  
	`libbpf_îr
(
îr
);

10103  
	`bpf_m≠_gë_√xt_key
(
m≠
->
fd
, 
cur_key
, 
√xt_key
);

10104 
	}
}

10106 
	$libbpf_gë_îr‹
(c⁄° *
±r
)

10108 i‡(!
	`IS_ERR_OR_NULL
(
±r
))

10111 i‡(
	`IS_ERR
(
±r
))

10112 
î∫o
 = -
	`PTR_ERR
(
±r
);

10119  -
î∫o
;

10120 
	}
}

10122 
__©åibuã__
((
Æüs
("bpf_prog_load_xattr2")))

10123 
bpf_¥og_lﬂd_x©å
(c⁄° 
bpf_¥og_lﬂd_©å
 *
©å
,

10124 
bpf_obje˘
 **
pobj
, *
¥og_fd
);

10126 
	$bpf_¥og_lﬂd_x©å2
(c⁄° 
bpf_¥og_lﬂd_©å
 *
©å
,

10127 
bpf_obje˘
 **
pobj
, *
¥og_fd
)

10129 
bpf_obje˘_›í_©å
 
›í_©å
 = {};

10130 
bpf_¥ogøm
 *
¥og
, *
fú°_¥og
 = 
NULL
;

10131 
bpf_obje˘
 *
obj
;

10132 
bpf_m≠
 *
m≠
;

10133 
îr
;

10135 i‡(!
©å
)

10136  
	`libbpf_îr
(-
EINVAL
);

10137 i‡(!
©å
->
fûe
)

10138  
	`libbpf_îr
(-
EINVAL
);

10140 
›í_©å
.
fûe
 = 
©å
->file;

10141 
›í_©å
.
¥og_ty≥
 = 
©å
->prog_type;

10143 
obj
 = 
	`__bpf_obje˘__›í_x©å
(&
›í_©å
, 0);

10144 
îr
 = 
	`libbpf_gë_îr‹
(
obj
);

10145 i‡(
îr
)

10146  
	`libbpf_îr
(-
ENOENT
);

10148 
	`bpf_obje˘__f‹_óch_¥ogøm
(
¥og
, 
obj
) {

10149 
bpf_©èch_ty≥
 
©èch_ty≥
 = 
©å
->
ex≥˘ed_©èch_ty≥
;

10155 i‡(
©å
->
¥og_ty≥
 !
BPF_PROG_TYPE_UNSPEC
) {

10156 
¥og
->
ty≥
 = 
©å
->
¥og_ty≥
;

10157 
¥og
->
ex≥˘ed_©èch_ty≥
 = 
©èch_ty≥
;

10159 i‡(
	`bpf_¥ogøm__ty≥
(
¥og
Ë=
BPF_PROG_TYPE_UNSPEC
) {

10164 
	`bpf_obje˘__˛o£
(
obj
);

10165  
	`libbpf_îr
(-
EINVAL
);

10168 
¥og
->
¥og_ifödex
 = 
©å
->
ifödex
;

10169 
¥og
->
log_Àvñ
 = 
©å
->log_level;

10170 
¥og
->
¥og_Êags
 |
©å
->prog_flags;

10171 i‡(!
fú°_¥og
)

10172 
fú°_¥og
 = 
¥og
;

10175 
	`bpf_obje˘__f‹_óch_m≠
(
m≠
, 
obj
) {

10176 i‡(
m≠
->
def
.
ty≥
 !
BPF_MAP_TYPE_PERF_EVENT_ARRAY
)

10177 
m≠
->
m≠_ifödex
 = 
©å
->
ifödex
;

10180 i‡(!
fú°_¥og
) {

10181 
	`¥_w¨n
("object file doesn't contain bpfÖrogram\n");

10182 
	`bpf_obje˘__˛o£
(
obj
);

10183  
	`libbpf_îr
(-
ENOENT
);

10186 
îr
 = 
	`bpf_obje˘__lﬂd
(
obj
);

10187 i‡(
îr
) {

10188 
	`bpf_obje˘__˛o£
(
obj
);

10189  
	`libbpf_îr
(
îr
);

10192 *
pobj
 = 
obj
;

10193 *
¥og_fd
 = 
	`bpf_¥ogøm__fd
(
fú°_¥og
);

10195 
	}
}

10197 
	$COMPAT_VERSION
(
bpf_¥og_lﬂd_dïªˇãd
, 
bpf_¥og_lﬂd
, 
LIBBPF_0
.0.1)

10198 
	$bpf_¥og_lﬂd_dïªˇãd
(c⁄° *
fûe
, 
bpf_¥og_ty≥
 
ty≥
,

10199 
bpf_obje˘
 **
pobj
, *
¥og_fd
)

10201 
bpf_¥og_lﬂd_©å
 
©å
;

10203 
	`mem£t
(&
©å
, 0, (
bpf_¥og_lﬂd_©å
));

10204 
©å
.
fûe
 = file;

10205 
©å
.
¥og_ty≥
 = 
ty≥
;

10206 
©å
.
ex≥˘ed_©èch_ty≥
 = 0;

10208  
	`bpf_¥og_lﬂd_x©å2
(&
©å
, 
pobj
, 
¥og_fd
);

10209 
	}
}

10212 
	$bpf_lök__upd©e_¥ogøm
(
bpf_lök
 *
lök
, 
bpf_¥ogøm
 *
¥og
)

10214 
ªt
;

10216 
ªt
 = 
	`bpf_lök_upd©e
(
	`bpf_lök__fd
(
lök
), 
	`bpf_¥ogøm__fd
(
¥og
), 
NULL
);

10217  
	`libbpf_îr_î∫o
(
ªt
);

10218 
	}
}

10230 
	$bpf_lök__disc⁄√˘
(
bpf_lök
 *
lök
)

10232 
lök
->
disc⁄√˘ed
 = 
åue
;

10233 
	}
}

10235 
	$bpf_lök__de°roy
(
bpf_lök
 *
lök
)

10237 
îr
 = 0;

10239 i‡(
	`IS_ERR_OR_NULL
(
lök
))

10242 i‡(!
lök
->
disc⁄√˘ed
 &&Üök->
dëach
)

10243 
îr
 = 
lök
->
	`dëach
(link);

10244 i‡(
lök
->
pö_∑th
)

10245 
	`‰ì
(
lök
->
pö_∑th
);

10246 i‡(
lök
->
dóŒoc
)

10247 
lök
->
	`dóŒoc
(link);

10249 
	`‰ì
(
lök
);

10251  
	`libbpf_îr
(
îr
);

10252 
	}
}

10254 
	$bpf_lök__fd
(c⁄° 
bpf_lök
 *
lök
)

10256  
lök
->
fd
;

10257 
	}
}

10259 c⁄° *
	$bpf_lök__pö_∑th
(c⁄° 
bpf_lök
 *
lök
)

10261  
lök
->
pö_∑th
;

10262 
	}
}

10264 
	$bpf_lök__dëach_fd
(
bpf_lök
 *
lök
)

10266  
	`libbpf_îr_î∫o
(
	`˛o£
(
lök
->
fd
));

10267 
	}
}

10269 
bpf_lök
 *
	$bpf_lök__›í
(c⁄° *
∑th
)

10271 
bpf_lök
 *
lök
;

10272 
fd
;

10274 
fd
 = 
	`bpf_obj_gë
(
∑th
);

10275 i‡(
fd
 < 0) {

10276 
fd
 = -
î∫o
;

10277 
	`¥_w¨n
("ÁûedÅÿ›íÜökáà%s: %d\n", 
∑th
, 
fd
);

10278  
	`libbpf_îr_±r
(
fd
);

10281 
lök
 = 
	`ˇŒoc
(1, (*link));

10282 i‡(!
lök
) {

10283 
	`˛o£
(
fd
);

10284  
	`libbpf_îr_±r
(-
ENOMEM
);

10286 
lök
->
dëach
 = &
bpf_lök__dëach_fd
;

10287 
lök
->
fd
 = fd;

10289 
lök
->
pö_∑th
 = 
	`°rdup
(
∑th
);

10290 i‡(!
lök
->
pö_∑th
) {

10291 
	`bpf_lök__de°roy
(
lök
);

10292  
	`libbpf_îr_±r
(-
ENOMEM
);

10295  
lök
;

10296 
	}
}

10298 
	$bpf_lök__dëach
(
bpf_lök
 *
lök
)

10300  
	`bpf_lök_dëach
(
lök
->
fd
Ë? -
î∫o
 : 0;

10301 
	}
}

10303 
	$bpf_lök__pö
(
bpf_lök
 *
lök
, c⁄° *
∑th
)

10305 
îr
;

10307 i‡(
lök
->
pö_∑th
)

10308  
	`libbpf_îr
(-
EBUSY
);

10309 
îr
 = 
	`make_∑ª¡_dú
(
∑th
);

10310 i‡(
îr
)

10311  
	`libbpf_îr
(
îr
);

10312 
îr
 = 
	`check_∑th
(
∑th
);

10313 i‡(
îr
)

10314  
	`libbpf_îr
(
îr
);

10316 
lök
->
pö_∑th
 = 
	`°rdup
(
∑th
);

10317 i‡(!
lök
->
pö_∑th
)

10318  
	`libbpf_îr
(-
ENOMEM
);

10320 i‡(
	`bpf_obj_pö
(
lök
->
fd
,Üök->
pö_∑th
)) {

10321 
îr
 = -
î∫o
;

10322 
	`z‰ì
(&
lök
->
pö_∑th
);

10323  
	`libbpf_îr
(
îr
);

10326 
	`¥_debug
("lök fd=%d:Öö√dáà%s\n", 
lök
->
fd
,Üök->
pö_∑th
);

10328 
	}
}

10330 
	$bpf_lök__u≈ö
(
bpf_lök
 *
lök
)

10332 
îr
;

10334 i‡(!
lök
->
pö_∑th
)

10335  
	`libbpf_îr
(-
EINVAL
);

10337 
îr
 = 
	`u∆ök
(
lök
->
pö_∑th
);

10338 i‡(
îr
 != 0)

10339  -
î∫o
;

10341 
	`¥_debug
("lök fd=%d: u≈ö√d from %s\n", 
lök
->
fd
,Üök->
pö_∑th
);

10342 
	`z‰ì
(&
lök
->
pö_∑th
);

10344 
	}
}

10346 
	sbpf_lök_≥rf
 {

10347 
bpf_lök
 
	mlök
;

10348 
	m≥rf_evít_fd
;

10350 *
	mÀgacy_¥obe_«me
;

10351 
boﬁ
 
	mÀgacy_is_k¥obe
;

10352 
boﬁ
 
	mÀgacy_is_ªçrobe
;

10355 
ªmove_k¥obe_evít_Àgacy
(c⁄° *
¥obe_«me
, 
boﬁ
 
ªçrobe
);

10356 
ªmove_u¥obe_evít_Àgacy
(c⁄° *
¥obe_«me
, 
boﬁ
 
ªçrobe
);

10358 
	$bpf_lök_≥rf_dëach
(
bpf_lök
 *
lök
)

10360 
bpf_lök_≥rf
 *
≥rf_lök
 = 
	`c⁄èöî_of
(
lök
, bpf_link_perf,Üink);

10361 
îr
 = 0;

10363 i‡(
	`io˘l
(
≥rf_lök
->
≥rf_evít_fd
, 
PERF_EVENT_IOC_DISABLE
, 0) < 0)

10364 
îr
 = -
î∫o
;

10366 i‡(
≥rf_lök
->
≥rf_evít_fd
 !
lök
->
fd
)

10367 
	`˛o£
(
≥rf_lök
->
≥rf_evít_fd
);

10368 
	`˛o£
(
lök
->
fd
);

10371 i‡(
≥rf_lök
->
Àgacy_¥obe_«me
) {

10372 i‡(
≥rf_lök
->
Àgacy_is_k¥obe
) {

10373 
îr
 = 
	`ªmove_k¥obe_evít_Àgacy
(
≥rf_lök
->
Àgacy_¥obe_«me
,

10374 
≥rf_lök
->
Àgacy_is_ªçrobe
);

10376 
îr
 = 
	`ªmove_u¥obe_evít_Àgacy
(
≥rf_lök
->
Àgacy_¥obe_«me
,

10377 
≥rf_lök
->
Àgacy_is_ªçrobe
);

10381  
îr
;

10382 
	}
}

10384 
	$bpf_lök_≥rf_dóŒoc
(
bpf_lök
 *
lök
)

10386 
bpf_lök_≥rf
 *
≥rf_lök
 = 
	`c⁄èöî_of
(
lök
, bpf_link_perf,Üink);

10388 
	`‰ì
(
≥rf_lök
->
Àgacy_¥obe_«me
);

10389 
	`‰ì
(
≥rf_lök
);

10390 
	}
}

10392 
bpf_lök
 *
	$bpf_¥ogøm__©èch_≥rf_evít_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
pfd
,

10393 c⁄° 
bpf_≥rf_evít_›ts
 *
›ts
)

10395 
îrmsg
[
STRERR_BUFSIZE
];

10396 
bpf_lök_≥rf
 *
lök
;

10397 
¥og_fd
, 
lök_fd
 = -1, 
îr
;

10399 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_≥rf_evít_›ts
))

10400  
	`libbpf_îr_±r
(-
EINVAL
);

10402 i‡(
pfd
 < 0) {

10403 
	`¥_w¨n
("prog '%s': invalidÖerfÉvent FD %d\n",

10404 
¥og
->
«me
, 
pfd
);

10405  
	`libbpf_îr_±r
(-
EINVAL
);

10407 
¥og_fd
 = 
	`bpf_¥ogøm__fd
(
¥og
);

10408 i‡(
¥og_fd
 < 0) {

10409 
	`¥_w¨n
("prog '%s': can'táttach BPFÖrogram w/o FD (did youÜoad it?)\n",

10410 
¥og
->
«me
);

10411  
	`libbpf_îr_±r
(-
EINVAL
);

10414 
lök
 = 
	`ˇŒoc
(1, (*link));

10415 i‡(!
lök
)

10416  
	`libbpf_îr_±r
(-
ENOMEM
);

10417 
lök
->lök.
dëach
 = &
bpf_lök_≥rf_dëach
;

10418 
lök
->lök.
dóŒoc
 = &
bpf_lök_≥rf_dóŒoc
;

10419 
lök
->
≥rf_evít_fd
 = 
pfd
;

10421 i‡(
	`kî√l_suµ‹ts
(
¥og
->
obj
, 
FEAT_PERF_LINK
)) {

10422 
	`DECLARE_LIBBPF_OPTS
(
bpf_lök_¸óã_›ts
, 
lök_›ts
,

10423 .
≥rf_evít
.
bpf_cookõ
 = 
	`OPTS_GET
(
›ts
, bpf_cookie, 0));

10425 
lök_fd
 = 
	`bpf_lök_¸óã
(
¥og_fd
, 
pfd
, 
BPF_PERF_EVENT
, &
lök_›ts
);

10426 i‡(
lök_fd
 < 0) {

10427 
îr
 = -
î∫o
;

10428 
	`¥_w¨n
("prog '%s': failedÅo create BPFÜink forÖerf_event FD %d: %d (%s)\n",

10429 
¥og
->
«me
, 
pfd
,

10430 
îr
, 
	`libbpf_°ªº‹_r
”º, 
îrmsg
, (errmsg)));

10431 
îr_out
;

10433 
lök
->lök.
fd
 = 
lök_fd
;

10435 i‡(
	`OPTS_GET
(
›ts
, 
bpf_cookõ
, 0)) {

10436 
	`¥_w¨n
("¥og '%s': u£∏c⁄ãxàvÆuêi†nŸ suµ‹ãd\n", 
¥og
->
«me
);

10437 
îr
 = -
EOPNOTSUPP
;

10438 
îr_out
;

10441 i‡(
	`io˘l
(
pfd
, 
PERF_EVENT_IOC_SET_BPF
, 
¥og_fd
) < 0) {

10442 
îr
 = -
î∫o
;

10443 
	`¥_w¨n
("prog '%s': failedÅoáttachÅoÖerf_event FD %d: %s\n",

10444 
¥og
->
«me
, 
pfd
, 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

10445 i‡(
îr
 =-
EPROTO
)

10446 
	`¥_w¨n
("prog '%s':Åryádd PERF_SAMPLE_CALLCHAINÅo orÑemoveÉxclude_callchain_[kernel|user] fromÖfd %d\n",

10447 
¥og
->
«me
, 
pfd
);

10448 
îr_out
;

10450 
lök
->lök.
fd
 = 
pfd
;

10452 i‡(
	`io˘l
(
pfd
, 
PERF_EVENT_IOC_ENABLE
, 0) < 0) {

10453 
îr
 = -
î∫o
;

10454 
	`¥_w¨n
("prog '%s': failedÅoÉnableÖerf_event FD %d: %s\n",

10455 
¥og
->
«me
, 
pfd
, 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

10456 
îr_out
;

10459  &
lök
->link;

10460 
îr_out
:

10461 i‡(
lök_fd
 >= 0)

10462 
	`˛o£
(
lök_fd
);

10463 
	`‰ì
(
lök
);

10464  
	`libbpf_îr_±r
(
îr
);

10465 
	}
}

10467 
bpf_lök
 *
	$bpf_¥ogøm__©èch_≥rf_evít
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
pfd
)

10469  
	`bpf_¥ogøm__©èch_≥rf_evít_›ts
(
¥og
, 
pfd
, 
NULL
);

10470 
	}
}

10477 
	$∑r£_uöt_‰om_fûe
(c⁄° *
fûe
, c⁄° *
fmt
)

10479 
buf
[
STRERR_BUFSIZE
];

10480 
îr
, 
ªt
;

10481 
FILE
 *
f
;

10483 
f
 = 
	`f›í
(
fûe
, "r");

10484 i‡(!
f
) {

10485 
îr
 = -
î∫o
;

10486 
	`¥_debug
("ÁûedÅÿ›í '%s': %s\n", 
fûe
,

10487 
	`libbpf_°ªº‹_r
(
îr
, 
buf
, (buf)));

10488  
îr
;

10490 
îr
 = 
	`fsˇnf
(
f
, 
fmt
, &
ªt
);

10491 i‡(
îr
 != 1) {

10492 
îr
 =Éº =
EOF
 ? -
EIO
 : -
î∫o
;

10493 
	`¥_debug
("ÁûedÅÿ∑r£ '%s': %s\n", 
fûe
,

10494 
	`libbpf_°ªº‹_r
(
îr
, 
buf
, (buf)));

10495 
	`f˛o£
(
f
);

10496  
îr
;

10498 
	`f˛o£
(
f
);

10499  
ªt
;

10500 
	}
}

10502 
	$dëîmöe_k¥obe_≥rf_ty≥
()

10504 c⁄° *
fûe
 = "/sys/bus/event_source/devices/kprobe/type";

10506  
	`∑r£_uöt_‰om_fûe
(
fûe
, "%d\n");

10507 
	}
}

10509 
	$dëîmöe_u¥obe_≥rf_ty≥
()

10511 c⁄° *
fûe
 = "/sys/bus/event_source/devices/uprobe/type";

10513  
	`∑r£_uöt_‰om_fûe
(
fûe
, "%d\n");

10514 
	}
}

10516 
	$dëîmöe_k¥obe_ªçrobe_bô
()

10518 c⁄° *
fûe
 = "/sys/bus/event_source/devices/kprobe/format/retprobe";

10520  
	`∑r£_uöt_‰om_fûe
(
fûe
, "config:%d\n");

10521 
	}
}

10523 
	$dëîmöe_u¥obe_ªçrobe_bô
()

10525 c⁄° *
fûe
 = "/sys/bus/event_source/devices/uprobe/format/retprobe";

10527  
	`∑r£_uöt_‰om_fûe
(
fûe
, "config:%d\n");

10528 
	}
}

10530 
	#PERF_UPROBE_REF_CTR_OFFSET_BITS
 32

	)

10531 
	#PERF_UPROBE_REF_CTR_OFFSET_SHIFT
 32

	)

10533 
	$≥rf_evít_›í_¥obe
(
boﬁ
 
u¥obe
, boﬁ 
ªçrobe
, c⁄° *
«me
,

10534 
uöt64_t
 
off£t
, 
pid
, 
size_t
 
ªf_˘r_off
)

10536 
≥rf_evít_©å
 
©å
 = {};

10537 
îrmsg
[
STRERR_BUFSIZE
];

10538 
ty≥
, 
pfd
, 
îr
;

10540 i‡(
ªf_˘r_off
 >(1ULL << 
PERF_UPROBE_REF_CTR_OFFSET_BITS
))

10541  -
EINVAL
;

10543 
ty≥
 = 
u¥obe
 ? 
	`dëîmöe_u¥obe_≥rf_ty≥
()

10544 : 
	`dëîmöe_k¥obe_≥rf_ty≥
();

10545 i‡(
ty≥
 < 0) {

10546 
	`¥_w¨n
("failedÅo determine %sÖerfÅype: %s\n",

10547 
u¥obe
 ? "uprobe" : "kprobe",

10548 
	`libbpf_°ªº‹_r
(
ty≥
, 
îrmsg
, (errmsg)));

10549  
ty≥
;

10551 i‡(
ªçrobe
) {

10552 
bô
 = 
u¥obe
 ? 
	`dëîmöe_u¥obe_ªçrobe_bô
()

10553 : 
	`dëîmöe_k¥obe_ªçrobe_bô
();

10555 i‡(
bô
 < 0) {

10556 
	`¥_w¨n
("failedÅo determine %sÑetprobe bit: %s\n",

10557 
u¥obe
 ? "uprobe" : "kprobe",

10558 
	`libbpf_°ªº‹_r
(
bô
, 
îrmsg
, (errmsg)));

10559  
bô
;

10561 
©å
.
c⁄fig
 |1 << 
bô
;

10563 
©å
.
size
 = (attr);

10564 
©å
.
ty≥
 =Åype;

10565 
©å
.
c⁄fig
 |(
__u64
)
ªf_˘r_off
 << 
PERF_UPROBE_REF_CTR_OFFSET_SHIFT
;

10566 
©å
.
c⁄fig1
 = 
	`±r_to_u64
(
«me
);

10567 
©å
.
c⁄fig2
 = 
off£t
;

10570 
pfd
 = 
	`sysˇŒ
(
__NR_≥rf_evít_›í
, &
©å
,

10571 
pid
 < 0 ? -1 :Öid ,

10572 
pid
 == -1 ? 0 : -1 ,

10573 -1 , 
PERF_FLAG_FD_CLOEXEC
);

10574 i‡(
pfd
 < 0) {

10575 
îr
 = -
î∫o
;

10576 
	`¥_w¨n
("%sÖerf_event_open() failed: %s\n",

10577 
u¥obe
 ? "uprobe" : "kprobe",

10578 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

10579  
îr
;

10581  
pfd
;

10582 
	}
}

10584 
	$≠≥nd_to_fûe
(c⁄° *
fûe
, c⁄° *
fmt
, ...)

10586 
fd
, 
n
, 
îr
 = 0;

10587 
va_li°
 
≠
;

10589 
fd
 = 
	`›í
(
fûe
, 
O_WRONLY
 | 
O_APPEND
 | 
O_CLOEXEC
, 0);

10590 i‡(
fd
 < 0)

10591  -
î∫o
;

10593 
	`va_°¨t
(
≠
, 
fmt
);

10594 
n
 = 
	`vd¥ötf
(
fd
, 
fmt
, 
≠
);

10595 
	`va_íd
(
≠
);

10597 i‡(
n
 < 0)

10598 
îr
 = -
î∫o
;

10600 
	`˛o£
(
fd
);

10601  
îr
;

10602 
	}
}

10604 
	$gí_k¥obe_Àgacy_evít_«me
(*
buf
, 
size_t
 
buf_sz
,

10605 c⁄° *
kfunc_«me
, 
size_t
 
off£t
)

10607 
ödex
 = 0;

10609 
	`¢¥ötf
(
buf
, 
buf_sz
, "libbpf_%u_%s_0x%zx_%d", 
	`gëpid
(), 
kfunc_«me
, 
off£t
,

10610 
	`__sync_„tch_™d_add
(&
ödex
, 1));

10611 
	}
}

10613 
	$add_k¥obe_evít_Àgacy
(c⁄° *
¥obe_«me
, 
boﬁ
 
ªçrobe
,

10614 c⁄° *
kfunc_«me
, 
size_t
 
off£t
)

10616 c⁄° *
fûe
 = "/sys/kernel/debug/tracing/kprobe_events";

10618  
	`≠≥nd_to_fûe
(
fûe
, "%c:%s/%s %s+0x%zx",

10619 
ªçrobe
 ? 'r' : 'p',

10620 
ªçrobe
 ? "kretprobes" : "kprobes",

10621 
¥obe_«me
, 
kfunc_«me
, 
off£t
);

10622 
	}
}

10624 
	$ªmove_k¥obe_evít_Àgacy
(c⁄° *
¥obe_«me
, 
boﬁ
 
ªçrobe
)

10626 c⁄° *
fûe
 = "/sys/kernel/debug/tracing/kprobe_events";

10628  
	`≠≥nd_to_fûe
(
fûe
, "-:%s/%s", 
ªçrobe
 ? "kªçrobes" : "k¥obes", 
¥obe_«me
);

10629 
	}
}

10631 
	$dëîmöe_k¥obe_≥rf_ty≥_Àgacy
(c⁄° *
¥obe_«me
, 
boﬁ
 
ªçrobe
)

10633 
fûe
[256];

10635 
	`¢¥ötf
(
fûe
, (file),

10637 
ªçrobe
 ? "kªçrobes" : "k¥obes", 
¥obe_«me
);

10639  
	`∑r£_uöt_‰om_fûe
(
fûe
, "%d\n");

10640 
	}
}

10642 
	$≥rf_evít_k¥obe_›í_Àgacy
(c⁄° *
¥obe_«me
, 
boﬁ
 
ªçrobe
,

10643 c⁄° *
kfunc_«me
, 
size_t
 
off£t
, 
pid
)

10645 
≥rf_evít_©å
 
©å
 = {};

10646 
îrmsg
[
STRERR_BUFSIZE
];

10647 
ty≥
, 
pfd
, 
îr
;

10649 
îr
 = 
	`add_k¥obe_evít_Àgacy
(
¥obe_«me
, 
ªçrobe
, 
kfunc_«me
, 
off£t
);

10650 i‡(
îr
 < 0) {

10651 
	`¥_w¨n
("failedÅoáddÜegacy kprobeÉvent for '%s+0x%zx': %s\n",

10652 
kfunc_«me
, 
off£t
,

10653 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

10654  
îr
;

10656 
ty≥
 = 
	`dëîmöe_k¥obe_≥rf_ty≥_Àgacy
(
¥obe_«me
, 
ªçrobe
);

10657 i‡(
ty≥
 < 0) {

10658 
	`¥_w¨n
("failedÅo determineÜegacy kprobeÉvent id for '%s+0x%zx': %s\n",

10659 
kfunc_«me
, 
off£t
,

10660 
	`libbpf_°ªº‹_r
(
ty≥
, 
îrmsg
, (errmsg)));

10661  
ty≥
;

10663 
©å
.
size
 = (attr);

10664 
©å
.
c⁄fig
 = 
ty≥
;

10665 
©å
.
ty≥
 = 
PERF_TYPE_TRACEPOINT
;

10667 
pfd
 = 
	`sysˇŒ
(
__NR_≥rf_evít_›í
, &
©å
,

10668 
pid
 < 0 ? -1 :Öid,

10669 
pid
 == -1 ? 0 : -1,

10670 -1 , 
PERF_FLAG_FD_CLOEXEC
);

10671 i‡(
pfd
 < 0) {

10672 
îr
 = -
î∫o
;

10673 
	`¥_w¨n
("legacy kprobeÖerf_event_open() failed: %s\n",

10674 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

10675  
îr
;

10677  
pfd
;

10678 
	}
}

10680 
bpf_lök
 *

10681 
	$bpf_¥ogøm__©èch_k¥obe_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
,

10682 c⁄° *
func_«me
,

10683 c⁄° 
bpf_k¥obe_›ts
 *
›ts
)

10685 
	`DECLARE_LIBBPF_OPTS
(
bpf_≥rf_evít_›ts
, 
≥_›ts
);

10686 
îrmsg
[
STRERR_BUFSIZE
];

10687 *
Àgacy_¥obe
 = 
NULL
;

10688 
bpf_lök
 *
lök
;

10689 
size_t
 
off£t
;

10690 
boﬁ
 
ªçrobe
, 
Àgacy
;

10691 
pfd
, 
îr
;

10693 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_k¥obe_›ts
))

10694  
	`libbpf_îr_±r
(-
EINVAL
);

10696 
ªçrobe
 = 
	`OPTS_GET
(
›ts
,Ñë¥obe, 
Ál£
);

10697 
off£t
 = 
	`OPTS_GET
(
›ts
, offset, 0);

10698 
≥_›ts
.
bpf_cookõ
 = 
	`OPTS_GET
(
›ts
, bpf_cookie, 0);

10700 
Àgacy
 = 
	`dëîmöe_k¥obe_≥rf_ty≥
() < 0;

10701 i‡(!
Àgacy
) {

10702 
pfd
 = 
	`≥rf_evít_›í_¥obe
(
Ál£
 , 
ªçrobe
,

10703 
func_«me
, 
off£t
,

10706 
¥obe_«me
[256];

10708 
	`gí_k¥obe_Àgacy_evít_«me
(
¥obe_«me
, (probe_name),

10709 
func_«me
, 
off£t
);

10711 
Àgacy_¥obe
 = 
	`°rdup
(
¥obe_«me
);

10712 i‡(!
Àgacy_¥obe
)

10713  
	`libbpf_îr_±r
(-
ENOMEM
);

10715 
pfd
 = 
	`≥rf_evít_k¥obe_›í_Àgacy
(
Àgacy_¥obe
, 
ªçrobe
, 
func_«me
,

10716 
off£t
, -1 );

10718 i‡(
pfd
 < 0) {

10719 
îr
 = -
î∫o
;

10720 
	`¥_w¨n
("prog '%s': failedÅo create %s '%s+0x%zx'ÖerfÉvent: %s\n",

10721 
¥og
->
«me
, 
ªçrobe
 ? "kretprobe" : "kprobe",

10722 
func_«me
, 
off£t
,

10723 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

10724 
îr_out
;

10726 
lök
 = 
	`bpf_¥ogøm__©èch_≥rf_evít_›ts
(
¥og
, 
pfd
, &
≥_›ts
);

10727 
îr
 = 
	`libbpf_gë_îr‹
(
lök
);

10728 i‡(
îr
) {

10729 
	`˛o£
(
pfd
);

10730 
	`¥_w¨n
("prog '%s': failedÅoáttachÅo %s '%s+0x%zx': %s\n",

10731 
¥og
->
«me
, 
ªçrobe
 ? "kretprobe" : "kprobe",

10732 
func_«me
, 
off£t
,

10733 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

10734 
îr_out
;

10736 i‡(
Àgacy
) {

10737 
bpf_lök_≥rf
 *
≥rf_lök
 = 
	`c⁄èöî_of
(
lök
, bpf_link_perf,Üink);

10739 
≥rf_lök
->
Àgacy_¥obe_«me
 = 
Àgacy_¥obe
;

10740 
≥rf_lök
->
Àgacy_is_k¥obe
 = 
åue
;

10741 
≥rf_lök
->
Àgacy_is_ªçrobe
 = 
ªçrobe
;

10744  
lök
;

10745 
îr_out
:

10746 
	`‰ì
(
Àgacy_¥obe
);

10747  
	`libbpf_îr_±r
(
îr
);

10748 
	}
}

10750 
bpf_lök
 *
	$bpf_¥ogøm__©èch_k¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
,

10751 
boﬁ
 
ªçrobe
,

10752 c⁄° *
func_«me
)

10754 
	`DECLARE_LIBBPF_OPTS
(
bpf_k¥obe_›ts
, 
›ts
,

10755 .
ªçrobe
 =Ñetprobe,

10758  
	`bpf_¥ogøm__©èch_k¥obe_›ts
(
¥og
, 
func_«me
, &
›ts
);

10759 
	}
}

10762 
boﬁ
 
	$glob_m©ch
(c⁄° *
°r
, c⁄° *
∑t
)

10764 *
°r
 && *
∑t
 && *pat != '*') {

10765 i‡(*
∑t
 == '?') {

10766 
°r
++;

10767 
∑t
++;

10770 i‡(*
°r
 !*
∑t
)

10771  
Ál£
;

10772 
°r
++;

10773 
∑t
++;

10776 i‡(*
∑t
 == '*') {

10777 *
∑t
 == '*')

10778 
∑t
++;

10779 i‡(!*
∑t
)

10780  
åue
;

10781 *
°r
)

10782 i‡(
	`glob_m©ch
(
°r
++, 
∑t
))

10783  
åue
;

10785  !*
°r
 && !*
∑t
;

10786 
	}
}

10788 
	sk¥obe_mu…i_ªsﬁve
 {

10789 c⁄° *
	m∑âîn
;

10790 *
	maddrs
;

10791 
size_t
 
	mˇp
;

10792 
size_t
 
	m˙t
;

10796 
	$ªsﬁve_k¥obe_mu…i_cb
(
sym_addr
, 
sym_ty≥
,

10797 c⁄° *
sym_«me
, *
˘x
)

10799 
k¥obe_mu…i_ªsﬁve
 *
ªs
 = 
˘x
;

10800 
îr
;

10802 i‡(!
	`glob_m©ch
(
sym_«me
, 
ªs
->
∑âîn
))

10805 
îr
 = 
	`libbpf_ísuª_mem
((**Ë&
ªs
->
addrs
, &ªs->
ˇp
, (),

10806 
ªs
->
˙t
 + 1);

10807 i‡(
îr
)

10808  
îr
;

10810 
ªs
->
addrs
[ªs->
˙t
++] = (Ë
sym_addr
;

10812 
	}
}

10814 
bpf_lök
 *

10815 
	$bpf_¥ogøm__©èch_k¥obe_mu…i_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
,

10816 c⁄° *
∑âîn
,

10817 c⁄° 
bpf_k¥obe_mu…i_›ts
 *
›ts
)

10819 
	`LIBBPF_OPTS
(
bpf_lök_¸óã_›ts
, 
l›ts
);

10820 
k¥obe_mu…i_ªsﬁve
 
ªs
 = {

10821 .
∑âîn
 =Öattern,

10823 
bpf_lök
 *
lök
 = 
NULL
;

10824 
îrmsg
[
STRERR_BUFSIZE
];

10825 c⁄° *
addrs
;

10826 
îr
, 
lök_fd
, 
¥og_fd
;

10827 c⁄° 
__u64
 *
cookõs
;

10828 c⁄° **
syms
;

10829 
boﬁ
 
ªçrobe
;

10830 
size_t
 
˙t
;

10832 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_k¥obe_mu…i_›ts
))

10833  
	`libbpf_îr_±r
(-
EINVAL
);

10835 
syms
 = 
	`OPTS_GET
(
›ts
, syms, 
Ál£
);

10836 
addrs
 = 
	`OPTS_GET
(
›ts
,áddrs, 
Ál£
);

10837 
˙t
 = 
	`OPTS_GET
(
›ts
, c¡, 
Ál£
);

10838 
cookõs
 = 
	`OPTS_GET
(
›ts
, cookõs, 
Ál£
);

10840 i‡(!
∑âîn
 && !
addrs
 && !
syms
)

10841  
	`libbpf_îr_±r
(-
EINVAL
);

10842 i‡(
∑âîn
 && (
addrs
 || 
syms
 || 
cookõs
 || 
˙t
))

10843  
	`libbpf_îr_±r
(-
EINVAL
);

10844 i‡(!
∑âîn
 && !
˙t
)

10845  
	`libbpf_îr_±r
(-
EINVAL
);

10846 i‡(
addrs
 && 
syms
)

10847  
	`libbpf_îr_±r
(-
EINVAL
);

10849 i‡(
∑âîn
) {

10850 
îr
 = 
	`libbpf_kÆlsyms_∑r£
(
ªsﬁve_k¥obe_mu…i_cb
, &
ªs
);

10851 i‡(
îr
)

10852 
îr‹
;

10853 i‡(!
ªs
.
˙t
) {

10854 
îr
 = -
ENOENT
;

10855 
îr‹
;

10857 
addrs
 = 
ªs
.addrs;

10858 
˙t
 = 
ªs
.cnt;

10861 
ªçrobe
 = 
	`OPTS_GET
(
›ts
,Ñë¥obe, 
Ál£
);

10863 
l›ts
.
k¥obe_mu…i
.
syms
 = syms;

10864 
l›ts
.
k¥obe_mu…i
.
addrs
 =áddrs;

10865 
l›ts
.
k¥obe_mu…i
.
cookõs
 = cookies;

10866 
l›ts
.
k¥obe_mu…i
.
˙t
 = cnt;

10867 
l›ts
.
k¥obe_mu…i
.
Êags
 = 
ªçrobe
 ? 
BPF_F_KPROBE_MULTI_RETURN
 : 0;

10869 
lök
 = 
	`ˇŒoc
(1, (*link));

10870 i‡(!
lök
) {

10871 
îr
 = -
ENOMEM
;

10872 
îr‹
;

10874 
lök
->
dëach
 = &
bpf_lök__dëach_fd
;

10876 
¥og_fd
 = 
	`bpf_¥ogøm__fd
(
¥og
);

10877 
lök_fd
 = 
	`bpf_lök_¸óã
(
¥og_fd
, 0, 
BPF_TRACE_KPROBE_MULTI
, &
l›ts
);

10878 i‡(
lök_fd
 < 0) {

10879 
îr
 = -
î∫o
;

10880 
	`¥_w¨n
("prog '%s': failedÅoáttach: %s\n",

10881 
¥og
->
«me
, 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

10882 
îr‹
;

10884 
lök
->
fd
 = 
lök_fd
;

10885 
	`‰ì
(
ªs
.
addrs
);

10886  
lök
;

10888 
îr‹
:

10889 
	`‰ì
(
lök
);

10890 
	`‰ì
(
ªs
.
addrs
);

10891  
	`libbpf_îr_±r
(
îr
);

10892 
	}
}

10894 
	$©èch_k¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
)

10896 
	`DECLARE_LIBBPF_OPTS
(
bpf_k¥obe_›ts
, 
›ts
);

10897 
off£t
 = 0;

10898 c⁄° *
func_«me
;

10899 *
func
;

10900 
n
;

10902 *
lök
 = 
NULL
;

10905 i‡(
	`°rcmp
(
¥og
->
£c_«me
, "kprobe") == 0 || strcmp(prog->sec_name, "kretprobe") == 0)

10908 
›ts
.
ªçrobe
 = 
	`°r_has_pfx
(
¥og
->
£c_«me
, "kretprobe/");

10909 i‡(
›ts
.
ªçrobe
)

10910 
func_«me
 = 
¥og
->
£c_«me
 + ("kretprobe/") - 1;

10912 
func_«me
 = 
¥og
->
£c_«me
 + ("kprobe/") - 1;

10914 
n
 = 
	`ssˇnf
(
func_«me
, "%m[a-zA-Z0-9_.]+%li", &
func
, &
off£t
);

10915 i‡(
n
 < 1) {

10916 
	`¥_w¨n
("k¥obê«mêi†övÆid: %s\n", 
func_«me
);

10917  -
EINVAL
;

10919 i‡(
›ts
.
ªçrobe
 && 
off£t
 != 0) {

10920 
	`‰ì
(
func
);

10921 
	`¥_w¨n
("kretprobes doÇot support offset specification\n");

10922  -
EINVAL
;

10925 
›ts
.
off£t
 = offset;

10926 *
lök
 = 
	`bpf_¥ogøm__©èch_k¥obe_›ts
(
¥og
, 
func
, &
›ts
);

10927 
	`‰ì
(
func
);

10928  
	`libbpf_gë_îr‹
(*
lök
);

10929 
	}
}

10931 
	$©èch_k¥obe_mu…i
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
)

10933 
	`LIBBPF_OPTS
(
bpf_k¥obe_mu…i_›ts
, 
›ts
);

10934 c⁄° *
•ec
;

10935 *
∑âîn
;

10936 
n
;

10938 *
lök
 = 
NULL
;

10941 i‡(
	`°rcmp
(
¥og
->
£c_«me
, "kprobe.multi") == 0 ||

10942 
	`°rcmp
(
¥og
->
£c_«me
, "kretprobe.multi") == 0)

10945 
›ts
.
ªçrobe
 = 
	`°r_has_pfx
(
¥og
->
£c_«me
, "kretprobe.multi/");

10946 i‡(
›ts
.
ªçrobe
)

10947 
•ec
 = 
¥og
->
£c_«me
 + ("kretprobe.multi/") - 1;

10949 
•ec
 = 
¥og
->
£c_«me
 + ("kprobe.multi/") - 1;

10951 
n
 = 
	`ssˇnf
(
•ec
, "%m[a-zA-Z0-9_.*?]", &
∑âîn
);

10952 i‡(
n
 < 1) {

10953 
	`¥_w¨n
("k¥obêmu…ò∑âî¿i†övÆid: %s\n", 
∑âîn
);

10954  -
EINVAL
;

10957 *
lök
 = 
	`bpf_¥ogøm__©èch_k¥obe_mu…i_›ts
(
¥og
, 
∑âîn
, &
›ts
);

10958 
	`‰ì
(
∑âîn
);

10959  
	`libbpf_gë_îr‹
(*
lök
);

10960 
	}
}

10962 
	$gí_u¥obe_Àgacy_evít_«me
(*
buf
, 
size_t
 
buf_sz
,

10963 c⁄° *
bö¨y_∑th
, 
uöt64_t
 
off£t
)

10965 
i
;

10967 
	`¢¥ötf
(
buf
, 
buf_sz
, "libbpf_%u_%s_0x%zx", 
	`gëpid
(), 
bö¨y_∑th
, (
size_t
)
off£t
);

10970 
i
 = 0; 
buf
[i]; i++) {

10971 i‡(!
	`iß um
(
buf
[
i
]))

10972 
buf
[
i
] = '_';

10974 
	}
}

10976 
ölöe
 
	$add_u¥obe_evít_Àgacy
(c⁄° *
¥obe_«me
, 
boﬁ
 
ªçrobe
,

10977 c⁄° *
bö¨y_∑th
, 
size_t
 
off£t
)

10979 c⁄° *
fûe
 = "/sys/kernel/debug/tracing/uprobe_events";

10981  
	`≠≥nd_to_fûe
(
fûe
, "%c:%s/%s %s:0x%zx",

10982 
ªçrobe
 ? 'r' : 'p',

10983 
ªçrobe
 ? "uretprobes" : "uprobes",

10984 
¥obe_«me
, 
bö¨y_∑th
, 
off£t
);

10985 
	}
}

10987 
ölöe
 
	$ªmove_u¥obe_evít_Àgacy
(c⁄° *
¥obe_«me
, 
boﬁ
 
ªçrobe
)

10989 c⁄° *
fûe
 = "/sys/kernel/debug/tracing/uprobe_events";

10991  
	`≠≥nd_to_fûe
(
fûe
, "-:%s/%s", 
ªçrobe
 ? "uªçrobes" : "u¥obes", 
¥obe_«me
);

10992 
	}
}

10994 
	$dëîmöe_u¥obe_≥rf_ty≥_Àgacy
(c⁄° *
¥obe_«me
, 
boﬁ
 
ªçrobe
)

10996 
fûe
[512];

10998 
	`¢¥ötf
(
fûe
, (file),

11000 
ªçrobe
 ? "uªçrobes" : "u¥obes", 
¥obe_«me
);

11002  
	`∑r£_uöt_‰om_fûe
(
fûe
, "%d\n");

11003 
	}
}

11005 
	$≥rf_evít_u¥obe_›í_Àgacy
(c⁄° *
¥obe_«me
, 
boﬁ
 
ªçrobe
,

11006 c⁄° *
bö¨y_∑th
, 
size_t
 
off£t
, 
pid
)

11008 
≥rf_evít_©å
 
©å
;

11009 
ty≥
, 
pfd
, 
îr
;

11011 
îr
 = 
	`add_u¥obe_evít_Àgacy
(
¥obe_«me
, 
ªçrobe
, 
bö¨y_∑th
, 
off£t
);

11012 i‡(
îr
 < 0) {

11013 
	`¥_w¨n
("failedÅoáddÜegacy uprobeÉvent for %s:0x%zx: %d\n",

11014 
bö¨y_∑th
, (
size_t
)
off£t
, 
îr
);

11015  
îr
;

11017 
ty≥
 = 
	`dëîmöe_u¥obe_≥rf_ty≥_Àgacy
(
¥obe_«me
, 
ªçrobe
);

11018 i‡(
ty≥
 < 0) {

11019 
	`¥_w¨n
("failedÅo determineÜegacy uprobeÉvent id for %s:0x%zx: %d\n",

11020 
bö¨y_∑th
, 
off£t
, 
îr
);

11021  
ty≥
;

11024 
	`mem£t
(&
©å
, 0, (attr));

11025 
©å
.
size
 = (attr);

11026 
©å
.
c⁄fig
 = 
ty≥
;

11027 
©å
.
ty≥
 = 
PERF_TYPE_TRACEPOINT
;

11029 
pfd
 = 
	`sysˇŒ
(
__NR_≥rf_evít_›í
, &
©å
,

11030 
pid
 < 0 ? -1 :Öid,

11031 
pid
 == -1 ? 0 : -1,

11032 -1 , 
PERF_FLAG_FD_CLOEXEC
);

11033 i‡(
pfd
 < 0) {

11034 
îr
 = -
î∫o
;

11035 
	`¥_w¨n
("Àgacy u¥obê≥rf_evít_›í(ËÁûed: %d\n", 
îr
);

11036  
îr
;

11038  
pfd
;

11039 
	}
}

11045 
	$ñf_föd_ªœtive_off£t
(c⁄° *
fûíame
, 
Elf
 *
ñf
, 
addr
)

11047 
size_t
 
n
;

11048 
i
;

11050 i‡(
	`ñf_gëphd∫um
(
ñf
, &
n
)) {

11051 
	`¥_w¨n
("ñf: faûedÅÿfödÖrogøm hódî†f‹ '%s': %s\n", 
fûíame
,

11052 
	`ñf_îrmsg
(-1));

11053  -
ENOENT
;

11056 
i
 = 0; i < 
n
; i++) {

11057 
£g_°¨t
, 
£g_íd
, 
£g_off£t
;

11058 
GElf_Phdr
 
phdr
;

11060 i‡(!
	`gñf_gëphdr
(
ñf
, 
i
, &
phdr
)) {

11061 
	`¥_w¨n
("ñf: faûedÅÿgëÖrogøm hódî %d from '%s': %s\n", 
i
, 
fûíame
,

11062 
	`ñf_îrmsg
(-1));

11063  -
ENOENT
;

11065 i‡(
phdr
.
p_ty≥
 !
PT_LOAD
 || !’hdr.
p_Êags
 & 
PF_X
))

11068 
£g_°¨t
 = 
phdr
.
p_vaddr
;

11069 
£g_íd
 = 
£g_°¨t
 + 
phdr
.
p_memsz
;

11070 
£g_off£t
 = 
phdr
.
p_off£t
;

11071 i‡(
addr
 >
£g_°¨t
 &&ádd∏< 
£g_íd
)

11072  
addr
 - 
£g_°¨t
 + 
£g_off£t
;

11074 
	`¥_w¨n
("ñf: faûedÅÿfödÖrog hódî c⁄èöög 0x%lx i¿'%s'\n", 
addr
, 
fûíame
);

11075  -
ENOENT
;

11076 
	}
}

11079 
Elf_S˙
 *
	$ñf_föd_√xt_s˙_by_ty≥
(
Elf
 *
ñf
, 
sh_ty≥
, 
Elf_S˙
 *
s˙
)

11081 (
s˙
 = 
	`ñf_√xts˙
(
ñf
, s˙)Ë!
NULL
) {

11082 
GElf_Shdr
 
sh
;

11084 i‡(!
	`gñf_gëshdr
(
s˙
, &
sh
))

11086 i‡(
sh
.
sh_ty≥
 == sh_type)

11087  
s˙
;

11089  
NULL
;

11090 
	}
}

11095 
	$ñf_föd_func_off£t
(c⁄° *
bö¨y_∑th
, c⁄° *
«me
)

11097 
fd
, 
i
, 
sh_ty≥s
[2] = { 
SHT_DYNSYM
, 
SHT_SYMTAB
 };

11098 
boﬁ
 
is_sh¨ed_lib
, 
is_«me_quÆifõd
;

11099 
îrmsg
[
STRERR_BUFSIZE
];

11100 
ªt
 = -
ENOENT
;

11101 
size_t
 
«me_Àn
;

11102 
GElf_Ehdr
 
ehdr
;

11103 
Elf
 *
ñf
;

11105 
fd
 = 
	`›í
(
bö¨y_∑th
, 
O_RDONLY
 | 
O_CLOEXEC
);

11106 i‡(
fd
 < 0) {

11107 
ªt
 = -
î∫o
;

11108 
	`¥_w¨n
("ÁûedÅÿ›í %s: %s\n", 
bö¨y_∑th
,

11109 
	`libbpf_°ªº‹_r
(
ªt
, 
îrmsg
, (errmsg)));

11110  
ªt
;

11112 
ñf
 = 
	`ñf_begö
(
fd
, 
ELF_C_READ_MMAP
, 
NULL
);

11113 i‡(!
ñf
) {

11114 
	`¥_w¨n
("ñf: couldÇŸÑódÉl‡‰om %s: %s\n", 
bö¨y_∑th
, 
	`ñf_îrmsg
(-1));

11115 
	`˛o£
(
fd
);

11116  -
LIBBPF_ERRNO__FORMAT
;

11118 i‡(!
	`gñf_gëehdr
(
ñf
, &
ehdr
)) {

11119 
	`¥_w¨n
("ñf: faûedÅÿgëÉhd∏‰om %s: %s\n", 
bö¨y_∑th
, 
	`ñf_îrmsg
(-1));

11120 
ªt
 = -
LIBBPF_ERRNO__FORMAT
;

11121 
out
;

11124 
is_sh¨ed_lib
 = 
ehdr
.
e_ty≥
 =
ET_DYN
;

11126 
«me_Àn
 = 
	`°æí
(
«me
);

11128 
is_«me_quÆifõd
 = 
	`°r°r
(
«me
, "@@"Ë!
NULL
;

11135 
i
 = 0; i < 
	`ARRAY_SIZE
(
sh_ty≥s
); i++) {

11136 
size_t
 
ƒ_syms
, 
°πabidx
, 
idx
;

11137 
Elf_D©a
 *
symbﬁs
 = 
NULL
;

11138 
Elf_S˙
 *
s˙
 = 
NULL
;

11139 
œ°_böd
 = -1;

11140 c⁄° *
¢ame
;

11141 
GElf_Shdr
 
sh
;

11143 
s˙
 = 
	`ñf_föd_√xt_s˙_by_ty≥
(
ñf
, 
sh_ty≥s
[
i
], 
NULL
);

11144 i‡(!
s˙
) {

11145 
	`¥_debug
("elf: failedÅo find symbolÅable ELF sections in '%s'\n",

11146 
bö¨y_∑th
);

11149 i‡(!
	`gñf_gëshdr
(
s˙
, &
sh
))

11151 
°πabidx
 = 
sh
.
sh_lök
;

11152 
symbﬁs
 = 
	`ñf_gëd©a
(
s˙
, 0);

11153 i‡(!
symbﬁs
) {

11154 
	`¥_w¨n
("elf: failedÅo get symbols for symtab section in '%s': %s\n",

11155 
bö¨y_∑th
, 
	`ñf_îrmsg
(-1));

11156 
ªt
 = -
LIBBPF_ERRNO__FORMAT
;

11157 
out
;

11159 
ƒ_syms
 = 
symbﬁs
->
d_size
 / 
sh
.
sh_ítsize
;

11161 
idx
 = 0; idx < 
ƒ_syms
; idx++) {

11162 
cuº_böd
;

11163 
GElf_Sym
 
sym
;

11165 i‡(!
	`gñf_gësym
(
symbﬁs
, 
idx
, &
sym
))

11168 i‡(
	`GELF_ST_TYPE
(
sym
.
°_öfo
Ë!
STT_FUNC
)

11171 
¢ame
 = 
	`ñf_°Ωå
(
ñf
, 
°πabidx
, 
sym
.
°_«me
);

11172 i‡(!
¢ame
)

11175 
cuº_böd
 = 
	`GELF_ST_BIND
(
sym
.
°_öfo
);

11178 i‡(
	`°∫cmp
(
¢ame
, 
«me
, 
«me_Àn
) != 0)

11183 i‡(!
is_«me_quÆifõd
 && 
¢ame
[
«me_Àn
] != '\0' && sname[name_len] != '@')

11186 i‡(
ªt
 >= 0) {

11188 i‡(
œ°_böd
 !
STB_WEAK
 && 
cuº_böd
 != STB_WEAK) {

11190 
	`¥_w¨n
("elf:ámbiguous match for '%s', '%s' in '%s'\n",

11191 
¢ame
, 
«me
, 
bö¨y_∑th
);

11192 
ªt
 = -
LIBBPF_ERRNO__FORMAT
;

11193 
out
;

11194 } i‡(
cuº_böd
 =
STB_WEAK
) {

11201 
ªt
 = 
sym
.
°_vÆue
;

11202 
œ°_böd
 = 
cuº_böd
;

11205 i‡(
ªt
 > 0 && !
is_sh¨ed_lib
)

11206 
ªt
 = 
	`ñf_föd_ªœtive_off£t
(
bö¨y_∑th
, 
ñf
,Ñet);

11207 i‡(
ªt
 > 0)

11211 i‡(
ªt
 > 0) {

11212 
	`¥_debug
("ñf: symbﬁáddªs†m©ch f‹ '%s' i¿'%s': 0x%lx\n", 
«me
, 
bö¨y_∑th
,

11213 
ªt
);

11215 i‡(
ªt
 == 0) {

11216 
	`¥_w¨n
("ñf: '%s' i†0 i¿symèb f‹ '%s': %s\n", 
«me
, 
bö¨y_∑th
,

11217 
is_sh¨ed_lib
 ? "shouldÇot be 0 iná sharedÜibrary" :

11219 
ªt
 = -
ENOENT
;

11221 
	`¥_w¨n
("ñf: faûedÅÿföd symbﬁ '%s' i¿'%s'\n", 
«me
, 
bö¨y_∑th
);

11224 
out
:

11225 
	`ñf_íd
(
ñf
);

11226 
	`˛o£
(
fd
);

11227  
ªt
;

11228 
	}
}

11230 c⁄° *
	$¨ch_•ecific_lib_∑ths
()

11238 #i‡
	`deföed
(
__x86_64__
)

11240 #ñi‡
	`deföed
(
__i386__
)

11242 #ñi‡
	`deföed
(
__s390x__
)

11244 #ñi‡
	`deföed
(
__s390__
)

11246 #ñi‡
	`deföed
(
__¨m__
Ë&& deföed(
__SOFTFP__
)

11248 #ñi‡
	`deföed
(
__¨m__
Ë&& !deföed(
__SOFTFP__
)

11250 #ñi‡
	`deföed
(
__Ørch64__
)

11252 #ñi‡
	`deföed
(
__mùs__
Ë&& deföed(
__MIPSEL__
Ë&& 
_MIPS_SZLONG
 == 64

11254 #ñi‡
	`deföed
(
__mùs__
Ë&& deföed(
__MIPSEL__
Ë&& 
_MIPS_SZLONG
 == 32

11256 #ñi‡
	`deföed
(
__powîpc64__
Ë&& 
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


11258 #ñi‡
	`deföed
(
__•¨c__
Ë&& deföed(
__¨ch64__
)

11260 #ñi‡
	`deföed
(
__riscv
Ë&& 
__riscv_xÀn
 == 64

11263  
NULL
;

11265 
	}
}

11268 
	$ªsﬁve_fuŒ_∑th
(c⁄° *
fûe
, *
ªsu…
, 
size_t
 
ªsu…_sz
)

11270 c⁄° *
£¨ch_∑ths
[3] = {};

11271 
i
;

11273 i‡(
	`°r_has_sfx
(
fûe
, ".so"Ë|| 
	`°r°r
(file, ".so.")) {

11274 
£¨ch_∑ths
[0] = 
	`gëív
("LD_LIBRARY_PATH");

11275 
£¨ch_∑ths
[1] = "/usr/lib64:/usr/lib";

11276 
£¨ch_∑ths
[2] = 
	`¨ch_•ecific_lib_∑ths
();

11278 
£¨ch_∑ths
[0] = 
	`gëív
("PATH");

11279 
£¨ch_∑ths
[1] = "/usr/bin:/usr/sbin";

11282 
i
 = 0; i < 
	`ARRAY_SIZE
(
£¨ch_∑ths
); i++) {

11283 c⁄° *
s
;

11285 i‡(!
£¨ch_∑ths
[
i
])

11287 
s
 = 
£¨ch_∑ths
[
i
]; s !
NULL
; s = 
	`°rchr
(s, ':')) {

11288 *
√xt_∑th
;

11289 
£g_Àn
;

11291 i‡(
s
[0] == ':')

11292 
s
++;

11293 
√xt_∑th
 = 
	`°rchr
(
s
, ':');

11294 
£g_Àn
 = 
√xt_∑th
 ?Çext_∑th - 
s
 : 
	`°æí
(s);

11295 i‡(!
£g_Àn
)

11297 
	`¢¥ötf
(
ªsu…
, 
ªsu…_sz
, "%.*s/%s", 
£g_Àn
, 
s
, 
fûe
);

11299 i‡(
	`ac˚ss
(
ªsu…
, 
R_OK
 | 
X_OK
) < 0)

11301 
	`¥_debug
("ªsﬁved '%s'Åÿ'%s'\n", 
fûe
, 
ªsu…
);

11305  -
ENOENT
;

11306 
	}
}

11308 
LIBBPF_API
 
bpf_lök
 *

11309 
	$bpf_¥ogøm__©èch_u¥obe_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
pid_t
 
pid
,

11310 c⁄° *
bö¨y_∑th
, 
size_t
 
func_off£t
,

11311 c⁄° 
bpf_u¥obe_›ts
 *
›ts
)

11313 
	`DECLARE_LIBBPF_OPTS
(
bpf_≥rf_evít_›ts
, 
≥_›ts
);

11314 
îrmsg
[
STRERR_BUFSIZE
], *
Àgacy_¥obe
 = 
NULL
;

11315 
fuŒ_bö¨y_∑th
[
PATH_MAX
];

11316 
bpf_lök
 *
lök
;

11317 
size_t
 
ªf_˘r_off
;

11318 
pfd
, 
îr
;

11319 
boﬁ
 
ªçrobe
, 
Àgacy
;

11320 c⁄° *
func_«me
;

11322 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_u¥obe_›ts
))

11323  
	`libbpf_îr_±r
(-
EINVAL
);

11325 
ªçrobe
 = 
	`OPTS_GET
(
›ts
,Ñë¥obe, 
Ál£
);

11326 
ªf_˘r_off
 = 
	`OPTS_GET
(
›ts
, 
ªf_˘r_off£t
, 0);

11327 
≥_›ts
.
bpf_cookõ
 = 
	`OPTS_GET
(
›ts
, bpf_cookie, 0);

11329 i‡(
bö¨y_∑th
 && !
	`°rchr
(binary_path, '/')) {

11330 
îr
 = 
	`ªsﬁve_fuŒ_∑th
(
bö¨y_∑th
, 
fuŒ_bö¨y_∑th
,

11331 (
fuŒ_bö¨y_∑th
));

11332 i‡(
îr
) {

11333 
	`¥_w¨n
("prog '%s': failedÅoÑesolve fullÖath for '%s': %d\n",

11334 
¥og
->
«me
, 
bö¨y_∑th
, 
îr
);

11335  
	`libbpf_îr_±r
(
îr
);

11337 
bö¨y_∑th
 = 
fuŒ_bö¨y_∑th
;

11339 
func_«me
 = 
	`OPTS_GET
(
›ts
, func_«me, 
NULL
);

11340 i‡(
func_«me
) {

11341 
sym_off
;

11343 i‡(!
bö¨y_∑th
) {

11344 
	`¥_w¨n
("prog '%s':Çame-basedáttachÑequires binary_path\n",

11345 
¥og
->
«me
);

11346  
	`libbpf_îr_±r
(-
EINVAL
);

11348 
sym_off
 = 
	`ñf_föd_func_off£t
(
bö¨y_∑th
, 
func_«me
);

11349 i‡(
sym_off
 < 0)

11350  
	`libbpf_îr_±r
(
sym_off
);

11351 
func_off£t
 +
sym_off
;

11354 
Àgacy
 = 
	`dëîmöe_u¥obe_≥rf_ty≥
() < 0;

11355 i‡(!
Àgacy
) {

11356 
pfd
 = 
	`≥rf_evít_›í_¥obe
(
åue
 , 
ªçrobe
, 
bö¨y_∑th
,

11357 
func_off£t
, 
pid
, 
ªf_˘r_off
);

11359 
¥obe_«me
[
PATH_MAX
 + 64];

11361 i‡(
ªf_˘r_off
)

11362  
	`libbpf_îr_±r
(-
EINVAL
);

11364 
	`gí_u¥obe_Àgacy_evít_«me
(
¥obe_«me
, (probe_name),

11365 
bö¨y_∑th
, 
func_off£t
);

11367 
Àgacy_¥obe
 = 
	`°rdup
(
¥obe_«me
);

11368 i‡(!
Àgacy_¥obe
)

11369  
	`libbpf_îr_±r
(-
ENOMEM
);

11371 
pfd
 = 
	`≥rf_evít_u¥obe_›í_Àgacy
(
Àgacy_¥obe
, 
ªçrobe
,

11372 
bö¨y_∑th
, 
func_off£t
, 
pid
);

11374 i‡(
pfd
 < 0) {

11375 
îr
 = -
î∫o
;

11376 
	`¥_w¨n
("prog '%s': failedÅo create %s '%s:0x%zx'ÖerfÉvent: %s\n",

11377 
¥og
->
«me
, 
ªçrobe
 ? "uretprobe" : "uprobe",

11378 
bö¨y_∑th
, 
func_off£t
,

11379 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

11380 
îr_out
;

11383 
lök
 = 
	`bpf_¥ogøm__©èch_≥rf_evít_›ts
(
¥og
, 
pfd
, &
≥_›ts
);

11384 
îr
 = 
	`libbpf_gë_îr‹
(
lök
);

11385 i‡(
îr
) {

11386 
	`˛o£
(
pfd
);

11387 
	`¥_w¨n
("prog '%s': failedÅoáttachÅo %s '%s:0x%zx': %s\n",

11388 
¥og
->
«me
, 
ªçrobe
 ? "uretprobe" : "uprobe",

11389 
bö¨y_∑th
, 
func_off£t
,

11390 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

11391 
îr_out
;

11393 i‡(
Àgacy
) {

11394 
bpf_lök_≥rf
 *
≥rf_lök
 = 
	`c⁄èöî_of
(
lök
, bpf_link_perf,Üink);

11396 
≥rf_lök
->
Àgacy_¥obe_«me
 = 
Àgacy_¥obe
;

11397 
≥rf_lök
->
Àgacy_is_k¥obe
 = 
Ál£
;

11398 
≥rf_lök
->
Àgacy_is_ªçrobe
 = 
ªçrobe
;

11400  
lök
;

11401 
îr_out
:

11402 
	`‰ì
(
Àgacy_¥obe
);

11403  
	`libbpf_îr_±r
(
îr
);

11405 
	}
}

11417 
	$©èch_u¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
)

11419 
	`DECLARE_LIBBPF_OPTS
(
bpf_u¥obe_›ts
, 
›ts
);

11420 *
¥obe_ty≥
 = 
NULL
, *
bö¨y_∑th
 = NULL, *
func_«me
 = NULL;

11421 
n
, 
ªt
 = -
EINVAL
;

11422 
off£t
 = 0;

11424 *
lök
 = 
NULL
;

11426 
n
 = 
	`ssˇnf
(
¥og
->
£c_«me
, "%m[^/]/%m[^:]:%m[a-zA-Z0-9_.]+%li",

11427 &
¥obe_ty≥
, &
bö¨y_∑th
, &
func_«me
, &
off£t
);

11428 
n
) {

11431 
ªt
 = 0;

11434 
	`¥_w¨n
("prog '%s': section '%s' missing ':function[+offset]' specification\n",

11435 
¥og
->
«me
,Örog->
£c_«me
);

11439 
›ts
.
ªçrobe
 = 
	`°rcmp
(
¥obe_ty≥
, "uretprobe") == 0;

11440 i‡(
›ts
.
ªçrobe
 && 
off£t
 != 0) {

11441 
	`¥_w¨n
("prog '%s': uretprobes doÇot support offset specification\n",

11442 
¥og
->
«me
);

11445 
›ts
.
func_«me
 = func_name;

11446 *
lök
 = 
	`bpf_¥ogøm__©èch_u¥obe_›ts
(
¥og
, -1, 
bö¨y_∑th
, 
off£t
, &
›ts
);

11447 
ªt
 = 
	`libbpf_gë_îr‹
(*
lök
);

11450 
	`¥_w¨n
("¥og '%s': invÆid f‹m© o‡£˘i⁄ deföôi⁄ '%s'\n", 
¥og
->
«me
,

11451 
¥og
->
£c_«me
);

11454 
	`‰ì
(
¥obe_ty≥
);

11455 
	`‰ì
(
bö¨y_∑th
);

11456 
	`‰ì
(
func_«me
);

11458  
ªt
;

11459 
	}
}

11461 
bpf_lök
 *
	$bpf_¥ogøm__©èch_u¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
,

11462 
boﬁ
 
ªçrobe
, 
pid_t
 
pid
,

11463 c⁄° *
bö¨y_∑th
,

11464 
size_t
 
func_off£t
)

11466 
	`DECLARE_LIBBPF_OPTS
(
bpf_u¥obe_›ts
, 
›ts
, .
ªçrobe
 =Ñetprobe);

11468  
	`bpf_¥ogøm__©èch_u¥obe_›ts
(
¥og
, 
pid
, 
bö¨y_∑th
, 
func_off£t
, &
›ts
);

11469 
	}
}

11471 
bpf_lök
 *
	$bpf_¥ogøm__©èch_usdt
(c⁄° 
bpf_¥ogøm
 *
¥og
,

11472 
pid_t
 
pid
, c⁄° *
bö¨y_∑th
,

11473 c⁄° *
usdt_¥ovidî
, c⁄° *
usdt_«me
,

11474 c⁄° 
bpf_usdt_›ts
 *
›ts
)

11476 
ªsﬁved_∑th
[512];

11477 
bpf_obje˘
 *
obj
 = 
¥og
->obj;

11478 
bpf_lök
 *
lök
;

11479 
__u64
 
usdt_cookõ
;

11480 
îr
;

11482 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_u¥obe_›ts
))

11483  
	`libbpf_îr_±r
(-
EINVAL
);

11485 i‡(
	`bpf_¥ogøm__fd
(
¥og
) < 0) {

11486 
	`¥_w¨n
("prog '%s': can'táttach BPFÖrogram w/o FD (did youÜoad it?)\n",

11487 
¥og
->
«me
);

11488  
	`libbpf_îr_±r
(-
EINVAL
);

11491 i‡(!
	`°rchr
(
bö¨y_∑th
, '/')) {

11492 
îr
 = 
	`ªsﬁve_fuŒ_∑th
(
bö¨y_∑th
, 
ªsﬁved_∑th
, (resolved_path));

11493 i‡(
îr
) {

11494 
	`¥_w¨n
("prog '%s': failedÅoÑesolve fullÖath for '%s': %d\n",

11495 
¥og
->
«me
, 
bö¨y_∑th
, 
îr
);

11496  
	`libbpf_îr_±r
(
îr
);

11498 
bö¨y_∑th
 = 
ªsﬁved_∑th
;

11504 i‡(
	`IS_ERR
(
obj
->
usdt_m™
))

11505  
	`libbpf_±r
(
obj
->
usdt_m™
);

11506 i‡(!
obj
->
usdt_m™
) {

11507 
obj
->
usdt_m™
 = 
	`usdt_m™agî_√w
(obj);

11508 i‡(
	`IS_ERR
(
obj
->
usdt_m™
))

11509  
	`libbpf_±r
(
obj
->
usdt_m™
);

11512 
usdt_cookõ
 = 
	`OPTS_GET
(
›ts
, usdt_cookie, 0);

11513 
lök
 = 
	`usdt_m™agî_©èch_usdt
(
obj
->
usdt_m™
, 
¥og
, 
pid
, 
bö¨y_∑th
,

11514 
usdt_¥ovidî
, 
usdt_«me
, 
usdt_cookõ
);

11515 
îr
 = 
	`libbpf_gë_îr‹
(
lök
);

11516 i‡(
îr
)

11517  
	`libbpf_îr_±r
(
îr
);

11518  
lök
;

11519 
	}
}

11521 
	$©èch_usdt
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
)

11523 *
∑th
 = 
NULL
, *
¥ovidî
 = NULL, *
«me
 = NULL;

11524 c⁄° *
£c_«me
;

11525 
n
, 
îr
;

11527 
£c_«me
 = 
	`bpf_¥ogøm__£˘i⁄_«me
(
¥og
);

11528 i‡(
	`°rcmp
(
£c_«me
, "usdt") == 0) {

11530 *
lök
 = 
NULL
;

11534 
n
 = 
	`ssˇnf
(
£c_«me
, "usdt/%m[^:]:%m[^:]:%m[^:]", &
∑th
, &
¥ovidî
, &
«me
);

11535 i‡(
n
 != 3) {

11536 
	`¥_w¨n
("invalid section '%s',Éxpected SEC(\"usdt/<path>:<provider>:<name>\")\n",

11537 
£c_«me
);

11538 
îr
 = -
EINVAL
;

11540 *
lök
 = 
	`bpf_¥ogøm__©èch_usdt
(
¥og
, -1 , 
∑th
,

11541 
¥ovidî
, 
«me
, 
NULL
);

11542 
îr
 = 
	`libbpf_gë_îr‹
(*
lök
);

11544 
	`‰ì
(
∑th
);

11545 
	`‰ì
(
¥ovidî
);

11546 
	`‰ì
(
«me
);

11547  
îr
;

11548 
	}
}

11550 
	$dëîmöe_åa˚poöt_id
(c⁄° *
ç_ˇãg‹y
,

11551 c⁄° *
ç_«me
)

11553 
fûe
[
PATH_MAX
];

11554 
ªt
;

11556 
ªt
 = 
	`¢¥ötf
(
fûe
, (file),

11558 
ç_ˇãg‹y
, 
ç_«me
);

11559 i‡(
ªt
 < 0)

11560  -
î∫o
;

11561 i‡(
ªt
 >(
fûe
)) {

11562 
	`¥_debug
("tracepoint %s/%sÖath isÅooÜong\n",

11563 
ç_ˇãg‹y
, 
ç_«me
);

11564  -
E2BIG
;

11566  
	`∑r£_uöt_‰om_fûe
(
fûe
, "%d\n");

11567 
	}
}

11569 
	$≥rf_evít_›í_åa˚poöt
(c⁄° *
ç_ˇãg‹y
,

11570 c⁄° *
ç_«me
)

11572 
≥rf_evít_©å
 
©å
 = {};

11573 
îrmsg
[
STRERR_BUFSIZE
];

11574 
ç_id
, 
pfd
, 
îr
;

11576 
ç_id
 = 
	`dëîmöe_åa˚poöt_id
(
ç_ˇãg‹y
, 
ç_«me
);

11577 i‡(
ç_id
 < 0) {

11578 
	`¥_w¨n
("failedÅo determineÅracepoint '%s/%s'ÖerfÉvent ID: %s\n",

11579 
ç_ˇãg‹y
, 
ç_«me
,

11580 
	`libbpf_°ªº‹_r
(
ç_id
, 
îrmsg
, (errmsg)));

11581  
ç_id
;

11584 
©å
.
ty≥
 = 
PERF_TYPE_TRACEPOINT
;

11585 
©å
.
size
 = (attr);

11586 
©å
.
c⁄fig
 = 
ç_id
;

11588 
pfd
 = 
	`sysˇŒ
(
__NR_≥rf_evít_›í
, &
©å
, -1 , 0 ,

11589 -1 , 
PERF_FLAG_FD_CLOEXEC
);

11590 i‡(
pfd
 < 0) {

11591 
îr
 = -
î∫o
;

11592 
	`¥_w¨n
("tracepoint '%s/%s'Öerf_event_open() failed: %s\n",

11593 
ç_ˇãg‹y
, 
ç_«me
,

11594 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

11595  
îr
;

11597  
pfd
;

11598 
	}
}

11600 
bpf_lök
 *
	$bpf_¥ogøm__©èch_åa˚poöt_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
,

11601 c⁄° *
ç_ˇãg‹y
,

11602 c⁄° *
ç_«me
,

11603 c⁄° 
bpf_åa˚poöt_›ts
 *
›ts
)

11605 
	`DECLARE_LIBBPF_OPTS
(
bpf_≥rf_evít_›ts
, 
≥_›ts
);

11606 
îrmsg
[
STRERR_BUFSIZE
];

11607 
bpf_lök
 *
lök
;

11608 
pfd
, 
îr
;

11610 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_åa˚poöt_›ts
))

11611  
	`libbpf_îr_±r
(-
EINVAL
);

11613 
≥_›ts
.
bpf_cookõ
 = 
	`OPTS_GET
(
›ts
, bpf_cookie, 0);

11615 
pfd
 = 
	`≥rf_evít_›í_åa˚poöt
(
ç_ˇãg‹y
, 
ç_«me
);

11616 i‡(
pfd
 < 0) {

11617 
	`¥_w¨n
("prog '%s': failedÅo createÅracepoint '%s/%s'ÖerfÉvent: %s\n",

11618 
¥og
->
«me
, 
ç_ˇãg‹y
, 
ç_«me
,

11619 
	`libbpf_°ªº‹_r
(
pfd
, 
îrmsg
, (errmsg)));

11620  
	`libbpf_îr_±r
(
pfd
);

11622 
lök
 = 
	`bpf_¥ogøm__©èch_≥rf_evít_›ts
(
¥og
, 
pfd
, &
≥_›ts
);

11623 
îr
 = 
	`libbpf_gë_îr‹
(
lök
);

11624 i‡(
îr
) {

11625 
	`˛o£
(
pfd
);

11626 
	`¥_w¨n
("prog '%s': failedÅoáttachÅoÅracepoint '%s/%s': %s\n",

11627 
¥og
->
«me
, 
ç_ˇãg‹y
, 
ç_«me
,

11628 
	`libbpf_°ªº‹_r
(
îr
, 
îrmsg
, (errmsg)));

11629  
	`libbpf_îr_±r
(
îr
);

11631  
lök
;

11632 
	}
}

11634 
bpf_lök
 *
	$bpf_¥ogøm__©èch_åa˚poöt
(c⁄° 
bpf_¥ogøm
 *
¥og
,

11635 c⁄° *
ç_ˇãg‹y
,

11636 c⁄° *
ç_«me
)

11638  
	`bpf_¥ogøm__©èch_åa˚poöt_›ts
(
¥og
, 
ç_ˇãg‹y
, 
ç_«me
, 
NULL
);

11639 
	}
}

11641 
	$©èch_ç
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
)

11643 *
£c_«me
, *
ç_ˇt
, *
ç_«me
;

11645 *
lök
 = 
NULL
;

11648 i‡(
	`°rcmp
(
¥og
->
£c_«me
, "tp") == 0 || strcmp(prog->sec_name, "tracepoint") == 0)

11651 
£c_«me
 = 
	`°rdup
(
¥og
->sec_name);

11652 i‡(!
£c_«me
)

11653  -
ENOMEM
;

11656 i‡(
	`°r_has_pfx
(
¥og
->
£c_«me
, "tp/"))

11657 
ç_ˇt
 = 
£c_«me
 + ("tp/") - 1;

11659 
ç_ˇt
 = 
£c_«me
 + ("tracepoint/") - 1;

11660 
ç_«me
 = 
	`°rchr
(
ç_ˇt
, '/');

11661 i‡(!
ç_«me
) {

11662 
	`‰ì
(
£c_«me
);

11663  -
EINVAL
;

11665 *
ç_«me
 = '\0';

11666 
ç_«me
++;

11668 *
lök
 = 
	`bpf_¥ogøm__©èch_åa˚poöt
(
¥og
, 
ç_ˇt
, 
ç_«me
);

11669 
	`‰ì
(
£c_«me
);

11670  
	`libbpf_gë_îr‹
(*
lök
);

11671 
	}
}

11673 
bpf_lök
 *
	$bpf_¥ogøm__©èch_øw_åa˚poöt
(c⁄° 
bpf_¥ogøm
 *
¥og
,

11674 c⁄° *
ç_«me
)

11676 
îrmsg
[
STRERR_BUFSIZE
];

11677 
bpf_lök
 *
lök
;

11678 
¥og_fd
, 
pfd
;

11680 
¥og_fd
 = 
	`bpf_¥ogøm__fd
(
¥og
);

11681 i‡(
¥og_fd
 < 0) {

11682 
	`¥_w¨n
("¥og '%s': c™'à©èch bef‹êlﬂded\n", 
¥og
->
«me
);

11683  
	`libbpf_îr_±r
(-
EINVAL
);

11686 
lök
 = 
	`ˇŒoc
(1, (*link));

11687 i‡(!
lök
)

11688  
	`libbpf_îr_±r
(-
ENOMEM
);

11689 
lök
->
dëach
 = &
bpf_lök__dëach_fd
;

11691 
pfd
 = 
	`bpf_øw_åa˚poöt_›í
(
ç_«me
, 
¥og_fd
);

11692 i‡(
pfd
 < 0) {

11693 
pfd
 = -
î∫o
;

11694 
	`‰ì
(
lök
);

11695 
	`¥_w¨n
("prog '%s': failedÅoáttachÅoÑawÅracepoint '%s': %s\n",

11696 
¥og
->
«me
, 
ç_«me
, 
	`libbpf_°ªº‹_r
(
pfd
, 
îrmsg
, (errmsg)));

11697  
	`libbpf_îr_±r
(
pfd
);

11699 
lök
->
fd
 = 
pfd
;

11700  
lök
;

11701 
	}
}

11703 
	$©èch_øw_ç
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
)

11705 c⁄° *c⁄° 
¥efixes
[] = {

11711 
size_t
 
i
;

11712 c⁄° *
ç_«me
 = 
NULL
;

11714 *
lök
 = 
NULL
;

11716 
i
 = 0; i < 
	`ARRAY_SIZE
(
¥efixes
); i++) {

11717 
size_t
 
pfx_Àn
;

11719 i‡(!
	`°r_has_pfx
(
¥og
->
£c_«me
, 
¥efixes
[
i
]))

11722 
pfx_Àn
 = 
	`°æí
(
¥efixes
[
i
]);

11724 i‡(
¥og
->
£c_«me
[
pfx_Àn
] == '\0')

11727 i‡(
¥og
->
£c_«me
[
pfx_Àn
] != '/')

11730 
ç_«me
 = 
¥og
->
£c_«me
 + 
pfx_Àn
 + 1;

11734 i‡(!
ç_«me
) {

11735 
	`¥_w¨n
("prog '%s': invalid sectionÇame '%s'\n",

11736 
¥og
->
«me
,Örog->
£c_«me
);

11737  -
EINVAL
;

11740 *
lök
 = 
	`bpf_¥ogøm__©èch_øw_åa˚poöt
(
¥og
, 
ç_«me
);

11741  
	`libbpf_gë_îr‹
(
lök
);

11742 
	}
}

11745 
bpf_lök
 *
	$bpf_¥ogøm__©èch_btf_id
(c⁄° 
bpf_¥ogøm
 *
¥og
,

11746 c⁄° 
bpf_åa˚_›ts
 *
›ts
)

11748 
	`LIBBPF_OPTS
(
bpf_lök_¸óã_›ts
, 
lök_›ts
);

11749 
îrmsg
[
STRERR_BUFSIZE
];

11750 
bpf_lök
 *
lök
;

11751 
¥og_fd
, 
pfd
;

11753 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_åa˚_›ts
))

11754  
	`libbpf_îr_±r
(-
EINVAL
);

11756 
¥og_fd
 = 
	`bpf_¥ogøm__fd
(
¥og
);

11757 i‡(
¥og_fd
 < 0) {

11758 
	`¥_w¨n
("¥og '%s': c™'à©èch bef‹êlﬂded\n", 
¥og
->
«me
);

11759  
	`libbpf_îr_±r
(-
EINVAL
);

11762 
lök
 = 
	`ˇŒoc
(1, (*link));

11763 i‡(!
lök
)

11764  
	`libbpf_îr_±r
(-
ENOMEM
);

11765 
lök
->
dëach
 = &
bpf_lök__dëach_fd
;

11768 
lök_›ts
.
åacög
.
cookõ
 = 
	`OPTS_GET
(
›ts
, cookie, 0);

11769 
pfd
 = 
	`bpf_lök_¸óã
(
¥og_fd
, 0, 
	`bpf_¥ogøm__ex≥˘ed_©èch_ty≥
(
¥og
), &
lök_›ts
);

11770 i‡(
pfd
 < 0) {

11771 
pfd
 = -
î∫o
;

11772 
	`‰ì
(
lök
);

11773 
	`¥_w¨n
("prog '%s': failedÅoáttach: %s\n",

11774 
¥og
->
«me
, 
	`libbpf_°ªº‹_r
(
pfd
, 
îrmsg
, (errmsg)));

11775  
	`libbpf_îr_±r
(
pfd
);

11777 
lök
->
fd
 = 
pfd
;

11778  
lök
;

11779 
	}
}

11781 
bpf_lök
 *
	$bpf_¥ogøm__©èch_åa˚
(c⁄° 
bpf_¥ogøm
 *
¥og
)

11783  
	`bpf_¥ogøm__©èch_btf_id
(
¥og
, 
NULL
);

11784 
	}
}

11786 
bpf_lök
 *
	$bpf_¥ogøm__©èch_åa˚_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
,

11787 c⁄° 
bpf_åa˚_›ts
 *
›ts
)

11789  
	`bpf_¥ogøm__©èch_btf_id
(
¥og
, 
›ts
);

11790 
	}
}

11792 
bpf_lök
 *
	$bpf_¥ogøm__©èch_lsm
(c⁄° 
bpf_¥ogøm
 *
¥og
)

11794  
	`bpf_¥ogøm__©èch_btf_id
(
¥og
, 
NULL
);

11795 
	}
}

11797 
	$©èch_åa˚
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
)

11799 *
lök
 = 
	`bpf_¥ogøm__©èch_åa˚
(
¥og
);

11800  
	`libbpf_gë_îr‹
(*
lök
);

11801 
	}
}

11803 
	$©èch_lsm
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
)

11805 *
lök
 = 
	`bpf_¥ogøm__©èch_lsm
(
¥og
);

11806  
	`libbpf_gë_îr‹
(*
lök
);

11807 
	}
}

11809 
bpf_lök
 *

11810 
	$bpf_¥ogøm__©èch_fd
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
èrgë_fd
, 
btf_id
,

11811 c⁄° *
èrgë_«me
)

11813 
	`DECLARE_LIBBPF_OPTS
(
bpf_lök_¸óã_›ts
, 
›ts
,

11814 .
èrgë_btf_id
 = 
btf_id
);

11815 
bpf_©èch_ty≥
 
©èch_ty≥
;

11816 
îrmsg
[
STRERR_BUFSIZE
];

11817 
bpf_lök
 *
lök
;

11818 
¥og_fd
, 
lök_fd
;

11820 
¥og_fd
 = 
	`bpf_¥ogøm__fd
(
¥og
);

11821 i‡(
¥og_fd
 < 0) {

11822 
	`¥_w¨n
("¥og '%s': c™'à©èch bef‹êlﬂded\n", 
¥og
->
«me
);

11823  
	`libbpf_îr_±r
(-
EINVAL
);

11826 
lök
 = 
	`ˇŒoc
(1, (*link));

11827 i‡(!
lök
)

11828  
	`libbpf_îr_±r
(-
ENOMEM
);

11829 
lök
->
dëach
 = &
bpf_lök__dëach_fd
;

11831 
©èch_ty≥
 = 
	`bpf_¥ogøm__ex≥˘ed_©èch_ty≥
(
¥og
);

11832 
lök_fd
 = 
	`bpf_lök_¸óã
(
¥og_fd
, 
èrgë_fd
, 
©èch_ty≥
, &
›ts
);

11833 i‡(
lök_fd
 < 0) {

11834 
lök_fd
 = -
î∫o
;

11835 
	`‰ì
(
lök
);

11836 
	`¥_w¨n
("prog '%s': failedÅoáttachÅo %s: %s\n",

11837 
¥og
->
«me
, 
èrgë_«me
,

11838 
	`libbpf_°ªº‹_r
(
lök_fd
, 
îrmsg
, (errmsg)));

11839  
	`libbpf_îr_±r
(
lök_fd
);

11841 
lök
->
fd
 = 
lök_fd
;

11842  
lök
;

11843 
	}
}

11845 
bpf_lök
 *

11846 
	$bpf_¥ogøm__©èch_cgroup
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cgroup_fd
)

11848  
	`bpf_¥ogøm__©èch_fd
(
¥og
, 
cgroup_fd
, 0, "cgroup");

11849 
	}
}

11851 
bpf_lök
 *

11852 
	$bpf_¥ogøm__©èch_√äs
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
√äs_fd
)

11854  
	`bpf_¥ogøm__©èch_fd
(
¥og
, 
√äs_fd
, 0, "netns");

11855 
	}
}

11857 
bpf_lök
 *
	$bpf_¥ogøm__©èch_xdp
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
ifödex
)

11860  
	`bpf_¥ogøm__©èch_fd
(
¥og
, 
ifödex
, 0, "xdp");

11861 
	}
}

11863 
bpf_lök
 *
	$bpf_¥ogøm__©èch_‰ïœ˚
(c⁄° 
bpf_¥ogøm
 *
¥og
,

11864 
èrgë_fd
,

11865 c⁄° *
©èch_func_«me
)

11867 
btf_id
;

11869 i‡(!!
èrgë_fd
 !!!
©èch_func_«me
) {

11870 
	`¥_w¨n
("prog '%s': supplyÇone or both ofÅarget_fdándáttach_func_name\n",

11871 
¥og
->
«me
);

11872  
	`libbpf_îr_±r
(-
EINVAL
);

11875 i‡(
¥og
->
ty≥
 !
BPF_PROG_TYPE_EXT
) {

11876 
	`¥_w¨n
("prog '%s': only BPF_PROG_TYPE_EXT canáttachás freplace",

11877 
¥og
->
«me
);

11878  
	`libbpf_îr_±r
(-
EINVAL
);

11881 i‡(
èrgë_fd
) {

11882 
btf_id
 = 
	`libbpf_föd_¥og_btf_id
(
©èch_func_«me
, 
èrgë_fd
);

11883 i‡(
btf_id
 < 0)

11884  
	`libbpf_îr_±r
(
btf_id
);

11886  
	`bpf_¥ogøm__©èch_fd
(
¥og
, 
èrgë_fd
, 
btf_id
, "freplace");

11891  
	`bpf_¥ogøm__©èch_åa˚
(
¥og
);

11893 
	}
}

11895 
bpf_lök
 *

11896 
	$bpf_¥ogøm__©èch_ôî
(c⁄° 
bpf_¥ogøm
 *
¥og
,

11897 c⁄° 
bpf_ôî_©èch_›ts
 *
›ts
)

11899 
	`DECLARE_LIBBPF_OPTS
(
bpf_lök_¸óã_›ts
, 
lök_¸óã_›ts
);

11900 
îrmsg
[
STRERR_BUFSIZE
];

11901 
bpf_lök
 *
lök
;

11902 
¥og_fd
, 
lök_fd
;

11903 
__u32
 
èrgë_fd
 = 0;

11905 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_ôî_©èch_›ts
))

11906  
	`libbpf_îr_±r
(-
EINVAL
);

11908 
lök_¸óã_›ts
.
ôî_öfo
 = 
	`OPTS_GET
(
›ts
, 
lök_öfo
, (*)0);

11909 
lök_¸óã_›ts
.
ôî_öfo_Àn
 = 
	`OPTS_GET
(
›ts
, 
lök_öfo_Àn
, 0);

11911 
¥og_fd
 = 
	`bpf_¥ogøm__fd
(
¥og
);

11912 i‡(
¥og_fd
 < 0) {

11913 
	`¥_w¨n
("¥og '%s': c™'à©èch bef‹êlﬂded\n", 
¥og
->
«me
);

11914  
	`libbpf_îr_±r
(-
EINVAL
);

11917 
lök
 = 
	`ˇŒoc
(1, (*link));

11918 i‡(!
lök
)

11919  
	`libbpf_îr_±r
(-
ENOMEM
);

11920 
lök
->
dëach
 = &
bpf_lök__dëach_fd
;

11922 
lök_fd
 = 
	`bpf_lök_¸óã
(
¥og_fd
, 
èrgë_fd
, 
BPF_TRACE_ITER
,

11923 &
lök_¸óã_›ts
);

11924 i‡(
lök_fd
 < 0) {

11925 
lök_fd
 = -
î∫o
;

11926 
	`‰ì
(
lök
);

11927 
	`¥_w¨n
("prog '%s': failedÅoáttachÅo iterator: %s\n",

11928 
¥og
->
«me
, 
	`libbpf_°ªº‹_r
(
lök_fd
, 
îrmsg
, (errmsg)));

11929  
	`libbpf_îr_±r
(
lök_fd
);

11931 
lök
->
fd
 = 
lök_fd
;

11932  
lök
;

11933 
	}
}

11935 
	$©èch_ôî
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cookõ
, 
bpf_lök
 **
lök
)

11937 *
lök
 = 
	`bpf_¥ogøm__©èch_ôî
(
¥og
, 
NULL
);

11938  
	`libbpf_gë_îr‹
(*
lök
);

11939 
	}
}

11941 
bpf_lök
 *
	$bpf_¥ogøm__©èch
(c⁄° 
bpf_¥ogøm
 *
¥og
)

11943 
bpf_lök
 *
lök
 = 
NULL
;

11944 
îr
;

11946 i‡(!
¥og
->
£c_def
 || !¥og->£c_def->
¥og_©èch_‚
)

11947  
	`libbpf_îr_±r
(-
EOPNOTSUPP
);

11949 
îr
 = 
¥og
->
£c_def
->
	`¥og_©èch_‚
’rog,Örog->£c_def->
cookõ
, &
lök
);

11950 i‡(
îr
)

11951  
	`libbpf_îr_±r
(
îr
);

11958 i‡(!
lök
)

11959  
	`libbpf_îr_±r
(-
EOPNOTSUPP
);

11961  
lök
;

11962 
	}
}

11964 
	$bpf_lök__dëach_°ru˘_›s
(
bpf_lök
 *
lök
)

11966 
__u32
 
zîo
 = 0;

11968 i‡(
	`bpf_m≠_dñëe_ñem
(
lök
->
fd
, &
zîo
))

11969  -
î∫o
;

11972 
	}
}

11974 
bpf_lök
 *
	$bpf_m≠__©èch_°ru˘_›s
(c⁄° 
bpf_m≠
 *
m≠
)

11976 
bpf_°ru˘_›s
 *
°_›s
;

11977 
bpf_lök
 *
lök
;

11978 
__u32
 
i
, 
zîo
 = 0;

11979 
îr
;

11981 i‡(!
	`bpf_m≠__is_°ru˘_›s
(
m≠
Ë|| m≠->
fd
 == -1)

11982  
	`libbpf_îr_±r
(-
EINVAL
);

11984 
lök
 = 
	`ˇŒoc
(1, (*link));

11985 i‡(!
lök
)

11986  
	`libbpf_îr_±r
(-
EINVAL
);

11988 
°_›s
 = 
m≠
->st_ops;

11989 
i
 = 0; i < 
	`btf_vÀn
(
°_›s
->
ty≥
); i++) {

11990 
bpf_¥ogøm
 *
¥og
 = 
°_›s
->
¥ogs
[
i
];

11991 *
kîn_d©a
;

11992 
¥og_fd
;

11994 i‡(!
¥og
)

11997 
¥og_fd
 = 
	`bpf_¥ogøm__fd
(
¥og
);

11998 
kîn_d©a
 = 
°_›s
->
kîn_vd©a
 + st_›s->
kîn_func_off
[
i
];

11999 *(*)
kîn_d©a
 = 
¥og_fd
;

12002 
îr
 = 
	`bpf_m≠_upd©e_ñem
(
m≠
->
fd
, &
zîo
, 
°_›s
->
kîn_vd©a
, 0);

12003 i‡(
îr
) {

12004 
îr
 = -
î∫o
;

12005 
	`‰ì
(
lök
);

12006  
	`libbpf_îr_±r
(
îr
);

12009 
lök
->
dëach
 = 
bpf_lök__dëach_°ru˘_›s
;

12010 
lök
->
fd
 = 
m≠
->fd;

12012  
lök
;

12013 
	}
}

12015 
bpf_≥rf_evít_ªt


12016 
	$≥rf_evít_ªad_sim∂e
(*
mm≠_mem
, 
size_t
 
mm≠_size
, size_à
∑ge_size
,

12017 **
c›y_mem
, 
size_t
 *
c›y_size
,

12018 
bpf_≥rf_evít_¥öt_t
 
‚
, *
¥iv©e_d©a
)

12020 
≥rf_evít_mm≠_∑ge
 *
hódî
 = 
mm≠_mem
;

12021 
__u64
 
d©a_hód
 = 
	`rög_buf„r_ªad_hód
(
hódî
);

12022 
__u64
 
d©a_èû
 = 
hódî
->data_tail;

12023 *
ba£
 = ((
__u8
 *)
hódî
Ë+ 
∑ge_size
;

12024 
ªt
 = 
LIBBPF_PERF_EVENT_CONT
;

12025 
≥rf_evít_hódî
 *
ehdr
;

12026 
size_t
 
ehdr_size
;

12028 
d©a_hód
 !
d©a_èû
) {

12029 
ehdr
 = 
ba£
 + (
d©a_èû
 & (
mm≠_size
 - 1));

12030 
ehdr_size
 = 
ehdr
->
size
;

12032 i‡(((*)
ehdr
Ë+ 
ehdr_size
 > 
ba£
 + 
mm≠_size
) {

12033 *
c›y_°¨t
 = 
ehdr
;

12034 
size_t
 
Àn_fú°
 = 
ba£
 + 
mm≠_size
 - 
c›y_°¨t
;

12035 
size_t
 
Àn_£˙d
 = 
ehdr_size
 - 
Àn_fú°
;

12037 i‡(*
c›y_size
 < 
ehdr_size
) {

12038 
	`‰ì
(*
c›y_mem
);

12039 *
c›y_mem
 = 
	`mÆloc
(
ehdr_size
);

12040 i‡(!*
c›y_mem
) {

12041 *
c›y_size
 = 0;

12042 
ªt
 = 
LIBBPF_PERF_EVENT_ERROR
;

12045 *
c›y_size
 = 
ehdr_size
;

12048 
	`mem˝y
(*
c›y_mem
, 
c›y_°¨t
, 
Àn_fú°
);

12049 
	`mem˝y
(*
c›y_mem
 + 
Àn_fú°
, 
ba£
, 
Àn_£˙d
);

12050 
ehdr
 = *
c›y_mem
;

12053 
ªt
 = 
	`‚
(
ehdr
, 
¥iv©e_d©a
);

12054 
d©a_èû
 +
ehdr_size
;

12055 i‡(
ªt
 !
LIBBPF_PERF_EVENT_CONT
)

12059 
	`rög_buf„r_wrôe_èû
(
hódî
, 
d©a_èû
);

12060  
	`libbpf_îr
(
ªt
);

12061 
	}
}

12063 
__©åibuã__
((
Æüs
("perf_event_read_simple")))

12064 
bpf_≥rf_evít_ªt


12065 
bpf_≥rf_evít_ªad_sim∂e
(*
mm≠_mem
, 
size_t
 
mm≠_size
, size_à
∑ge_size
,

12066 **
c›y_mem
, 
size_t
 *
c›y_size
,

12067 
bpf_≥rf_evít_¥öt_t
 
‚
, *
¥iv©e_d©a
);

12069 
	g≥rf_buf„r
;

12071 
	s≥rf_buf„r_∑øms
 {

12072 
≥rf_evít_©å
 *
	m©å
;

12074 
≥rf_buf„r_evít_‚
 
	mevít_cb
;

12076 
≥rf_buf„r_ßm∂e_‚
 
	mßm∂e_cb
;

12077 
≥rf_buf„r_lo°_‚
 
	mlo°_cb
;

12078 *
	m˘x
;

12079 
	m˝u_˙t
;

12080 *
	m˝us
;

12081 *
	mm≠_keys
;

12084 
	s≥rf_˝u_buf
 {

12085 
≥rf_buf„r
 *
	mpb
;

12086 *
	mba£
;

12087 *
	mbuf
;

12088 
size_t
 
	mbuf_size
;

12089 
	mfd
;

12090 
	m˝u
;

12091 
	mm≠_key
;

12094 
	s≥rf_buf„r
 {

12095 
≥rf_buf„r_evít_‚
 
	mevít_cb
;

12096 
≥rf_buf„r_ßm∂e_‚
 
	mßm∂e_cb
;

12097 
≥rf_buf„r_lo°_‚
 
	mlo°_cb
;

12098 *
	m˘x
;

12100 
size_t
 
	m∑ge_size
;

12101 
size_t
 
	mmm≠_size
;

12102 
≥rf_˝u_buf
 **
	m˝u_bufs
;

12103 
ïﬁl_evít
 *
	mevíts
;

12104 
	m˝u_˙t
;

12105 
	mïﬁl_fd
;

12106 
	mm≠_fd
;

12109 
	$≥rf_buf„r__‰ì_˝u_buf
(
≥rf_buf„r
 *
pb
,

12110 
≥rf_˝u_buf
 *
˝u_buf
)

12112 i‡(!
˝u_buf
)

12114 i‡(
˝u_buf
->
ba£
 &&

12115 
	`munm≠
(
˝u_buf
->
ba£
, 
pb
->
mm≠_size
 +Öb->
∑ge_size
))

12116 
	`¥_w¨n
("ÁûedÅÿmunm≠ cpu_bu‡#%d\n", 
˝u_buf
->
˝u
);

12117 i‡(
˝u_buf
->
fd
 >= 0) {

12118 
	`io˘l
(
˝u_buf
->
fd
, 
PERF_EVENT_IOC_DISABLE
, 0);

12119 
	`˛o£
(
˝u_buf
->
fd
);

12121 
	`‰ì
(
˝u_buf
->
buf
);

12122 
	`‰ì
(
˝u_buf
);

12123 
	}
}

12125 
	$≥rf_buf„r__‰ì
(
≥rf_buf„r
 *
pb
)

12127 
i
;

12129 i‡(
	`IS_ERR_OR_NULL
(
pb
))

12131 i‡(
pb
->
˝u_bufs
) {

12132 
i
 = 0; i < 
pb
->
˝u_˙t
; i++) {

12133 
≥rf_˝u_buf
 *
˝u_buf
 = 
pb
->
˝u_bufs
[
i
];

12135 i‡(!
˝u_buf
)

12138 
	`bpf_m≠_dñëe_ñem
(
pb
->
m≠_fd
, &
˝u_buf
->
m≠_key
);

12139 
	`≥rf_buf„r__‰ì_˝u_buf
(
pb
, 
˝u_buf
);

12141 
	`‰ì
(
pb
->
˝u_bufs
);

12143 i‡(
pb
->
ïﬁl_fd
 >= 0)

12144 
	`˛o£
(
pb
->
ïﬁl_fd
);

12145 
	`‰ì
(
pb
->
evíts
);

12146 
	`‰ì
(
pb
);

12147 
	}
}

12149 
≥rf_˝u_buf
 *

12150 
	$≥rf_buf„r__›í_˝u_buf
(
≥rf_buf„r
 *
pb
, 
≥rf_evít_©å
 *
©å
,

12151 
˝u
, 
m≠_key
)

12153 
≥rf_˝u_buf
 *
˝u_buf
;

12154 
msg
[
STRERR_BUFSIZE
];

12155 
îr
;

12157 
˝u_buf
 = 
	`ˇŒoc
(1, (*cpu_buf));

12158 i‡(!
˝u_buf
)

12159  
	`ERR_PTR
(-
ENOMEM
);

12161 
˝u_buf
->
pb
 =Öb;

12162 
˝u_buf
->
˝u
 = cpu;

12163 
˝u_buf
->
m≠_key
 = map_key;

12165 
˝u_buf
->
fd
 = 
	`sysˇŒ
(
__NR_≥rf_evít_›í
, 
©å
, -1 , 
˝u
,

12166 -1, 
PERF_FLAG_FD_CLOEXEC
);

12167 i‡(
˝u_buf
->
fd
 < 0) {

12168 
îr
 = -
î∫o
;

12169 
	`¥_w¨n
("failedÅo openÖerf bufferÉvent on cpu #%d: %s\n",

12170 
˝u
, 
	`libbpf_°ªº‹_r
(
îr
, 
msg
, (msg)));

12171 
îr‹
;

12174 
˝u_buf
->
ba£
 = 
	`mm≠
(
NULL
, 
pb
->
mm≠_size
 +Öb->
∑ge_size
,

12175 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
,

12176 
˝u_buf
->
fd
, 0);

12177 i‡(
˝u_buf
->
ba£
 =
MAP_FAILED
) {

12178 
˝u_buf
->
ba£
 = 
NULL
;

12179 
îr
 = -
î∫o
;

12180 
	`¥_w¨n
("failedÅo mmapÖerf buffer on cpu #%d: %s\n",

12181 
˝u
, 
	`libbpf_°ªº‹_r
(
îr
, 
msg
, (msg)));

12182 
îr‹
;

12185 i‡(
	`io˘l
(
˝u_buf
->
fd
, 
PERF_EVENT_IOC_ENABLE
, 0) < 0) {

12186 
îr
 = -
î∫o
;

12187 
	`¥_w¨n
("failedÅoÉnableÖerf bufferÉvent on cpu #%d: %s\n",

12188 
˝u
, 
	`libbpf_°ªº‹_r
(
îr
, 
msg
, (msg)));

12189 
îr‹
;

12192  
˝u_buf
;

12194 
îr‹
:

12195 
	`≥rf_buf„r__‰ì_˝u_buf
(
pb
, 
˝u_buf
);

12196  (
≥rf_˝u_buf
 *)
	`ERR_PTR
(
îr
);

12197 
	}
}

12199 
≥rf_buf„r
 *
__≥rf_buf„r__√w
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

12200 
≥rf_buf„r_∑øms
 *
p
);

12202 
	$DEFAULT_VERSION
(
≥rf_buf„r__√w_v0_6_0
, 
≥rf_buf„r__√w
, 
LIBBPF_0
.6.0)

12203 
≥rf_buf„r
 *
	$≥rf_buf„r__√w_v0_6_0
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

12204 
≥rf_buf„r_ßm∂e_‚
 
ßm∂e_cb
,

12205 
≥rf_buf„r_lo°_‚
 
lo°_cb
,

12206 *
˘x
,

12207 c⁄° 
≥rf_buf„r_›ts
 *
›ts
)

12209 
≥rf_buf„r_∑øms
 
p
 = {};

12210 
≥rf_evít_©å
 
©å
 = {};

12212 i‡(!
	`OPTS_VALID
(
›ts
, 
≥rf_buf„r_›ts
))

12213  
	`libbpf_îr_±r
(-
EINVAL
);

12215 
©å
.
c⁄fig
 = 
PERF_COUNT_SW_BPF_OUTPUT
;

12216 
©å
.
ty≥
 = 
PERF_TYPE_SOFTWARE
;

12217 
©å
.
ßm∂e_ty≥
 = 
PERF_SAMPLE_RAW
;

12218 
©å
.
ßm∂e_≥riod
 = 1;

12219 
©å
.
wakeup_evíts
 = 1;

12221 
p
.
©å
 = &attr;

12222 
p
.
ßm∂e_cb
 = sample_cb;

12223 
p
.
lo°_cb
 =Üost_cb;

12224 
p
.
˘x
 = ctx;

12226  
	`libbpf_±r
(
	`__≥rf_buf„r__√w
(
m≠_fd
, 
∑ge_˙t
, &
p
));

12227 
	}
}

12229 
	$COMPAT_VERSION
(
≥rf_buf„r__√w_dïªˇãd
, 
≥rf_buf„r__√w
, 
LIBBPF_0
.0.4)

12230 
≥rf_buf„r
 *
	$≥rf_buf„r__√w_dïªˇãd
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

12231 c⁄° 
≥rf_buf„r_›ts
 *
›ts
)

12233  
	`≥rf_buf„r__√w_v0_6_0
(
m≠_fd
, 
∑ge_˙t
,

12234 
›ts
 ? o±s->
ßm∂e_cb
 : 
NULL
,

12235 
›ts
 ? o±s->
lo°_cb
 : 
NULL
,

12236 
›ts
 ? o±s->
˘x
 : 
NULL
,

12237 
NULL
);

12238 
	}
}

12240 
	$DEFAULT_VERSION
(
≥rf_buf„r__√w_øw_v0_6_0
, 
≥rf_buf„r__√w_øw
, 
LIBBPF_0
.6.0)

12241 
≥rf_buf„r
 *
	$≥rf_buf„r__√w_øw_v0_6_0
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

12242 
≥rf_evít_©å
 *
©å
,

12243 
≥rf_buf„r_evít_‚
 
evít_cb
, *
˘x
,

12244 c⁄° 
≥rf_buf„r_øw_›ts
 *
›ts
)

12246 
≥rf_buf„r_∑øms
 
p
 = {};

12248 i‡(!
©å
)

12249  
	`libbpf_îr_±r
(-
EINVAL
);

12251 i‡(!
	`OPTS_VALID
(
›ts
, 
≥rf_buf„r_øw_›ts
))

12252  
	`libbpf_îr_±r
(-
EINVAL
);

12254 
p
.
©å
 =áttr;

12255 
p
.
evít_cb
 =Évent_cb;

12256 
p
.
˘x
 = ctx;

12257 
p
.
˝u_˙t
 = 
	`OPTS_GET
(
›ts
, cpu_cnt, 0);

12258 
p
.
˝us
 = 
	`OPTS_GET
(
›ts
, cpus, 
NULL
);

12259 
p
.
m≠_keys
 = 
	`OPTS_GET
(
›ts
, m≠_keys, 
NULL
);

12261  
	`libbpf_±r
(
	`__≥rf_buf„r__√w
(
m≠_fd
, 
∑ge_˙t
, &
p
));

12262 
	}
}

12264 
	$COMPAT_VERSION
(
≥rf_buf„r__√w_øw_dïªˇãd
, 
≥rf_buf„r__√w_øw
, 
LIBBPF_0
.0.4)

12265 
≥rf_buf„r
 *
	$≥rf_buf„r__√w_øw_dïªˇãd
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

12266 c⁄° 
≥rf_buf„r_øw_›ts
 *
›ts
)

12268 
	`LIBBPF_OPTS
(
≥rf_buf„r_øw_›ts
, 
ö√r_›ts
,

12269 .
˝u_˙t
 = 
›ts
->cpu_cnt,

12270 .
˝us
 = 
›ts
->cpus,

12271 .
m≠_keys
 = 
›ts
->map_keys,

12274  
	`≥rf_buf„r__√w_øw_v0_6_0
(
m≠_fd
, 
∑ge_˙t
, 
›ts
->
©å
,

12275 
›ts
->
evít_cb
, o±s->
˘x
, &
ö√r_›ts
);

12276 
	}
}

12278 
≥rf_buf„r
 *
	$__≥rf_buf„r__√w
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

12279 
≥rf_buf„r_∑øms
 *
p
)

12281 c⁄° *
⁄löe_˝us_fûe
 = "/sys/devices/system/cpu/online";

12282 
bpf_m≠_öfo
 
m≠
;

12283 
msg
[
STRERR_BUFSIZE
];

12284 
≥rf_buf„r
 *
pb
;

12285 
boﬁ
 *
⁄löe
 = 
NULL
;

12286 
__u32
 
m≠_öfo_Àn
;

12287 
îr
, 
i
, 
j
, 
n
;

12289 i‡(
∑ge_˙t
 == 0 || (page_cnt & (page_cnt - 1))) {

12290 
	`¥_w¨n
("page count should beÖower ofÅwo, but is %zu\n",

12291 
∑ge_˙t
);

12292  
	`ERR_PTR
(-
EINVAL
);

12296 
	`mem£t
(&
m≠
, 0, (map));

12297 
m≠_öfo_Àn
 = (
m≠
);

12298 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
m≠_fd
, &
m≠
, &
m≠_öfo_Àn
);

12299 i‡(
îr
) {

12300 
îr
 = -
î∫o
;

12304 i‡(
îr
 !-
EINVAL
) {

12305 
	`¥_w¨n
("failedÅo get map info for map FD %d: %s\n",

12306 
m≠_fd
, 
	`libbpf_°ªº‹_r
(
îr
, 
msg
, (msg)));

12307  
	`ERR_PTR
(
îr
);

12309 
	`¥_debug
("failedÅo get map info for FD %d; APIÇot supported? Ignoring...\n",

12310 
m≠_fd
);

12312 i‡(
m≠
.
ty≥
 !
BPF_MAP_TYPE_PERF_EVENT_ARRAY
) {

12313 
	`¥_w¨n
("map '%s' should be BPF_MAP_TYPE_PERF_EVENT_ARRAY\n",

12314 
m≠
.
«me
);

12315  
	`ERR_PTR
(-
EINVAL
);

12319 
pb
 = 
	`ˇŒoc
(1, (*pb));

12320 i‡(!
pb
)

12321  
	`ERR_PTR
(-
ENOMEM
);

12323 
pb
->
evít_cb
 = 
p
->event_cb;

12324 
pb
->
ßm∂e_cb
 = 
p
->sample_cb;

12325 
pb
->
lo°_cb
 = 
p
->lost_cb;

12326 
pb
->
˘x
 = 
p
->ctx;

12328 
pb
->
∑ge_size
 = 
	`gë∑gesize
();

12329 
pb
->
mm≠_size
 =Öb->
∑ge_size
 * 
∑ge_˙t
;

12330 
pb
->
m≠_fd
 = map_fd;

12332 
pb
->
ïﬁl_fd
 = 
	`ïﬁl_¸óã1
(
EPOLL_CLOEXEC
);

12333 i‡(
pb
->
ïﬁl_fd
 < 0) {

12334 
îr
 = -
î∫o
;

12335 
	`¥_w¨n
("failedÅo createÉpoll instance: %s\n",

12336 
	`libbpf_°ªº‹_r
(
îr
, 
msg
, (msg)));

12337 
îr‹
;

12340 i‡(
p
->
˝u_˙t
 > 0) {

12341 
pb
->
˝u_˙t
 = 
p
->cpu_cnt;

12343 
pb
->
˝u_˙t
 = 
	`libbpf_num_possibÀ_˝us
();

12344 i‡(
pb
->
˝u_˙t
 < 0) {

12345 
îr
 = 
pb
->
˝u_˙t
;

12346 
îr‹
;

12348 i‡(
m≠
.
max_íåõs
 && m≠.max_íåõ†< 
pb
->
˝u_˙t
)

12349 
pb
->
˝u_˙t
 = 
m≠
.
max_íåõs
;

12352 
pb
->
evíts
 = 
	`ˇŒoc
’b->
˝u_˙t
, (*pb->events));

12353 i‡(!
pb
->
evíts
) {

12354 
îr
 = -
ENOMEM
;

12355 
	`¥_w¨n
("failedÅoállocateÉvents: out of memory\n");

12356 
îr‹
;

12358 
pb
->
˝u_bufs
 = 
	`ˇŒoc
’b->
˝u_˙t
, (*pb->cpu_bufs));

12359 i‡(!
pb
->
˝u_bufs
) {

12360 
îr
 = -
ENOMEM
;

12361 
	`¥_w¨n
("failedÅoállocate buffers: out of memory\n");

12362 
îr‹
;

12365 
îr
 = 
	`∑r£_˝u_mask_fûe
(
⁄löe_˝us_fûe
, &
⁄löe
, &
n
);

12366 i‡(
îr
) {

12367 
	`¥_w¨n
("ÁûedÅÿgë o∆öêCPU mask: %d\n", 
îr
);

12368 
îr‹
;

12371 
i
 = 0, 
j
 = 0; i < 
pb
->
˝u_˙t
; i++) {

12372 
≥rf_˝u_buf
 *
˝u_buf
;

12373 
˝u
, 
m≠_key
;

12375 
˝u
 = 
p
->
˝u_˙t
 > 0 ?Ö->
˝us
[
i
] : i;

12376 
m≠_key
 = 
p
->
˝u_˙t
 > 0 ?Ö->
m≠_keys
[
i
] : i;

12381 i‡(
p
->
˝u_˙t
 <0 && (
˝u
 >
n
 || !
⁄löe
[cpu]))

12384 
˝u_buf
 = 
	`≥rf_buf„r__›í_˝u_buf
(
pb
, 
p
->
©å
, 
˝u
, 
m≠_key
);

12385 i‡(
	`IS_ERR
(
˝u_buf
)) {

12386 
îr
 = 
	`PTR_ERR
(
˝u_buf
);

12387 
îr‹
;

12390 
pb
->
˝u_bufs
[
j
] = 
˝u_buf
;

12392 
îr
 = 
	`bpf_m≠_upd©e_ñem
(
pb
->
m≠_fd
, &
m≠_key
,

12393 &
˝u_buf
->
fd
, 0);

12394 i‡(
îr
) {

12395 
îr
 = -
î∫o
;

12396 
	`¥_w¨n
("failedÅo set cpu #%d, key %d ->Öerf FD %d: %s\n",

12397 
˝u
, 
m≠_key
, 
˝u_buf
->
fd
,

12398 
	`libbpf_°ªº‹_r
(
îr
, 
msg
, (msg)));

12399 
îr‹
;

12402 
pb
->
evíts
[
j
].evít†
EPOLLIN
;

12403 
pb
->
evíts
[
j
].
d©a
.
±r
 = 
˝u_buf
;

12404 i‡(
	`ïﬁl_˘l
(
pb
->
ïﬁl_fd
, 
EPOLL_CTL_ADD
, 
˝u_buf
->
fd
,

12405 &
pb
->
evíts
[
j
]) < 0) {

12406 
îr
 = -
î∫o
;

12407 
	`¥_w¨n
("failedÅoÉpoll_ctl cpu #%dÖerf FD %d: %s\n",

12408 
˝u
, 
˝u_buf
->
fd
,

12409 
	`libbpf_°ªº‹_r
(
îr
, 
msg
, (msg)));

12410 
îr‹
;

12412 
j
++;

12414 
pb
->
˝u_˙t
 = 
j
;

12415 
	`‰ì
(
⁄löe
);

12417  
pb
;

12419 
îr‹
:

12420 
	`‰ì
(
⁄löe
);

12421 i‡(
pb
)

12422 
	`≥rf_buf„r__‰ì
(
pb
);

12423  
	`ERR_PTR
(
îr
);

12424 
	}
}

12426 
	s≥rf_ßm∂e_øw
 {

12427 
≥rf_evít_hódî
 
	mhódî
;

12428 
uöt32_t
 
	msize
;

12429 
	md©a
[];

12432 
	s≥rf_ßm∂e_lo°
 {

12433 
≥rf_evít_hódî
 
	mhódî
;

12434 
uöt64_t
 
	mid
;

12435 
uöt64_t
 
	mlo°
;

12436 
uöt64_t
 
	mßm∂e_id
;

12439 
bpf_≥rf_evít_ªt


12440 
	$≥rf_buf„r__¥o˚ss_ªc‹d
(
≥rf_evít_hódî
 *
e
, *
˘x
)

12442 
≥rf_˝u_buf
 *
˝u_buf
 = 
˘x
;

12443 
≥rf_buf„r
 *
pb
 = 
˝u_buf
->pb;

12444 *
d©a
 = 
e
;

12447 i‡(
pb
->
evít_cb
)

12448  
pb
->
	`evít_cb
’b->
˘x
, 
˝u_buf
->
˝u
, 
e
);

12450 
e
->
ty≥
) {

12451 
PERF_RECORD_SAMPLE
: {

12452 
≥rf_ßm∂e_øw
 *
s
 = 
d©a
;

12454 i‡(
pb
->
ßm∂e_cb
)

12455 
pb
->
	`ßm∂e_cb
’b->
˘x
, 
˝u_buf
->
˝u
, 
s
->
d©a
, s->
size
);

12458 
PERF_RECORD_LOST
: {

12459 
≥rf_ßm∂e_lo°
 *
s
 = 
d©a
;

12461 i‡(
pb
->
lo°_cb
)

12462 
pb
->
	`lo°_cb
’b->
˘x
, 
˝u_buf
->
˝u
, 
s
->
lo°
);

12466 
	`¥_w¨n
("unknow¿≥r‡ßm∂êty≥ %d\n", 
e
->
ty≥
);

12467  
LIBBPF_PERF_EVENT_ERROR
;

12469  
LIBBPF_PERF_EVENT_CONT
;

12470 
	}
}

12472 
	$≥rf_buf„r__¥o˚ss_ªc‹ds
(
≥rf_buf„r
 *
pb
,

12473 
≥rf_˝u_buf
 *
˝u_buf
)

12475 
bpf_≥rf_evít_ªt
 
ªt
;

12477 
ªt
 = 
	`≥rf_evít_ªad_sim∂e
(
˝u_buf
->
ba£
, 
pb
->
mm≠_size
,

12478 
pb
->
∑ge_size
, &
˝u_buf
->
buf
,

12479 &
˝u_buf
->
buf_size
,

12480 
≥rf_buf„r__¥o˚ss_ªc‹d
, 
˝u_buf
);

12481 i‡(
ªt
 !
LIBBPF_PERF_EVENT_CONT
)

12482  
ªt
;

12484 
	}
}

12486 
	$≥rf_buf„r__ïﬁl_fd
(c⁄° 
≥rf_buf„r
 *
pb
)

12488  
pb
->
ïﬁl_fd
;

12489 
	}
}

12491 
	$≥rf_buf„r__pﬁl
(
≥rf_buf„r
 *
pb
, 
timeout_ms
)

12493 
i
, 
˙t
, 
îr
;

12495 
˙t
 = 
	`ïﬁl_waô
(
pb
->
ïﬁl_fd
,Öb->
evíts
,Öb->
˝u_˙t
, 
timeout_ms
);

12496 i‡(
˙t
 < 0)

12497  -
î∫o
;

12499 
i
 = 0; i < 
˙t
; i++) {

12500 
≥rf_˝u_buf
 *
˝u_buf
 = 
pb
->
evíts
[
i
].
d©a
.
±r
;

12502 
îr
 = 
	`≥rf_buf„r__¥o˚ss_ªc‹ds
(
pb
, 
˝u_buf
);

12503 i‡(
îr
) {

12504 
	`¥_w¨n
("îr‹ whûê¥o˚ssögÑec‹ds: %d\n", 
îr
);

12505  
	`libbpf_îr
(
îr
);

12508  
˙t
;

12509 
	}
}

12514 
size_t
 
	$≥rf_buf„r__buf„r_˙t
(c⁄° 
≥rf_buf„r
 *
pb
)

12516  
pb
->
˝u_˙t
;

12517 
	}
}

12524 
	$≥rf_buf„r__buf„r_fd
(c⁄° 
≥rf_buf„r
 *
pb
, 
size_t
 
buf_idx
)

12526 
≥rf_˝u_buf
 *
˝u_buf
;

12528 i‡(
buf_idx
 >
pb
->
˝u_˙t
)

12529  
	`libbpf_îr
(-
EINVAL
);

12531 
˝u_buf
 = 
pb
->
˝u_bufs
[
buf_idx
];

12532 i‡(!
˝u_buf
)

12533  
	`libbpf_îr
(-
ENOENT
);

12535  
˝u_buf
->
fd
;

12536 
	}
}

12546 
	$≥rf_buf„r__c⁄sume_buf„r
(
≥rf_buf„r
 *
pb
, 
size_t
 
buf_idx
)

12548 
≥rf_˝u_buf
 *
˝u_buf
;

12550 i‡(
buf_idx
 >
pb
->
˝u_˙t
)

12551  
	`libbpf_îr
(-
EINVAL
);

12553 
˝u_buf
 = 
pb
->
˝u_bufs
[
buf_idx
];

12554 i‡(!
˝u_buf
)

12555  
	`libbpf_îr
(-
ENOENT
);

12557  
	`≥rf_buf„r__¥o˚ss_ªc‹ds
(
pb
, 
˝u_buf
);

12558 
	}
}

12560 
	$≥rf_buf„r__c⁄sume
(
≥rf_buf„r
 *
pb
)

12562 
i
, 
îr
;

12564 
i
 = 0; i < 
pb
->
˝u_˙t
; i++) {

12565 
≥rf_˝u_buf
 *
˝u_buf
 = 
pb
->
˝u_bufs
[
i
];

12567 i‡(!
˝u_buf
)

12570 
îr
 = 
	`≥rf_buf„r__¥o˚ss_ªc‹ds
(
pb
, 
˝u_buf
);

12571 i‡(
îr
) {

12572 
	`¥_w¨n
("≥rf_buf„r: faûedÅÿ¥o˚s†ªc‹d†ö buf„∏#%d: %d\n", 
i
, 
îr
);

12573  
	`libbpf_îr
(
îr
);

12577 
	}
}

12579 
	sbpf_¥og_öfo_¨øy_desc
 {

12580 
	m¨øy_off£t
;

12581 
	mcou¡_off£t
;

12582 
	msize_off£t
;

12587 
bpf_¥og_öfo_¨øy_desc
 
	gbpf_¥og_öfo_¨øy_desc
[] = {

12588 [
BPF_PROG_INFO_JITED_INSNS
] = {

12589 
off£tof
(
bpf_¥og_öfo
, 
jôed_¥og_ö¢s
),

12590 
off£tof
(
bpf_¥og_öfo
, 
jôed_¥og_Àn
),

12593 [
BPF_PROG_INFO_XLATED_INSNS
] = {

12594 
off£tof
(
bpf_¥og_öfo
, 
xœãd_¥og_ö¢s
),

12595 
off£tof
(
bpf_¥og_öfo
, 
xœãd_¥og_Àn
),

12598 [
BPF_PROG_INFO_MAP_IDS
] = {

12599 
off£tof
(
bpf_¥og_öfo
, 
m≠_ids
),

12600 
off£tof
(
bpf_¥og_öfo
, 
ƒ_m≠_ids
),

12601 -()(
__u32
),

12603 [
BPF_PROG_INFO_JITED_KSYMS
] = {

12604 
off£tof
(
bpf_¥og_öfo
, 
jôed_ksyms
),

12605 
off£tof
(
bpf_¥og_öfo
, 
ƒ_jôed_ksyms
),

12606 -()(
__u64
),

12608 [
BPF_PROG_INFO_JITED_FUNC_LENS
] = {

12609 
off£tof
(
bpf_¥og_öfo
, 
jôed_func_Àns
),

12610 
off£tof
(
bpf_¥og_öfo
, 
ƒ_jôed_func_Àns
),

12611 -()(
__u32
),

12613 [
BPF_PROG_INFO_FUNC_INFO
] = {

12614 
off£tof
(
bpf_¥og_öfo
, 
func_öfo
),

12615 
off£tof
(
bpf_¥og_öfo
, 
ƒ_func_öfo
),

12616 
off£tof
(
bpf_¥og_öfo
, 
func_öfo_ªc_size
),

12618 [
BPF_PROG_INFO_LINE_INFO
] = {

12619 
off£tof
(
bpf_¥og_öfo
, 
löe_öfo
),

12620 
off£tof
(
bpf_¥og_öfo
, 
ƒ_löe_öfo
),

12621 
off£tof
(
bpf_¥og_öfo
, 
löe_öfo_ªc_size
),

12623 [
BPF_PROG_INFO_JITED_LINE_INFO
] = {

12624 
off£tof
(
bpf_¥og_öfo
, 
jôed_löe_öfo
),

12625 
off£tof
(
bpf_¥og_öfo
, 
ƒ_jôed_löe_öfo
),

12626 
off£tof
(
bpf_¥og_öfo
, 
jôed_löe_öfo_ªc_size
),

12628 [
BPF_PROG_INFO_PROG_TAGS
] = {

12629 
off£tof
(
bpf_¥og_öfo
, 
¥og_ègs
),

12630 
off£tof
(
bpf_¥og_öfo
, 
ƒ_¥og_ègs
),

12631 -()(
__u8
Ë* 
BPF_TAG_SIZE
,

12636 
__u32
 
	$bpf_¥og_öfo_ªad_off£t_u32
(
bpf_¥og_öfo
 *
öfo
,

12637 
off£t
)

12639 
__u32
 *
¨øy
 = (__u32 *)
öfo
;

12641 i‡(
off£t
 >= 0)

12642  
¨øy
[
off£t
 / (
__u32
)];

12643  -()
off£t
;

12644 
	}
}

12646 
__u64
 
	$bpf_¥og_öfo_ªad_off£t_u64
(
bpf_¥og_öfo
 *
öfo
,

12647 
off£t
)

12649 
__u64
 *
¨øy
 = (__u64 *)
öfo
;

12651 i‡(
off£t
 >= 0)

12652  
¨øy
[
off£t
 / (
__u64
)];

12653  -()
off£t
;

12654 
	}
}

12656 
	$bpf_¥og_öfo_£t_off£t_u32
(
bpf_¥og_öfo
 *
öfo
, 
off£t
,

12657 
__u32
 
vÆ
)

12659 
__u32
 *
¨øy
 = (__u32 *)
öfo
;

12661 i‡(
off£t
 >= 0)

12662 
¨øy
[
off£t
 / (
__u32
)] = 
vÆ
;

12663 
	}
}

12665 
	$bpf_¥og_öfo_£t_off£t_u64
(
bpf_¥og_öfo
 *
öfo
, 
off£t
,

12666 
__u64
 
vÆ
)

12668 
__u64
 *
¨øy
 = (__u64 *)
öfo
;

12670 i‡(
off£t
 >= 0)

12671 
¨øy
[
off£t
 / (
__u64
)] = 
vÆ
;

12672 
	}
}

12674 
bpf_¥og_öfo_löór
 *

12675 
	$bpf_¥ogøm__gë_¥og_öfo_löór
(
fd
, 
__u64
 
¨øys
)

12677 
bpf_¥og_öfo_löór
 *
öfo_löór
;

12678 
bpf_¥og_öfo
 
öfo
 = {};

12679 
__u32
 
öfo_Àn
 = (
öfo
);

12680 
__u32
 
d©a_Àn
 = 0;

12681 
i
, 
îr
;

12682 *
±r
;

12684 i‡(
¨øys
 >> 
BPF_PROG_INFO_LAST_ARRAY
)

12685  
	`libbpf_îr_±r
(-
EINVAL
);

12688 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
fd
, &
öfo
, &
öfo_Àn
);

12689 i‡(
îr
) {

12690 
	`¥_debug
("ˇn'àgëÖrog info: %s", 
	`°ªº‹
(
î∫o
));

12691  
	`libbpf_îr_±r
(-
EFAULT
);

12695 
i
 = 
BPF_PROG_INFO_FIRST_ARRAY
; i < 
BPF_PROG_INFO_LAST_ARRAY
; ++i) {

12696 
boﬁ
 
ö˛ude_¨øy
 = (
¨øys
 & (1UL << 
i
)) > 0;

12697 
bpf_¥og_öfo_¨øy_desc
 *
desc
;

12698 
__u32
 
cou¡
, 
size
;

12700 
desc
 = 
bpf_¥og_öfo_¨øy_desc
 + 
i
;

12703 i‡(
öfo_Àn
 < 
desc
->
¨øy_off£t
 + (
__u32
) ||

12704 
öfo_Àn
 < 
desc
->
cou¡_off£t
 + (
__u32
) ||

12705 (
desc
->
size_off£t
 > 0 && 
öfo_Àn
 < desc->size_offset))

12706 
ö˛ude_¨øy
 = 
Ál£
;

12708 i‡(!
ö˛ude_¨øy
) {

12709 
¨øys
 &~(1UL << 
i
);

12713 
cou¡
 = 
	`bpf_¥og_öfo_ªad_off£t_u32
(&
öfo
, 
desc
->
cou¡_off£t
);

12714 
size
 = 
	`bpf_¥og_öfo_ªad_off£t_u32
(&
öfo
, 
desc
->
size_off£t
);

12716 
d©a_Àn
 +
cou¡
 * 
size
;

12720 
d©a_Àn
 = 
	`roundup
(d©a_Àn, (
__u64
));

12721 
öfo_löór
 = 
	`mÆloc
((
bpf_¥og_öfo_löór
Ë+ 
d©a_Àn
);

12722 i‡(!
öfo_löór
)

12723  
	`libbpf_îr_±r
(-
ENOMEM
);

12726 
öfo_löór
->
¨øys
 =árrays;

12727 
	`mem£t
(&
öfo_löór
->
öfo
, 0, (info));

12728 
±r
 = 
öfo_löór
->
d©a
;

12730 
i
 = 
BPF_PROG_INFO_FIRST_ARRAY
; i < 
BPF_PROG_INFO_LAST_ARRAY
; ++i) {

12731 
bpf_¥og_öfo_¨øy_desc
 *
desc
;

12732 
__u32
 
cou¡
, 
size
;

12734 i‡((
¨øys
 & (1UL << 
i
)) == 0)

12737 
desc
 = 
bpf_¥og_öfo_¨øy_desc
 + 
i
;

12738 
cou¡
 = 
	`bpf_¥og_öfo_ªad_off£t_u32
(&
öfo
, 
desc
->
cou¡_off£t
);

12739 
size
 = 
	`bpf_¥og_öfo_ªad_off£t_u32
(&
öfo
, 
desc
->
size_off£t
);

12740 
	`bpf_¥og_öfo_£t_off£t_u32
(&
öfo_löór
->
öfo
,

12741 
desc
->
cou¡_off£t
, 
cou¡
);

12742 
	`bpf_¥og_öfo_£t_off£t_u32
(&
öfo_löór
->
öfo
,

12743 
desc
->
size_off£t
, 
size
);

12744 
	`bpf_¥og_öfo_£t_off£t_u64
(&
öfo_löór
->
öfo
,

12745 
desc
->
¨øy_off£t
,

12746 
	`±r_to_u64
(
±r
));

12747 
±r
 +
cou¡
 * 
size
;

12751 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
fd
, &
öfo_löór
->
öfo
, &
öfo_Àn
);

12752 i‡(
îr
) {

12753 
	`¥_debug
("ˇn'àgëÖrog info: %s", 
	`°ªº‹
(
î∫o
));

12754 
	`‰ì
(
öfo_löór
);

12755  
	`libbpf_îr_±r
(-
EFAULT
);

12759 
i
 = 
BPF_PROG_INFO_FIRST_ARRAY
; i < 
BPF_PROG_INFO_LAST_ARRAY
; ++i) {

12760 
bpf_¥og_öfo_¨øy_desc
 *
desc
;

12761 
__u32
 
v1
, 
v2
;

12763 i‡((
¨øys
 & (1UL << 
i
)) == 0)

12766 
desc
 = 
bpf_¥og_öfo_¨øy_desc
 + 
i
;

12767 
v1
 = 
	`bpf_¥og_öfo_ªad_off£t_u32
(&
öfo
, 
desc
->
cou¡_off£t
);

12768 
v2
 = 
	`bpf_¥og_öfo_ªad_off£t_u32
(&
öfo_löór
->
öfo
,

12769 
desc
->
cou¡_off£t
);

12770 i‡(
v1
 !
v2
)

12771 
	`¥_w¨n
("%s: mism©ch i¿ñemíàcou¡\n", 
__func__
);

12773 
v1
 = 
	`bpf_¥og_öfo_ªad_off£t_u32
(&
öfo
, 
desc
->
size_off£t
);

12774 
v2
 = 
	`bpf_¥og_öfo_ªad_off£t_u32
(&
öfo_löór
->
öfo
,

12775 
desc
->
size_off£t
);

12776 i‡(
v1
 !
v2
)

12777 
	`¥_w¨n
("%s: mism©ch i¿ª¯size\n", 
__func__
);

12781 
öfo_löór
->
öfo_Àn
 = (
bpf_¥og_öfo
);

12782 
öfo_löór
->
d©a_Àn
 = data_len;

12784  
öfo_löór
;

12785 
	}
}

12787 
	$bpf_¥ogøm__bpû_addr_to_offs
(
bpf_¥og_öfo_löór
 *
öfo_löór
)

12789 
i
;

12791 
i
 = 
BPF_PROG_INFO_FIRST_ARRAY
; i < 
BPF_PROG_INFO_LAST_ARRAY
; ++i) {

12792 
bpf_¥og_öfo_¨øy_desc
 *
desc
;

12793 
__u64
 
addr
, 
offs
;

12795 i‡((
öfo_löór
->
¨øys
 & (1UL << 
i
)) == 0)

12798 
desc
 = 
bpf_¥og_öfo_¨øy_desc
 + 
i
;

12799 
addr
 = 
	`bpf_¥og_öfo_ªad_off£t_u64
(&
öfo_löór
->
öfo
,

12800 
desc
->
¨øy_off£t
);

12801 
offs
 = 
addr
 - 
	`±r_to_u64
(
öfo_löór
->
d©a
);

12802 
	`bpf_¥og_öfo_£t_off£t_u64
(&
öfo_löór
->
öfo
,

12803 
desc
->
¨øy_off£t
, 
offs
);

12805 
	}
}

12807 
	$bpf_¥ogøm__bpû_offs_to_addr
(
bpf_¥og_öfo_löór
 *
öfo_löór
)

12809 
i
;

12811 
i
 = 
BPF_PROG_INFO_FIRST_ARRAY
; i < 
BPF_PROG_INFO_LAST_ARRAY
; ++i) {

12812 
bpf_¥og_öfo_¨øy_desc
 *
desc
;

12813 
__u64
 
addr
, 
offs
;

12815 i‡((
öfo_löór
->
¨øys
 & (1UL << 
i
)) == 0)

12818 
desc
 = 
bpf_¥og_öfo_¨øy_desc
 + 
i
;

12819 
offs
 = 
	`bpf_¥og_öfo_ªad_off£t_u64
(&
öfo_löór
->
öfo
,

12820 
desc
->
¨øy_off£t
);

12821 
addr
 = 
offs
 + 
	`±r_to_u64
(
öfo_löór
->
d©a
);

12822 
	`bpf_¥og_öfo_£t_off£t_u64
(&
öfo_löór
->
öfo
,

12823 
desc
->
¨øy_off£t
, 
addr
);

12825 
	}
}

12827 
	$bpf_¥ogøm__£t_©èch_èrgë
(
bpf_¥ogøm
 *
¥og
,

12828 
©èch_¥og_fd
,

12829 c⁄° *
©èch_func_«me
)

12831 
btf_obj_fd
 = 0, 
btf_id
 = 0, 
îr
;

12833 i‡(!
¥og
 || 
©èch_¥og_fd
 < 0)

12834  
	`libbpf_îr
(-
EINVAL
);

12836 i‡(
¥og
->
obj
->
lﬂded
)

12837  
	`libbpf_îr
(-
EINVAL
);

12839 i‡(
©èch_¥og_fd
 && !
©èch_func_«me
) {

12843 
¥og
->
©èch_¥og_fd
 =áttach_prog_fd;

12847 i‡(
©èch_¥og_fd
) {

12848 
btf_id
 = 
	`libbpf_föd_¥og_btf_id
(
©èch_func_«me
,

12849 
©èch_¥og_fd
);

12850 i‡(
btf_id
 < 0)

12851  
	`libbpf_îr
(
btf_id
);

12853 i‡(!
©èch_func_«me
)

12854  
	`libbpf_îr
(-
EINVAL
);

12857 
îr
 = 
	`bpf_obje˘__lﬂd_vmlöux_btf
(
¥og
->
obj
, 
åue
);

12858 i‡(
îr
)

12859  
	`libbpf_îr
(
îr
);

12860 
îr
 = 
	`föd_kî√l_btf_id
(
¥og
->
obj
, 
©èch_func_«me
,

12861 
¥og
->
ex≥˘ed_©èch_ty≥
,

12862 &
btf_obj_fd
, &
btf_id
);

12863 i‡(
îr
)

12864  
	`libbpf_îr
(
îr
);

12867 
¥og
->
©èch_btf_id
 = 
btf_id
;

12868 
¥og
->
©èch_btf_obj_fd
 = 
btf_obj_fd
;

12869 
¥og
->
©èch_¥og_fd
 =áttach_prog_fd;

12871 
	}
}

12873 
	$∑r£_˝u_mask_°r
(c⁄° *
s
, 
boﬁ
 **
mask
, *
mask_sz
)

12875 
îr
 = 0, 
n
, 
Àn
, 
°¨t
, 
íd
 = -1;

12876 
boﬁ
 *
tmp
;

12878 *
mask
 = 
NULL
;

12879 *
mask_sz
 = 0;

12882 *
s
) {

12883 i‡(*
s
 == ',' || *s == '\n') {

12884 
s
++;

12887 
n
 = 
	`ssˇnf
(
s
, "%d%n-%d%n", &
°¨t
, &
Àn
, &
íd
, &len);

12888 i‡(
n
 <= 0 ||Ç > 2) {

12889 
	`¥_w¨n
("FaûedÅÿgë CPUÑ™gê%s: %d\n", 
s
, 
n
);

12890 
îr
 = -
EINVAL
;

12891 
˛ónup
;

12892 } i‡(
n
 == 1) {

12893 
íd
 = 
°¨t
;

12895 i‡(
°¨t
 < 0 || sèπ > 
íd
) {

12896 
	`¥_w¨n
("Invalid CPUÑange [%d,%d] in %s\n",

12897 
°¨t
, 
íd
, 
s
);

12898 
îr
 = -
EINVAL
;

12899 
˛ónup
;

12901 
tmp
 = 
	`ªÆloc
(*
mask
, 
íd
 + 1);

12902 i‡(!
tmp
) {

12903 
îr
 = -
ENOMEM
;

12904 
˛ónup
;

12906 *
mask
 = 
tmp
;

12907 
	`mem£t
(
tmp
 + *
mask_sz
, 0, 
°¨t
 - *mask_sz);

12908 
	`mem£t
(
tmp
 + 
°¨t
, 1, 
íd
 - start + 1);

12909 *
mask_sz
 = 
íd
 + 1;

12910 
s
 +
Àn
;

12912 i‡(!*
mask_sz
) {

12913 
	`¥_w¨n
("Empty CPUÑange\n");

12914  -
EINVAL
;

12917 
˛ónup
:

12918 
	`‰ì
(*
mask
);

12919 *
mask
 = 
NULL
;

12920  
îr
;

12921 
	}
}

12923 
	$∑r£_˝u_mask_fûe
(c⁄° *
f˝u
, 
boﬁ
 **
mask
, *
mask_sz
)

12925 
fd
, 
îr
 = 0, 
Àn
;

12926 
buf
[128];

12928 
fd
 = 
	`›í
(
f˝u
, 
O_RDONLY
 | 
O_CLOEXEC
);

12929 i‡(
fd
 < 0) {

12930 
îr
 = -
î∫o
;

12931 
	`¥_w¨n
("FaûedÅÿ›í cpu mask fûê%s: %d\n", 
f˝u
, 
îr
);

12932  
îr
;

12934 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

12935 
	`˛o£
(
fd
);

12936 i‡(
Àn
 <= 0) {

12937 
îr
 = 
Àn
 ? -
î∫o
 : -
EINVAL
;

12938 
	`¥_w¨n
("FaûedÅÿªad cpu mask from %s: %d\n", 
f˝u
, 
îr
);

12939  
îr
;

12941 i‡(
Àn
 >(
buf
)) {

12942 
	`¥_w¨n
("CPU mask i†toÿbig i¿fûê%s\n", 
f˝u
);

12943  -
E2BIG
;

12945 
buf
[
Àn
] = '\0';

12947  
	`∑r£_˝u_mask_°r
(
buf
, 
mask
, 
mask_sz
);

12948 
	}
}

12950 
	$libbpf_num_possibÀ_˝us
()

12952 c⁄° *
f˝u
 = "/sys/devices/system/cpu/possible";

12953 
˝us
;

12954 
îr
, 
n
, 
i
, 
tmp_˝us
;

12955 
boﬁ
 *
mask
;

12957 
tmp_˝us
 = 
	`READ_ONCE
(
˝us
);

12958 i‡(
tmp_˝us
 > 0)

12959  
tmp_˝us
;

12961 
îr
 = 
	`∑r£_˝u_mask_fûe
(
f˝u
, &
mask
, &
n
);

12962 i‡(
îr
)

12963  
	`libbpf_îr
(
îr
);

12965 
tmp_˝us
 = 0;

12966 
i
 = 0; i < 
n
; i++) {

12967 i‡(
mask
[
i
])

12968 
tmp_˝us
++;

12970 
	`‰ì
(
mask
);

12972 
	`WRITE_ONCE
(
˝us
, 
tmp_˝us
);

12973  
tmp_˝us
;

12974 
	}
}

12976 
	$p›uœã_skñë⁄_m≠s
(c⁄° 
bpf_obje˘
 *
obj
,

12977 
bpf_m≠_skñë⁄
 *
m≠s
,

12978 
size_t
 
m≠_˙t
)

12980 
i
;

12982 
i
 = 0; i < 
m≠_˙t
; i++) {

12983 
bpf_m≠
 **
m≠
 = 
m≠s
[
i
].map;

12984 c⁄° *
«me
 = 
m≠s
[
i
].name;

12985 **
mm≠ed
 = 
m≠s
[
i
].mmaped;

12987 *
m≠
 = 
	`bpf_obje˘__föd_m≠_by_«me
(
obj
, 
«me
);

12988 i‡(!*
m≠
) {

12989 
	`¥_w¨n
("ÁûedÅÿföd skñë⁄ m≠ '%s'\n", 
«me
);

12990  -
ESRCH
;

12994 i‡(
mm≠ed
 && (*
m≠
)->
libbpf_ty≥
 !
LIBBPF_MAP_KCONFIG
)

12995 *
mm≠ed
 = (*
m≠
)->mmaped;

12998 
	}
}

13000 
	$p›uœã_skñë⁄_¥ogs
(c⁄° 
bpf_obje˘
 *
obj
,

13001 
bpf_¥og_skñë⁄
 *
¥ogs
,

13002 
size_t
 
¥og_˙t
)

13004 
i
;

13006 
i
 = 0; i < 
¥og_˙t
; i++) {

13007 
bpf_¥ogøm
 **
¥og
 = 
¥ogs
[
i
].prog;

13008 c⁄° *
«me
 = 
¥ogs
[
i
].name;

13010 *
¥og
 = 
	`bpf_obje˘__föd_¥ogøm_by_«me
(
obj
, 
«me
);

13011 i‡(!*
¥og
) {

13012 
	`¥_w¨n
("ÁûedÅÿföd skñë⁄Örogøm '%s'\n", 
«me
);

13013  -
ESRCH
;

13017 
	}
}

13019 
	$bpf_obje˘__›í_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
,

13020 c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
)

13022 
	`DECLARE_LIBBPF_OPTS
(
bpf_obje˘_›í_›ts
, 
skñ_›ts
,

13023 .
obje˘_«me
 = 
s
->
«me
,

13025 
bpf_obje˘
 *
obj
;

13026 
îr
;

13034 i‡(
›ts
) {

13035 
	`mem˝y
(&
skñ_›ts
, 
›ts
, (*opts));

13036 i‡(!
›ts
->
obje˘_«me
)

13037 
skñ_›ts
.
obje˘_«me
 = 
s
->
«me
;

13040 
obj
 = 
	`bpf_obje˘__›í_mem
(
s
->
d©a
, s->
d©a_sz
, &
skñ_›ts
);

13041 
îr
 = 
	`libbpf_gë_îr‹
(
obj
);

13042 i‡(
îr
) {

13043 
	`¥_w¨n
("failedÅo initialize skeleton BPF object '%s': %d\n",

13044 
s
->
«me
, 
îr
);

13045  
	`libbpf_îr
(
îr
);

13048 *
s
->
obj
 = obj;

13049 
îr
 = 
	`p›uœã_skñë⁄_m≠s
(
obj
, 
s
->
m≠s
, s->
m≠_˙t
);

13050 i‡(
îr
) {

13051 
	`¥_w¨n
("ÁûedÅÿp›uœã skñë⁄ m≠†f‹ '%s': %d\n", 
s
->
«me
, 
îr
);

13052  
	`libbpf_îr
(
îr
);

13055 
îr
 = 
	`p›uœã_skñë⁄_¥ogs
(
obj
, 
s
->
¥ogs
, s->
¥og_˙t
);

13056 i‡(
îr
) {

13057 
	`¥_w¨n
("ÁûedÅÿp›uœã skñë⁄Örog†f‹ '%s': %d\n", 
s
->
«me
, 
îr
);

13058  
	`libbpf_îr
(
îr
);

13062 
	}
}

13064 
	$bpf_obje˘__›í_subskñë⁄
(
bpf_obje˘_subskñë⁄
 *
s
)

13066 
îr
, 
Àn
, 
v¨_idx
, 
i
;

13067 c⁄° *
v¨_«me
;

13068 c⁄° 
bpf_m≠
 *
m≠
;

13069 
btf
 *btf;

13070 
__u32
 
m≠_ty≥_id
;

13071 c⁄° 
btf_ty≥
 *
m≠_ty≥
, *
v¨_ty≥
;

13072 c⁄° 
bpf_v¨_skñë⁄
 *
v¨_skñ
;

13073 
btf_v¨_£cöfo
 *
v¨
;

13075 i‡(!
s
->
obj
)

13076  
	`libbpf_îr
(-
EINVAL
);

13078 
btf
 = 
	`bpf_obje˘__btf
(
s
->
obj
);

13079 i‡(!
btf
) {

13080 
	`¥_w¨n
("subskeletonsÑequire BTFátÑuntime (object %s)\n",

13081 
	`bpf_obje˘__«me
(
s
->
obj
));

13082  
	`libbpf_îr
(-
î∫o
);

13085 
îr
 = 
	`p›uœã_skñë⁄_m≠s
(
s
->
obj
, s->
m≠s
, s->
m≠_˙t
);

13086 i‡(
îr
) {

13087 
	`¥_w¨n
("ÁûedÅÿp›uœã subskñë⁄ m≠s: %d\n", 
îr
);

13088  
	`libbpf_îr
(
îr
);

13091 
îr
 = 
	`p›uœã_skñë⁄_¥ogs
(
s
->
obj
, s->
¥ogs
, s->
¥og_˙t
);

13092 i‡(
îr
) {

13093 
	`¥_w¨n
("ÁûedÅÿp›uœã subskñë⁄ m≠s: %d\n", 
îr
);

13094  
	`libbpf_îr
(
îr
);

13097 
v¨_idx
 = 0; v¨_idx < 
s
->
v¨_˙t
; var_idx++) {

13098 
v¨_skñ
 = &
s
->
v¨s
[
v¨_idx
];

13099 
m≠
 = *
v¨_skñ
->map;

13100 
m≠_ty≥_id
 = 
	`bpf_m≠__btf_vÆue_ty≥_id
(
m≠
);

13101 
m≠_ty≥
 = 
	`btf__ty≥_by_id
(
btf
, 
m≠_ty≥_id
);

13103 i‡(!
	`btf_is_d©a£c
(
m≠_ty≥
)) {

13104 
	`¥_w¨n
("type for map '%1$s' isÇotá datasec: %2$s",

13105 
	`bpf_m≠__«me
(
m≠
),

13106 
	`__btf_köd_°r
(
	`btf_köd
(
m≠_ty≥
)));

13107  
	`libbpf_îr
(-
EINVAL
);

13110 
Àn
 = 
	`btf_vÀn
(
m≠_ty≥
);

13111 
v¨
 = 
	`btf_v¨_£cöfos
(
m≠_ty≥
);

13112 
i
 = 0; i < 
Àn
; i++, 
v¨
++) {

13113 
v¨_ty≥
 = 
	`btf__ty≥_by_id
(
btf
, 
v¨
->
ty≥
);

13114 
v¨_«me
 = 
	`btf__«me_by_off£t
(
btf
, 
v¨_ty≥
->
«me_off
);

13115 i‡(
	`°rcmp
(
v¨_«me
, 
v¨_skñ
->
«me
) == 0) {

13116 *
v¨_skñ
->
addr
 = 
m≠
->
mm≠ed
 + 
v¨
->
off£t
;

13122 
	}
}

13124 
	$bpf_obje˘__de°roy_subskñë⁄
(
bpf_obje˘_subskñë⁄
 *
s
)

13126 i‡(!
s
)

13128 
	`‰ì
(
s
->
m≠s
);

13129 
	`‰ì
(
s
->
¥ogs
);

13130 
	`‰ì
(
s
->
v¨s
);

13131 
	`‰ì
(
s
);

13132 
	}
}

13134 
	$bpf_obje˘__lﬂd_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
)

13136 
i
, 
îr
;

13138 
îr
 = 
	`bpf_obje˘__lﬂd
(*
s
->
obj
);

13139 i‡(
îr
) {

13140 
	`¥_w¨n
("ÁûedÅÿlﬂd BPF skñë⁄ '%s': %d\n", 
s
->
«me
, 
îr
);

13141  
	`libbpf_îr
(
îr
);

13144 
i
 = 0; i < 
s
->
m≠_˙t
; i++) {

13145 
bpf_m≠
 *
m≠
 = *
s
->
m≠s
[
i
].map;

13146 
size_t
 
mm≠_sz
 = 
	`bpf_m≠_mm≠_sz
(
m≠
);

13147 
¥Ÿ
, 
m≠_fd
 = 
	`bpf_m≠__fd
(
m≠
);

13148 **
mm≠ed
 = 
s
->
m≠s
[
i
].mmaped;

13150 i‡(!
mm≠ed
)

13153 i‡(!(
m≠
->
def
.
m≠_Êags
 & 
BPF_F_MMAPABLE
)) {

13154 *
mm≠ed
 = 
NULL
;

13158 i‡(
m≠
->
def
.
m≠_Êags
 & 
BPF_F_RDONLY_PROG
)

13159 
¥Ÿ
 = 
PROT_READ
;

13161 
¥Ÿ
 = 
PROT_READ
 | 
PROT_WRITE
;

13173 *
mm≠ed
 = 
	`mm≠
(
m≠
->mm≠ed, 
mm≠_sz
, 
¥Ÿ
,

13174 
MAP_SHARED
 | 
MAP_FIXED
, 
m≠_fd
, 0);

13175 i‡(*
mm≠ed
 =
MAP_FAILED
) {

13176 
îr
 = -
î∫o
;

13177 *
mm≠ed
 = 
NULL
;

13178 
	`¥_w¨n
("failedÅoÑe-mmap() map '%s': %d\n",

13179 
	`bpf_m≠__«me
(
m≠
), 
îr
);

13180  
	`libbpf_îr
(
îr
);

13185 
	}
}

13187 
	$bpf_obje˘__©èch_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
)

13189 
i
, 
îr
;

13191 
i
 = 0; i < 
s
->
¥og_˙t
; i++) {

13192 
bpf_¥ogøm
 *
¥og
 = *
s
->
¥ogs
[
i
].prog;

13193 
bpf_lök
 **
lök
 = 
s
->
¥ogs
[
i
].link;

13195 i‡(!
¥og
->
autﬁﬂd
)

13199 i‡(!
¥og
->
£c_def
 || !¥og->£c_def->
¥og_©èch_‚
)

13203 i‡(*
lök
)

13206 
îr
 = 
¥og
->
£c_def
->
	`¥og_©èch_‚
’rog,Örog->£c_def->
cookõ
, 
lök
);

13207 i‡(
îr
) {

13208 
	`¥_w¨n
("prog '%s': failedÅoáuto-attach: %d\n",

13209 
	`bpf_¥ogøm__«me
(
¥og
), 
îr
);

13210  
	`libbpf_îr
(
îr
);

13226 
	}
}

13228 
	$bpf_obje˘__dëach_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
)

13230 
i
;

13232 
i
 = 0; i < 
s
->
¥og_˙t
; i++) {

13233 
bpf_lök
 **
lök
 = 
s
->
¥ogs
[
i
].link;

13235 
	`bpf_lök__de°roy
(*
lök
);

13236 *
lök
 = 
NULL
;

13238 
	}
}

13240 
	$bpf_obje˘__de°roy_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
)

13242 i‡(!
s
)

13245 i‡(
s
->
¥ogs
)

13246 
	`bpf_obje˘__dëach_skñë⁄
(
s
);

13247 i‡(
s
->
obj
)

13248 
	`bpf_obje˘__˛o£
(*
s
->
obj
);

13249 
	`‰ì
(
s
->
m≠s
);

13250 
	`‰ì
(
s
->
¥ogs
);

13251 
	`‰ì
(
s
);

13252 
	}
}

13254 
	$libbpf_num_⁄löe_˝us
()

13256 c⁄° *
f˝u
 = "/sys/devices/system/cpu/online";

13257 
˝us
;

13258 
îr
, 
n
, 
i
, 
tmp_˝us
;

13259 
boﬁ
 *
mask
;

13261 
tmp_˝us
 = 
	`READ_ONCE
(
˝us
);

13262 i‡(
tmp_˝us
 > 0)

13263  
tmp_˝us
;

13265 
îr
 = 
	`∑r£_˝u_mask_fûe
(
f˝u
, &
mask
, &
n
);

13266 i‡(
îr
)

13267  
îr
;

13269 
tmp_˝us
 = 0;

13270 
i
 = 0; i < 
n
; i++) {

13271 i‡(
mask
[
i
])

13272 
tmp_˝us
++;

13274 
	`‰ì
(
mask
);

13276 
	`WRITE_ONCE
(
˝us
, 
tmp_˝us
);

13277  
tmp_˝us
;

13278 
	}
}

	@libbpf.h

10 #i‚de‡
__LIBBPF_LIBBPF_H


11 
	#__LIBBPF_LIBBPF_H


	)

13 
	~<°d¨g.h
>

14 
	~<°dio.h
>

15 
	~<°döt.h
>

16 
	~<°dboﬁ.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<löux/bpf.h
>

20 
	~"libbpf_comm⁄.h
"

21 
	~"libbpf_Àgacy.h
"

23 #ifde‡
__˝lu•lus


27 
LIBBPF_API
 
__u32
 
libbpf_maj‹_vîsi⁄
();

28 
LIBBPF_API
 
__u32
 
libbpf_mö‹_vîsi⁄
();

29 
LIBBPF_API
 c⁄° *
libbpf_vîsi⁄_°rög
();

31 
	elibbpf_î∫o
 {

32 
__LIBBPF_ERRNO__START
 = 4000,

35 
LIBBPF_ERRNO__LIBELF
 = 
__LIBBPF_ERRNO__START
,

36 
LIBBPF_ERRNO__FORMAT
,

37 
LIBBPF_ERRNO__KVERSION
,

38 
LIBBPF_ERRNO__ENDIAN
,

39 
LIBBPF_ERRNO__INTERNAL
,

40 
LIBBPF_ERRNO__RELOC
,

41 
LIBBPF_ERRNO__LOAD
,

42 
LIBBPF_ERRNO__VERIFY
,

43 
LIBBPF_ERRNO__PROG2BIG
,

44 
LIBBPF_ERRNO__KVER
,

45 
LIBBPF_ERRNO__PROGTYPE
,

46 
LIBBPF_ERRNO__WRNGPID
,

47 
LIBBPF_ERRNO__INVSEQ
,

48 
LIBBPF_ERRNO__NLPARSE
,

49 
__LIBBPF_ERRNO__END
,

52 
LIBBPF_API
 
libbpf_°ªº‹
(
îr
, *
buf
, 
size_t
 
size
);

54 
	elibbpf_¥öt_Àvñ
 {

55 
LIBBPF_WARN
,

56 
LIBBPF_INFO
,

57 
LIBBPF_DEBUG
,

60 (*
libbpf_¥öt_‚_t
)(
	tlibbpf_¥öt_Àvñ
 
	tÀvñ
,

61 c⁄° *, 
	tva_li°
 
	t≠
);

63 
LIBBPF_API
 
libbpf_¥öt_‚_t
 
libbpf_£t_¥öt
÷ibbpf_¥öt_‚_à
‚
);

66 
bpf_obje˘
;

68 
	sbpf_obje˘_›í_©å
 {

69 c⁄° *
fûe
;

70 
bpf_¥og_ty≥
 
¥og_ty≥
;

73 
	sbpf_obje˘_›í_›ts
 {

75 
size_t
 
sz
;

82 c⁄° *
obje˘_«me
;

84 
boﬁ
 
ªœxed_m≠s
;

90 
LIBBPF_DEPRECATED_SINCE
(0, 6, "field hasÇoÉffect")

91 
boﬁ
 
ªœxed_c‹e_ªlocs
;

96 c⁄° *
pö_roŸ_∑th
;

98 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_program__set_attach_target() onÉach individual bpf_program")

99 
__u32
 
©èch_¥og_fd
;

103 c⁄° *
kc⁄fig
;

110 c⁄° *
btf_cu°om_∑th
;

132 *
kî√l_log_buf
;

133 
size_t
 
kî√l_log_size
;

147 
__u32
 
kî√l_log_Àvñ
;

149 
size_t
 :0;

151 
	#bpf_obje˘_›í_›ts__œ°_fõld
 
kî√l_log_Àvñ


	)

153 
LIBBPF_API
 
bpf_obje˘
 *
bpf_obje˘__›í
(c⁄° *
∑th
);

165 
LIBBPF_API
 
bpf_obje˘
 *

166 
bpf_obje˘__›í_fûe
(c⁄° *
∑th
, c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
);

178 
LIBBPF_API
 
bpf_obje˘
 *

179 
bpf_obje˘__›í_mem
(c⁄° *
obj_buf
, 
size_t
 
obj_buf_sz
,

180 c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
);

183 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_object__open_mem() instead")

184 
LIBBPF_API
 
bpf_obje˘
 *

185 
bpf_obje˘__›í_buf„r
(c⁄° *
obj_buf
, 
size_t
 
obj_buf_sz
,

186 c⁄° *
«me
);

187 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__open_file() instead")

188 
LIBBPF_API
 
bpf_obje˘
 *

189 
bpf_obje˘__›í_x©å
(
bpf_obje˘_›í_©å
 *
©å
);

191 
	elibbpf_pö_ty≥
 {

192 
LIBBPF_PIN_NONE
,

194 
LIBBPF_PIN_BY_NAME
,

201 
LIBBPF_API
 
bpf_obje˘__pö_m≠s
(
bpf_obje˘
 *
obj
, c⁄° *
∑th
);

202 
LIBBPF_API
 
bpf_obje˘__u≈ö_m≠s
(
bpf_obje˘
 *
obj
,

203 c⁄° *
∑th
);

204 
LIBBPF_API
 
bpf_obje˘__pö_¥ogøms
(
bpf_obje˘
 *
obj
,

205 c⁄° *
∑th
);

206 
LIBBPF_API
 
bpf_obje˘__u≈ö_¥ogøms
(
bpf_obje˘
 *
obj
,

207 c⁄° *
∑th
);

208 
LIBBPF_API
 
bpf_obje˘__pö
(
bpf_obje˘
 *
obje˘
, c⁄° *
∑th
);

209 
LIBBPF_API
 
bpf_obje˘__˛o£
(
bpf_obje˘
 *
obje˘
);

211 
	sbpf_obje˘_lﬂd_©å
 {

212 
bpf_obje˘
 *
obj
;

213 
log_Àvñ
;

214 c⁄° *
èrgë_btf_∑th
;

218 
LIBBPF_API
 
bpf_obje˘__lﬂd
(
bpf_obje˘
 *
obj
);

219 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_object__load() instead")

220 
LIBBPF_API
 
bpf_obje˘__lﬂd_x©å
(
bpf_obje˘_lﬂd_©å
 *
©å
);

221 
LIBBPF_DEPRECATED_SINCE
(0, 6, "bpf_object__unload() is deprecated, use bpf_object__close() instead")

222 
LIBBPF_API
 
bpf_obje˘__u∆ﬂd
(
bpf_obje˘
 *
obj
);

224 
LIBBPF_API
 c⁄° *
bpf_obje˘__«me
(c⁄° 
bpf_obje˘
 *
obj
);

225 
LIBBPF_API
 
bpf_obje˘__kvîsi⁄
(c⁄° 
bpf_obje˘
 *
obj
);

226 
LIBBPF_API
 
bpf_obje˘__£t_kvîsi⁄
(
bpf_obje˘
 *
obj
, 
__u32
 
kîn_vîsi⁄
);

228 
btf
;

229 
LIBBPF_API
 
btf
 *
bpf_obje˘__btf
(c⁄° 
bpf_obje˘
 *
obj
);

230 
LIBBPF_API
 
bpf_obje˘__btf_fd
(c⁄° 
bpf_obje˘
 *
obj
);

232 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__find_program_by_name() instead")

233 
LIBBPF_API
 
bpf_¥ogøm
 *

234 
bpf_obje˘__föd_¥ogøm_by_tôÀ
(c⁄° 
bpf_obje˘
 *
obj
,

235 c⁄° *
tôÀ
);

236 
LIBBPF_API
 
bpf_¥ogøm
 *

237 
bpf_obje˘__föd_¥ogøm_by_«me
(c⁄° 
bpf_obje˘
 *
obj
,

238 c⁄° *
«me
);

240 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "track bpf_objects inápplication code instead")

241 
bpf_obje˘
 *
bpf_obje˘__√xt
(bpf_obje˘ *
¥ev
);

242 
	#bpf_obje˘__f‹_óch_ß„
(
pos
, 
tmp
) \

243 (
pos
Ë
	`bpf_obje˘__√xt
(
NULL
), \

244 (
tmp
Ë
	`bpf_obje˘__√xt
(
pos
); \

245 (
pos
Ë!
NULL
; \

246 (
pos
Ë(
tmp
), (tmpË
	`bpf_obje˘__√xt
—mp))

	)

248 (*
bpf_obje˘_˛ór_¥iv_t
)(
	tbpf_obje˘
 *, *);

249 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

250 
LIBBPF_API
 
bpf_obje˘__£t_¥iv
(
bpf_obje˘
 *
obj
, *
¥iv
,

251 
bpf_obje˘_˛ór_¥iv_t
 
˛ór_¥iv
);

252 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

253 
LIBBPF_API
 *
bpf_obje˘__¥iv
(c⁄° 
bpf_obje˘
 *
¥og
);

255 
LIBBPF_API
 

256 
libbpf_¥og_ty≥_by_«me
(c⁄° *
«me
, 
bpf_¥og_ty≥
 *
¥og_ty≥
,

257 
bpf_©èch_ty≥
 *
ex≥˘ed_©èch_ty≥
);

258 
LIBBPF_API
 
libbpf_©èch_ty≥_by_«me
(c⁄° *
«me
,

259 
bpf_©èch_ty≥
 *
©èch_ty≥
);

260 
LIBBPF_API
 
libbpf_föd_vmlöux_btf_id
(c⁄° *
«me
,

261 
bpf_©èch_ty≥
 
©èch_ty≥
);

264 
bpf_¥ogøm
;

265 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__next_program() instead")

266 
bpf_¥ogøm
 *
bpf_¥ogøm__√xt
(bpf_¥ogøm *
¥og
,

267 c⁄° 
bpf_obje˘
 *
obj
);

268 
LIBBPF_API
 
bpf_¥ogøm
 *

269 
bpf_obje˘__√xt_¥ogøm
(c⁄° 
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
¥og
);

271 
	#bpf_obje˘__f‹_óch_¥ogøm
(
pos
, 
obj
) \

272 (
pos
Ë
	`bpf_obje˘__√xt_¥ogøm
((
obj
), 
NULL
); \

273 (
pos
Ë!
NULL
; \

274 (
pos
Ë
	`bpf_obje˘__√xt_¥ogøm
((
obj
), (pos)))

	)

276 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__prev_program() instead")

277 
bpf_¥ogøm
 *
bpf_¥ogøm__¥ev
(bpf_¥ogøm *
¥og
,

278 c⁄° 
bpf_obje˘
 *
obj
);

279 
LIBBPF_API
 
bpf_¥ogøm
 *

280 
bpf_obje˘__¥ev_¥ogøm
(c⁄° 
bpf_obje˘
 *
obj
, 
bpf_¥ogøm
 *
¥og
);

282 (*
bpf_¥ogøm_˛ór_¥iv_t
)(
	tbpf_¥ogøm
 *, *);

284 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

285 
LIBBPF_API
 
bpf_¥ogøm__£t_¥iv
(
bpf_¥ogøm
 *
¥og
, *
¥iv
,

286 
bpf_¥ogøm_˛ór_¥iv_t
 
˛ór_¥iv
);

287 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

288 
LIBBPF_API
 *
bpf_¥ogøm__¥iv
(c⁄° 
bpf_¥ogøm
 *
¥og
);

289 
LIBBPF_API
 
bpf_¥ogøm__£t_ifödex
(
bpf_¥ogøm
 *
¥og
,

290 
__u32
 
ifödex
);

292 
LIBBPF_API
 c⁄° *
bpf_¥ogøm__«me
(c⁄° 
bpf_¥ogøm
 *
¥og
);

293 
LIBBPF_API
 c⁄° *
bpf_¥ogøm__£˘i⁄_«me
(c⁄° 
bpf_¥ogøm
 *
¥og
);

294 
LIBBPF_API
 
LIBBPF_DEPRECATED
("BPFÖrogramÅitle is confusingÅerm;Ölease use bpf_program__section_name() instead")

295 c⁄° *
bpf_¥ogøm__tôÀ
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
boﬁ
 
√eds_c›y
);

296 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__autﬁﬂd
(c⁄° 
bpf_¥ogøm
 *
¥og
);

297 
LIBBPF_API
 
bpf_¥ogøm__£t_autﬁﬂd
(
bpf_¥ogøm
 *
¥og
, 
boﬁ
 
autﬁﬂd
);

300 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_program__insn_cnt() instead")

301 
LIBBPF_API
 
size_t
 
bpf_¥ogøm__size
(c⁄° 
bpf_¥ogøm
 *
¥og
);

303 
bpf_ö¢
;

325 
LIBBPF_API
 c⁄° 
bpf_ö¢
 *
bpf_¥ogøm__ö¢s
(c⁄° 
bpf_¥ogøm
 *
¥og
);

341 
LIBBPF_API
 
bpf_¥ogøm__£t_ö¢s
(
bpf_¥ogøm
 *
¥og
,

342 
bpf_ö¢
 *
√w_ö¢s
, 
size_t
 
√w_ö¢_˙t
);

353 
LIBBPF_API
 
size_t
 
bpf_¥ogøm__ö¢_˙t
(c⁄° 
bpf_¥ogøm
 *
¥og
);

355 
LIBBPF_DEPRECATED_SINCE
(0, 6, "use bpf_object__load() instead")

356 
LIBBPF_API
 
bpf_¥ogøm__lﬂd
(
bpf_¥ogøm
 *
¥og
, c⁄° *
li˚n£
, 
__u32
 
kîn_vîsi⁄
);

357 
LIBBPF_API
 
bpf_¥ogøm__fd
(c⁄° 
bpf_¥ogøm
 *
¥og
);

358 
LIBBPF_DEPRECATED_SINCE
(0, 7, "multi-instance bpf_program support is deprecated")

359 
LIBBPF_API
 
bpf_¥ogøm__pö_ö°™˚
(
bpf_¥ogøm
 *
¥og
,

360 c⁄° *
∑th
,

361 
ö°™˚
);

362 
LIBBPF_DEPRECATED_SINCE
(0, 7, "multi-instance bpf_program support is deprecated")

363 
LIBBPF_API
 
bpf_¥ogøm__u≈ö_ö°™˚
(
bpf_¥ogøm
 *
¥og
,

364 c⁄° *
∑th
,

365 
ö°™˚
);

377 
LIBBPF_API
 
bpf_¥ogøm__pö
(
bpf_¥ogøm
 *
¥og
, c⁄° *
∑th
);

391 
LIBBPF_API
 
bpf_¥ogøm__u≈ö
(
bpf_¥ogøm
 *
¥og
, c⁄° *
∑th
);

392 
LIBBPF_API
 
bpf_¥ogøm__u∆ﬂd
(
bpf_¥ogøm
 *
¥og
);

394 
bpf_lök
;

396 
LIBBPF_API
 
bpf_lök
 *
bpf_lök__›í
(c⁄° *
∑th
);

397 
LIBBPF_API
 
bpf_lök__fd
(c⁄° 
bpf_lök
 *
lök
);

398 
LIBBPF_API
 c⁄° *
bpf_lök__pö_∑th
(c⁄° 
bpf_lök
 *
lök
);

410 
LIBBPF_API
 
bpf_lök__pö
(
bpf_lök
 *
lök
, c⁄° *
∑th
);

424 
LIBBPF_API
 
bpf_lök__u≈ö
(
bpf_lök
 *
lök
);

425 
LIBBPF_API
 
bpf_lök__upd©e_¥ogøm
(
bpf_lök
 *
lök
,

426 
bpf_¥ogøm
 *
¥og
);

427 
LIBBPF_API
 
bpf_lök__disc⁄√˘
(
bpf_lök
 *
lök
);

428 
LIBBPF_API
 
bpf_lök__dëach
(
bpf_lök
 *
lök
);

429 
LIBBPF_API
 
bpf_lök__de°roy
(
bpf_lök
 *
lök
);

447 
LIBBPF_API
 
bpf_lök
 *

448 
bpf_¥ogøm__©èch
(c⁄° 
bpf_¥ogøm
 *
¥og
);

450 
	sbpf_≥rf_evít_›ts
 {

452 
size_t
 
sz
;

454 
__u64
 
bpf_cookõ
;

456 
	#bpf_≥rf_evít_›ts__œ°_fõld
 
bpf_cookõ


	)

458 
LIBBPF_API
 
bpf_lök
 *

459 
bpf_¥ogøm__©èch_≥rf_evít
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
pfd
);

461 
LIBBPF_API
 
bpf_lök
 *

462 
bpf_¥ogøm__©èch_≥rf_evít_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
pfd
,

463 c⁄° 
bpf_≥rf_evít_›ts
 *
›ts
);

465 
	sbpf_k¥obe_›ts
 {

467 
size_t
 
sz
;

469 
__u64
 
bpf_cookõ
;

471 
size_t
 
off£t
;

473 
boﬁ
 
ªçrobe
;

474 
size_t
 :0;

476 
	#bpf_k¥obe_›ts__œ°_fõld
 
ªçrobe


	)

478 
LIBBPF_API
 
bpf_lök
 *

479 
bpf_¥ogøm__©èch_k¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
boﬁ
 
ªçrobe
,

480 c⁄° *
func_«me
);

481 
LIBBPF_API
 
bpf_lök
 *

482 
bpf_¥ogøm__©èch_k¥obe_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
,

483 c⁄° *
func_«me
,

484 c⁄° 
bpf_k¥obe_›ts
 *
›ts
);

486 
	sbpf_k¥obe_mu…i_›ts
 {

488 
size_t
 
sz
;

490 c⁄° **
syms
;

492 c⁄° *
addrs
;

494 c⁄° 
__u64
 *
cookõs
;

496 
size_t
 
˙t
;

498 
boﬁ
 
ªçrobe
;

499 
size_t
 :0;

502 
	#bpf_k¥obe_mu…i_›ts__œ°_fõld
 
ªçrobe


	)

504 
LIBBPF_API
 
bpf_lök
 *

505 
bpf_¥ogøm__©èch_k¥obe_mu…i_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
,

506 c⁄° *
∑âîn
,

507 c⁄° 
bpf_k¥obe_mu…i_›ts
 *
›ts
);

509 
	sbpf_u¥obe_›ts
 {

511 
size_t
 
sz
;

515 
size_t
 
ªf_˘r_off£t
;

517 
__u64
 
bpf_cookõ
;

519 
boﬁ
 
ªçrobe
;

527 c⁄° *
func_«me
;

528 
size_t
 :0;

530 
	#bpf_u¥obe_›ts__œ°_fõld
 
func_«me


	)

548 
LIBBPF_API
 
bpf_lök
 *

549 
bpf_¥ogøm__©èch_u¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
boﬁ
 
ªçrobe
,

550 
pid_t
 
pid
, c⁄° *
bö¨y_∑th
,

551 
size_t
 
func_off£t
);

567 
LIBBPF_API
 
bpf_lök
 *

568 
bpf_¥ogøm__©èch_u¥obe_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
pid_t
 
pid
,

569 c⁄° *
bö¨y_∑th
, 
size_t
 
func_off£t
,

570 c⁄° 
bpf_u¥obe_›ts
 *
›ts
);

572 
	sbpf_usdt_›ts
 {

574 
size_t
 
sz
;

576 
__u64
 
usdt_cookõ
;

577 
size_t
 :0;

579 
	#bpf_usdt_›ts__œ°_fõld
 
usdt_cookõ


	)

597 
LIBBPF_API
 
bpf_lök
 *

598 
bpf_¥ogøm__©èch_usdt
(c⁄° 
bpf_¥ogøm
 *
¥og
,

599 
pid_t
 
pid
, c⁄° *
bö¨y_∑th
,

600 c⁄° *
usdt_¥ovidî
, c⁄° *
usdt_«me
,

601 c⁄° 
bpf_usdt_›ts
 *
›ts
);

603 
	sbpf_åa˚poöt_›ts
 {

605 
size_t
 
sz
;

607 
__u64
 
bpf_cookõ
;

609 
	#bpf_åa˚poöt_›ts__œ°_fõld
 
bpf_cookõ


	)

611 
LIBBPF_API
 
bpf_lök
 *

612 
bpf_¥ogøm__©èch_åa˚poöt
(c⁄° 
bpf_¥ogøm
 *
¥og
,

613 c⁄° *
ç_ˇãg‹y
,

614 c⁄° *
ç_«me
);

615 
LIBBPF_API
 
bpf_lök
 *

616 
bpf_¥ogøm__©èch_åa˚poöt_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
,

617 c⁄° *
ç_ˇãg‹y
,

618 c⁄° *
ç_«me
,

619 c⁄° 
bpf_åa˚poöt_›ts
 *
›ts
);

621 
LIBBPF_API
 
bpf_lök
 *

622 
bpf_¥ogøm__©èch_øw_åa˚poöt
(c⁄° 
bpf_¥ogøm
 *
¥og
,

623 c⁄° *
ç_«me
);

625 
	sbpf_åa˚_›ts
 {

627 
size_t
 
sz
;

629 
__u64
 
cookõ
;

631 
	#bpf_åa˚_›ts__œ°_fõld
 
cookõ


	)

633 
LIBBPF_API
 
bpf_lök
 *

634 
bpf_¥ogøm__©èch_åa˚
(c⁄° 
bpf_¥ogøm
 *
¥og
);

635 
LIBBPF_API
 
bpf_lök
 *

636 
bpf_¥ogøm__©èch_åa˚_›ts
(c⁄° 
bpf_¥ogøm
 *
¥og
, c⁄° 
bpf_åa˚_›ts
 *
›ts
);

638 
LIBBPF_API
 
bpf_lök
 *

639 
bpf_¥ogøm__©èch_lsm
(c⁄° 
bpf_¥ogøm
 *
¥og
);

640 
LIBBPF_API
 
bpf_lök
 *

641 
bpf_¥ogøm__©èch_cgroup
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
cgroup_fd
);

642 
LIBBPF_API
 
bpf_lök
 *

643 
bpf_¥ogøm__©èch_√äs
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
√äs_fd
);

644 
LIBBPF_API
 
bpf_lök
 *

645 
bpf_¥ogøm__©èch_xdp
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
ifödex
);

646 
LIBBPF_API
 
bpf_lök
 *

647 
bpf_¥ogøm__©èch_‰ïœ˚
(c⁄° 
bpf_¥ogøm
 *
¥og
,

648 
èrgë_fd
, c⁄° *
©èch_func_«me
);

650 
bpf_m≠
;

652 
LIBBPF_API
 
bpf_lök
 *
bpf_m≠__©èch_°ru˘_›s
(c⁄° 
bpf_m≠
 *
m≠
);

654 
	sbpf_ôî_©èch_›ts
 {

655 
size_t
 
sz
;

656 
bpf_ôî_lök_öfo
 *
lök_öfo
;

657 
__u32
 
lök_öfo_Àn
;

659 
	#bpf_ôî_©èch_›ts__œ°_fõld
 
lök_öfo_Àn


	)

661 
LIBBPF_API
 
bpf_lök
 *

662 
bpf_¥ogøm__©èch_ôî
(c⁄° 
bpf_¥ogøm
 *
¥og
,

663 c⁄° 
bpf_ôî_©èch_›ts
 *
›ts
);

693 
	sbpf_¥og_¥ï_ªsu…
 {

698 
bpf_ö¢
 *
√w_ö¢_±r
;

699 
√w_ö¢_˙t
;

702 *
pfd
;

717 (*
bpf_¥ogøm_¥ï_t
)(
	tbpf_¥ogøm
 *
	t¥og
, 
	tn
,

718 
	tbpf_ö¢
 *
	tö¢s
, 
	tö¢s_˙t
,

719 
	tbpf_¥og_¥ï_ªsu…
 *
	tªs
);

721 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_program__insns() for getting bpf_program instructions")

722 
LIBBPF_API
 
bpf_¥ogøm__£t_¥ï
(
bpf_¥ogøm
 *
¥og
, 
ƒ_ö°™˚
,

723 
bpf_¥ogøm_¥ï_t
 
¥ï
);

725 
LIBBPF_DEPRECATED_SINCE
(0, 7, "multi-instance bpf_program support is deprecated")

726 
LIBBPF_API
 
bpf_¥ogøm__¡h_fd
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
n
);

731 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

732 
LIBBPF_API
 
bpf_¥ogøm__£t_sockë_fûãr
(
bpf_¥ogøm
 *
¥og
);

733 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

734 
LIBBPF_API
 
bpf_¥ogøm__£t_åa˚poöt
(
bpf_¥ogøm
 *
¥og
);

735 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

736 
LIBBPF_API
 
bpf_¥ogøm__£t_øw_åa˚poöt
(
bpf_¥ogøm
 *
¥og
);

737 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

738 
LIBBPF_API
 
bpf_¥ogøm__£t_k¥obe
(
bpf_¥ogøm
 *
¥og
);

739 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

740 
LIBBPF_API
 
bpf_¥ogøm__£t_lsm
(
bpf_¥ogøm
 *
¥og
);

741 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

742 
LIBBPF_API
 
bpf_¥ogøm__£t_sched_˛s
(
bpf_¥ogøm
 *
¥og
);

743 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

744 
LIBBPF_API
 
bpf_¥ogøm__£t_sched_a˘
(
bpf_¥ogøm
 *
¥og
);

745 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

746 
LIBBPF_API
 
bpf_¥ogøm__£t_xdp
(
bpf_¥ogøm
 *
¥og
);

747 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

748 
LIBBPF_API
 
bpf_¥ogøm__£t_≥rf_evít
(
bpf_¥ogøm
 *
¥og
);

749 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

750 
LIBBPF_API
 
bpf_¥ogøm__£t_åacög
(
bpf_¥ogøm
 *
¥og
);

751 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

752 
LIBBPF_API
 
bpf_¥ogøm__£t_°ru˘_›s
(
bpf_¥ogøm
 *
¥og
);

753 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

754 
LIBBPF_API
 
bpf_¥ogøm__£t_exãnsi⁄
(
bpf_¥ogøm
 *
¥og
);

755 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__set_type() instead")

756 
LIBBPF_API
 
bpf_¥ogøm__£t_sk_lookup
(
bpf_¥ogøm
 *
¥og
);

758 
LIBBPF_API
 
bpf_¥og_ty≥
 
bpf_¥ogøm__ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
);

771 
LIBBPF_API
 
bpf_¥ogøm__£t_ty≥
(
bpf_¥ogøm
 *
¥og
,

772 
bpf_¥og_ty≥
 
ty≥
);

774 
LIBBPF_API
 
bpf_©èch_ty≥


775 
bpf_¥ogøm__ex≥˘ed_©èch_ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
);

789 
LIBBPF_API
 

790 
bpf_¥ogøm__£t_ex≥˘ed_©èch_ty≥
(
bpf_¥ogøm
 *
¥og
,

791 
bpf_©èch_ty≥
 
ty≥
);

793 
LIBBPF_API
 
__u32
 
bpf_¥ogøm__Êags
(c⁄° 
bpf_¥ogøm
 *
¥og
);

794 
LIBBPF_API
 
bpf_¥ogøm__£t_Êags
(
bpf_¥ogøm
 *
¥og
, 
__u32
 
Êags
);

800 
LIBBPF_API
 
__u32
 
bpf_¥ogøm__log_Àvñ
(c⁄° 
bpf_¥ogøm
 *
¥og
);

801 
LIBBPF_API
 
bpf_¥ogøm__£t_log_Àvñ
(
bpf_¥ogøm
 *
¥og
, 
__u32
 
log_Àvñ
);

802 
LIBBPF_API
 c⁄° *
bpf_¥ogøm__log_buf
(c⁄° 
bpf_¥ogøm
 *
¥og
, 
size_t
 *
log_size
);

803 
LIBBPF_API
 
bpf_¥ogøm__£t_log_buf
(
bpf_¥ogøm
 *
¥og
, *
log_buf
, 
size_t
 
log_size
);

816 
LIBBPF_API
 

817 
bpf_¥ogøm__£t_©èch_èrgë
(
bpf_¥ogøm
 *
¥og
, 
©èch_¥og_fd
,

818 c⁄° *
©èch_func_«me
);

820 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

821 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_sockë_fûãr
(c⁄° 
bpf_¥ogøm
 *
¥og
);

822 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

823 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_åa˚poöt
(c⁄° 
bpf_¥ogøm
 *
¥og
);

824 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

825 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_øw_åa˚poöt
(c⁄° 
bpf_¥ogøm
 *
¥og
);

826 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

827 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_k¥obe
(c⁄° 
bpf_¥ogøm
 *
¥og
);

828 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

829 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_lsm
(c⁄° 
bpf_¥ogøm
 *
¥og
);

830 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

831 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_sched_˛s
(c⁄° 
bpf_¥ogøm
 *
¥og
);

832 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

833 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_sched_a˘
(c⁄° 
bpf_¥ogøm
 *
¥og
);

834 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

835 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_xdp
(c⁄° 
bpf_¥ogøm
 *
¥og
);

836 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

837 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_≥rf_evít
(c⁄° 
bpf_¥ogøm
 *
¥og
);

838 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

839 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_åacög
(c⁄° 
bpf_¥ogøm
 *
¥og
);

840 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

841 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_°ru˘_›s
(c⁄° 
bpf_¥ogøm
 *
¥og
);

842 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

843 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_exãnsi⁄
(c⁄° 
bpf_¥ogøm
 *
¥og
);

844 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_program__type() instead")

845 
LIBBPF_API
 
boﬁ
 
bpf_¥ogøm__is_sk_lookup
(c⁄° 
bpf_¥ogøm
 *
¥og
);

853 
	sbpf_m≠_def
 {

854 
ty≥
;

855 
key_size
;

856 
vÆue_size
;

857 
max_íåõs
;

858 
m≠_Êags
;

869 
LIBBPF_API
 
bpf_m≠
 *

870 
bpf_obje˘__föd_m≠_by_«me
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° *
«me
);

872 
LIBBPF_API
 

873 
bpf_obje˘__föd_m≠_fd_by_«me
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° *
«me
);

879 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_object__find_map_by_name() instead")

880 
bpf_m≠
 *

881 
bpf_obje˘__föd_m≠_by_off£t
(
bpf_obje˘
 *
obj
, 
size_t
 
off£t
);

883 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__next_map() instead")

884 
bpf_m≠
 *
bpf_m≠__√xt
(c⁄° bpf_m≠ *
m≠
, c⁄° 
bpf_obje˘
 *
obj
);

885 
LIBBPF_API
 
bpf_m≠
 *

886 
bpf_obje˘__√xt_m≠
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° 
bpf_m≠
 *
m≠
);

888 
	#bpf_obje˘__f‹_óch_m≠
(
pos
, 
obj
) \

889 (
pos
Ë
	`bpf_obje˘__√xt_m≠
((
obj
), 
NULL
); \

890 (
pos
Ë!
NULL
; \

891 (
pos
Ë
	`bpf_obje˘__√xt_m≠
((
obj
), (pos)))

	)

892 
	#bpf_m≠__f‹_óch
 
bpf_obje˘__f‹_óch_m≠


	)

894 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__prev_map() instead")

895 
bpf_m≠
 *
bpf_m≠__¥ev
(c⁄° bpf_m≠ *
m≠
, c⁄° 
bpf_obje˘
 *
obj
);

896 
LIBBPF_API
 
bpf_m≠
 *

897 
bpf_obje˘__¥ev_m≠
(c⁄° 
bpf_obje˘
 *
obj
, c⁄° 
bpf_m≠
 *
m≠
);

918 
LIBBPF_API
 
bpf_m≠__£t_auto¸óã
(
bpf_m≠
 *
m≠
, 
boﬁ
 
auto¸óã
);

919 
LIBBPF_API
 
boﬁ
 
bpf_m≠__auto¸óã
(c⁄° 
bpf_m≠
 *
m≠
);

927 
LIBBPF_API
 
bpf_m≠__fd
(c⁄° 
bpf_m≠
 *
m≠
);

928 
LIBBPF_API
 
bpf_m≠__ªu£_fd
(
bpf_m≠
 *
m≠
, 
fd
);

930 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 8, "useáppropriate getters or setters instead")

931 c⁄° 
bpf_m≠_def
 *
bpf_m≠__def
(c⁄° 
bpf_m≠
 *
m≠
);

933 
LIBBPF_API
 c⁄° *
bpf_m≠__«me
(c⁄° 
bpf_m≠
 *
m≠
);

935 
LIBBPF_API
 
bpf_m≠_ty≥
 
bpf_m≠__ty≥
(c⁄° 
bpf_m≠
 *
m≠
);

936 
LIBBPF_API
 
bpf_m≠__£t_ty≥
(
bpf_m≠
 *
m≠
, 
bpf_m≠_ty≥
 
ty≥
);

938 
LIBBPF_API
 
__u32
 
bpf_m≠__max_íåõs
(c⁄° 
bpf_m≠
 *
m≠
);

939 
LIBBPF_API
 
bpf_m≠__£t_max_íåõs
(
bpf_m≠
 *
m≠
, 
__u32
 
max_íåõs
);

940 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_map__set_max_entries() instead")

941 
LIBBPF_API
 
bpf_m≠__ªsize
(
bpf_m≠
 *
m≠
, 
__u32
 
max_íåõs
);

943 
LIBBPF_API
 
__u32
 
bpf_m≠__m≠_Êags
(c⁄° 
bpf_m≠
 *
m≠
);

944 
LIBBPF_API
 
bpf_m≠__£t_m≠_Êags
(
bpf_m≠
 *
m≠
, 
__u32
 
Êags
);

946 
LIBBPF_API
 
__u32
 
bpf_m≠__numa_node
(c⁄° 
bpf_m≠
 *
m≠
);

947 
LIBBPF_API
 
bpf_m≠__£t_numa_node
(
bpf_m≠
 *
m≠
, 
__u32
 
numa_node
);

949 
LIBBPF_API
 
__u32
 
bpf_m≠__key_size
(c⁄° 
bpf_m≠
 *
m≠
);

950 
LIBBPF_API
 
bpf_m≠__£t_key_size
(
bpf_m≠
 *
m≠
, 
__u32
 
size
);

952 
LIBBPF_API
 
__u32
 
bpf_m≠__vÆue_size
(c⁄° 
bpf_m≠
 *
m≠
);

953 
LIBBPF_API
 
bpf_m≠__£t_vÆue_size
(
bpf_m≠
 *
m≠
, 
__u32
 
size
);

955 
LIBBPF_API
 
__u32
 
bpf_m≠__btf_key_ty≥_id
(c⁄° 
bpf_m≠
 *
m≠
);

956 
LIBBPF_API
 
__u32
 
bpf_m≠__btf_vÆue_ty≥_id
(c⁄° 
bpf_m≠
 *
m≠
);

958 
LIBBPF_API
 
__u32
 
bpf_m≠__ifödex
(c⁄° 
bpf_m≠
 *
m≠
);

959 
LIBBPF_API
 
bpf_m≠__£t_ifödex
(
bpf_m≠
 *
m≠
, 
__u32
 
ifödex
);

961 
LIBBPF_API
 
__u64
 
bpf_m≠__m≠_exåa
(c⁄° 
bpf_m≠
 *
m≠
);

962 
LIBBPF_API
 
bpf_m≠__£t_m≠_exåa
(
bpf_m≠
 *
m≠
, 
__u64
 
m≠_exåa
);

964 (*
bpf_m≠_˛ór_¥iv_t
)(
	tbpf_m≠
 *, *);

965 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

966 
LIBBPF_API
 
bpf_m≠__£t_¥iv
(
bpf_m≠
 *
m≠
, *
¥iv
,

967 
bpf_m≠_˛ór_¥iv_t
 
˛ór_¥iv
);

968 
LIBBPF_DEPRECATED_SINCE
(0, 7, "storage via set_priv/priv is deprecated")

969 
LIBBPF_API
 *
bpf_m≠__¥iv
(c⁄° 
bpf_m≠
 *
m≠
);

970 
LIBBPF_API
 
bpf_m≠__£t_öôül_vÆue
(
bpf_m≠
 *
m≠
,

971 c⁄° *
d©a
, 
size_t
 
size
);

972 
LIBBPF_API
 c⁄° *
bpf_m≠__öôül_vÆue
(
bpf_m≠
 *
m≠
, 
size_t
 *
psize
);

973 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_map__type() instead")

974 
LIBBPF_API
 
boﬁ
 
bpf_m≠__is_ofÊﬂd_√uåÆ
(c⁄° 
bpf_m≠
 *
m≠
);

983 
LIBBPF_API
 
boﬁ
 
bpf_m≠__is_öã∫Æ
(c⁄° 
bpf_m≠
 *
m≠
);

984 
LIBBPF_API
 
bpf_m≠__£t_pö_∑th
(
bpf_m≠
 *
m≠
, c⁄° *
∑th
);

985 
LIBBPF_API
 c⁄° *
bpf_m≠__pö_∑th
(c⁄° 
bpf_m≠
 *
m≠
);

986 
LIBBPF_API
 
boﬁ
 
bpf_m≠__is_pö√d
(c⁄° 
bpf_m≠
 *
m≠
);

987 
LIBBPF_API
 
bpf_m≠__pö
(
bpf_m≠
 *
m≠
, c⁄° *
∑th
);

988 
LIBBPF_API
 
bpf_m≠__u≈ö
(
bpf_m≠
 *
m≠
, c⁄° *
∑th
);

990 
LIBBPF_API
 
bpf_m≠__£t_ö√r_m≠_fd
(
bpf_m≠
 *
m≠
, 
fd
);

991 
LIBBPF_API
 
bpf_m≠
 *
bpf_m≠__ö√r_m≠
(bpf_m≠ *
m≠
);

1013 
LIBBPF_API
 
bpf_m≠__lookup_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

1014 c⁄° *
key
, 
size_t
 
key_sz
,

1015 *
vÆue
, 
size_t
 
vÆue_sz
, 
__u64
 
Êags
);

1037 
LIBBPF_API
 
bpf_m≠__upd©e_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

1038 c⁄° *
key
, 
size_t
 
key_sz
,

1039 c⁄° *
vÆue
, 
size_t
 
vÆue_sz
, 
__u64
 
Êags
);

1053 
LIBBPF_API
 
bpf_m≠__dñëe_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

1054 c⁄° *
key
, 
size_t
 
key_sz
, 
__u64
 
Êags
);

1076 
LIBBPF_API
 
bpf_m≠__lookup_™d_dñëe_ñem
(c⁄° 
bpf_m≠
 *
m≠
,

1077 c⁄° *
key
, 
size_t
 
key_sz
,

1078 *
vÆue
, 
size_t
 
vÆue_sz
, 
__u64
 
Êags
);

1094 
LIBBPF_API
 
bpf_m≠__gë_√xt_key
(c⁄° 
bpf_m≠
 *
m≠
,

1095 c⁄° *
cur_key
, *
√xt_key
, 
size_t
 
key_sz
);

1129 
LIBBPF_API
 
libbpf_gë_îr‹
(c⁄° *
±r
);

1131 
	sbpf_¥og_lﬂd_©å
 {

1132 c⁄° *
fûe
;

1133 
bpf_¥og_ty≥
 
¥og_ty≥
;

1134 
bpf_©èch_ty≥
 
ex≥˘ed_©èch_ty≥
;

1135 
ifödex
;

1136 
log_Àvñ
;

1137 
¥og_Êags
;

1140 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_object__open()ánd bpf_object__load() instead")

1141 
LIBBPF_API
 
bpf_¥og_lﬂd_x©å
(c⁄° 
bpf_¥og_lﬂd_©å
 *
©å
,

1142 
bpf_obje˘
 **
pobj
, *
¥og_fd
);

1143 
LIBBPF_DEPRECATED_SINCE
(0, 7, "use bpf_object__open()ánd bpf_object__load() instead")

1144 
LIBBPF_API
 
bpf_¥og_lﬂd_dïªˇãd
(c⁄° *
fûe
, 
bpf_¥og_ty≥
 
ty≥
,

1145 
bpf_obje˘
 **
pobj
, *
¥og_fd
);

1148 
	sxdp_lök_öfo
 {

1149 
__u32
 
¥og_id
;

1150 
__u32
 
drv_¥og_id
;

1151 
__u32
 
hw_¥og_id
;

1152 
__u32
 
skb_¥og_id
;

1153 
__u8
 
©èch_mode
;

1156 
	sbpf_xdp_£t_lök_›ts
 {

1157 
size_t
 
sz
;

1158 
ﬁd_fd
;

1159 
size_t
 :0;

1161 
	#bpf_xdp_£t_lök_›ts__œ°_fõld
 
ﬁd_fd


	)

1163 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_xdp_attach() instead")

1164 
LIBBPF_API
 
bpf_£t_lök_xdp_fd
(
ifödex
, 
fd
, 
__u32
 
Êags
);

1165 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_xdp_attach() instead")

1166 
LIBBPF_API
 
bpf_£t_lök_xdp_fd_›ts
(
ifödex
, 
fd
, 
__u32
 
Êags
,

1167 c⁄° 
bpf_xdp_£t_lök_›ts
 *
›ts
);

1168 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_xdp_query_id() instead")

1169 
LIBBPF_API
 
bpf_gë_lök_xdp_id
(
ifödex
, 
__u32
 *
¥og_id
, __u32 
Êags
);

1170 
LIBBPF_DEPRECATED_SINCE
(0, 8, "use bpf_xdp_query() instead")

1171 
LIBBPF_API
 
bpf_gë_lök_xdp_öfo
(
ifödex
, 
xdp_lök_öfo
 *
öfo
,

1172 
size_t
 
öfo_size
, 
__u32
 
Êags
);

1174 
	sbpf_xdp_©èch_›ts
 {

1175 
size_t
 
sz
;

1176 
ﬁd_¥og_fd
;

1177 
size_t
 :0;

1179 
	#bpf_xdp_©èch_›ts__œ°_fõld
 
ﬁd_¥og_fd


	)

1181 
	sbpf_xdp_quîy_›ts
 {

1182 
size_t
 
sz
;

1183 
__u32
 
¥og_id
;

1184 
__u32
 
drv_¥og_id
;

1185 
__u32
 
hw_¥og_id
;

1186 
__u32
 
skb_¥og_id
;

1187 
__u8
 
©èch_mode
;

1188 
size_t
 :0;

1190 
	#bpf_xdp_quîy_›ts__œ°_fõld
 
©èch_mode


	)

1192 
LIBBPF_API
 
bpf_xdp_©èch
(
ifödex
, 
¥og_fd
, 
__u32
 
Êags
,

1193 c⁄° 
bpf_xdp_©èch_›ts
 *
›ts
);

1194 
LIBBPF_API
 
bpf_xdp_dëach
(
ifödex
, 
__u32
 
Êags
,

1195 c⁄° 
bpf_xdp_©èch_›ts
 *
›ts
);

1196 
LIBBPF_API
 
bpf_xdp_quîy
(
ifödex
, 
Êags
, 
bpf_xdp_quîy_›ts
 *
›ts
);

1197 
LIBBPF_API
 
bpf_xdp_quîy_id
(
ifödex
, 
Êags
, 
__u32
 *
¥og_id
);

1200 
	ebpf_tc_©èch_poöt
 {

1201 
BPF_TC_INGRESS
 = 1 << 0,

1202 
BPF_TC_EGRESS
 = 1 << 1,

1203 
BPF_TC_CUSTOM
 = 1 << 2,

1206 
	#BPF_TC_PARENT
(
a
, 
b
) \

1207 ((((
a
Ë<< 16Ë& 0xFFFF0000UË| ((
b
Ë& 0x0000FFFFU))

	)

1209 
	ebpf_tc_Êags
 {

1210 
BPF_TC_F_REPLACE
 = 1 << 0,

1213 
	sbpf_tc_hook
 {

1214 
size_t
 
sz
;

1215 
ifödex
;

1216 
bpf_tc_©èch_poöt
 
©èch_poöt
;

1217 
__u32
 
∑ª¡
;

1218 
size_t
 :0;

1220 
	#bpf_tc_hook__œ°_fõld
 
∑ª¡


	)

1222 
	sbpf_tc_›ts
 {

1223 
size_t
 
sz
;

1224 
¥og_fd
;

1225 
__u32
 
Êags
;

1226 
__u32
 
¥og_id
;

1227 
__u32
 
h™dÀ
;

1228 
__u32
 
¥i‹ôy
;

1229 
size_t
 :0;

1231 
	#bpf_tc_›ts__œ°_fõld
 
¥i‹ôy


	)

1233 
LIBBPF_API
 
bpf_tc_hook_¸óã
(
bpf_tc_hook
 *
hook
);

1234 
LIBBPF_API
 
bpf_tc_hook_de°roy
(
bpf_tc_hook
 *
hook
);

1235 
LIBBPF_API
 
bpf_tc_©èch
(c⁄° 
bpf_tc_hook
 *
hook
,

1236 
bpf_tc_›ts
 *
›ts
);

1237 
LIBBPF_API
 
bpf_tc_dëach
(c⁄° 
bpf_tc_hook
 *
hook
,

1238 c⁄° 
bpf_tc_›ts
 *
›ts
);

1239 
LIBBPF_API
 
bpf_tc_quîy
(c⁄° 
bpf_tc_hook
 *
hook
,

1240 
bpf_tc_›ts
 *
›ts
);

1243 
rög_buf„r
;

1245 (*
rög_buf„r_ßm∂e_‚
)(*
	t˘x
, *
	td©a
, 
	tsize_t
 
	tsize
);

1247 
	srög_buf„r_›ts
 {

1248 
size_t
 
sz
;

1251 
	#rög_buf„r_›ts__œ°_fõld
 
sz


	)

1253 
LIBBPF_API
 
rög_buf„r
 *

1254 
rög_buf„r__√w
(
m≠_fd
, 
rög_buf„r_ßm∂e_‚
 
ßm∂e_cb
, *
˘x
,

1255 c⁄° 
rög_buf„r_›ts
 *
›ts
);

1256 
LIBBPF_API
 
rög_buf„r__‰ì
(
rög_buf„r
 *
rb
);

1257 
LIBBPF_API
 
rög_buf„r__add
(
rög_buf„r
 *
rb
, 
m≠_fd
,

1258 
rög_buf„r_ßm∂e_‚
 
ßm∂e_cb
, *
˘x
);

1259 
LIBBPF_API
 
rög_buf„r__pﬁl
(
rög_buf„r
 *
rb
, 
timeout_ms
);

1260 
LIBBPF_API
 
rög_buf„r__c⁄sume
(
rög_buf„r
 *
rb
);

1261 
LIBBPF_API
 
rög_buf„r__ïﬁl_fd
(c⁄° 
rög_buf„r
 *
rb
);

1264 
≥rf_buf„r
;

1266 (*
≥rf_buf„r_ßm∂e_‚
)(*
	t˘x
, 
	t˝u
,

1267 *
	td©a
, 
	t__u32
 
	tsize
);

1268 (*
≥rf_buf„r_lo°_‚
)(*
	t˘x
, 
	t˝u
, 
	t__u64
 
	t˙t
);

1271 
	s≥rf_buf„r_›ts
 {

1273 
size_t
 
sz
;

1276 
≥rf_buf„r_ßm∂e_‚
 
ßm∂e_cb
;

1278 
≥rf_buf„r_lo°_‚
 
lo°_cb
;

1280 *
˘x
;

1284 
	#≥rf_buf„r_›ts__œ°_fõld
 
sz


	)

1298 
LIBBPF_API
 
≥rf_buf„r
 *

1299 
≥rf_buf„r__√w
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

1300 
≥rf_buf„r_ßm∂e_‚
 
ßm∂e_cb
, 
≥rf_buf„r_lo°_‚
 
lo°_cb
, *
˘x
,

1301 c⁄° 
≥rf_buf„r_›ts
 *
›ts
);

1303 
LIBBPF_API
 
≥rf_buf„r
 *

1304 
≥rf_buf„r__√w_v0_6_0
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

1305 
≥rf_buf„r_ßm∂e_‚
 
ßm∂e_cb
, 
≥rf_buf„r_lo°_‚
 
lo°_cb
, *
˘x
,

1306 c⁄° 
≥rf_buf„r_›ts
 *
›ts
);

1308 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "useÇew variant ofÖerf_buffer__new() instead")

1309 
≥rf_buf„r
 *
≥rf_buf„r__√w_dïªˇãd
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

1310 c⁄° 
≥rf_buf„r_›ts
 *
›ts
);

1312 
	#≥rf_buf„r__√w
(...Ë
	`___libbpf_ovîlﬂd
(
___≥rf_buf„r_√w
, 
__VA_ARGS__
)

	)

1313 
	#___≥rf_buf„r_√w6
(
m≠_fd
, 
∑ge_˙t
, 
ßm∂e_cb
, 
lo°_cb
, 
˘x
, 
›ts
) \

1314 
	`≥rf_buf„r__√w
(
m≠_fd
, 
∑ge_˙t
, 
ßm∂e_cb
, 
lo°_cb
, 
˘x
, 
›ts
)

	)

1315 
	#___≥rf_buf„r_√w3
(
m≠_fd
, 
∑ge_˙t
, 
›ts
) \

1316 
	`≥rf_buf„r__√w_dïªˇãd
(
m≠_fd
, 
∑ge_˙t
, 
›ts
)

	)

1318 
	ebpf_≥rf_evít_ªt
 {

1319 
LIBBPF_PERF_EVENT_DONE
 = 0,

1320 
LIBBPF_PERF_EVENT_ERROR
 = -1,

1321 
LIBBPF_PERF_EVENT_CONT
 = -2,

1324 
≥rf_evít_hódî
;

1326 
bpf_≥rf_evít_ªt


1327 (*
	t≥rf_buf„r_evít_‚
)(*
	t˘x
, 
	t˝u
, 
	t≥rf_evít_hódî
 *
	tevít
);

1330 
	s≥rf_buf„r_øw_›ts
 {

1333 
size_t
 
sz
;

1339 
≥rf_evít_©å
 *
©å
;

1341 
≥rf_buf„r_evít_‚
 
evít_cb
;

1343 *
˘x
;

1349 
˝u_˙t
;

1351 *
˝us
;

1353 *
m≠_keys
;

1355 
	#≥rf_buf„r_øw_›ts__œ°_fõld
 
m≠_keys


	)

1357 
LIBBPF_API
 
≥rf_buf„r
 *

1358 
≥rf_buf„r__√w_øw
(
m≠_fd
, 
size_t
 
∑ge_˙t
, 
≥rf_evít_©å
 *
©å
,

1359 
≥rf_buf„r_evít_‚
 
evít_cb
, *
˘x
,

1360 c⁄° 
≥rf_buf„r_øw_›ts
 *
›ts
);

1362 
LIBBPF_API
 
≥rf_buf„r
 *

1363 
≥rf_buf„r__√w_øw_v0_6_0
(
m≠_fd
, 
size_t
 
∑ge_˙t
, 
≥rf_evít_©å
 *
©å
,

1364 
≥rf_buf„r_evít_‚
 
evít_cb
, *
˘x
,

1365 c⁄° 
≥rf_buf„r_øw_›ts
 *
›ts
);

1367 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "useÇew variant ofÖerf_buffer__new_raw() instead")

1368 
≥rf_buf„r
 *
≥rf_buf„r__√w_øw_dïªˇãd
(
m≠_fd
, 
size_t
 
∑ge_˙t
,

1369 c⁄° 
≥rf_buf„r_øw_›ts
 *
›ts
);

1371 
	#≥rf_buf„r__√w_øw
(...Ë
	`___libbpf_ovîlﬂd
(
___≥rf_buf„r_√w_øw
, 
__VA_ARGS__
)

	)

1372 
	#___≥rf_buf„r_√w_øw6
(
m≠_fd
, 
∑ge_˙t
, 
©å
, 
evít_cb
, 
˘x
, 
›ts
) \

1373 
	`≥rf_buf„r__√w_øw
(
m≠_fd
, 
∑ge_˙t
, 
©å
, 
evít_cb
, 
˘x
, 
›ts
)

	)

1374 
	#___≥rf_buf„r_√w_øw3
(
m≠_fd
, 
∑ge_˙t
, 
›ts
) \

1375 
	`≥rf_buf„r__√w_øw_dïªˇãd
(
m≠_fd
, 
∑ge_˙t
, 
›ts
)

	)

1377 
LIBBPF_API
 
≥rf_buf„r__‰ì
(
≥rf_buf„r
 *
pb
);

1378 
LIBBPF_API
 
≥rf_buf„r__ïﬁl_fd
(c⁄° 
≥rf_buf„r
 *
pb
);

1379 
LIBBPF_API
 
≥rf_buf„r__pﬁl
(
≥rf_buf„r
 *
pb
, 
timeout_ms
);

1380 
LIBBPF_API
 
≥rf_buf„r__c⁄sume
(
≥rf_buf„r
 *
pb
);

1381 
LIBBPF_API
 
≥rf_buf„r__c⁄sume_buf„r
(
≥rf_buf„r
 *
pb
, 
size_t
 
buf_idx
);

1382 
LIBBPF_API
 
size_t
 
≥rf_buf„r__buf„r_˙t
(c⁄° 
≥rf_buf„r
 *
pb
);

1383 
LIBBPF_API
 
≥rf_buf„r__buf„r_fd
(c⁄° 
≥rf_buf„r
 *
pb
, 
size_t
 
buf_idx
);

1385 
bpf_≥rf_evít_ªt


1386 (*
	tbpf_≥rf_evít_¥öt_t
)(
	t≥rf_evít_hódî
 *
	thdr
,

1387 *
	t¥iv©e_d©a
);

1388 
LIBBPF_DEPRECATED_SINCE
(0, 8, "useÖerf_buffer__poll() orÖerf_buffer__consume() instead")

1389 
LIBBPF_API
 
bpf_≥rf_evít_ªt


1390 
bpf_≥rf_evít_ªad_sim∂e
(*
mm≠_mem
, 
size_t
 
mm≠_size
, size_à
∑ge_size
,

1391 **
c›y_mem
, 
size_t
 *
c›y_size
,

1392 
bpf_≥rf_evít_¥öt_t
 
‚
, *
¥iv©e_d©a
);

1394 
bpf_¥og_löfo
;

1395 
bpf_¥og_öfo
;

1397 
LIBBPF_API
 
bpf_¥og_löfo__‰ì
(
bpf_¥og_löfo
 *
¥og_löfo
);

1398 
LIBBPF_API
 
bpf_¥og_löfo
 *

1399 
bpf_¥og_löfo__√w
(c⁄° 
bpf_¥og_öfo
 *
öfo
);

1400 
LIBBPF_API
 c⁄° 
bpf_löe_öfo
 *

1401 
bpf_¥og_löfo__lföd_addr_func
(c⁄° 
bpf_¥og_löfo
 *
¥og_löfo
,

1402 
__u64
 
addr
, 
__u32
 
func_idx
, __u32 
ƒ_skù
);

1403 
LIBBPF_API
 c⁄° 
bpf_löe_öfo
 *

1404 
bpf_¥og_löfo__lföd
(c⁄° 
bpf_¥og_löfo
 *
¥og_löfo
,

1405 
__u32
 
ö¢_off
, __u32 
ƒ_skù
);

1415 
LIBBPF_DEPRECATED_SINCE
(0, 8, "useÜibbpf_probe_bpf_prog_type() instead")

1416 
LIBBPF_API
 
boﬁ
 
bpf_¥obe_¥og_ty≥
(
bpf_¥og_ty≥
 
¥og_ty≥
, 
__u32
 
ifödex
);

1417 
LIBBPF_DEPRECATED_SINCE
(0, 8, "useÜibbpf_probe_bpf_map_type() instead")

1418 
LIBBPF_API
 
boﬁ
 
bpf_¥obe_m≠_ty≥
(
bpf_m≠_ty≥
 
m≠_ty≥
, 
__u32
 
ifödex
);

1419 
LIBBPF_DEPRECATED_SINCE
(0, 8, "useÜibbpf_probe_bpf_helper() instead")

1420 
LIBBPF_API
 
boﬁ
 
bpf_¥obe_hñ≥r
(
bpf_func_id
 
id
, 
bpf_¥og_ty≥
 
¥og_ty≥
, 
__u32
 
ifödex
);

1421 
LIBBPF_DEPRECATED_SINCE
(0, 8, "implement your own or use bpftool for feature detection")

1422 
LIBBPF_API
 
boﬁ
 
bpf_¥obe_œrge_ö¢_limô
(
__u32
 
ifödex
);

1436 
LIBBPF_API
 
libbpf_¥obe_bpf_¥og_ty≥
(
bpf_¥og_ty≥
 
¥og_ty≥
, c⁄° *
›ts
);

1449 
LIBBPF_API
 
libbpf_¥obe_bpf_m≠_ty≥
(
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
›ts
);

1463 
LIBBPF_API
 
libbpf_¥obe_bpf_hñ≥r
(
bpf_¥og_ty≥
 
¥og_ty≥
,

1464 
bpf_func_id
 
hñ≥r_id
, c⁄° *
›ts
);

1495 
	ebpf_¥og_öfo_¨øy
 {

1496 
BPF_PROG_INFO_FIRST_ARRAY
 = 0,

1497 
BPF_PROG_INFO_JITED_INSNS
 = 0,

1498 
BPF_PROG_INFO_XLATED_INSNS
,

1499 
BPF_PROG_INFO_MAP_IDS
,

1500 
BPF_PROG_INFO_JITED_KSYMS
,

1501 
BPF_PROG_INFO_JITED_FUNC_LENS
,

1502 
BPF_PROG_INFO_FUNC_INFO
,

1503 
BPF_PROG_INFO_LINE_INFO
,

1504 
BPF_PROG_INFO_JITED_LINE_INFO
,

1505 
BPF_PROG_INFO_PROG_TAGS
,

1506 
BPF_PROG_INFO_LAST_ARRAY
,

1509 
	sbpf_¥og_öfo_löór
 {

1511 
__u32
 
öfo_Àn
;

1513 
__u32
 
d©a_Àn
;

1515 
__u64
 
¨øys
;

1516 
bpf_¥og_öfo
 
öfo
;

1517 
__u8
 
d©a
[];

1520 
LIBBPF_DEPRECATED_SINCE
(0, 6, "useá customÜinearÖrog_info wrapper")

1521 
LIBBPF_API
 
bpf_¥og_öfo_löór
 *

1522 
bpf_¥ogøm__gë_¥og_öfo_löór
(
fd
, 
__u64
 
¨øys
);

1524 
LIBBPF_DEPRECATED_SINCE
(0, 6, "useá customÜinearÖrog_info wrapper")

1525 
LIBBPF_API
 

1526 
bpf_¥ogøm__bpû_addr_to_offs
(
bpf_¥og_öfo_löór
 *
öfo_löór
);

1528 
LIBBPF_DEPRECATED_SINCE
(0, 6, "useá customÜinearÖrog_info wrapper")

1529 
LIBBPF_API
 

1530 
bpf_¥ogøm__bpû_offs_to_addr
(
bpf_¥og_öfo_löór
 *
öfo_löór
);

1546 
LIBBPF_API
 
libbpf_num_possibÀ_˝us
();

1548 
	sbpf_m≠_skñë⁄
 {

1549 c⁄° *
«me
;

1550 
bpf_m≠
 **
m≠
;

1551 **
mm≠ed
;

1554 
	sbpf_¥og_skñë⁄
 {

1555 c⁄° *
«me
;

1556 
bpf_¥ogøm
 **
¥og
;

1557 
bpf_lök
 **
lök
;

1560 
	sbpf_obje˘_skñë⁄
 {

1561 
size_t
 
sz
;

1563 c⁄° *
«me
;

1564 c⁄° *
d©a
;

1565 
size_t
 
d©a_sz
;

1567 
bpf_obje˘
 **
obj
;

1569 
m≠_˙t
;

1570 
m≠_skñ_sz
;

1571 
bpf_m≠_skñë⁄
 *
m≠s
;

1573 
¥og_˙t
;

1574 
¥og_skñ_sz
;

1575 
bpf_¥og_skñë⁄
 *
¥ogs
;

1578 
LIBBPF_API
 

1579 
bpf_obje˘__›í_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
,

1580 c⁄° 
bpf_obje˘_›í_›ts
 *
›ts
);

1581 
LIBBPF_API
 
bpf_obje˘__lﬂd_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
);

1582 
LIBBPF_API
 
bpf_obje˘__©èch_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
);

1583 
LIBBPF_API
 
bpf_obje˘__dëach_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
);

1584 
LIBBPF_API
 
bpf_obje˘__de°roy_skñë⁄
(
bpf_obje˘_skñë⁄
 *
s
);

1586 
	sbpf_v¨_skñë⁄
 {

1587 c⁄° *
«me
;

1588 
bpf_m≠
 **
m≠
;

1589 **
addr
;

1592 
	sbpf_obje˘_subskñë⁄
 {

1593 
size_t
 
sz
;

1595 c⁄° 
bpf_obje˘
 *
obj
;

1597 
m≠_˙t
;

1598 
m≠_skñ_sz
;

1599 
bpf_m≠_skñë⁄
 *
m≠s
;

1601 
¥og_˙t
;

1602 
¥og_skñ_sz
;

1603 
bpf_¥og_skñë⁄
 *
¥ogs
;

1605 
v¨_˙t
;

1606 
v¨_skñ_sz
;

1607 
bpf_v¨_skñë⁄
 *
v¨s
;

1610 
LIBBPF_API
 

1611 
bpf_obje˘__›í_subskñë⁄
(
bpf_obje˘_subskñë⁄
 *
s
);

1612 
LIBBPF_API
 

1613 
bpf_obje˘__de°roy_subskñë⁄
(
bpf_obje˘_subskñë⁄
 *
s
);

1615 
	sgí_lﬂdî_›ts
 {

1616 
size_t
 
sz
;

1617 c⁄° *
d©a
;

1618 c⁄° *
ö¢s
;

1619 
__u32
 
d©a_sz
;

1620 
__u32
 
ö¢s_sz
;

1623 
	#gí_lﬂdî_›ts__œ°_fõld
 
ö¢s_sz


	)

1624 
LIBBPF_API
 
bpf_obje˘__gí_lﬂdî
(
bpf_obje˘
 *
obj
,

1625 
gí_lﬂdî_›ts
 *
›ts
);

1627 
	elibbpf_åi°©e
 {

1628 
TRI_NO
 = 0,

1629 
TRI_YES
 = 1,

1630 
TRI_MODULE
 = 2,

1633 
	sbpf_lökî_›ts
 {

1635 
size_t
 
sz
;

1637 
	#bpf_lökî_›ts__œ°_fõld
 
sz


	)

1639 
	sbpf_lökî_fûe_›ts
 {

1641 
size_t
 
sz
;

1643 
	#bpf_lökî_fûe_›ts__œ°_fõld
 
sz


	)

1645 
bpf_lökî
;

1647 
LIBBPF_API
 
bpf_lökî
 *
bpf_lökî__√w
(c⁄° *
fûíame
, 
bpf_lökî_›ts
 *
›ts
);

1648 
LIBBPF_API
 
bpf_lökî__add_fûe
(
bpf_lökî
 *
lökî
,

1649 c⁄° *
fûíame
,

1650 c⁄° 
bpf_lökî_fûe_›ts
 *
›ts
);

1651 
LIBBPF_API
 
bpf_lökî__föÆize
(
bpf_lökî
 *
lökî
);

1652 
LIBBPF_API
 
bpf_lökî__‰ì
(
bpf_lökî
 *
lökî
);

1658 
bpf_¥og_lﬂd_›ts
;

1664 (*
libbpf_¥og_£tup_‚_t
)(
	tbpf_¥ogøm
 *
	t¥og
, 
	tcookõ
);

1669 (*
libbpf_¥og_¥ï¨e_lﬂd_‚_t
)(
	tbpf_¥ogøm
 *
	t¥og
,

1670 
	tbpf_¥og_lﬂd_›ts
 *
	t›ts
, 
	tcookõ
);

1679 (*
libbpf_¥og_©èch_‚_t
)(c⁄° 
	tbpf_¥ogøm
 *
	t¥og
, 
	tcookõ
,

1680 
	tbpf_lök
 **
	tlök
);

1682 
	slibbpf_¥og_h™dÀr_›ts
 {

1684 
size_t
 
sz
;

1692 
cookõ
;

1696 
libbpf_¥og_£tup_‚_t
 
¥og_£tup_‚
;

1700 
libbpf_¥og_¥ï¨e_lﬂd_‚_t
 
¥og_¥ï¨e_lﬂd_‚
;

1704 
libbpf_¥og_©èch_‚_t
 
¥og_©èch_‚
;

1706 
	#libbpf_¥og_h™dÀr_›ts__œ°_fõld
 
¥og_©èch_‚


	)

1745 
LIBBPF_API
 
libbpf_ªgi°î_¥og_h™dÀr
(c⁄° *
£c
,

1746 
bpf_¥og_ty≥
 
¥og_ty≥
,

1747 
bpf_©èch_ty≥
 
exp_©èch_ty≥
,

1748 c⁄° 
libbpf_¥og_h™dÀr_›ts
 *
›ts
);

1761 
LIBBPF_API
 
libbpf_uƒegi°î_¥og_h™dÀr
(
h™dÀr_id
);

1777 
LIBBPF_API
 
libbpf_num_⁄löe_˝us
();

1779 #ifde‡
__˝lu•lus


	@libbpf_common.h

9 #i‚de‡
__LIBBPF_LIBBPF_COMMON_H


10 
	#__LIBBPF_LIBBPF_COMMON_H


	)

12 
	~<°rög.h
>

13 
	~"libbpf_vîsi⁄.h
"

15 #i‚de‡
LIBBPF_API


16 
	#LIBBPF_API
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

19 
	#LIBBPF_DEPRECATED
(
msg
Ë
	`__©åibuã__
((
	`dïªˇãd
(msg)))

	)

22 
	#LIBBPF_DEPRECATED_SINCE
(
maj‹
, 
mö‹
, 
msg
) \

23 
__LIBBPF_MARK_DEPRECATED_
 ## 
maj‹
 ## 
_
 ## 
mö‹
 \

24 (
	`LIBBPF_DEPRECATED
("libbp‡v" #maj‹ "." #mö‹ "+: " 
msg
))

	)

26 
	#__LIBBPF_CURRENT_VERSION_GEQ
(
maj‹
, 
mö‹
) \

27 (
LIBBPF_MAJOR_VERSION
 > (
maj‹
) || \

28 (
LIBBPF_MAJOR_VERSION
 =(
maj‹
Ë&& 
LIBBPF_MINOR_VERSION
 >(
mö‹
)))

	)

33 #i‡
__LIBBPF_CURRENT_VERSION_GEQ
(0, 6)

34 
	#__LIBBPF_MARK_DEPRECATED_0_6
(
X
Ë
	)
X

36 
	#__LIBBPF_MARK_DEPRECATED_0_6
(
X
)

	)

38 #i‡
__LIBBPF_CURRENT_VERSION_GEQ
(0, 7)

39 
	#__LIBBPF_MARK_DEPRECATED_0_7
(
X
Ë
	)
X

41 
	#__LIBBPF_MARK_DEPRECATED_0_7
(
X
)

	)

43 #i‡
__LIBBPF_CURRENT_VERSION_GEQ
(0, 8)

44 
	#__LIBBPF_MARK_DEPRECATED_0_8
(
X
Ë
	)
X

46 
	#__LIBBPF_MARK_DEPRECATED_0_8
(
X
)

	)

55 
	#___libbpf_ˇt
(
A
, 
B
ËA ## 
	)
B

56 
	#___libbpf_£À˘
(
NAME
, 
NUM
Ë
	`___libbpf_ˇt
(NAME, NUM)

	)

57 
	#___libbpf_¡h
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
N
, ...Ë
	)
N

58 
	#___libbpf_˙t
(...Ë
	`___libbpf_¡h
(
__VA_ARGS__
, 6, 5, 4, 3, 2, 1)

	)

59 
	#___libbpf_ovîlﬂd
(
NAME
, ...Ë
	`___libbpf_£À˘
(NAME, 
	`___libbpf_˙t
(
__VA_ARGS__
))(__VA_ARGS__)

	)

74 
	#LIBBPF_OPTS
(
TYPE
, 
NAME
, ...) \

75 
TYPE
 
NAME
 = ({ \

76 
	`mem£t
(&
NAME
, 0, (
TYPE
)); \

77 (
TYPE
) { \

78 .
sz
 = (
TYPE
), \

79 
__VA_ARGS__
 \

81 })

	)

	@libbpf_errno.c

10 #unde‡
_GNU_SOURCE


11 
	~<°dio.h
>

12 
	~<°rög.h
>

14 
	~"libbpf.h
"

15 
	~"libbpf_öã∫Æ.h
"

18 #¥agm®
GCC
 
pois⁄
 
u8
 
u16
 
u32
 
u64
 
s8
 
s16
 
s32
 
s64


20 
	#ERRNO_OFFSET
(
e
Ë(”Ë- 
__LIBBPF_ERRNO__START
)

	)

21 
	#ERRCODE_OFFSET
(
c
Ë
	`ERRNO_OFFSET
(
LIBBPF_ERRNO__
##c)

	)

22 
	#NR_ERRNO
 (
__LIBBPF_ERRNO__END
 - 
__LIBBPF_ERRNO__START
)

	)

24 c⁄° *
	glibbpf_°ªº‹_èbÀ
[
NR_ERRNO
] = {

25 [
ERRCODE_OFFSET
(
LIBELF
)] = "Something wrong inÜibelf",

26 [
ERRCODE_OFFSET
(
FORMAT
)] = "BPF object format invalid",

27 [
ERRCODE_OFFSET
(
KVERSION
)] = "'version' section incorrect orÜost",

28 [
ERRCODE_OFFSET
(
ENDIAN
)] = "Endian mismatch",

29 [
ERRCODE_OFFSET
(
INTERNAL
)] = "InternalÉrror inÜibbpf",

30 [
ERRCODE_OFFSET
(
RELOC
)] = "Relocation failed",

31 [
ERRCODE_OFFSET
(
VERIFY
)] = "Kernel verifier blocksÖrogramÜoading",

32 [
ERRCODE_OFFSET
(
PROG2BIG
)] = "ProgramÅoo big",

33 [
ERRCODE_OFFSET
(
KVER
)] = "Incorrect kernel version",

34 [
ERRCODE_OFFSET
(
PROGTYPE
)] = "Kernel doesn't supportÅhisÖrogramÅype",

35 [
ERRCODE_OFFSET
(
WRNGPID
)] = "WrongÖid inÇetlink message",

36 [
ERRCODE_OFFSET
(
INVSEQ
)] = "InvalidÇetlink sequence",

37 [
ERRCODE_OFFSET
(
NLPARSE
)] = "IncorrectÇetlink messageÖarsing",

40 
	$libbpf_°ªº‹
(
îr
, *
buf
, 
size_t
 
size
)

42 i‡(!
buf
 || !
size
)

43  
	`libbpf_îr
(-
EINVAL
);

45 
îr
 =Érr > 0 ?Érr : -err;

47 i‡(
îr
 < 
__LIBBPF_ERRNO__START
) {

48 
ªt
;

50 
ªt
 = 
	`°ªº‹_r
(
îr
, 
buf
, 
size
);

51 
buf
[
size
 - 1] = '\0';

52  
	`libbpf_îr_î∫o
(
ªt
);

55 i‡(
îr
 < 
__LIBBPF_ERRNO__END
) {

56 c⁄° *
msg
;

58 
msg
 = 
libbpf_°ªº‹_èbÀ
[
	`ERRNO_OFFSET
(
îr
)];

59 
	`¢¥ötf
(
buf
, 
size
, "%s", 
msg
);

60 
buf
[
size
 - 1] = '\0';

64 
	`¢¥ötf
(
buf
, 
size
, "Unknow¿libbp‡îr‹ %d", 
îr
);

65 
buf
[
size
 - 1] = '\0';

66  
	`libbpf_îr
(-
ENOENT
);

67 
	}
}

	@libbpf_internal.h

9 #i‚de‡
__LIBBPF_LIBBPF_INTERNAL_H


10 
	#__LIBBPF_LIBBPF_INTERNAL_H


	)

12 
	~<°dlib.h
>

13 
	~<limôs.h
>

14 
	~<î∫o.h
>

15 
	~<löux/îr.h
>

16 
	~<f˙é.h
>

17 
	~<uni°d.h
>

18 
	~"libbpf_Àgacy.h
"

19 
	~"ªlo_c‹e.h
"

22 #¥agm®
GCC
 
pois⁄
 
u8
 
u16
 
u32
 
u64
 
s8
 
s16
 
s32
 
s64


25 #¥agm®
GCC
 
pois⁄
 
ªÆloˇºay


27 
	~"libbpf.h
"

28 
	~"btf.h
"

30 #i‚de‡
EM_BPF


31 
	#EM_BPF
 247

	)

34 #i‚de‡
R_BPF_64_64


35 
	#R_BPF_64_64
 1

	)

37 #i‚de‡
R_BPF_64_ABS64


38 
	#R_BPF_64_ABS64
 2

	)

40 #i‚de‡
R_BPF_64_ABS32


41 
	#R_BPF_64_ABS32
 3

	)

43 #i‚de‡
R_BPF_64_32


44 
	#R_BPF_64_32
 10

	)

47 #i‚de‡
SHT_LLVM_ADDRSIG


48 
	#SHT_LLVM_ADDRSIG
 0x6FFF4C03

	)

52 #i‚de‡
ELF_C_READ_MMAP


53 
	#ELF_C_READ_MMAP
 
ELF_C_READ


	)

57 #i‚de‡
ELF64_ST_VISIBILITY


58 
	#ELF64_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

61 
	#BTF_INFO_ENC
(
köd
, 
köd_Êag
, 
vÀn
) \

62 ((!!(
köd_Êag
Ë<< 31Ë| ((
köd
Ë<< 24Ë| ((
vÀn
Ë& 
BTF_MAX_VLEN
))

	)

63 
	#BTF_TYPE_ENC
(
«me
, 
öfo
, 
size_‹_ty≥
Ë“ame), (öfo), (size_‹_ty≥)

	)

64 
	#BTF_INT_ENC
(
ícodög
, 
bôs_off£t
, 
ƒ_bôs
) \

65 ((
ícodög
Ë<< 24 | (
bôs_off£t
Ë<< 16 | (
ƒ_bôs
))

	)

66 
	#BTF_TYPE_INT_ENC
(
«me
, 
ícodög
, 
bôs_off£t
, 
bôs
, 
sz
) \

67 
	`BTF_TYPE_ENC
(
«me
, 
	`BTF_INFO_ENC
(
BTF_KIND_INT
, 0, 0), 
sz
), \

68 
	`BTF_INT_ENC
(
ícodög
, 
bôs_off£t
, 
bôs
)

	)

69 
	#BTF_MEMBER_ENC
(
«me
, 
ty≥
, 
bôs_off£t
Ë“ame), (ty≥), (bôs_off£t)

	)

70 
	#BTF_PARAM_ENC
(
«me
, 
ty≥
Ë“ame), (ty≥)

	)

71 
	#BTF_VAR_SECINFO_ENC
(
ty≥
, 
off£t
, 
size
Ë—y≥), (off£t), (size)

	)

72 
	#BTF_TYPE_FLOAT_ENC
(
«me
, 
sz
) \

73 
	`BTF_TYPE_ENC
(
«me
, 
	`BTF_INFO_ENC
(
BTF_KIND_FLOAT
, 0, 0), 
sz
)

	)

74 
	#BTF_TYPE_DECL_TAG_ENC
(
vÆue
, 
ty≥
, 
comp⁄ít_idx
) \

75 
	`BTF_TYPE_ENC
(
vÆue
, 
	`BTF_INFO_ENC
(
BTF_KIND_DECL_TAG
, 0, 0), 
ty≥
), (
comp⁄ít_idx
)

	)

76 
	#BTF_TYPE_TYPE_TAG_ENC
(
vÆue
, 
ty≥
) \

77 
	`BTF_TYPE_ENC
(
vÆue
, 
	`BTF_INFO_ENC
(
BTF_KIND_TYPE_TAG
, 0, 0), 
ty≥
)

	)

79 #i‚de‡
likñy


80 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

82 #i‚de‡
u∆ikñy


83 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

85 #i‚de‡
mö


86 
	#mö
(
x
, 
y
Ë((xË< (yË? (xË: (y))

	)

88 #i‚de‡
max


89 
	#max
(
x
, 
y
Ë((xË< (yË? (yË: (x))

	)

91 #i‚de‡
off£to„nd


92 
	#off£to„nd
(
TYPE
, 
FIELD
) \

93 (
	`off£tof
(
TYPE
, 
FIELD
Ë+ (((TYPE *)0)->FIELD))

	)

95 #i‚de‡
__Æüs


96 
	#__Æüs
(
symbﬁ
Ë
	`__©åibuã__
((
	`Æüs
(#symbﬁ)))

	)

103 
	#°r_has_pfx
(
°r
, 
pfx
) \

104 (
	`°∫cmp
(
°r
, 
pfx
, 
	`__buûtö_c⁄°™t_p
’fxË? ’fxË- 1 : 
	`°æí
’fx)Ë=0)

	)

107 
ölöe
 
boﬁ
 
	$°r_has_sfx
(c⁄° *
°r
, c⁄° *
sfx
)

109 
size_t
 
°r_Àn
 = 
	`°æí
(
°r
);

110 
size_t
 
sfx_Àn
 = 
	`°æí
(
sfx
);

112 i‡(
sfx_Àn
 <
°r_Àn
)

113  
	`°rcmp
(
°r
 + 
°r_Àn
 - 
sfx_Àn
, 
sfx
);

114  
Ál£
;

115 
	}
}

123 #i‡
deföed
(
SHARED
Ë&& deföed(
__GNUC__
) && __GNUC__ >= 10

125 
	#DEFAULT_VERSION
(
öã∫Æ_«me
, 
≠i_«me
, 
vîsi⁄
) \

126 
	`__©åibuã__
((
	`symvî
(#≠i_«mê"@@" #vîsi⁄)))

	)

127 
	#COMPAT_VERSION
(
öã∫Æ_«me
, 
≠i_«me
, 
vîsi⁄
) \

128 
	`__©åibuã__
((
	`symvî
(#≠i_«mê"@" #vîsi⁄)))

	)

130 #ñi‡
deföed
(
SHARED
)

132 
	#COMPAT_VERSION
(
öã∫Æ_«me
, 
≠i_«me
, 
vîsi⁄
) \

133 
	`asm
(".symvî " #öã∫Æ_«mê"," #≠i_«mê"@" #vîsi⁄);

	)

134 
	#DEFAULT_VERSION
(
öã∫Æ_«me
, 
≠i_«me
, 
vîsi⁄
) \

135 
	`asm
(".symvî " #öã∫Æ_«mê"," #≠i_«mê"@@" #vîsi⁄);

	)

139 
	#COMPAT_VERSION
(
öã∫Æ_«me
, 
≠i_«me
, 
vîsi⁄
)

	)

140 
	#DEFAULT_VERSION
(
öã∫Æ_«me
, 
≠i_«me
, 
vîsi⁄
) \

141 
	`ty≥of
(
öã∫Æ_«me
Ë
≠i_«me
 \

142 
	`__©åibuã__
((
	`Æüs
(#öã∫Æ_«me)));

	)

146 
	$libbpf_¥öt
(
libbpf_¥öt_Àvñ
 
Àvñ
,

147 c⁄° *
f‹m©
, ...)

148 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

150 
	#__¥
(
Àvñ
, 
fmt
, ...) \

152 
	`libbpf_¥öt
(
Àvñ
, "libbpf: " 
fmt
, ##
__VA_ARGS__
); \

153 
	}
} 0)

	)

155 
	#¥_w¨n
(
fmt
, ...Ë
	`__¥
(
LIBBPF_WARN
, fmt, ##
__VA_ARGS__
)

	)

156 
	#¥_öfo
(
fmt
, ...Ë
	`__¥
(
LIBBPF_WARN
, fmt, ##
__VA_ARGS__
)

	)

157 
	#¥_debug
(
fmt
, ...Ë
	`__¥
(
LIBBPF_WARN
, fmt, ##
__VA_ARGS__
)

	)

159 #i‚de‡
__has_buûtö


160 
	#__has_buûtö
(
x
Ë0

	)

163 
	sbpf_lök
 {

164 (*
	mdëach
)(
bpf_lök
 *
	mlök
);

165 (*
	mdóŒoc
)(
bpf_lök
 *
	mlök
);

166 *
	mpö_∑th
;

167 
	mfd
;

168 
boﬁ
 
	mdisc⁄√˘ed
;

180 
ölöe
 *
	$libbpf_ªÆloˇºay
(*
±r
, 
size_t
 
nmemb
, size_à
size
)

182 
size_t
 
tŸÆ
;

184 #i‡
	`__has_buûtö
(
__buûtö_mul_ovîÊow
)

185 i‡(
	`u∆ikñy
(
	`__buûtö_mul_ovîÊow
(
nmemb
, 
size
, &
tŸÆ
)))

186  
NULL
;

188 i‡(
size
 =0 || 
nmemb
 > 
ULONG_MAX
 / size)

189  
NULL
;

190 
tŸÆ
 = 
nmemb
 * 
size
;

192  
	`ªÆloc
(
±r
, 
tŸÆ
);

193 
	}
}

201 
ölöe
 
	$libbpf_°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
sz
)

203 
size_t
 
i
;

205 i‡(
sz
 == 0)

208 
sz
--;

209 
i
 = 0; i < 
sz
 && 
§c
[i]; i++)

210 
d°
[
i
] = 
§c
[i];

211 
d°
[
i
] = '\0';

212 
	}
}

214 
__u32
 
gë_kî√l_vîsi⁄
();

216 
	gbtf
;

217 
	gbtf_ty≥
;

219 
btf_ty≥
 *
btf_ty≥_by_id
(c⁄° 
btf
 *btf, 
__u32
 
ty≥_id
);

220 c⁄° *
btf_köd_°r
(c⁄° 
btf_ty≥
 *
t
);

221 c⁄° 
btf_ty≥
 *
skù_mods_™d_ty≥defs
(c⁄° 
btf
 *btf, 
__u32
 
id
, __u32 *
ªs_id
);

223 
ölöe
 
btf_func_lökage
 
	$btf_func_lökage
(c⁄° 
btf_ty≥
 *
t
)

225  (
btf_func_lökage
)()
	`btf_vÀn
(
t
);

226 
	}
}

228 
ölöe
 
__u32
 
	$btf_ty≥_öfo
(
köd
, 
vÀn
, 
kÊag
)

230  (
kÊag
 << 31Ë| (
köd
 << 24Ë| 
vÀn
;

231 
	}
}

233 
	em≠_def_∑πs
 {

234 
	mMAP_DEF_MAP_TYPE
 = 0x001,

235 
	mMAP_DEF_KEY_TYPE
 = 0x002,

236 
	mMAP_DEF_KEY_SIZE
 = 0x004,

237 
	mMAP_DEF_VALUE_TYPE
 = 0x008,

238 
	mMAP_DEF_VALUE_SIZE
 = 0x010,

239 
	mMAP_DEF_MAX_ENTRIES
 = 0x020,

240 
	mMAP_DEF_MAP_FLAGS
 = 0x040,

241 
	mMAP_DEF_NUMA_NODE
 = 0x080,

242 
	mMAP_DEF_PINNING
 = 0x100,

243 
	mMAP_DEF_INNER_MAP
 = 0x200,

244 
	mMAP_DEF_MAP_EXTRA
 = 0x400,

246 
	mMAP_DEF_ALL
 = 0x7ff,

249 
	sbtf_m≠_def
 {

250 
m≠_def_∑πs
 
	m∑πs
;

251 
__u32
 
	mm≠_ty≥
;

252 
__u32
 
	mkey_ty≥_id
;

253 
__u32
 
	mkey_size
;

254 
__u32
 
	mvÆue_ty≥_id
;

255 
__u32
 
	mvÆue_size
;

256 
__u32
 
	mmax_íåõs
;

257 
__u32
 
	mm≠_Êags
;

258 
__u32
 
	mnuma_node
;

259 
__u32
 
	mpönög
;

260 
__u64
 
	mm≠_exåa
;

263 
∑r£_btf_m≠_def
(c⁄° *
m≠_«me
, 
btf
 *btf,

264 c⁄° 
btf_ty≥
 *
def_t
, 
boﬁ
 
°ri˘
,

265 
btf_m≠_def
 *
m≠_def
, btf_m≠_de‡*
ö√r_def
);

267 *
libbpf_add_mem
(**
d©a
, 
size_t
 *
ˇp_˙t
, size_à
ñem_sz
,

268 
size_t
 
cur_˙t
, size_à
max_˙t
, size_à
add_˙t
);

269 
libbpf_ísuª_mem
(**
d©a
, 
size_t
 *
ˇp_˙t
, size_à
ñem_sz
, size_à
√ed_˙t
);

271 
ölöe
 
boﬁ
 
	$libbpf_is_mem_zî€d
(c⁄° *
p
, 
ssize_t
 
Àn
)

273 
Àn
 > 0) {

274 i‡(*
p
)

275  
Ál£
;

276 
p
++;

277 
Àn
--;

279  
åue
;

280 
	}
}

282 
ölöe
 
boﬁ
 
	$libbpf_vÆid©e_›ts
(c⁄° *
›ts
,

283 
size_t
 
›ts_sz
, size_à
u£r_sz
,

284 c⁄° *
ty≥_«me
)

286 i‡(
u£r_sz
 < (
size_t
)) {

287 
	`¥_w¨n
("%†sizê(%zuËi†toÿsmÆl\n", 
ty≥_«me
, 
u£r_sz
);

288  
Ál£
;

290 i‡(!
	`libbpf_is_mem_zî€d
(
›ts
 + 
›ts_sz
, (
ssize_t
)
u£r_sz
 - opts_sz)) {

291 
	`¥_w¨n
("%†ha†n⁄-zîÿexå®byãs\n", 
ty≥_«me
);

292  
Ál£
;

294  
åue
;

295 
	}
}

297 
	#OPTS_VALID
(
›ts
, 
ty≥
) \

298 (!(
›ts
Ë|| 
	`libbpf_vÆid©e_›ts
((const *)opts, \

299 
	`off£to„nd
(
ty≥
, \

300 
ty≥
##
__œ°_fõld
), \

301 (
›ts
)->
sz
, #ty≥))

	)

302 
	#OPTS_HAS
(
›ts
, 
fõld
) \

303 ((
›ts
Ë&& o±s->
sz
 >
	`off£to„nd
(
	`ty≥of
(*(›ts)), 
fõld
))

	)

304 
	#OPTS_GET
(
›ts
, 
fõld
, 
ÁŒback_vÆue
) \

305 (
	`OPTS_HAS
(
›ts
, 
fõld
Ë? (›ts)->fõld : 
ÁŒback_vÆue
)

	)

306 
	#OPTS_SET
(
›ts
, 
fõld
, 
vÆue
) \

308 i‡(
	`OPTS_HAS
(
›ts
, 
fõld
)) \

309 (
›ts
)->
fõld
 = 
vÆue
; \

310 } 0)

	)

312 
	#OPTS_ZEROED
(
›ts
, 
œ°_n⁄zîo_fõld
) \

314 
ssize_t
 
__off
 = 
	`off£to„nd
(
	`ty≥of
(*(
›ts
)), 
œ°_n⁄zîo_fõld
); \

315 !(
›ts
Ë|| 
	`libbpf_is_mem_zî€d
((c⁄° *)›t†+ 
__off
, \

316 (
›ts
)->
sz
 - 
__off
); \

317 })

	)

319 
	ekîn_„©uª_id
 {

321 
	mFEAT_PROG_NAME
,

323 
	mFEAT_GLOBAL_DATA
,

325 
	mFEAT_BTF
,

327 
	mFEAT_BTF_FUNC
,

329 
	mFEAT_BTF_DATASEC
,

331 
	mFEAT_BTF_GLOBAL_FUNC
,

333 
	mFEAT_ARRAY_MMAP
,

335 
	mFEAT_EXP_ATTACH_TYPE
,

337 
	mFEAT_PROBE_READ_KERN
,

339 
	mFEAT_PROG_BIND_MAP
,

341 
	mFEAT_MODULE_BTF
,

343 
	mFEAT_BTF_FLOAT
,

345 
	mFEAT_PERF_LINK
,

347 
	mFEAT_BTF_DECL_TAG
,

349 
	mFEAT_BTF_TYPE_TAG
,

351 
	mFEAT_MEMCG_ACCOUNT
,

353 
	mFEAT_BPF_COOKIE
,

355 
	mFEAT_BTF_ENUM64
,

356 
	m__FEAT_CNT
,

359 
¥obe_memcg_accou¡
();

360 
boﬁ
 
kî√l_suµ‹ts
(c⁄° 
bpf_obje˘
 *
obj
, 
kîn_„©uª_id
 
„©_id
);

361 
bump_æimô_memlock
();

363 
∑r£_˝u_mask_°r
(c⁄° *
s
, 
boﬁ
 **
mask
, *
mask_sz
);

364 
∑r£_˝u_mask_fûe
(c⁄° *
f˝u
, 
boﬁ
 **
mask
, *
mask_sz
);

365 
libbpf__lﬂd_øw_btf
(c⁄° *
øw_ty≥s
, 
size_t
 
ty≥s_Àn
,

366 c⁄° *
°r_£c
, 
size_t
 
°r_Àn
);

367 
btf_lﬂd_öto_kî√l
(
btf
 *btf, *
log_buf
, 
size_t
 
log_sz
, 
__u32
 
log_Àvñ
);

369 
btf
 *
btf_gë_‰om_fd
(
btf_fd
, bt‡*
ba£_btf
);

370 
btf_gë_kî√l_¥efix_köd
(
bpf_©èch_ty≥
 
©èch_ty≥
,

371 c⁄° **
¥efix
, *
köd
);

373 
	sbtf_ext_öfo
 {

378 *
	möfo
;

379 
__u32
 
	mªc_size
;

380 
__u32
 
	mÀn
;

386 
__u32
 *
	m£c_idxs
;

387 
	m£c_˙t
;

390 
	#f‹_óch_btf_ext_£c
(
£g
, 
£c
) \

391 
£c
 = (
£g
)->
öfo
; \

392 (*)
£c
 < (
£g
)->
öfo
 + (£g)->
Àn
; \

393 
£c
 = (*)£¯+ (
btf_ext_öfo_£c
) + \

394 (
£g
)->
ªc_size
 * 
£c
->
num_öfo
)

	)

396 
	#f‹_óch_btf_ext_ªc
(
£g
, 
£c
, 
i
, 
ªc
) \

397 
i
 = 0, 
ªc
 = (*)&(
£c
)->
d©a
; \

398 
i
 < (
£c
)->
num_öfo
; \

399 
i
++, 
ªc
 = (*Ïe¯+ (
£g
)->
ªc_size
)

	)

422 
	sbtf_ext_hódî
 {

423 
__u16
 
	mmagic
;

424 
__u8
 
	mvîsi⁄
;

425 
__u8
 
	mÊags
;

426 
__u32
 
	mhdr_Àn
;

429 
__u32
 
	mfunc_öfo_off
;

430 
__u32
 
	mfunc_öfo_Àn
;

431 
__u32
 
	mlöe_öfo_off
;

432 
__u32
 
	mlöe_öfo_Àn
;

435 
__u32
 
	mc‹e_ªlo_off
;

436 
__u32
 
	mc‹e_ªlo_Àn
;

439 
	sbtf_ext
 {

441 
btf_ext_hódî
 *
	mhdr
;

442 *
	md©a
;

444 
btf_ext_öfo
 
	mfunc_öfo
;

445 
btf_ext_öfo
 
	mlöe_öfo
;

446 
btf_ext_öfo
 
	mc‹e_ªlo_öfo
;

447 
__u32
 
	md©a_size
;

450 
	sbtf_ext_öfo_£c
 {

451 
__u32
 
	m£c_«me_off
;

452 
__u32
 
	mnum_öfo
;

454 
__u8
 
	md©a
[];

458 
	sbpf_func_öfo_mö
 {

459 
__u32
 
	mö¢_off
;

460 
__u32
 
	mty≥_id
;

464 
	sbpf_löe_öfo_mö
 {

465 
__u32
 
	mö¢_off
;

466 
__u32
 
	mfûe_«me_off
;

467 
__u32
 
	mlöe_off
;

468 
__u32
 
	mlöe_cﬁ
;

472 (*
	tty≥_id_visô_‚
)(
	t__u32
 *
	tty≥_id
, *
	t˘x
);

473 (*
	t°r_off_visô_‚
)(
	t__u32
 *
	t°r_off
, *
	t˘x
);

474 
	`btf_ty≥_visô_ty≥_ids
(
btf_ty≥
 *
t
, 
ty≥_id_visô_‚
 
visô
, *
˘x
);

475 
	`btf_ty≥_visô_°r_offs
(
btf_ty≥
 *
t
, 
°r_off_visô_‚
 
visô
, *
˘x
);

476 
	`btf_ext_visô_ty≥_ids
(
btf_ext
 *btf_ext, 
ty≥_id_visô_‚
 
visô
, *
˘x
);

477 
	`btf_ext_visô_°r_offs
(
btf_ext
 *btf_ext, 
°r_off_visô_‚
 
visô
, *
˘x
);

478 
__s32
 
	`btf__föd_by_«me_köd_own
(c⁄° 
btf
 *btf, c⁄° *
ty≥_«me
,

479 
__u32
 
köd
);

481 
libbpf_°ri˘_mode
 
libbpf_mode
;

483 (*
	tkÆlsyms_cb_t
)(
	tsym_addr
, 
	tsym_ty≥
,

484 c⁄° *
	tsym_«me
, *
	t˘x
);

486 
	`libbpf_kÆlsyms_∑r£
(
kÆlsyms_cb_t
 
cb
, *
¨g
);

489 
ölöe
 
	$libbpf_îr
(
ªt
)

491 i‡(
ªt
 < 0)

492 
î∫o
 = -
ªt
;

493  
ªt
;

494 
	}
}

499 
ölöe
 
	$libbpf_îr_î∫o
(
ªt
)

501 i‡(
libbpf_mode
 & 
LIBBPF_STRICT_DIRECT_ERRS
)

503  
ªt
 < 0 ? -
î∫o
 :Ñet;

506  
ªt
;

507 
	}
}

510 
ölöe
 *
	$libbpf_îr_±r
(
îr
)

513 
î∫o
 = -
îr
;

515 i‡(
libbpf_mode
 & 
LIBBPF_STRICT_CLEAN_PTRS
)

516  
NULL
;

519  
	`ERR_PTR
(
îr
);

520 
	}
}

523 
ölöe
 *
	$libbpf_±r
(*
ªt
)

526 i‡(
	`IS_ERR
(
ªt
))

527 
î∫o
 = -
	`PTR_ERR
(
ªt
);

529 i‡(
libbpf_mode
 & 
LIBBPF_STRICT_CLEAN_PTRS
)

530  
	`IS_ERR
(
ªt
Ë? 
NULL
 :Ñet;

533  
ªt
;

534 
	}
}

536 
ölöe
 
boﬁ
 
	$°r_is_em±y
(c⁄° *
s
)

538  !
s
 || !s[0];

539 
	}
}

541 
ölöe
 
boﬁ
 
	$is_ldimm64_ö¢
(
bpf_ö¢
 *
ö¢
)

543  
ö¢
->
code
 =(
BPF_LD
 | 
BPF_IMM
 | 
BPF_DW
);

544 
	}
}

550 
ölöe
 
	$ísuª_good_fd
(
fd
)

552 
ﬁd_fd
 = 
fd
, 
ßved_î∫o
;

554 i‡(
fd
 < 0)

555  
fd
;

556 i‡(
fd
 < 3) {

557 
fd
 = 
	`f˙é
(fd, 
F_DUPFD_CLOEXEC
, 3);

558 
ßved_î∫o
 = 
î∫o
;

559 
	`˛o£
(
ﬁd_fd
);

560 i‡(
fd
 < 0) {

561 
	`¥_w¨n
("ÁûedÅÿdu∞FD %dÅÿFD > 2: %d\n", 
ﬁd_fd
, -
ßved_î∫o
);

562 
î∫o
 = 
ßved_î∫o
;

565  
fd
;

566 
	}
}

569 
bpf_c‹e_add_ˇnds
(
bpf_c‹e_ˇnd
 *
loˇl_ˇnd
,

570 
size_t
 
loˇl_es£¡_Àn
,

571 c⁄° 
btf
 *
èrg_btf
,

572 c⁄° *
èrg_btf_«me
,

573 
èrg_°¨t_id
,

574 
bpf_c‹e_ˇnd_li°
 *
ˇnds
);

575 
bpf_c‹e_‰ì_ˇnds
(
bpf_c‹e_ˇnd_li°
 *
ˇnds
);

577 
usdt_m™agî
 *
usdt_m™agî_√w
(
bpf_obje˘
 *
obj
);

578 
usdt_m™agî_‰ì
(
usdt_m™agî
 *
m™
);

579 
bpf_lök
 * 
usdt_m™agî_©èch_usdt
(
usdt_m™agî
 *
m™
,

580 c⁄° 
bpf_¥ogøm
 *
¥og
,

581 
pid_t
 
pid
, c⁄° *
∑th
,

582 c⁄° *
usdt_¥ovidî
, c⁄° *
usdt_«me
,

583 
__u64
 
usdt_cookõ
);

	@libbpf_legacy.h

10 #i‚de‡
__LIBBPF_LEGACY_BPF_H


11 
	#__LIBBPF_LEGACY_BPF_H


	)

13 
	~<löux/bpf.h
>

14 
	~<°dboﬁ.h
>

15 
	~<°ddef.h
>

16 
	~<°döt.h
>

17 
	~"libbpf_comm⁄.h
"

19 #ifde‡
__˝lu•lus


23 
	elibbpf_°ri˘_mode
 {

28 
LIBBPF_STRICT_ALL
 = 0xffffffff,

35 
LIBBPF_STRICT_NONE
 = 0x00,

41 
LIBBPF_STRICT_CLEAN_PTRS
 = 0x01,

47 
LIBBPF_STRICT_DIRECT_ERRS
 = 0x02,

62 
LIBBPF_STRICT_SEC_NAME
 = 0x04,

68 
LIBBPF_STRICT_NO_OBJECT_LIST
 = 0x08,

79 
LIBBPF_STRICT_AUTO_RLIMIT_MEMLOCK
 = 0x10,

84 
LIBBPF_STRICT_MAP_DEFINITIONS
 = 0x20,

86 
__LIBBPF_STRICT_LAST
,

89 
LIBBPF_API
 
libbpf_£t_°ri˘_mode
(
libbpf_°ri˘_mode
 
mode
);

91 
	#DECLARE_LIBBPF_OPTS
 
LIBBPF_OPTS


	)

99 
bpf_¥ogøm
;

100 
bpf_m≠
;

101 
btf
;

102 
btf_ext
;

104 
LIBBPF_API
 
bpf_¥og_ty≥
 
bpf_¥ogøm__gë_ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
);

105 
LIBBPF_API
 
bpf_©èch_ty≥
 
bpf_¥ogøm__gë_ex≥˘ed_©èch_ty≥
(c⁄° 
bpf_¥ogøm
 *
¥og
);

106 
LIBBPF_API
 c⁄° *
bpf_m≠__gë_pö_∑th
(c⁄° 
bpf_m≠
 *
m≠
);

107 
LIBBPF_API
 c⁄° *
btf__gë_øw_d©a
(c⁄° 
btf
 *btf, 
__u32
 *
size
);

108 
LIBBPF_API
 c⁄° *
btf_ext__gë_øw_d©a
(c⁄° 
btf_ext
 *btf_ext, 
__u32
 *
size
);

110 #ifde‡
__˝lu•lus


	@libbpf_probes.c

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

8 
	~<uni°d.h
>

9 
	~<√t/if.h
>

10 
	~<sys/ut¢ame.h
>

12 
	~<löux/btf.h
>

13 
	~<löux/fûãr.h
>

14 
	~<löux/kî√l.h
>

16 
	~"bpf.h
"

17 
	~"libbpf.h
"

18 
	~"libbpf_öã∫Æ.h
"

20 
boﬁ
 
	$gªp
(c⁄° *
buf„r
, c⁄° *
∑âîn
)

22  !!
	`°r°r
(
buf„r
, 
∑âîn
);

23 
	}
}

25 
	$gë_víd‹_id
(
ifödex
)

27 
i‚ame
[
IF_NAMESIZE
], 
∑th
[64], 
buf
[8];

28 
ssize_t
 
Àn
;

29 
fd
;

31 i‡(!
	`if_ödext⁄ame
(
ifödex
, 
i‚ame
))

34 
	`¢¥ötf
(
∑th
, ’©h), "/sys/˛ass/√t/%s/devi˚/víd‹", 
i‚ame
);

36 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
 | 
O_CLOEXEC
);

37 i‡(
fd
 < 0)

40 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

41 
	`˛o£
(
fd
);

42 i‡(
Àn
 < 0)

44 i‡(
Àn
 >(
ssize_t
)(
buf
))

46 
buf
[
Àn
] = '\0';

48  
	`°πﬁ
(
buf
, 
NULL
, 0);

49 
	}
}

51 
	$¥obe_¥og_lﬂd
(
bpf_¥og_ty≥
 
¥og_ty≥
,

52 c⁄° 
bpf_ö¢
 *
ö¢s
, 
size_t
 
ö¢s_˙t
,

53 *
log_buf
, 
size_t
 
log_buf_sz
,

54 
__u32
 
ifödex
)

56 
	`LIBBPF_OPTS
(
bpf_¥og_lﬂd_›ts
, 
›ts
,

57 .
log_buf
 =Üog_buf,

58 .
log_size
 = 
log_buf_sz
,

59 .
log_Àvñ
 = 
log_buf
 ? 1 : 0,

60 .
¥og_ifödex
 = 
ifödex
,

62 
fd
, 
îr
, 
exp_îr
 = 0;

63 c⁄° *
exp_msg
 = 
NULL
;

64 
buf
[4096];

66 
¥og_ty≥
) {

67 
BPF_PROG_TYPE_CGROUP_SOCK_ADDR
:

68 
›ts
.
ex≥˘ed_©èch_ty≥
 = 
BPF_CGROUP_INET4_CONNECT
;

70 
BPF_PROG_TYPE_CGROUP_SOCKOPT
:

71 
›ts
.
ex≥˘ed_©èch_ty≥
 = 
BPF_CGROUP_GETSOCKOPT
;

73 
BPF_PROG_TYPE_SK_LOOKUP
:

74 
›ts
.
ex≥˘ed_©èch_ty≥
 = 
BPF_SK_LOOKUP
;

76 
BPF_PROG_TYPE_KPROBE
:

77 
›ts
.
kîn_vîsi⁄
 = 
	`gë_kî√l_vîsi⁄
();

79 
BPF_PROG_TYPE_LIRC_MODE2
:

80 
›ts
.
ex≥˘ed_©èch_ty≥
 = 
BPF_LIRC_MODE2
;

82 
BPF_PROG_TYPE_TRACING
:

83 
BPF_PROG_TYPE_LSM
:

84 
›ts
.
log_buf
 = 
buf
;

85 
›ts
.
log_size
 = (
buf
);

86 
›ts
.
log_Àvñ
 = 1;

87 i‡(
¥og_ty≥
 =
BPF_PROG_TYPE_TRACING
)

88 
›ts
.
ex≥˘ed_©èch_ty≥
 = 
BPF_TRACE_FENTRY
;

90 
›ts
.
ex≥˘ed_©èch_ty≥
 = 
BPF_MODIFY_RETURN
;

91 
›ts
.
©èch_btf_id
 = 1;

93 
exp_îr
 = -
EINVAL
;

94 
exp_msg
 = "attach_btf_id 1 isÇotá function";

96 
BPF_PROG_TYPE_EXT
:

97 
›ts
.
log_buf
 = 
buf
;

98 
›ts
.
log_size
 = (
buf
);

99 
›ts
.
log_Àvñ
 = 1;

100 
›ts
.
©èch_btf_id
 = 1;

102 
exp_îr
 = -
EINVAL
;

103 
exp_msg
 = "CannotÑeplace kernel functions";

105 
BPF_PROG_TYPE_SYSCALL
:

106 
›ts
.
¥og_Êags
 = 
BPF_F_SLEEPABLE
;

108 
BPF_PROG_TYPE_STRUCT_OPS
:

109 
exp_îr
 = -524;

111 
BPF_PROG_TYPE_UNSPEC
:

112 
BPF_PROG_TYPE_SOCKET_FILTER
:

113 
BPF_PROG_TYPE_SCHED_CLS
:

114 
BPF_PROG_TYPE_SCHED_ACT
:

115 
BPF_PROG_TYPE_TRACEPOINT
:

116 
BPF_PROG_TYPE_XDP
:

117 
BPF_PROG_TYPE_PERF_EVENT
:

118 
BPF_PROG_TYPE_CGROUP_SKB
:

119 
BPF_PROG_TYPE_CGROUP_SOCK
:

120 
BPF_PROG_TYPE_LWT_IN
:

121 
BPF_PROG_TYPE_LWT_OUT
:

122 
BPF_PROG_TYPE_LWT_XMIT
:

123 
BPF_PROG_TYPE_SOCK_OPS
:

124 
BPF_PROG_TYPE_SK_SKB
:

125 
BPF_PROG_TYPE_CGROUP_DEVICE
:

126 
BPF_PROG_TYPE_SK_MSG
:

127 
BPF_PROG_TYPE_RAW_TRACEPOINT
:

128 
BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE
:

129 
BPF_PROG_TYPE_LWT_SEG6LOCAL
:

130 
BPF_PROG_TYPE_SK_REUSEPORT
:

131 
BPF_PROG_TYPE_FLOW_DISSECTOR
:

132 
BPF_PROG_TYPE_CGROUP_SYSCTL
:

135  -
EOPNOTSUPP
;

138 
fd
 = 
	`bpf_¥og_lﬂd
(
¥og_ty≥
, 
NULL
, "GPL", 
ö¢s
, 
ö¢s_˙t
, &
›ts
);

139 
îr
 = -
î∫o
;

140 i‡(
fd
 >= 0)

141 
	`˛o£
(
fd
);

142 i‡(
exp_îr
) {

143 i‡(
fd
 >0 || 
îr
 !
exp_îr
)

145 i‡(
exp_msg
 && !
	`°r°r
(
buf
,Éxp_msg))

149  
fd
 >= 0 ? 1 : 0;

150 
	}
}

152 
	$libbpf_¥obe_bpf_¥og_ty≥
(
bpf_¥og_ty≥
 
¥og_ty≥
, c⁄° *
›ts
)

154 
bpf_ö¢
 
ö¢s
[] = {

155 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 0),

156 
	`BPF_EXIT_INSN
()

158 c⁄° 
size_t
 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

159 
ªt
;

161 i‡(
›ts
)

162  
	`libbpf_îr
(-
EINVAL
);

164 
ªt
 = 
	`¥obe_¥og_lﬂd
(
¥og_ty≥
, 
ö¢s
, 
ö¢_˙t
, 
NULL
, 0, 0);

165  
	`libbpf_îr
(
ªt
);

166 
	}
}

168 
boﬁ
 
	$bpf_¥obe_¥og_ty≥
(
bpf_¥og_ty≥
 
¥og_ty≥
, 
__u32
 
ifödex
)

170 
bpf_ö¢
 
ö¢s
[2] = {

171 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 0),

172 
	`BPF_EXIT_INSN
()

176 i‡(
ifödex
 == 0)

177  
	`libbpf_¥obe_bpf_¥og_ty≥
(
¥og_ty≥
, 
NULL
) == 1;

179 i‡(
ifödex
 && 
¥og_ty≥
 =
BPF_PROG_TYPE_SCHED_CLS
)

181 
ö¢s
[0].
imm
 = 2;

183 
î∫o
 = 0;

184 
	`¥obe_¥og_lﬂd
(
¥og_ty≥
, 
ö¢s
, 
	`ARRAY_SIZE
(ö¢s), 
NULL
, 0, 
ifödex
);

186  
î∫o
 !
EINVAL
 &&Éºnÿ!
EOPNOTSUPP
;

187 
	}
}

189 
	$libbpf__lﬂd_øw_btf
(c⁄° *
øw_ty≥s
, 
size_t
 
ty≥s_Àn
,

190 c⁄° *
°r_£c
, 
size_t
 
°r_Àn
)

192 
btf_hódî
 
hdr
 = {

193 .
magic
 = 
BTF_MAGIC
,

194 .
vîsi⁄
 = 
BTF_VERSION
,

195 .
hdr_Àn
 = (
btf_hódî
),

196 .
ty≥_Àn
 = 
ty≥s_Àn
,

197 .
°r_off
 = 
ty≥s_Àn
,

198 .
°r_Àn
 = str_len,

200 
btf_fd
, 
btf_Àn
;

201 
__u8
 *
øw_btf
;

203 
btf_Àn
 = 
hdr
.
hdr_Àn
 + hdr.
ty≥_Àn
 + hdr.
°r_Àn
;

204 
øw_btf
 = 
	`mÆloc
(
btf_Àn
);

205 i‡(!
øw_btf
)

206  -
ENOMEM
;

208 
	`mem˝y
(
øw_btf
, &
hdr
, (hdr));

209 
	`mem˝y
(
øw_btf
 + 
hdr
.
hdr_Àn
, 
øw_ty≥s
, hdr.
ty≥_Àn
);

210 
	`mem˝y
(
øw_btf
 + 
hdr
.
hdr_Àn
 + hdr.
ty≥_Àn
, 
°r_£c
, hdr.
°r_Àn
);

212 
btf_fd
 = 
	`bpf_btf_lﬂd
(
øw_btf
, 
btf_Àn
, 
NULL
);

214 
	`‰ì
(
øw_btf
);

215  
btf_fd
;

216 
	}
}

218 
	$lﬂd_loˇl_°‹age_btf
()

220 c⁄° 
°rs
[] = "\0bpf_spin_lock\0val\0cnt\0l";

229 
__u32
 
ty≥s
[] = {

231 
	`BTF_TYPE_INT_ENC
(0, 
BTF_INT_SIGNED
, 0, 32, 4),

233 
	`BTF_TYPE_ENC
(1, 
	`BTF_INFO_ENC
(
BTF_KIND_STRUCT
, 0, 1), 4),

234 
	`BTF_MEMBER_ENC
(15, 1, 0),

236 
	`BTF_TYPE_ENC
(15, 
	`BTF_INFO_ENC
(
BTF_KIND_STRUCT
, 0, 2), 8),

237 
	`BTF_MEMBER_ENC
(19, 1, 0),

238 
	`BTF_MEMBER_ENC
(23, 2, 32),

241  
	`libbpf__lﬂd_øw_btf
((*)
ty≥s
, (types),

242 
°rs
, (strs));

243 
	}
}

245 
	$¥obe_m≠_¸óã
(
bpf_m≠_ty≥
 
m≠_ty≥
, 
__u32
 
ifödex
)

247 
	`LIBBPF_OPTS
(
bpf_m≠_¸óã_›ts
, 
›ts
);

248 
key_size
, 
vÆue_size
, 
max_íåõs
;

249 
__u32
 
btf_key_ty≥_id
 = 0, 
btf_vÆue_ty≥_id
 = 0;

250 
fd
 = -1, 
btf_fd
 = -1, 
fd_ö√r
 = -1, 
exp_îr
 = 0, 
îr
;

252 
›ts
.
m≠_ifödex
 = 
ifödex
;

254 
key_size
 = (
__u32
);

255 
vÆue_size
 = (
__u32
);

256 
max_íåõs
 = 1;

258 
m≠_ty≥
) {

259 
BPF_MAP_TYPE_STACK_TRACE
:

260 
vÆue_size
 = (
__u64
);

262 
BPF_MAP_TYPE_LPM_TRIE
:

263 
key_size
 = (
__u64
);

264 
vÆue_size
 = (
__u64
);

265 
›ts
.
m≠_Êags
 = 
BPF_F_NO_PREALLOC
;

267 
BPF_MAP_TYPE_CGROUP_STORAGE
:

268 
BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE
:

269 
key_size
 = (
bpf_cgroup_°‹age_key
);

270 
vÆue_size
 = (
__u64
);

271 
max_íåõs
 = 0;

273 
BPF_MAP_TYPE_QUEUE
:

274 
BPF_MAP_TYPE_STACK
:

275 
key_size
 = 0;

277 
BPF_MAP_TYPE_SK_STORAGE
:

278 
BPF_MAP_TYPE_INODE_STORAGE
:

279 
BPF_MAP_TYPE_TASK_STORAGE
:

280 
btf_key_ty≥_id
 = 1;

281 
btf_vÆue_ty≥_id
 = 3;

282 
vÆue_size
 = 8;

283 
max_íåõs
 = 0;

284 
›ts
.
m≠_Êags
 = 
BPF_F_NO_PREALLOC
;

285 
btf_fd
 = 
	`lﬂd_loˇl_°‹age_btf
();

286 i‡(
btf_fd
 < 0)

287  
btf_fd
;

289 
BPF_MAP_TYPE_RINGBUF
:

290 
key_size
 = 0;

291 
vÆue_size
 = 0;

292 
max_íåõs
 = 4096;

294 
BPF_MAP_TYPE_STRUCT_OPS
:

296 
›ts
.
btf_vmlöux_vÆue_ty≥_id
 = 1;

297 
exp_îr
 = -524;

299 
BPF_MAP_TYPE_BLOOM_FILTER
:

300 
key_size
 = 0;

301 
max_íåõs
 = 1;

303 
BPF_MAP_TYPE_HASH
:

304 
BPF_MAP_TYPE_ARRAY
:

305 
BPF_MAP_TYPE_PROG_ARRAY
:

306 
BPF_MAP_TYPE_PERF_EVENT_ARRAY
:

307 
BPF_MAP_TYPE_PERCPU_HASH
:

308 
BPF_MAP_TYPE_PERCPU_ARRAY
:

309 
BPF_MAP_TYPE_CGROUP_ARRAY
:

310 
BPF_MAP_TYPE_LRU_HASH
:

311 
BPF_MAP_TYPE_LRU_PERCPU_HASH
:

312 
BPF_MAP_TYPE_ARRAY_OF_MAPS
:

313 
BPF_MAP_TYPE_HASH_OF_MAPS
:

314 
BPF_MAP_TYPE_DEVMAP
:

315 
BPF_MAP_TYPE_DEVMAP_HASH
:

316 
BPF_MAP_TYPE_SOCKMAP
:

317 
BPF_MAP_TYPE_CPUMAP
:

318 
BPF_MAP_TYPE_XSKMAP
:

319 
BPF_MAP_TYPE_SOCKHASH
:

320 
BPF_MAP_TYPE_REUSEPORT_SOCKARRAY
:

322 
BPF_MAP_TYPE_UNSPEC
:

324  -
EOPNOTSUPP
;

327 i‡(
m≠_ty≥
 =
BPF_MAP_TYPE_ARRAY_OF_MAPS
 ||

328 
m≠_ty≥
 =
BPF_MAP_TYPE_HASH_OF_MAPS
) {

332 i‡(
ifödex
)

333 
˛ónup
;

335 
fd_ö√r
 = 
	`bpf_m≠_¸óã
(
BPF_MAP_TYPE_HASH
, 
NULL
,

336 (
__u32
), (__u32), 1, 
NULL
);

337 i‡(
fd_ö√r
 < 0)

338 
˛ónup
;

340 
›ts
.
ö√r_m≠_fd
 = 
fd_ö√r
;

343 i‡(
btf_fd
 >= 0) {

344 
›ts
.
btf_fd
 = btf_fd;

345 
›ts
.
btf_key_ty≥_id
 = btf_key_type_id;

346 
›ts
.
btf_vÆue_ty≥_id
 = btf_value_type_id;

349 
fd
 = 
	`bpf_m≠_¸óã
(
m≠_ty≥
, 
NULL
, 
key_size
, 
vÆue_size
, 
max_íåõs
, &
›ts
);

350 
îr
 = -
î∫o
;

352 
˛ónup
:

353 i‡(
fd
 >= 0)

354 
	`˛o£
(
fd
);

355 i‡(
fd_ö√r
 >= 0)

356 
	`˛o£
(
fd_ö√r
);

357 i‡(
btf_fd
 >= 0)

358 
	`˛o£
(
btf_fd
);

360 i‡(
exp_îr
)

361  
fd
 < 0 && 
îr
 =
exp_îr
 ? 1 : 0;

363  
fd
 >= 0 ? 1 : 0;

364 
	}
}

366 
	$libbpf_¥obe_bpf_m≠_ty≥
(
bpf_m≠_ty≥
 
m≠_ty≥
, c⁄° *
›ts
)

368 
ªt
;

370 i‡(
›ts
)

371  
	`libbpf_îr
(-
EINVAL
);

373 
ªt
 = 
	`¥obe_m≠_¸óã
(
m≠_ty≥
, 0);

374  
	`libbpf_îr
(
ªt
);

375 
	}
}

377 
boﬁ
 
	$bpf_¥obe_m≠_ty≥
(
bpf_m≠_ty≥
 
m≠_ty≥
, 
__u32
 
ifödex
)

379  
	`¥obe_m≠_¸óã
(
m≠_ty≥
, 
ifödex
) == 1;

380 
	}
}

382 
	$libbpf_¥obe_bpf_hñ≥r
(
bpf_¥og_ty≥
 
¥og_ty≥
, 
bpf_func_id
 
hñ≥r_id
,

383 c⁄° *
›ts
)

385 
bpf_ö¢
 
ö¢s
[] = {

386 
	`BPF_EMIT_CALL
((
__u32
)
hñ≥r_id
),

387 
	`BPF_EXIT_INSN
(),

389 c⁄° 
size_t
 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

390 
buf
[4096];

391 
ªt
;

393 i‡(
›ts
)

394  
	`libbpf_îr
(-
EINVAL
);

399 
¥og_ty≥
) {

400 
BPF_PROG_TYPE_TRACING
:

401 
BPF_PROG_TYPE_EXT
:

402 
BPF_PROG_TYPE_LSM
:

403 
BPF_PROG_TYPE_STRUCT_OPS
:

404  -
EOPNOTSUPP
;

409 
buf
[0] = '\0';

410 
ªt
 = 
	`¥obe_¥og_lﬂd
(
¥og_ty≥
, 
ö¢s
, 
ö¢_˙t
, 
buf
, (buf), 0);

411 i‡(
ªt
 < 0)

412  
	`libbpf_îr
(
ªt
);

426 i‡(
ªt
 =0 && (
	`°r°r
(
buf
, "invalid func ") || strstr(buf, "unknown func ")))

429 
	}
}

431 
boﬁ
 
	$bpf_¥obe_hñ≥r
(
bpf_func_id
 
id
, 
bpf_¥og_ty≥
 
¥og_ty≥
,

432 
__u32
 
ifödex
)

434 
bpf_ö¢
 
ö¢s
[2] = {

435 
	`BPF_EMIT_CALL
(
id
),

436 
	`BPF_EXIT_INSN
()

438 
buf
[4096] = {};

439 
boﬁ
 
ªs
;

441 
	`¥obe_¥og_lﬂd
(
¥og_ty≥
, 
ö¢s
, 
	`ARRAY_SIZE
(ö¢s), 
buf
, (buf), 
ifödex
);

442 
ªs
 = !
	`gªp
(
buf
, "invalid func ") && !grep(buf, "unknown func ");

444 i‡(
ifödex
) {

445 
	`gë_víd‹_id
(
ifödex
)) {

447 
ªs
 =Ñe†&& !
	`gªp
(
buf
, "not supported by FW") &&

448 !
	`gªp
(
buf
, "unsupported function id");

455  
ªs
;

456 
	}
}

463 
boﬁ
 
	$bpf_¥obe_œrge_ö¢_limô
(
__u32
 
ifödex
)

465 
bpf_ö¢
 
ö¢s
[
BPF_MAXINSNS
 + 1];

466 
i
;

468 
i
 = 0; i < 
BPF_MAXINSNS
; i++)

469 
ö¢s
[
i
] = 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 1);

470 
ö¢s
[
BPF_MAXINSNS
] = 
	`BPF_EXIT_INSN
();

472 
î∫o
 = 0;

473 
	`¥obe_¥og_lﬂd
(
BPF_PROG_TYPE_SCHED_CLS
, 
ö¢s
, 
	`ARRAY_SIZE
(ö¢s), 
NULL
, 0,

474 
ifödex
);

476  
î∫o
 !
E2BIG
 &&Éºnÿ!
EINVAL
;

477 
	}
}

	@libbpf_version.h

3 #i‚de‡
__LIBBPF_VERSION_H


4 
	#__LIBBPF_VERSION_H


	)

6 
	#LIBBPF_MAJOR_VERSION
 0

	)

7 
	#LIBBPF_MINOR_VERSION
 8

	)

	@linker.c

7 
	~<°dboﬁ.h
>

8 
	~<°ddef.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<uni°d.h
>

13 
	~<î∫o.h
>

14 
	~<löux/îr.h
>

15 
	~<löux/btf.h
>

16 
	~<ñf.h
>

17 
	~<libñf.h
>

18 
	~<f˙é.h
>

19 
	~"libbpf.h
"

20 
	~"btf.h
"

21 
	~"libbpf_öã∫Æ.h
"

22 
	~"°r£t.h
"

24 
	#BTF_EXTERN_SEC
 ".exã∫"

	)

26 
	s§c_£c
 {

27 c⁄° *
	m£c_«me
;

29 
	mid
;

31 
	md°_id
;

33 
	md°_off
;

35 
boﬁ
 
	mskù≥d
;

37 
boﬁ
 
	mïhemîÆ
;

40 
size_t
 
	m£c_idx
;

41 
Elf_S˙
 *
	ms˙
;

42 
Elf64_Shdr
 *
	mshdr
;

43 
Elf_D©a
 *
	md©a
;

46 
	m£c_ty≥_id
;

49 
	s§c_obj
 {

50 c⁄° *
	mfûíame
;

51 
	mfd
;

52 
Elf
 *
	mñf
;

54 
size_t
 
	msh°rs_£c_idx
;

56 
size_t
 
	msymèb_£c_idx
;

58 
btf
 *
	mbtf
;

59 
btf_ext
 *
	mbtf_ext
;

62 
§c_£c
 *
	m£cs
;

63 
	m£c_˙t
;

66 *
	msym_m≠
;

68 *
	mbtf_ty≥_m≠
;

72 
	sbtf_ext_£c_d©a
 {

73 
size_t
 
	mªc_˙t
;

74 
__u32
 
	mªc_sz
;

75 *
	mªcs
;

78 
	sglob_sym
 {

80 
	msym_idx
;

82 
	m£c_id
;

84 
	m«me_off
;

86 
	mbtf_id
;

91 
	mundîlyög_btf_id
;

93 
	mv¨_idx
;

96 
boﬁ
 
	mis_exã∫
;

98 
boﬁ
 
	mis_wók
;

101 
	sd°_£c
 {

102 *
	m£c_«me
;

104 
	mid
;

106 
boﬁ
 
	mïhemîÆ
;

109 
size_t
 
	m£c_idx
;

110 
Elf_S˙
 *
	ms˙
;

111 
Elf64_Shdr
 *
	mshdr
;

112 
Elf_D©a
 *
	md©a
;

115 
	m£c_sz
;

117 *
	møw_d©a
;

120 
	m£c_sym_idx
;

123 
boﬁ
 
	mhas_btf
;

124 
	m£c_v¨_˙t
;

125 
btf_v¨_£cöfo
 *
	m£c_v¨s
;

128 
btf_ext_£c_d©a
 
	mfunc_öfo
;

129 
btf_ext_£c_d©a
 
	mlöe_öfo
;

130 
btf_ext_£c_d©a
 
	mc‹e_ªlo_öfo
;

133 
	sbpf_lökî
 {

134 *
	mfûíame
;

135 
	mfd
;

136 
Elf
 *
	mñf
;

137 
Elf64_Ehdr
 *
	mñf_hdr
;

140 
d°_£c
 *
	m£cs
;

141 
	m£c_˙t
;

143 
°r£t
 *
	m°πab_°rs
;

144 
size_t
 
	m°πab_£c_idx
;

145 
size_t
 
	msymèb_£c_idx
;

147 
btf
 *
	mbtf
;

148 
btf_ext
 *
	mbtf_ext
;

151 
	mglob_sym_˙t
;

152 
glob_sym
 *
	mglob_syms
;

155 
	#¥_w¨n_ñf
(
fmt
, ...) \

156 
	`libbpf_¥öt
(
LIBBPF_WARN
, "libbpf: " 
fmt
 ": %s\n", ##
__VA_ARGS__
, 
	`ñf_îrmsg
(-1))

	)

158 
öô_ouçut_ñf
(
bpf_lökî
 *
lökî
, c⁄° *
fûe
);

160 
lökî_lﬂd_obj_fûe
(
bpf_lökî
 *
lökî
, c⁄° *
fûíame
,

161 c⁄° 
bpf_lökî_fûe_›ts
 *
›ts
,

162 
§c_obj
 *
obj
);

163 
lökî_ßnôy_check_ñf
(
§c_obj
 *
obj
);

164 
lökî_ßnôy_check_ñf_symèb
(
§c_obj
 *
obj
, 
§c_£c
 *
£c
);

165 
lökî_ßnôy_check_ñf_ªlos
(
§c_obj
 *
obj
, 
§c_£c
 *
£c
);

166 
lökî_ßnôy_check_btf
(
§c_obj
 *
obj
);

167 
lökî_ßnôy_check_btf_ext
(
§c_obj
 *
obj
);

168 
lökî_fixup_btf
(
§c_obj
 *
obj
);

169 
lökî_≠≥nd_£c_d©a
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
);

170 
lökî_≠≥nd_ñf_syms
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
);

171 
lökî_≠≥nd_ñf_sym
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
,

172 
Elf64_Sym
 *
sym
, c⁄° *
sym_«me
, 
§c_sym_idx
);

173 
lökî_≠≥nd_ñf_ªlos
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
);

174 
lökî_≠≥nd_btf
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
);

175 
lökî_≠≥nd_btf_ext
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
);

177 
föÆize_btf
(
bpf_lökî
 *
lökî
);

178 
föÆize_btf_ext
(
bpf_lökî
 *
lökî
);

180 
	$bpf_lökî__‰ì
(
bpf_lökî
 *
lökî
)

182 
i
;

184 i‡(!
lökî
)

187 
	`‰ì
(
lökî
->
fûíame
);

189 i‡(
lökî
->
ñf
)

190 
	`ñf_íd
(
lökî
->
ñf
);

192 i‡(
lökî
->
fd
 >= 0)

193 
	`˛o£
(
lökî
->
fd
);

195 
	`°r£t__‰ì
(
lökî
->
°πab_°rs
);

197 
	`btf__‰ì
(
lökî
->
btf
);

198 
	`btf_ext__‰ì
(
lökî
->
btf_ext
);

200 
i
 = 1; i < 
lökî
->
£c_˙t
; i++) {

201 
d°_£c
 *
£c
 = &
lökî
->
£cs
[
i
];

203 
	`‰ì
(
£c
->
£c_«me
);

204 
	`‰ì
(
£c
->
øw_d©a
);

205 
	`‰ì
(
£c
->
£c_v¨s
);

207 
	`‰ì
(
£c
->
func_öfo
.
ªcs
);

208 
	`‰ì
(
£c
->
löe_öfo
.
ªcs
);

209 
	`‰ì
(
£c
->
c‹e_ªlo_öfo
.
ªcs
);

211 
	`‰ì
(
lökî
->
£cs
);

213 
	`‰ì
(
lökî
->
glob_syms
);

214 
	`‰ì
(
lökî
);

215 
	}
}

217 
bpf_lökî
 *
	$bpf_lökî__√w
(c⁄° *
fûíame
, 
bpf_lökî_›ts
 *
›ts
)

219 
bpf_lökî
 *
lökî
;

220 
îr
;

222 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_lökî_›ts
))

223  
î∫o
 = 
EINVAL
, 
NULL
;

225 i‡(
	`ñf_vîsi⁄
(
EV_CURRENT
Ë=
EV_NONE
) {

226 
	`¥_w¨n_ñf
("libelf initialization failed");

227  
î∫o
 = 
EINVAL
, 
NULL
;

230 
lökî
 = 
	`ˇŒoc
(1, (*linker));

231 i‡(!
lökî
)

232  
î∫o
 = 
ENOMEM
, 
NULL
;

234 
lökî
->
fd
 = -1;

236 
îr
 = 
	`öô_ouçut_ñf
(
lökî
, 
fûíame
);

237 i‡(
îr
)

238 
îr_out
;

240  
lökî
;

242 
îr_out
:

243 
	`bpf_lökî__‰ì
(
lökî
);

244  
î∫o
 = -
îr
, 
NULL
;

245 
	}
}

247 
d°_£c
 *
	$add_d°_£c
(
bpf_lökî
 *
lökî
, c⁄° *
£c_«me
)

249 
d°_£c
 *
£cs
 = 
lökî
->£cs, *
£c
;

250 
size_t
 
√w_˙t
 = 
lökî
->
£c_˙t
 ?Üinker->sec_cnt + 1 : 2;

252 
£cs
 = 
	`libbpf_ªÆloˇºay
(£cs, 
√w_˙t
, (*secs));

253 i‡(!
£cs
)

254  
NULL
;

257 
	`mem£t
(
£cs
 + 
lökî
->
£c_˙t
, 0, (
√w_˙t
 -Üinker->sec_cnt) * (*secs));

259 
lökî
->
£cs
 = secs;

260 
lökî
->
£c_˙t
 = 
√w_˙t
;

262 
£c
 = &
lökî
->
£cs
[
√w_˙t
 - 1];

263 
£c
->
id
 = 
√w_˙t
 - 1;

264 
£c
->
£c_«me
 = 
	`°rdup
(sec_name);

265 i‡(!
£c
->
£c_«me
)

266  
NULL
;

268  
£c
;

269 
	}
}

271 
Elf64_Sym
 *
	$add_√w_sym
(
bpf_lökî
 *
lökî
, 
size_t
 *
sym_idx
)

273 
d°_£c
 *
symèb
 = &
lökî
->
£cs
[lökî->
symèb_£c_idx
];

274 
Elf64_Sym
 *
syms
, *
sym
;

275 
size_t
 
sym_˙t
 = 
symèb
->
£c_sz
 / (*
sym
);

277 
syms
 = 
	`libbpf_ªÆloˇºay
(
symèb
->
øw_d©a
, 
sym_˙t
 + 1, (*
sym
));

278 i‡(!
syms
)

279  
NULL
;

281 
sym
 = &
syms
[
sym_˙t
];

282 
	`mem£t
(
sym
, 0, (*sym));

284 
symèb
->
øw_d©a
 = 
syms
;

285 
symèb
->
£c_sz
 +(*
sym
);

286 
symèb
->
shdr
->
sh_size
 +(*
sym
);

287 
symèb
->
d©a
->
d_size
 +(*
sym
);

289 i‡(
sym_idx
)

290 *
sym_idx
 = 
sym_˙t
;

292  
sym
;

293 
	}
}

295 
	$öô_ouçut_ñf
(
bpf_lökî
 *
lökî
, c⁄° *
fûe
)

297 
îr
, 
°r_off
;

298 
Elf64_Sym
 *
öô_sym
;

299 
d°_£c
 *
£c
;

301 
lökî
->
fûíame
 = 
	`°rdup
(
fûe
);

302 i‡(!
lökî
->
fûíame
)

303  -
ENOMEM
;

305 
lökî
->
fd
 = 
	`›í
(
fûe
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
 | 
O_CLOEXEC
, 0644);

306 i‡(
lökî
->
fd
 < 0) {

307 
îr
 = -
î∫o
;

308 
	`¥_w¨n
("ÁûedÅÿ¸óã '%s': %d\n", 
fûe
, 
îr
);

309  
îr
;

312 
lökî
->
ñf
 = 
	`ñf_begö
÷ökî->
fd
, 
ELF_C_WRITE
, 
NULL
);

313 i‡(!
lökî
->
ñf
) {

314 
	`¥_w¨n_ñf
("failedÅo create ELF object");

315  -
EINVAL
;

319 
lökî
->
ñf_hdr
 = 
	`ñf64_√wehdr
÷ökî->
ñf
);

320 i‡(!
lökî
->
ñf_hdr
) {

321 
	`¥_w¨n_ñf
("failedÅo create ELF header");

322  -
EINVAL
;

325 
lökî
->
ñf_hdr
->
e_machöe
 = 
EM_BPF
;

326 
lökî
->
ñf_hdr
->
e_ty≥
 = 
ET_REL
;

327 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


328 
lökî
->
ñf_hdr
->
e_idít
[
EI_DATA
] = 
ELFDATA2LSB
;

329 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


330 
lökî
->
ñf_hdr
->
e_idít
[
EI_DATA
] = 
ELFDATA2MSB
;

337 
lökî
->
°πab_°rs
 = 
	`°r£t__√w
(
INT_MAX
, "", (""));

338 i‡(
	`libbpf_gë_îr‹
(
lökî
->
°πab_°rs
))

339  
	`libbpf_gë_îr‹
(
lökî
->
°πab_°rs
);

341 
£c
 = 
	`add_d°_£c
(
lökî
, ".strtab");

342 i‡(!
£c
)

343  -
ENOMEM
;

345 
£c
->
s˙
 = 
	`ñf_√ws˙
(
lökî
->
ñf
);

346 i‡(!
£c
->
s˙
) {

347 
	`¥_w¨n_ñf
("failedÅo create STRTAB section");

348  -
EINVAL
;

351 
£c
->
shdr
 = 
	`ñf64_gëshdr
(£c->
s˙
);

352 i‡(!
£c
->
shdr
)

353  -
EINVAL
;

355 
£c
->
d©a
 = 
	`ñf_√wd©a
(£c->
s˙
);

356 i‡(!
£c
->
d©a
) {

357 
	`¥_w¨n_ñf
("failedÅo create STRTAB data");

358  -
EINVAL
;

361 
°r_off
 = 
	`°r£t__add_°r
(
lökî
->
°πab_°rs
, 
£c
->
£c_«me
);

362 i‡(
°r_off
 < 0)

363  
°r_off
;

365 
£c
->
£c_idx
 = 
	`ñf_ndxs˙
(£c->
s˙
);

366 
lökî
->
ñf_hdr
->
e_sh°∫dx
 = 
£c
->
£c_idx
;

367 
lökî
->
°πab_£c_idx
 = 
£c
->
£c_idx
;

369 
£c
->
shdr
->
sh_«me
 = 
°r_off
;

370 
£c
->
shdr
->
sh_ty≥
 = 
SHT_STRTAB
;

371 
£c
->
shdr
->
sh_Êags
 = 
SHF_STRINGS
;

372 
£c
->
shdr
->
sh_off£t
 = 0;

373 
£c
->
shdr
->
sh_lök
 = 0;

374 
£c
->
shdr
->
sh_öfo
 = 0;

375 
£c
->
shdr
->
sh_addølign
 = 1;

376 
£c
->
shdr
->
sh_size
 = sec->
£c_sz
 = 0;

377 
£c
->
shdr
->
sh_ítsize
 = 0;

380 
£c
 = 
	`add_d°_£c
(
lökî
, ".symtab");

381 i‡(!
£c
)

382  -
ENOMEM
;

384 
£c
->
s˙
 = 
	`ñf_√ws˙
(
lökî
->
ñf
);

385 i‡(!
£c
->
s˙
) {

386 
	`¥_w¨n_ñf
("failedÅo create SYMTAB section");

387  -
EINVAL
;

390 
£c
->
shdr
 = 
	`ñf64_gëshdr
(£c->
s˙
);

391 i‡(!
£c
->
shdr
)

392  -
EINVAL
;

394 
£c
->
d©a
 = 
	`ñf_√wd©a
(£c->
s˙
);

395 i‡(!
£c
->
d©a
) {

396 
	`¥_w¨n_ñf
("failedÅo create SYMTAB data");

397  -
EINVAL
;

400 
°r_off
 = 
	`°r£t__add_°r
(
lökî
->
°πab_°rs
, 
£c
->
£c_«me
);

401 i‡(
°r_off
 < 0)

402  
°r_off
;

404 
£c
->
£c_idx
 = 
	`ñf_ndxs˙
(£c->
s˙
);

405 
lökî
->
symèb_£c_idx
 = 
£c
->
£c_idx
;

407 
£c
->
shdr
->
sh_«me
 = 
°r_off
;

408 
£c
->
shdr
->
sh_ty≥
 = 
SHT_SYMTAB
;

409 
£c
->
shdr
->
sh_Êags
 = 0;

410 
£c
->
shdr
->
sh_off£t
 = 0;

411 
£c
->
shdr
->
sh_lök
 = 
lökî
->
°πab_£c_idx
;

415 
£c
->
shdr
->
sh_öfo
 = 0;

416 
£c
->
shdr
->
sh_addølign
 = 8;

417 
£c
->
shdr
->
sh_ítsize
 = (
Elf64_Sym
);

420 
lökî
->
btf
 = 
	`btf__√w_em±y
();

421 
îr
 = 
	`libbpf_gë_îr‹
(
lökî
->
btf
);

422 i‡(
îr
)

423  
îr
;

426 
öô_sym
 = 
	`add_√w_sym
(
lökî
, 
NULL
);

427 i‡(!
öô_sym
)

428  -
EINVAL
;

430 
öô_sym
->
°_«me
 = 0;

431 
öô_sym
->
°_öfo
 = 0;

432 
öô_sym
->
°_Ÿhî
 = 0;

433 
öô_sym
->
°_shndx
 = 
SHN_UNDEF
;

434 
öô_sym
->
°_vÆue
 = 0;

435 
öô_sym
->
°_size
 = 0;

438 
	}
}

440 
	$bpf_lökî__add_fûe
(
bpf_lökî
 *
lökî
, c⁄° *
fûíame
,

441 c⁄° 
bpf_lökî_fûe_›ts
 *
›ts
)

443 
§c_obj
 
obj
 = {};

444 
îr
 = 0;

446 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_lökî_fûe_›ts
))

447  
	`libbpf_îr
(-
EINVAL
);

449 i‡(!
lökî
->
ñf
)

450  
	`libbpf_îr
(-
EINVAL
);

452 
îr
 =Éº ?: 
	`lökî_lﬂd_obj_fûe
(
lökî
, 
fûíame
, 
›ts
, &
obj
);

453 
îr
 =Éº ?: 
	`lökî_≠≥nd_£c_d©a
(
lökî
, &
obj
);

454 
îr
 =Éº ?: 
	`lökî_≠≥nd_ñf_syms
(
lökî
, &
obj
);

455 
îr
 =Éº ?: 
	`lökî_≠≥nd_ñf_ªlos
(
lökî
, &
obj
);

456 
îr
 =Éº ?: 
	`lökî_≠≥nd_btf
(
lökî
, &
obj
);

457 
îr
 =Éº ?: 
	`lökî_≠≥nd_btf_ext
(
lökî
, &
obj
);

460 
	`‰ì
(
obj
.
btf_ty≥_m≠
);

461 
	`btf__‰ì
(
obj
.
btf
);

462 
	`btf_ext__‰ì
(
obj
.
btf_ext
);

463 
	`‰ì
(
obj
.
£cs
);

464 
	`‰ì
(
obj
.
sym_m≠
);

465 i‡(
obj
.
ñf
)

466 
	`ñf_íd
(
obj
.
ñf
);

467 i‡(
obj
.
fd
 >= 0)

468 
	`˛o£
(
obj
.
fd
);

470  
	`libbpf_îr
(
îr
);

471 
	}
}

473 
boﬁ
 
	$is_dw¨f_£c_«me
(c⁄° *
«me
)

476  
	`°∫cmp
(
«me
, ".debug_", (".debug_") - 1) == 0;

477 
	}
}

479 
boﬁ
 
	$is_ign‹ed_£c
(
§c_£c
 *
£c
)

481 
Elf64_Shdr
 *
shdr
 = 
£c
->shdr;

482 c⁄° *
«me
 = 
£c
->
£c_«me
;

485 i‡(
shdr
->
sh_ty≥
 =
SHT_STRTAB
)

486  
åue
;

489 i‡(
shdr
->
sh_ty≥
 =
SHT_LLVM_ADDRSIG
)

490  
åue
;

493 i‡(
shdr
->
sh_ty≥
 =
SHT_PROGBITS
 && shdr->
sh_size
 == 0 &&

494 
	`°rcmp
(
£c
->
£c_«me
, ".text") == 0)

495  
åue
;

498 i‡(
	`is_dw¨f_£c_«me
(
£c
->
£c_«me
))

499  
åue
;

501 i‡(
	`°∫cmp
(
«me
, ".rel", (".rel") - 1) == 0) {

502 
«me
 += (".rel") - 1;

504 i‡(
	`is_dw¨f_£c_«me
(
«me
))

505  
åue
;

508 i‡(
	`°rcmp
(
«me
, 
BTF_ELF_SEC
) == 0 ||

509 
	`°rcmp
(
«me
, 
BTF_EXT_ELF_SEC
) == 0)

510  
åue
;

513  
Ál£
;

514 
	}
}

516 
§c_£c
 *
	$add_§c_£c
(
§c_obj
 *
obj
, c⁄° *
£c_«me
)

518 
§c_£c
 *
£cs
 = 
obj
->£cs, *
£c
;

519 
size_t
 
√w_˙t
 = 
obj
->
£c_˙t
 ? obj->sec_cnt + 1 : 2;

521 
£cs
 = 
	`libbpf_ªÆloˇºay
(£cs, 
√w_˙t
, (*secs));

522 i‡(!
£cs
)

523  
NULL
;

526 
	`mem£t
(
£cs
 + 
obj
->
£c_˙t
, 0, (
√w_˙t
 - obj->sec_cnt) * (*secs));

528 
obj
->
£cs
 = secs;

529 
obj
->
£c_˙t
 = 
√w_˙t
;

531 
£c
 = &
obj
->
£cs
[
√w_˙t
 - 1];

532 
£c
->
id
 = 
√w_˙t
 - 1;

533 
£c
->
£c_«me
 = sec_name;

535  
£c
;

536 
	}
}

538 
	$lökî_lﬂd_obj_fûe
(
bpf_lökî
 *
lökî
, c⁄° *
fûíame
,

539 c⁄° 
bpf_lökî_fûe_›ts
 *
›ts
,

540 
§c_obj
 *
obj
)

542 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


543 c⁄° 
ho°_ídü¬ess
 = 
ELFDATA2LSB
;

544 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


545 c⁄° 
ho°_ídü¬ess
 = 
ELFDATA2MSB
;

549 
îr
 = 0;

550 
Elf_S˙
 *
s˙
;

551 
Elf_D©a
 *
d©a
;

552 
Elf64_Ehdr
 *
ehdr
;

553 
Elf64_Shdr
 *
shdr
;

554 
§c_£c
 *
£c
;

556 
	`¥_debug
("lökî:áddög obje˘ fûê'%s'...\n", 
fûíame
);

558 
obj
->
fûíame
 = filename;

560 
obj
->
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
 | 
O_CLOEXEC
);

561 i‡(
obj
->
fd
 < 0) {

562 
îr
 = -
î∫o
;

563 
	`¥_w¨n
("ÁûedÅÿ›í fûê'%s': %d\n", 
fûíame
, 
îr
);

564  
îr
;

566 
obj
->
ñf
 = 
	`ñf_begö
(obj->
fd
, 
ELF_C_READ_MMAP
, 
NULL
);

567 i‡(!
obj
->
ñf
) {

568 
îr
 = -
î∫o
;

569 
	`¥_w¨n_ñf
("ÁûedÅÿ∑r£ ELF fûê'%s'", 
fûíame
);

570  
îr
;

574 
ehdr
 = 
	`ñf64_gëehdr
(
obj
->
ñf
);

575 i‡(!
ehdr
) {

576 
îr
 = -
î∫o
;

577 
	`¥_w¨n_ñf
("ÁûedÅÿgë ELF hódî f‹ %s", 
fûíame
);

578  
îr
;

580 i‡(
ehdr
->
e_idít
[
EI_DATA
] !
ho°_ídü¬ess
) {

581 
îr
 = -
EOPNOTSUPP
;

582 
	`¥_w¨n_ñf
("unsuµ‹ãd byã ordî o‡ELF fûê%s", 
fûíame
);

583  
îr
;

585 i‡(
ehdr
->
e_ty≥
 !
ET_REL


586 || 
ehdr
->
e_machöe
 !
EM_BPF


587 || 
ehdr
->
e_idít
[
EI_CLASS
] !
ELFCLASS64
) {

588 
îr
 = -
EOPNOTSUPP
;

589 
	`¥_w¨n_ñf
("unsuµ‹ãd köd o‡ELF fûê%s", 
fûíame
);

590  
îr
;

593 i‡(
	`ñf_gëshdr°∫dx
(
obj
->
ñf
, &obj->
sh°rs_£c_idx
)) {

594 
îr
 = -
î∫o
;

595 
	`¥_w¨n_ñf
("ÁûedÅÿgë SHSTRTAB se˘i⁄ index f‹ %s", 
fûíame
);

596  
îr
;

599 
s˙
 = 
NULL
;

600 (
s˙
 = 
	`ñf_√xts˙
(
obj
->
ñf
, s˙)Ë!
NULL
) {

601 
size_t
 
£c_idx
 = 
	`ñf_ndxs˙
(
s˙
);

602 c⁄° *
£c_«me
;

604 
shdr
 = 
	`ñf64_gëshdr
(
s˙
);

605 i‡(!
shdr
) {

606 
îr
 = -
î∫o
;

607 
	`¥_w¨n_ñf
("failedÅo get section #%zu header for %s",

608 
£c_idx
, 
fûíame
);

609  
îr
;

612 
£c_«me
 = 
	`ñf_°Ωå
(
obj
->
ñf
, obj->
sh°rs_£c_idx
, 
shdr
->
sh_«me
);

613 i‡(!
£c_«me
) {

614 
îr
 = -
î∫o
;

615 
	`¥_w¨n_ñf
("failedÅo get section #%zuÇame for %s",

616 
£c_idx
, 
fûíame
);

617  
îr
;

620 
d©a
 = 
	`ñf_gëd©a
(
s˙
, 0);

621 i‡(!
d©a
) {

622 
îr
 = -
î∫o
;

623 
	`¥_w¨n_ñf
("failedÅo get section #%zu (%s) data from %s",

624 
£c_idx
, 
£c_«me
, 
fûíame
);

625  
îr
;

628 
£c
 = 
	`add_§c_£c
(
obj
, 
£c_«me
);

629 i‡(!
£c
)

630  -
ENOMEM
;

632 
£c
->
s˙
 = scn;

633 
£c
->
shdr
 = shdr;

634 
£c
->
d©a
 = data;

635 
£c
->
£c_idx
 = 
	`ñf_ndxs˙
(
s˙
);

637 i‡(
	`is_ign‹ed_£c
(
£c
)) {

638 
£c
->
skù≥d
 = 
åue
;

642 
shdr
->
sh_ty≥
) {

643 
SHT_SYMTAB
:

644 i‡(
obj
->
symèb_£c_idx
) {

645 
îr
 = -
EOPNOTSUPP
;

646 
	`¥_w¨n
("multiple SYMTAB sections found,Çot supported\n");

647  
îr
;

649 
obj
->
symèb_£c_idx
 = 
£c_idx
;

651 
SHT_STRTAB
:

654 
SHT_PROGBITS
:

655 i‡(
	`°rcmp
(
£c_«me
, 
BTF_ELF_SEC
) == 0) {

656 
obj
->
btf
 = 
	`btf__√w
(
d©a
->
d_buf
, 
shdr
->
sh_size
);

657 
îr
 = 
	`libbpf_gë_îr‹
(
obj
->
btf
);

658 i‡(
îr
) {

659 
	`¥_w¨n
("ÁûedÅÿ∑r£ .BTF from %s: %d\n", 
fûíame
, 
îr
);

660  
îr
;

662 
£c
->
skù≥d
 = 
åue
;

665 i‡(
	`°rcmp
(
£c_«me
, 
BTF_EXT_ELF_SEC
) == 0) {

666 
obj
->
btf_ext
 = 
	`btf_ext__√w
(
d©a
->
d_buf
, 
shdr
->
sh_size
);

667 
îr
 = 
	`libbpf_gë_îr‹
(
obj
->
btf_ext
);

668 i‡(
îr
) {

669 
	`¥_w¨n
("ÁûedÅÿ∑r£ .BTF.exà‰om '%s': %d\n", 
fûíame
, 
îr
);

670  
îr
;

672 
£c
->
skù≥d
 = 
åue
;

678 
SHT_NOBITS
:

681 
SHT_REL
:

685 
	`¥_w¨n
("unrecognized section #%zu (%s) in %s\n",

686 
£c_idx
, 
£c_«me
, 
fûíame
);

687 
îr
 = -
EINVAL
;

688  
îr
;

692 
îr
 =Éº ?: 
	`lökî_ßnôy_check_ñf
(
obj
);

693 
îr
 =Éº ?: 
	`lökî_ßnôy_check_btf
(
obj
);

694 
îr
 =Éº ?: 
	`lökî_ßnôy_check_btf_ext
(
obj
);

695 
îr
 =Éº ?: 
	`lökî_fixup_btf
(
obj
);

697  
îr
;

698 
	}
}

700 
boﬁ
 
	$is_pow_of_2
(
size_t
 
x
)

702  
x
 && (x & (x - 1)) == 0;

703 
	}
}

705 
	$lökî_ßnôy_check_ñf
(
§c_obj
 *
obj
)

707 
§c_£c
 *
£c
;

708 
i
, 
îr
;

710 i‡(!
obj
->
symèb_£c_idx
) {

711 
	`¥_w¨n
("ELF i†missög SYMTAB se˘i⁄ i¿%s\n", 
obj
->
fûíame
);

712  -
EINVAL
;

714 i‡(!
obj
->
sh°rs_£c_idx
) {

715 
	`¥_w¨n
("ELF i†missög se˘i⁄ hódî†STRTAB se˘i⁄ i¿%s\n", 
obj
->
fûíame
);

716  -
EINVAL
;

719 
i
 = 1; i < 
obj
->
£c_˙t
; i++) {

720 
£c
 = &
obj
->
£cs
[
i
];

722 i‡(
£c
->
£c_«me
[0] == '\0') {

723 
	`¥_w¨n
("ELF se˘i⁄ #%zu ha†em±yÇamêö %s\n", 
£c
->
£c_idx
, 
obj
->
fûíame
);

724  -
EINVAL
;

727 i‡(
£c
->
shdr
->
sh_addølign
 && !
	`is_pow_of_2
(sec->shdr->sh_addralign))

728  -
EINVAL
;

729 i‡(
£c
->
shdr
->
sh_addølign
 !£c->
d©a
->
d_Æign
)

730  -
EINVAL
;

732 i‡(
£c
->
shdr
->
sh_size
 !£c->
d©a
->
d_size
)

733  -
EINVAL
;

735 
£c
->
shdr
->
sh_ty≥
) {

736 
SHT_SYMTAB
:

737 
îr
 = 
	`lökî_ßnôy_check_ñf_symèb
(
obj
, 
£c
);

738 i‡(
îr
)

739  
îr
;

741 
SHT_STRTAB
:

743 
SHT_PROGBITS
:

744 i‡(
£c
->
shdr
->
sh_Êags
 & 
SHF_EXECINSTR
) {

745 i‡(
£c
->
shdr
->
sh_size
 % (
bpf_ö¢
) != 0)

746  -
EINVAL
;

749 
SHT_NOBITS
:

751 
SHT_REL
:

752 
îr
 = 
	`lökî_ßnôy_check_ñf_ªlos
(
obj
, 
£c
);

753 i‡(
îr
)

754  
îr
;

756 
SHT_LLVM_ADDRSIG
:

759 
	`¥_w¨n
("ELF section #%zu (%s) has unrecognizedÅype %zu in %s\n",

760 
£c
->
£c_idx
, sec->
£c_«me
, (
size_t
)£c->
shdr
->
sh_ty≥
, 
obj
->
fûíame
);

761  -
EINVAL
;

766 
	}
}

768 
	$lökî_ßnôy_check_ñf_symèb
(
§c_obj
 *
obj
, 
§c_£c
 *
£c
)

770 
§c_£c
 *
lök_£c
;

771 
Elf64_Sym
 *
sym
;

772 
i
, 
n
;

774 i‡(
£c
->
shdr
->
sh_ítsize
 !(
Elf64_Sym
))

775  -
EINVAL
;

776 i‡(
£c
->
shdr
->
sh_size
 % sec->shdr->
sh_ítsize
 != 0)

777  -
EINVAL
;

779 i‡(!
£c
->
shdr
->
sh_lök
 || sec->shdr->sh_lök >
obj
->
£c_˙t
) {

780 
	`¥_w¨n
("ELF SYMTAB section #%zuÖointsÅo missing STRTAB section #%zu in %s\n",

781 
£c
->
£c_idx
, (
size_t
)£c->
shdr
->
sh_lök
, 
obj
->
fûíame
);

782  -
EINVAL
;

784 
lök_£c
 = &
obj
->
£cs
[
£c
->
shdr
->
sh_lök
];

785 i‡(
lök_£c
->
shdr
->
sh_ty≥
 !
SHT_STRTAB
) {

786 
	`¥_w¨n
("ELF SYMTAB section #%zuÖointsÅo invalid STRTAB section #%zu in %s\n",

787 
£c
->
£c_idx
, (
size_t
)£c->
shdr
->
sh_lök
, 
obj
->
fûíame
);

788  -
EINVAL
;

791 
n
 = 
£c
->
shdr
->
sh_size
 / sec->shdr->
sh_ítsize
;

792 
sym
 = 
£c
->
d©a
->
d_buf
;

793 
i
 = 0; i < 
n
; i++, 
sym
++) {

794 
sym_ty≥
 = 
	`ELF64_ST_TYPE
(
sym
->
°_öfo
);

795 
sym_böd
 = 
	`ELF64_ST_BIND
(
sym
->
°_öfo
);

796 
sym_vis
 = 
	`ELF64_ST_VISIBILITY
(
sym
->
°_Ÿhî
);

798 i‡(
i
 == 0) {

799 i‡(
sym
->
°_«me
 !0 || sym->
°_öfo
 != 0

800 || 
sym
->
°_Ÿhî
 !0 || sym->
°_shndx
 != 0

801 || 
sym
->
°_vÆue
 !0 || sym->
°_size
 != 0) {

802 
	`¥_w¨n
("ELF sym #0 i†övÆid i¿%s\n", 
obj
->
fûíame
);

803  -
EINVAL
;

807 i‡(
sym_böd
 !
STB_LOCAL
 && sym_böd !
STB_GLOBAL
 && sym_böd !
STB_WEAK
) {

808 
	`¥_w¨n
("ELF sym #%d in section #%zu has unsupported symbol binding %d\n",

809 
i
, 
£c
->
£c_idx
, 
sym_böd
);

810  -
EINVAL
;

812 i‡(
sym_vis
 !
STV_DEFAULT
 && sym_vi†!
STV_HIDDEN
) {

813 
	`¥_w¨n
("ELF sym #%d in section #%zu has unsupported symbol visibility %d\n",

814 
i
, 
£c
->
£c_idx
, 
sym_vis
);

815  -
EINVAL
;

817 i‡(
sym
->
°_shndx
 == 0) {

818 i‡(
sym_ty≥
 !
STT_NOTYPE
 || 
sym_böd
 =
STB_LOCAL


819 || 
sym
->
°_vÆue
 !0 || sym->
°_size
 != 0) {

820 
	`¥_w¨n
("ELF sym #%d is invalidÉxtern symbol in %s\n",

821 
i
, 
obj
->
fûíame
);

823  -
EINVAL
;

827 i‡(
sym
->
°_shndx
 < 
SHN_LORESERVE
 && sym->°_shndx >
obj
->
£c_˙t
) {

828 
	`¥_w¨n
("ELF sym #%d in section #%zuÖointsÅo missing section #%zu in %s\n",

829 
i
, 
£c
->
£c_idx
, (
size_t
)
sym
->
°_shndx
, 
obj
->
fûíame
);

830  -
EINVAL
;

832 i‡(
sym_ty≥
 =
STT_SECTION
) {

833 i‡(
sym
->
°_vÆue
 != 0)

834  -
EINVAL
;

840 
	}
}

842 
	$lökî_ßnôy_check_ñf_ªlos
(
§c_obj
 *
obj
, 
§c_£c
 *
£c
)

844 
§c_£c
 *
lök_£c
, *
sym_£c
;

845 
Elf64_Rñ
 *
ªlo
;

846 
i
, 
n
;

848 i‡(
£c
->
shdr
->
sh_ítsize
 !(
Elf64_Rñ
))

849  -
EINVAL
;

850 i‡(
£c
->
shdr
->
sh_size
 % sec->shdr->
sh_ítsize
 != 0)

851  -
EINVAL
;

854 i‡(
£c
->
shdr
->
sh_lök
 !
obj
->
symèb_£c_idx
) {

855 
	`¥_w¨n
("ELFÑelo section #%zuÖointsÅo invalid SYMTAB section #%zu in %s\n",

856 
£c
->
£c_idx
, (
size_t
)£c->
shdr
->
sh_lök
, 
obj
->
fûíame
);

857  -
EINVAL
;

861 i‡(!
£c
->
shdr
->
sh_öfo
 || sec->shdr->sh_öfÿ>
obj
->
£c_˙t
) {

862 
	`¥_w¨n
("ELFÑelo section #%zuÖointsÅo missing section #%zu in %s\n",

863 
£c
->
£c_idx
, (
size_t
)£c->
shdr
->
sh_öfo
, 
obj
->
fûíame
);

864  -
EINVAL
;

866 
lök_£c
 = &
obj
->
£cs
[
£c
->
shdr
->
sh_öfo
];

869 i‡(
	`°∫cmp
(
£c
->
£c_«me
, ".rel", (".rel") - 1) != 0

870 || 
	`°rcmp
(
£c
->
£c_«me
 + (".ªl"Ë- 1, 
lök_£c
->sec_name) != 0) {

871 
	`¥_w¨n
("ELFÑelo section #%zuÇame has invalidÇame in %s\n",

872 
£c
->
£c_idx
, 
obj
->
fûíame
);

873  -
EINVAL
;

877 i‡(
lök_£c
->
skù≥d
)

881 i‡(
lök_£c
->
shdr
->
sh_ty≥
 !
SHT_PROGBITS
 &&Üök_£c->shdr->sh_ty≥ !
SHT_NOBITS
) {

882 
	`¥_w¨n
("ELFÑelo section #%zuÖointsÅo invalid section #%zu in %s\n",

883 
£c
->
£c_idx
, (
size_t
)£c->
shdr
->
sh_öfo
, 
obj
->
fûíame
);

884  -
EINVAL
;

888 
n
 = 
£c
->
shdr
->
sh_size
 / sec->shdr->
sh_ítsize
;

889 
ªlo
 = 
£c
->
d©a
->
d_buf
;

890 
sym_£c
 = &
obj
->
£cs
[obj->
symèb_£c_idx
];

891 
i
 = 0; i < 
n
; i++, 
ªlo
++) {

892 
size_t
 
sym_idx
 = 
	`ELF64_R_SYM
(
ªlo
->
r_öfo
);

893 
size_t
 
sym_ty≥
 = 
	`ELF64_R_TYPE
(
ªlo
->
r_öfo
);

895 i‡(
sym_ty≥
 !
R_BPF_64_64
 && sym_ty≥ !
R_BPF_64_32
 &&

896 
sym_ty≥
 !
R_BPF_64_ABS64
 && sym_ty≥ !
R_BPF_64_ABS32
) {

897 
	`¥_w¨n
("ELFÑelo #%d in section #%zu has unexpectedÅype %zu in %s\n",

898 
i
, 
£c
->
£c_idx
, 
sym_ty≥
, 
obj
->
fûíame
);

899  -
EINVAL
;

902 i‡(!
sym_idx
 || sym_idx * (
Elf64_Sym
Ë>
sym_£c
->
shdr
->
sh_size
) {

903 
	`¥_w¨n
("ELFÑelo #%d in section #%zuÖointsÅo invalid symbol #%zu in %s\n",

904 
i
, 
£c
->
£c_idx
, 
sym_idx
, 
obj
->
fûíame
);

905  -
EINVAL
;

908 i‡(
lök_£c
->
shdr
->
sh_Êags
 & 
SHF_EXECINSTR
) {

909 i‡(
ªlo
->
r_off£t
 % (
bpf_ö¢
) != 0) {

910 
	`¥_w¨n
("ELFÑelo #%d in section #%zuÖointsÅo missing symbol #%zu in %s\n",

911 
i
, 
£c
->
£c_idx
, 
sym_idx
, 
obj
->
fûíame
);

912  -
EINVAL
;

918 
	}
}

920 
	$check_btf_ty≥_id
(
__u32
 *
ty≥_id
, *
˘x
)

922 
btf
 *bt‡
˘x
;

924 i‡(*
ty≥_id
 >
	`btf__ty≥_˙t
(
btf
))

925  -
EINVAL
;

928 
	}
}

930 
	$check_btf_°r_off
(
__u32
 *
°r_off
, *
˘x
)

932 
btf
 *bt‡
˘x
;

933 c⁄° *
s
;

935 
s
 = 
	`btf__°r_by_off£t
(
btf
, *
°r_off
);

937 i‡(!
s
)

938  -
EINVAL
;

941 
	}
}

943 
	$lökî_ßnôy_check_btf
(
§c_obj
 *
obj
)

945 
btf_ty≥
 *
t
;

946 
i
, 
n
, 
îr
 = 0;

948 i‡(!
obj
->
btf
)

951 
n
 = 
	`btf__ty≥_˙t
(
obj
->
btf
);

952 
i
 = 1; i < 
n
; i++) {

953 
t
 = 
	`btf_ty≥_by_id
(
obj
->
btf
, 
i
);

955 
îr
 =Éº ?: 
	`btf_ty≥_visô_ty≥_ids
(
t
, 
check_btf_ty≥_id
, 
obj
->
btf
);

956 
îr
 =Éº ?: 
	`btf_ty≥_visô_°r_offs
(
t
, 
check_btf_°r_off
, 
obj
->
btf
);

957 i‡(
îr
)

958  
îr
;

962 
	}
}

964 
	$lökî_ßnôy_check_btf_ext
(
§c_obj
 *
obj
)

966 
îr
 = 0;

968 i‡(!
obj
->
btf_ext
)

972 i‡(!
obj
->
btf
)

973  -
EINVAL
;

975 
îr
 =Éº ?: 
	`btf_ext_visô_ty≥_ids
(
obj
->
btf_ext
, 
check_btf_ty≥_id
, obj->
btf
);

976 
îr
 =Éº ?: 
	`btf_ext_visô_°r_offs
(
obj
->
btf_ext
, 
check_btf_°r_off
, obj->
btf
);

977 i‡(
îr
)

978  
îr
;

981 
	}
}

983 
	$öô_£c
(
bpf_lökî
 *
lökî
, 
d°_£c
 *d°_£c, 
§c_£c
 *src_sec)

985 
Elf_S˙
 *
s˙
;

986 
Elf_D©a
 *
d©a
;

987 
Elf64_Shdr
 *
shdr
;

988 
«me_off
;

990 
d°_£c
->
£c_sz
 = 0;

991 
d°_£c
->
£c_idx
 = 0;

992 
d°_£c
->
ïhemîÆ
 = 
§c_£c
->ephemeral;

995 i‡(
§c_£c
->
ïhemîÆ
)

998 
s˙
 = 
	`ñf_√ws˙
(
lökî
->
ñf
);

999 i‡(!
s˙
)

1000  -
ENOMEM
;

1001 
d©a
 = 
	`ñf_√wd©a
(
s˙
);

1002 i‡(!
d©a
)

1003  -
ENOMEM
;

1004 
shdr
 = 
	`ñf64_gëshdr
(
s˙
);

1005 i‡(!
shdr
)

1006  -
ENOMEM
;

1008 
d°_£c
->
s˙
 = scn;

1009 
d°_£c
->
shdr
 = shdr;

1010 
d°_£c
->
d©a
 = data;

1011 
d°_£c
->
£c_idx
 = 
	`ñf_ndxs˙
(
s˙
);

1013 
«me_off
 = 
	`°r£t__add_°r
(
lökî
->
°πab_°rs
, 
§c_£c
->
£c_«me
);

1014 i‡(
«me_off
 < 0)

1015  
«me_off
;

1017 
shdr
->
sh_«me
 = 
«me_off
;

1018 
shdr
->
sh_ty≥
 = 
§c_£c
->shdr->sh_type;

1019 
shdr
->
sh_Êags
 = 
§c_£c
->shdr->sh_flags;

1020 
shdr
->
sh_size
 = 0;

1025 
shdr
->
sh_lök
 = 0;

1026 
shdr
->
sh_öfo
 = 0;

1027 
shdr
->
sh_addølign
 = 
§c_£c
->shdr->sh_addralign;

1028 
shdr
->
sh_ítsize
 = 
§c_£c
->shdr->sh_entsize;

1030 
d©a
->
d_ty≥
 = 
§c_£c
->data->d_type;

1031 
d©a
->
d_size
 = 0;

1032 
d©a
->
d_buf
 = 
NULL
;

1033 
d©a
->
d_Æign
 = 
§c_£c
->data->d_align;

1034 
d©a
->
d_off
 = 0;

1037 
	}
}

1039 
d°_£c
 *
	$föd_d°_£c_by_«me
(
bpf_lökî
 *
lökî
, c⁄° *
£c_«me
)

1041 
d°_£c
 *
£c
;

1042 
i
;

1044 
i
 = 1; i < 
lökî
->
£c_˙t
; i++) {

1045 
£c
 = &
lökî
->
£cs
[
i
];

1047 i‡(
	`°rcmp
(
£c
->
£c_«me
, sec_name) == 0)

1048  
£c
;

1051  
NULL
;

1052 
	}
}

1054 
boﬁ
 
	$£cs_m©ch
(
d°_£c
 *
d°
, 
§c_£c
 *
§c
)

1056 i‡(
d°
->
ïhemîÆ
 || 
§c
->ephemeral)

1057  
åue
;

1059 i‡(
d°
->
shdr
->
sh_ty≥
 !
§c
->shdr->sh_type) {

1060 
	`¥_w¨n
("£¯%†ty≥†mism©ch\n", 
d°
->
£c_«me
);

1061  
Ál£
;

1063 i‡(
d°
->
shdr
->
sh_Êags
 !
§c
->shdr->sh_flags) {

1064 
	`¥_w¨n
("£¯%†Êag†mism©ch\n", 
d°
->
£c_«me
);

1065  
Ál£
;

1067 i‡(
d°
->
shdr
->
sh_ítsize
 !
§c
->shdr->sh_entsize) {

1068 
	`¥_w¨n
("£¯%†ítsizêmism©ch\n", 
d°
->
£c_«me
);

1069  
Ál£
;

1072  
åue
;

1073 
	}
}

1075 
boﬁ
 
	$£c_c⁄ã¡_is_ßme
(
d°_£c
 *d°_£c, 
§c_£c
 *src_sec)

1077 i‡(
d°_£c
->
£c_sz
 !
§c_£c
->
shdr
->
sh_size
)

1078  
Ál£
;

1079 i‡(
	`memcmp
(
d°_£c
->
øw_d©a
, 
§c_£c
->
d©a
->
d_buf
, d°_£c->
£c_sz
) != 0)

1080  
Ál£
;

1081  
åue
;

1082 
	}
}

1084 
	$exãnd_£c
(
bpf_lökî
 *
lökî
, 
d°_£c
 *
d°
, 
§c_£c
 *
§c
)

1086 *
tmp
;

1087 
size_t
 
d°_Æign
, 
§c_Æign
;

1088 
size_t
 
d°_Æign_sz
, 
d°_föÆ_sz
;

1089 
îr
;

1094 i‡(
§c
->
ïhemîÆ
)

1103 i‡(
d°
->
ïhemîÆ
) {

1104 
îr
 = 
	`öô_£c
(
lökî
, 
d°
, 
§c
);

1105 i‡(
îr
)

1106  
îr
;

1109 
d°_Æign
 = 
d°
->
shdr
->
sh_addølign
;

1110 
§c_Æign
 = 
§c
->
shdr
->
sh_addølign
;

1111 i‡(
d°_Æign
 == 0)

1112 
d°_Æign
 = 1;

1113 i‡(
d°_Æign
 < 
§c_Æign
)

1114 
d°_Æign
 = 
§c_Æign
;

1116 
d°_Æign_sz
 = (
d°
->
£c_sz
 + 
d°_Æign
 - 1) / dst_align * dst_align;

1119 
d°_föÆ_sz
 = 
d°_Æign_sz
 + 
§c
->
shdr
->
sh_size
;

1121 i‡(
§c
->
shdr
->
sh_ty≥
 !
SHT_NOBITS
) {

1122 
tmp
 = 
	`ªÆloc
(
d°
->
øw_d©a
, 
d°_föÆ_sz
);

1123 i‡(!
tmp
)

1124  -
ENOMEM
;

1125 
d°
->
øw_d©a
 = 
tmp
;

1128 
	`mem£t
(
d°
->
øw_d©a
 + d°->
£c_sz
, 0, 
d°_Æign_sz
 - dst->sec_sz);

1130 
	`mem˝y
(
d°
->
øw_d©a
 + 
d°_Æign_sz
, 
§c
->
d©a
->
d_buf
, src->
shdr
->
sh_size
);

1133 
d°
->
£c_sz
 = 
d°_föÆ_sz
;

1134 
d°
->
shdr
->
sh_size
 = 
d°_föÆ_sz
;

1135 
d°
->
d©a
->
d_size
 = 
d°_föÆ_sz
;

1137 
d°
->
shdr
->
sh_addølign
 = 
d°_Æign
;

1138 
d°
->
d©a
->
d_Æign
 = 
d°_Æign
;

1140 
§c
->
d°_off
 = 
d°_Æign_sz
;

1143 
	}
}

1145 
boﬁ
 
	$is_d©a_£c
(
§c_£c
 *
£c
)

1147 i‡(!
£c
 || sec->
skù≥d
)

1148  
Ál£
;

1150 i‡(
£c
->
ïhemîÆ
)

1151  
åue
;

1152  
£c
->
shdr
->
sh_ty≥
 =
SHT_PROGBITS
 || sec->shdr->sh_ty≥ =
SHT_NOBITS
;

1153 
	}
}

1155 
boﬁ
 
	$is_ªlo_£c
(
§c_£c
 *
£c
)

1157 i‡(!
£c
 || sec->
skù≥d
 || sec->
ïhemîÆ
)

1158  
Ál£
;

1159  
£c
->
shdr
->
sh_ty≥
 =
SHT_REL
;

1160 
	}
}

1162 
	$lökî_≠≥nd_£c_d©a
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
)

1164 
i
, 
îr
;

1166 
i
 = 1; i < 
obj
->
£c_˙t
; i++) {

1167 
§c_£c
 *src_sec;

1168 
d°_£c
 *dst_sec;

1170 
§c_£c
 = &
obj
->
£cs
[
i
];

1171 i‡(!
	`is_d©a_£c
(
§c_£c
))

1174 
d°_£c
 = 
	`föd_d°_£c_by_«me
(
lökî
, 
§c_£c
->
£c_«me
);

1175 i‡(!
d°_£c
) {

1176 
d°_£c
 = 
	`add_d°_£c
(
lökî
, 
§c_£c
->
£c_«me
);

1177 i‡(!
d°_£c
)

1178  -
ENOMEM
;

1179 
îr
 = 
	`öô_£c
(
lökî
, 
d°_£c
, 
§c_£c
);

1180 i‡(
îr
) {

1181 
	`¥_w¨n
("ÁûedÅÿöô se˘i⁄ '%s'\n", 
§c_£c
->
£c_«me
);

1182  
îr
;

1185 i‡(!
	`£cs_m©ch
(
d°_£c
, 
§c_£c
)) {

1186 
	`¥_w¨n
("ELF se˘i⁄†%†¨êöcom∑tibÀ\n", 
§c_£c
->
£c_«me
);

1191 i‡(
	`°rcmp
(
§c_£c
->
£c_«me
, "license") == 0

1192 || 
	`°rcmp
(
§c_£c
->
£c_«me
, "version") == 0) {

1193 i‡(!
	`£c_c⁄ã¡_is_ßme
(
d°_£c
, 
§c_£c
)) {

1194 
	`¥_w¨n
("n⁄-idítiˇ»c⁄ã¡†o‡£˘i⁄ '%s'áªÇŸ suµ‹ãd\n", 
§c_£c
->
£c_«me
);

1195  -
EINVAL
;

1197 
§c_£c
->
skù≥d
 = 
åue
;

1198 
§c_£c
->
d°_id
 = 
d°_£c
->
id
;

1204 
§c_£c
->
d°_id
 = 
d°_£c
->
id
;

1206 
îr
 = 
	`exãnd_£c
(
lökî
, 
d°_£c
, 
§c_£c
);

1207 i‡(
îr
)

1208  
îr
;

1212 
	}
}

1214 
	$lökî_≠≥nd_ñf_syms
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
)

1216 
§c_£c
 *
symèb
 = &
obj
->
£cs
[obj->
symèb_£c_idx
];

1217 
Elf64_Sym
 *
sym
 = 
symèb
->
d©a
->
d_buf
;

1218 
i
, 
n
 = 
symèb
->
shdr
->
sh_size
 / symèb->shdr->
sh_ítsize
, 
îr
;

1219 
°r_£c_idx
 = 
symèb
->
shdr
->
sh_lök
;

1220 c⁄° *
sym_«me
;

1222 
obj
->
sym_m≠
 = 
	`ˇŒoc
(
n
 + 1, (*obj->sym_map));

1223 i‡(!
obj
->
sym_m≠
)

1224  -
ENOMEM
;

1226 
i
 = 0; i < 
n
; i++, 
sym
++) {

1230 i‡(
i
 == 0)

1233 
sym_«me
 = 
	`ñf_°Ωå
(
obj
->
ñf
, 
°r_£c_idx
, 
sym
->
°_«me
);

1234 i‡(!
sym_«me
) {

1235 
	`¥_w¨n
("ˇn'à„tch symbﬁÇamêf‹ symbﬁ #%d i¿'%s'\n", 
i
, 
obj
->
fûíame
);

1236  -
EINVAL
;

1239 
îr
 = 
	`lökî_≠≥nd_ñf_sym
(
lökî
, 
obj
, 
sym
, 
sym_«me
, 
i
);

1240 i‡(
îr
)

1241  
îr
;

1245 
	}
}

1247 
Elf64_Sym
 *
	$gë_sym_by_idx
(
bpf_lökî
 *
lökî
, 
size_t
 
sym_idx
)

1249 
d°_£c
 *
symèb
 = &
lökî
->
£cs
[lökî->
symèb_£c_idx
];

1250 
Elf64_Sym
 *
syms
 = 
symèb
->
øw_d©a
;

1252  &
syms
[
sym_idx
];

1253 
	}
}

1255 
glob_sym
 *
	$föd_glob_sym
(
bpf_lökî
 *
lökî
, c⁄° *
sym_«me
)

1257 
glob_sym
 *glob_sym;

1258 c⁄° *
«me
;

1259 
i
;

1261 
i
 = 0; i < 
lökî
->
glob_sym_˙t
; i++) {

1262 
glob_sym
 = &
lökî
->
glob_syms
[
i
];

1263 
«me
 = 
	`°r£t__d©a
(
lökî
->
°πab_°rs
Ë+ 
glob_sym
->
«me_off
;

1265 i‡(
	`°rcmp
(
«me
, 
sym_«me
) == 0)

1266  
glob_sym
;

1269  
NULL
;

1270 
	}
}

1272 
glob_sym
 *
	$add_glob_sym
(
bpf_lökî
 *
lökî
)

1274 
glob_sym
 *
syms
, *
sym
;

1276 
syms
 = 
	`libbpf_ªÆloˇºay
(
lökî
->
glob_syms
,Üökî->
glob_sym_˙t
 + 1,

1277 (*
lökî
->
glob_syms
));

1278 i‡(!
syms
)

1279  
NULL
;

1281 
sym
 = &
syms
[
lökî
->
glob_sym_˙t
];

1282 
	`mem£t
(
sym
, 0, (*sym));

1283 
sym
->
v¨_idx
 = -1;

1285 
lökî
->
glob_syms
 = 
syms
;

1286 
lökî
->
glob_sym_˙t
++;

1288  
sym
;

1289 
	}
}

1291 
boﬁ
 
	$glob_sym_btf_m©ches
(c⁄° *
sym_«me
, 
boﬁ
 
exa˘
,

1292 c⁄° 
btf
 *
btf1
, 
__u32
 
id1
,

1293 c⁄° 
btf
 *
btf2
, 
__u32
 
id2
)

1295 c⁄° 
btf_ty≥
 *
t1
, *
t2
;

1296 
boﬁ
 
is_°©ic1
, 
is_°©ic2
;

1297 c⁄° *
n1
, *
n2
;

1298 
i
, 
n
;

1300 
ªcur
:

1301 
n1
 = 
n2
 = 
NULL
;

1302 
t1
 = 
	`skù_mods_™d_ty≥defs
(
btf1
, 
id1
, &id1);

1303 
t2
 = 
	`skù_mods_™d_ty≥defs
(
btf2
, 
id2
, &id2);

1306 i‡(!
exa˘
 && 
	`btf_is_fwd
(
t1
Ë!btf_is_fwd(
t2
)) {

1307 
n1
 = 
	`btf__°r_by_off£t
(
btf1
, 
t1
->
«me_off
);

1308 
n2
 = 
	`btf__°r_by_off£t
(
btf2
, 
t2
->
«me_off
);

1309 i‡(
	`°rcmp
(
n1
, 
n2
) != 0) {

1310 
	`¥_w¨n
("global '%s': incompatible forward declarationÇames '%s'ánd '%s'\n",

1311 
sym_«me
, 
n1
, 
n2
);

1312  
Ál£
;

1315 i‡(
	`btf_is_fwd
(
t1
)) {

1316 i‡(
	`btf_kÊag
(
t1
Ë&& 
	`btf_is_uni⁄
(
t2
))

1317  
åue
;

1318 i‡(!
	`btf_kÊag
(
t1
Ë&& 
	`btf_is_°ru˘
(
t2
))

1319  
åue
;

1320 
	`¥_w¨n
("global '%s': incompatible %s forward declarationánd concrete kind %s\n",

1321 
sym_«me
, 
	`btf_kÊag
(
t1
Ë? "uni⁄" : "°ru˘", 
	`btf_köd_°r
(
t2
));

1323 i‡(
	`btf_kÊag
(
t2
Ë&& 
	`btf_is_uni⁄
(
t1
))

1324  
åue
;

1325 i‡(!
	`btf_kÊag
(
t2
Ë&& 
	`btf_is_°ru˘
(
t1
))

1326  
åue
;

1327 
	`¥_w¨n
("global '%s': incompatible %s forward declarationánd concrete kind %s\n",

1328 
sym_«me
, 
	`btf_kÊag
(
t2
Ë? "uni⁄" : "°ru˘", 
	`btf_köd_°r
(
t1
));

1330  
Ál£
;

1333 i‡(
	`btf_köd
(
t1
Ë!btf_köd(
t2
)) {

1334 
	`¥_w¨n
("global '%s': incompatible BTF kinds %sánd %s\n",

1335 
sym_«me
, 
	`btf_köd_°r
(
t1
), btf_köd_°r(
t2
));

1336  
Ál£
;

1339 
	`btf_köd
(
t1
)) {

1340 
BTF_KIND_STRUCT
:

1341 
BTF_KIND_UNION
:

1342 
BTF_KIND_ENUM
:

1343 
BTF_KIND_FWD
:

1344 
BTF_KIND_FUNC
:

1345 
BTF_KIND_VAR
:

1346 
n1
 = 
	`btf__°r_by_off£t
(
btf1
, 
t1
->
«me_off
);

1347 
n2
 = 
	`btf__°r_by_off£t
(
btf2
, 
t2
->
«me_off
);

1348 i‡(
	`°rcmp
(
n1
, 
n2
) != 0) {

1349 
	`¥_w¨n
("global '%s': incompatible %sÇames '%s'ánd '%s'\n",

1350 
sym_«me
, 
	`btf_köd_°r
(
t1
), 
n1
, 
n2
);

1351  
Ál£
;

1358 
	`btf_köd
(
t1
)) {

1359 
BTF_KIND_UNKN
:

1360 
BTF_KIND_FWD
:

1361  
åue
;

1362 
BTF_KIND_INT
:

1363 
BTF_KIND_FLOAT
:

1364 
BTF_KIND_ENUM
:

1366 i‡(
t1
->
size
 !
t2
->size) {

1367 
	`¥_w¨n
("global '%s': incompatible %s '%s' size %uánd %u\n",

1368 
sym_«me
, 
	`btf_köd_°r
(
t1
), 
n1
,Å1->
size
, 
t2
->size);

1369  
Ál£
;

1371  
åue
;

1372 
BTF_KIND_PTR
:

1377 
exa˘
 = 
Ál£
;

1378 
id1
 = 
t1
->
ty≥
;

1379 
id2
 = 
t2
->
ty≥
;

1380 
ªcur
;

1381 
BTF_KIND_ARRAY
:

1383 
id1
 = 
	`btf_¨øy
(
t1
)->
ty≥
;

1384 
id2
 = 
	`btf_¨øy
(
t2
)->
ty≥
;

1385 
ªcur
;

1386 
BTF_KIND_FUNC
:

1388 
is_°©ic1
 = 
	`btf_func_lökage
(
t1
Ë=
BTF_FUNC_STATIC
;

1389 
is_°©ic2
 = 
	`btf_func_lökage
(
t2
Ë=
BTF_FUNC_STATIC
;

1390 i‡(
is_°©ic1
 !
is_°©ic2
) {

1391 
	`¥_w¨n
("globÆ '%s': incom∑tibÀ fun¯'%s'Üökage\n", 
sym_«me
, 
n1
);

1392  
Ál£
;

1395 
id1
 = 
t1
->
ty≥
;

1396 
id2
 = 
t2
->
ty≥
;

1397 
ªcur
;

1398 
BTF_KIND_VAR
:

1400 
is_°©ic1
 = 
	`btf_v¨
(
t1
)->
lökage
 =
BTF_VAR_STATIC
;

1401 
is_°©ic2
 = 
	`btf_v¨
(
t2
)->
lökage
 =
BTF_VAR_STATIC
;

1402 i‡(
is_°©ic1
 !
is_°©ic2
) {

1403 
	`¥_w¨n
("globÆ '%s': incom∑tibÀ v¨ '%s'Üökage\n", 
sym_«me
, 
n1
);

1404  
Ál£
;

1407 
id1
 = 
t1
->
ty≥
;

1408 
id2
 = 
t2
->
ty≥
;

1409 
ªcur
;

1410 
BTF_KIND_STRUCT
:

1411 
BTF_KIND_UNION
: {

1412 c⁄° 
btf_membî
 *
m1
, *
m2
;

1414 i‡(!
exa˘
)

1415  
åue
;

1417 i‡(
	`btf_vÀn
(
t1
Ë!btf_vÀn(
t2
)) {

1418 
	`¥_w¨n
("global '%s': incompatibleÇumber of %s fields %uánd %u\n",

1419 
sym_«me
, 
	`btf_köd_°r
(
t1
), 
	`btf_vÀn
—1), btf_vÀn(
t2
));

1420  
Ál£
;

1423 
n
 = 
	`btf_vÀn
(
t1
);

1424 
m1
 = 
	`btf_membîs
(
t1
);

1425 
m2
 = 
	`btf_membîs
(
t2
);

1426 
i
 = 0; i < 
n
; i++, 
m1
++, 
m2
++) {

1427 
n1
 = 
	`btf__°r_by_off£t
(
btf1
, 
m1
->
«me_off
);

1428 
n2
 = 
	`btf__°r_by_off£t
(
btf2
, 
m2
->
«me_off
);

1429 i‡(
	`°rcmp
(
n1
, 
n2
) != 0) {

1430 
	`¥_w¨n
("global '%s': incompatible field #%dÇames '%s'ánd '%s'\n",

1431 
sym_«me
, 
i
, 
n1
, 
n2
);

1432  
Ál£
;

1434 i‡(
m1
->
off£t
 !
m2
->offset) {

1435 
	`¥_w¨n
("global '%s': incompatible field #%d ('%s') offsets\n",

1436 
sym_«me
, 
i
, 
n1
);

1437  
Ál£
;

1439 i‡(!
	`glob_sym_btf_m©ches
(
sym_«me
, 
exa˘
, 
btf1
, 
m1
->
ty≥
, 
btf2
, 
m2
->type))

1440  
Ál£
;

1443  
åue
;

1445 
BTF_KIND_FUNC_PROTO
: {

1446 c⁄° 
btf_∑øm
 *
m1
, *
m2
;

1448 i‡(
	`btf_vÀn
(
t1
Ë!btf_vÀn(
t2
)) {

1449 
	`¥_w¨n
("global '%s': incompatibleÇumber of %sÖarams %uánd %u\n",

1450 
sym_«me
, 
	`btf_köd_°r
(
t1
), 
	`btf_vÀn
—1), btf_vÀn(
t2
));

1451  
Ál£
;

1454 
n
 = 
	`btf_vÀn
(
t1
);

1455 
m1
 = 
	`btf_∑øms
(
t1
);

1456 
m2
 = 
	`btf_∑øms
(
t2
);

1457 
i
 = 0; i < 
n
; i++, 
m1
++, 
m2
++) {

1459 i‡(!
	`glob_sym_btf_m©ches
(
sym_«me
, 
exa˘
, 
btf1
, 
m1
->
ty≥
, 
btf2
, 
m2
->type))

1460  
Ál£
;

1464 
id1
 = 
t1
->
ty≥
;

1465 
id2
 = 
t2
->
ty≥
;

1466 
ªcur
;

1470 
BTF_KIND_TYPEDEF
:

1471 
BTF_KIND_VOLATILE
:

1472 
BTF_KIND_CONST
:

1473 
BTF_KIND_RESTRICT
:

1475 
BTF_KIND_DATASEC
:

1477 
	`¥_w¨n
("global '%s': unsupported BTF kind %s\n",

1478 
sym_«me
, 
	`btf_köd_°r
(
t1
));

1479  
Ál£
;

1481 
	}
}

1483 
boﬁ
 
	$m≠_defs_m©ch
(c⁄° *
sym_«me
,

1484 c⁄° 
btf
 *
maö_btf
,

1485 c⁄° 
btf_m≠_def
 *
maö_def
,

1486 c⁄° 
btf_m≠_def
 *
maö_ö√r_def
,

1487 c⁄° 
btf
 *
exåa_btf
,

1488 c⁄° 
btf_m≠_def
 *
exåa_def
,

1489 c⁄° 
btf_m≠_def
 *
exåa_ö√r_def
)

1491 c⁄° *
ªas⁄
;

1493 i‡(
maö_def
->
m≠_ty≥
 !
exåa_def
->map_type) {

1494 
ªas⁄
 = "type";

1495 
mism©ch
;

1499 i‡(
maö_def
->
key_size
 !
exåa_def
->key_size) {

1500 
ªas⁄
 = "key_size";

1501 
mism©ch
;

1503 i‡(!!
maö_def
->
key_ty≥_id
 !!!
exåa_def
->key_type_id) {

1504 
ªas⁄
 = "keyÅype";

1505 
mism©ch
;

1507 i‡((
maö_def
->
∑πs
 & 
MAP_DEF_KEY_TYPE
)

1508 && !
	`glob_sym_btf_m©ches
(
sym_«me
, 
åue
 ,

1509 
maö_btf
, 
maö_def
->
key_ty≥_id
,

1510 
exåa_btf
, 
exåa_def
->
key_ty≥_id
)) {

1511 
ªas⁄
 = "keyÅype";

1512 
mism©ch
;

1516 i‡(
maö_def
->
vÆue_size
 !
exåa_def
->value_size) {

1517 
ªas⁄
 = "value_size";

1518 
mism©ch
;

1520 i‡(!!
maö_def
->
vÆue_ty≥_id
 !!!
exåa_def
->value_type_id) {

1521 
ªas⁄
 = "valueÅype";

1522 
mism©ch
;

1524 i‡((
maö_def
->
∑πs
 & 
MAP_DEF_VALUE_TYPE
)

1525 && !
	`glob_sym_btf_m©ches
(
sym_«me
, 
åue
 ,

1526 
maö_btf
, 
maö_def
->
vÆue_ty≥_id
,

1527 
exåa_btf
, 
exåa_def
->
vÆue_ty≥_id
)) {

1528 
ªas⁄
 = "keyÅype";

1529 
mism©ch
;

1532 i‡(
maö_def
->
max_íåõs
 !
exåa_def
->max_entries) {

1533 
ªas⁄
 = "max_entries";

1534 
mism©ch
;

1536 i‡(
maö_def
->
m≠_Êags
 !
exåa_def
->map_flags) {

1537 
ªas⁄
 = "map_flags";

1538 
mism©ch
;

1540 i‡(
maö_def
->
numa_node
 !
exåa_def
->numa_node) {

1541 
ªas⁄
 = "numa_node";

1542 
mism©ch
;

1544 i‡(
maö_def
->
pönög
 !
exåa_def
->pinning) {

1545 
ªas⁄
 = "pinning";

1546 
mism©ch
;

1549 i‡((
maö_def
->
∑πs
 & 
MAP_DEF_INNER_MAP
Ë!(
exåa_def
->parts & MAP_DEF_INNER_MAP)) {

1550 
ªas⁄
 = "inner map";

1551 
mism©ch
;

1554 i‡(
maö_def
->
∑πs
 & 
MAP_DEF_INNER_MAP
) {

1555 
ö√r_m≠_«me
[128];

1557 
	`¢¥ötf
(
ö√r_m≠_«me
, (ö√r_m≠_«me), "%s.ö√r", 
sym_«me
);

1559  
	`m≠_defs_m©ch
(
ö√r_m≠_«me
,

1560 
maö_btf
, 
maö_ö√r_def
, 
NULL
,

1561 
exåa_btf
, 
exåa_ö√r_def
, 
NULL
);

1564  
åue
;

1566 
mism©ch
:

1567 
	`¥_w¨n
("globÆ '%s': m≠ %†mism©ch\n", 
sym_«me
, 
ªas⁄
);

1568  
Ál£
;

1569 
	}
}

1571 
boﬁ
 
	$glob_m≠_defs_m©ch
(c⁄° *
sym_«me
,

1572 
bpf_lökî
 *
lökî
, 
glob_sym
 *glob_sym,

1573 
§c_obj
 *
obj
, 
Elf64_Sym
 *
sym
, 
btf_id
)

1575 
btf_m≠_def
 
d°_def
 = {}, 
d°_ö√r_def
 = {};

1576 
btf_m≠_def
 
§c_def
 = {}, 
§c_ö√r_def
 = {};

1577 c⁄° 
btf_ty≥
 *
t
;

1578 
îr
;

1580 
t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
btf_id
);

1581 i‡(!
	`btf_is_v¨
(
t
)) {

1582 
	`¥_w¨n
("globÆ '%s': invÆid m≠ deföôi⁄Åy≥ [%d]\n", 
sym_«me
, 
btf_id
);

1583  
Ál£
;

1585 
t
 = 
	`skù_mods_™d_ty≥defs
(
obj
->
btf
,Å->
ty≥
, 
NULL
);

1587 
îr
 = 
	`∑r£_btf_m≠_def
(
sym_«me
, 
obj
->
btf
, 
t
, 
åue
 , &
§c_def
, &
§c_ö√r_def
);

1588 i‡(
îr
) {

1589 
	`¥_w¨n
("globÆ '%s': invÆid m≠ deföôi⁄\n", 
sym_«me
);

1590  
Ál£
;

1594 
t
 = 
	`btf__ty≥_by_id
(
lökî
->
btf
, 
glob_sym
->
btf_id
);

1595 
t
 = 
	`skù_mods_™d_ty≥defs
(
lökî
->
btf
,Å->
ty≥
, 
NULL
);

1596 
îr
 = 
	`∑r£_btf_m≠_def
(
sym_«me
, 
lökî
->
btf
, 
t
, 
åue
 , &
d°_def
, &
d°_ö√r_def
);

1597 i‡(
îr
) {

1599 
	`¥_w¨n
("globÆ '%s': invÆid d° m≠ deföôi⁄\n", 
sym_«me
);

1600  
Ál£
;

1607  
	`m≠_defs_m©ch
(
sym_«me
, 
lökî
->
btf
, &
d°_def
, &
d°_ö√r_def
,

1608 
obj
->
btf
, &
§c_def
, &
§c_ö√r_def
);

1609 
	}
}

1611 
boﬁ
 
	$glob_syms_m©ch
(c⁄° *
sym_«me
,

1612 
bpf_lökî
 *
lökî
, 
glob_sym
 *glob_sym,

1613 
§c_obj
 *
obj
, 
Elf64_Sym
 *
sym
, 
size_t
 
sym_idx
, 
btf_id
)

1615 c⁄° 
btf_ty≥
 *
§c_t
;

1620 i‡(!
glob_sym
->
btf_id
 || !btf_id) {

1621 
	`¥_w¨n
("BTF infÿi†missög f‹ globÆ symbﬁ '%s'\n", 
sym_«me
);

1622  
Ál£
;

1625 
§c_t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
btf_id
);

1626 i‡(!
	`btf_is_v¨
(
§c_t
Ë&& !
	`btf_is_func
(src_t)) {

1627 
	`¥_w¨n
("onlyÉxtern variablesánd functionsáre supported, but got '%s' for '%s'\n",

1628 
	`btf_köd_°r
(
§c_t
), 
sym_«me
);

1629  
Ál£
;

1633 i‡(
glob_sym
->
£c_id
 && 
	`°rcmp
(
lökî
->
£cs
[glob_sym->£c_id].
£c_«me
, 
MAPS_ELF_SEC
) == 0)

1634  
	`glob_m≠_defs_m©ch
(
sym_«me
, 
lökî
, 
glob_sym
, 
obj
, 
sym
, 
btf_id
);

1636 i‡(!
	`glob_sym_btf_m©ches
(
sym_«me
, 
åue
 ,

1637 
lökî
->
btf
, 
glob_sym
->
btf_id
, 
obj
->btf, btf_id))

1638  
Ál£
;

1640  
åue
;

1641 
	}
}

1643 
boﬁ
 
	$btf_is_n⁄_°©ic
(c⁄° 
btf_ty≥
 *
t
)

1645  (
	`btf_is_v¨
(
t
Ë&& 
	`btf_v¨
—)->
lökage
 !
BTF_VAR_STATIC
)

1646 || (
	`btf_is_func
(
t
Ë&& 
	`btf_func_lökage
—Ë!
BTF_FUNC_STATIC
);

1647 
	}
}

1649 
	$föd_glob_sym_btf
(
§c_obj
 *
obj
, 
Elf64_Sym
 *
sym
, c⁄° *
sym_«me
,

1650 *
out_btf_£c_id
, *
out_btf_id
)

1652 
i
, 
j
, 
n
, 
m
, 
btf_id
 = 0;

1653 c⁄° 
btf_ty≥
 *
t
;

1654 c⁄° 
btf_v¨_£cöfo
 *
vi
;

1655 c⁄° *
«me
;

1657 i‡(!
obj
->
btf
) {

1658 
	`¥_w¨n
("ÁûedÅÿföd BTF infÿf‹ obje˘ '%s'\n", 
obj
->
fûíame
);

1659  -
EINVAL
;

1662 
n
 = 
	`btf__ty≥_˙t
(
obj
->
btf
);

1663 
i
 = 1; i < 
n
; i++) {

1664 
t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
i
);

1669 i‡(
	`btf_is_n⁄_°©ic
(
t
)) {

1670 
«me
 = 
	`btf__°r_by_off£t
(
obj
->
btf
, 
t
->
«me_off
);

1671 i‡(
	`°rcmp
(
«me
, 
sym_«me
) != 0)

1675 
btf_id
 = 
i
;

1679 i‡(!
	`btf_is_d©a£c
(
t
))

1682 
vi
 = 
	`btf_v¨_£cöfos
(
t
);

1683 
j
 = 0, 
m
 = 
	`btf_vÀn
(
t
); j < m; j++, 
vi
++) {

1684 
t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
vi
->
ty≥
);

1685 
«me
 = 
	`btf__°r_by_off£t
(
obj
->
btf
, 
t
->
«me_off
);

1687 i‡(
	`°rcmp
(
«me
, 
sym_«me
) != 0)

1689 i‡(
	`btf_is_v¨
(
t
Ë&& 
	`btf_v¨
—)->
lökage
 =
BTF_VAR_STATIC
)

1691 i‡(
	`btf_is_func
(
t
Ë&& 
	`btf_func_lökage
—Ë=
BTF_FUNC_STATIC
)

1694 i‡(
btf_id
 && btf_id !
vi
->
ty≥
) {

1695 
	`¥_w¨n
("global/extern '%s' BTF isámbiguous: bothÅypes #%dánd #%u match\n",

1696 
sym_«me
, 
btf_id
, 
vi
->
ty≥
);

1697  -
EINVAL
;

1700 *
out_btf_£c_id
 = 
i
;

1701 *
out_btf_id
 = 
vi
->
ty≥
;

1708 i‡(
btf_id
) {

1709 *
out_btf_£c_id
 = 0;

1710 *
out_btf_id
 = 
btf_id
;

1714 
	`¥_w¨n
("ÁûedÅÿföd BTF infÿf‹ globÆ/exã∫ symbﬁ '%s'\n", 
sym_«me
);

1715  -
ENOENT
;

1716 
	}
}

1718 
§c_£c
 *
	$föd_§c_£c_by_«me
(
§c_obj
 *
obj
, c⁄° *
£c_«me
)

1720 
§c_£c
 *
£c
;

1721 
i
;

1723 
i
 = 1; i < 
obj
->
£c_˙t
; i++) {

1724 
£c
 = &
obj
->
£cs
[
i
];

1726 i‡(
	`°rcmp
(
£c
->
£c_«me
, sec_name) == 0)

1727  
£c
;

1730  
NULL
;

1731 
	}
}

1733 
	$com∂ëe_exã∫_btf_öfo
(
btf
 *
d°_btf
, 
d°_id
,

1734 
btf
 *
§c_btf
, 
§c_id
)

1736 
btf_ty≥
 *
d°_t
 = 
	`btf_ty≥_by_id
(
d°_btf
, 
d°_id
);

1737 
btf_ty≥
 *
§c_t
 = 
	`btf_ty≥_by_id
(
§c_btf
, 
§c_id
);

1738 
btf_∑øm
 *
§c_p
, *
d°_p
;

1739 c⁄° *
s
;

1740 
i
, 
n
, 
off
;

1745 i‡(
	`btf_is_v¨
(
d°_t
)) {

1746 
	`btf_v¨
(
d°_t
)->
lökage
 = 
BTF_VAR_GLOBAL_ALLOCATED
;

1750 
d°_t
->
öfo
 = 
	`btf_ty≥_öfo
(
BTF_KIND_FUNC
, 
BTF_FUNC_GLOBAL
, 0);

1753 
§c_t
 = 
	`btf_ty≥_by_id
(
§c_btf
, src_t->
ty≥
);

1754 
d°_t
 = 
	`btf_ty≥_by_id
(
d°_btf
, d°_t->
ty≥
);

1767 
§c_p
 = 
	`btf_∑øms
(
§c_t
);

1768 
d°_p
 = 
	`btf_∑øms
(
d°_t
);

1769 
i
 = 0, 
n
 = 
	`btf_vÀn
(
d°_t
); i <Ç; i++, 
§c_p
++, 
d°_p
++) {

1770 i‡(!
§c_p
->
«me_off
)

1774 
s
 = 
	`btf__°r_by_off£t
(
§c_btf
, 
§c_p
->
«me_off
);

1775 
off
 = 
	`btf__add_°r
(
d°_btf
, 
s
);

1776 i‡(
off
 < 0)

1777  
off
;

1778 
d°_p
->
«me_off
 = 
off
;

1781 
	}
}

1783 
	$sym_upd©e_böd
(
Elf64_Sym
 *
sym
, 
sym_böd
)

1785 
sym
->
°_öfo
 = 
	`ELF64_ST_INFO
(
sym_böd
, 
	`ELF64_ST_TYPE
(sym->st_info));

1786 
	}
}

1788 
	$sym_upd©e_ty≥
(
Elf64_Sym
 *
sym
, 
sym_ty≥
)

1790 
sym
->
°_öfo
 = 
	`ELF64_ST_INFO
(
	`ELF64_ST_BIND
(sym->°_öfo), 
sym_ty≥
);

1791 
	}
}

1793 
	$sym_upd©e_visibûôy
(
Elf64_Sym
 *
sym
, 
sym_vis
)

1798 
sym
->
°_Ÿhî
 &= ~0x03;

1799 
sym
->
°_Ÿhî
 |
sym_vis
;

1800 
	}
}

1802 
	$lökî_≠≥nd_ñf_sym
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
,

1803 
Elf64_Sym
 *
sym
, c⁄° *
sym_«me
, 
§c_sym_idx
)

1805 
§c_£c
 *§c_£¯
NULL
;

1806 
d°_£c
 *d°_£¯
NULL
;

1807 
glob_sym
 *glob_sym = 
NULL
;

1808 
«me_off
, 
sym_ty≥
, 
sym_böd
, 
sym_vis
, 
îr
;

1809 
btf_£c_id
 = 0, 
btf_id
 = 0;

1810 
size_t
 
d°_sym_idx
;

1811 
Elf64_Sym
 *
d°_sym
;

1812 
boﬁ
 
sym_is_exã∫
;

1814 
sym_ty≥
 = 
	`ELF64_ST_TYPE
(
sym
->
°_öfo
);

1815 
sym_böd
 = 
	`ELF64_ST_BIND
(
sym
->
°_öfo
);

1816 
sym_vis
 = 
	`ELF64_ST_VISIBILITY
(
sym
->
°_Ÿhî
);

1817 
sym_is_exã∫
 = 
sym
->
°_shndx
 =
SHN_UNDEF
;

1819 i‡(
sym_is_exã∫
) {

1820 i‡(!
obj
->
btf
) {

1821 
	`¥_w¨n
("externs without BTF infoáreÇot supported\n");

1822  -
ENOTSUP
;

1824 } i‡(
sym
->
°_shndx
 < 
SHN_LORESERVE
) {

1825 
§c_£c
 = &
obj
->
£cs
[
sym
->
°_shndx
];

1826 i‡(
§c_£c
->
skù≥d
)

1828 
d°_£c
 = &
lökî
->
£cs
[
§c_£c
->
d°_id
];

1831 i‡(
sym_ty≥
 =
STT_SECTION
 && 
d°_£c
->
£c_sym_idx
) {

1832 
obj
->
sym_m≠
[
§c_sym_idx
] = 
d°_£c
->
£c_sym_idx
;

1837 i‡(
sym_böd
 =
STB_LOCAL
)

1838 
add_sym
;

1841 
îr
 = 
	`föd_glob_sym_btf
(
obj
, 
sym
, 
sym_«me
, &
btf_£c_id
, &
btf_id
);

1842 i‡(
îr
)

1843  
îr
;

1845 i‡(
sym_is_exã∫
 && 
btf_£c_id
) {

1846 c⁄° *
£c_«me
 = 
NULL
;

1847 c⁄° 
btf_ty≥
 *
t
;

1849 
t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
btf_£c_id
);

1850 
£c_«me
 = 
	`btf__°r_by_off£t
(
obj
->
btf
, 
t
->
«me_off
);

1858 i‡(
	`°rcmp
(
£c_«me
, 
BTF_EXTERN_SEC
) != 0) {

1859 
§c_£c
 = 
	`föd_§c_£c_by_«me
(
obj
, 
£c_«me
);

1860 i‡(!
§c_£c
) {

1861 
	`¥_w¨n
("ÁûedÅÿföd m©chög ELF se¯'%s'\n", 
£c_«me
);

1862  -
ENOENT
;

1864 
d°_£c
 = &
lökî
->
£cs
[
§c_£c
->
d°_id
];

1868 
glob_sym
 = 
	`föd_glob_sym
(
lökî
, 
sym_«me
);

1869 i‡(
glob_sym
) {

1874 
obj
->
sym_m≠
[
§c_sym_idx
] = 
glob_sym
->
sym_idx
;

1880 i‡(!
sym_is_exã∫
 && !
glob_sym
->
is_exã∫


1881 && !
glob_sym
->
is_wók
 && 
sym_böd
 !
STB_WEAK
) {

1882 
	`¥_w¨n
("conflictingÇon-weak symbol #%d (%s) definition in '%s'\n",

1883 
§c_sym_idx
, 
sym_«me
, 
obj
->
fûíame
);

1884  -
EINVAL
;

1887 i‡(!
	`glob_syms_m©ch
(
sym_«me
, 
lökî
, 
glob_sym
, 
obj
, 
sym
, 
§c_sym_idx
, 
btf_id
))

1888  -
EINVAL
;

1890 
d°_sym
 = 
	`gë_sym_by_idx
(
lökî
, 
glob_sym
->
sym_idx
);

1896 i‡(
sym_böd
 =
STB_GLOBAL
) {

1901 
	`sym_upd©e_böd
(
d°_sym
, 
STB_GLOBAL
);

1902 
glob_sym
->
is_wók
 = 
Ál£
;

1911 i‡(
sym_vis
 > 
	`ELF64_ST_VISIBILITY
(
d°_sym
->
°_Ÿhî
))

1912 
	`sym_upd©e_visibûôy
(
d°_sym
, 
sym_vis
);

1918 i‡(
sym_is_exã∫
)

1927 i‡(!
glob_sym
->
is_exã∫
 && 
sym_böd
 =
STB_WEAK
)

1934 
	`sym_upd©e_ty≥
(
d°_sym
, 
sym_ty≥
);

1935 
d°_sym
->
°_shndx
 = 
d°_£c
->
£c_idx
;

1936 
d°_sym
->
°_vÆue
 = 
§c_£c
->
d°_off
 + 
sym
->st_value;

1937 
d°_sym
->
°_size
 = 
sym
->st_size;

1940 
glob_sym
->
£c_id
 = 
d°_£c
->
id
;

1941 
glob_sym
->
is_exã∫
 = 
Ál£
;

1943 i‡(
	`com∂ëe_exã∫_btf_öfo
(
lökî
->
btf
, 
glob_sym
->
btf_id
,

1944 
obj
->
btf
, 
btf_id
))

1945  -
EINVAL
;

1948 
glob_sym
->
undîlyög_btf_id
 = 0;

1950 
obj
->
sym_m≠
[
§c_sym_idx
] = 
glob_sym
->
sym_idx
;

1954 
add_sym
:

1955 
«me_off
 = 
	`°r£t__add_°r
(
lökî
->
°πab_°rs
, 
sym_«me
);

1956 i‡(
«me_off
 < 0)

1957  
«me_off
;

1959 
d°_sym
 = 
	`add_√w_sym
(
lökî
, &
d°_sym_idx
);

1960 i‡(!
d°_sym
)

1961  -
ENOMEM
;

1963 
d°_sym
->
°_«me
 = 
«me_off
;

1964 
d°_sym
->
°_öfo
 = 
sym
->st_info;

1965 
d°_sym
->
°_Ÿhî
 = 
sym
->st_other;

1966 
d°_sym
->
°_shndx
 = 
d°_£c
 ? d°_£c->
£c_idx
 : 
sym
->st_shndx;

1967 
d°_sym
->
°_vÆue
 = (
§c_£c
 ? src_£c->
d°_off
 : 0Ë+ 
sym
->st_value;

1968 
d°_sym
->
°_size
 = 
sym
->st_size;

1970 
obj
->
sym_m≠
[
§c_sym_idx
] = 
d°_sym_idx
;

1972 i‡(
sym_ty≥
 =
STT_SECTION
 && 
d°_sym
) {

1973 
d°_£c
->
£c_sym_idx
 = 
d°_sym_idx
;

1974 
d°_sym
->
°_vÆue
 = 0;

1977 i‡(
sym_böd
 !
STB_LOCAL
) {

1978 
glob_sym
 = 
	`add_glob_sym
(
lökî
);

1979 i‡(!
glob_sym
)

1980  -
ENOMEM
;

1982 
glob_sym
->
sym_idx
 = 
d°_sym_idx
;

1989 
glob_sym
->
£c_id
 = 
d°_£c
 ? d°_£c->
id
 : 0;

1990 
glob_sym
->
«me_off
 =Çame_off;

1992 
glob_sym
->
btf_id
 = 0;

1993 
glob_sym
->
is_exã∫
 = 
sym_is_exã∫
;

1994 
glob_sym
->
is_wók
 = 
sym_böd
 =
STB_WEAK
;

1998 
	}
}

2000 
	$lökî_≠≥nd_ñf_ªlos
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
)

2002 
§c_£c
 *
§c_symèb
 = &
obj
->
£cs
[obj->
symèb_£c_idx
];

2003 
d°_£c
 *
d°_symèb
;

2004 
i
, 
îr
;

2006 
i
 = 1; i < 
obj
->
£c_˙t
; i++) {

2007 
§c_£c
 *§c_£c, *
§c_löked_£c
;

2008 
d°_£c
 *d°_£c, *
d°_löked_£c
;

2009 
Elf64_Rñ
 *
§c_ªl
, *
d°_ªl
;

2010 
j
, 
n
;

2012 
§c_£c
 = &
obj
->
£cs
[
i
];

2013 i‡(!
	`is_ªlo_£c
(
§c_£c
))

2017 
§c_löked_£c
 = &
obj
->
£cs
[
§c_£c
->
shdr
->
sh_öfo
];

2018 i‡(
§c_löked_£c
->
skù≥d
)

2021 
d°_£c
 = 
	`föd_d°_£c_by_«me
(
lökî
, 
§c_£c
->
£c_«me
);

2022 i‡(!
d°_£c
) {

2023 
d°_£c
 = 
	`add_d°_£c
(
lökî
, 
§c_£c
->
£c_«me
);

2024 i‡(!
d°_£c
)

2025  -
ENOMEM
;

2026 
îr
 = 
	`öô_£c
(
lökî
, 
d°_£c
, 
§c_£c
);

2027 i‡(
îr
) {

2028 
	`¥_w¨n
("ÁûedÅÿöô se˘i⁄ '%s'\n", 
§c_£c
->
£c_«me
);

2029  
îr
;

2031 } i‡(!
	`£cs_m©ch
(
d°_£c
, 
§c_£c
)) {

2032 
	`¥_w¨n
("£˘i⁄†%†¨ênŸ com∑tibÀ\n", 
§c_£c
->
£c_«me
);

2037 
d°_symèb
 = &
lökî
->
£cs
[lökî->
symèb_£c_idx
];

2040 
d°_£c
->
shdr
->
sh_lök
 = 
lökî
->
symèb_£c_idx
;

2043 
d°_löked_£c
 = &
lökî
->
£cs
[
§c_löked_£c
->
d°_id
];

2044 
d°_£c
->
shdr
->
sh_öfo
 = 
d°_löked_£c
->
£c_idx
;

2046 
§c_£c
->
d°_id
 = 
d°_£c
->
id
;

2047 
îr
 = 
	`exãnd_£c
(
lökî
, 
d°_£c
, 
§c_£c
);

2048 i‡(
îr
)

2049  
îr
;

2051 
§c_ªl
 = 
§c_£c
->
d©a
->
d_buf
;

2052 
d°_ªl
 = 
d°_£c
->
øw_d©a
 + 
§c_£c
->
d°_off
;

2053 
n
 = 
§c_£c
->
shdr
->
sh_size
 / src_£c->shdr->
sh_ítsize
;

2054 
j
 = 0; j < 
n
; j++, 
§c_ªl
++, 
d°_ªl
++) {

2055 
size_t
 
§c_sym_idx
 = 
	`ELF64_R_SYM
(
§c_ªl
->
r_öfo
);

2056 
size_t
 
sym_ty≥
 = 
	`ELF64_R_TYPE
(
§c_ªl
->
r_öfo
);

2057 
Elf64_Sym
 *
§c_sym
, *
d°_sym
;

2058 
size_t
 
d°_sym_idx
;

2060 
§c_sym_idx
 = 
	`ELF64_R_SYM
(
§c_ªl
->
r_öfo
);

2061 
§c_sym
 = 
§c_symèb
->
d©a
->
d_buf
 + (*§c_symË* 
§c_sym_idx
;

2063 
d°_sym_idx
 = 
obj
->
sym_m≠
[
§c_sym_idx
];

2064 
d°_sym
 = 
d°_symèb
->
øw_d©a
 + (*d°_symË* 
d°_sym_idx
;

2065 
d°_ªl
->
r_off£t
 +
§c_löked_£c
->
d°_off
;

2066 
sym_ty≥
 = 
	`ELF64_R_TYPE
(
§c_ªl
->
r_öfo
);

2067 
d°_ªl
->
r_öfo
 = 
	`ELF64_R_INFO
(
d°_sym_idx
, 
sym_ty≥
);

2069 i‡(
	`ELF64_ST_TYPE
(
§c_sym
->
°_öfo
Ë=
STT_SECTION
) {

2070 
§c_£c
 *
£c
 = &
obj
->
£cs
[
§c_sym
->
°_shndx
];

2071 
bpf_ö¢
 *
ö¢
;

2073 i‡(
§c_löked_£c
->
shdr
->
sh_Êags
 & 
SHF_EXECINSTR
) {

2083 
ö¢
 = 
d°_löked_£c
->
øw_d©a
 + 
d°_ªl
->
r_off£t
;

2084 i‡(
ö¢
->
code
 =(
BPF_JMP
 | 
BPF_CALL
))

2085 
ö¢
->
imm
 +
£c
->
d°_off
 / (
bpf_ö¢
);

2087 
ö¢
->
imm
 +
£c
->
d°_off
;

2089 
	`¥_w¨n
("relocationágainst STT_SECTION inÇon-exec section isÇot supported!\n");

2090  -
EINVAL
;

2098 
	}
}

2100 
Elf64_Sym
 *
	$föd_sym_by_«me
(
§c_obj
 *
obj
, 
size_t
 
£c_idx
,

2101 
sym_ty≥
, c⁄° *
sym_«me
)

2103 
§c_£c
 *
symèb
 = &
obj
->
£cs
[obj->
symèb_£c_idx
];

2104 
Elf64_Sym
 *
sym
 = 
symèb
->
d©a
->
d_buf
;

2105 
i
, 
n
 = 
symèb
->
shdr
->
sh_size
 / symèb->shdr->
sh_ítsize
;

2106 
°r_£c_idx
 = 
symèb
->
shdr
->
sh_lök
;

2107 c⁄° *
«me
;

2109 
i
 = 0; i < 
n
; i++, 
sym
++) {

2110 i‡(
sym
->
°_shndx
 !
£c_idx
)

2112 i‡(
	`ELF64_ST_TYPE
(
sym
->
°_öfo
Ë!
sym_ty≥
)

2115 
«me
 = 
	`ñf_°Ωå
(
obj
->
ñf
, 
°r_£c_idx
, 
sym
->
°_«me
);

2116 i‡(!
«me
)

2117  
NULL
;

2119 i‡(
	`°rcmp
(
sym_«me
, 
«me
) != 0)

2122  
sym
;

2125  
NULL
;

2126 
	}
}

2128 
	$lökî_fixup_btf
(
§c_obj
 *
obj
)

2130 c⁄° *
£c_«me
;

2131 
§c_£c
 *
£c
;

2132 
i
, 
j
, 
n
, 
m
;

2134 i‡(!
obj
->
btf
)

2137 
n
 = 
	`btf__ty≥_˙t
(
obj
->
btf
);

2138 
i
 = 1; i < 
n
; i++) {

2139 
btf_v¨_£cöfo
 *
vi
;

2140 
btf_ty≥
 *
t
;

2142 
t
 = 
	`btf_ty≥_by_id
(
obj
->
btf
, 
i
);

2143 i‡(
	`btf_köd
(
t
Ë!
BTF_KIND_DATASEC
)

2146 
£c_«me
 = 
	`btf__°r_by_off£t
(
obj
->
btf
, 
t
->
«me_off
);

2147 
£c
 = 
	`föd_§c_£c_by_«me
(
obj
, 
£c_«me
);

2148 i‡(
£c
) {

2150 i‡(
£c
->
shdr
)

2151 
t
->
size
 = 
£c
->
shdr
->
sh_size
;

2177 i‡(
	`°rcmp
(
£c_«me
, 
BTF_EXTERN_SEC
) == 0)

2180 
£c
 = 
	`add_§c_£c
(
obj
, 
£c_«me
);

2181 i‡(!
£c
)

2182  -
ENOMEM
;

2184 
£c
->
ïhemîÆ
 = 
åue
;

2185 
£c
->
£c_idx
 = 0;

2189 
£c
->
£c_ty≥_id
 = 
i
;

2192 
vi
 = 
	`btf_v¨_£cöfos
(
t
);

2193 
j
 = 0, 
m
 = 
	`btf_vÀn
(
t
); j < m; j++, 
vi
++) {

2194 c⁄° 
btf_ty≥
 *
vt
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
vi
->
ty≥
);

2195 c⁄° *
v¨_«me
 = 
	`btf__°r_by_off£t
(
obj
->
btf
, 
vt
->
«me_off
);

2196 
v¨_lökage
 = 
	`btf_v¨
(
vt
)->
lökage
;

2197 
Elf64_Sym
 *
sym
;

2200 i‡(
v¨_lökage
 !
BTF_VAR_GLOBAL_ALLOCATED
)

2203 
sym
 = 
	`föd_sym_by_«me
(
obj
, 
£c
->
£c_idx
, 
STT_OBJECT
, 
v¨_«me
);

2204 i‡(!
sym
) {

2205 
	`¥_w¨n
("ÁûedÅÿföd symbﬁ f‹ v¨übÀ '%s' i¿£˘i⁄ '%s'\n", 
v¨_«me
, 
£c_«me
);

2206  -
ENOENT
;

2209 
vi
->
off£t
 = 
sym
->
°_vÆue
;

2214 
	}
}

2216 
	$ªm≠_ty≥_id
(
__u32
 *
ty≥_id
, *
˘x
)

2218 *
id_m≠
 = 
˘x
;

2219 
√w_id
 = 
id_m≠
[*
ty≥_id
];

2222 i‡(
√w_id
 =0 && *
ty≥_id
 != 0) {

2223 
	`¥_w¨n
("ÁûedÅÿfödÇew ID m≠pög f‹ origöÆ BTFÅy≥ ID %u\n", *
ty≥_id
);

2224  -
EINVAL
;

2227 *
ty≥_id
 = 
id_m≠
[*type_id];

2230 
	}
}

2232 
	$lökî_≠≥nd_btf
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
)

2234 c⁄° 
btf_ty≥
 *
t
;

2235 
i
, 
j
, 
n
, 
°¨t_id
, 
id
;

2236 c⁄° *
«me
;

2238 i‡(!
obj
->
btf
)

2241 
°¨t_id
 = 
	`btf__ty≥_˙t
(
lökî
->
btf
);

2242 
n
 = 
	`btf__ty≥_˙t
(
obj
->
btf
);

2244 
obj
->
btf_ty≥_m≠
 = 
	`ˇŒoc
(
n
 + 1, ());

2245 i‡(!
obj
->
btf_ty≥_m≠
)

2246  -
ENOMEM
;

2248 
i
 = 1; i < 
n
; i++) {

2249 
glob_sym
 *glob_sym = 
NULL
;

2251 
t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
i
);

2254 i‡(
	`btf_köd
(
t
Ë=
BTF_KIND_DATASEC
)

2257 i‡(
	`btf_is_n⁄_°©ic
(
t
)) {

2259 
«me
 = 
	`btf__°r_by_off£t
(
obj
->
btf
, 
t
->
«me_off
);

2260 
glob_sym
 = 
	`föd_glob_sym
(
lökî
, 
«me
);

2266 i‡(!
glob_sym
)

2273 i‡(
glob_sym
->
undîlyög_btf_id
 == 0)

2274 
glob_sym
->
undîlyög_btf_id
 = -
t
->
ty≥
;

2280 i‡(
glob_sym
->
btf_id
) {

2282 
obj
->
btf_ty≥_m≠
[
i
] = 
glob_sym
->
btf_id
;

2287 
id
 = 
	`btf__add_ty≥
(
lökî
->
btf
, 
obj
->btf, 
t
);

2288 i‡(
id
 < 0) {

2289 
	`¥_w¨n
("ÁûedÅÿ≠≥nd BTFÅy≥ #%d from fûê'%s'\n", 
i
, 
obj
->
fûíame
);

2290  
id
;

2293 
obj
->
btf_ty≥_m≠
[
i
] = 
id
;

2296 i‡(
glob_sym
) {

2297 
glob_sym
->
btf_id
 = 
id
;

2298 
glob_sym
->
undîlyög_btf_id
 = -
t
->
ty≥
;

2303 
n
 = 
	`btf__ty≥_˙t
(
lökî
->
btf
);

2304 
i
 = 
°¨t_id
; i < 
n
; i++) {

2305 
btf_ty≥
 *
d°_t
 = 
	`btf_ty≥_by_id
(
lökî
->
btf
, 
i
);

2307 i‡(
	`btf_ty≥_visô_ty≥_ids
(
d°_t
, 
ªm≠_ty≥_id
, 
obj
->
btf_ty≥_m≠
))

2308  -
EINVAL
;

2314 
i
 = 0; i < 
lökî
->
glob_sym_˙t
; i++) {

2315 
glob_sym
 *glob_sym = &
lökî
->
glob_syms
[
i
];

2316 
btf_ty≥
 *
glob_t
;

2318 i‡(
glob_sym
->
undîlyög_btf_id
 >= 0)

2321 
glob_sym
->
undîlyög_btf_id
 = 
obj
->
btf_ty≥_m≠
[-glob_sym->underlying_btf_id];

2323 
glob_t
 = 
	`btf_ty≥_by_id
(
lökî
->
btf
, 
glob_sym
->
btf_id
);

2324 
glob_t
->
ty≥
 = 
glob_sym
->
undîlyög_btf_id
;

2328 
i
 = 1; i < 
obj
->
£c_˙t
; i++) {

2329 
§c_£c
 *src_sec;

2330 
d°_£c
 *dst_sec;

2331 c⁄° 
btf_v¨_£cöfo
 *
§c_v¨
;

2332 
btf_v¨_£cöfo
 *
d°_v¨
;

2334 
§c_£c
 = &
obj
->
£cs
[
i
];

2335 i‡(!
§c_£c
->
£c_ty≥_id
 || src_£c->
skù≥d
)

2337 
d°_£c
 = &
lökî
->
£cs
[
§c_£c
->
d°_id
];

2347 
d°_£c
->
has_btf
 = 
åue
;

2349 
t
 = 
	`btf__ty≥_by_id
(
obj
->
btf
, 
§c_£c
->
£c_ty≥_id
);

2350 
§c_v¨
 = 
	`btf_v¨_£cöfos
(
t
);

2351 
n
 = 
	`btf_vÀn
(
t
);

2352 
j
 = 0; j < 
n
; j++, 
§c_v¨
++) {

2353 *
£c_v¨s
 = 
d°_£c
->sec_vars;

2354 
√w_id
 = 
obj
->
btf_ty≥_m≠
[
§c_v¨
->
ty≥
];

2355 
glob_sym
 *glob_sym = 
NULL
;

2357 
t
 = 
	`btf_ty≥_by_id
(
lökî
->
btf
, 
√w_id
);

2358 i‡(
	`btf_is_n⁄_°©ic
(
t
)) {

2359 
«me
 = 
	`btf__°r_by_off£t
(
lökî
->
btf
, 
t
->
«me_off
);

2360 
glob_sym
 = 
	`föd_glob_sym
(
lökî
, 
«me
);

2361 i‡(
glob_sym
->
£c_id
 !
d°_£c
->
id
) {

2362 
	`¥_w¨n
("global '%s': section mismatch %d vs %d\n",

2363 
«me
, 
glob_sym
->
£c_id
, 
d°_£c
->
id
);

2364  -
EINVAL
;

2373 i‡(
glob_sym
 && glob_sym->
v¨_idx
 >= 0) {

2374 
__s64
 
sz
;

2376 
d°_v¨
 = &
d°_£c
->
£c_v¨s
[
glob_sym
->
v¨_idx
];

2381 
sz
 = 
	`btf__ªsﬁve_size
(
lökî
->
btf
, 
glob_sym
->
undîlyög_btf_id
);

2382 i‡(
sz
 < 0) {

2383 
	`¥_w¨n
("global '%s': failedÅoÑesolve size of underlyingÅype: %d\n",

2384 
«me
, ()
sz
);

2385  -
EINVAL
;

2387 
d°_v¨
->
size
 = 
sz
;

2391 
£c_v¨s
 = 
	`libbpf_ªÆloˇºay
(sec_vars,

2392 
d°_£c
->
£c_v¨_˙t
 + 1,

2393 (*
d°_£c
->
£c_v¨s
));

2394 i‡(!
£c_v¨s
)

2395  -
ENOMEM
;

2397 
d°_£c
->
£c_v¨s
 = sec_vars;

2398 
d°_£c
->
£c_v¨_˙t
++;

2400 
d°_v¨
 = &
d°_£c
->
£c_v¨s
[d°_£c->
£c_v¨_˙t
 - 1];

2401 
d°_v¨
->
ty≥
 = 
obj
->
btf_ty≥_m≠
[
§c_v¨
->type];

2402 
d°_v¨
->
size
 = 
§c_v¨
->size;

2403 
d°_v¨
->
off£t
 = 
§c_£c
->
d°_off
 + 
§c_v¨
->offset;

2405 i‡(
glob_sym
)

2406 
glob_sym
->
v¨_idx
 = 
d°_£c
->
£c_v¨_˙t
 - 1;

2411 
	}
}

2413 *
	$add_btf_ext_ªc
(
btf_ext_£c_d©a
 *
ext_d©a
, c⁄° *
§c_ªc
)

2415 *
tmp
;

2417 
tmp
 = 
	`libbpf_ªÆloˇºay
(
ext_d©a
->
ªcs
,Éxt_d©a->
ªc_˙t
 + 1,Éxt_d©a->
ªc_sz
);

2418 i‡(!
tmp
)

2419  
NULL
;

2420 
ext_d©a
->
ªcs
 = 
tmp
;

2422 
tmp
 +
ext_d©a
->
ªc_˙t
 *Éxt_d©a->
ªc_sz
;

2423 
	`mem˝y
(
tmp
, 
§c_ªc
, 
ext_d©a
->
ªc_sz
);

2425 
ext_d©a
->
ªc_˙t
++;

2427  
tmp
;

2428 
	}
}

2430 
	$lökî_≠≥nd_btf_ext
(
bpf_lökî
 *
lökî
, 
§c_obj
 *
obj
)

2432 c⁄° 
btf_ext_öfo_£c
 *
ext_£c
;

2433 c⁄° *
£c_«me
, *
s
;

2434 
§c_£c
 *src_sec;

2435 
d°_£c
 *dst_sec;

2436 
ªc_sz
, 
°r_off
, 
i
;

2438 i‡(!
obj
->
btf_ext
)

2441 
ªc_sz
 = 
obj
->
btf_ext
->
func_öfo
.
ªc_size
;

2442 
	`f‹_óch_btf_ext_£c
(&
obj
->
btf_ext
->
func_öfo
, 
ext_£c
) {

2443 
bpf_func_öfo_mö
 *
§c_ªc
, *
d°_ªc
;

2445 
£c_«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
ext_£c
->
£c_«me_off
);

2446 
§c_£c
 = 
	`föd_§c_£c_by_«me
(
obj
, 
£c_«me
);

2447 i‡(!
§c_£c
) {

2448 
	`¥_w¨n
("ˇn'àföd se˘i⁄ '%s'Ñe„ªn˚d from .BTF.ext\n", 
£c_«me
);

2449  -
EINVAL
;

2451 
d°_£c
 = &
lökî
->
£cs
[
§c_£c
->
d°_id
];

2453 i‡(
d°_£c
->
func_öfo
.
ªc_sz
 == 0)

2454 
d°_£c
->
func_öfo
.
ªc_sz
 =Ñec_sz;

2455 i‡(
d°_£c
->
func_öfo
.
ªc_sz
 !=Ñec_sz) {

2456 
	`¥_w¨n
("öcom∑tibÀ .BTF.exàªc‹d size†f‹ se˘i⁄ '%s'\n", 
£c_«me
);

2457  -
EINVAL
;

2460 
	`f‹_óch_btf_ext_ªc
(&
obj
->
btf_ext
->
func_öfo
, 
ext_£c
, 
i
, 
§c_ªc
) {

2461 
d°_ªc
 = 
	`add_btf_ext_ªc
(&
d°_£c
->
func_öfo
, 
§c_ªc
);

2462 i‡(!
d°_ªc
)

2463  -
ENOMEM
;

2465 
d°_ªc
->
ö¢_off
 +
§c_£c
->
d°_off
;

2466 
d°_ªc
->
ty≥_id
 = 
obj
->
btf_ty≥_m≠
[dst_rec->type_id];

2470 
ªc_sz
 = 
obj
->
btf_ext
->
löe_öfo
.
ªc_size
;

2471 
	`f‹_óch_btf_ext_£c
(&
obj
->
btf_ext
->
löe_öfo
, 
ext_£c
) {

2472 
bpf_löe_öfo_mö
 *
§c_ªc
, *
d°_ªc
;

2474 
£c_«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
ext_£c
->
£c_«me_off
);

2475 
§c_£c
 = 
	`föd_§c_£c_by_«me
(
obj
, 
£c_«me
);

2476 i‡(!
§c_£c
) {

2477 
	`¥_w¨n
("ˇn'àföd se˘i⁄ '%s'Ñe„ªn˚d from .BTF.ext\n", 
£c_«me
);

2478  -
EINVAL
;

2480 
d°_£c
 = &
lökî
->
£cs
[
§c_£c
->
d°_id
];

2482 i‡(
d°_£c
->
löe_öfo
.
ªc_sz
 == 0)

2483 
d°_£c
->
löe_öfo
.
ªc_sz
 =Ñec_sz;

2484 i‡(
d°_£c
->
löe_öfo
.
ªc_sz
 !=Ñec_sz) {

2485 
	`¥_w¨n
("öcom∑tibÀ .BTF.exàªc‹d size†f‹ se˘i⁄ '%s'\n", 
£c_«me
);

2486  -
EINVAL
;

2489 
	`f‹_óch_btf_ext_ªc
(&
obj
->
btf_ext
->
löe_öfo
, 
ext_£c
, 
i
, 
§c_ªc
) {

2490 
d°_ªc
 = 
	`add_btf_ext_ªc
(&
d°_£c
->
löe_öfo
, 
§c_ªc
);

2491 i‡(!
d°_ªc
)

2492  -
ENOMEM
;

2494 
d°_ªc
->
ö¢_off
 +
§c_£c
->
d°_off
;

2496 
s
 = 
	`btf__°r_by_off£t
(
obj
->
btf
, 
§c_ªc
->
fûe_«me_off
);

2497 
°r_off
 = 
	`btf__add_°r
(
lökî
->
btf
, 
s
);

2498 i‡(
°r_off
 < 0)

2499  -
ENOMEM
;

2500 
d°_ªc
->
fûe_«me_off
 = 
°r_off
;

2502 
s
 = 
	`btf__°r_by_off£t
(
obj
->
btf
, 
§c_ªc
->
löe_off
);

2503 
°r_off
 = 
	`btf__add_°r
(
lökî
->
btf
, 
s
);

2504 i‡(
°r_off
 < 0)

2505  -
ENOMEM
;

2506 
d°_ªc
->
löe_off
 = 
°r_off
;

2512 
ªc_sz
 = 
obj
->
btf_ext
->
c‹e_ªlo_öfo
.
ªc_size
;

2513 
	`f‹_óch_btf_ext_£c
(&
obj
->
btf_ext
->
c‹e_ªlo_öfo
, 
ext_£c
) {

2514 
bpf_c‹e_ªlo
 *
§c_ªc
, *
d°_ªc
;

2516 
£c_«me
 = 
	`btf__«me_by_off£t
(
obj
->
btf
, 
ext_£c
->
£c_«me_off
);

2517 
§c_£c
 = 
	`föd_§c_£c_by_«me
(
obj
, 
£c_«me
);

2518 i‡(!
§c_£c
) {

2519 
	`¥_w¨n
("ˇn'àföd se˘i⁄ '%s'Ñe„ªn˚d from .BTF.ext\n", 
£c_«me
);

2520  -
EINVAL
;

2522 
d°_£c
 = &
lökî
->
£cs
[
§c_£c
->
d°_id
];

2524 i‡(
d°_£c
->
c‹e_ªlo_öfo
.
ªc_sz
 == 0)

2525 
d°_£c
->
c‹e_ªlo_öfo
.
ªc_sz
 =Ñec_sz;

2526 i‡(
d°_£c
->
c‹e_ªlo_öfo
.
ªc_sz
 !=Ñec_sz) {

2527 
	`¥_w¨n
("öcom∑tibÀ .BTF.exàªc‹d size†f‹ se˘i⁄ '%s'\n", 
£c_«me
);

2528  -
EINVAL
;

2531 
	`f‹_óch_btf_ext_ªc
(&
obj
->
btf_ext
->
c‹e_ªlo_öfo
, 
ext_£c
, 
i
, 
§c_ªc
) {

2532 
d°_ªc
 = 
	`add_btf_ext_ªc
(&
d°_£c
->
c‹e_ªlo_öfo
, 
§c_ªc
);

2533 i‡(!
d°_ªc
)

2534  -
ENOMEM
;

2536 
d°_ªc
->
ö¢_off
 +
§c_£c
->
d°_off
;

2537 
d°_ªc
->
ty≥_id
 = 
obj
->
btf_ty≥_m≠
[dst_rec->type_id];

2539 
s
 = 
	`btf__°r_by_off£t
(
obj
->
btf
, 
§c_ªc
->
ac˚ss_°r_off
);

2540 
°r_off
 = 
	`btf__add_°r
(
lökî
->
btf
, 
s
);

2541 i‡(
°r_off
 < 0)

2542  -
ENOMEM
;

2543 
d°_ªc
->
ac˚ss_°r_off
 = 
°r_off
;

2550 
	}
}

2552 
	$bpf_lökî__föÆize
(
bpf_lökî
 *
lökî
)

2554 
d°_£c
 *
£c
;

2555 
size_t
 
°rs_sz
;

2556 c⁄° *
°rs
;

2557 
îr
, 
i
;

2559 i‡(!
lökî
->
ñf
)

2560  
	`libbpf_îr
(-
EINVAL
);

2562 
îr
 = 
	`föÆize_btf
(
lökî
);

2563 i‡(
îr
)

2564  
	`libbpf_îr
(
îr
);

2567 
°rs_sz
 = 
	`°r£t__d©a_size
(
lökî
->
°πab_°rs
);

2568 
°rs
 = 
	`°r£t__d©a
(
lökî
->
°πab_°rs
);

2570 
£c
 = &
lökî
->
£cs
[lökî->
°πab_£c_idx
];

2571 
£c
->
d©a
->
d_Æign
 = 1;

2572 
£c
->
d©a
->
d_off
 = 0LL;

2573 
£c
->
d©a
->
d_buf
 = (*)
°rs
;

2574 
£c
->
d©a
->
d_ty≥
 = 
ELF_T_BYTE
;

2575 
£c
->
d©a
->
d_size
 = 
°rs_sz
;

2576 
£c
->
shdr
->
sh_size
 = 
°rs_sz
;

2578 
i
 = 1; i < 
lökî
->
£c_˙t
; i++) {

2579 
£c
 = &
lökî
->
£cs
[
i
];

2582 i‡(
£c
->
£c_idx
 =
lökî
->
°πab_£c_idx
)

2586 i‡(!
£c
->
s˙
)

2589 
£c
->
d©a
->
d_buf
 = sec->
øw_d©a
;

2593 i‡(
	`ñf_upd©e
(
lökî
->
ñf
, 
ELF_C_NULL
) < 0) {

2594 
îr
 = -
î∫o
;

2595 
	`¥_w¨n_ñf
("failedÅo finalize ELFÜayout");

2596  
	`libbpf_îr
(
îr
);

2600 i‡(
	`ñf_upd©e
(
lökî
->
ñf
, 
ELF_C_WRITE
) < 0) {

2601 
îr
 = -
î∫o
;

2602 
	`¥_w¨n_ñf
("failedÅo write ELF contents");

2603  
	`libbpf_îr
(
îr
);

2606 
	`ñf_íd
(
lökî
->
ñf
);

2607 
	`˛o£
(
lökî
->
fd
);

2609 
lökî
->
ñf
 = 
NULL
;

2610 
lökî
->
fd
 = -1;

2613 
	}
}

2615 
	$emô_ñf_d©a_£c
(
bpf_lökî
 *
lökî
, c⁄° *
£c_«me
,

2616 
size_t
 
Æign
, c⁄° *
øw_d©a
, size_à
øw_sz
)

2618 
Elf_S˙
 *
s˙
;

2619 
Elf_D©a
 *
d©a
;

2620 
Elf64_Shdr
 *
shdr
;

2621 
«me_off
;

2623 
«me_off
 = 
	`°r£t__add_°r
(
lökî
->
°πab_°rs
, 
£c_«me
);

2624 i‡(
«me_off
 < 0)

2625  
«me_off
;

2627 
s˙
 = 
	`ñf_√ws˙
(
lökî
->
ñf
);

2628 i‡(!
s˙
)

2629  -
ENOMEM
;

2630 
d©a
 = 
	`ñf_√wd©a
(
s˙
);

2631 i‡(!
d©a
)

2632  -
ENOMEM
;

2633 
shdr
 = 
	`ñf64_gëshdr
(
s˙
);

2634 i‡(!
shdr
)

2635  -
EINVAL
;

2637 
shdr
->
sh_«me
 = 
«me_off
;

2638 
shdr
->
sh_ty≥
 = 
SHT_PROGBITS
;

2639 
shdr
->
sh_Êags
 = 0;

2640 
shdr
->
sh_size
 = 
øw_sz
;

2641 
shdr
->
sh_lök
 = 0;

2642 
shdr
->
sh_öfo
 = 0;

2643 
shdr
->
sh_addølign
 = 
Æign
;

2644 
shdr
->
sh_ítsize
 = 0;

2646 
d©a
->
d_ty≥
 = 
ELF_T_BYTE
;

2647 
d©a
->
d_size
 = 
øw_sz
;

2648 
d©a
->
d_buf
 = (*)
øw_d©a
;

2649 
d©a
->
d_Æign
 = 
Æign
;

2650 
d©a
->
d_off
 = 0;

2653 
	}
}

2655 
	$föÆize_btf
(
bpf_lökî
 *
lökî
)

2657 
	`LIBBPF_OPTS
(
btf_dedup_›ts
, 
›ts
);

2658 
btf
 *bt‡
lökî
->btf;

2659 c⁄° *
øw_d©a
;

2660 
i
, 
j
, 
id
, 
îr
;

2661 
__u32
 
øw_sz
;

2664 i‡(
	`btf__ty≥_˙t
(
lökî
->
btf
) == 1)

2667 
i
 = 1; i < 
lökî
->
£c_˙t
; i++) {

2668 
d°_£c
 *
£c
 = &
lökî
->
£cs
[
i
];

2670 i‡(!
£c
->
has_btf
)

2673 
id
 = 
	`btf__add_d©a£c
(
btf
, 
£c
->
£c_«me
, sec->
£c_sz
);

2674 i‡(
id
 < 0) {

2675 
	`¥_w¨n
("failedÅoádd consolidated BTFÅype for datasec '%s': %d\n",

2676 
£c
->
£c_«me
, 
id
);

2677  
id
;

2680 
j
 = 0; j < 
£c
->
£c_v¨_˙t
; j++) {

2681 
btf_v¨_£cöfo
 *
vi
 = &
£c
->
£c_v¨s
[
j
];

2683 i‡(
	`btf__add_d©a£c_v¨_öfo
(
btf
, 
vi
->
ty≥
, vi->
off£t
, vi->
size
))

2684  -
EINVAL
;

2688 
îr
 = 
	`föÆize_btf_ext
(
lökî
);

2689 i‡(
îr
) {

2690 
	`¥_w¨n
(".BTF.exàgíî©i⁄ faûed: %d\n", 
îr
);

2691  
îr
;

2694 
›ts
.
btf_ext
 = 
lökî
->btf_ext;

2695 
îr
 = 
	`btf__dedup
(
lökî
->
btf
, &
›ts
);

2696 i‡(
îr
) {

2697 
	`¥_w¨n
("BTF dedu∞Áûed: %d\n", 
îr
);

2698  
îr
;

2702 
øw_d©a
 = 
	`btf__øw_d©a
(
lökî
->
btf
, &
øw_sz
);

2703 i‡(!
øw_d©a
)

2704  -
ENOMEM
;

2706 
îr
 = 
	`emô_ñf_d©a_£c
(
lökî
, 
BTF_ELF_SEC
, 8, 
øw_d©a
, 
øw_sz
);

2707 i‡(
îr
) {

2708 
	`¥_w¨n
("ÁûedÅÿwrôêouà.BTF ELF se˘i⁄: %d\n", 
îr
);

2709  
îr
;

2713 i‡(
lökî
->
btf_ext
) {

2714 
øw_d©a
 = 
	`btf_ext__gë_øw_d©a
(
lökî
->
btf_ext
, &
øw_sz
);

2715 i‡(!
øw_d©a
)

2716  -
ENOMEM
;

2718 
îr
 = 
	`emô_ñf_d©a_£c
(
lökî
, 
BTF_EXT_ELF_SEC
, 8, 
øw_d©a
, 
øw_sz
);

2719 i‡(
îr
) {

2720 
	`¥_w¨n
("ÁûedÅÿwrôêouà.BTF.exàELF se˘i⁄: %d\n", 
îr
);

2721  
îr
;

2726 
	}
}

2728 
	$emô_btf_ext_d©a
(
bpf_lökî
 *
lökî
, *
ouçut
,

2729 c⁄° *
£c_«me
, 
btf_ext_£c_d©a
 *
£c_d©a
)

2731 
btf_ext_öfo_£c
 *
£c_öfo
;

2732 *
cur
 = 
ouçut
;

2733 
°r_off
;

2734 
size_t
 
sz
;

2736 i‡(!
£c_d©a
->
ªc_˙t
)

2739 
°r_off
 = 
	`btf__add_°r
(
lökî
->
btf
, 
£c_«me
);

2740 i‡(
°r_off
 < 0)

2741  -
ENOMEM
;

2743 
£c_öfo
 = 
cur
;

2744 
£c_öfo
->
£c_«me_off
 = 
°r_off
;

2745 
£c_öfo
->
num_öfo
 = 
£c_d©a
->
ªc_˙t
;

2746 
cur
 +(
btf_ext_öfo_£c
);

2748 
sz
 = 
£c_d©a
->
ªc_˙t
 * sec_d©a->
ªc_sz
;

2749 
	`mem˝y
(
cur
, 
£c_d©a
->
ªcs
, 
sz
);

2750 
cur
 +
sz
;

2752  
cur
 - 
ouçut
;

2753 
	}
}

2755 
	$föÆize_btf_ext
(
bpf_lökî
 *
lökî
)

2757 
size_t
 
funcs_sz
 = 0, 
löes_sz
 = 0, 
c‹e_ªlos_sz
 = 0, 
tŸÆ_sz
 = 0;

2758 
size_t
 
func_ªc_sz
 = 0, 
löe_ªc_sz
 = 0, 
c‹e_ªlo_ªc_sz
 = 0;

2759 
btf_ext_hódî
 *
hdr
;

2760 *
d©a
, *
cur
;

2761 
i
, 
îr
, 
sz
;

2767 
i
 = 1; i < 
lökî
->
£c_˙t
; i++) {

2768 
d°_£c
 *
£c
 = &
lökî
->
£cs
[
i
];

2770 i‡(
£c
->
func_öfo
.
ªc_˙t
) {

2771 i‡(
func_ªc_sz
 == 0)

2772 
func_ªc_sz
 = 
£c
->
func_öfo
.
ªc_sz
;

2773 i‡(
func_ªc_sz
 !
£c
->
func_öfo
.
ªc_sz
) {

2774 
	`¥_w¨n
("mismatch in func_infoÑecord size %zu != %u\n",

2775 
func_ªc_sz
, 
£c
->
func_öfo
.
ªc_sz
);

2776  -
EINVAL
;

2779 
funcs_sz
 +(
btf_ext_öfo_£c
Ë+ 
func_ªc_sz
 * 
£c
->
func_öfo
.
ªc_˙t
;

2781 i‡(
£c
->
löe_öfo
.
ªc_˙t
) {

2782 i‡(
löe_ªc_sz
 == 0)

2783 
löe_ªc_sz
 = 
£c
->
löe_öfo
.
ªc_sz
;

2784 i‡(
löe_ªc_sz
 !
£c
->
löe_öfo
.
ªc_sz
) {

2785 
	`¥_w¨n
("mismatch inÜine_infoÑecord size %zu != %u\n",

2786 
löe_ªc_sz
, 
£c
->
löe_öfo
.
ªc_sz
);

2787  -
EINVAL
;

2790 
löes_sz
 +(
btf_ext_öfo_£c
Ë+ 
löe_ªc_sz
 * 
£c
->
löe_öfo
.
ªc_˙t
;

2792 i‡(
£c
->
c‹e_ªlo_öfo
.
ªc_˙t
) {

2793 i‡(
c‹e_ªlo_ªc_sz
 == 0)

2794 
c‹e_ªlo_ªc_sz
 = 
£c
->
c‹e_ªlo_öfo
.
ªc_sz
;

2795 i‡(
c‹e_ªlo_ªc_sz
 !
£c
->
c‹e_ªlo_öfo
.
ªc_sz
) {

2796 
	`¥_w¨n
("mismatch in core_relo_infoÑecord size %zu != %u\n",

2797 
c‹e_ªlo_ªc_sz
, 
£c
->
c‹e_ªlo_öfo
.
ªc_sz
);

2798  -
EINVAL
;

2801 
c‹e_ªlos_sz
 +(
btf_ext_öfo_£c
Ë+ 
c‹e_ªlo_ªc_sz
 * 
£c
->
c‹e_ªlo_öfo
.
ªc_˙t
;

2805 i‡(!
funcs_sz
 && !
löes_sz
 && !
c‹e_ªlos_sz
)

2808 
tŸÆ_sz
 +(
btf_ext_hódî
);

2809 i‡(
funcs_sz
) {

2810 
funcs_sz
 +(
__u32
);

2811 
tŸÆ_sz
 +
funcs_sz
;

2813 i‡(
löes_sz
) {

2814 
löes_sz
 +(
__u32
);

2815 
tŸÆ_sz
 +
löes_sz
;

2817 i‡(
c‹e_ªlos_sz
) {

2818 
c‹e_ªlos_sz
 +(
__u32
);

2819 
tŸÆ_sz
 +
c‹e_ªlos_sz
;

2822 
cur
 = 
d©a
 = 
	`ˇŒoc
(1, 
tŸÆ_sz
);

2823 i‡(!
d©a
)

2824  -
ENOMEM
;

2826 
hdr
 = 
cur
;

2827 
hdr
->
magic
 = 
BTF_MAGIC
;

2828 
hdr
->
vîsi⁄
 = 
BTF_VERSION
;

2829 
hdr
->
Êags
 = 0;

2830 
hdr
->
hdr_Àn
 = (
btf_ext_hódî
);

2831 
cur
 +(
btf_ext_hódî
);

2834 
hdr
->
func_öfo_off
 = 0;

2835 
hdr
->
func_öfo_Àn
 = 
funcs_sz
;

2836 
hdr
->
löe_öfo_off
 = 
funcs_sz
;

2837 
hdr
->
löe_öfo_Àn
 = 
löes_sz
;

2838 
hdr
->
c‹e_ªlo_off
 = 
funcs_sz
 + 
löes_sz
;

2839 
hdr
->
c‹e_ªlo_Àn
 = 
c‹e_ªlos_sz
;

2841 i‡(
funcs_sz
) {

2842 *(
__u32
 *)
cur
 = 
func_ªc_sz
;

2843 
cur
 +(
__u32
);

2845 
i
 = 1; i < 
lökî
->
£c_˙t
; i++) {

2846 
d°_£c
 *
£c
 = &
lökî
->
£cs
[
i
];

2848 
sz
 = 
	`emô_btf_ext_d©a
(
lökî
, 
cur
, 
£c
->
£c_«me
, &£c->
func_öfo
);

2849 i‡(
sz
 < 0) {

2850 
îr
 = 
sz
;

2851 
out
;

2854 
cur
 +
sz
;

2858 i‡(
löes_sz
) {

2859 *(
__u32
 *)
cur
 = 
löe_ªc_sz
;

2860 
cur
 +(
__u32
);

2862 
i
 = 1; i < 
lökî
->
£c_˙t
; i++) {

2863 
d°_£c
 *
£c
 = &
lökî
->
£cs
[
i
];

2865 
sz
 = 
	`emô_btf_ext_d©a
(
lökî
, 
cur
, 
£c
->
£c_«me
, &£c->
löe_öfo
);

2866 i‡(
sz
 < 0) {

2867 
îr
 = 
sz
;

2868 
out
;

2871 
cur
 +
sz
;

2875 i‡(
c‹e_ªlos_sz
) {

2876 *(
__u32
 *)
cur
 = 
c‹e_ªlo_ªc_sz
;

2877 
cur
 +(
__u32
);

2879 
i
 = 1; i < 
lökî
->
£c_˙t
; i++) {

2880 
d°_£c
 *
£c
 = &
lökî
->
£cs
[
i
];

2882 
sz
 = 
	`emô_btf_ext_d©a
(
lökî
, 
cur
, 
£c
->
£c_«me
, &£c->
c‹e_ªlo_öfo
);

2883 i‡(
sz
 < 0) {

2884 
îr
 = 
sz
;

2885 
out
;

2888 
cur
 +
sz
;

2892 
lökî
->
btf_ext
 = 
	`btf_ext__√w
(
d©a
, 
tŸÆ_sz
);

2893 
îr
 = 
	`libbpf_gë_îr‹
(
lökî
->
btf_ext
);

2894 i‡(
îr
) {

2895 
lökî
->
btf_ext
 = 
NULL
;

2896 
	`¥_w¨n
("ÁûedÅÿ∑r£ föÆ .BTF.exàd©a: %d\n", 
îr
);

2897 
out
;

2900 
out
:

2901 
	`‰ì
(
d©a
);

2902  
îr
;

2903 
	}
}

	@netlink.c

4 
	~<°dlib.h
>

5 
	~<mem‹y.h
>

6 
	~<uni°d.h
>

7 
	~<¨∑/öë.h
>

8 
	~<löux/bpf.h
>

9 
	~<löux/if_ëhî.h
>

10 
	~<löux/pkt_˛s.h
>

11 
	~<löux/π√éök.h
>

12 
	~<sys/sockë.h
>

13 
	~<î∫o.h
>

14 
	~<time.h
>

16 
	~"bpf.h
"

17 
	~"libbpf.h
"

18 
	~"libbpf_öã∫Æ.h
"

19 
	~"∆©å.h
"

21 #i‚de‡
SOL_NETLINK


22 
	#SOL_NETLINK
 270

	)

25 (*
	tlibbpf_dump_∆msg_t
)(*
	tcookõ
, *
	tmsg
, 
	t∆©å
 **
	ttb
);

27 (*
	t__dump_∆msg_t
)(
	t∆msghdr
 *
	t∆msg
, 
	tlibbpf_dump_∆msg_t
,

28 *
	tcookõ
);

30 
	sxdp_id_md
 {

31 
ifödex
;

32 
__u32
 
Êags
;

33 
xdp_lök_öfo
 
öfo
;

36 
	$libbpf_√éök_›í
(
__u32
 *
∆_pid
)

38 
sockaddr_∆
 
ß
;

39 
sockÀn_t
 
addæí
;

40 
⁄e
 = 1, 
ªt
;

41 
sock
;

43 
	`mem£t
(&
ß
, 0, (sa));

44 
ß
.
∆_Ámûy
 = 
AF_NETLINK
;

46 
sock
 = 
	`sockë
(
AF_NETLINK
, 
SOCK_RAW
 | 
SOCK_CLOEXEC
, 
NETLINK_ROUTE
);

47 i‡(
sock
 < 0)

48  -
î∫o
;

50 i‡(
	`£tsock›t
(
sock
, 
SOL_NETLINK
, 
NETLINK_EXT_ACK
,

51 &
⁄e
, (one)) < 0) {

52 
	`¥_w¨n
("NetlinkÉrrorÑeportingÇot supported\n");

55 i‡(
	`böd
(
sock
, (
sockaddr
 *)&
ß
, (sa)) < 0) {

56 
ªt
 = -
î∫o
;

57 
˛ónup
;

60 
addæí
 = (
ß
);

61 i‡(
	`gësock«me
(
sock
, (
sockaddr
 *)&
ß
, &
addæí
) < 0) {

62 
ªt
 = -
î∫o
;

63 
˛ónup
;

66 i‡(
addæí
 !(
ß
)) {

67 
ªt
 = -
LIBBPF_ERRNO__INTERNAL
;

68 
˛ónup
;

71 *
∆_pid
 = 
ß
.nl_pid;

72  
sock
;

74 
˛ónup
:

75 
	`˛o£
(
sock
);

76  
ªt
;

77 
	}
}

79 
	$libbpf_√éök_˛o£
(
sock
)

81 
	`˛o£
(
sock
);

82 
	}
}

85 
	mNL_CONT
,

86 
	mNL_NEXT
,

87 
	mNL_DONE
,

90 
	$√éök_ªcvmsg
(
sock
, 
msghdr
 *
mhdr
, 
Êags
)

92 
Àn
;

95 
Àn
 = 
	`ªcvmsg
(
sock
, 
mhdr
, 
Êags
);

96 } 
Àn
 < 0 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
));

98 i‡(
Àn
 < 0)

99  -
î∫o
;

100  
Àn
;

101 
	}
}

103 
	$Æloc_iov
(
iovec
 *
iov
, 
Àn
)

105 *
nbuf
;

107 
nbuf
 = 
	`ªÆloc
(
iov
->
iov_ba£
, 
Àn
);

108 i‡(!
nbuf
)

109  -
ENOMEM
;

111 
iov
->
iov_ba£
 = 
nbuf
;

112 
iov
->
iov_Àn
 = 
Àn
;

114 
	}
}

116 
	$libbpf_√éök_ªcv
(
sock
, 
__u32
 
∆_pid
, 
£q
,

117 
__dump_∆msg_t
 
_‚
, 
libbpf_dump_∆msg_t
 
‚
,

118 *
cookõ
)

120 
iovec
 
iov
 = {};

121 
msghdr
 
mhdr
 = {

122 .
msg_iov
 = &
iov
,

123 .
msg_iovÀn
 = 1,

125 
boﬁ
 
mu…ù¨t
 = 
åue
;

126 
∆msgîr
 *
îr
;

127 
∆msghdr
 *
nh
;

128 
Àn
, 
ªt
;

130 
ªt
 = 
	`Æloc_iov
(&
iov
, 4096);

131 i‡(
ªt
)

132 
d⁄e
;

134 
mu…ù¨t
) {

135 
°¨t
:

136 
mu…ù¨t
 = 
Ál£
;

137 
Àn
 = 
	`√éök_ªcvmsg
(
sock
, &
mhdr
, 
MSG_PEEK
 | 
MSG_TRUNC
);

138 i‡(
Àn
 < 0) {

139 
ªt
 = 
Àn
;

140 
d⁄e
;

143 i‡(
Àn
 > 
iov
.
iov_Àn
) {

144 
ªt
 = 
	`Æloc_iov
(&
iov
, 
Àn
);

145 i‡(
ªt
)

146 
d⁄e
;

149 
Àn
 = 
	`√éök_ªcvmsg
(
sock
, &
mhdr
, 0);

150 i‡(
Àn
 < 0) {

151 
ªt
 = 
Àn
;

152 
d⁄e
;

155 i‡(
Àn
 == 0)

158 
nh
 = (
∆msghdr
 *)
iov
.
iov_ba£
; 
	`NLMSG_OK
“h, 
Àn
);

159 
nh
 = 
	`NLMSG_NEXT
“h, 
Àn
)) {

160 i‡(
nh
->
∆msg_pid
 !
∆_pid
) {

161 
ªt
 = -
LIBBPF_ERRNO__WRNGPID
;

162 
d⁄e
;

164 i‡(
nh
->
∆msg_£q
 !
£q
) {

165 
ªt
 = -
LIBBPF_ERRNO__INVSEQ
;

166 
d⁄e
;

168 i‡(
nh
->
∆msg_Êags
 & 
NLM_F_MULTI
)

169 
mu…ù¨t
 = 
åue
;

170 
nh
->
∆msg_ty≥
) {

171 
NLMSG_ERROR
:

172 
îr
 = (
∆msgîr
 *)
	`NLMSG_DATA
(
nh
);

173 i‡(!
îr
->
îr‹
)

175 
ªt
 = 
îr
->
îr‹
;

176 
	`libbpf_∆a_dump_îr‹msg
(
nh
);

177 
d⁄e
;

178 
NLMSG_DONE
:

179 
ªt
 = 0;

180 
d⁄e
;

184 i‡(
_‚
) {

185 
ªt
 = 
	`_‚
(
nh
, 
‚
, 
cookõ
);

186 
ªt
) {

187 
NL_CONT
:

189 
NL_NEXT
:

190 
°¨t
;

191 
NL_DONE
:

192 
ªt
 = 0;

193 
d⁄e
;

195 
d⁄e
;

200 
ªt
 = 0;

201 
d⁄e
:

202 
	`‰ì
(
iov
.
iov_ba£
);

203  
ªt
;

204 
	}
}

206 
	$libbpf_√éök_£nd_ªcv
(
libbpf_∆a_ªq
 *
ªq
,

207 
__dump_∆msg_t
 
∑r£_msg
,

208 
libbpf_dump_∆msg_t
 
∑r£_©å
,

209 *
cookõ
)

211 
__u32
 
∆_pid
 = 0;

212 
sock
, 
ªt
;

214 
sock
 = 
	`libbpf_√éök_›í
(&
∆_pid
);

215 i‡(
sock
 < 0)

216  
sock
;

218 
ªq
->
nh
.
∆msg_pid
 = 0;

219 
ªq
->
nh
.
∆msg_£q
 = 
	`time
(
NULL
);

221 i‡(
	`£nd
(
sock
, 
ªq
,Ñeq->
nh
.
∆msg_Àn
, 0) < 0) {

222 
ªt
 = -
î∫o
;

223 
out
;

226 
ªt
 = 
	`libbpf_√éök_ªcv
(
sock
, 
∆_pid
, 
ªq
->
nh
.
∆msg_£q
,

227 
∑r£_msg
, 
∑r£_©å
, 
cookõ
);

228 
out
:

229 
	`libbpf_√éök_˛o£
(
sock
);

230  
ªt
;

231 
	}
}

233 
	$__bpf_£t_lök_xdp_fd_ª∂a˚
(
ifödex
, 
fd
, 
ﬁd_fd
,

234 
__u32
 
Êags
)

236 
∆©å
 *
∆a
;

237 
ªt
;

238 
libbpf_∆a_ªq
 
ªq
;

240 
	`mem£t
(&
ªq
, 0, (req));

241 
ªq
.
nh
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iföfomsg
));

242 
ªq
.
nh
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_ACK
;

243 
ªq
.
nh
.
∆msg_ty≥
 = 
RTM_SETLINK
;

244 
ªq
.
iföfo
.
ifi_Ámûy
 = 
AF_UNSPEC
;

245 
ªq
.
iföfo
.
ifi_ödex
 = 
ifödex
;

247 
∆a
 = 
	`∆©å_begö_√°ed
(&
ªq
, 
IFLA_XDP
);

248 i‡(!
∆a
)

249  -
EMSGSIZE
;

250 
ªt
 = 
	`∆©å_add
(&
ªq
, 
IFLA_XDP_FD
, &
fd
, (fd));

251 i‡(
ªt
 < 0)

252  
ªt
;

253 i‡(
Êags
) {

254 
ªt
 = 
	`∆©å_add
(&
ªq
, 
IFLA_XDP_FLAGS
, &
Êags
, (flags));

255 i‡(
ªt
 < 0)

256  
ªt
;

258 i‡(
Êags
 & 
XDP_FLAGS_REPLACE
) {

259 
ªt
 = 
	`∆©å_add
(&
ªq
, 
IFLA_XDP_EXPECTED_FD
, &
ﬁd_fd
,

260 (
ﬁd_fd
));

261 i‡(
ªt
 < 0)

262  
ªt
;

264 
	`∆©å_íd_√°ed
(&
ªq
, 
∆a
);

266  
	`libbpf_√éök_£nd_ªcv
(&
ªq
, 
NULL
, NULL, NULL);

267 
	}
}

269 
	$bpf_xdp_©èch
(
ifödex
, 
¥og_fd
, 
__u32
 
Êags
, c⁄° 
bpf_xdp_©èch_›ts
 *
›ts
)

271 
ﬁd_¥og_fd
, 
îr
;

273 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_xdp_©èch_›ts
))

274  
	`libbpf_îr
(-
EINVAL
);

276 
ﬁd_¥og_fd
 = 
	`OPTS_GET
(
›ts
, old_prog_fd, 0);

277 i‡(
ﬁd_¥og_fd
)

278 
Êags
 |
XDP_FLAGS_REPLACE
;

280 
ﬁd_¥og_fd
 = -1;

282 
îr
 = 
	`__bpf_£t_lök_xdp_fd_ª∂a˚
(
ifödex
, 
¥og_fd
, 
ﬁd_¥og_fd
, 
Êags
);

283  
	`libbpf_îr
(
îr
);

284 
	}
}

286 
	$bpf_xdp_dëach
(
ifödex
, 
__u32
 
Êags
, c⁄° 
bpf_xdp_©èch_›ts
 *
›ts
)

288  
	`bpf_xdp_©èch
(
ifödex
, -1, 
Êags
, 
›ts
);

289 
	}
}

291 
	$bpf_£t_lök_xdp_fd_›ts
(
ifödex
, 
fd
, 
__u32
 
Êags
,

292 c⁄° 
bpf_xdp_£t_lök_›ts
 *
›ts
)

294 
ﬁd_fd
 = -1, 
ªt
;

296 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_xdp_£t_lök_›ts
))

297  
	`libbpf_îr
(-
EINVAL
);

299 i‡(
	`OPTS_HAS
(
›ts
, 
ﬁd_fd
)) {

300 
ﬁd_fd
 = 
	`OPTS_GET
(
›ts
, old_fd, -1);

301 
Êags
 |
XDP_FLAGS_REPLACE
;

304 
ªt
 = 
	`__bpf_£t_lök_xdp_fd_ª∂a˚
(
ifödex
, 
fd
, 
ﬁd_fd
, 
Êags
);

305  
	`libbpf_îr
(
ªt
);

306 
	}
}

308 
	$bpf_£t_lök_xdp_fd
(
ifödex
, 
fd
, 
__u32
 
Êags
)

310 
ªt
;

312 
ªt
 = 
	`__bpf_£t_lök_xdp_fd_ª∂a˚
(
ifödex
, 
fd
, 0, 
Êags
);

313  
	`libbpf_îr
(
ªt
);

314 
	}
}

316 
	$__dump_lök_∆msg
(
∆msghdr
 *
∆h
,

317 
libbpf_dump_∆msg_t
 
dump_lök_∆msg
, *
cookõ
)

319 
∆©å
 *
tb
[
IFLA_MAX
 + 1], *
©å
;

320 
iföfomsg
 *
ifi
 = 
	`NLMSG_DATA
(
∆h
);

321 
Àn
;

323 
Àn
 = 
∆h
->
∆msg_Àn
 - 
	`NLMSG_LENGTH
((*
ifi
));

324 
©å
 = (
∆©å
 *Ë((*Ë
ifi
 + 
	`NLMSG_ALIGN
((*ifi)));

326 i‡(
	`libbpf_∆a_∑r£
(
tb
, 
IFLA_MAX
, 
©å
, 
Àn
, 
NULL
) != 0)

327  -
LIBBPF_ERRNO__NLPARSE
;

329  
	`dump_lök_∆msg
(
cookõ
, 
ifi
, 
tb
);

330 
	}
}

332 
	$gë_xdp_öfo
(*
cookõ
, *
msg
, 
∆©å
 **
tb
)

334 
∆©å
 *
xdp_tb
[
IFLA_XDP_MAX
 + 1];

335 
xdp_id_md
 *
xdp_id
 = 
cookõ
;

336 
iföfomsg
 *
iföfo
 = 
msg
;

337 
ªt
;

339 i‡(
xdp_id
->
ifödex
 && xdp_id->ifödex !
iföfo
->
ifi_ödex
)

342 i‡(!
tb
[
IFLA_XDP
])

345 
ªt
 = 
	`libbpf_∆a_∑r£_√°ed
(
xdp_tb
, 
IFLA_XDP_MAX
, 
tb
[
IFLA_XDP
], 
NULL
);

346 i‡(
ªt
)

347  
ªt
;

349 i‡(!
xdp_tb
[
IFLA_XDP_ATTACHED
])

352 
xdp_id
->
öfo
.
©èch_mode
 = 
	`libbpf_∆a_gë©å_u8
(

353 
xdp_tb
[
IFLA_XDP_ATTACHED
]);

355 i‡(
xdp_id
->
öfo
.
©èch_mode
 =
XDP_ATTACHED_NONE
)

358 i‡(
xdp_tb
[
IFLA_XDP_PROG_ID
])

359 
xdp_id
->
öfo
.
¥og_id
 = 
	`libbpf_∆a_gë©å_u32
(

360 
xdp_tb
[
IFLA_XDP_PROG_ID
]);

362 i‡(
xdp_tb
[
IFLA_XDP_SKB_PROG_ID
])

363 
xdp_id
->
öfo
.
skb_¥og_id
 = 
	`libbpf_∆a_gë©å_u32
(

364 
xdp_tb
[
IFLA_XDP_SKB_PROG_ID
]);

366 i‡(
xdp_tb
[
IFLA_XDP_DRV_PROG_ID
])

367 
xdp_id
->
öfo
.
drv_¥og_id
 = 
	`libbpf_∆a_gë©å_u32
(

368 
xdp_tb
[
IFLA_XDP_DRV_PROG_ID
]);

370 i‡(
xdp_tb
[
IFLA_XDP_HW_PROG_ID
])

371 
xdp_id
->
öfo
.
hw_¥og_id
 = 
	`libbpf_∆a_gë©å_u32
(

372 
xdp_tb
[
IFLA_XDP_HW_PROG_ID
]);

375 
	}
}

377 
	$bpf_xdp_quîy
(
ifödex
, 
xdp_Êags
, 
bpf_xdp_quîy_›ts
 *
›ts
)

379 
libbpf_∆a_ªq
 
ªq
 = {

380 .
nh
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iföfomsg
)),

381 .
nh
.
∆msg_ty≥
 = 
RTM_GETLINK
,

382 .
nh
.
∆msg_Êags
 = 
NLM_F_DUMP
 | 
NLM_F_REQUEST
,

383 .
iföfo
.
ifi_Ámûy
 = 
AF_PACKET
,

385 
xdp_id_md
 
xdp_id
 = {};

386 
îr
;

388 i‡(!
	`OPTS_VALID
(
›ts
, 
bpf_xdp_quîy_›ts
))

389  
	`libbpf_îr
(-
EINVAL
);

391 i‡(
xdp_Êags
 & ~
XDP_FLAGS_MASK
)

392  
	`libbpf_îr
(-
EINVAL
);

395 
xdp_Êags
 &
XDP_FLAGS_SKB_MODE
 | 
XDP_FLAGS_DRV_MODE
 | 
XDP_FLAGS_HW_MODE
;

396 i‡(
xdp_Êags
 & (xdp_flags - 1))

397  
	`libbpf_îr
(-
EINVAL
);

399 
xdp_id
.
ifödex
 = ifindex;

400 
xdp_id
.
Êags
 = 
xdp_Êags
;

402 
îr
 = 
	`libbpf_√éök_£nd_ªcv
(&
ªq
, 
__dump_lök_∆msg
,

403 
gë_xdp_öfo
, &
xdp_id
);

404 i‡(
îr
)

405  
	`libbpf_îr
(
îr
);

407 
	`OPTS_SET
(
›ts
, 
¥og_id
, 
xdp_id
.
öfo
.prog_id);

408 
	`OPTS_SET
(
›ts
, 
drv_¥og_id
, 
xdp_id
.
öfo
.drv_prog_id);

409 
	`OPTS_SET
(
›ts
, 
hw_¥og_id
, 
xdp_id
.
öfo
.hw_prog_id);

410 
	`OPTS_SET
(
›ts
, 
skb_¥og_id
, 
xdp_id
.
öfo
.skb_prog_id);

411 
	`OPTS_SET
(
›ts
, 
©èch_mode
, 
xdp_id
.
öfo
.attach_mode);

414 
	}
}

416 
	$bpf_gë_lök_xdp_öfo
(
ifödex
, 
xdp_lök_öfo
 *
öfo
,

417 
size_t
 
öfo_size
, 
__u32
 
Êags
)

419 
	`LIBBPF_OPTS
(
bpf_xdp_quîy_›ts
, 
›ts
);

420 
size_t
 
sz
;

421 
îr
;

423 i‡(!
öfo_size
)

424  
	`libbpf_îr
(-
EINVAL
);

426 
îr
 = 
	`bpf_xdp_quîy
(
ifödex
, 
Êags
, &
›ts
);

427 i‡(
îr
)

428  
	`libbpf_îr
(
îr
);

433 
sz
 = 
	`mö
(
öfo_size
, 
	`off£to„nd
(
xdp_lök_öfo
, 
©èch_mode
));

434 
	`mem˝y
(
öfo
, &
›ts
.
¥og_id
, 
sz
);

435 
	`mem£t
((*)
öfo
 + 
sz
, 0, 
öfo_size
 - sz);

438 
	}
}

440 
	$bpf_xdp_quîy_id
(
ifödex
, 
Êags
, 
__u32
 *
¥og_id
)

442 
	`LIBBPF_OPTS
(
bpf_xdp_quîy_›ts
, 
›ts
);

443 
ªt
;

445 
ªt
 = 
	`bpf_xdp_quîy
(
ifödex
, 
Êags
, &
›ts
);

446 i‡(
ªt
)

447  
	`libbpf_îr
(
ªt
);

449 
Êags
 &
XDP_FLAGS_MODES
;

451 i‡(
›ts
.
©èch_mode
 !
XDP_ATTACHED_MULTI
 && !
Êags
)

452 *
¥og_id
 = 
›ts
.prog_id;

453 i‡(
Êags
 & 
XDP_FLAGS_DRV_MODE
)

454 *
¥og_id
 = 
›ts
.
drv_¥og_id
;

455 i‡(
Êags
 & 
XDP_FLAGS_HW_MODE
)

456 *
¥og_id
 = 
›ts
.
hw_¥og_id
;

457 i‡(
Êags
 & 
XDP_FLAGS_SKB_MODE
)

458 *
¥og_id
 = 
›ts
.
skb_¥og_id
;

460 *
¥og_id
 = 0;

463 
	}
}

466 
	$bpf_gë_lök_xdp_id
(
ifödex
, 
__u32
 *
¥og_id
, __u32 
Êags
)

468  
	`bpf_xdp_quîy_id
(
ifödex
, 
Êags
, 
¥og_id
);

469 
	}
}

471 (*
	tqdisc_c⁄fig_t
)(
	tlibbpf_∆a_ªq
 *
	tªq
);

473 
	$˛ß˘_c⁄fig
(
libbpf_∆a_ªq
 *
ªq
)

475 
ªq
->
tc
.
tcm_∑ª¡
 = 
TC_H_CLSACT
;

476 
ªq
->
tc
.
tcm_h™dÀ
 = 
	`TC_H_MAKE
(
TC_H_CLSACT
, 0);

478  
	`∆©å_add
(
ªq
, 
TCA_KIND
, "clsact", ("clsact"));

479 
	}
}

481 
	$©èch_poöt_to_c⁄fig
(
bpf_tc_hook
 *
hook
,

482 
qdisc_c⁄fig_t
 *
c⁄fig
)

484 
	`OPTS_GET
(
hook
, 
©èch_poöt
, 0)) {

485 
BPF_TC_INGRESS
:

486 
BPF_TC_EGRESS
:

487 
BPF_TC_INGRESS
 | 
BPF_TC_EGRESS
:

488 i‡(
	`OPTS_GET
(
hook
, 
∑ª¡
, 0))

489  -
EINVAL
;

490 *
c⁄fig
 = &
˛ß˘_c⁄fig
;

492 
BPF_TC_CUSTOM
:

493  -
EOPNOTSUPP
;

495  -
EINVAL
;

497 
	}
}

499 
	$tc_gë_tcm_∑ª¡
(
bpf_tc_©èch_poöt
 
©èch_poöt
,

500 
__u32
 *
∑ª¡
)

502 
©èch_poöt
) {

503 
BPF_TC_INGRESS
:

504 
BPF_TC_EGRESS
:

505 i‡(*
∑ª¡
)

506  -
EINVAL
;

507 *
∑ª¡
 = 
	`TC_H_MAKE
(
TC_H_CLSACT
,

508 
©èch_poöt
 =
BPF_TC_INGRESS
 ?

509 
TC_H_MIN_INGRESS
 : 
TC_H_MIN_EGRESS
);

511 
BPF_TC_CUSTOM
:

512 i‡(!*
∑ª¡
)

513  -
EINVAL
;

516  -
EINVAL
;

519 
	}
}

521 
	$tc_qdisc_modify
(
bpf_tc_hook
 *
hook
, 
cmd
, 
Êags
)

523 
qdisc_c⁄fig_t
 
c⁄fig
;

524 
ªt
;

525 
libbpf_∆a_ªq
 
ªq
;

527 
ªt
 = 
	`©èch_poöt_to_c⁄fig
(
hook
, &
c⁄fig
);

528 i‡(
ªt
 < 0)

529  
ªt
;

531 
	`mem£t
(&
ªq
, 0, (req));

532 
ªq
.
nh
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tcmsg
));

533 
ªq
.
nh
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_ACK
 | 
Êags
;

534 
ªq
.
nh
.
∆msg_ty≥
 = 
cmd
;

535 
ªq
.
tc
.
tcm_Ámûy
 = 
AF_UNSPEC
;

536 
ªq
.
tc
.
tcm_ifödex
 = 
	`OPTS_GET
(
hook
, 
ifödex
, 0);

538 
ªt
 = 
	`c⁄fig
(&
ªq
);

539 i‡(
ªt
 < 0)

540  
ªt
;

542  
	`libbpf_√éök_£nd_ªcv
(&
ªq
, 
NULL
, NULL, NULL);

543 
	}
}

545 
	$tc_qdisc_¸óã_ex˛
(
bpf_tc_hook
 *
hook
)

547  
	`tc_qdisc_modify
(
hook
, 
RTM_NEWQDISC
, 
NLM_F_CREATE
 | 
NLM_F_EXCL
);

548 
	}
}

550 
	$tc_qdisc_dñëe
(
bpf_tc_hook
 *
hook
)

552  
	`tc_qdisc_modify
(
hook
, 
RTM_DELQDISC
, 0);

553 
	}
}

555 
	$bpf_tc_hook_¸óã
(
bpf_tc_hook
 *
hook
)

557 
ªt
;

559 i‡(!
hook
 || !
	`OPTS_VALID
(hook, 
bpf_tc_hook
) ||

560 
	`OPTS_GET
(
hook
, 
ifödex
, 0) <= 0)

561  
	`libbpf_îr
(-
EINVAL
);

563 
ªt
 = 
	`tc_qdisc_¸óã_ex˛
(
hook
);

564  
	`libbpf_îr
(
ªt
);

565 
	}
}

567 
__bpf_tc_dëach
(c⁄° 
bpf_tc_hook
 *
hook
,

568 c⁄° 
bpf_tc_›ts
 *
›ts
,

569 c⁄° 
boﬁ
 
Êush
);

571 
	$bpf_tc_hook_de°roy
(
bpf_tc_hook
 *
hook
)

573 i‡(!
hook
 || !
	`OPTS_VALID
(hook, 
bpf_tc_hook
) ||

574 
	`OPTS_GET
(
hook
, 
ifödex
, 0) <= 0)

575  
	`libbpf_îr
(-
EINVAL
);

577 
	`OPTS_GET
(
hook
, 
©èch_poöt
, 0)) {

578 
BPF_TC_INGRESS
:

579 
BPF_TC_EGRESS
:

580  
	`libbpf_îr
(
	`__bpf_tc_dëach
(
hook
, 
NULL
, 
åue
));

581 
BPF_TC_INGRESS
 | 
BPF_TC_EGRESS
:

582  
	`libbpf_îr
(
	`tc_qdisc_dñëe
(
hook
));

583 
BPF_TC_CUSTOM
:

584  
	`libbpf_îr
(-
EOPNOTSUPP
);

586  
	`libbpf_îr
(-
EINVAL
);

588 
	}
}

590 
	sbpf_cb_˘x
 {

591 
bpf_tc_›ts
 *
	m›ts
;

592 
boﬁ
 
	m¥o˚s£d
;

595 
	$__gë_tc_öfo
(*
cookõ
, 
tcmsg
 *
tc
, 
∆©å
 **
tb
,

596 
boﬁ
 
uniˇ°
)

598 
∆©å
 *
tbb
[
TCA_BPF_MAX
 + 1];

599 
bpf_cb_˘x
 *
öfo
 = 
cookõ
;

601 i‡(!
öfo
 || !öfo->
›ts
)

602  -
EINVAL
;

603 i‡(
uniˇ°
 && 
öfo
->
¥o˚s£d
)

604  -
EINVAL
;

605 i‡(!
tb
[
TCA_OPTIONS
])

606  
NL_CONT
;

608 
	`libbpf_∆a_∑r£_√°ed
(
tbb
, 
TCA_BPF_MAX
, 
tb
[
TCA_OPTIONS
], 
NULL
);

609 i‡(!
tbb
[
TCA_BPF_ID
])

610  -
EINVAL
;

612 
	`OPTS_SET
(
öfo
->
›ts
, 
¥og_id
, 
	`libbpf_∆a_gë©å_u32
(
tbb
[
TCA_BPF_ID
]));

613 
	`OPTS_SET
(
öfo
->
›ts
, 
h™dÀ
, 
tc
->
tcm_h™dÀ
);

614 
	`OPTS_SET
(
öfo
->
›ts
, 
¥i‹ôy
, 
	`TC_H_MAJ
(
tc
->
tcm_öfo
) >> 16);

616 
öfo
->
¥o˚s£d
 = 
åue
;

617  
uniˇ°
 ? 
NL_NEXT
 : 
NL_DONE
;

618 
	}
}

620 
	$gë_tc_öfo
(
∆msghdr
 *
nh
, 
libbpf_dump_∆msg_t
 
‚
,

621 *
cookõ
)

623 
tcmsg
 *
tc
 = 
	`NLMSG_DATA
(
nh
);

624 
∆©å
 *
tb
[
TCA_MAX
 + 1];

626 
	`libbpf_∆a_∑r£
(
tb
, 
TCA_MAX
,

627 (
∆©å
 *)((*)
tc
 + 
	`NLMSG_ALIGN
((*tc))),

628 
	`NLMSG_PAYLOAD
(
nh
, (*
tc
)), 
NULL
);

629 i‡(!
tb
[
TCA_KIND
])

630  
NL_CONT
;

631  
	`__gë_tc_öfo
(
cookõ
, 
tc
, 
tb
, 
nh
->
∆msg_Êags
 & 
NLM_F_ECHO
);

632 
	}
}

634 
	$tc_add_fd_™d_«me
(
libbpf_∆a_ªq
 *
ªq
, 
fd
)

636 
bpf_¥og_öfo
 
öfo
 = {};

637 
__u32
 
öfo_Àn
 = (
öfo
);

638 
«me
[256];

639 
Àn
, 
ªt
;

641 
ªt
 = 
	`bpf_obj_gë_öfo_by_fd
(
fd
, &
öfo
, &
öfo_Àn
);

642 i‡(
ªt
 < 0)

643  
ªt
;

645 
ªt
 = 
	`∆©å_add
(
ªq
, 
TCA_BPF_FD
, &
fd
, (fd));

646 i‡(
ªt
 < 0)

647  
ªt
;

648 
Àn
 = 
	`¢¥ötf
(
«me
, “ame), "%s:[%u]", 
öfo
.«me, info.
id
);

649 i‡(
Àn
 < 0)

650  -
î∫o
;

651 i‡(
Àn
 >(
«me
))

652  -
ENAMETOOLONG
;

653  
	`∆©å_add
(
ªq
, 
TCA_BPF_NAME
, 
«me
, 
Àn
 + 1);

654 
	}
}

656 
	$bpf_tc_©èch
(c⁄° 
bpf_tc_hook
 *
hook
, 
bpf_tc_›ts
 *
›ts
)

658 
__u32
 
¥Ÿocﬁ
, 
bpf_Êags
, 
h™dÀ
, 
¥i‹ôy
, 
∑ª¡
, 
¥og_id
, 
Êags
;

659 
ªt
, 
ifödex
, 
©èch_poöt
, 
¥og_fd
;

660 
bpf_cb_˘x
 
öfo
 = {};

661 
libbpf_∆a_ªq
 
ªq
;

662 
∆©å
 *
∆a
;

664 i‡(!
hook
 || !
›ts
 ||

665 !
	`OPTS_VALID
(
hook
, 
bpf_tc_hook
) ||

666 !
	`OPTS_VALID
(
›ts
, 
bpf_tc_›ts
))

667  
	`libbpf_îr
(-
EINVAL
);

669 
ifödex
 = 
	`OPTS_GET
(
hook
, ifindex, 0);

670 
∑ª¡
 = 
	`OPTS_GET
(
hook
,Öarent, 0);

671 
©èch_poöt
 = 
	`OPTS_GET
(
hook
,áttach_point, 0);

673 
h™dÀ
 = 
	`OPTS_GET
(
›ts
, handle, 0);

674 
¥i‹ôy
 = 
	`OPTS_GET
(
›ts
,Öriority, 0);

675 
¥og_fd
 = 
	`OPTS_GET
(
›ts
,Örog_fd, 0);

676 
¥og_id
 = 
	`OPTS_GET
(
›ts
,Örog_id, 0);

677 
Êags
 = 
	`OPTS_GET
(
›ts
, flags, 0);

679 i‡(
ifödex
 <0 || !
¥og_fd
 || 
¥og_id
)

680  
	`libbpf_îr
(-
EINVAL
);

681 i‡(
¥i‹ôy
 > 
UINT16_MAX
)

682  
	`libbpf_îr
(-
EINVAL
);

683 i‡(
Êags
 & ~
BPF_TC_F_REPLACE
)

684  
	`libbpf_îr
(-
EINVAL
);

686 
Êags
 = (Êag†& 
BPF_TC_F_REPLACE
Ë? 
NLM_F_REPLACE
 : 
NLM_F_EXCL
;

687 
¥Ÿocﬁ
 = 
ETH_P_ALL
;

689 
	`mem£t
(&
ªq
, 0, (req));

690 
ªq
.
nh
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tcmsg
));

691 
ªq
.
nh
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_ACK
 | 
NLM_F_CREATE
 |

692 
NLM_F_ECHO
 | 
Êags
;

693 
ªq
.
nh
.
∆msg_ty≥
 = 
RTM_NEWTFILTER
;

694 
ªq
.
tc
.
tcm_Ámûy
 = 
AF_UNSPEC
;

695 
ªq
.
tc
.
tcm_ifödex
 = 
ifödex
;

696 
ªq
.
tc
.
tcm_h™dÀ
 = 
h™dÀ
;

697 
ªq
.
tc
.
tcm_öfo
 = 
	`TC_H_MAKE
(
¥i‹ôy
 << 16, 
	`ht⁄s
(
¥Ÿocﬁ
));

699 
ªt
 = 
	`tc_gë_tcm_∑ª¡
(
©èch_poöt
, &
∑ª¡
);

700 i‡(
ªt
 < 0)

701  
	`libbpf_îr
(
ªt
);

702 
ªq
.
tc
.
tcm_∑ª¡
 = 
∑ª¡
;

704 
ªt
 = 
	`∆©å_add
(&
ªq
, 
TCA_KIND
, "bpf", ("bpf"));

705 i‡(
ªt
 < 0)

706  
	`libbpf_îr
(
ªt
);

707 
∆a
 = 
	`∆©å_begö_√°ed
(&
ªq
, 
TCA_OPTIONS
);

708 i‡(!
∆a
)

709  
	`libbpf_îr
(-
EMSGSIZE
);

710 
ªt
 = 
	`tc_add_fd_™d_«me
(&
ªq
, 
¥og_fd
);

711 i‡(
ªt
 < 0)

712  
	`libbpf_îr
(
ªt
);

713 
bpf_Êags
 = 
TCA_BPF_FLAG_ACT_DIRECT
;

714 
ªt
 = 
	`∆©å_add
(&
ªq
, 
TCA_BPF_FLAGS
, &
bpf_Êags
, (bpf_flags));

715 i‡(
ªt
 < 0)

716  
	`libbpf_îr
(
ªt
);

717 
	`∆©å_íd_√°ed
(&
ªq
, 
∆a
);

719 
öfo
.
›ts
 = opts;

721 
ªt
 = 
	`libbpf_√éök_£nd_ªcv
(&
ªq
, 
gë_tc_öfo
, 
NULL
, &
öfo
);

722 i‡(
ªt
 < 0)

723  
	`libbpf_îr
(
ªt
);

724 i‡(!
öfo
.
¥o˚s£d
)

725  
	`libbpf_îr
(-
ENOENT
);

726  
ªt
;

727 
	}
}

729 
	$__bpf_tc_dëach
(c⁄° 
bpf_tc_hook
 *
hook
,

730 c⁄° 
bpf_tc_›ts
 *
›ts
,

731 c⁄° 
boﬁ
 
Êush
)

733 
__u32
 
¥Ÿocﬁ
 = 0, 
h™dÀ
, 
¥i‹ôy
, 
∑ª¡
, 
¥og_id
, 
Êags
;

734 
ªt
, 
ifödex
, 
©èch_poöt
, 
¥og_fd
;

735 
libbpf_∆a_ªq
 
ªq
;

737 i‡(!
hook
 ||

738 !
	`OPTS_VALID
(
hook
, 
bpf_tc_hook
) ||

739 !
	`OPTS_VALID
(
›ts
, 
bpf_tc_›ts
))

740  -
EINVAL
;

742 
ifödex
 = 
	`OPTS_GET
(
hook
, ifindex, 0);

743 
∑ª¡
 = 
	`OPTS_GET
(
hook
,Öarent, 0);

744 
©èch_poöt
 = 
	`OPTS_GET
(
hook
,áttach_point, 0);

746 
h™dÀ
 = 
	`OPTS_GET
(
›ts
, handle, 0);

747 
¥i‹ôy
 = 
	`OPTS_GET
(
›ts
,Öriority, 0);

748 
¥og_fd
 = 
	`OPTS_GET
(
›ts
,Örog_fd, 0);

749 
¥og_id
 = 
	`OPTS_GET
(
›ts
,Örog_id, 0);

750 
Êags
 = 
	`OPTS_GET
(
›ts
, flags, 0);

752 i‡(
ifödex
 <0 || 
Êags
 || 
¥og_fd
 || 
¥og_id
)

753  -
EINVAL
;

754 i‡(
¥i‹ôy
 > 
UINT16_MAX
)

755  -
EINVAL
;

756 i‡(!
Êush
) {

757 i‡(!
h™dÀ
 || !
¥i‹ôy
)

758  -
EINVAL
;

759 
¥Ÿocﬁ
 = 
ETH_P_ALL
;

761 i‡(
h™dÀ
 || 
¥i‹ôy
)

762  -
EINVAL
;

765 
	`mem£t
(&
ªq
, 0, (req));

766 
ªq
.
nh
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tcmsg
));

767 
ªq
.
nh
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_ACK
;

768 
ªq
.
nh
.
∆msg_ty≥
 = 
RTM_DELTFILTER
;

769 
ªq
.
tc
.
tcm_Ámûy
 = 
AF_UNSPEC
;

770 
ªq
.
tc
.
tcm_ifödex
 = 
ifödex
;

771 i‡(!
Êush
) {

772 
ªq
.
tc
.
tcm_h™dÀ
 = 
h™dÀ
;

773 
ªq
.
tc
.
tcm_öfo
 = 
	`TC_H_MAKE
(
¥i‹ôy
 << 16, 
	`ht⁄s
(
¥Ÿocﬁ
));

776 
ªt
 = 
	`tc_gë_tcm_∑ª¡
(
©èch_poöt
, &
∑ª¡
);

777 i‡(
ªt
 < 0)

778  
ªt
;

779 
ªq
.
tc
.
tcm_∑ª¡
 = 
∑ª¡
;

781 i‡(!
Êush
) {

782 
ªt
 = 
	`∆©å_add
(&
ªq
, 
TCA_KIND
, "bpf", ("bpf"));

783 i‡(
ªt
 < 0)

784  
ªt
;

787  
	`libbpf_√éök_£nd_ªcv
(&
ªq
, 
NULL
, NULL, NULL);

788 
	}
}

790 
	$bpf_tc_dëach
(c⁄° 
bpf_tc_hook
 *
hook
,

791 c⁄° 
bpf_tc_›ts
 *
›ts
)

793 
ªt
;

795 i‡(!
›ts
)

796  
	`libbpf_îr
(-
EINVAL
);

798 
ªt
 = 
	`__bpf_tc_dëach
(
hook
, 
›ts
, 
Ál£
);

799  
	`libbpf_îr
(
ªt
);

800 
	}
}

802 
	$bpf_tc_quîy
(c⁄° 
bpf_tc_hook
 *
hook
, 
bpf_tc_›ts
 *
›ts
)

804 
__u32
 
¥Ÿocﬁ
, 
h™dÀ
, 
¥i‹ôy
, 
∑ª¡
, 
¥og_id
, 
Êags
;

805 
ªt
, 
ifödex
, 
©èch_poöt
, 
¥og_fd
;

806 
bpf_cb_˘x
 
öfo
 = {};

807 
libbpf_∆a_ªq
 
ªq
;

809 i‡(!
hook
 || !
›ts
 ||

810 !
	`OPTS_VALID
(
hook
, 
bpf_tc_hook
) ||

811 !
	`OPTS_VALID
(
›ts
, 
bpf_tc_›ts
))

812  
	`libbpf_îr
(-
EINVAL
);

814 
ifödex
 = 
	`OPTS_GET
(
hook
, ifindex, 0);

815 
∑ª¡
 = 
	`OPTS_GET
(
hook
,Öarent, 0);

816 
©èch_poöt
 = 
	`OPTS_GET
(
hook
,áttach_point, 0);

818 
h™dÀ
 = 
	`OPTS_GET
(
›ts
, handle, 0);

819 
¥i‹ôy
 = 
	`OPTS_GET
(
›ts
,Öriority, 0);

820 
¥og_fd
 = 
	`OPTS_GET
(
›ts
,Örog_fd, 0);

821 
¥og_id
 = 
	`OPTS_GET
(
›ts
,Örog_id, 0);

822 
Êags
 = 
	`OPTS_GET
(
›ts
, flags, 0);

824 i‡(
ifödex
 <0 || 
Êags
 || 
¥og_fd
 || 
¥og_id
 ||

825 !
h™dÀ
 || !
¥i‹ôy
)

826  
	`libbpf_îr
(-
EINVAL
);

827 i‡(
¥i‹ôy
 > 
UINT16_MAX
)

828  
	`libbpf_îr
(-
EINVAL
);

830 
¥Ÿocﬁ
 = 
ETH_P_ALL
;

832 
	`mem£t
(&
ªq
, 0, (req));

833 
ªq
.
nh
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tcmsg
));

834 
ªq
.
nh
.
∆msg_Êags
 = 
NLM_F_REQUEST
;

835 
ªq
.
nh
.
∆msg_ty≥
 = 
RTM_GETTFILTER
;

836 
ªq
.
tc
.
tcm_Ámûy
 = 
AF_UNSPEC
;

837 
ªq
.
tc
.
tcm_ifödex
 = 
ifödex
;

838 
ªq
.
tc
.
tcm_h™dÀ
 = 
h™dÀ
;

839 
ªq
.
tc
.
tcm_öfo
 = 
	`TC_H_MAKE
(
¥i‹ôy
 << 16, 
	`ht⁄s
(
¥Ÿocﬁ
));

841 
ªt
 = 
	`tc_gë_tcm_∑ª¡
(
©èch_poöt
, &
∑ª¡
);

842 i‡(
ªt
 < 0)

843  
	`libbpf_îr
(
ªt
);

844 
ªq
.
tc
.
tcm_∑ª¡
 = 
∑ª¡
;

846 
ªt
 = 
	`∆©å_add
(&
ªq
, 
TCA_KIND
, "bpf", ("bpf"));

847 i‡(
ªt
 < 0)

848  
	`libbpf_îr
(
ªt
);

850 
öfo
.
›ts
 = opts;

852 
ªt
 = 
	`libbpf_√éök_£nd_ªcv
(&
ªq
, 
gë_tc_öfo
, 
NULL
, &
öfo
);

853 i‡(
ªt
 < 0)

854  
	`libbpf_îr
(
ªt
);

855 i‡(!
öfo
.
¥o˚s£d
)

856  
	`libbpf_îr
(-
ENOENT
);

857  
ªt
;

858 
	}
}

	@nlattr.c

9 
	~<î∫o.h
>

10 
	~<°rög.h
>

11 
	~<°dio.h
>

12 
	~<löux/π√éök.h
>

13 
	~"∆©å.h
"

14 
	~"libbpf_öã∫Æ.h
"

16 
uöt16_t
 
	g∆a_©å_möÀn
[
LIBBPF_NLA_TYPE_MAX
+1] = {

17 [
LIBBPF_NLA_U8
] = (
uöt8_t
),

18 [
LIBBPF_NLA_U16
] = (
uöt16_t
),

19 [
LIBBPF_NLA_U32
] = (
uöt32_t
),

20 [
LIBBPF_NLA_U64
] = (
uöt64_t
),

21 [
LIBBPF_NLA_STRING
] = 1,

22 [
LIBBPF_NLA_FLAG
] = 0,

25 
∆©å
 *
	$∆a_√xt
(c⁄° 
∆©å
 *
∆a
, *
ªmaöög
)

27 
tŸÀn
 = 
	`NLA_ALIGN
(
∆a
->
∆a_Àn
);

29 *
ªmaöög
 -
tŸÀn
;

30  (
∆©å
 *)((*)
∆a
 + 
tŸÀn
);

31 
	}
}

33 
	$∆a_ok
(c⁄° 
∆©å
 *
∆a
, 
ªmaöög
)

35  
ªmaöög
 >(*
∆a
) &&

36 
∆a
->
∆a_Àn
 >= (*nla) &&

37 
∆a
->
∆a_Àn
 <
ªmaöög
;

38 
	}
}

40 
	$∆a_ty≥
(c⁄° 
∆©å
 *
∆a
)

42  
∆a
->
∆a_ty≥
 & 
NLA_TYPE_MASK
;

43 
	}
}

45 
	$vÆid©e_∆a
(
∆©å
 *
∆a
, 
maxty≥
,

46 
libbpf_∆a_pﬁicy
 *
pﬁicy
)

48 
libbpf_∆a_pﬁicy
 *
±
;

49 
möÀn
 = 0;

50 
ty≥
 = 
	`∆a_ty≥
(
∆a
);

52 i‡(
ty≥
 < 0 ||Åy≥ > 
maxty≥
)

55 
±
 = &
pﬁicy
[
ty≥
];

57 i‡(
±
->
ty≥
 > 
LIBBPF_NLA_TYPE_MAX
)

60 i‡(
±
->
möÀn
)

61 
möÀn
 = 
±
->minlen;

62 i‡(
±
->
ty≥
 !
LIBBPF_NLA_UNSPEC
)

63 
möÀn
 = 
∆a_©å_möÀn
[
±
->
ty≥
];

65 i‡(
	`libbpf_∆a_Àn
(
∆a
Ë< 
möÀn
)

68 i‡(
±
->
maxÀn
 && 
	`libbpf_∆a_Àn
(
∆a
) >Öt->maxlen)

71 i‡(
±
->
ty≥
 =
LIBBPF_NLA_STRING
) {

72 *
d©a
 = 
	`libbpf_∆a_d©a
(
∆a
);

74 i‡(
d©a
[
	`libbpf_∆a_Àn
(
∆a
) - 1] != '\0')

79 
	}
}

81 
ölöe
 
	$∆msg_Àn
(c⁄° 
∆msghdr
 *
∆h
)

83  
∆h
->
∆msg_Àn
 - 
NLMSG_HDRLEN
;

84 
	}
}

104 
	$libbpf_∆a_∑r£
(
∆©å
 *
tb
[], 
maxty≥
, ∆©å *
hód
,

105 
Àn
, 
libbpf_∆a_pﬁicy
 *
pﬁicy
)

107 
∆©å
 *
∆a
;

108 
ªm
, 
îr
;

110 
	`mem£t
(
tb
, 0, (
∆©å
 *Ë* (
maxty≥
 + 1));

112 
	`libbpf_∆a_f‹_óch_©å
(
∆a
, 
hód
, 
Àn
, 
ªm
) {

113 
ty≥
 = 
	`∆a_ty≥
(
∆a
);

115 i‡(
ty≥
 > 
maxty≥
)

118 i‡(
pﬁicy
) {

119 
îr
 = 
	`vÆid©e_∆a
(
∆a
, 
maxty≥
, 
pﬁicy
);

120 i‡(
îr
 < 0)

121 
îrout
;

124 i‡(
tb
[
ty≥
])

125 
	`¥_w¨n
("Attribute ofÅype %#x found multipleÅimes in message, "

126 "¥eviou†©åibuã i†beög ign‹ed.\n", 
ty≥
);

128 
tb
[
ty≥
] = 
∆a
;

131 
îr
 = 0;

132 
îrout
:

133  
îr
;

134 
	}
}

149 
	$libbpf_∆a_∑r£_√°ed
(
∆©å
 *
tb
[], 
maxty≥
,

150 
∆©å
 *
∆a
,

151 
libbpf_∆a_pﬁicy
 *
pﬁicy
)

153  
	`libbpf_∆a_∑r£
(
tb
, 
maxty≥
, 
	`libbpf_∆a_d©a
(
∆a
),

154 
	`libbpf_∆a_Àn
(
∆a
), 
pﬁicy
);

155 
	}
}

158 
	$libbpf_∆a_dump_îr‹msg
(
∆msghdr
 *
∆h
)

160 
libbpf_∆a_pﬁicy
 
exèck_pﬁicy
[
NLMSGERR_ATTR_MAX
 + 1] = {

161 [
NLMSGERR_ATTR_MSG
] = { .
ty≥
 = 
LIBBPF_NLA_STRING
 },

162 [
NLMSGERR_ATTR_OFFS
] = { .
ty≥
 = 
LIBBPF_NLA_U32
 },

164 
∆©å
 *
tb
[
NLMSGERR_ATTR_MAX
 + 1], *
©å
;

165 
∆msgîr
 *
îr
;

166 *
îrmsg
 = 
NULL
;

167 
hÀn
, 
Æí
;

170 i‡(!(
∆h
->
∆msg_Êags
 & 
NLM_F_ACK_TLVS
))

173 
îr
 = (
∆msgîr
 *)
	`NLMSG_DATA
(
∆h
);

174 
hÀn
 = (*
îr
);

177 i‡(!(
∆h
->
∆msg_Êags
 & 
NLM_F_CAPPED
))

178 
hÀn
 +
	`∆msg_Àn
(&
îr
->
msg
);

180 
©å
 = (
∆©å
 *Ë((*Ë
îr
 + 
hÀn
);

181 
Æí
 = 
∆h
->
∆msg_Àn
 - 
hÀn
;

183 i‡(
	`libbpf_∆a_∑r£
(
tb
, 
NLMSGERR_ATTR_MAX
, 
©å
, 
Æí
,

184 
exèck_pﬁicy
) != 0) {

185 
	`¥_w¨n
("FailedÅoÖarseÉxtendedÉrroráttributes\n");

189 i‡(
tb
[
NLMSGERR_ATTR_MSG
])

190 
îrmsg
 = (*Ë
	`libbpf_∆a_d©a
(
tb
[
NLMSGERR_ATTR_MSG
]);

192 
	`¥_w¨n
("Kî√»îr‹ mesßge: %s\n", 
îrmsg
);

195 
	}
}

	@nlattr.h

9 #i‚de‡
__LIBBPF_NLATTR_H


10 
	#__LIBBPF_NLATTR_H


	)

12 
	~<°döt.h
>

13 
	~<°rög.h
>

14 
	~<î∫o.h
>

15 
	~<löux/√éök.h
>

16 
	~<löux/π√éök.h
>

19 
	#__LINUX_NETLINK_H


	)

25 
	mLIBBPF_NLA_UNSPEC
,

26 
	mLIBBPF_NLA_U8
,

27 
	mLIBBPF_NLA_U16
,

28 
	mLIBBPF_NLA_U32
,

29 
	mLIBBPF_NLA_U64
,

30 
	mLIBBPF_NLA_STRING
,

31 
	mLIBBPF_NLA_FLAG
,

32 
	mLIBBPF_NLA_MSECS
,

33 
	mLIBBPF_NLA_NESTED
,

34 
	m__LIBBPF_NLA_TYPE_MAX
,

37 
	#LIBBPF_NLA_TYPE_MAX
 (
__LIBBPF_NLA_TYPE_MAX
 - 1)

	)

45 
	slibbpf_∆a_pﬁicy
 {

47 
uöt16_t
 
	mty≥
;

50 
uöt16_t
 
	mmöÀn
;

53 
uöt16_t
 
	mmaxÀn
;

56 
	slibbpf_∆a_ªq
 {

57 
∆msghdr
 
	mnh
;

59 
iföfomsg
 
	miföfo
;

60 
tcmsg
 
	mtc
;

62 
	mbuf
[128];

73 
	#libbpf_∆a_f‹_óch_©å
(
pos
, 
hód
, 
Àn
, 
ªm
) \

74 
pos
 = 
hód
, 
ªm
 = 
Àn
; \

75 
	`∆a_ok
(
pos
, 
ªm
); \

76 
pos
 = 
	`∆a_√xt
’os, &(
ªm
)))

	)

82 
ölöe
 *
	$libbpf_∆a_d©a
(c⁄° 
∆©å
 *
∆a
)

84  (*)
∆a
 + 
NLA_HDRLEN
;

85 
	}
}

87 
ölöe
 
uöt8_t
 
	$libbpf_∆a_gë©å_u8
(c⁄° 
∆©å
 *
∆a
)

89  *(
uöt8_t
 *)
	`libbpf_∆a_d©a
(
∆a
);

90 
	}
}

92 
ölöe
 
uöt32_t
 
	$libbpf_∆a_gë©å_u32
(c⁄° 
∆©å
 *
∆a
)

94  *(
uöt32_t
 *)
	`libbpf_∆a_d©a
(
∆a
);

95 
	}
}

97 
ölöe
 c⁄° *
	$libbpf_∆a_gë©å_°r
(c⁄° 
∆©å
 *
∆a
)

99  (c⁄° *)
	`libbpf_∆a_d©a
(
∆a
);

100 
	}
}

106 
ölöe
 
	$libbpf_∆a_Àn
(c⁄° 
∆©å
 *
∆a
)

108  
∆a
->
∆a_Àn
 - 
NLA_HDRLEN
;

109 
	}
}

111 
libbpf_∆a_∑r£
(
∆©å
 *
tb
[], 
maxty≥
, ∆©å *
hód
,

112 
Àn
, 
libbpf_∆a_pﬁicy
 *
pﬁicy
);

113 
libbpf_∆a_∑r£_√°ed
(
∆©å
 *
tb
[], 
maxty≥
,

114 
∆©å
 *
∆a
,

115 
libbpf_∆a_pﬁicy
 *
pﬁicy
);

117 
libbpf_∆a_dump_îr‹msg
(
∆msghdr
 *
∆h
);

119 
ölöe
 
∆©å
 *
	$∆a_d©a
(
∆©å
 *
∆a
)

121  (
∆©å
 *)((*)
∆a
 + 
NLA_HDRLEN
);

122 
	}
}

124 
ölöe
 
∆©å
 *
	$ªq_èû
(
libbpf_∆a_ªq
 *
ªq
)

126  (
∆©å
 *)((*)
ªq
 + 
	`NLMSG_ALIGN
‘eq->
nh
.
∆msg_Àn
));

127 
	}
}

129 
ölöe
 
	$∆©å_add
(
libbpf_∆a_ªq
 *
ªq
, 
ty≥
,

130 c⁄° *
d©a
, 
Àn
)

132 
∆©å
 *
∆a
;

134 i‡(
	`NLMSG_ALIGN
(
ªq
->
nh
.
∆msg_Àn
Ë+ 
	`NLA_ALIGN
(
NLA_HDRLEN
 + 
Àn
) > (*req))

135  -
EMSGSIZE
;

136 i‡(!!
d©a
 !!!
Àn
)

137  -
EINVAL
;

139 
∆a
 = 
	`ªq_èû
(
ªq
);

140 
∆a
->
∆a_ty≥
 = 
ty≥
;

141 
∆a
->
∆a_Àn
 = 
NLA_HDRLEN
 + 
Àn
;

142 i‡(
d©a
)

143 
	`mem˝y
(
	`∆a_d©a
(
∆a
), 
d©a
, 
Àn
);

144 
ªq
->
nh
.
∆msg_Àn
 = 
	`NLMSG_ALIGN
‘eq->nh.∆msg_ÀnË+ 
	`NLA_ALIGN
(
∆a
->
∆a_Àn
);

146 
	}
}

148 
ölöe
 
∆©å
 *
	$∆©å_begö_√°ed
(
libbpf_∆a_ªq
 *
ªq
, 
ty≥
)

150 
∆©å
 *
èû
;

152 
èû
 = 
	`ªq_èû
(
ªq
);

153 i‡(
	`∆©å_add
(
ªq
, 
ty≥
 | 
NLA_F_NESTED
, 
NULL
, 0))

154  
NULL
;

155  
èû
;

156 
	}
}

158 
ölöe
 
	$∆©å_íd_√°ed
(
libbpf_∆a_ªq
 *
ªq
,

159 
∆©å
 *
èû
)

161 
èû
->
∆a_Àn
 = (*)
	`ªq_èû
(
ªq
) - (*)tail;

162 
	}
}

	@relo_core.c

4 #ifde‡
__KERNEL__


5 
	~<löux/bpf.h
>

6 
	~<löux/btf.h
>

7 
	~<löux/°rög.h
>

8 
	~<löux/bpf_vîifõr.h
>

9 
	~"ªlo_c‹e.h
"

11 c⁄° *
	$btf_köd_°r
(c⁄° 
btf_ty≥
 *
t
)

13  
	`btf_ty≥_°r
(
t
);

14 
	}
}

16 
boﬁ
 
	$is_ldimm64_ö¢
(
bpf_ö¢
 *
ö¢
)

18  
ö¢
->
code
 =(
BPF_LD
 | 
BPF_IMM
 | 
BPF_DW
);

19 
	}
}

21 c⁄° 
btf_ty≥
 *

22 
	$skù_mods_™d_ty≥defs
(c⁄° 
btf
 *btf, 
u32
 
id
, u32 *
ªs_id
)

24  
	`btf_ty≥_skù_modifõrs
(
btf
, 
id
, 
ªs_id
);

25 
	}
}

27 c⁄° *
	$btf__«me_by_off£t
(c⁄° 
btf
 *btf, 
u32
 
off£t
)

29  
	`btf_«me_by_off£t
(
btf
, 
off£t
);

30 
	}
}

32 
s64
 
	$btf__ªsﬁve_size
(c⁄° 
btf
 *btf, 
u32
 
ty≥_id
)

34 c⁄° 
btf_ty≥
 *
t
;

35 
size
;

37 
t
 = 
	`btf_ty≥_by_id
(
btf
, 
ty≥_id
);

38 
t
 = 
	`btf_ªsﬁve_size
(
btf
,Å, &
size
);

39 i‡(
	`IS_ERR
(
t
))

40  
	`PTR_ERR
(
t
);

41  
size
;

42 
	}
}

44 
	elibbpf_¥öt_Àvñ
 {

45 
	mLIBBPF_WARN
,

46 
	mLIBBPF_INFO
,

47 
	mLIBBPF_DEBUG
,

50 #unde‡
¥_w¨n


51 #unde‡
¥_öfo


52 #unde‡
¥_debug


53 
	#¥_w¨n
(
fmt
, 
log
, ...Ë
	`bpf_log
((*Óog, fmt, "", ##
__VA_ARGS__
)

	)

54 
	#¥_öfo
(
fmt
, 
log
, ...Ë
	`bpf_log
((*Óog, fmt, "", ##
__VA_ARGS__
)

	)

55 
	#¥_debug
(
fmt
, 
log
, ...Ë
	`bpf_log
((*Óog, fmt, "", ##
__VA_ARGS__
)

	)

56 
	#libbpf_¥öt
(
Àvñ
, 
fmt
, ...Ë
	`bpf_log
((*)
¥og_«me
, fmt, ##
__VA_ARGS__
)

	)

58 
	~<°dio.h
>

59 
	~<°rög.h
>

60 
	~<î∫o.h
>

61 
	~<˘y≥.h
>

62 
	~<löux/îr.h
>

64 
	~"libbpf.h
"

65 
	~"bpf.h
"

66 
	~"btf.h
"

67 
	~"°r_îr‹.h
"

68 
	~"libbpf_öã∫Æ.h
"

71 
boﬁ
 
	$is_Êex_¨r
(c⁄° 
btf
 *btf,

72 c⁄° 
bpf_c‹e_ac˚ss‹
 *
acc
,

73 c⁄° 
btf_¨øy
 *
¨r
)

75 c⁄° 
btf_ty≥
 *
t
;

78 i‡(!
acc
->
«me
 || 
¨r
->
√Àms
 > 0)

79  
Ál£
;

82 
t
 = 
	`btf_ty≥_by_id
(
btf
, 
acc
->
ty≥_id
);

83  
acc
->
idx
 =
	`btf_vÀn
(
t
) - 1;

84 
	}
}

86 c⁄° *
	$c‹e_ªlo_köd_°r
(
bpf_c‹e_ªlo_köd
 
köd
)

88 
köd
) {

89 
BPF_CORE_FIELD_BYTE_OFFSET
:  "byte_off";

90 
BPF_CORE_FIELD_BYTE_SIZE
:  "byte_sz";

91 
BPF_CORE_FIELD_EXISTS
:  "field_exists";

92 
BPF_CORE_FIELD_SIGNED
:  "signed";

93 
BPF_CORE_FIELD_LSHIFT_U64
:  "lshift_u64";

94 
BPF_CORE_FIELD_RSHIFT_U64
:  "rshift_u64";

95 
BPF_CORE_TYPE_ID_LOCAL
:  "local_type_id";

96 
BPF_CORE_TYPE_ID_TARGET
:  "target_type_id";

97 
BPF_CORE_TYPE_EXISTS
:  "type_exists";

98 
BPF_CORE_TYPE_SIZE
:  "type_size";

99 
BPF_CORE_ENUMVAL_EXISTS
:  "enumval_exists";

100 
BPF_CORE_ENUMVAL_VALUE
:  "enumval_value";

103 
	}
}

105 
boﬁ
 
	$c‹e_ªlo_is_fõld_ba£d
(
bpf_c‹e_ªlo_köd
 
köd
)

107 
köd
) {

108 
BPF_CORE_FIELD_BYTE_OFFSET
:

109 
BPF_CORE_FIELD_BYTE_SIZE
:

110 
BPF_CORE_FIELD_EXISTS
:

111 
BPF_CORE_FIELD_SIGNED
:

112 
BPF_CORE_FIELD_LSHIFT_U64
:

113 
BPF_CORE_FIELD_RSHIFT_U64
:

114  
åue
;

116  
Ál£
;

118 
	}
}

120 
boﬁ
 
	$c‹e_ªlo_is_ty≥_ba£d
(
bpf_c‹e_ªlo_köd
 
köd
)

122 
köd
) {

123 
BPF_CORE_TYPE_ID_LOCAL
:

124 
BPF_CORE_TYPE_ID_TARGET
:

125 
BPF_CORE_TYPE_EXISTS
:

126 
BPF_CORE_TYPE_SIZE
:

127  
åue
;

129  
Ál£
;

131 
	}
}

133 
boﬁ
 
	$c‹e_ªlo_is_íumvÆ_ba£d
(
bpf_c‹e_ªlo_köd
 
köd
)

135 
köd
) {

136 
BPF_CORE_ENUMVAL_EXISTS
:

137 
BPF_CORE_ENUMVAL_VALUE
:

138  
åue
;

140  
Ál£
;

142 
	}
}

181 
	$bpf_c‹e_∑r£_•ec
(c⁄° *
¥og_«me
, c⁄° 
btf
 *btf,

182 c⁄° 
bpf_c‹e_ªlo
 *
ªlo
,

183 
bpf_c‹e_•ec
 *
•ec
)

185 
ac˚ss_idx
, 
∑r£d_Àn
, 
i
;

186 
bpf_c‹e_ac˚ss‹
 *
acc
;

187 c⁄° 
btf_ty≥
 *
t
;

188 c⁄° *
«me
, *
•ec_°r
;

189 
__u32
 
id
;

190 
__s64
 
sz
;

192 
•ec_°r
 = 
	`btf__«me_by_off£t
(
btf
, 
ªlo
->
ac˚ss_°r_off
);

193 i‡(
	`°r_is_em±y
(
•ec_°r
) || *spec_str == ':')

194  -
EINVAL
;

196 
	`mem£t
(
•ec
, 0, (*spec));

197 
•ec
->
btf
 = btf;

198 
•ec
->
roŸ_ty≥_id
 = 
ªlo
->
ty≥_id
;

199 
•ec
->
ªlo_köd
 = 
ªlo
->
köd
;

202 i‡(
	`c‹e_ªlo_is_ty≥_ba£d
(
ªlo
->
köd
)) {

203 i‡(
	`°rcmp
(
•ec_°r
, "0"))

204  -
EINVAL
;

209 *
•ec_°r
) {

210 i‡(*
•ec_°r
 == ':')

211 ++
•ec_°r
;

212 i‡(
	`ssˇnf
(
•ec_°r
, "%d%n", &
ac˚ss_idx
, &
∑r£d_Àn
) != 1)

213  -
EINVAL
;

214 i‡(
•ec
->
øw_Àn
 =
BPF_CORE_SPEC_MAX_LEN
)

215  -
E2BIG
;

216 
•ec_°r
 +
∑r£d_Àn
;

217 
•ec
->
øw_•ec
[•ec->
øw_Àn
++] = 
ac˚ss_idx
;

220 i‡(
•ec
->
øw_Àn
 == 0)

221  -
EINVAL
;

223 
t
 = 
	`skù_mods_™d_ty≥defs
(
btf
, 
ªlo
->
ty≥_id
, &
id
);

224 i‡(!
t
)

225  -
EINVAL
;

227 
ac˚ss_idx
 = 
•ec
->
øw_•ec
[0];

228 
acc
 = &
•ec
->spec[0];

229 
acc
->
ty≥_id
 = 
id
;

230 
acc
->
idx
 = 
ac˚ss_idx
;

231 
•ec
->
Àn
++;

233 i‡(
	`c‹e_ªlo_is_íumvÆ_ba£d
(
ªlo
->
köd
)) {

234 i‡(!
	`btf_is_íum
(
t
Ë|| 
•ec
->
øw_Àn
 > 1 || 
ac˚ss_idx
 >
	`btf_vÀn
(t))

235  -
EINVAL
;

238 
acc
->
«me
 = 
	`btf__«me_by_off£t
(
btf
, 
	`btf_íum
(
t
)[
ac˚ss_idx
].
«me_off
);

242 i‡(!
	`c‹e_ªlo_is_fõld_ba£d
(
ªlo
->
köd
))

243  -
EINVAL
;

245 
sz
 = 
	`btf__ªsﬁve_size
(
btf
, 
id
);

246 i‡(
sz
 < 0)

247  
sz
;

248 
•ec
->
bô_off£t
 = 
ac˚ss_idx
 * 
sz
 * 8;

250 
i
 = 1; i < 
•ec
->
øw_Àn
; i++) {

251 
t
 = 
	`skù_mods_™d_ty≥defs
(
btf
, 
id
, &id);

252 i‡(!
t
)

253  -
EINVAL
;

255 
ac˚ss_idx
 = 
•ec
->
øw_•ec
[
i
];

256 
acc
 = &
•ec
->•ec[•ec->
Àn
];

258 i‡(
	`btf_is_composôe
(
t
)) {

259 c⁄° 
btf_membî
 *
m
;

260 
__u32
 
bô_off£t
;

262 i‡(
ac˚ss_idx
 >
	`btf_vÀn
(
t
))

263  -
EINVAL
;

265 
bô_off£t
 = 
	`btf_membî_bô_off£t
(
t
, 
ac˚ss_idx
);

266 
•ec
->
bô_off£t
 += bit_offset;

268 
m
 = 
	`btf_membîs
(
t
Ë+ 
ac˚ss_idx
;

269 i‡(
m
->
«me_off
) {

270 
«me
 = 
	`btf__«me_by_off£t
(
btf
, 
m
->
«me_off
);

271 i‡(
	`°r_is_em±y
(
«me
))

272  -
EINVAL
;

274 
acc
->
ty≥_id
 = 
id
;

275 
acc
->
idx
 = 
ac˚ss_idx
;

276 
acc
->
«me
 =Çame;

277 
•ec
->
Àn
++;

280 
id
 = 
m
->
ty≥
;

281 } i‡(
	`btf_is_¨øy
(
t
)) {

282 c⁄° 
btf_¨øy
 *
a
 = 
	`btf_¨øy
(
t
);

283 
boﬁ
 
Êex
;

285 
t
 = 
	`skù_mods_™d_ty≥defs
(
btf
, 
a
->
ty≥
, &
id
);

286 i‡(!
t
)

287  -
EINVAL
;

289 
Êex
 = 
	`is_Êex_¨r
(
btf
, 
acc
 - 1, 
a
);

290 i‡(!
Êex
 && 
ac˚ss_idx
 >
a
->
√Àms
)

291  -
EINVAL
;

293 
•ec
->•ec[•ec->
Àn
].
ty≥_id
 = 
id
;

294 
•ec
->•ec[•ec->
Àn
].
idx
 = 
ac˚ss_idx
;

295 
•ec
->
Àn
++;

297 
sz
 = 
	`btf__ªsﬁve_size
(
btf
, 
id
);

298 i‡(
sz
 < 0)

299  
sz
;

300 
•ec
->
bô_off£t
 +
ac˚ss_idx
 * 
sz
 * 8;

302 
	`¥_w¨n
("prog '%s':Ñelo for [%u] %s (at idx %d) capturesÅype [%d] of unexpected kind %s\n",

303 
¥og_«me
, 
ªlo
->
ty≥_id
, 
•ec_°r
, 
i
, 
id
, 
	`btf_köd_°r
(
t
));

304  -
EINVAL
;

309 
	}
}

328 
	$bpf_c‹e_fõlds_¨e_com∑t
(c⁄° 
btf
 *
loˇl_btf
,

329 
__u32
 
loˇl_id
,

330 c⁄° 
btf
 *
èrg_btf
,

331 
__u32
 
èrg_id
)

333 c⁄° 
btf_ty≥
 *
loˇl_ty≥
, *
èrg_ty≥
;

335 
ªcur
:

336 
loˇl_ty≥
 = 
	`skù_mods_™d_ty≥defs
(
loˇl_btf
, 
loˇl_id
, &local_id);

337 
èrg_ty≥
 = 
	`skù_mods_™d_ty≥defs
(
èrg_btf
, 
èrg_id
, &targ_id);

338 i‡(!
loˇl_ty≥
 || !
èrg_ty≥
)

339  -
EINVAL
;

341 i‡(
	`btf_is_composôe
(
loˇl_ty≥
Ë&& btf_is_composôe(
èrg_ty≥
))

343 i‡(
	`btf_köd
(
loˇl_ty≥
Ë!btf_köd(
èrg_ty≥
))

346 
	`btf_köd
(
loˇl_ty≥
)) {

347 
BTF_KIND_PTR
:

348 
BTF_KIND_FLOAT
:

350 
BTF_KIND_FWD
:

351 
BTF_KIND_ENUM
: {

352 c⁄° *
loˇl_«me
, *
èrg_«me
;

353 
size_t
 
loˇl_Àn
, 
èrg_Àn
;

355 
loˇl_«me
 = 
	`btf__«me_by_off£t
(
loˇl_btf
,

356 
loˇl_ty≥
->
«me_off
);

357 
èrg_«me
 = 
	`btf__«me_by_off£t
(
èrg_btf
, 
èrg_ty≥
->
«me_off
);

358 
loˇl_Àn
 = 
	`bpf_c‹e_es£¡ül_«me_Àn
(
loˇl_«me
);

359 
èrg_Àn
 = 
	`bpf_c‹e_es£¡ül_«me_Àn
(
èrg_«me
);

361  
loˇl_Àn
 =0 || 
èrg_Àn
 == 0 ||

362 (
loˇl_Àn
 =
èrg_Àn
 &&

363 
	`°∫cmp
(
loˇl_«me
, 
èrg_«me
, 
loˇl_Àn
) == 0);

365 
BTF_KIND_INT
:

369  
	`btf_öt_off£t
(
loˇl_ty≥
) == 0 &&

370 
	`btf_öt_off£t
(
èrg_ty≥
) == 0;

371 
BTF_KIND_ARRAY
:

372 
loˇl_id
 = 
	`btf_¨øy
(
loˇl_ty≥
)->
ty≥
;

373 
èrg_id
 = 
	`btf_¨øy
(
èrg_ty≥
)->
ty≥
;

374 
ªcur
;

378 
	}
}

396 
	$bpf_c‹e_m©ch_membî
(c⁄° 
btf
 *
loˇl_btf
,

397 c⁄° 
bpf_c‹e_ac˚ss‹
 *
loˇl_acc
,

398 c⁄° 
btf
 *
èrg_btf
,

399 
__u32
 
èrg_id
,

400 
bpf_c‹e_•ec
 *
•ec
,

401 
__u32
 *
√xt_èrg_id
)

403 c⁄° 
btf_ty≥
 *
loˇl_ty≥
, *
èrg_ty≥
;

404 c⁄° 
btf_membî
 *
loˇl_membî
, *
m
;

405 c⁄° *
loˇl_«me
, *
èrg_«me
;

406 
__u32
 
loˇl_id
;

407 
i
, 
n
, 
found
;

409 
èrg_ty≥
 = 
	`skù_mods_™d_ty≥defs
(
èrg_btf
, 
èrg_id
, &targ_id);

410 i‡(!
èrg_ty≥
)

411  -
EINVAL
;

412 i‡(!
	`btf_is_composôe
(
èrg_ty≥
))

415 
loˇl_id
 = 
loˇl_acc
->
ty≥_id
;

416 
loˇl_ty≥
 = 
	`btf_ty≥_by_id
(
loˇl_btf
, 
loˇl_id
);

417 
loˇl_membî
 = 
	`btf_membîs
(
loˇl_ty≥
Ë+ 
loˇl_acc
->
idx
;

418 
loˇl_«me
 = 
	`btf__«me_by_off£t
(
loˇl_btf
, 
loˇl_membî
->
«me_off
);

420 
n
 = 
	`btf_vÀn
(
èrg_ty≥
);

421 
m
 = 
	`btf_membîs
(
èrg_ty≥
);

422 
i
 = 0; i < 
n
; i++, 
m
++) {

423 
__u32
 
bô_off£t
;

425 
bô_off£t
 = 
	`btf_membî_bô_off£t
(
èrg_ty≥
, 
i
);

428 i‡(
•ec
->
øw_Àn
 =
BPF_CORE_SPEC_MAX_LEN
)

429  -
E2BIG
;

432 
•ec
->
bô_off£t
 += bit_offset;

433 
•ec
->
øw_•ec
[•ec->
øw_Àn
++] = 
i
;

435 
èrg_«me
 = 
	`btf__«me_by_off£t
(
èrg_btf
, 
m
->
«me_off
);

436 i‡(
	`°r_is_em±y
(
èrg_«me
)) {

438 
found
 = 
	`bpf_c‹e_m©ch_membî
(
loˇl_btf
, 
loˇl_acc
,

439 
èrg_btf
, 
m
->
ty≥
,

440 
•ec
, 
√xt_èrg_id
);

441 i‡(
found
)

442  
found
;

443 } i‡(
	`°rcmp
(
loˇl_«me
, 
èrg_«me
) == 0) {

445 
bpf_c‹e_ac˚ss‹
 *
èrg_acc
;

447 
èrg_acc
 = &
•ec
->•ec[•ec->
Àn
++];

448 
èrg_acc
->
ty≥_id
 = 
èrg_id
;

449 
èrg_acc
->
idx
 = 
i
;

450 
èrg_acc
->
«me
 = 
èrg_«me
;

452 *
√xt_èrg_id
 = 
m
->
ty≥
;

453 
found
 = 
	`bpf_c‹e_fõlds_¨e_com∑t
(
loˇl_btf
,

454 
loˇl_membî
->
ty≥
,

455 
èrg_btf
, 
m
->
ty≥
);

456 i‡(!
found
)

457 
•ec
->
Àn
--;

458  
found
;

461 
•ec
->
bô_off£t
 -= bit_offset;

462 
•ec
->
øw_Àn
--;

466 
	}
}

472 
	$bpf_c‹e_•ec_m©ch
(
bpf_c‹e_•ec
 *
loˇl_•ec
,

473 c⁄° 
btf
 *
èrg_btf
, 
__u32
 
èrg_id
,

474 
bpf_c‹e_•ec
 *
èrg_•ec
)

476 c⁄° 
btf_ty≥
 *
èrg_ty≥
;

477 c⁄° 
bpf_c‹e_ac˚ss‹
 *
loˇl_acc
;

478 
bpf_c‹e_ac˚ss‹
 *
èrg_acc
;

479 
i
, 
sz
, 
m©ched
;

481 
	`mem£t
(
èrg_•ec
, 0, (*targ_spec));

482 
èrg_•ec
->
btf
 = 
èrg_btf
;

483 
èrg_•ec
->
roŸ_ty≥_id
 = 
èrg_id
;

484 
èrg_•ec
->
ªlo_köd
 = 
loˇl_•ec
->relo_kind;

486 i‡(
	`c‹e_ªlo_is_ty≥_ba£d
(
loˇl_•ec
->
ªlo_köd
)) {

487  
	`bpf_c‹e_ty≥s_¨e_com∑t
(
loˇl_•ec
->
btf
,

488 
loˇl_•ec
->
roŸ_ty≥_id
,

489 
èrg_btf
, 
èrg_id
);

492 
loˇl_acc
 = &
loˇl_•ec
->
•ec
[0];

493 
èrg_acc
 = &
èrg_•ec
->
•ec
[0];

495 i‡(
	`c‹e_ªlo_is_íumvÆ_ba£d
(
loˇl_•ec
->
ªlo_köd
)) {

496 
size_t
 
loˇl_es£¡_Àn
, 
èrg_es£¡_Àn
;

497 c⁄° 
btf_íum
 *
e
;

498 c⁄° *
èrg_«me
;

501 
èrg_ty≥
 = 
	`skù_mods_™d_ty≥defs
(
èrg_•ec
->
btf
, 
èrg_id
, &targ_id);

502 i‡(!
	`btf_is_íum
(
èrg_ty≥
))

505 
loˇl_es£¡_Àn
 = 
	`bpf_c‹e_es£¡ül_«me_Àn
(
loˇl_acc
->
«me
);

507 
i
 = 0, 
e
 = 
	`btf_íum
(
èrg_ty≥
); i < 
	`btf_vÀn
(targ_type); i++,É++) {

508 
èrg_«me
 = 
	`btf__«me_by_off£t
(
èrg_•ec
->
btf
, 
e
->
«me_off
);

509 
èrg_es£¡_Àn
 = 
	`bpf_c‹e_es£¡ül_«me_Àn
(
èrg_«me
);

510 i‡(
èrg_es£¡_Àn
 !
loˇl_es£¡_Àn
)

512 i‡(
	`°∫cmp
(
loˇl_acc
->
«me
, 
èrg_«me
, 
loˇl_es£¡_Àn
) == 0) {

513 
èrg_acc
->
ty≥_id
 = 
èrg_id
;

514 
èrg_acc
->
idx
 = 
i
;

515 
èrg_acc
->
«me
 = 
èrg_«me
;

516 
èrg_•ec
->
Àn
++;

517 
èrg_•ec
->
øw_•ec
[èrg_•ec->
øw_Àn
] = 
èrg_acc
->
idx
;

518 
èrg_•ec
->
øw_Àn
++;

525 i‡(!
	`c‹e_ªlo_is_fõld_ba£d
(
loˇl_•ec
->
ªlo_köd
))

526  -
EINVAL
;

528 
i
 = 0; i < 
loˇl_•ec
->
Àn
; i++, 
loˇl_acc
++, 
èrg_acc
++) {

529 
èrg_ty≥
 = 
	`skù_mods_™d_ty≥defs
(
èrg_•ec
->
btf
, 
èrg_id
,

530 &
èrg_id
);

531 i‡(!
èrg_ty≥
)

532  -
EINVAL
;

534 i‡(
loˇl_acc
->
«me
) {

535 
m©ched
 = 
	`bpf_c‹e_m©ch_membî
(
loˇl_•ec
->
btf
,

536 
loˇl_acc
,

537 
èrg_btf
, 
èrg_id
,

538 
èrg_•ec
, &
èrg_id
);

539 i‡(
m©ched
 <= 0)

540  
m©ched
;

546 i‡(
i
 > 0) {

547 c⁄° 
btf_¨øy
 *
a
;

548 
boﬁ
 
Êex
;

550 i‡(!
	`btf_is_¨øy
(
èrg_ty≥
))

553 
a
 = 
	`btf_¨øy
(
èrg_ty≥
);

554 
Êex
 = 
	`is_Êex_¨r
(
èrg_btf
, 
èrg_acc
 - 1, 
a
);

555 i‡(!
Êex
 && 
loˇl_acc
->
idx
 >
a
->
√Àms
)

557 i‡(!
	`skù_mods_™d_ty≥defs
(
èrg_btf
, 
a
->
ty≥
,

558 &
èrg_id
))

559  -
EINVAL
;

563 i‡(
èrg_•ec
->
øw_Àn
 =
BPF_CORE_SPEC_MAX_LEN
)

564  -
E2BIG
;

566 
èrg_acc
->
ty≥_id
 = 
èrg_id
;

567 
èrg_acc
->
idx
 = 
loˇl_acc
->idx;

568 
èrg_acc
->
«me
 = 
NULL
;

569 
èrg_•ec
->
Àn
++;

570 
èrg_•ec
->
øw_•ec
[èrg_•ec->
øw_Àn
] = 
èrg_acc
->
idx
;

571 
èrg_•ec
->
øw_Àn
++;

573 
sz
 = 
	`btf__ªsﬁve_size
(
èrg_btf
, 
èrg_id
);

574 i‡(
sz
 < 0)

575  
sz
;

576 
èrg_•ec
->
bô_off£t
 +
loˇl_acc
->
idx
 * 
sz
 * 8;

581 
	}
}

583 
	$bpf_c‹e_ˇlc_fõld_ªlo
(c⁄° *
¥og_«me
,

584 c⁄° 
bpf_c‹e_ªlo
 *
ªlo
,

585 c⁄° 
bpf_c‹e_•ec
 *
•ec
,

586 
__u32
 *
vÆ
, __u32 *
fõld_sz
, __u32 *
ty≥_id
,

587 
boﬁ
 *
vÆid©e
)

589 c⁄° 
bpf_c‹e_ac˚ss‹
 *
acc
;

590 c⁄° 
btf_ty≥
 *
t
;

591 
__u32
 
byã_off
, 
byã_sz
, 
bô_off
, 
bô_sz
, 
fõld_ty≥_id
;

592 c⁄° 
btf_membî
 *
m
;

593 c⁄° 
btf_ty≥
 *
mt
;

594 
boﬁ
 
bôfõld
;

595 
__s64
 
sz
;

597 *
fõld_sz
 = 0;

599 i‡(
ªlo
->
köd
 =
BPF_CORE_FIELD_EXISTS
) {

600 *
vÆ
 = 
•ec
 ? 1 : 0;

604 i‡(!
•ec
)

605  -
EUCLEAN
;

607 
acc
 = &
•ec
->•ec[•ec->
Àn
 - 1];

608 
t
 = 
	`btf_ty≥_by_id
(
•ec
->
btf
, 
acc
->
ty≥_id
);

611 i‡(!
acc
->
«me
) {

612 i‡(
ªlo
->
köd
 =
BPF_CORE_FIELD_BYTE_OFFSET
) {

613 *
vÆ
 = 
•ec
->
bô_off£t
 / 8;

615 
sz
 = 
	`btf__ªsﬁve_size
(
•ec
->
btf
, 
acc
->
ty≥_id
);

616 i‡(
sz
 < 0)

617  -
EINVAL
;

618 *
fõld_sz
 = 
sz
;

619 *
ty≥_id
 = 
acc
->type_id;

620 } i‡(
ªlo
->
köd
 =
BPF_CORE_FIELD_BYTE_SIZE
) {

621 
sz
 = 
	`btf__ªsﬁve_size
(
•ec
->
btf
, 
acc
->
ty≥_id
);

622 i‡(
sz
 < 0)

623  -
EINVAL
;

624 *
vÆ
 = 
sz
;

626 
	`¥_w¨n
("prog '%s':Ñelo %dát insn #%d can't beáppliedÅoárrayáccess\n",

627 
¥og_«me
, 
ªlo
->
köd
,Ñño->
ö¢_off
 / 8);

628  -
EINVAL
;

630 i‡(
vÆid©e
)

631 *
vÆid©e
 = 
åue
;

635 
m
 = 
	`btf_membîs
(
t
Ë+ 
acc
->
idx
;

636 
mt
 = 
	`skù_mods_™d_ty≥defs
(
•ec
->
btf
, 
m
->
ty≥
, &
fõld_ty≥_id
);

637 
bô_off
 = 
•ec
->
bô_off£t
;

638 
bô_sz
 = 
	`btf_membî_bôfõld_size
(
t
, 
acc
->
idx
);

640 
bôfõld
 = 
bô_sz
 > 0;

641 i‡(
bôfõld
) {

642 
byã_sz
 = 
mt
->
size
;

643 
byã_off
 = 
bô_off
 / 8 / 
byã_sz
 * byte_sz;

645 
bô_off
 + 
bô_sz
 - 
byã_off
 * 8 > 
byã_sz
 * 8) {

646 i‡(
byã_sz
 >= 8) {

648 
	`¥_w¨n
("prog '%s':Ñelo %dát insn #%d can't be satisfied for bitfield\n",

649 
¥og_«me
, 
ªlo
->
köd
,Ñño->
ö¢_off
 / 8);

650  -
E2BIG
;

652 
byã_sz
 *= 2;

653 
byã_off
 = 
bô_off
 / 8 / 
byã_sz
 * byte_sz;

656 
sz
 = 
	`btf__ªsﬁve_size
(
•ec
->
btf
, 
fõld_ty≥_id
);

657 i‡(
sz
 < 0)

658  -
EINVAL
;

659 
byã_sz
 = 
sz
;

660 
byã_off
 = 
•ec
->
bô_off£t
 / 8;

661 
bô_sz
 = 
byã_sz
 * 8;

668 i‡(
vÆid©e
)

669 *
vÆid©e
 = !
bôfõld
;

671 
ªlo
->
köd
) {

672 
BPF_CORE_FIELD_BYTE_OFFSET
:

673 *
vÆ
 = 
byã_off
;

674 i‡(!
bôfõld
) {

675 *
fõld_sz
 = 
byã_sz
;

676 *
ty≥_id
 = 
fõld_ty≥_id
;

679 
BPF_CORE_FIELD_BYTE_SIZE
:

680 *
vÆ
 = 
byã_sz
;

682 
BPF_CORE_FIELD_SIGNED
:

684 *
vÆ
 = 
	`btf_is_íum
(
mt
) ||

685 (
	`btf_öt_ícodög
(
mt
Ë& 
BTF_INT_SIGNED
);

686 i‡(
vÆid©e
)

687 *
vÆid©e
 = 
åue
;

689 
BPF_CORE_FIELD_LSHIFT_U64
:

690 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


691 *
vÆ
 = 64 - (
bô_off
 + 
bô_sz
 - 
byã_off
 * 8);

693 *
vÆ
 = (8 - 
byã_sz
Ë* 8 + (
bô_off
 - 
byã_off
 * 8);

696 
BPF_CORE_FIELD_RSHIFT_U64
:

697 *
vÆ
 = 64 - 
bô_sz
;

698 i‡(
vÆid©e
)

699 *
vÆid©e
 = 
åue
;

701 
BPF_CORE_FIELD_EXISTS
:

703  -
EOPNOTSUPP
;

707 
	}
}

709 
	$bpf_c‹e_ˇlc_ty≥_ªlo
(c⁄° 
bpf_c‹e_ªlo
 *
ªlo
,

710 c⁄° 
bpf_c‹e_•ec
 *
•ec
,

711 
__u32
 *
vÆ
, 
boﬁ
 *
vÆid©e
)

713 
__s64
 
sz
;

716 i‡(
vÆid©e
)

717 *
vÆid©e
 = 
åue
;

720 i‡(!
•ec
) {

721 *
vÆ
 = 0;

725 
ªlo
->
köd
) {

726 
BPF_CORE_TYPE_ID_TARGET
:

727 *
vÆ
 = 
•ec
->
roŸ_ty≥_id
;

731 i‡(
vÆid©e
)

732 *
vÆid©e
 = 
Ál£
;

734 
BPF_CORE_TYPE_EXISTS
:

735 *
vÆ
 = 1;

737 
BPF_CORE_TYPE_SIZE
:

738 
sz
 = 
	`btf__ªsﬁve_size
(
•ec
->
btf
, s≥c->
roŸ_ty≥_id
);

739 i‡(
sz
 < 0)

740  -
EINVAL
;

741 *
vÆ
 = 
sz
;

743 
BPF_CORE_TYPE_ID_LOCAL
:

746  -
EOPNOTSUPP
;

750 
	}
}

752 
	$bpf_c‹e_ˇlc_íumvÆ_ªlo
(c⁄° 
bpf_c‹e_ªlo
 *
ªlo
,

753 c⁄° 
bpf_c‹e_•ec
 *
•ec
,

754 
__u32
 *
vÆ
)

756 c⁄° 
btf_ty≥
 *
t
;

757 c⁄° 
btf_íum
 *
e
;

759 
ªlo
->
köd
) {

760 
BPF_CORE_ENUMVAL_EXISTS
:

761 *
vÆ
 = 
•ec
 ? 1 : 0;

763 
BPF_CORE_ENUMVAL_VALUE
:

764 i‡(!
•ec
)

765  -
EUCLEAN
;

766 
t
 = 
	`btf_ty≥_by_id
(
•ec
->
btf
, s≥c->•ec[0].
ty≥_id
);

767 
e
 = 
	`btf_íum
(
t
Ë+ 
•ec
->•ec[0].
idx
;

768 *
vÆ
 = 
e
->val;

771  -
EOPNOTSUPP
;

775 
	}
}

783 
	$bpf_c‹e_ˇlc_ªlo
(c⁄° *
¥og_«me
,

784 c⁄° 
bpf_c‹e_ªlo
 *
ªlo
,

785 
ªlo_idx
,

786 c⁄° 
bpf_c‹e_•ec
 *
loˇl_•ec
,

787 c⁄° 
bpf_c‹e_•ec
 *
èrg_•ec
,

788 
bpf_c‹e_ªlo_ªs
 *
ªs
)

790 
îr
 = -
EOPNOTSUPP
;

792 
ªs
->
‹ig_vÆ
 = 0;

793 
ªs
->
√w_vÆ
 = 0;

794 
ªs
->
pois⁄
 = 
Ál£
;

795 
ªs
->
vÆid©e
 = 
åue
;

796 
ªs
->
Áû_memsz_adju°
 = 
Ál£
;

797 
ªs
->
‹ig_sz
 =Ñes->
√w_sz
 = 0;

798 
ªs
->
‹ig_ty≥_id
 =Ñes->
√w_ty≥_id
 = 0;

800 i‡(
	`c‹e_ªlo_is_fõld_ba£d
(
ªlo
->
köd
)) {

801 
îr
 = 
	`bpf_c‹e_ˇlc_fõld_ªlo
(
¥og_«me
, 
ªlo
, 
loˇl_•ec
,

802 &
ªs
->
‹ig_vÆ
, &ªs->
‹ig_sz
,

803 &
ªs
->
‹ig_ty≥_id
, &ªs->
vÆid©e
);

804 
îr
 =Éº ?: 
	`bpf_c‹e_ˇlc_fõld_ªlo
(
¥og_«me
, 
ªlo
, 
èrg_•ec
,

805 &
ªs
->
√w_vÆ
, &ªs->
√w_sz
,

806 &
ªs
->
√w_ty≥_id
, 
NULL
);

807 i‡(
îr
)

808 
d⁄e
;

813 
ªs
->
Áû_memsz_adju°
 = 
Ál£
;

814 i‡(
ªs
->
‹ig_sz
 !ªs->
√w_sz
) {

815 c⁄° 
btf_ty≥
 *
‹ig_t
, *
√w_t
;

817 
‹ig_t
 = 
	`btf_ty≥_by_id
(
loˇl_•ec
->
btf
, 
ªs
->
‹ig_ty≥_id
);

818 
√w_t
 = 
	`btf_ty≥_by_id
(
èrg_•ec
->
btf
, 
ªs
->
√w_ty≥_id
);

834 i‡(
	`btf_is_±r
(
‹ig_t
Ë&& btf_is_±r(
√w_t
))

835 
d⁄e
;

836 i‡(
	`btf_is_öt
(
‹ig_t
Ë&& btf_is_öt(
√w_t
) &&

837 
	`btf_öt_ícodög
(
‹ig_t
Ë!
BTF_INT_SIGNED
 &&

838 
	`btf_öt_ícodög
(
√w_t
Ë!
BTF_INT_SIGNED
)

839 
d⁄e
;

844 
ªs
->
Áû_memsz_adju°
 = 
åue
;

846 } i‡(
	`c‹e_ªlo_is_ty≥_ba£d
(
ªlo
->
köd
)) {

847 
îr
 = 
	`bpf_c‹e_ˇlc_ty≥_ªlo
(
ªlo
, 
loˇl_•ec
, &
ªs
->
‹ig_vÆ
, &ªs->
vÆid©e
);

848 
îr
 =Éº ?: 
	`bpf_c‹e_ˇlc_ty≥_ªlo
(
ªlo
, 
èrg_•ec
, &
ªs
->
√w_vÆ
, 
NULL
);

849 } i‡(
	`c‹e_ªlo_is_íumvÆ_ba£d
(
ªlo
->
köd
)) {

850 
îr
 = 
	`bpf_c‹e_ˇlc_íumvÆ_ªlo
(
ªlo
, 
loˇl_•ec
, &
ªs
->
‹ig_vÆ
);

851 
îr
 =Éº ?: 
	`bpf_c‹e_ˇlc_íumvÆ_ªlo
(
ªlo
, 
èrg_•ec
, &
ªs
->
√w_vÆ
);

854 
d⁄e
:

855 i‡(
îr
 =-
EUCLEAN
) {

857 
ªs
->
pois⁄
 = 
åue
;

858 
îr
 = 0;

859 } i‡(
îr
 =-
EOPNOTSUPP
) {

861 
	`¥_w¨n
("prog '%s':Ñelo #%d: unrecognized CO-REÑelocation %s (%d)át insn #%d\n",

862 
¥og_«me
, 
ªlo_idx
, 
	`c‹e_ªlo_köd_°r
(
ªlo
->
köd
),

863 
ªlo
->
köd
,Ñño->
ö¢_off
 / 8);

866  
îr
;

867 
	}
}

873 
	$bpf_c‹e_pois⁄_ö¢
(c⁄° *
¥og_«me
, 
ªlo_idx
,

874 
ö¢_idx
, 
bpf_ö¢
 *
ö¢
)

876 
	`¥_debug
("prog '%s':Ñelo #%d: substituting insn #%d w/ invalid insn\n",

877 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
);

878 
ö¢
->
code
 = 
BPF_JMP
 | 
BPF_CALL
;

879 
ö¢
->
d°_ªg
 = 0;

880 
ö¢
->
§c_ªg
 = 0;

881 
ö¢
->
off
 = 0;

886 
ö¢
->
imm
 = 195896080;

887 
	}
}

889 
	$ö¢_bpf_size_to_byãs
(
bpf_ö¢
 *
ö¢
)

891 
	`BPF_SIZE
(
ö¢
->
code
)) {

892 
BPF_DW
:  8;

893 
BPF_W
:  4;

894 
BPF_H
:  2;

895 
BPF_B
:  1;

898 
	}
}

900 
	$ö¢_byãs_to_bpf_size
(
__u32
 
sz
)

902 
sz
) {

903 8:  
BPF_DW
;

904 4:  
BPF_W
;

905 2:  
BPF_H
;

906 1:  
BPF_B
;

909 
	}
}

928 
	$bpf_c‹e_∑tch_ö¢
(c⁄° *
¥og_«me
, 
bpf_ö¢
 *
ö¢
,

929 
ö¢_idx
, c⁄° 
bpf_c‹e_ªlo
 *
ªlo
,

930 
ªlo_idx
, c⁄° 
bpf_c‹e_ªlo_ªs
 *
ªs
)

932 
__u32
 
‹ig_vÆ
, 
√w_vÆ
;

933 
__u8
 
˛ass
;

935 
˛ass
 = 
	`BPF_CLASS
(
ö¢
->
code
);

937 i‡(
ªs
->
pois⁄
) {

938 
pois⁄
:

942 i‡(
	`is_ldimm64_ö¢
(
ö¢
))

943 
	`bpf_c‹e_pois⁄_ö¢
(
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
 + 1, 
ö¢
 + 1);

944 
	`bpf_c‹e_pois⁄_ö¢
(
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
, 
ö¢
);

948 
‹ig_vÆ
 = 
ªs
->orig_val;

949 
√w_vÆ
 = 
ªs
->new_val;

951 
˛ass
) {

952 
BPF_ALU
:

953 
BPF_ALU64
:

954 i‡(
	`BPF_SRC
(
ö¢
->
code
Ë!
BPF_K
)

955  -
EINVAL
;

956 i‡(
ªs
->
vÆid©e
 && 
ö¢
->
imm
 !
‹ig_vÆ
) {

957 
	`¥_w¨n
("prog '%s':Ñelo #%d: unexpected insn #%d (ALU/ALU64) value: got %u,Éxp %u -> %u\n",

958 
¥og_«me
, 
ªlo_idx
,

959 
ö¢_idx
, 
ö¢
->
imm
, 
‹ig_vÆ
, 
√w_vÆ
);

960  -
EINVAL
;

962 
‹ig_vÆ
 = 
ö¢
->
imm
;

963 
ö¢
->
imm
 = 
√w_vÆ
;

964 
	`¥_debug
("prog '%s':Ñelo #%d:Öatched insn #%d (ALU/ALU64) imm %u -> %u\n",

965 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
,

966 
‹ig_vÆ
, 
√w_vÆ
);

968 
BPF_LDX
:

969 
BPF_ST
:

970 
BPF_STX
:

971 i‡(
ªs
->
vÆid©e
 && 
ö¢
->
off
 !
‹ig_vÆ
) {

972 
	`¥_w¨n
("prog '%s':Ñelo #%d: unexpected insn #%d (LDX/ST/STX) value: got %u,Éxp %u -> %u\n",

973 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
, 
ö¢
->
off
, 
‹ig_vÆ
, 
√w_vÆ
);

974  -
EINVAL
;

976 i‡(
√w_vÆ
 > 
SHRT_MAX
) {

977 
	`¥_w¨n
("prog '%s':Ñelo #%d: insn #%d (LDX/ST/STX) valueÅoo big: %u\n",

978 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
, 
√w_vÆ
);

979  -
ERANGE
;

981 i‡(
ªs
->
Áû_memsz_adju°
) {

982 
	`¥_w¨n
("prog '%s':Ñelo #%d: insn #%d (LDX/ST/STX)áccesses field incorrectly. "

984 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
);

985 
pois⁄
;

988 
‹ig_vÆ
 = 
ö¢
->
off
;

989 
ö¢
->
off
 = 
√w_vÆ
;

990 
	`¥_debug
("prog '%s':Ñelo #%d:Öatched insn #%d (LDX/ST/STX) off %u -> %u\n",

991 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
, 
‹ig_vÆ
, 
√w_vÆ
);

993 i‡(
ªs
->
√w_sz
 !ªs->
‹ig_sz
) {

994 
ö¢_byãs_sz
, 
ö¢_bpf_sz
;

996 
ö¢_byãs_sz
 = 
	`ö¢_bpf_size_to_byãs
(
ö¢
);

997 i‡(
ö¢_byãs_sz
 !
ªs
->
‹ig_sz
) {

998 
	`¥_w¨n
("prog '%s':Ñelo #%d: insn #%d (LDX/ST/STX) unexpected mem size: got %d,Éxp %u\n",

999 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
, 
ö¢_byãs_sz
, 
ªs
->
‹ig_sz
);

1000  -
EINVAL
;

1003 
ö¢_bpf_sz
 = 
	`ö¢_byãs_to_bpf_size
(
ªs
->
√w_sz
);

1004 i‡(
ö¢_bpf_sz
 < 0) {

1005 
	`¥_w¨n
("prog '%s':Ñelo #%d: insn #%d (LDX/ST/STX) invalidÇew mem size: %u\n",

1006 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
, 
ªs
->
√w_sz
);

1007  -
EINVAL
;

1010 
ö¢
->
code
 = 
	`BPF_MODE
(ö¢->codeË| 
ö¢_bpf_sz
 | 
	`BPF_CLASS
(insn->code);

1011 
	`¥_debug
("prog '%s':Ñelo #%d:Öatched insn #%d (LDX/ST/STX) mem_sz %u -> %u\n",

1012 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
, 
ªs
->
‹ig_sz
,Ñes->
√w_sz
);

1015 
BPF_LD
: {

1016 
__u64
 
imm
;

1018 i‡(!
	`is_ldimm64_ö¢
(
ö¢
) ||

1019 
ö¢
[0].
§c_ªg
 !0 || in¢[0].
off
 != 0 ||

1020 
ö¢
[1].
code
 !0 || in¢[1].
d°_ªg
 != 0 ||

1021 
ö¢
[1].
§c_ªg
 !0 || in¢[1].
off
 != 0) {

1022 
	`¥_w¨n
("prog '%s':Ñelo #%d: insn #%d (LDIMM64) has unexpected form\n",

1023 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
);

1024  -
EINVAL
;

1027 
imm
 = 
ö¢
[0].imm + ((
__u64
)insn[1].imm << 32);

1028 i‡(
ªs
->
vÆid©e
 && 
imm
 !
‹ig_vÆ
) {

1029 
	`¥_w¨n
("prog '%s':Ñelo #%d: unexpected insn #%d (LDIMM64) value: got %llu,Éxp %u -> %u\n",

1030 
¥og_«me
, 
ªlo_idx
,

1031 
ö¢_idx
, ()
imm
,

1032 
‹ig_vÆ
, 
√w_vÆ
);

1033  -
EINVAL
;

1036 
ö¢
[0].
imm
 = 
√w_vÆ
;

1037 
ö¢
[1].
imm
 = 0;

1038 
	`¥_debug
("prog '%s':Ñelo #%d:Öatched insn #%d (LDIMM64) imm64 %llu -> %u\n",

1039 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
,

1040 ()
imm
, 
√w_vÆ
);

1044 
	`¥_w¨n
("prog '%s':Ñelo #%d:ÅryingÅoÑelocate unrecognized insn #%d, code:0x%x, src:0x%x, dst:0x%x, off:0x%x, imm:0x%x\n",

1045 
¥og_«me
, 
ªlo_idx
, 
ö¢_idx
, 
ö¢
->
code
,

1046 
ö¢
->
§c_ªg
, in¢->
d°_ªg
, in¢->
off
, in¢->
imm
);

1047  -
EINVAL
;

1051 
	}
}

1057 
	$bpf_c‹e_f‹m©_•ec
(*
buf
, 
size_t
 
buf_sz
, c⁄° 
bpf_c‹e_•ec
 *
•ec
)

1059 c⁄° 
btf_ty≥
 *
t
;

1060 c⁄° 
btf_íum
 *
e
;

1061 c⁄° *
s
;

1062 
__u32
 
ty≥_id
;

1063 
i
, 
Àn
 = 0;

1065 
	#≠≥nd_buf
(
fmt
, 
¨gs
...) \

1067 
r
; \

1068 
r
 = 
	`¢¥ötf
(
buf
, 
buf_sz
, 
fmt
, ##
¨gs
); \

1069 
Àn
 +
r
; \

1070 i‡(
r
 >
buf_sz
) \

1071 
r
 = 
buf_sz
; \

1072 
buf
 +
r
; \

1073 
buf_sz
 -
r
; \

1074 })

	)

1076 
ty≥_id
 = 
•ec
->
roŸ_ty≥_id
;

1077 
t
 = 
	`btf_ty≥_by_id
(
•ec
->
btf
, 
ty≥_id
);

1078 
s
 = 
	`btf__«me_by_off£t
(
•ec
->
btf
, 
t
->
«me_off
);

1080 
	`≠≥nd_buf
("<%s> [%u] %s %s",

1081 
	`c‹e_ªlo_köd_°r
(
•ec
->
ªlo_köd
),

1082 
ty≥_id
, 
	`btf_köd_°r
(
t
), 
	`°r_is_em±y
(
s
) ? "<anon>" : s);

1084 i‡(
	`c‹e_ªlo_is_ty≥_ba£d
(
•ec
->
ªlo_köd
))

1085  
Àn
;

1087 i‡(
	`c‹e_ªlo_is_íumvÆ_ba£d
(
•ec
->
ªlo_köd
)) {

1088 
t
 = 
	`skù_mods_™d_ty≥defs
(
•ec
->
btf
, 
ty≥_id
, 
NULL
);

1089 
e
 = 
	`btf_íum
(
t
Ë+ 
•ec
->
øw_•ec
[0];

1090 
s
 = 
	`btf__«me_by_off£t
(
•ec
->
btf
, 
e
->
«me_off
);

1092 
	`≠≥nd_buf
("::%†%u", 
s
, 
e
->
vÆ
);

1093  
Àn
;

1096 i‡(
	`c‹e_ªlo_is_fõld_ba£d
(
•ec
->
ªlo_köd
)) {

1097 
i
 = 0; i < 
•ec
->
Àn
; i++) {

1098 i‡(
•ec
->•ec[
i
].
«me
)

1099 
	`≠≥nd_buf
(".%s", 
•ec
->•ec[
i
].
«me
);

1100 i‡(
i
 > 0 || 
•ec
->•ec[i].
idx
 > 0)

1101 
	`≠≥nd_buf
("[%u]", 
•ec
->•ec[
i
].
idx
);

1104 
	`≠≥nd_buf
(" (");

1105 
i
 = 0; i < 
•ec
->
øw_Àn
; i++)

1106 
	`≠≥nd_buf
("%s%d", 
i
 =0 ? "" : ":", 
•ec
->
øw_•ec
[i]);

1108 i‡(
•ec
->
bô_off£t
 % 8)

1109 
	`≠≥nd_buf
(" @ off£à%u.%u)", 
•ec
->
bô_off£t
 / 8, spec->bit_offset % 8);

1111 
	`≠≥nd_buf
(" @ off£à%u)", 
•ec
->
bô_off£t
 / 8);

1112  
Àn
;

1115  
Àn
;

1116 #unde‡
≠≥nd_buf


1117 
	}
}

1169 
	$bpf_c‹e_ˇlc_ªlo_ö¢
(c⁄° *
¥og_«me
,

1170 c⁄° 
bpf_c‹e_ªlo
 *
ªlo
,

1171 
ªlo_idx
,

1172 c⁄° 
btf
 *
loˇl_btf
,

1173 
bpf_c‹e_ˇnd_li°
 *
ˇnds
,

1174 
bpf_c‹e_•ec
 *
•ecs_s¸©ch
,

1175 
bpf_c‹e_ªlo_ªs
 *
èrg_ªs
)

1177 
bpf_c‹e_•ec
 *
loˇl_•ec
 = &
•ecs_s¸©ch
[0];

1178 
bpf_c‹e_•ec
 *
ˇnd_•ec
 = &
•ecs_s¸©ch
[1];

1179 
bpf_c‹e_•ec
 *
èrg_•ec
 = &
•ecs_s¸©ch
[2];

1180 
bpf_c‹e_ªlo_ªs
 
ˇnd_ªs
;

1181 c⁄° 
btf_ty≥
 *
loˇl_ty≥
;

1182 c⁄° *
loˇl_«me
;

1183 
__u32
 
loˇl_id
;

1184 
•ec_buf
[256];

1185 
i
, 
j
, 
îr
;

1187 
loˇl_id
 = 
ªlo
->
ty≥_id
;

1188 
loˇl_ty≥
 = 
	`btf_ty≥_by_id
(
loˇl_btf
, 
loˇl_id
);

1189 
loˇl_«me
 = 
	`btf__«me_by_off£t
(
loˇl_btf
, 
loˇl_ty≥
->
«me_off
);

1190 i‡(!
loˇl_«me
)

1191  -
EINVAL
;

1193 
îr
 = 
	`bpf_c‹e_∑r£_•ec
(
¥og_«me
, 
loˇl_btf
, 
ªlo
, 
loˇl_•ec
);

1194 i‡(
îr
) {

1195 c⁄° *
•ec_°r
;

1197 
•ec_°r
 = 
	`btf__«me_by_off£t
(
loˇl_btf
, 
ªlo
->
ac˚ss_°r_off
);

1198 
	`¥_w¨n
("prog '%s':Ñelo #%d:Öarsing [%d] %s %s + %s failed: %d\n",

1199 
¥og_«me
, 
ªlo_idx
, 
loˇl_id
, 
	`btf_köd_°r
(
loˇl_ty≥
),

1200 
	`°r_is_em±y
(
loˇl_«me
) ? "<anon>" :Üocal_name,

1201 
•ec_°r
 ?: "<?>", 
îr
);

1202  -
EINVAL
;

1205 
	`bpf_c‹e_f‹m©_•ec
(
•ec_buf
, (•ec_buf), 
loˇl_•ec
);

1206 
	`¥_debug
("¥og '%s':Ññÿ#%d: %s\n", 
¥og_«me
, 
ªlo_idx
, 
•ec_buf
);

1209 i‡(
ªlo
->
köd
 =
BPF_CORE_TYPE_ID_LOCAL
) {

1211 
	`mem£t
(
èrg_ªs
, 0, (*targ_res));

1212 
èrg_ªs
->
vÆid©e
 = 
Ál£
;

1213 
èrg_ªs
->
pois⁄
 = 
Ál£
;

1214 
èrg_ªs
->
‹ig_vÆ
 = 
loˇl_•ec
->
roŸ_ty≥_id
;

1215 
èrg_ªs
->
√w_vÆ
 = 
loˇl_•ec
->
roŸ_ty≥_id
;

1220 i‡(
	`°r_is_em±y
(
loˇl_«me
)) {

1221 
	`¥_w¨n
("prog '%s':Ñelo #%d: <%s> (%d)Ñelocation doesn't supportánonymousÅypes\n",

1222 
¥og_«me
, 
ªlo_idx
, 
	`c‹e_ªlo_köd_°r
(
ªlo
->
köd
),Ñelo->kind);

1223  -
EOPNOTSUPP
;

1226 
i
 = 0, 
j
 = 0; i < 
ˇnds
->
Àn
; i++) {

1227 
îr
 = 
	`bpf_c‹e_•ec_m©ch
(
loˇl_•ec
, 
ˇnds
->ˇnds[
i
].
btf
,

1228 
ˇnds
->ˇnds[
i
].
id
, 
ˇnd_•ec
);

1229 i‡(
îr
 < 0) {

1230 
	`bpf_c‹e_f‹m©_•ec
(
•ec_buf
, (•ec_buf), 
ˇnd_•ec
);

1231 
	`¥_w¨n
("prog '%s':Ñelo #%d:Érror matching candidate #%d %s: %d\n ",

1232 
¥og_«me
, 
ªlo_idx
, 
i
, 
•ec_buf
, 
îr
);

1233  
îr
;

1236 
	`bpf_c‹e_f‹m©_•ec
(
•ec_buf
, (•ec_buf), 
ˇnd_•ec
);

1237 
	`¥_debug
("¥og '%s':Ññÿ#%d: %†ˇndid©ê#%d %s\n", 
¥og_«me
,

1238 
ªlo_idx
, 
îr
 =0 ? "n⁄-m©chög" : "m©chög", 
i
, 
•ec_buf
);

1240 i‡(
îr
 == 0)

1243 
îr
 = 
	`bpf_c‹e_ˇlc_ªlo
(
¥og_«me
, 
ªlo
, 
ªlo_idx
, 
loˇl_•ec
, 
ˇnd_•ec
, &
ˇnd_ªs
);

1244 i‡(
îr
)

1245  
îr
;

1247 i‡(
j
 == 0) {

1248 *
èrg_ªs
 = 
ˇnd_ªs
;

1249 *
èrg_•ec
 = *
ˇnd_•ec
;

1250 } i‡(
ˇnd_•ec
->
bô_off£t
 !
èrg_•ec
->bit_offset) {

1254 
	`¥_w¨n
("prog '%s':Ñelo #%d: field offsetámbiguity: %u != %u\n",

1255 
¥og_«me
, 
ªlo_idx
, 
ˇnd_•ec
->
bô_off£t
,

1256 
èrg_•ec
->
bô_off£t
);

1257  -
EINVAL
;

1258 } i‡(
ˇnd_ªs
.
pois⁄
 !
èrg_ªs
->poison ||

1259 
ˇnd_ªs
.
√w_vÆ
 !
èrg_ªs
->new_val) {

1264 
	`¥_w¨n
("prog '%s':Ñelo #%d:Ñelocation decisionámbiguity: %s %u != %s %u\n",

1265 
¥og_«me
, 
ªlo_idx
,

1266 
ˇnd_ªs
.
pois⁄
 ? "Áûuª" : "suc˚ss", c™d_ªs.
√w_vÆ
,

1267 
èrg_ªs
->
pois⁄
 ? "Áûuª" : "suc˚ss",Å¨g_ªs->
√w_vÆ
);

1268  -
EINVAL
;

1271 
ˇnds
->ˇnds[
j
++] = c™ds->ˇnds[
i
];

1282 i‡(
j
 > 0)

1283 
ˇnds
->
Àn
 = 
j
;

1296 i‡(
j
 == 0) {

1297 
	`¥_debug
("prog '%s':Ñelo #%d:Ço matchingÅargets found\n",

1298 
¥og_«me
, 
ªlo_idx
);

1301 
îr
 = 
	`bpf_c‹e_ˇlc_ªlo
(
¥og_«me
, 
ªlo
, 
ªlo_idx
, 
loˇl_•ec
, 
NULL
, 
èrg_ªs
);

1302 i‡(
îr
)

1303  
îr
;

1307 
	}
}

	@relo_core.h

4 #i‚de‡
__RELO_CORE_H


5 
	#__RELO_CORE_H


	)

7 
	~<löux/bpf.h
>

9 
	sbpf_c‹e_ˇnd
 {

10 c⁄° 
btf
 *
	mbtf
;

11 
__u32
 
	mid
;

15 
	sbpf_c‹e_ˇnd_li°
 {

16 
bpf_c‹e_ˇnd
 *
	mˇnds
;

17 
	mÀn
;

20 
	#BPF_CORE_SPEC_MAX_LEN
 64

	)

23 
	sbpf_c‹e_ac˚ss‹
 {

24 
__u32
 
	mty≥_id
;

25 
__u32
 
	midx
;

26 c⁄° *
	m«me
;

29 
	sbpf_c‹e_•ec
 {

30 c⁄° 
btf
 *
	mbtf
;

32 
bpf_c‹e_ac˚ss‹
 
	m•ec
[
BPF_CORE_SPEC_MAX_LEN
];

34 
__u32
 
	mroŸ_ty≥_id
;

36 
bpf_c‹e_ªlo_köd
 
	mªlo_köd
;

38 
	mÀn
;

40 
	møw_•ec
[
BPF_CORE_SPEC_MAX_LEN
];

42 
	møw_Àn
;

44 
__u32
 
	mbô_off£t
;

47 
	sbpf_c‹e_ªlo_ªs
 {

49 
__u32
 
	m‹ig_vÆ
;

51 
__u32
 
	m√w_vÆ
;

53 
boﬁ
 
	mpois⁄
;

55 
boﬁ
 
	mvÆid©e
;

64 
boﬁ
 
	mÁû_memsz_adju°
;

65 
__u32
 
	m‹ig_sz
;

66 
__u32
 
	m‹ig_ty≥_id
;

67 
__u32
 
	m√w_sz
;

68 
__u32
 
	m√w_ty≥_id
;

71 
bpf_c‹e_ty≥s_¨e_com∑t
(c⁄° 
btf
 *
loˇl_btf
, 
__u32
 
loˇl_id
,

72 c⁄° 
btf
 *
èrg_btf
, 
__u32
 
èrg_id
);

74 
size_t
 
bpf_c‹e_es£¡ül_«me_Àn
(c⁄° *
«me
);

76 
bpf_c‹e_ˇlc_ªlo_ö¢
(c⁄° *
¥og_«me
,

77 c⁄° 
bpf_c‹e_ªlo
 *
ªlo
, 
ªlo_idx
,

78 c⁄° 
btf
 *
loˇl_btf
,

79 
bpf_c‹e_ˇnd_li°
 *
ˇnds
,

80 
bpf_c‹e_•ec
 *
•ecs_s¸©ch
,

81 
bpf_c‹e_ªlo_ªs
 *
èrg_ªs
);

83 
bpf_c‹e_∑tch_ö¢
(c⁄° *
¥og_«me
, 
bpf_ö¢
 *
ö¢
,

84 
ö¢_idx
, c⁄° 
bpf_c‹e_ªlo
 *
ªlo
,

85 
ªlo_idx
, c⁄° 
bpf_c‹e_ªlo_ªs
 *
ªs
);

87 
bpf_c‹e_∑r£_•ec
(c⁄° *
¥og_«me
, c⁄° 
btf
 *btf,

88 c⁄° 
bpf_c‹e_ªlo
 *
ªlo
,

89 
bpf_c‹e_•ec
 *
•ec
);

91 
bpf_c‹e_f‹m©_•ec
(*
buf
, 
size_t
 
buf_sz
, c⁄° 
bpf_c‹e_•ec
 *
•ec
);

	@ringbuf.c

7 #i‚de‡
_GNU_SOURCE


8 
	#_GNU_SOURCE


	)

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<î∫o.h
>

13 
	~<uni°d.h
>

14 
	~<löux/îr.h
>

15 
	~<löux/bpf.h
>

16 
	~<asm/b¨rõr.h
>

17 
	~<sys/mm™.h
>

18 
	~<sys/ïﬁl.h
>

20 
	~"libbpf.h
"

21 
	~"libbpf_öã∫Æ.h
"

22 
	~"bpf.h
"

24 
	srög
 {

25 
rög_buf„r_ßm∂e_‚
 
	mßm∂e_cb
;

26 *
	m˘x
;

27 *
	md©a
;

28 *
	mc⁄sumî_pos
;

29 *
	m¥odu˚r_pos
;

30 
	mmask
;

31 
	mm≠_fd
;

34 
	srög_buf„r
 {

35 
ïﬁl_evít
 *
	mevíts
;

36 
rög
 *
	mrögs
;

37 
size_t
 
	m∑ge_size
;

38 
	mïﬁl_fd
;

39 
	mrög_˙t
;

42 
	$rögbuf_unm≠_rög
(
rög_buf„r
 *
rb
, 
rög
 *
r
)

44 i‡(
r
->
c⁄sumî_pos
) {

45 
	`munm≠
(
r
->
c⁄sumî_pos
, 
rb
->
∑ge_size
);

46 
r
->
c⁄sumî_pos
 = 
NULL
;

48 i‡(
r
->
¥odu˚r_pos
) {

49 
	`munm≠
(
r
->
¥odu˚r_pos
, 
rb
->
∑ge_size
 + 2 * (r->
mask
 + 1));

50 
r
->
¥odu˚r_pos
 = 
NULL
;

52 
	}
}

55 
	$rög_buf„r__add
(
rög_buf„r
 *
rb
, 
m≠_fd
,

56 
rög_buf„r_ßm∂e_‚
 
ßm∂e_cb
, *
˘x
)

58 
bpf_m≠_öfo
 
öfo
;

59 
__u32
 
Àn
 = (
öfo
);

60 
ïﬁl_evít
 *
e
;

61 
rög
 *
r
;

62 *
tmp
;

63 
îr
;

65 
	`mem£t
(&
öfo
, 0, (info));

67 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
m≠_fd
, &
öfo
, &
Àn
);

68 i‡(
îr
) {

69 
îr
 = -
î∫o
;

70 
	`¥_w¨n
("ringbuf: failedÅo get map info for fd=%d: %d\n",

71 
m≠_fd
, 
îr
);

72  
	`libbpf_îr
(
îr
);

75 i‡(
öfo
.
ty≥
 !
BPF_MAP_TYPE_RINGBUF
) {

76 
	`¥_w¨n
("ringbuf: map fd=%d isÇot BPF_MAP_TYPE_RINGBUF\n",

77 
m≠_fd
);

78  
	`libbpf_îr
(-
EINVAL
);

81 
tmp
 = 
	`libbpf_ªÆloˇºay
(
rb
->
rögs
,Ñb->
rög_˙t
 + 1, (*rb->rings));

82 i‡(!
tmp
)

83  
	`libbpf_îr
(-
ENOMEM
);

84 
rb
->
rögs
 = 
tmp
;

86 
tmp
 = 
	`libbpf_ªÆloˇºay
(
rb
->
evíts
,Ñb->
rög_˙t
 + 1, (*rb->events));

87 i‡(!
tmp
)

88  
	`libbpf_îr
(-
ENOMEM
);

89 
rb
->
evíts
 = 
tmp
;

91 
r
 = &
rb
->
rögs
[rb->
rög_˙t
];

92 
	`mem£t
(
r
, 0, (*r));

94 
r
->
m≠_fd
 = map_fd;

95 
r
->
ßm∂e_cb
 = sample_cb;

96 
r
->
˘x
 = ctx;

97 
r
->
mask
 = 
öfo
.
max_íåõs
 - 1;

100 
tmp
 = 
	`mm≠
(
NULL
, 
rb
->
∑ge_size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
,

101 
m≠_fd
, 0);

102 i‡(
tmp
 =
MAP_FAILED
) {

103 
îr
 = -
î∫o
;

104 
	`¥_w¨n
("ringbuf: failedÅo mmap consumerÖage for map fd=%d: %d\n",

105 
m≠_fd
, 
îr
);

106  
	`libbpf_îr
(
îr
);

108 
r
->
c⁄sumî_pos
 = 
tmp
;

114 
tmp
 = 
	`mm≠
(
NULL
, 
rb
->
∑ge_size
 + 2 * 
öfo
.
max_íåõs
, 
PROT_READ
,

115 
MAP_SHARED
, 
m≠_fd
, 
rb
->
∑ge_size
);

116 i‡(
tmp
 =
MAP_FAILED
) {

117 
îr
 = -
î∫o
;

118 
	`rögbuf_unm≠_rög
(
rb
, 
r
);

119 
	`¥_w¨n
("ringbuf: failedÅo mmap dataÖages for map fd=%d: %d\n",

120 
m≠_fd
, 
îr
);

121  
	`libbpf_îr
(
îr
);

123 
r
->
¥odu˚r_pos
 = 
tmp
;

124 
r
->
d©a
 = 
tmp
 + 
rb
->
∑ge_size
;

126 
e
 = &
rb
->
evíts
[rb->
rög_˙t
];

127 
	`mem£t
(
e
, 0, (*e));

129 
e
->
evíts
 = 
EPOLLIN
;

130 
e
->
d©a
.
fd
 = 
rb
->
rög_˙t
;

131 i‡(
	`ïﬁl_˘l
(
rb
->
ïﬁl_fd
, 
EPOLL_CTL_ADD
, 
m≠_fd
, 
e
) < 0) {

132 
îr
 = -
î∫o
;

133 
	`rögbuf_unm≠_rög
(
rb
, 
r
);

134 
	`¥_w¨n
("ringbuf: failedÅoÉpolládd map fd=%d: %d\n",

135 
m≠_fd
, 
îr
);

136  
	`libbpf_îr
(
îr
);

139 
rb
->
rög_˙t
++;

141 
	}
}

143 
	$rög_buf„r__‰ì
(
rög_buf„r
 *
rb
)

145 
i
;

147 i‡(!
rb
)

150 
i
 = 0; i < 
rb
->
rög_˙t
; ++i)

151 
	`rögbuf_unm≠_rög
(
rb
, &rb->
rögs
[
i
]);

152 i‡(
rb
->
ïﬁl_fd
 >= 0)

153 
	`˛o£
(
rb
->
ïﬁl_fd
);

155 
	`‰ì
(
rb
->
evíts
);

156 
	`‰ì
(
rb
->
rögs
);

157 
	`‰ì
(
rb
);

158 
	}
}

160 
rög_buf„r
 *

161 
	$rög_buf„r__√w
(
m≠_fd
, 
rög_buf„r_ßm∂e_‚
 
ßm∂e_cb
, *
˘x
,

162 c⁄° 
rög_buf„r_›ts
 *
›ts
)

164 
rög_buf„r
 *
rb
;

165 
îr
;

167 i‡(!
	`OPTS_VALID
(
›ts
, 
rög_buf„r_›ts
))

168  
î∫o
 = 
EINVAL
, 
NULL
;

170 
rb
 = 
	`ˇŒoc
(1, (*rb));

171 i‡(!
rb
)

172  
î∫o
 = 
ENOMEM
, 
NULL
;

174 
rb
->
∑ge_size
 = 
	`gë∑gesize
();

176 
rb
->
ïﬁl_fd
 = 
	`ïﬁl_¸óã1
(
EPOLL_CLOEXEC
);

177 i‡(
rb
->
ïﬁl_fd
 < 0) {

178 
îr
 = -
î∫o
;

179 
	`¥_w¨n
("rögbuf: faûedÅÿ¸óãÉpﬁ»ö°™˚: %d\n", 
îr
);

180 
îr_out
;

183 
îr
 = 
	`rög_buf„r__add
(
rb
, 
m≠_fd
, 
ßm∂e_cb
, 
˘x
);

184 i‡(
îr
)

185 
îr_out
;

187  
rb
;

189 
îr_out
:

190 
	`rög_buf„r__‰ì
(
rb
);

191  
î∫o
 = -
îr
, 
NULL
;

192 
	}
}

194 
ölöe
 
	$roundup_Àn
(
__u32
 
Àn
)

197 
Àn
 <<= 2;

198 
Àn
 >>= 2;

200 
Àn
 +
BPF_RINGBUF_HDR_SZ
;

202  (
Àn
 + 7) / 8 * 8;

203 
	}
}

205 
öt64_t
 
	$rögbuf_¥o˚ss_rög
(
rög
* 
r
)

207 *
Àn_±r
, 
Àn
, 
îr
;

209 
öt64_t
 
˙t
 = 0;

210 
c⁄s_pos
, 
¥od_pos
;

211 
boﬁ
 
gŸ_√w_d©a
;

212 *
ßm∂e
;

214 
c⁄s_pos
 = 
	`smp_lﬂd_acquúe
(
r
->
c⁄sumî_pos
);

216 
gŸ_√w_d©a
 = 
Ál£
;

217 
¥od_pos
 = 
	`smp_lﬂd_acquúe
(
r
->
¥odu˚r_pos
);

218 
c⁄s_pos
 < 
¥od_pos
) {

219 
Àn_±r
 = 
r
->
d©a
 + (
c⁄s_pos
 &Ñ->
mask
);

220 
Àn
 = 
	`smp_lﬂd_acquúe
(
Àn_±r
);

223 i‡(
Àn
 & 
BPF_RINGBUF_BUSY_BIT
)

224 
d⁄e
;

226 
gŸ_√w_d©a
 = 
åue
;

227 
c⁄s_pos
 +
	`roundup_Àn
(
Àn
);

229 i‡((
Àn
 & 
BPF_RINGBUF_DISCARD_BIT
) == 0) {

230 
ßm∂e
 = (*)
Àn_±r
 + 
BPF_RINGBUF_HDR_SZ
;

231 
îr
 = 
r
->
	`ßm∂e_cb
‘->
˘x
, 
ßm∂e
, 
Àn
);

232 i‡(
îr
 < 0) {

234 
	`smp_°‹e_ªÀa£
(
r
->
c⁄sumî_pos
,

235 
c⁄s_pos
);

236  
îr
;

238 
˙t
++;

241 
	`smp_°‹e_ªÀa£
(
r
->
c⁄sumî_pos
, 
c⁄s_pos
);

243 } 
gŸ_√w_d©a
);

244 
d⁄e
:

245  
˙t
;

246 
	}
}

253 
	$rög_buf„r__c⁄sume
(
rög_buf„r
 *
rb
)

255 
öt64_t
 
îr
, 
ªs
 = 0;

256 
i
;

258 
i
 = 0; i < 
rb
->
rög_˙t
; i++) {

259 
rög
 *rög = &
rb
->
rögs
[
i
];

261 
îr
 = 
	`rögbuf_¥o˚ss_rög
(
rög
);

262 i‡(
îr
 < 0)

263  
	`libbpf_îr
(
îr
);

264 
ªs
 +
îr
;

266 i‡(
ªs
 > 
INT_MAX
)

267  
INT_MAX
;

268  
ªs
;

269 
	}
}

275 
	$rög_buf„r__pﬁl
(
rög_buf„r
 *
rb
, 
timeout_ms
)

277 
i
, 
˙t
;

278 
öt64_t
 
îr
, 
ªs
 = 0;

280 
˙t
 = 
	`ïﬁl_waô
(
rb
->
ïﬁl_fd
,Ñb->
evíts
,Ñb->
rög_˙t
, 
timeout_ms
);

281 i‡(
˙t
 < 0)

282  
	`libbpf_îr
(-
î∫o
);

284 
i
 = 0; i < 
˙t
; i++) {

285 
__u32
 
rög_id
 = 
rb
->
evíts
[
i
].
d©a
.
fd
;

286 
rög
 *rög = &
rb
->
rögs
[
rög_id
];

288 
îr
 = 
	`rögbuf_¥o˚ss_rög
(
rög
);

289 i‡(
îr
 < 0)

290  
	`libbpf_îr
(
îr
);

291 
ªs
 +
îr
;

293 i‡(
ªs
 > 
INT_MAX
)

294  
INT_MAX
;

295  
ªs
;

296 
	}
}

299 
	$rög_buf„r__ïﬁl_fd
(c⁄° 
rög_buf„r
 *
rb
)

301  
rb
->
ïﬁl_fd
;

302 
	}
}

	@skel_internal.h

3 #i‚de‡
__SKEL_INTERNAL_H


4 
	#__SKEL_INTERNAL_H


	)

6 #ifde‡
__KERNEL__


7 
	~<löux/fdèbÀ.h
>

8 
	~<löux/mm.h
>

9 
	~<löux/mm™.h
>

10 
	~<löux/¶ab.h
>

11 
	~<löux/bpf.h
>

13 
	~<uni°d.h
>

14 
	~<sys/sysˇŒ.h
>

15 
	~<sys/mm™.h
>

16 
	~<°dlib.h
>

17 
	~"bpf.h
"

20 #i‚de‡
__NR_bpf


21 #i‡
deföed
(
__mùs__
Ë&& deföed(
_ABIO32
)

22 
	#__NR_bpf
 4355

	)

23 #ñi‡
deföed
(
__mùs__
Ë&& deföed(
_ABIN32
)

24 
	#__NR_bpf
 6319

	)

25 #ñi‡
deföed
(
__mùs__
Ë&& deföed(
_ABI64
)

26 
	#__NR_bpf
 5315

	)

37 
	sbpf_m≠_desc
 {

39 
	mm≠_fd
;

41 
__u32
 
	mmax_íåõs
;

42 
__Æig√d_u64
 
	möôül_vÆue
;

44 
	sbpf_¥og_desc
 {

45 
	m¥og_fd
;

49 
	mBPF_SKEL_KERNEL
 = (1ULL << 0),

52 
	sbpf_lﬂdî_˘x
 {

53 
__u32
 
	msz
;

54 
__u32
 
	mÊags
;

55 
__u32
 
	mlog_Àvñ
;

56 
__u32
 
	mlog_size
;

57 
__u64
 
	mlog_buf
;

60 
	sbpf_lﬂd_™d_run_›ts
 {

61 
bpf_lﬂdî_˘x
 *
	m˘x
;

62 c⁄° *
	md©a
;

63 c⁄° *
	mö¢s
;

64 
__u32
 
	md©a_sz
;

65 
__u32
 
	mö¢s_sz
;

66 c⁄° *
	mîr°r
;

69 
bpf_sys_bpf
(
__u32
 
cmd
, *
©å
, __u32 
©å_size
);

71 
ölöe
 
	$skñ_sys_bpf
(
bpf_cmd
 
cmd
, 
bpf_©å
 *
©å
,

72 
size
)

74 #ifde‡
__KERNEL__


75  
	`bpf_sys_bpf
(
cmd
, 
©å
, 
size
);

77  
	`sysˇŒ
(
__NR_bpf
, 
cmd
, 
©å
, 
size
);

79 
	}
}

81 #ifde‡
__KERNEL__


82 
ölöe
 
	$˛o£
(
fd
)

84  
	`˛o£_fd
(
fd
);

85 
	}
}

87 
ölöe
 *
	$skñ_Æloc
(
size_t
 
size
)

89 
bpf_lﬂdî_˘x
 *
˘x
 = 
	`kzÆloc
(
size
, 
GFP_KERNEL
);

91 i‡(!
˘x
)

92  
NULL
;

93 
˘x
->
Êags
 |
BPF_SKEL_KERNEL
;

94  
˘x
;

95 
	}
}

97 
ölöe
 
	$skñ_‰ì
(c⁄° *
p
)

99 
	`k‰ì
(
p
);

100 
	}
}

124 
ölöe
 
	$skñ_‰ì_m≠_d©a
(*
p
, 
__u64
 
addr
, 
size_t
 
sz
)

126 i‡(
addr
 != ~0ULL)

127 
	`kv‰ì
(
p
);

131 
	}
}

133 
ölöe
 *
	$skñ_¥ï_m≠_d©a
(c⁄° *
vÆ
, 
size_t
 
mm≠_sz
, size_à
vÆ_sz
)

135 *
addr
;

137 
addr
 = 
	`kvmÆloc
(
vÆ_sz
, 
GFP_KERNEL
);

138 i‡(!
addr
)

139  
NULL
;

140 
	`mem˝y
(
addr
, 
vÆ
, 
vÆ_sz
);

141  
addr
;

142 
	}
}

144 
ölöe
 *
	$skñ_föÆize_m≠_d©a
(
__u64
 *
öô_vÆ
, 
size_t
 
mm≠_sz
, 
Êags
, 
fd
)

146 
bpf_m≠
 *
m≠
;

147 *
addr
 = 
NULL
;

149 
	`kv‰ì
((*Ë(Ë*
öô_vÆ
);

150 *
öô_vÆ
 = ~0ULL;

155 
m≠
 = 
	`bpf_m≠_gë
(
fd
);

156 i‡(
	`IS_ERR
(
m≠
))

157  
NULL
;

158 i‡(
m≠
->
m≠_ty≥
 !
BPF_MAP_TYPE_ARRAY
)

159 
out
;

160 
addr
 = ((
bpf_¨øy
 *)
m≠
)->
vÆue
;

162 
out
:

163 
	`bpf_m≠_put
(
m≠
);

164  
addr
;

165 
	}
}

169 
ölöe
 *
	$skñ_Æloc
(
size_t
 
size
)

171  
	`ˇŒoc
(1, 
size
);

172 
	}
}

174 
ölöe
 
	$skñ_‰ì
(*
p
)

176 
	`‰ì
(
p
);

177 
	}
}

179 
ölöe
 
	$skñ_‰ì_m≠_d©a
(*
p
, 
__u64
 
addr
, 
size_t
 
sz
)

181 
	`munm≠
(
p
, 
sz
);

182 
	}
}

184 
ölöe
 *
	$skñ_¥ï_m≠_d©a
(c⁄° *
vÆ
, 
size_t
 
mm≠_sz
, size_à
vÆ_sz
)

186 *
addr
;

188 
addr
 = 
	`mm≠
(
NULL
, 
mm≠_sz
, 
PROT_READ
 | 
PROT_WRITE
,

189 
MAP_SHARED
 | 
MAP_ANONYMOUS
, -1, 0);

190 i‡(
addr
 == (*) -1)

191  
NULL
;

192 
	`mem˝y
(
addr
, 
vÆ
, 
vÆ_sz
);

193  
addr
;

194 
	}
}

196 
ölöe
 *
	$skñ_föÆize_m≠_d©a
(
__u64
 *
öô_vÆ
, 
size_t
 
mm≠_sz
, 
Êags
, 
fd
)

198 *
addr
;

200 
addr
 = 
	`mm≠
((*Ë(Ë*
öô_vÆ
, 
mm≠_sz
, 
Êags
, 
MAP_SHARED
 | 
MAP_FIXED
, 
fd
, 0);

201 i‡(
addr
 == (*) -1)

202  
NULL
;

203  
addr
;

204 
	}
}

207 
ölöe
 
	$skñ_˛o£nz
(
fd
)

209 i‡(
fd
 > 0)

210  
	`˛o£
(
fd
);

211  -
EINVAL
;

212 
	}
}

214 #i‚de‡
off£to„nd


215 
	#off£to„nd
(
TYPE
, 
MEMBER
) \

216 (
	`off£tof
(
TYPE
, 
MEMBER
Ë+ ((((TYPE *)0)->MEMBER)))

	)

219 
ölöe
 
	$skñ_m≠_¸óã
(
bpf_m≠_ty≥
 
m≠_ty≥
,

220 c⁄° *
m≠_«me
,

221 
__u32
 
key_size
,

222 
__u32
 
vÆue_size
,

223 
__u32
 
max_íåõs
)

225 c⁄° 
size_t
 
©å_sz
 = 
	`off£to„nd
(
bpf_©å
, 
m≠_exåa
);

226 
bpf_©å
 
©å
;

228 
	`mem£t
(&
©å
, 0, 
©å_sz
);

230 
©å
.
m≠_ty≥
 = map_type;

231 
	`°∫˝y
(
©å
.
m≠_«me
, map_name, (attr.map_name));

232 
©å
.
key_size
 = key_size;

233 
©å
.
vÆue_size
 = value_size;

234 
©å
.
max_íåõs
 = max_entries;

236  
	`skñ_sys_bpf
(
BPF_MAP_CREATE
, &
©å
, 
©å_sz
);

237 
	}
}

239 
ölöe
 
	$skñ_m≠_upd©e_ñem
(
fd
, c⁄° *
key
,

240 c⁄° *
vÆue
, 
__u64
 
Êags
)

242 c⁄° 
size_t
 
©å_sz
 = 
	`off£to„nd
(
bpf_©å
, 
Êags
);

243 
bpf_©å
 
©å
;

245 
	`mem£t
(&
©å
, 0, 
©å_sz
);

246 
©å
.
m≠_fd
 = 
fd
;

247 
©å
.
key
 = () key;

248 
©å
.
vÆue
 = () value;

249 
©å
.
Êags
 = flags;

251  
	`skñ_sys_bpf
(
BPF_MAP_UPDATE_ELEM
, &
©å
, 
©å_sz
);

252 
	}
}

254 
ölöe
 
	$skñ_øw_åa˚poöt_›í
(c⁄° *
«me
, 
¥og_fd
)

256 c⁄° 
size_t
 
©å_sz
 = 
	`off£to„nd
(
bpf_©å
, 
øw_åa˚poöt
.
¥og_fd
);

257 
bpf_©å
 
©å
;

259 
	`mem£t
(&
©å
, 0, 
©å_sz
);

260 
©å
.
øw_åa˚poöt
.
«me
 = ()Çame;

261 
©å
.
øw_åa˚poöt
.
¥og_fd
 =Örog_fd;

263  
	`skñ_sys_bpf
(
BPF_RAW_TRACEPOINT_OPEN
, &
©å
, 
©å_sz
);

264 
	}
}

266 
ölöe
 
	$skñ_lök_¸óã
(
¥og_fd
, 
èrgë_fd
,

267 
bpf_©èch_ty≥
 
©èch_ty≥
)

269 c⁄° 
size_t
 
©å_sz
 = 
	`off£to„nd
(
bpf_©å
, 
lök_¸óã
.
ôî_öfo_Àn
);

270 
bpf_©å
 
©å
;

272 
	`mem£t
(&
©å
, 0, 
©å_sz
);

273 
©å
.
lök_¸óã
.
¥og_fd
 =Örog_fd;

274 
©å
.
lök_¸óã
.
èrgë_fd
 =Åarget_fd;

275 
©å
.
lök_¸óã
.
©èch_ty≥
 =áttach_type;

277  
	`skñ_sys_bpf
(
BPF_LINK_CREATE
, &
©å
, 
©å_sz
);

278 
	}
}

280 #ifde‡
__KERNEL__


281 
	#£t_îr


	)

283 
	#£t_îr
 
îr
 = -
î∫o


	)

286 
ölöe
 
	$bpf_lﬂd_™d_run
(
bpf_lﬂd_™d_run_›ts
 *
›ts
)

288 
m≠_fd
 = -1, 
¥og_fd
 = -1, 
key
 = 0, 
îr
;

289 
bpf_©å
 
©å
;

291 
îr
 = 
m≠_fd
 = 
	`skñ_m≠_¸óã
(
BPF_MAP_TYPE_ARRAY
, "__lﬂdî.m≠", 4, 
›ts
->
d©a_sz
, 1);

292 i‡(
m≠_fd
 < 0) {

293 
›ts
->
îr°r
 = "failedÅo createÜoader map";

294 
£t_îr
;

295 
out
;

298 
îr
 = 
	`skñ_m≠_upd©e_ñem
(
m≠_fd
, &
key
, 
›ts
->
d©a
, 0);

299 i‡(
îr
 < 0) {

300 
›ts
->
îr°r
 = "failedÅo updateÜoader map";

301 
£t_îr
;

302 
out
;

305 
	`mem£t
(&
©å
, 0, (attr));

306 
©å
.
¥og_ty≥
 = 
BPF_PROG_TYPE_SYSCALL
;

307 
©å
.
ö¢s
 = (Ë
›ts
->insns;

308 
©å
.
ö¢_˙t
 = 
›ts
->
ö¢s_sz
 / (
bpf_ö¢
);

309 
©å
.
li˚n£
 = () "Dual BSD/GPL";

310 
	`mem˝y
(
©å
.
¥og_«me
, "__loader.prog", ("__loader.prog"));

311 
©å
.
fd_¨øy
 = (Ë&
m≠_fd
;

312 
©å
.
log_Àvñ
 = 
›ts
->
˘x
->log_level;

313 
©å
.
log_size
 = 
›ts
->
˘x
->log_size;

314 
©å
.
log_buf
 = 
›ts
->
˘x
->log_buf;

315 
©å
.
¥og_Êags
 = 
BPF_F_SLEEPABLE
;

316 
îr
 = 
¥og_fd
 = 
	`skñ_sys_bpf
(
BPF_PROG_LOAD
, &
©å
, (attr));

317 i‡(
¥og_fd
 < 0) {

318 
›ts
->
îr°r
 = "failedÅoÜoadÜoaderÖrog";

319 
£t_îr
;

320 
out
;

323 
	`mem£t
(&
©å
, 0, (attr));

324 
©å
.
ã°
.
¥og_fd
 =Örog_fd;

325 
©å
.
ã°
.
˘x_ö
 = (Ë
›ts
->
˘x
;

326 
©å
.
ã°
.
˘x_size_ö
 = 
›ts
->
˘x
->
sz
;

327 
îr
 = 
	`skñ_sys_bpf
(
BPF_PROG_RUN
, &
©å
, (attr));

328 i‡(
îr
 < 0 || ()
©å
.
ã°
.
ªtvÆ
 < 0) {

329 
›ts
->
îr°r
 = "failedÅoÉxecuteÜoaderÖrog";

330 i‡(
îr
 < 0) {

331 
£t_îr
;

333 
îr
 = ()
©å
.
ã°
.
ªtvÆ
;

334 #i‚de‡
__KERNEL__


335 
î∫o
 = -
îr
;

338 
out
;

340 
îr
 = 0;

341 
out
:

342 i‡(
m≠_fd
 >= 0)

343 
	`˛o£
(
m≠_fd
);

344 i‡(
¥og_fd
 >= 0)

345 
	`˛o£
(
¥og_fd
);

346  
îr
;

347 
	}
}

	@str_error.c

2 #unde‡
_GNU_SOURCE


3 
	~<°rög.h
>

4 
	~<°dio.h
>

5 
	~"°r_îr‹.h
"

8 #¥agm®
GCC
 
pois⁄
 
u8
 
u16
 
u32
 
u64
 
s8
 
s16
 
s32
 
s64


15 *
	$libbpf_°ªº‹_r
(
îr
, *
d°
, 
Àn
)

17 
ªt
 = 
	`°ªº‹_r
(
îr
 < 0 ? -î∏:Éº, 
d°
, 
Àn
);

18 i‡(
ªt
)

19 
	`¢¥ötf
(
d°
, 
Àn
, "ERROR: såîr‹_r(%d)=%d", 
îr
, 
ªt
);

20  
d°
;

21 
	}
}

	@str_error.h

2 #i‚de‡
__LIBBPF_STR_ERROR_H


3 
	#__LIBBPF_STR_ERROR_H


	)

5 *
libbpf_°ªº‹_r
(
îr
, *
d°
, 
Àn
);

	@strset.c

3 
	~<°döt.h
>

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<î∫o.h
>

7 
	~<löux/îr.h
>

8 
	~"hashm≠.h
"

9 
	~"libbpf_öã∫Æ.h
"

10 
	~"°r£t.h
"

12 
	s°r£t
 {

13 *
	m°rs_d©a
;

14 
size_t
 
	m°rs_d©a_Àn
;

15 
size_t
 
	m°rs_d©a_ˇp
;

16 
size_t
 
	m°rs_d©a_max_Àn
;

19 
hashm≠
 *
	m°rs_hash
;

22 
size_t
 
	$°r£t_hash_‚
(c⁄° *
key
, *
˘x
)

24 c⁄° 
°r£t
 *
s
 = 
˘x
;

25 c⁄° *
°r
 = 
s
->
°rs_d©a
 + ()
key
;

27  
	`°r_hash
(
°r
);

28 
	}
}

30 
boﬁ
 
	$°r£t_equÆ_‚
(c⁄° *
key1
, c⁄° *
key2
, *
˘x
)

32 c⁄° 
°r£t
 *
s
 = 
˘x
;

33 c⁄° *
°r1
 = 
s
->
°rs_d©a
 + ()
key1
;

34 c⁄° *
°r2
 = 
s
->
°rs_d©a
 + ()
key2
;

36  
	`°rcmp
(
°r1
, 
°r2
) == 0;

37 
	}
}

39 
°r£t
 *
	$°r£t__√w
(
size_t
 
max_d©a_sz
, c⁄° *
öô_d©a
, size_à
öô_d©a_sz
)

41 
°r£t
 *
£t
 = 
	`ˇŒoc
(1, (*set));

42 
hashm≠
 *
hash
;

43 
îr
 = -
ENOMEM
;

45 i‡(!
£t
)

46  
	`ERR_PTR
(-
ENOMEM
);

48 
hash
 = 
	`hashm≠__√w
(
°r£t_hash_‚
, 
°r£t_equÆ_‚
, 
£t
);

49 i‡(
	`IS_ERR
(
hash
))

50 
îr_out
;

52 
£t
->
°rs_d©a_max_Àn
 = 
max_d©a_sz
;

53 
£t
->
°rs_hash
 = 
hash
;

55 i‡(
öô_d©a
) {

56 
off
;

58 
£t
->
°rs_d©a
 = 
	`mÆloc
(
öô_d©a_sz
);

59 i‡(!
£t
->
°rs_d©a
)

60 
îr_out
;

62 
	`mem˝y
(
£t
->
°rs_d©a
, 
öô_d©a
, 
öô_d©a_sz
);

63 
£t
->
°rs_d©a_Àn
 = 
öô_d©a_sz
;

64 
£t
->
°rs_d©a_ˇp
 = 
öô_d©a_sz
;

66 
off
 = 0; of‡< 
£t
->
°rs_d©a_Àn
; of‡+
	`°æí
(£t->
°rs_d©a
 + off) + 1) {

70 
îr
 = 
	`hashm≠__add
(
hash
, (*)
off
, (*)off);

71 i‡(
îr
 =-
EEXIST
)

73 i‡(
îr
)

74 
îr_out
;

78  
£t
;

79 
îr_out
:

80 
	`°r£t__‰ì
(
£t
);

81  
	`ERR_PTR
(
îr
);

82 
	}
}

84 
	$°r£t__‰ì
(
°r£t
 *
£t
)

86 i‡(
	`IS_ERR_OR_NULL
(
£t
))

89 
	`hashm≠__‰ì
(
£t
->
°rs_hash
);

90 
	`‰ì
(
£t
->
°rs_d©a
);

91 
	`‰ì
(
£t
);

92 
	}
}

94 
size_t
 
	$°r£t__d©a_size
(c⁄° 
°r£t
 *
£t
)

96  
£t
->
°rs_d©a_Àn
;

97 
	}
}

99 c⁄° *
	$°r£t__d©a
(c⁄° 
°r£t
 *
£t
)

101  
£t
->
°rs_d©a
;

102 
	}
}

104 *
	$°r£t_add_°r_mem
(
°r£t
 *
£t
, 
size_t
 
add_sz
)

106  
	`libbpf_add_mem
(&
£t
->
°rs_d©a
, &£t->
°rs_d©a_ˇp
, 1,

107 
£t
->
°rs_d©a_Àn
, së->
°rs_d©a_max_Àn
, 
add_sz
);

108 
	}
}

116 
	$°r£t__föd_°r
(
°r£t
 *
£t
, c⁄° *
s
)

118 
ﬁd_off
, 
√w_off
, 
Àn
;

119 *
p
;

122 
Àn
 = 
	`°æí
(
s
) + 1;

123 
p
 = 
	`°r£t_add_°r_mem
(
£t
, 
Àn
);

124 i‡(!
p
)

125  -
ENOMEM
;

127 
√w_off
 = 
£t
->
°rs_d©a_Àn
;

128 
	`mem˝y
(
p
, 
s
, 
Àn
);

130 i‡(
	`hashm≠__föd
(
£t
->
°rs_hash
, (*)
√w_off
, (**)&
ﬁd_off
))

131  
ﬁd_off
;

133  -
ENOENT
;

134 
	}
}

142 
	$°r£t__add_°r
(
°r£t
 *
£t
, c⁄° *
s
)

144 
ﬁd_off
, 
√w_off
, 
Àn
;

145 *
p
;

146 
îr
;

156 
Àn
 = 
	`°æí
(
s
) + 1;

157 
p
 = 
	`°r£t_add_°r_mem
(
£t
, 
Àn
);

158 i‡(!
p
)

159  -
ENOMEM
;

161 
√w_off
 = 
£t
->
°rs_d©a_Àn
;

162 
	`mem˝y
(
p
, 
s
, 
Àn
);

168 
îr
 = 
	`hashm≠__ö£π
(
£t
->
°rs_hash
, (*)
√w_off
, (*)new_off,

169 
HASHMAP_ADD
, (c⁄° **)&
ﬁd_off
, 
NULL
);

170 i‡(
îr
 =-
EEXIST
)

171  
ﬁd_off
;

172 i‡(
îr
)

173  
îr
;

175 
£t
->
°rs_d©a_Àn
 +
Àn
;

176  
√w_off
;

177 
	}
}

	@strset.h

4 #i‚de‡
__LIBBPF_STRSET_H


5 
	#__LIBBPF_STRSET_H


	)

7 
	~<°dboﬁ.h
>

8 
	~<°ddef.h
>

10 
	g°r£t
;

12 
°r£t
 *
°r£t__√w
(
size_t
 
max_d©a_sz
, c⁄° *
öô_d©a
, size_à
öô_d©a_sz
);

13 
°r£t__‰ì
(
°r£t
 *
£t
);

15 c⁄° *
°r£t__d©a
(c⁄° 
°r£t
 *
£t
);

16 
size_t
 
°r£t__d©a_size
(c⁄° 
°r£t
 *
£t
);

18 
°r£t__föd_°r
(
°r£t
 *
£t
, c⁄° *
s
);

19 
°r£t__add_°r
(
°r£t
 *
£t
, c⁄° *
s
);

	@usdt.bpf.h

3 #i‚de‡
__USDT_BPF_H__


4 
	#__USDT_BPF_H__


	)

6 
	~<löux/î∫o.h
>

7 
	~<bpf/bpf_hñ≥rs.h
>

8 
	~<bpf/bpf_åacög.h
>

9 
	~<bpf/bpf_c‹e_ªad.h
>

21 #i‚de‡
BPF_USDT_MAX_SPEC_CNT


22 
	#BPF_USDT_MAX_SPEC_CNT
 256

	)

30 #i‚de‡
BPF_USDT_MAX_IP_CNT


31 
	#BPF_USDT_MAX_IP_CNT
 (4 * 
BPF_USDT_MAX_SPEC_CNT
)

	)

37 #i‚de‡
BPF_USDT_HAS_BPF_COOKIE


38 
	#BPF_USDT_HAS_BPF_COOKIE
 \

39 
	`bpf_c‹e_íum_vÆue_exi°s
(
bpf_func_id___usdt
, 
BPF_FUNC_gë_©èch_cookõ___usdt
)

	)

42 
	e__bpf_usdt_¨g_ty≥
 {

43 
	mBPF_USDT_ARG_CONST
,

44 
	mBPF_USDT_ARG_REG
,

45 
	mBPF_USDT_ARG_REG_DEREF
,

48 
	s__bpf_usdt_¨g_•ec
 {

50 
__u64
 
	mvÆ_off
;

52 
__bpf_usdt_¨g_ty≥
 
	m¨g_ty≥
;

54 
	mªg_off
;

56 
boﬁ
 
	m¨g_sig√d
;

61 
	m¨g_bôshi·
;

65 
	#BPF_USDT_MAX_ARG_CNT
 12

	)

66 
	s__bpf_usdt_•ec
 {

67 
__bpf_usdt_¨g_•ec
 
	m¨gs
[
BPF_USDT_MAX_ARG_CNT
];

68 
__u64
 
	musdt_cookõ
;

69 
	m¨g_˙t
;

73 
__uöt
(
ty≥
, 
BPF_MAP_TYPE_ARRAY
);

74 
__uöt
(
max_íåõs
, 
BPF_USDT_MAX_SPEC_CNT
);

75 
__ty≥
(
key
, );

76 
__ty≥
(
vÆue
, 
__bpf_usdt_•ec
);

77 } 
__bpf_usdt_•ecs
 
SEC
(".m≠s"Ë
	g__wók
;

80 
__uöt
(
ty≥
, 
BPF_MAP_TYPE_HASH
);

81 
__uöt
(
max_íåõs
, 
BPF_USDT_MAX_IP_CNT
);

82 
__ty≥
(
key
, );

83 
__ty≥
(
vÆue
, 
__u32
);

84 } 
__bpf_usdt_ù_to_•ec_id
 
SEC
(".m≠s"Ë
	g__wók
;

87 
	ebpf_func_id___usdt
 {

88 
	mBPF_FUNC_gë_©èch_cookõ___usdt
 = 0xBAD,

91 
__Æways_ölöe


92 
	$__bpf_usdt_•ec_id
(
±_ªgs
 *
˘x
)

94 i‡(!
BPF_USDT_HAS_BPF_COOKIE
) {

95 
ù
 = 
	`PT_REGS_IP
(
˘x
);

96 *
•ec_id_±r
;

98 
•ec_id_±r
 = 
	`bpf_m≠_lookup_ñem
(&
__bpf_usdt_ù_to_•ec_id
, &
ù
);

99  
•ec_id_±r
 ? *•ec_id_±∏: -
ESRCH
;

102  
	`bpf_gë_©èch_cookõ
(
˘x
);

103 
	}
}

106 
__wók
 
__hiddí


107 
	$bpf_usdt_¨g_˙t
(
±_ªgs
 *
˘x
)

109 
__bpf_usdt_•ec
 *
•ec
;

110 
•ec_id
;

112 
•ec_id
 = 
	`__bpf_usdt_•ec_id
(
˘x
);

113 i‡(
•ec_id
 < 0)

114  -
ESRCH
;

116 
•ec
 = 
	`bpf_m≠_lookup_ñem
(&
__bpf_usdt_•ecs
, &
•ec_id
);

117 i‡(!
•ec
)

118  -
ESRCH
;

120  
•ec
->
¨g_˙t
;

121 
	}
}

127 
__wók
 
__hiddí


128 
	$bpf_usdt_¨g
(
±_ªgs
 *
˘x
, 
__u64
 
¨g_num
, *
ªs
)

130 
__bpf_usdt_•ec
 *
•ec
;

131 
__bpf_usdt_¨g_•ec
 *
¨g_•ec
;

132 
vÆ
;

133 
îr
, 
•ec_id
;

135 *
ªs
 = 0;

137 
•ec_id
 = 
	`__bpf_usdt_•ec_id
(
˘x
);

138 i‡(
•ec_id
 < 0)

139  -
ESRCH
;

141 
•ec
 = 
	`bpf_m≠_lookup_ñem
(&
__bpf_usdt_•ecs
, &
•ec_id
);

142 i‡(!
•ec
)

143  -
ESRCH
;

145 i‡(
¨g_num
 >
BPF_USDT_MAX_ARG_CNT
 ||árg_num >
•ec
->
¨g_˙t
)

146  -
ENOENT
;

148 
¨g_•ec
 = &
•ec
->
¨gs
[
¨g_num
];

149 
¨g_•ec
->
¨g_ty≥
) {

150 
BPF_USDT_ARG_CONST
:

154 
vÆ
 = 
¨g_•ec
->
vÆ_off
;

156 
BPF_USDT_ARG_REG
:

162 
îr
 = 
	`bpf_¥obe_ªad_kî√l
(&
vÆ
, (vÆ), (*)
˘x
 + 
¨g_•ec
->
ªg_off
);

163 i‡(
îr
)

164  
îr
;

166 
BPF_USDT_ARG_REG_DEREF
:

174 
îr
 = 
	`bpf_¥obe_ªad_kî√l
(&
vÆ
, (vÆ), (*)
˘x
 + 
¨g_•ec
->
ªg_off
);

175 i‡(
îr
)

176  
îr
;

177 
îr
 = 
	`bpf_¥obe_ªad_u£r
(&
vÆ
, (vÆ), (*)vÆ + 
¨g_•ec
->
vÆ_off
);

178 i‡(
îr
)

179  
îr
;

180 #i‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


181 
vÆ
 >>
¨g_•ec
->
¨g_bôshi·
;

185  -
EINVAL
;

192 
vÆ
 <<
¨g_•ec
->
¨g_bôshi·
;

193 i‡(
¨g_•ec
->
¨g_sig√d
)

194 
vÆ
 = (()vÆË>> 
¨g_•ec
->
¨g_bôshi·
;

196 
vÆ
 = vÆ >> 
¨g_•ec
->
¨g_bôshi·
;

197 *
ªs
 = 
vÆ
;

199 
	}
}

207 
__wók
 
__hiddí


208 
	$bpf_usdt_cookõ
(
±_ªgs
 *
˘x
)

210 
__bpf_usdt_•ec
 *
•ec
;

211 
•ec_id
;

213 
•ec_id
 = 
	`__bpf_usdt_•ec_id
(
˘x
);

214 i‡(
•ec_id
 < 0)

217 
•ec
 = 
	`bpf_m≠_lookup_ñem
(&
__bpf_usdt_•ecs
, &
•ec_id
);

218 i‡(!
•ec
)

221  
•ec
->
usdt_cookõ
;

222 
	}
}

225 
	#___bpf_usdt_¨gs0
(Ë
˘x


	)

226 
	#___bpf_usdt_¨gs1
(
x
Ë
	`___bpf_usdt_¨gs0
(), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 0, &_x); (*)_x; })

	)

227 
	#___bpf_usdt_¨gs2
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs1
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 1, &_x); (*)_x; })

	)

228 
	#___bpf_usdt_¨gs3
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs2
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 2, &_x); (*)_x; })

	)

229 
	#___bpf_usdt_¨gs4
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs3
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 3, &_x); (*)_x; })

	)

230 
	#___bpf_usdt_¨gs5
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs4
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 4, &_x); (*)_x; })

	)

231 
	#___bpf_usdt_¨gs6
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs5
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 5, &_x); (*)_x; })

	)

232 
	#___bpf_usdt_¨gs7
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs6
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 6, &_x); (*)_x; })

	)

233 
	#___bpf_usdt_¨gs8
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs7
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 7, &_x); (*)_x; })

	)

234 
	#___bpf_usdt_¨gs9
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs8
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 8, &_x); (*)_x; })

	)

235 
	#___bpf_usdt_¨gs10
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs9
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 9, &_x); (*)_x; })

	)

236 
	#___bpf_usdt_¨gs11
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs10
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 10, &_x); (*)_x; })

	)

237 
	#___bpf_usdt_¨gs12
(
x
, 
¨gs
...Ë
	`___bpf_usdt_¨gs11
◊rgs), ({ 
_x
; 
	`bpf_usdt_¨g
(
˘x
, 11, &_x); (*)_x; })

	)

238 
	#___bpf_usdt_¨gs
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_usdt_¨gs
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

245 
	#BPF_USDT
(
«me
, 
¨gs
...) \

246 
	`«me
(
±_ªgs
 *
˘x
); \

247 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

248 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
); \

249 
	`ty≥of
(
	`«me
(0)Ë«me(
±_ªgs
 *
˘x
) \

251 
	`_Pøgma
("GCC diagnosticÖush") \

252 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

253  
____
##
	`«me
(
	`___bpf_usdt_¨gs
(
¨gs
)); \

254 
	`_Pøgma
("GCC diagnosticÖop") \

256 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

257 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
)

	)

	@usdt.c

3 
	~<˘y≥.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<libñf.h
>

8 
	~<gñf.h
>

9 
	~<uni°d.h
>

10 
	~<löux/±ø˚.h
>

11 
	~<löux/kî√l.h
>

14 #i‡
deföed
(
__riscv
)

15 
	#rv_s8
 
s8


	)

18 
	~"bpf.h
"

19 
	~"libbpf.h
"

20 
	~"libbpf_comm⁄.h
"

21 
	~"libbpf_öã∫Æ.h
"

22 
	~"hashm≠.h
"

191 
	#USDT_BASE_SEC
 ".°≠sdt.ba£"

	)

192 
	#USDT_SEMA_SEC
 ".¥obes"

	)

193 
	#USDT_NOTE_SEC
 ".nŸe.°≠sdt"

	)

194 
	#USDT_NOTE_TYPE
 3

	)

195 
	#USDT_NOTE_NAME
 "°≠sdt"

	)

198 
	eusdt_¨g_ty≥
 {

199 
	mUSDT_ARG_CONST
,

200 
	mUSDT_ARG_REG
,

201 
	mUSDT_ARG_REG_DEREF
,

205 
	susdt_¨g_•ec
 {

206 
__u64
 
	mvÆ_off
;

207 
usdt_¨g_ty≥
 
	m¨g_ty≥
;

208 
	mªg_off
;

209 
boﬁ
 
	m¨g_sig√d
;

210 
	m¨g_bôshi·
;

214 
	#USDT_MAX_ARG_CNT
 12

	)

217 
	susdt_•ec
 {

218 
usdt_¨g_•ec
 
	m¨gs
[
USDT_MAX_ARG_CNT
];

219 
__u64
 
	musdt_cookõ
;

220 
	m¨g_˙t
;

223 
	susdt_nŸe
 {

224 c⁄° *
	m¥ovidî
;

225 c⁄° *
	m«me
;

229 c⁄° *
	m¨gs
;

230 
	mloc_addr
;

231 
	mba£_addr
;

232 
	m£ma_addr
;

235 
	susdt_èrgë
 {

236 
	mabs_ù
;

237 
	mªl_ù
;

238 
	m£ma_off
;

239 
usdt_•ec
 
	m•ec
;

240 c⁄° *
	m•ec_°r
;

243 
	susdt_m™agî
 {

244 
bpf_m≠
 *
	m•ecs_m≠
;

245 
bpf_m≠
 *
	mù_to_•ec_id_m≠
;

247 *
	m‰ì_•ec_ids
;

248 
size_t
 
	m‰ì_•ec_˙t
;

249 
size_t
 
	m√xt_‰ì_•ec_id
;

251 
boﬁ
 
	mhas_bpf_cookõ
;

252 
boﬁ
 
	mhas_£ma_ªf˙t
;

255 
usdt_m™agî
 *
	$usdt_m™agî_√w
(
bpf_obje˘
 *
obj
)

257 c⁄° *
ªf_˘r_sysfs_∑th
 = "/sys/bus/event_source/devices/uprobe/format/ref_ctr_offset";

258 
usdt_m™agî
 *
m™
;

259 
bpf_m≠
 *
•ecs_m≠
, *
ù_to_•ec_id_m≠
;

261 
•ecs_m≠
 = 
	`bpf_obje˘__föd_m≠_by_«me
(
obj
, "__bpf_usdt_specs");

262 
ù_to_•ec_id_m≠
 = 
	`bpf_obje˘__föd_m≠_by_«me
(
obj
, "__bpf_usdt_ip_to_spec_id");

263 i‡(!
•ecs_m≠
 || !
ù_to_•ec_id_m≠
) {

264 
	`¥_w¨n
("usdt: failedÅo find USDT support BPF maps, did you forgetÅo include bpf/usdt.bpf.h?\n");

265  
	`ERR_PTR
(-
ESRCH
);

268 
m™
 = 
	`ˇŒoc
(1, (*man));

269 i‡(!
m™
)

270  
	`ERR_PTR
(-
ENOMEM
);

272 
m™
->
•ecs_m≠
 = specs_map;

273 
m™
->
ù_to_•ec_id_m≠
 = ip_to_spec_id_map;

279 
m™
->
has_bpf_cookõ
 = 
	`kî√l_suµ‹ts
(
obj
, 
FEAT_BPF_COOKIE
);

285 
m™
->
has_£ma_ªf˙t
 = 
	`ac˚ss
(
ªf_˘r_sysfs_∑th
, 
F_OK
) == 0;

287  
m™
;

288 
	}
}

290 
	$usdt_m™agî_‰ì
(
usdt_m™agî
 *
m™
)

292 i‡(
	`IS_ERR_OR_NULL
(
m™
))

295 
	`‰ì
(
m™
->
‰ì_•ec_ids
);

296 
	`‰ì
(
m™
);

297 
	}
}

299 
	$ßnôy_check_usdt_ñf
(
Elf
 *
ñf
, c⁄° *
∑th
)

301 
GElf_Ehdr
 
ehdr
;

302 
ídü¬ess
;

304 i‡(
	`ñf_köd
(
ñf
Ë!
ELF_K_ELF
) {

305 
	`¥_w¨n
("usdt: uƒecognized ELF köd %d f‹ '%s'\n", 
	`ñf_köd
(
ñf
), 
∑th
);

306  -
EBADF
;

309 
	`gñf_gë˛ass
(
ñf
)) {

310 
ELFCLASS64
:

312 
	`¥_w¨n
("usdt:áâachögÅÿ64-bô ELF bö¨y '%s' i†nŸ suµ‹ãd\n", 
∑th
);

313  -
EBADF
;

316 
ELFCLASS32
:

318 
	`¥_w¨n
("usdt:áâachögÅÿ32-bô ELF bö¨y '%s' i†nŸ suµ‹ãd\n", 
∑th
);

319  -
EBADF
;

323 
	`¥_w¨n
("usdt: unsuµ‹ãd ELF cœs†f‹ '%s'\n", 
∑th
);

324  -
EBADF
;

327 i‡(!
	`gñf_gëehdr
(
ñf
, &
ehdr
))

328  -
EINVAL
;

330 i‡(
ehdr
.
e_ty≥
 !
ET_EXEC
 &&Éhdr.e_ty≥ !
ET_DYN
) {

331 
	`¥_w¨n
("usdt: unsupportedÅype of ELF binary '%s' (%d), only ET_EXECánd ET_DYNáre supported\n",

332 
∑th
, 
ehdr
.
e_ty≥
);

333  -
EBADF
;

336 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


337 
ídü¬ess
 = 
ELFDATA2LSB
;

338 #ñi‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


339 
ídü¬ess
 = 
ELFDATA2MSB
;

343 i‡(
ídü¬ess
 !
ehdr
.
e_idít
[
EI_DATA
]) {

344 
	`¥_w¨n
("usdt: ELFÉndü¬es†mism©ch f‹ '%s'\n", 
∑th
);

345  -
EBADF
;

349 
	}
}

351 
	$föd_ñf_£c_by_«me
(
Elf
 *
ñf
, c⁄° *
£c_«me
, 
GElf_Shdr
 *
shdr
, 
Elf_S˙
 **
s˙
)

353 
Elf_S˙
 *
£c
 = 
NULL
;

354 
size_t
 
sh°∫dx
;

356 i‡(
	`ñf_gëshdr°∫dx
(
ñf
, &
sh°∫dx
))

357  -
EINVAL
;

360 i‡(!
	`ñf_øwd©a
(
	`ñf_gës˙
(
ñf
, 
sh°∫dx
), 
NULL
))

361  -
EINVAL
;

363 (
£c
 = 
	`ñf_√xts˙
(
ñf
, sec)Ë!
NULL
) {

364 *
«me
;

366 i‡(!
	`gñf_gëshdr
(
£c
, 
shdr
))

367  -
EINVAL
;

369 
«me
 = 
	`ñf_°Ωå
(
ñf
, 
sh°∫dx
, 
shdr
->
sh_«me
);

370 i‡(
«me
 && 
	`°rcmp
(
£c_«me
,Çame) == 0) {

371 *
s˙
 = 
£c
;

376  -
ENOENT
;

377 
	}
}

379 
	sñf_£g
 {

380 
	m°¨t
;

381 
	míd
;

382 
	moff£t
;

383 
boﬁ
 
	mis_exec
;

386 
	$cmp_ñf_£gs
(c⁄° *
_a
, c⁄° *
_b
)

388 c⁄° 
ñf_£g
 *
a
 = 
_a
;

389 c⁄° 
ñf_£g
 *
b
 = 
_b
;

391  
a
->
°¨t
 < 
b
->start ? -1 : 1;

392 
	}
}

394 
	$∑r£_ñf_£gs
(
Elf
 *
ñf
, c⁄° *
∑th
, 
ñf_£g
 **
£gs
, 
size_t
 *
£g_˙t
)

396 
GElf_Phdr
 
phdr
;

397 
size_t
 
n
;

398 
i
, 
îr
;

399 
ñf_£g
 *
£g
;

400 *
tmp
;

402 *
£g_˙t
 = 0;

404 i‡(
	`ñf_gëphd∫um
(
ñf
, &
n
)) {

405 
îr
 = -
î∫o
;

406  
îr
;

409 
i
 = 0; i < 
n
; i++) {

410 i‡(!
	`gñf_gëphdr
(
ñf
, 
i
, &
phdr
)) {

411 
îr
 = -
î∫o
;

412  
îr
;

415 
	`¥_debug
("usdt: discovered PHDR #%d in '%s': vaddr 0x%lx memsz 0x%lx offset 0x%lxÅype 0x%lx flags 0x%lx\n",

416 
i
, 
∑th
, ()
phdr
.
p_vaddr
, (Ìhdr.
p_memsz
, (Ìhdr.
p_off£t
,

417 ()
phdr
.
p_ty≥
, (Ìhdr.
p_Êags
);

418 i‡(
phdr
.
p_ty≥
 !
PT_LOAD
)

421 
tmp
 = 
	`libbpf_ªÆloˇºay
(*
£gs
, *
£g_˙t
 + 1, (**segs));

422 i‡(!
tmp
)

423  -
ENOMEM
;

425 *
£gs
 = 
tmp
;

426 
£g
 = *
£gs
 + *
£g_˙t
;

427 (*
£g_˙t
)++;

429 
£g
->
°¨t
 = 
phdr
.
p_vaddr
;

430 
£g
->
íd
 = 
phdr
.
p_vaddr
 +Öhdr.
p_memsz
;

431 
£g
->
off£t
 = 
phdr
.
p_off£t
;

432 
£g
->
is_exec
 = 
phdr
.
p_Êags
 & 
PF_X
;

435 i‡(*
£g_˙t
 == 0) {

436 
	`¥_w¨n
("usdt: faûedÅÿföd PT_LOADÖrogøm hódî†ö '%s'\n", 
∑th
);

437  -
ESRCH
;

440 
	`qs‹t
(*
£gs
, *
£g_˙t
, (**£gs), 
cmp_ñf_£gs
);

442 
	}
}

444 
	$∑r£_lib_£gs
(
pid
, c⁄° *
lib_∑th
, 
ñf_£g
 **
£gs
, 
size_t
 *
£g_˙t
)

446 
∑th
[
PATH_MAX
], 
löe
[PATH_MAX], 
mode
[16];

447 
size_t
 
£g_°¨t
, 
£g_íd
, 
£g_off
;

448 
ñf_£g
 *
£g
;

449 
tmp_pid
, 
i
, 
îr
;

450 
FILE
 *
f
;

452 *
£g_˙t
 = 0;

458 i‡(
	`ssˇnf
(
lib_∑th
, "/¥oc/%d/roŸ%s", &
tmp_pid
, 
∑th
Ë=2 && 
pid
 ==Åmp_pid)

459 
¥o˚ed
;

461 i‡(!
	`ªÆ∑th
(
lib_∑th
, 
∑th
)) {

462 
	`¥_w¨n
("usdt: failedÅo getábsoluteÖath of '%s' (err %d), usingÖathás is...\n",

463 
lib_∑th
, -
î∫o
);

464 
	`libbpf_°æ˝y
(
∑th
, 
lib_∑th
, (path));

467 
¥o˚ed
:

468 
	`•rötf
(
löe
, "/¥oc/%d/m≠s", 
pid
);

469 
f
 = 
	`f›í
(
löe
, "r");

470 i‡(!
f
) {

471 
îr
 = -
î∫o
;

472 
	`¥_w¨n
("usdt: failedÅo open '%s'Åo get baseáddr of '%s': %d\n",

473 
löe
, 
lib_∑th
, 
îr
);

474  
îr
;

483 
	`fsˇnf
(
f
, "%zx-%zx %s %zx %*s %*d%[^\n]\n",

484 &
£g_°¨t
, &
£g_íd
, 
mode
, &
£g_off
, 
löe
) == 5) {

485 *
tmp
;

491 
i
 = 0;

492 
	`isbœnk
(
löe
[
i
]))

493 
i
++;

494 i‡(
	`°rcmp
(
löe
 + 
i
, 
∑th
) != 0)

497 
	`¥_debug
("usdt: discovered segment forÜib '%s':áddrs %zx-%zx mode %s offset %zx\n",

498 
∑th
, 
£g_°¨t
, 
£g_íd
, 
mode
, 
£g_off
);

501 i‡(
mode
[2] != 'x')

504 
tmp
 = 
	`libbpf_ªÆloˇºay
(*
£gs
, *
£g_˙t
 + 1, (**segs));

505 i‡(!
tmp
) {

506 
îr
 = -
ENOMEM
;

507 
îr_out
;

510 *
£gs
 = 
tmp
;

511 
£g
 = *
£gs
 + *
£g_˙t
;

512 *
£g_˙t
 += 1;

514 
£g
->
°¨t
 = 
£g_°¨t
;

515 
£g
->
íd
 = 
£g_íd
;

516 
£g
->
off£t
 = 
£g_off
;

517 
£g
->
is_exec
 = 
åue
;

520 i‡(*
£g_˙t
 == 0) {

521 
	`¥_w¨n
("usdt: failedÅo find '%s' (resolvedÅo '%s') within PID %d memory mappings\n",

522 
lib_∑th
, 
∑th
, 
pid
);

523 
îr
 = -
ESRCH
;

524 
îr_out
;

527 
	`qs‹t
(*
£gs
, *
£g_˙t
, (**£gs), 
cmp_ñf_£gs
);

528 
îr
 = 0;

529 
îr_out
:

530 
	`f˛o£
(
f
);

531  
îr
;

532 
	}
}

534 
ñf_£g
 *
	$föd_ñf_£g
(
ñf_£g
 *
£gs
, 
size_t
 
£g_˙t
, 
addr
, 
boﬁ
 
ªœtive
)

536 
ñf_£g
 *
£g
;

537 
i
;

539 i‡(
ªœtive
) {

544 
i
 = 0, 
£g
 = 
£gs
; i < 
£g_˙t
; i++, seg++) {

545 i‡(
£g
->
off£t
 <
addr
 &&ádd∏< seg->off£à+ (£g->
íd
 - seg->
°¨t
))

546  
£g
;

552 
i
 = 0, 
£g
 = 
£gs
; i < 
£g_˙t
; i++, seg++) {

553 i‡(
£g
->
°¨t
 <
addr
 &&ádd∏< seg->
íd
)

554  
£g
;

558  
NULL
;

559 
	}
}

561 
∑r£_usdt_nŸe
(
Elf
 *
ñf
, c⁄° *
∑th
, 
ba£_addr
,

562 
GElf_Nhdr
 *
nhdr
, c⁄° *
d©a
, 
size_t
 
«me_off
, size_à
desc_off
,

563 
usdt_nŸe
 *usdt_note);

565 
∑r£_usdt_•ec
(
usdt_•ec
 *
•ec
, c⁄° 
usdt_nŸe
 *
nŸe
, 
__u64
 
usdt_cookõ
);

567 
	$cﬁÀ˘_usdt_èrgës
(
usdt_m™agî
 *
m™
, 
Elf
 *
ñf
, c⁄° *
∑th
, 
pid_t
 
pid
,

568 c⁄° *
usdt_¥ovidî
, c⁄° *
usdt_«me
, 
__u64
 
usdt_cookõ
,

569 
usdt_èrgë
 **
out_èrgës
, 
size_t
 *
out_èrgë_˙t
)

571 
size_t
 
off
, 
«me_off
, 
desc_off
, 
£g_˙t
 = 0, 
lib_£g_˙t
 = 0, 
èrgë_˙t
 = 0;

572 
ñf_£g
 *
£gs
 = 
NULL
, *
lib_£gs
 = NULL;

573 
usdt_èrgë
 *
èrgës
 = 
NULL
, *
èrgë
;

574 
ba£_addr
 = 0;

575 
Elf_S˙
 *
nŸes_s˙
, *
ba£_s˙
;

576 
GElf_Shdr
 
ba£_shdr
, 
nŸes_shdr
;

577 
GElf_Ehdr
 
ehdr
;

578 
GElf_Nhdr
 
nhdr
;

579 
Elf_D©a
 *
d©a
;

580 
îr
;

582 *
out_èrgës
 = 
NULL
;

583 *
out_èrgë_˙t
 = 0;

585 
îr
 = 
	`föd_ñf_£c_by_«me
(
ñf
, 
USDT_NOTE_SEC
, &
nŸes_shdr
, &
nŸes_s˙
);

586 i‡(
îr
) {

587 
	`¥_w¨n
("usdt:ÇÿUSDTÇŸe†£˘i⁄ (%sËfound i¿'%s'\n", 
USDT_NOTE_SEC
, 
∑th
);

588  
îr
;

591 i‡(
nŸes_shdr
.
sh_ty≥
 !
SHT_NOTE
 || !
	`gñf_gëehdr
(
ñf
, &
ehdr
)) {

592 
	`¥_w¨n
("usdt: invÆid USDTÇŸe†£˘i⁄ (%sËö '%s'\n", 
USDT_NOTE_SEC
, 
∑th
);

593  -
EINVAL
;

596 
îr
 = 
	`∑r£_ñf_£gs
(
ñf
, 
∑th
, &
£gs
, &
£g_˙t
);

597 i‡(
îr
) {

598 
	`¥_w¨n
("usdt: faûedÅÿ¥o˚s†ELFÖrogøm segmít†f‹ '%s': %d\n", 
∑th
, 
îr
);

599 
îr_out
;

605 i‡(
	`föd_ñf_£c_by_«me
(
ñf
, 
USDT_BASE_SEC
, &
ba£_shdr
, &
ba£_s˙
) == 0)

606 
ba£_addr
 = 
ba£_shdr
.
sh_addr
;

608 
d©a
 = 
	`ñf_gëd©a
(
nŸes_s˙
, 0);

609 
off
 = 0;

610 (
off
 = 
	`gñf_gënŸe
(
d©a
, off, &
nhdr
, &
«me_off
, &
desc_off
)) > 0) {

611 
usdt_abs_ù
, 
usdt_ªl_ù
, 
usdt_£ma_off
 = 0;

612 
usdt_nŸe
 
nŸe
;

613 
ñf_£g
 *
£g
 = 
NULL
;

614 *
tmp
;

616 
îr
 = 
	`∑r£_usdt_nŸe
(
ñf
, 
∑th
, 
ba£_addr
, &
nhdr
,

617 
d©a
->
d_buf
, 
«me_off
, 
desc_off
, &
nŸe
);

618 i‡(
îr
)

619 
îr_out
;

621 i‡(
	`°rcmp
(
nŸe
.
¥ovidî
, 
usdt_¥ovidî
Ë!0 || såcmp“Ÿe.
«me
, 
usdt_«me
) != 0)

651 
usdt_ªl_ù
 = 
usdt_abs_ù
 = 
nŸe
.
loc_addr
;

652 i‡(
ba£_addr
) {

653 
usdt_abs_ù
 +
ba£_addr
 - 
nŸe
.base_addr;

654 
usdt_ªl_ù
 +
ba£_addr
 - 
nŸe
.base_addr;

657 i‡(
ehdr
.
e_ty≥
 =
ET_EXEC
) {

664 
£g
 = 
	`föd_ñf_£g
(
£gs
, 
£g_˙t
, 
usdt_abs_ù
, 
Ál£
 );

665 i‡(!
£g
) {

666 
îr
 = -
ESRCH
;

667 
	`¥_w¨n
("usdt: failedÅo find ELFÖrogram segment for '%s:%s' in '%s'át IP 0x%lx\n",

668 
usdt_¥ovidî
, 
usdt_«me
, 
∑th
, 
usdt_abs_ù
);

669 
îr_out
;

671 i‡(!
£g
->
is_exec
) {

672 
îr
 = -
ESRCH
;

673 
	`¥_w¨n
("usdt: matched ELF binary '%s' segment [0x%lx, 0x%lx) for '%s:%s'át IP 0x%lx isÇotÉxecutable\n",

674 
∑th
, 
£g
->
°¨t
, seg->
íd
, 
usdt_¥ovidî
, 
usdt_«me
,

675 
usdt_abs_ù
);

676 
îr_out
;

679 
usdt_ªl_ù
 = 
usdt_abs_ù
 - (
£g
->
°¨t
 - seg->
off£t
);

680 } i‡(!
m™
->
has_bpf_cookõ
) {

694 i‡(
pid
 < 0) {

695 
	`¥_w¨n
("usdt:áttachingÅo sharedÜibraries without specific PID isÇot supported on current kernel\n");

696 
îr
 = -
ENOTSUP
;

697 
îr_out
;

701 i‡(
lib_£g_˙t
 == 0) {

702 
îr
 = 
	`∑r£_lib_£gs
(
pid
, 
∑th
, &
lib_£gs
, &
lib_£g_˙t
);

703 i‡(
îr
) {

704 
	`¥_w¨n
("usdt: failedÅo get memory segments in PID %d for sharedÜibrary '%s': %d\n",

705 
pid
, 
∑th
, 
îr
);

706 
îr_out
;

710 
£g
 = 
	`föd_ñf_£g
(
lib_£gs
, 
lib_£g_˙t
, 
usdt_ªl_ù
, 
åue
 );

711 i‡(!
£g
) {

712 
îr
 = -
ESRCH
;

713 
	`¥_w¨n
("usdt: failedÅo find sharedÜib memory segment for '%s:%s' in '%s'átÑelative IP 0x%lx\n",

714 
usdt_¥ovidî
, 
usdt_«me
, 
∑th
, 
usdt_ªl_ù
);

715 
îr_out
;

718 
usdt_abs_ù
 = 
£g
->
°¨t
 + (
usdt_ªl_ù
 - seg->
off£t
);

721 
	`¥_debug
("usdt:Örobe for '%s:%s' in %s '%s':áddr 0x%lx base 0x%lx (resolvedábs_ip 0x%lxÑel_ip 0x%lx)árgs '%s' in segment [0x%lx, 0x%lx)át offset 0x%lx\n",

722 
usdt_¥ovidî
, 
usdt_«me
, 
ehdr
.
e_ty≥
 =
ET_EXEC
 ? "exec" : "lib ", 
∑th
,

723 
nŸe
.
loc_addr
,ÇŸe.
ba£_addr
, 
usdt_abs_ù
, 
usdt_ªl_ù
,ÇŸe.
¨gs
,

724 
£g
 ? seg->
°¨t
 : 0, seg ? seg->
íd
 : 0, seg ? seg->
off£t
 : 0);

727 i‡(
nŸe
.
£ma_addr
) {

728 i‡(!
m™
->
has_£ma_ªf˙t
) {

729 
	`¥_w¨n
("usdt: kernel doesn't support USDT semaphoreÑefcounting for '%s:%s' in '%s'\n",

730 
usdt_¥ovidî
, 
usdt_«me
, 
∑th
);

731 
îr
 = -
ENOTSUP
;

732 
îr_out
;

735 
£g
 = 
	`föd_ñf_£g
(
£gs
, 
£g_˙t
, 
nŸe
.
£ma_addr
, 
Ál£
 );

736 i‡(!
£g
) {

737 
îr
 = -
ESRCH
;

738 
	`¥_w¨n
("usdt: failedÅo find ELFÜoadable segment with semaphore of '%s:%s' in '%s'át 0x%lx\n",

739 
usdt_¥ovidî
, 
usdt_«me
, 
∑th
, 
nŸe
.
£ma_addr
);

740 
îr_out
;

742 i‡(
£g
->
is_exec
) {

743 
îr
 = -
ESRCH
;

744 
	`¥_w¨n
("usdt: matched ELF binary '%s' segment [0x%lx, 0x%lx] for semaphore of '%s:%s'át 0x%lx isÉxecutable\n",

745 
∑th
, 
£g
->
°¨t
, seg->
íd
, 
usdt_¥ovidî
, 
usdt_«me
,

746 
nŸe
.
£ma_addr
);

747 
îr_out
;

750 
usdt_£ma_off
 = 
nŸe
.
£ma_addr
 - (
£g
->
°¨t
 - seg->
off£t
);

752 
	`¥_debug
("usdt: sema for '%s:%s' in %s '%s':áddr 0x%lx base 0x%lx (resolved 0x%lx) in segment [0x%lx, 0x%lx]át offset 0x%lx\n",

753 
usdt_¥ovidî
, 
usdt_«me
, 
ehdr
.
e_ty≥
 =
ET_EXEC
 ? "exec" : "lib ",

754 
∑th
, 
nŸe
.
£ma_addr
,ÇŸe.
ba£_addr
, 
usdt_£ma_off
,

755 
£g
->
°¨t
, seg->
íd
, seg->
off£t
);

759 
tmp
 = 
	`libbpf_ªÆloˇºay
(
èrgës
, 
èrgë_˙t
 + 1, (*targets));

760 i‡(!
tmp
) {

761 
îr
 = -
ENOMEM
;

762 
îr_out
;

764 
èrgës
 = 
tmp
;

766 
èrgë
 = &
èrgës
[
èrgë_˙t
];

767 
	`mem£t
(
èrgë
, 0, (*target));

769 
èrgë
->
abs_ù
 = 
usdt_abs_ù
;

770 
èrgë
->
ªl_ù
 = 
usdt_ªl_ù
;

771 
èrgë
->
£ma_off
 = 
usdt_£ma_off
;

776 
èrgë
->
•ec_°r
 = 
nŸe
.
¨gs
;

778 
îr
 = 
	`∑r£_usdt_•ec
(&
èrgë
->
•ec
, &
nŸe
, 
usdt_cookõ
);

779 i‡(
îr
)

780 
îr_out
;

782 
èrgë_˙t
++;

785 *
out_èrgës
 = 
èrgës
;

786 *
out_èrgë_˙t
 = 
èrgë_˙t
;

787 
îr
 = 
èrgë_˙t
;

789 
îr_out
:

790 
	`‰ì
(
£gs
);

791 
	`‰ì
(
lib_£gs
);

792 i‡(
îr
 < 0)

793 
	`‰ì
(
èrgës
);

794  
îr
;

795 
	}
}

797 
	sbpf_lök_usdt
 {

798 
bpf_lök
 
	mlök
;

800 
usdt_m™agî
 *
	musdt_m™
;

802 
size_t
 
	m•ec_˙t
;

803 *
	m•ec_ids
;

805 
size_t
 
	mu¥obe_˙t
;

807 
	mabs_ù
;

808 
bpf_lök
 *
	mlök
;

809 } *
	mu¥obes
;

812 
	$bpf_lök_usdt_dëach
(
bpf_lök
 *
lök
)

814 
bpf_lök_usdt
 *
usdt_lök
 = 
	`c⁄èöî_of
(
lök
, bpf_link_usdt,Üink);

815 
usdt_m™agî
 *
m™
 = 
usdt_lök
->
usdt_m™
;

816 
i
;

818 
i
 = 0; i < 
usdt_lök
->
u¥obe_˙t
; i++) {

820 
	`bpf_lök__de°roy
(
usdt_lök
->
u¥obes
[
i
].
lök
);

827 i‡(!
m™
->
has_bpf_cookõ
) {

829 ()
	`bpf_m≠_dñëe_ñem
(
	`bpf_m≠__fd
(
m™
->
ù_to_•ec_id_m≠
),

830 &
usdt_lök
->
u¥obes
[
i
].
abs_ù
);

837 i‡(!
m™
->
‰ì_•ec_ids
) {

839 
m™
->
‰ì_•ec_ids
 = 
usdt_lök
->
•ec_ids
;

840 
m™
->
‰ì_•ec_˙t
 = 
usdt_lök
->
•ec_˙t
;

841 
usdt_lök
->
•ec_ids
 = 
NULL
;

844 
size_t
 
√w_˙t
 = 
m™
->
‰ì_•ec_˙t
 + 
usdt_lök
->
•ec_˙t
;

845 *
√w_‰ì_ids
;

847 
√w_‰ì_ids
 = 
	`libbpf_ªÆloˇºay
(
m™
->
‰ì_•ec_ids
, 
√w_˙t
,

848 (*
√w_‰ì_ids
));

855 i‡(
√w_‰ì_ids
) {

856 
	`mem˝y
(
√w_‰ì_ids
 + 
m™
->
‰ì_•ec_˙t
, 
usdt_lök
->
•ec_ids
,

857 
usdt_lök
->
•ec_˙t
 * (*usdt_lök->
•ec_ids
));

858 
m™
->
‰ì_•ec_ids
 = 
√w_‰ì_ids
;

859 
m™
->
‰ì_•ec_˙t
 = 
√w_˙t
;

864 
	}
}

866 
	$bpf_lök_usdt_dóŒoc
(
bpf_lök
 *
lök
)

868 
bpf_lök_usdt
 *
usdt_lök
 = 
	`c⁄èöî_of
(
lök
, bpf_link_usdt,Üink);

870 
	`‰ì
(
usdt_lök
->
•ec_ids
);

871 
	`‰ì
(
usdt_lök
->
u¥obes
);

872 
	`‰ì
(
usdt_lök
);

873 
	}
}

875 
size_t
 
	$•ecs_hash_‚
(c⁄° *
key
, *
˘x
)

877 c⁄° *
s
 = 
key
;

879  
	`°r_hash
(
s
);

880 
	}
}

882 
boﬁ
 
	$•ecs_equÆ_‚
(c⁄° *
key1
, c⁄° *
key2
, *
˘x
)

884 c⁄° *
s1
 = 
key1
;

885 c⁄° *
s2
 = 
key2
;

887  
	`°rcmp
(
s1
, 
s2
) == 0;

888 
	}
}

890 
	$Æloˇã_•ec_id
(
usdt_m™agî
 *
m™
, 
hashm≠
 *
•ecs_hash
,

891 
bpf_lök_usdt
 *
lök
, 
usdt_èrgë
 *
èrgë
,

892 *
•ec_id
, 
boﬁ
 *
is_√w
)

894 *
tmp
;

895 
îr
;

898 i‡(
	`hashm≠__föd
(
•ecs_hash
, 
èrgë
->
•ec_°r
, &
tmp
)) {

899 *
•ec_id
 = ()
tmp
;

900 *
is_√w
 = 
Ál£
;

907 
tmp
 = 
	`libbpf_ªÆloˇºay
(
lök
->
•ec_ids
,Üök->
•ec_˙t
 + 1, (*link->spec_ids));

908 i‡(!
tmp
)

909  -
ENOMEM
;

910 
lök
->
•ec_ids
 = 
tmp
;

913 i‡(
m™
->
‰ì_•ec_˙t
) {

914 *
•ec_id
 = 
m™
->
‰ì_•ec_ids
[m™->
‰ì_•ec_˙t
 - 1];

917 
îr
 = 
	`hashm≠__add
(
•ecs_hash
, 
èrgë
->
•ec_°r
, (*)()*
•ec_id
);

918 i‡(
îr
)

919  
îr
;

921 
m™
->
‰ì_•ec_˙t
--;

924 i‡(
m™
->
√xt_‰ì_•ec_id
 >
	`bpf_m≠__max_íåõs
(m™->
•ecs_m≠
))

925  -
E2BIG
;

927 *
•ec_id
 = 
m™
->
√xt_‰ì_•ec_id
;

930 
îr
 = 
	`hashm≠__add
(
•ecs_hash
, 
èrgë
->
•ec_°r
, (*)()*
•ec_id
);

931 i‡(
îr
)

932  
îr
;

934 
m™
->
√xt_‰ì_•ec_id
++;

938 
lök
->
•ec_ids
[lök->
•ec_˙t
] = *
•ec_id
;

939 
lök
->
•ec_˙t
++;

940 *
is_√w
 = 
åue
;

942 
	}
}

944 
bpf_lök
 *
	$usdt_m™agî_©èch_usdt
(
usdt_m™agî
 *
m™
, c⁄° 
bpf_¥ogøm
 *
¥og
,

945 
pid_t
 
pid
, c⁄° *
∑th
,

946 c⁄° *
usdt_¥ovidî
, c⁄° *
usdt_«me
,

947 
__u64
 
usdt_cookõ
)

949 
i
, 
fd
, 
îr
, 
•ec_m≠_fd
, 
ù_m≠_fd
;

950 
	`LIBBPF_OPTS
(
bpf_u¥obe_›ts
, 
›ts
);

951 
hashm≠
 *
•ecs_hash
 = 
NULL
;

952 
bpf_lök_usdt
 *
lök
 = 
NULL
;

953 
usdt_èrgë
 *
èrgës
 = 
NULL
;

954 
size_t
 
èrgë_˙t
;

955 
Elf
 *
ñf
;

957 
•ec_m≠_fd
 = 
	`bpf_m≠__fd
(
m™
->
•ecs_m≠
);

958 
ù_m≠_fd
 = 
	`bpf_m≠__fd
(
m™
->
ù_to_•ec_id_m≠
);

961 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

962 i‡(
fd
 < 0) {

963 
îr
 = -
î∫o
;

964 
	`¥_w¨n
("usdt: faûedÅÿ›í ELF bö¨y '%s': %d\n", 
∑th
, 
îr
);

965  
	`libbpf_îr_±r
(
îr
);

968 
ñf
 = 
	`ñf_begö
(
fd
, 
ELF_C_READ_MMAP
, 
NULL
);

969 i‡(!
ñf
) {

970 
îr
 = -
EBADF
;

971 
	`¥_w¨n
("usdt: faûedÅÿ∑r£ ELF bö¨y '%s': %s\n", 
∑th
, 
	`ñf_îrmsg
(-1));

972 
îr_out
;

975 
îr
 = 
	`ßnôy_check_usdt_ñf
(
ñf
, 
∑th
);

976 i‡(
îr
)

977 
îr_out
;

980 i‡(
pid
 < 0)

981 
pid
 = -1;

982 i‡(
pid
 == 0)

983 
pid
 = 
	`gëpid
();

988 
îr
 = 
	`cﬁÀ˘_usdt_èrgës
(
m™
, 
ñf
, 
∑th
, 
pid
, 
usdt_¥ovidî
, 
usdt_«me
,

989 
usdt_cookõ
, &
èrgës
, &
èrgë_˙t
);

990 i‡(
îr
 <= 0) {

991 
îr
 = (î∏=0Ë? -
ENOENT
 :Érr;

992 
îr_out
;

995 
•ecs_hash
 = 
	`hashm≠__√w
(
•ecs_hash_‚
, 
•ecs_equÆ_‚
, 
NULL
);

996 i‡(
	`IS_ERR
(
•ecs_hash
)) {

997 
îr
 = 
	`PTR_ERR
(
•ecs_hash
);

998 
îr_out
;

1001 
lök
 = 
	`ˇŒoc
(1, (*link));

1002 i‡(!
lök
) {

1003 
îr
 = -
ENOMEM
;

1004 
îr_out
;

1007 
lök
->
usdt_m™
 = 
m™
;

1008 
lök
->lök.
dëach
 = &
bpf_lök_usdt_dëach
;

1009 
lök
->lök.
dóŒoc
 = &
bpf_lök_usdt_dóŒoc
;

1011 
lök
->
u¥obes
 = 
	`ˇŒoc
(
èrgë_˙t
, (*link->uprobes));

1012 i‡(!
lök
->
u¥obes
) {

1013 
îr
 = -
ENOMEM
;

1014 
îr_out
;

1017 
i
 = 0; i < 
èrgë_˙t
; i++) {

1018 
usdt_èrgë
 *
èrgë
 = &
èrgës
[
i
];

1019 
bpf_lök
 *
u¥obe_lök
;

1020 
boﬁ
 
is_√w
;

1021 
•ec_id
;

1031 
îr
 = 
	`Æloˇã_•ec_id
(
m™
, 
•ecs_hash
, 
lök
, 
èrgë
, &
•ec_id
, &
is_√w
);

1032 i‡(
îr
)

1033 
îr_out
;

1035 i‡(
is_√w
 && 
	`bpf_m≠_upd©e_ñem
(
•ec_m≠_fd
, &
•ec_id
, &
èrgë
->
•ec
, 
BPF_ANY
)) {

1036 
îr
 = -
î∫o
;

1037 
	`¥_w¨n
("usdt: failedÅo set USDT spec #%d for '%s:%s' in '%s': %d\n",

1038 
•ec_id
, 
usdt_¥ovidî
, 
usdt_«me
, 
∑th
, 
îr
);

1039 
îr_out
;

1041 i‡(!
m™
->
has_bpf_cookõ
 &&

1042 
	`bpf_m≠_upd©e_ñem
(
ù_m≠_fd
, &
èrgë
->
abs_ù
, &
•ec_id
, 
BPF_NOEXIST
)) {

1043 
îr
 = -
î∫o
;

1044 i‡(
îr
 =-
EEXIST
) {

1045 
	`¥_w¨n
("usdt: IP collision detected for spec #%d for '%s:%s' in '%s'\n",

1046 
•ec_id
, 
usdt_¥ovidî
, 
usdt_«me
, 
∑th
);

1048 
	`¥_w¨n
("usdt: failedÅo map IP 0x%lxÅo spec #%d for '%s:%s' in '%s': %d\n",

1049 
èrgë
->
abs_ù
, 
•ec_id
, 
usdt_¥ovidî
, 
usdt_«me
,

1050 
∑th
, 
îr
);

1052 
îr_out
;

1055 
›ts
.
ªf_˘r_off£t
 = 
èrgë
->
£ma_off
;

1056 
›ts
.
bpf_cookõ
 = 
m™
->
has_bpf_cookõ
 ? 
•ec_id
 : 0;

1057 
u¥obe_lök
 = 
	`bpf_¥ogøm__©èch_u¥obe_›ts
(
¥og
, 
pid
, 
∑th
,

1058 
èrgë
->
ªl_ù
, &
›ts
);

1059 
îr
 = 
	`libbpf_gë_îr‹
(
u¥obe_lök
);

1060 i‡(
îr
) {

1061 
	`¥_w¨n
("usdt: failedÅoáttach uprobe #%d for '%s:%s' in '%s': %d\n",

1062 
i
, 
usdt_¥ovidî
, 
usdt_«me
, 
∑th
, 
îr
);

1063 
îr_out
;

1066 
lök
->
u¥obes
[
i
].lök = 
u¥obe_lök
;

1067 
lök
->
u¥obes
[
i
].
abs_ù
 = 
èrgë
->abs_ip;

1068 
lök
->
u¥obe_˙t
++;

1071 
	`‰ì
(
èrgës
);

1072 
	`hashm≠__‰ì
(
•ecs_hash
);

1073 
	`ñf_íd
(
ñf
);

1074 
	`˛o£
(
fd
);

1076  &
lök
->link;

1078 
îr_out
:

1079 i‡(
lök
)

1080 
	`bpf_lök__de°roy
(&
lök
->link);

1081 
	`‰ì
(
èrgës
);

1082 
	`hashm≠__‰ì
(
•ecs_hash
);

1083 i‡(
ñf
)

1084 
	`ñf_íd
(
ñf
);

1085 
	`˛o£
(
fd
);

1086  
	`libbpf_îr_±r
(
îr
);

1087 
	}
}

1092 
	$∑r£_usdt_nŸe
(
Elf
 *
ñf
, c⁄° *
∑th
, 
ba£_addr
,

1093 
GElf_Nhdr
 *
nhdr
, c⁄° *
d©a
, 
size_t
 
«me_off
, size_à
desc_off
,

1094 
usdt_nŸe
 *
nŸe
)

1096 c⁄° *
¥ovidî
, *
«me
, *
¨gs
;

1097 
addrs
[3];

1098 
size_t
 
Àn
;

1101 i‡(
	`°∫cmp
(
d©a
 + 
«me_off
, 
USDT_NOTE_NAME
, 
nhdr
->
n_«mesz
) != 0)

1102  -
EINVAL
;

1103 i‡(
nhdr
->
n_ty≥
 !
USDT_NOTE_TYPE
)

1104  -
EINVAL
;

1107 
Àn
 = 
nhdr
->
n_descsz
;

1108 
d©a
 = d©®+ 
desc_off
;

1111 i‡(
Àn
 < (
addrs
) + 3)

1112  -
EINVAL
;

1115 
	`mem˝y
(&
addrs
, 
d©a
, (addrs));

1118 
¥ovidî
 = 
d©a
 + (
addrs
);

1120 
«me
 = (c⁄° *)
	`memchr
(
¥ovidî
, '\0', 
d©a
 + 
Àn
 -Örovider);

1121 i‡(!
«me
)

1122  -
EINVAL
;

1123 
«me
++;

1124 i‡(
«me
 >
d©a
 + 
Àn
 || *name == '\0')

1125  -
EINVAL
;

1127 
¨gs
 = 
	`memchr
(
«me
, '\0', 
d©a
 + 
Àn
 -Çame);

1128 i‡(!
¨gs
)

1129  -
EINVAL
;

1130 ++
¨gs
;

1131 i‡(
¨gs
 >
d©a
 + 
Àn
)

1132  -
EINVAL
;

1134 
nŸe
->
¥ovidî
 =Örovider;

1135 
nŸe
->
«me
 =Çame;

1136 i‡(*
¨gs
 == '\0' || *args == ':')

1137 
nŸe
->
¨gs
 = "";

1139 
nŸe
->
¨gs
 =árgs;

1140 
nŸe
->
loc_addr
 = 
addrs
[0];

1141 
nŸe
->
ba£_addr
 = 
addrs
[1];

1142 
nŸe
->
£ma_addr
 = 
addrs
[2];

1145 
	}
}

1147 
∑r£_usdt_¨g
(c⁄° *
¨g_°r
, 
¨g_num
, 
usdt_¨g_•ec
 *
¨g
);

1149 
	$∑r£_usdt_•ec
(
usdt_•ec
 *
•ec
, c⁄° 
usdt_nŸe
 *
nŸe
, 
__u64
 
usdt_cookõ
)

1151 c⁄° *
s
;

1152 
Àn
;

1154 
•ec
->
usdt_cookõ
 = usdt_cookie;

1155 
•ec
->
¨g_˙t
 = 0;

1157 
s
 = 
nŸe
->
¨gs
;

1158 
s
[0]) {

1159 i‡(
•ec
->
¨g_˙t
 >
USDT_MAX_ARG_CNT
) {

1160 
	`¥_w¨n
("usdt:Åoo many USDTárguments (> %d) for '%s:%s' withárgs spec '%s'\n",

1161 
USDT_MAX_ARG_CNT
, 
nŸe
->
¥ovidî
,ÇŸe->
«me
,ÇŸe->
¨gs
);

1162  -
E2BIG
;

1165 
Àn
 = 
	`∑r£_usdt_¨g
(
s
, 
•ec
->
¨g_˙t
, &•ec->
¨gs
[spec->arg_cnt]);

1166 i‡(
Àn
 < 0)

1167  
Àn
;

1169 
s
 +
Àn
;

1170 
•ec
->
¨g_˙t
++;

1174 
	}
}

1178 #i‡
deföed
(
__x86_64__
Ë|| deföed(
__i386__
)

1180 
	$ˇlc_±_ªgs_off
(c⁄° *
ªg_«me
)

1183 c⁄° *
«mes
[4];

1184 
size_t
 
±_ªgs_off
;

1185 } 
ªg_m≠
[] = {

1186 #ifde‡
__x86_64__


1187 
	#ªg_off
(
ªg64
, 
ªg32
Ë
	`off£tof
(
±_ªgs
,Ñeg64)

	)

1189 
	#ªg_off
(
ªg64
, 
ªg32
Ë
	`off£tof
(
±_ªgs
,Ñeg32)

	)

1191 { {"rù", "eù", "", ""}, 
	`ªg_off
(
rù
, 
eù
) },

1192 { {"øx", "óx", "ax", "Æ"}, 
	`ªg_off
(
øx
, 
óx
) },

1193 { {"rbx", "ebx", "bx", "bl"}, 
	`ªg_off
(
rbx
, 
ebx
) },

1194 { {"rcx", "ecx", "cx", "˛"}, 
	`ªg_off
(
rcx
, 
ecx
) },

1195 { {"rdx", "edx", "dx", "dl"}, 
	`ªg_off
(
rdx
, 
edx
) },

1196 { {"rsi", "esi", "si", "sû"}, 
	`ªg_off
(
rsi
, 
esi
) },

1197 { {"rdi", "edi", "di", "dû"}, 
	`ªg_off
(
rdi
, 
edi
) },

1198 { {"rbp", "ebp", "bp", "b∂"}, 
	`ªg_off
(
rbp
, 
ebp
) },

1199 { {"r•", "e•", "•", "•l"}, 
	`ªg_off
(
r•
, 
e•
) },

1200 #unde‡
ªg_off


1201 #ifde‡
__x86_64__


1202 { {"r8", "r8d", "r8w", "r8b"}, 
	`off£tof
(
±_ªgs
, 
r8
) },

1203 { {"r9", "r9d", "r9w", "r9b"}, 
	`off£tof
(
±_ªgs
, 
r9
) },

1204 { {"r10", "r10d", "r10w", "r10b"}, 
	`off£tof
(
±_ªgs
, 
r10
) },

1205 { {"r11", "r11d", "r11w", "r11b"}, 
	`off£tof
(
±_ªgs
, 
r11
) },

1206 { {"r12", "r12d", "r12w", "r12b"}, 
	`off£tof
(
±_ªgs
, 
r12
) },

1207 { {"r13", "r13d", "r13w", "r13b"}, 
	`off£tof
(
±_ªgs
, 
r13
) },

1208 { {"r14", "r14d", "r14w", "r14b"}, 
	`off£tof
(
±_ªgs
, 
r14
) },

1209 { {"r15", "r15d", "r15w", "r15b"}, 
	`off£tof
(
±_ªgs
, 
r15
) },

1212 
i
, 
j
;

1214 
i
 = 0; i < 
	`ARRAY_SIZE
(
ªg_m≠
); i++) {

1215 
j
 = 0; j < 
	`ARRAY_SIZE
(
ªg_m≠
[
i
].
«mes
); j++) {

1216 i‡(
	`°rcmp
(
ªg_«me
, 
ªg_m≠
[
i
].
«mes
[
j
]) == 0)

1217  
ªg_m≠
[
i
].
±_ªgs_off
;

1221 
	`¥_w¨n
("usdt: uƒecognizedÑegi°î '%s'\n", 
ªg_«me
);

1222  -
ENOENT
;

1223 
	}
}

1225 
	$∑r£_usdt_¨g
(c⁄° *
¨g_°r
, 
¨g_num
, 
usdt_¨g_•ec
 *
¨g
)

1227 *
ªg_«me
 = 
NULL
;

1228 
¨g_sz
, 
Àn
, 
ªg_off
;

1229 
off
;

1231 i‡(
	`ssˇnf
(
¨g_°r
, " %d @ %ld ( %%%m[^)] ) %n", &
¨g_sz
, &
off
, &
ªg_«me
, &
Àn
) == 3) {

1233 
¨g
->
¨g_ty≥
 = 
USDT_ARG_REG_DEREF
;

1234 
¨g
->
vÆ_off
 = 
off
;

1235 
ªg_off
 = 
	`ˇlc_±_ªgs_off
(
ªg_«me
);

1236 
	`‰ì
(
ªg_«me
);

1237 i‡(
ªg_off
 < 0)

1238  
ªg_off
;

1239 
¨g
->
ªg_off
 =Ñeg_off;

1240 } i‡(
	`ssˇnf
(
¨g_°r
, " %d @ %%%m†%n", &
¨g_sz
, &
ªg_«me
, &
Àn
) == 2) {

1242 
¨g
->
¨g_ty≥
 = 
USDT_ARG_REG
;

1243 
¨g
->
vÆ_off
 = 0;

1245 
ªg_off
 = 
	`ˇlc_±_ªgs_off
(
ªg_«me
);

1246 
	`‰ì
(
ªg_«me
);

1247 i‡(
ªg_off
 < 0)

1248  
ªg_off
;

1249 
¨g
->
ªg_off
 =Ñeg_off;

1250 } i‡(
	`ssˇnf
(
¨g_°r
, " %d @ $%ld %n", &
¨g_sz
, &
off
, &
Àn
) == 2) {

1252 
¨g
->
¨g_ty≥
 = 
USDT_ARG_CONST
;

1253 
¨g
->
vÆ_off
 = 
off
;

1254 
¨g
->
ªg_off
 = 0;

1256 
	`¥_w¨n
("usdt: uƒecognizedárg #%d s≥¯'%s'\n", 
¨g_num
, 
¨g_°r
);

1257  -
EINVAL
;

1260 
¨g
->
¨g_sig√d
 = 
¨g_sz
 < 0;

1261 i‡(
¨g_sz
 < 0)

1262 
¨g_sz
 = -arg_sz;

1264 
¨g_sz
) {

1266 
¨g
->
¨g_bôshi·
 = 64 - 
¨g_sz
 * 8;

1269 
	`¥_w¨n
("usdt: unsupportedárg #%d (spec '%s') size: %d\n",

1270 
¨g_num
, 
¨g_°r
, 
¨g_sz
);

1271  -
EINVAL
;

1274  
Àn
;

1275 
	}
}

1277 #ñi‡
deföed
(
__s390x__
)

1281 
	$∑r£_usdt_¨g
(c⁄° *
¨g_°r
, 
¨g_num
, 
usdt_¨g_•ec
 *
¨g
)

1283 
ªg
;

1284 
¨g_sz
, 
Àn
;

1285 
off
;

1287 i‡(
	`ssˇnf
(
¨g_°r
, " %d @ %ld ( %%r%u ) %n", &
¨g_sz
, &
off
, &
ªg
, &
Àn
) == 3) {

1289 
¨g
->
¨g_ty≥
 = 
USDT_ARG_REG_DEREF
;

1290 
¨g
->
vÆ_off
 = 
off
;

1291 i‡(
ªg
 > 15) {

1292 
	`¥_w¨n
("usdt: uƒecognizedÑegi°î '%%r%u'\n", 
ªg
);

1293  -
EINVAL
;

1295 
¨g
->
ªg_off
 = 
	`off£tof
(
u£r_±_ªgs
, 
g¥s
[
ªg
]);

1296 } i‡(
	`ssˇnf
(
¨g_°r
, " %d @ %%r%u %n", &
¨g_sz
, &
ªg
, &
Àn
) == 2) {

1298 
¨g
->
¨g_ty≥
 = 
USDT_ARG_REG
;

1299 
¨g
->
vÆ_off
 = 0;

1300 i‡(
ªg
 > 15) {

1301 
	`¥_w¨n
("usdt: uƒecognizedÑegi°î '%%r%u'\n", 
ªg
);

1302  -
EINVAL
;

1304 
¨g
->
ªg_off
 = 
	`off£tof
(
u£r_±_ªgs
, 
g¥s
[
ªg
]);

1305 } i‡(
	`ssˇnf
(
¨g_°r
, " %d @ %ld %n", &
¨g_sz
, &
off
, &
Àn
) == 2) {

1307 
¨g
->
¨g_ty≥
 = 
USDT_ARG_CONST
;

1308 
¨g
->
vÆ_off
 = 
off
;

1309 
¨g
->
ªg_off
 = 0;

1311 
	`¥_w¨n
("usdt: uƒecognizedárg #%d s≥¯'%s'\n", 
¨g_num
, 
¨g_°r
);

1312  -
EINVAL
;

1315 
¨g
->
¨g_sig√d
 = 
¨g_sz
 < 0;

1316 i‡(
¨g_sz
 < 0)

1317 
¨g_sz
 = -arg_sz;

1319 
¨g_sz
) {

1321 
¨g
->
¨g_bôshi·
 = 64 - 
¨g_sz
 * 8;

1324 
	`¥_w¨n
("usdt: unsupportedárg #%d (spec '%s') size: %d\n",

1325 
¨g_num
, 
¨g_°r
, 
¨g_sz
);

1326  -
EINVAL
;

1329  
Àn
;

1330 
	}
}

1332 #ñi‡
deföed
(
__Ørch64__
)

1334 
	$ˇlc_±_ªgs_off
(c⁄° *
ªg_«me
)

1336 
ªg_num
;

1338 i‡(
	`ssˇnf
(
ªg_«me
, "x%d", &
ªg_num
) == 1) {

1339 i‡(
ªg_num
 >= 0 &&Ñeg_num < 31)

1340  
	`off£tof
(
u£r_±_ªgs
, 
ªgs
[
ªg_num
]);

1341 } i‡(
	`°rcmp
(
ªg_«me
, "sp") == 0) {

1342  
	`off£tof
(
u£r_±_ªgs
, 
•
);

1344 
	`¥_w¨n
("usdt: uƒecognizedÑegi°î '%s'\n", 
ªg_«me
);

1345  -
ENOENT
;

1346 
	}
}

1348 
	$∑r£_usdt_¨g
(c⁄° *
¨g_°r
, 
¨g_num
, 
usdt_¨g_•ec
 *
¨g
)

1350 *
ªg_«me
 = 
NULL
;

1351 
¨g_sz
, 
Àn
, 
ªg_off
;

1352 
off
;

1354 i‡(
	`ssˇnf
(
¨g_°r
, " %d @ \[ %m[a-z0-9], %ld ] %n", &
¨g_sz
, &
ªg_«me
, &
off
, &
Àn
) == 3) {

1356 
¨g
->
¨g_ty≥
 = 
USDT_ARG_REG_DEREF
;

1357 
¨g
->
vÆ_off
 = 
off
;

1358 
ªg_off
 = 
	`ˇlc_±_ªgs_off
(
ªg_«me
);

1359 
	`‰ì
(
ªg_«me
);

1360 i‡(
ªg_off
 < 0)

1361  
ªg_off
;

1362 
¨g
->
ªg_off
 =Ñeg_off;

1363 } i‡(
	`ssˇnf
(
¨g_°r
, " %d @ \[ %m[a-z0-9] ] %n", &
¨g_sz
, &
ªg_«me
, &
Àn
) == 2) {

1365 
¨g
->
¨g_ty≥
 = 
USDT_ARG_REG_DEREF
;

1366 
¨g
->
vÆ_off
 = 0;

1367 
ªg_off
 = 
	`ˇlc_±_ªgs_off
(
ªg_«me
);

1368 
	`‰ì
(
ªg_«me
);

1369 i‡(
ªg_off
 < 0)

1370  
ªg_off
;

1371 
¨g
->
ªg_off
 =Ñeg_off;

1372 } i‡(
	`ssˇnf
(
¨g_°r
, " %d @ %ld %n", &
¨g_sz
, &
off
, &
Àn
) == 2) {

1374 
¨g
->
¨g_ty≥
 = 
USDT_ARG_CONST
;

1375 
¨g
->
vÆ_off
 = 
off
;

1376 
¨g
->
ªg_off
 = 0;

1377 } i‡(
	`ssˇnf
(
¨g_°r
, " %d @ %m[a-z0-9] %n", &
¨g_sz
, &
ªg_«me
, &
Àn
) == 2) {

1379 
¨g
->
¨g_ty≥
 = 
USDT_ARG_REG
;

1380 
¨g
->
vÆ_off
 = 0;

1381 
ªg_off
 = 
	`ˇlc_±_ªgs_off
(
ªg_«me
);

1382 
	`‰ì
(
ªg_«me
);

1383 i‡(
ªg_off
 < 0)

1384  
ªg_off
;

1385 
¨g
->
ªg_off
 =Ñeg_off;

1387 
	`¥_w¨n
("usdt: uƒecognizedárg #%d s≥¯'%s'\n", 
¨g_num
, 
¨g_°r
);

1388  -
EINVAL
;

1391 
¨g
->
¨g_sig√d
 = 
¨g_sz
 < 0;

1392 i‡(
¨g_sz
 < 0)

1393 
¨g_sz
 = -arg_sz;

1395 
¨g_sz
) {

1397 
¨g
->
¨g_bôshi·
 = 64 - 
¨g_sz
 * 8;

1400 
	`¥_w¨n
("usdt: unsupportedárg #%d (spec '%s') size: %d\n",

1401 
¨g_num
, 
¨g_°r
, 
¨g_sz
);

1402  -
EINVAL
;

1405  
Àn
;

1406 
	}
}

1408 #ñi‡
deföed
(
__riscv
)

1410 
	$ˇlc_±_ªgs_off
(c⁄° *
ªg_«me
)

1413 c⁄° *
«me
;

1414 
size_t
 
±_ªgs_off
;

1415 } 
ªg_m≠
[] = {

1416 { "ø", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
ø
) },

1417 { "•", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
•
) },

1418 { "gp", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
gp
) },

1419 { "ç", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
ç
) },

1420 { "a0", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
a0
) },

1421 { "a1", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
a1
) },

1422 { "a2", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
a2
) },

1423 { "a3", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
a3
) },

1424 { "a4", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
a4
) },

1425 { "a5", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
a5
) },

1426 { "a6", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
a6
) },

1427 { "a7", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
a7
) },

1428 { "s0", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
s0
) },

1429 { "s1", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
s1
) },

1430 { "s2", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
s2
) },

1431 { "s3", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
s3
) },

1432 { "s4", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
s4
) },

1433 { "s5", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
s5
) },

1434 { "s6", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
s6
) },

1435 { "s7", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
s7
) },

1436 { "s8", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
rv_s8
) },

1437 { "s9", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
s9
) },

1438 { "s10", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
s10
) },

1439 { "s11", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
s11
) },

1440 { "t0", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
t0
) },

1441 { "t1", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
t1
) },

1442 { "t2", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
t2
) },

1443 { "t3", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
t3
) },

1444 { "t4", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
t4
) },

1445 { "t5", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
t5
) },

1446 { "t6", 
	`off£tof
(
u£r_ªgs_°ru˘
, 
t6
) },

1448 
i
;

1450 
i
 = 0; i < 
	`ARRAY_SIZE
(
ªg_m≠
); i++) {

1451 i‡(
	`°rcmp
(
ªg_«me
, 
ªg_m≠
[
i
].
«me
) == 0)

1452  
ªg_m≠
[
i
].
±_ªgs_off
;

1455 
	`¥_w¨n
("usdt: uƒecognizedÑegi°î '%s'\n", 
ªg_«me
);

1456  -
ENOENT
;

1457 
	}
}

1459 
	$∑r£_usdt_¨g
(c⁄° *
¨g_°r
, 
¨g_num
, 
usdt_¨g_•ec
 *
¨g
)

1461 *
ªg_«me
 = 
NULL
;

1462 
¨g_sz
, 
Àn
, 
ªg_off
;

1463 
off
;

1465 i‡(
	`ssˇnf
(
¨g_°r
, " %d @ %ld ( %m[a-z0-9] ) %n", &
¨g_sz
, &
off
, &
ªg_«me
, &
Àn
) == 3) {

1467 
¨g
->
¨g_ty≥
 = 
USDT_ARG_REG_DEREF
;

1468 
¨g
->
vÆ_off
 = 
off
;

1469 
ªg_off
 = 
	`ˇlc_±_ªgs_off
(
ªg_«me
);

1470 
	`‰ì
(
ªg_«me
);

1471 i‡(
ªg_off
 < 0)

1472  
ªg_off
;

1473 
¨g
->
ªg_off
 =Ñeg_off;

1474 } i‡(
	`ssˇnf
(
¨g_°r
, " %d @ %ld %n", &
¨g_sz
, &
off
, &
Àn
) == 2) {

1476 
¨g
->
¨g_ty≥
 = 
USDT_ARG_CONST
;

1477 
¨g
->
vÆ_off
 = 
off
;

1478 
¨g
->
ªg_off
 = 0;

1479 } i‡(
	`ssˇnf
(
¨g_°r
, " %d @ %m[a-z0-9] %n", &
¨g_sz
, &
ªg_«me
, &
Àn
) == 2) {

1481 
¨g
->
¨g_ty≥
 = 
USDT_ARG_REG
;

1482 
¨g
->
vÆ_off
 = 0;

1483 
ªg_off
 = 
	`ˇlc_±_ªgs_off
(
ªg_«me
);

1484 
	`‰ì
(
ªg_«me
);

1485 i‡(
ªg_off
 < 0)

1486  
ªg_off
;

1487 
¨g
->
ªg_off
 =Ñeg_off;

1489 
	`¥_w¨n
("usdt: uƒecognizedárg #%d s≥¯'%s'\n", 
¨g_num
, 
¨g_°r
);

1490  -
EINVAL
;

1493 
¨g
->
¨g_sig√d
 = 
¨g_sz
 < 0;

1494 i‡(
¨g_sz
 < 0)

1495 
¨g_sz
 = -arg_sz;

1497 
¨g_sz
) {

1499 
¨g
->
¨g_bôshi·
 = 64 - 
¨g_sz
 * 8;

1502 
	`¥_w¨n
("usdt: unsupportedárg #%d (spec '%s') size: %d\n",

1503 
¨g_num
, 
¨g_°r
, 
¨g_sz
);

1504  -
EINVAL
;

1507  
Àn
;

1508 
	}
}

1512 
	$∑r£_usdt_¨g
(c⁄° *
¨g_°r
, 
¨g_num
, 
usdt_¨g_•ec
 *
¨g
)

1514 
	`¥_w¨n
("usdt:Üibbpf doesn't support USDTs on currentárchitecture\n");

1515  -
ENOTSUP
;

1516 
	}
}

	@xsk.c

11 
	~<î∫o.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<uni°d.h
>

15 
	~<¨∑/öë.h
>

16 
	~<asm/b¨rõr.h
>

17 
	~<löux/compûî.h
>

18 
	~<löux/ëhtoﬁ.h
>

19 
	~<löux/fûãr.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/if_∑ckë.h
>

22 
	~<löux/if_xdp.h
>

23 
	~<löux/kî√l.h
>

24 
	~<löux/li°.h
>

25 
	~<löux/sockios.h
>

26 
	~<√t/if.h
>

27 
	~<sys/io˘l.h
>

28 
	~<sys/mm™.h
>

29 
	~<sys/sockë.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<löux/if_lök.h
>

33 
	~"bpf.h
"

34 
	~"libbpf.h
"

35 
	~"libbpf_öã∫Æ.h
"

36 
	~"xsk.h
"

41 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wdeprecated-declarations"

43 #i‚de‡
SOL_XDP


44 
	#SOL_XDP
 283

	)

47 #i‚de‡
AF_XDP


48 
	#AF_XDP
 44

	)

51 #i‚de‡
PF_XDP


52 
	#PF_XDP
 
AF_XDP


	)

55 #i‚de‡
SO_NETNS_COOKIE


56 
	#SO_NETNS_COOKIE
 71

	)

59 
	#INIT_NS
 1

	)

61 
	exsk_¥og
 {

62 
	mXSK_PROG_FALLBACK
,

63 
	mXSK_PROG_REDIRECT_FLAGS
,

66 
	sxsk_umem
 {

67 
xsk_rög_¥od
 *
	mfûl_ßve
;

68 
xsk_rög_c⁄s
 *
	mcomp_ßve
;

69 *
	mumem_¨ó
;

70 
xsk_umem_c⁄fig
 
	mc⁄fig
;

71 
	mfd
;

72 
	mªfcou¡
;

73 
li°_hód
 
	m˘x_li°
;

74 
boﬁ
 
	mrx_rög_£tup_d⁄e
;

75 
boﬁ
 
	mtx_rög_£tup_d⁄e
;

78 
	sxsk_˘x
 {

79 
xsk_rög_¥od
 *
	mfûl
;

80 
xsk_rög_c⁄s
 *
	mcomp
;

81 
__u32
 
	mqueue_id
;

82 
xsk_umem
 *
	mumem
;

83 
	mªfcou¡
;

84 
	mifödex
;

85 
__u64
 
	m√äs_cookõ
;

86 
li°_hód
 
	mli°
;

87 
	m¥og_fd
;

88 
	mlök_fd
;

89 
	mxsks_m≠_fd
;

90 
	mi‚ame
[
IFNAMSIZ
];

91 
boﬁ
 
	mhas_bpf_lök
;

94 
	sxsk_sockë
 {

95 
xsk_rög_c⁄s
 *
	mrx
;

96 
xsk_rög_¥od
 *
	mtx
;

97 
__u64
 
	mout°™dög_tx
;

98 
xsk_˘x
 *
	m˘x
;

99 
xsk_sockë_c⁄fig
 
	mc⁄fig
;

100 
	mfd
;

103 
	sxsk_∆_öfo
 {

104 
boﬁ
 
	mxdp_¥og_©èched
;

105 
	mifödex
;

106 
	mfd
;

110 
	sxdp_rög_off£t_v1
 {

111 
__u64
 
	m¥odu˚r
;

112 
__u64
 
	mc⁄sumî
;

113 
__u64
 
	mdesc
;

117 
	sxdp_mm≠_off£ts_v1
 {

118 
xdp_rög_off£t_v1
 
	mrx
;

119 
xdp_rög_off£t_v1
 
	mtx
;

120 
xdp_rög_off£t_v1
 
	m‰
;

121 
xdp_rög_off£t_v1
 
	m¸
;

124 
	$xsk_umem__fd
(c⁄° 
xsk_umem
 *
umem
)

126  
umem
 ? umem->
fd
 : -
EINVAL
;

127 
	}
}

129 
	$xsk_sockë__fd
(c⁄° 
xsk_sockë
 *
xsk
)

131  
xsk
 ? xsk->
fd
 : -
EINVAL
;

132 
	}
}

134 
boﬁ
 
	$xsk_∑ge_Æig√d
(*
buf„r
)

136 
addr
 = ()
buf„r
;

138  !(
addr
 & (
	`gë∑gesize
() - 1));

139 
	}
}

141 
	$xsk_£t_umem_c⁄fig
(
xsk_umem_c⁄fig
 *
cfg
,

142 c⁄° 
xsk_umem_c⁄fig
 *
u§_cfg
)

144 i‡(!
u§_cfg
) {

145 
cfg
->
fûl_size
 = 
XSK_RING_PROD__DEFAULT_NUM_DESCS
;

146 
cfg
->
comp_size
 = 
XSK_RING_CONS__DEFAULT_NUM_DESCS
;

147 
cfg
->
‰ame_size
 = 
XSK_UMEM__DEFAULT_FRAME_SIZE
;

148 
cfg
->
‰ame_hódroom
 = 
XSK_UMEM__DEFAULT_FRAME_HEADROOM
;

149 
cfg
->
Êags
 = 
XSK_UMEM__DEFAULT_FLAGS
;

153 
cfg
->
fûl_size
 = 
u§_cfg
->fill_size;

154 
cfg
->
comp_size
 = 
u§_cfg
->comp_size;

155 
cfg
->
‰ame_size
 = 
u§_cfg
->frame_size;

156 
cfg
->
‰ame_hódroom
 = 
u§_cfg
->frame_headroom;

157 
cfg
->
Êags
 = 
u§_cfg
->flags;

158 
	}
}

160 
	$xsk_£t_xdp_sockë_c⁄fig
(
xsk_sockë_c⁄fig
 *
cfg
,

161 c⁄° 
xsk_sockë_c⁄fig
 *
u§_cfg
)

163 i‡(!
u§_cfg
) {

164 
cfg
->
rx_size
 = 
XSK_RING_CONS__DEFAULT_NUM_DESCS
;

165 
cfg
->
tx_size
 = 
XSK_RING_PROD__DEFAULT_NUM_DESCS
;

166 
cfg
->
libbpf_Êags
 = 0;

167 
cfg
->
xdp_Êags
 = 0;

168 
cfg
->
böd_Êags
 = 0;

172 i‡(
u§_cfg
->
libbpf_Êags
 & ~
XSK_LIBBPF_FLAGS__INHIBIT_PROG_LOAD
)

173  -
EINVAL
;

175 
cfg
->
rx_size
 = 
u§_cfg
->rx_size;

176 
cfg
->
tx_size
 = 
u§_cfg
->tx_size;

177 
cfg
->
libbpf_Êags
 = 
u§_cfg
->libbpf_flags;

178 
cfg
->
xdp_Êags
 = 
u§_cfg
->xdp_flags;

179 
cfg
->
böd_Êags
 = 
u§_cfg
->bind_flags;

182 
	}
}

184 
	$xsk_mm≠_off£ts_v1
(
xdp_mm≠_off£ts
 *
off
)

186 
xdp_mm≠_off£ts_v1
 
off_v1
;

192 
	`mem˝y
(&
off_v1
, 
off
, (off_v1));

194 
off
->
rx
.
¥odu˚r
 = 
off_v1
.rx.producer;

195 
off
->
rx
.
c⁄sumî
 = 
off_v1
.rx.consumer;

196 
off
->
rx
.
desc
 = 
off_v1
.rx.desc;

197 
off
->
rx
.
Êags
 = 
off_v1
.rx.
c⁄sumî
 + (
__u32
);

199 
off
->
tx
.
¥odu˚r
 = 
off_v1
.tx.producer;

200 
off
->
tx
.
c⁄sumî
 = 
off_v1
.tx.consumer;

201 
off
->
tx
.
desc
 = 
off_v1
.tx.desc;

202 
off
->
tx
.
Êags
 = 
off_v1
.tx.
c⁄sumî
 + (
__u32
);

204 
off
->
‰
.
¥odu˚r
 = 
off_v1
.fr.producer;

205 
off
->
‰
.
c⁄sumî
 = 
off_v1
.fr.consumer;

206 
off
->
‰
.
desc
 = 
off_v1
.fr.desc;

207 
off
->
‰
.
Êags
 = 
off_v1
.‰.
c⁄sumî
 + (
__u32
);

209 
off
->
¸
.
¥odu˚r
 = 
off_v1
.cr.producer;

210 
off
->
¸
.
c⁄sumî
 = 
off_v1
.cr.consumer;

211 
off
->
¸
.
desc
 = 
off_v1
.cr.desc;

212 
off
->
¸
.
Êags
 = 
off_v1
.¸.
c⁄sumî
 + (
__u32
);

213 
	}
}

215 
	$xsk_gë_mm≠_off£ts
(
fd
, 
xdp_mm≠_off£ts
 *
off
)

217 
sockÀn_t
 
›éí
;

218 
îr
;

220 
›éí
 = (*
off
);

221 
îr
 = 
	`gësock›t
(
fd
, 
SOL_XDP
, 
XDP_MMAP_OFFSETS
, 
off
, &
›éí
);

222 i‡(
îr
)

223  
îr
;

225 i‡(
›éí
 =(*
off
))

228 i‡(
›éí
 =(
xdp_mm≠_off£ts_v1
)) {

229 
	`xsk_mm≠_off£ts_v1
(
off
);

233  -
EINVAL
;

234 
	}
}

236 
	$xsk_¸óã_umem_rögs
(
xsk_umem
 *
umem
, 
fd
,

237 
xsk_rög_¥od
 *
fûl
,

238 
xsk_rög_c⁄s
 *
comp
)

240 
xdp_mm≠_off£ts
 
off
;

241 *
m≠
;

242 
îr
;

244 
îr
 = 
	`£tsock›t
(
fd
, 
SOL_XDP
, 
XDP_UMEM_FILL_RING
,

245 &
umem
->
c⁄fig
.
fûl_size
,

246 (
umem
->
c⁄fig
.
fûl_size
));

247 i‡(
îr
)

248  -
î∫o
;

250 
îr
 = 
	`£tsock›t
(
fd
, 
SOL_XDP
, 
XDP_UMEM_COMPLETION_RING
,

251 &
umem
->
c⁄fig
.
comp_size
,

252 (
umem
->
c⁄fig
.
comp_size
));

253 i‡(
îr
)

254  -
î∫o
;

256 
îr
 = 
	`xsk_gë_mm≠_off£ts
(
fd
, &
off
);

257 i‡(
îr
)

258  -
î∫o
;

260 
m≠
 = 
	`mm≠
(
NULL
, 
off
.
‰
.
desc
 + 
umem
->
c⁄fig
.
fûl_size
 * (
__u64
),

261 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
 | 
MAP_POPULATE
, 
fd
,

262 
XDP_UMEM_PGOFF_FILL_RING
);

263 i‡(
m≠
 =
MAP_FAILED
)

264  -
î∫o
;

266 
fûl
->
mask
 = 
umem
->
c⁄fig
.
fûl_size
 - 1;

267 
fûl
->
size
 = 
umem
->
c⁄fig
.
fûl_size
;

268 
fûl
->
¥odu˚r
 = 
m≠
 + 
off
.
‰
.producer;

269 
fûl
->
c⁄sumî
 = 
m≠
 + 
off
.
‰
.consumer;

270 
fûl
->
Êags
 = 
m≠
 + 
off
.
‰
.flags;

271 
fûl
->
rög
 = 
m≠
 + 
off
.
‰
.
desc
;

272 
fûl
->
ˇched_c⁄s
 = 
umem
->
c⁄fig
.
fûl_size
;

274 
m≠
 = 
	`mm≠
(
NULL
, 
off
.
¸
.
desc
 + 
umem
->
c⁄fig
.
comp_size
 * (
__u64
),

275 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
 | 
MAP_POPULATE
, 
fd
,

276 
XDP_UMEM_PGOFF_COMPLETION_RING
);

277 i‡(
m≠
 =
MAP_FAILED
) {

278 
îr
 = -
î∫o
;

279 
out_mm≠
;

282 
comp
->
mask
 = 
umem
->
c⁄fig
.
comp_size
 - 1;

283 
comp
->
size
 = 
umem
->
c⁄fig
.
comp_size
;

284 
comp
->
¥odu˚r
 = 
m≠
 + 
off
.
¸
.producer;

285 
comp
->
c⁄sumî
 = 
m≠
 + 
off
.
¸
.consumer;

286 
comp
->
Êags
 = 
m≠
 + 
off
.
¸
.flags;

287 
comp
->
rög
 = 
m≠
 + 
off
.
¸
.
desc
;

291 
out_mm≠
:

292 
	`munm≠
(
m≠
, 
off
.
‰
.
desc
 + 
umem
->
c⁄fig
.
fûl_size
 * (
__u64
));

293  
îr
;

294 
	}
}

296 
	$DEFAULT_VERSION
(
xsk_umem__¸óã_v0_0_4
, 
xsk_umem__¸óã
, 
LIBBPF_0
.0.4)

297 
	$xsk_umem__¸óã_v0_0_4
(
xsk_umem
 **
umem_±r
, *
umem_¨ó
,

298 
__u64
 
size
, 
xsk_rög_¥od
 *
fûl
,

299 
xsk_rög_c⁄s
 *
comp
,

300 c⁄° 
xsk_umem_c⁄fig
 *
u§_c⁄fig
)

302 
xdp_umem_ªg
 
mr
;

303 
xsk_umem
 *
umem
;

304 
îr
;

306 i‡(!
umem_¨ó
 || !
umem_±r
 || !
fûl
 || !
comp
)

307  -
EFAULT
;

308 i‡(!
size
 && !
	`xsk_∑ge_Æig√d
(
umem_¨ó
))

309  -
EINVAL
;

311 
umem
 = 
	`ˇŒoc
(1, (*umem));

312 i‡(!
umem
)

313  -
ENOMEM
;

315 
umem
->
fd
 = 
	`sockë
(
AF_XDP
, 
SOCK_RAW
 | 
SOCK_CLOEXEC
, 0);

316 i‡(
umem
->
fd
 < 0) {

317 
îr
 = -
î∫o
;

318 
out_umem_Æloc
;

321 
umem
->
umem_¨ó
 = umem_area;

322 
	`INIT_LIST_HEAD
(&
umem
->
˘x_li°
);

323 
	`xsk_£t_umem_c⁄fig
(&
umem
->
c⁄fig
, 
u§_c⁄fig
);

325 
	`mem£t
(&
mr
, 0, (mr));

326 
mr
.
addr
 = (
uöçå_t
)
umem_¨ó
;

327 
mr
.
Àn
 = 
size
;

328 
mr
.
chunk_size
 = 
umem
->
c⁄fig
.
‰ame_size
;

329 
mr
.
hódroom
 = 
umem
->
c⁄fig
.
‰ame_hódroom
;

330 
mr
.
Êags
 = 
umem
->
c⁄fig
.flags;

332 
îr
 = 
	`£tsock›t
(
umem
->
fd
, 
SOL_XDP
, 
XDP_UMEM_REG
, &
mr
, (mr));

333 i‡(
îr
) {

334 
îr
 = -
î∫o
;

335 
out_sockë
;

338 
îr
 = 
	`xsk_¸óã_umem_rögs
(
umem
, umem->
fd
, 
fûl
, 
comp
);

339 i‡(
îr
)

340 
out_sockë
;

342 
umem
->
fûl_ßve
 = 
fûl
;

343 
umem
->
comp_ßve
 = 
comp
;

344 *
umem_±r
 = 
umem
;

347 
out_sockë
:

348 
	`˛o£
(
umem
->
fd
);

349 
out_umem_Æloc
:

350 
	`‰ì
(
umem
);

351  
îr
;

352 
	}
}

354 
	sxsk_umem_c⁄fig_v1
 {

355 
__u32
 
	mfûl_size
;

356 
__u32
 
	mcomp_size
;

357 
__u32
 
	m‰ame_size
;

358 
__u32
 
	m‰ame_hódroom
;

361 
	$COMPAT_VERSION
(
xsk_umem__¸óã_v0_0_2
, 
xsk_umem__¸óã
, 
LIBBPF_0
.0.2)

362 
	$xsk_umem__¸óã_v0_0_2
(
xsk_umem
 **
umem_±r
, *
umem_¨ó
,

363 
__u64
 
size
, 
xsk_rög_¥od
 *
fûl
,

364 
xsk_rög_c⁄s
 *
comp
,

365 c⁄° 
xsk_umem_c⁄fig
 *
u§_c⁄fig
)

367 
xsk_umem_c⁄fig
 
c⁄fig
;

369 
	`mem˝y
(&
c⁄fig
, 
u§_c⁄fig
, (
xsk_umem_c⁄fig_v1
));

370 
c⁄fig
.
Êags
 = 0;

372  
	`xsk_umem__¸óã_v0_0_4
(
umem_±r
, 
umem_¨ó
, 
size
, 
fûl
, 
comp
,

373 &
c⁄fig
);

374 
	}
}

376 
xsk_¥og
 
	$gë_xsk_¥og
()

378 
xsk_¥og
 
dëe˘ed
 = 
XSK_PROG_FALLBACK
;

379 
__u32
 
size_out
, 
ªtvÆ
, 
duøti⁄
;

380 
d©a_ö
 = 0, 
d©a_out
;

381 
bpf_ö¢
 
ö¢s
[] = {

382 
	`BPF_LD_MAP_FD
(
BPF_REG_1
, 0),

383 
	`BPF_MOV64_IMM
(
BPF_REG_2
, 0),

384 
	`BPF_MOV64_IMM
(
BPF_REG_3
, 
XDP_PASS
),

385 
	`BPF_EMIT_CALL
(
BPF_FUNC_ªdúe˘_m≠
),

386 
	`BPF_EXIT_INSN
(),

388 
¥og_fd
, 
m≠_fd
, 
ªt
, 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

390 
m≠_fd
 = 
	`bpf_m≠_¸óã
(
BPF_MAP_TYPE_XSKMAP
, 
NULL
, (), (), 1, NULL);

391 i‡(
m≠_fd
 < 0)

392  
dëe˘ed
;

394 
ö¢s
[0].
imm
 = 
m≠_fd
;

396 
¥og_fd
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_XDP
, 
NULL
, "GPL", 
ö¢s
, 
ö¢_˙t
, NULL);

397 i‡(
¥og_fd
 < 0) {

398 
	`˛o£
(
m≠_fd
);

399  
dëe˘ed
;

402 
ªt
 = 
	`bpf_¥og_ã°_run
(
¥og_fd
, 0, &
d©a_ö
, 1, &
d©a_out
, &
size_out
, &
ªtvÆ
, &
duøti⁄
);

403 i‡(!
ªt
 && 
ªtvÆ
 =
XDP_PASS
)

404 
dëe˘ed
 = 
XSK_PROG_REDIRECT_FLAGS
;

405 
	`˛o£
(
¥og_fd
);

406 
	`˛o£
(
m≠_fd
);

407  
dëe˘ed
;

408 
	}
}

410 
	$xsk_lﬂd_xdp_¥og
(
xsk_sockë
 *
xsk
)

412 c⁄° 
log_buf_size
 = 16 * 1024;

413 
xsk_˘x
 *
˘x
 = 
xsk
->ctx;

414 
log_buf
[
log_buf_size
];

415 
¥og_fd
;

435 
bpf_ö¢
 
¥og
[] = {

437 
	`BPF_LDX_MEM
(
BPF_W
, 
BPF_REG_2
, 
BPF_REG_1
, 16),

439 
	`BPF_STX_MEM
(
BPF_W
, 
BPF_REG_10
, 
BPF_REG_2
, -4),

441 
	`BPF_LD_MAP_FD
(
BPF_REG_1
, 
˘x
->
xsks_m≠_fd
),

443 
	`BPF_MOV64_IMM
(
BPF_REG_3
, 2),

445 
	`BPF_EMIT_CALL
(
BPF_FUNC_ªdúe˘_m≠
),

447 
	`BPF_JMP32_IMM
(
BPF_JSGT
, 
BPF_REG_0
, 0, 13),

449 
	`BPF_MOV64_REG
(
BPF_REG_2
, 
BPF_REG_10
),

451 
	`BPF_ALU64_IMM
(
BPF_ADD
, 
BPF_REG_2
, -4),

453 
	`BPF_LD_MAP_FD
(
BPF_REG_1
, 
˘x
->
xsks_m≠_fd
),

455 
	`BPF_EMIT_CALL
(
BPF_FUNC_m≠_lookup_ñem
),

457 
	`BPF_MOV64_REG
(
BPF_REG_1
, 
BPF_REG_0
),

459 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 2),

461 
	`BPF_JMP_IMM
(
BPF_JEQ
, 
BPF_REG_1
, 0, 5),

463 
	`BPF_LDX_MEM
(
BPF_W
, 
BPF_REG_2
, 
BPF_REG_10
, -4),

465 
	`BPF_LD_MAP_FD
(
BPF_REG_1
, 
˘x
->
xsks_m≠_fd
),

467 
	`BPF_MOV64_IMM
(
BPF_REG_3
, 0),

469 
	`BPF_EMIT_CALL
(
BPF_FUNC_ªdúe˘_m≠
),

471 
	`BPF_EXIT_INSN
(),

480 
bpf_ö¢
 
¥og_ªdúe˘_Êags
[] = {

482 
	`BPF_LDX_MEM
(
BPF_W
, 
BPF_REG_2
, 
BPF_REG_1
, 16),

484 
	`BPF_LD_MAP_FD
(
BPF_REG_1
, 
˘x
->
xsks_m≠_fd
),

486 
	`BPF_MOV64_IMM
(
BPF_REG_3
, 2),

488 
	`BPF_EMIT_CALL
(
BPF_FUNC_ªdúe˘_m≠
),

489 
	`BPF_EXIT_INSN
(),

491 
size_t
 
ö¢s_˙t
[] = {
	`ARRAY_SIZE
(
¥og
),

492 
	`ARRAY_SIZE
(
¥og_ªdúe˘_Êags
),

494 
bpf_ö¢
 *
¥ogs
[] = {
¥og
, 
¥og_ªdúe˘_Êags
};

495 
xsk_¥og
 
›ti⁄
 = 
	`gë_xsk_¥og
();

496 
	`LIBBPF_OPTS
(
bpf_¥og_lﬂd_›ts
, 
›ts
,

497 .
log_buf
 =Üog_buf,

498 .
log_size
 = 
log_buf_size
,

501 
¥og_fd
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_XDP
, 
NULL
, "LGPL-2.1 or BSD-2-Clause",

502 
¥ogs
[
›ti⁄
], 
ö¢s_˙t
[›ti⁄], &
›ts
);

503 i‡(
¥og_fd
 < 0) {

504 
	`¥_w¨n
("BPFÜog buf„r:\n%s", 
log_buf
);

505  
¥og_fd
;

508 
˘x
->
¥og_fd
 =Örog_fd;

510 
	}
}

512 
	$xsk_¸óã_bpf_lök
(
xsk_sockë
 *
xsk
)

514 
	`DECLARE_LIBBPF_OPTS
(
bpf_lök_¸óã_›ts
, 
›ts
);

515 
xsk_˘x
 *
˘x
 = 
xsk
->ctx;

516 
__u32
 
¥og_id
 = 0;

517 
lök_fd
;

518 
îr
;

520 
îr
 = 
	`bpf_gë_lök_xdp_id
(
˘x
->
ifödex
, &
¥og_id
, 
xsk
->
c⁄fig
.
xdp_Êags
);

521 i‡(
îr
) {

522 
	`¥_w¨n
("getting XDPÖrog id failed\n");

523  
îr
;

529 i‡(
¥og_id
) {

530 
	`¥_w¨n
("Netlink-based XDPÖrog detected,Ölease unload it in orderÅoÜaunch AF_XDPÖrog\n");

531  -
EINVAL
;

534 
›ts
.
Êags
 = 
xsk
->
c⁄fig
.
xdp_Êags
 & ~(
XDP_FLAGS_UPDATE_IF_NOEXIST
 | 
XDP_FLAGS_REPLACE
);

536 
lök_fd
 = 
	`bpf_lök_¸óã
(
˘x
->
¥og_fd
, ctx->
ifödex
, 
BPF_XDP
, &
›ts
);

537 i‡(
lök_fd
 < 0) {

538 
	`¥_w¨n
("bpf_lök_¸óã faûed: %s\n", 
	`°ªº‹
(
î∫o
));

539  
lök_fd
;

542 
˘x
->
lök_fd
 =Üink_fd;

544 
	}
}

546 
	$xsk_gë_max_queues
(
xsk_sockë
 *
xsk
)

548 
ëhtoﬁ_ch™√ls
 
ch™√ls
 = { .
cmd
 = 
ETHTOOL_GCHANNELS
 };

549 
xsk_˘x
 *
˘x
 = 
xsk
->ctx;

550 
i‰eq
 
i‰
 = {};

551 
fd
, 
îr
, 
ªt
;

553 
fd
 = 
	`sockë
(
AF_LOCAL
, 
SOCK_DGRAM
 | 
SOCK_CLOEXEC
, 0);

554 i‡(
fd
 < 0)

555  -
î∫o
;

557 
i‰
.
i‰_d©a
 = (*)&
ch™√ls
;

558 
	`libbpf_°æ˝y
(
i‰
.
i‰_«me
, 
˘x
->
i‚ame
, 
IFNAMSIZ
);

559 
îr
 = 
	`io˘l
(
fd
, 
SIOCETHTOOL
, &
i‰
);

560 i‡(
îr
 && 
î∫o
 !
EOPNOTSUPP
) {

561 
ªt
 = -
î∫o
;

562 
out
;

565 i‡(
îr
) {

569 
ªt
 = 1;

574 
ªt
 = 
	`max
(
ch™√ls
.
max_rx
, ch™√ls.
max_tx
);

575 
ªt
 = 
	`max
‘ë, ()
ch™√ls
.
max_comböed
);

578 
out
:

579 
	`˛o£
(
fd
);

580  
ªt
;

581 
	}
}

583 
	$xsk_¸óã_bpf_m≠s
(
xsk_sockë
 *
xsk
)

585 
xsk_˘x
 *
˘x
 = 
xsk
->ctx;

586 
max_queues
;

587 
fd
;

589 
max_queues
 = 
	`xsk_gë_max_queues
(
xsk
);

590 i‡(
max_queues
 < 0)

591  
max_queues
;

593 
fd
 = 
	`bpf_m≠_¸óã
(
BPF_MAP_TYPE_XSKMAP
, "xsks_map",

594 (), (), 
max_queues
, 
NULL
);

595 i‡(
fd
 < 0)

596  
fd
;

598 
˘x
->
xsks_m≠_fd
 = 
fd
;

601 
	}
}

603 
	$xsk_dñëe_bpf_m≠s
(
xsk_sockë
 *
xsk
)

605 
xsk_˘x
 *
˘x
 = 
xsk
->ctx;

607 
	`bpf_m≠_dñëe_ñem
(
˘x
->
xsks_m≠_fd
, &˘x->
queue_id
);

608 
	`˛o£
(
˘x
->
xsks_m≠_fd
);

609 
	}
}

611 
	$xsk_lookup_bpf_m≠s
(
xsk_sockë
 *
xsk
)

613 
__u32
 
i
, *
m≠_ids
, 
num_m≠s
, 
¥og_Àn
 = (
bpf_¥og_öfo
);

614 
__u32
 
m≠_Àn
 = (
bpf_m≠_öfo
);

615 
bpf_¥og_öfo
 
¥og_öfo
 = {};

616 
xsk_˘x
 *
˘x
 = 
xsk
->ctx;

617 
bpf_m≠_öfo
 
m≠_öfo
;

618 
fd
, 
îr
;

620 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
˘x
->
¥og_fd
, &
¥og_öfo
, &
¥og_Àn
);

621 i‡(
îr
)

622  
îr
;

624 
num_m≠s
 = 
¥og_öfo
.
ƒ_m≠_ids
;

626 
m≠_ids
 = 
	`ˇŒoc
(
¥og_öfo
.
ƒ_m≠_ids
, (*map_ids));

627 i‡(!
m≠_ids
)

628  -
ENOMEM
;

630 
	`mem£t
(&
¥og_öfo
, 0, 
¥og_Àn
);

631 
¥og_öfo
.
ƒ_m≠_ids
 = 
num_m≠s
;

632 
¥og_öfo
.
m≠_ids
 = (
__u64
)()map_ids;

634 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
˘x
->
¥og_fd
, &
¥og_öfo
, &
¥og_Àn
);

635 i‡(
îr
)

636 
out_m≠_ids
;

638 
˘x
->
xsks_m≠_fd
 = -1;

640 
i
 = 0; i < 
¥og_öfo
.
ƒ_m≠_ids
; i++) {

641 
fd
 = 
	`bpf_m≠_gë_fd_by_id
(
m≠_ids
[
i
]);

642 i‡(
fd
 < 0)

645 
	`mem£t
(&
m≠_öfo
, 0, 
m≠_Àn
);

646 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
fd
, &
m≠_öfo
, &
m≠_Àn
);

647 i‡(
îr
) {

648 
	`˛o£
(
fd
);

652 i‡(!
	`°∫cmp
(
m≠_öfo
.
«me
, "xsks_map", (map_info.name))) {

653 
˘x
->
xsks_m≠_fd
 = 
fd
;

657 
	`˛o£
(
fd
);

660 i‡(
˘x
->
xsks_m≠_fd
 == -1)

661 
îr
 = -
ENOENT
;

663 
out_m≠_ids
:

664 
	`‰ì
(
m≠_ids
);

665  
îr
;

666 
	}
}

668 
	$xsk_£t_bpf_m≠s
(
xsk_sockë
 *
xsk
)

670 
xsk_˘x
 *
˘x
 = 
xsk
->ctx;

672  
	`bpf_m≠_upd©e_ñem
(
˘x
->
xsks_m≠_fd
, &˘x->
queue_id
,

673 &
xsk
->
fd
, 0);

674 
	}
}

676 
	$xsk_lök_lookup
(
ifödex
, 
__u32
 *
¥og_id
, *
lök_fd
)

678 
bpf_lök_öfo
 
lök_öfo
;

679 
__u32
 
lök_Àn
;

680 
__u32
 
id
 = 0;

681 
îr
;

682 
fd
;

684 
åue
) {

685 
îr
 = 
	`bpf_lök_gë_√xt_id
(
id
, &id);

686 i‡(
îr
) {

687 i‡(
î∫o
 =
ENOENT
) {

688 
îr
 = 0;

691 
	`¥_w¨n
("ˇn'àgëÇexàlök: %s\n", 
	`°ªº‹
(
î∫o
));

695 
fd
 = 
	`bpf_lök_gë_fd_by_id
(
id
);

696 i‡(
fd
 < 0) {

697 i‡(
î∫o
 =
ENOENT
)

699 
	`¥_w¨n
("ˇn'àgëÜök by id (%u): %s\n", 
id
, 
	`°ªº‹
(
î∫o
));

700 
îr
 = -
î∫o
;

704 
lök_Àn
 = (
bpf_lök_öfo
);

705 
	`mem£t
(&
lök_öfo
, 0, 
lök_Àn
);

706 
îr
 = 
	`bpf_obj_gë_öfo_by_fd
(
fd
, &
lök_öfo
, &
lök_Àn
);

707 i‡(
îr
) {

708 
	`¥_w¨n
("ˇn'àgëÜök info: %s\n", 
	`°ªº‹
(
î∫o
));

709 
	`˛o£
(
fd
);

712 i‡(
lök_öfo
.
ty≥
 =
BPF_LINK_TYPE_XDP
) {

713 i‡(
lök_öfo
.
xdp
.
ifödex
 == ifindex) {

714 *
lök_fd
 = 
fd
;

715 i‡(
¥og_id
)

716 *
¥og_id
 = 
lök_öfo
.prog_id;

720 
	`˛o£
(
fd
);

723  
îr
;

724 
	}
}

726 
boﬁ
 
	$xsk_¥obe_bpf_lök
()

728 
	`LIBBPF_OPTS
(
bpf_lök_¸óã_›ts
, 
›ts
, .
Êags
 = 
XDP_FLAGS_SKB_MODE
);

729 
bpf_ö¢
 
ö¢s
[2] = {

730 
	`BPF_MOV64_IMM
(
BPF_REG_0
, 
XDP_PASS
),

731 
	`BPF_EXIT_INSN
()

733 
¥og_fd
, 
lök_fd
 = -1, 
ö¢_˙t
 = 
	`ARRAY_SIZE
(
ö¢s
);

734 
ifödex_lo
 = 1;

735 
boﬁ
 
ªt
 = 
Ál£
;

736 
îr
;

738 
îr
 = 
	`xsk_lök_lookup
(
ifödex_lo
, 
NULL
, &
lök_fd
);

739 i‡(
îr
)

740  
ªt
;

742 i‡(
lök_fd
 >= 0)

743  
åue
;

745 
¥og_fd
 = 
	`bpf_¥og_lﬂd
(
BPF_PROG_TYPE_XDP
, 
NULL
, "GPL", 
ö¢s
, 
ö¢_˙t
, NULL);

746 i‡(
¥og_fd
 < 0)

747  
ªt
;

749 
lök_fd
 = 
	`bpf_lök_¸óã
(
¥og_fd
, 
ifödex_lo
, 
BPF_XDP
, &
›ts
);

750 
	`˛o£
(
¥og_fd
);

752 i‡(
lök_fd
 >= 0) {

753 
ªt
 = 
åue
;

754 
	`˛o£
(
lök_fd
);

757  
ªt
;

758 
	}
}

760 
	$xsk_¸óã_xsk_°ru˘
(
ifödex
, 
xsk_sockë
 *
xsk
)

762 
i‚ame
[
IFNAMSIZ
];

763 
xsk_˘x
 *
˘x
;

764 *
öãrÁ˚
;

766 
˘x
 = 
	`ˇŒoc
(1, (*ctx));

767 i‡(!
˘x
)

768  -
ENOMEM
;

770 
öãrÁ˚
 = 
	`if_ödext⁄ame
(
ifödex
, &
i‚ame
[0]);

771 i‡(!
öãrÁ˚
) {

772 
	`‰ì
(
˘x
);

773  -
î∫o
;

776 
˘x
->
ifödex
 = ifindex;

777 
	`libbpf_°æ˝y
(
˘x
->
i‚ame
, i‚ame, 
IFNAMSIZ
);

779 
xsk
->
˘x
 = ctx;

780 
xsk
->
˘x
->
has_bpf_lök
 = 
	`xsk_¥obe_bpf_lök
();

783 
	}
}

785 
	$xsk_öô_xdp_ªs
(
xsk_sockë
 *
xsk
,

786 *
xsks_m≠_fd
)

788 
xsk_˘x
 *
˘x
 = 
xsk
->ctx;

789 
îr
;

791 
îr
 = 
	`xsk_¸óã_bpf_m≠s
(
xsk
);

792 i‡(
îr
)

793  
îr
;

795 
îr
 = 
	`xsk_lﬂd_xdp_¥og
(
xsk
);

796 i‡(
îr
)

797 
îr_lﬂd_xdp_¥og
;

799 i‡(
˘x
->
has_bpf_lök
)

800 
îr
 = 
	`xsk_¸óã_bpf_lök
(
xsk
);

802 
îr
 = 
	`bpf_£t_lök_xdp_fd
(
xsk
->
˘x
->
ifödex
, ctx->
¥og_fd
,

803 
xsk
->
c⁄fig
.
xdp_Êags
);

805 i‡(
îr
)

806 
îr_©èch_xdp_¥og
;

808 i‡(!
xsk
->
rx
)

809  
îr
;

811 
îr
 = 
	`xsk_£t_bpf_m≠s
(
xsk
);

812 i‡(
îr
)

813 
îr_£t_bpf_m≠s
;

815  
îr
;

817 
îr_£t_bpf_m≠s
:

818 i‡(
˘x
->
has_bpf_lök
)

819 
	`˛o£
(
˘x
->
lök_fd
);

821 
	`bpf_£t_lök_xdp_fd
(
˘x
->
ifödex
, -1, 0);

822 
îr_©èch_xdp_¥og
:

823 
	`˛o£
(
˘x
->
¥og_fd
);

824 
îr_lﬂd_xdp_¥og
:

825 
	`xsk_dñëe_bpf_m≠s
(
xsk
);

826  
îr
;

827 
	}
}

829 
	$xsk_lookup_xdp_ªs
(
xsk_sockë
 *
xsk
, *
xsks_m≠_fd
, 
¥og_id
)

831 
xsk_˘x
 *
˘x
 = 
xsk
->ctx;

832 
îr
;

834 
˘x
->
¥og_fd
 = 
	`bpf_¥og_gë_fd_by_id
(
¥og_id
);

835 i‡(
˘x
->
¥og_fd
 < 0) {

836 
îr
 = -
î∫o
;

837 
îr_¥og_fd
;

839 
îr
 = 
	`xsk_lookup_bpf_m≠s
(
xsk
);

840 i‡(
îr
)

841 
îr_lookup_m≠s
;

843 i‡(!
xsk
->
rx
)

844  
îr
;

846 
îr
 = 
	`xsk_£t_bpf_m≠s
(
xsk
);

847 i‡(
îr
)

848 
îr_£t_m≠s
;

850  
îr
;

852 
îr_£t_m≠s
:

853 
	`˛o£
(
˘x
->
xsks_m≠_fd
);

854 
îr_lookup_m≠s
:

855 
	`˛o£
(
˘x
->
¥og_fd
);

856 
îr_¥og_fd
:

857 i‡(
˘x
->
has_bpf_lök
)

858 
	`˛o£
(
˘x
->
lök_fd
);

859  
îr
;

860 
	}
}

862 
	$__xsk_£tup_xdp_¥og
(
xsk_sockë
 *
_xdp
, *
xsks_m≠_fd
)

864 
xsk_sockë
 *
xsk
 = 
_xdp
;

865 
xsk_˘x
 *
˘x
 = 
xsk
->ctx;

866 
__u32
 
¥og_id
 = 0;

867 
îr
;

869 i‡(
˘x
->
has_bpf_lök
)

870 
îr
 = 
	`xsk_lök_lookup
(
˘x
->
ifödex
, &
¥og_id
, &˘x->
lök_fd
);

872 
îr
 = 
	`bpf_gë_lök_xdp_id
(
˘x
->
ifödex
, &
¥og_id
, 
xsk
->
c⁄fig
.
xdp_Êags
);

874 i‡(
îr
)

875  
îr
;

877 
îr
 = !
¥og_id
 ? 
	`xsk_öô_xdp_ªs
(
xsk
, 
xsks_m≠_fd
) :

878 
	`xsk_lookup_xdp_ªs
(
xsk
, 
xsks_m≠_fd
, 
¥og_id
);

880 i‡(!
îr
 && 
xsks_m≠_fd
)

881 *
xsks_m≠_fd
 = 
˘x
->xsks_map_fd;

883  
îr
;

884 
	}
}

886 
xsk_˘x
 *
	$xsk_gë_˘x
(
xsk_umem
 *
umem
, 
__u64
 
√äs_cookõ
, 
ifödex
, 
__u32
 
queue_id
)

888 
xsk_˘x
 *
˘x
;

890 i‡(
	`li°_em±y
(&
umem
->
˘x_li°
))

891  
NULL
;

893 
	`li°_f‹_óch_íåy
(
˘x
, &
umem
->
˘x_li°
, 
li°
) {

894 i‡(
˘x
->
√äs_cookõ
 =√äs_cookõ && ctx->
ifödex
 =ifödex && ctx->
queue_id
 == queue_id) {

895 
˘x
->
ªfcou¡
++;

896  
˘x
;

900  
NULL
;

901 
	}
}

903 
	$xsk_put_˘x
(
xsk_˘x
 *
˘x
, 
boﬁ
 
unm≠
)

905 
xsk_umem
 *
umem
 = 
˘x
->umem;

906 
xdp_mm≠_off£ts
 
off
;

907 
îr
;

909 i‡(--
˘x
->
ªfcou¡
)

912 i‡(!
unm≠
)

913 
out_‰ì
;

915 
îr
 = 
	`xsk_gë_mm≠_off£ts
(
umem
->
fd
, &
off
);

916 i‡(
îr
)

917 
out_‰ì
;

919 
	`munm≠
(
˘x
->
fûl
->
rög
 - 
off
.
‰
.
desc
, off.‰.des¯+ 
umem
->
c⁄fig
.
fûl_size
 *

920 (
__u64
));

921 
	`munm≠
(
˘x
->
comp
->
rög
 - 
off
.
¸
.
desc
, off.¸.des¯+ 
umem
->
c⁄fig
.
comp_size
 *

922 (
__u64
));

924 
out_‰ì
:

925 
	`li°_dñ
(&
˘x
->
li°
);

926 
	`‰ì
(
˘x
);

927 
	}
}

929 
xsk_˘x
 *
	$xsk_¸óã_˘x
(
xsk_sockë
 *
xsk
,

930 
xsk_umem
 *
umem
, 
__u64
 
√äs_cookõ
, 
ifödex
,

931 c⁄° *
i‚ame
, 
__u32
 
queue_id
,

932 
xsk_rög_¥od
 *
fûl
,

933 
xsk_rög_c⁄s
 *
comp
)

935 
xsk_˘x
 *
˘x
;

936 
îr
;

938 
˘x
 = 
	`ˇŒoc
(1, (*ctx));

939 i‡(!
˘x
)

940  
NULL
;

942 i‡(!
umem
->
fûl_ßve
) {

943 
îr
 = 
	`xsk_¸óã_umem_rögs
(
umem
, 
xsk
->
fd
, 
fûl
, 
comp
);

944 i‡(
îr
) {

945 
	`‰ì
(
˘x
);

946  
NULL
;

948 } i‡(
umem
->
fûl_ßve
 !
fûl
 || umem->
comp_ßve
 !
comp
) {

950 
	`mem˝y
(
fûl
, 
umem
->
fûl_ßve
, (*fill));

951 
	`mem˝y
(
comp
, 
umem
->
comp_ßve
, (*comp));

954 
˘x
->
√äs_cookõ
 =Çetns_cookie;

955 
˘x
->
ifödex
 = ifindex;

956 
˘x
->
ªfcou¡
 = 1;

957 
˘x
->
umem
 = umem;

958 
˘x
->
queue_id
 = queue_id;

959 
	`libbpf_°æ˝y
(
˘x
->
i‚ame
, i‚ame, 
IFNAMSIZ
);

961 
˘x
->
fûl
 = fill;

962 
˘x
->
comp
 = comp;

963 
	`li°_add
(&
˘x
->
li°
, &
umem
->
˘x_li°
);

964  
˘x
;

965 
	}
}

967 
	$xsk_de°roy_xsk_°ru˘
(
xsk_sockë
 *
xsk
)

969 
	`‰ì
(
xsk
->
˘x
);

970 
	`‰ì
(
xsk
);

971 
	}
}

973 
	$xsk_sockë__upd©e_xskm≠
(
xsk_sockë
 *
xsk
, 
fd
)

975 
xsk
->
˘x
->
xsks_m≠_fd
 = 
fd
;

976  
	`xsk_£t_bpf_m≠s
(
xsk
);

977 
	}
}

979 
	$xsk_£tup_xdp_¥og
(
ifödex
, *
xsks_m≠_fd
)

981 
xsk_sockë
 *
xsk
;

982 
ªs
;

984 
xsk
 = 
	`ˇŒoc
(1, (*xsk));

985 i‡(!
xsk
)

986  -
ENOMEM
;

988 
ªs
 = 
	`xsk_¸óã_xsk_°ru˘
(
ifödex
, 
xsk
);

989 i‡(
ªs
) {

990 
	`‰ì
(
xsk
);

991  -
EINVAL
;

994 
ªs
 = 
	`__xsk_£tup_xdp_¥og
(
xsk
, 
xsks_m≠_fd
);

996 
	`xsk_de°roy_xsk_°ru˘
(
xsk
);

998  
ªs
;

999 
	}
}

1001 
	$xsk_sockë__¸óã_sh¨ed
(
xsk_sockë
 **
xsk_±r
,

1002 c⁄° *
i‚ame
,

1003 
__u32
 
queue_id
, 
xsk_umem
 *
umem
,

1004 
xsk_rög_c⁄s
 *
rx
,

1005 
xsk_rög_¥od
 *
tx
,

1006 
xsk_rög_¥od
 *
fûl
,

1007 
xsk_rög_c⁄s
 *
comp
,

1008 c⁄° 
xsk_sockë_c⁄fig
 *
u§_c⁄fig
)

1010 
boﬁ
 
unm≠
, 
rx_£tup_d⁄e
 = 
Ál£
, 
tx_£tup_d⁄e
 = false;

1011 *
rx_m≠
 = 
NULL
, *
tx_m≠
 = NULL;

1012 
sockaddr_xdp
 
sxdp
 = {};

1013 
xdp_mm≠_off£ts
 
off
;

1014 
xsk_sockë
 *
xsk
;

1015 
xsk_˘x
 *
˘x
;

1016 
îr
, 
ifödex
;

1017 
__u64
 
√äs_cookõ
;

1018 
sockÀn_t
 
›éí
;

1020 i‡(!
umem
 || !
xsk_±r
 || !(
rx
 || 
tx
))

1021  -
EFAULT
;

1023 
unm≠
 = 
umem
->
fûl_ßve
 !
fûl
;

1025 
xsk
 = 
	`ˇŒoc
(1, (*xsk));

1026 i‡(!
xsk
)

1027  -
ENOMEM
;

1029 
îr
 = 
	`xsk_£t_xdp_sockë_c⁄fig
(&
xsk
->
c⁄fig
, 
u§_c⁄fig
);

1030 i‡(
îr
)

1031 
out_xsk_Æloc
;

1033 
xsk
->
out°™dög_tx
 = 0;

1034 
ifödex
 = 
	`if_«mëoödex
(
i‚ame
);

1035 i‡(!
ifödex
) {

1036 
îr
 = -
î∫o
;

1037 
out_xsk_Æloc
;

1040 i‡(
umem
->
ªfcou¡
++ > 0) {

1041 
xsk
->
fd
 = 
	`sockë
(
AF_XDP
, 
SOCK_RAW
 | 
SOCK_CLOEXEC
, 0);

1042 i‡(
xsk
->
fd
 < 0) {

1043 
îr
 = -
î∫o
;

1044 
out_xsk_Æloc
;

1047 
xsk
->
fd
 = 
umem
->fd;

1048 
rx_£tup_d⁄e
 = 
umem
->
rx_rög_£tup_d⁄e
;

1049 
tx_£tup_d⁄e
 = 
umem
->
tx_rög_£tup_d⁄e
;

1052 
›éí
 = (
√äs_cookõ
);

1053 
îr
 = 
	`gësock›t
(
xsk
->
fd
, 
SOL_SOCKET
, 
SO_NETNS_COOKIE
, &
√äs_cookõ
, &
›éí
);

1054 i‡(
îr
) {

1055 i‡(
î∫o
 !
ENOPROTOOPT
) {

1056 
îr
 = -
î∫o
;

1057 
out_sockë
;

1059 
√äs_cookõ
 = 
INIT_NS
;

1062 
˘x
 = 
	`xsk_gë_˘x
(
umem
, 
√äs_cookõ
, 
ifödex
, 
queue_id
);

1063 i‡(!
˘x
) {

1064 i‡(!
fûl
 || !
comp
) {

1065 
îr
 = -
EFAULT
;

1066 
out_sockë
;

1069 
˘x
 = 
	`xsk_¸óã_˘x
(
xsk
, 
umem
, 
√äs_cookõ
, 
ifödex
, 
i‚ame
, 
queue_id
,

1070 
fûl
, 
comp
);

1071 i‡(!
˘x
) {

1072 
îr
 = -
ENOMEM
;

1073 
out_sockë
;

1076 
xsk
->
˘x
 = ctx;

1077 
xsk
->
˘x
->
has_bpf_lök
 = 
	`xsk_¥obe_bpf_lök
();

1079 i‡(
rx
 && !
rx_£tup_d⁄e
) {

1080 
îr
 = 
	`£tsock›t
(
xsk
->
fd
, 
SOL_XDP
, 
XDP_RX_RING
,

1081 &
xsk
->
c⁄fig
.
rx_size
,

1082 (
xsk
->
c⁄fig
.
rx_size
));

1083 i‡(
îr
) {

1084 
îr
 = -
î∫o
;

1085 
out_put_˘x
;

1087 i‡(
xsk
->
fd
 =
umem
->fd)

1088 
umem
->
rx_rög_£tup_d⁄e
 = 
åue
;

1090 i‡(
tx
 && !
tx_£tup_d⁄e
) {

1091 
îr
 = 
	`£tsock›t
(
xsk
->
fd
, 
SOL_XDP
, 
XDP_TX_RING
,

1092 &
xsk
->
c⁄fig
.
tx_size
,

1093 (
xsk
->
c⁄fig
.
tx_size
));

1094 i‡(
îr
) {

1095 
îr
 = -
î∫o
;

1096 
out_put_˘x
;

1098 i‡(
xsk
->
fd
 =
umem
->fd)

1099 
umem
->
tx_rög_£tup_d⁄e
 = 
åue
;

1102 
îr
 = 
	`xsk_gë_mm≠_off£ts
(
xsk
->
fd
, &
off
);

1103 i‡(
îr
) {

1104 
îr
 = -
î∫o
;

1105 
out_put_˘x
;

1108 i‡(
rx
) {

1109 
rx_m≠
 = 
	`mm≠
(
NULL
, 
off
.
rx
.
desc
 +

1110 
xsk
->
c⁄fig
.
rx_size
 * (
xdp_desc
),

1111 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
 | 
MAP_POPULATE
,

1112 
xsk
->
fd
, 
XDP_PGOFF_RX_RING
);

1113 i‡(
rx_m≠
 =
MAP_FAILED
) {

1114 
îr
 = -
î∫o
;

1115 
out_put_˘x
;

1118 
rx
->
mask
 = 
xsk
->
c⁄fig
.
rx_size
 - 1;

1119 
rx
->
size
 = 
xsk
->
c⁄fig
.
rx_size
;

1120 
rx
->
¥odu˚r
 = 
rx_m≠
 + 
off
.rx.producer;

1121 
rx
->
c⁄sumî
 = 
rx_m≠
 + 
off
.rx.consumer;

1122 
rx
->
Êags
 = 
rx_m≠
 + 
off
.rx.flags;

1123 
rx
->
rög
 = 
rx_m≠
 + 
off
.rx.
desc
;

1124 
rx
->
ˇched_¥od
 = *rx->
¥odu˚r
;

1125 
rx
->
ˇched_c⁄s
 = *rx->
c⁄sumî
;

1127 
xsk
->
rx
 =Ñx;

1129 i‡(
tx
) {

1130 
tx_m≠
 = 
	`mm≠
(
NULL
, 
off
.
tx
.
desc
 +

1131 
xsk
->
c⁄fig
.
tx_size
 * (
xdp_desc
),

1132 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
 | 
MAP_POPULATE
,

1133 
xsk
->
fd
, 
XDP_PGOFF_TX_RING
);

1134 i‡(
tx_m≠
 =
MAP_FAILED
) {

1135 
îr
 = -
î∫o
;

1136 
out_mm≠_rx
;

1139 
tx
->
mask
 = 
xsk
->
c⁄fig
.
tx_size
 - 1;

1140 
tx
->
size
 = 
xsk
->
c⁄fig
.
tx_size
;

1141 
tx
->
¥odu˚r
 = 
tx_m≠
 + 
off
.tx.producer;

1142 
tx
->
c⁄sumî
 = 
tx_m≠
 + 
off
.tx.consumer;

1143 
tx
->
Êags
 = 
tx_m≠
 + 
off
.tx.flags;

1144 
tx
->
rög
 = 
tx_m≠
 + 
off
.tx.
desc
;

1145 
tx
->
ˇched_¥od
 = *tx->
¥odu˚r
;

1149 
tx
->
ˇched_c⁄s
 = *tx->
c⁄sumî
 + 
xsk
->
c⁄fig
.
tx_size
;

1151 
xsk
->
tx
 =Åx;

1153 
sxdp
.
sxdp_Ámûy
 = 
PF_XDP
;

1154 
sxdp
.
sxdp_ifödex
 = 
˘x
->
ifödex
;

1155 
sxdp
.
sxdp_queue_id
 = 
˘x
->
queue_id
;

1156 i‡(
umem
->
ªfcou¡
 > 1) {

1157 
sxdp
.
sxdp_Êags
 |
XDP_SHARED_UMEM
;

1158 
sxdp
.
sxdp_sh¨ed_umem_fd
 = 
umem
->
fd
;

1160 
sxdp
.
sxdp_Êags
 = 
xsk
->
c⁄fig
.
böd_Êags
;

1163 
îr
 = 
	`böd
(
xsk
->
fd
, (
sockaddr
 *)&
sxdp
, (sxdp));

1164 i‡(
îr
) {

1165 
îr
 = -
î∫o
;

1166 
out_mm≠_tx
;

1169 
˘x
->
¥og_fd
 = -1;

1171 i‡(!(
xsk
->
c⁄fig
.
libbpf_Êags
 & 
XSK_LIBBPF_FLAGS__INHIBIT_PROG_LOAD
)) {

1172 
îr
 = 
	`__xsk_£tup_xdp_¥og
(
xsk
, 
NULL
);

1173 i‡(
îr
)

1174 
out_mm≠_tx
;

1177 *
xsk_±r
 = 
xsk
;

1178 
umem
->
fûl_ßve
 = 
NULL
;

1179 
umem
->
comp_ßve
 = 
NULL
;

1182 
out_mm≠_tx
:

1183 i‡(
tx
)

1184 
	`munm≠
(
tx_m≠
, 
off
.
tx
.
desc
 +

1185 
xsk
->
c⁄fig
.
tx_size
 * (
xdp_desc
));

1186 
out_mm≠_rx
:

1187 i‡(
rx
)

1188 
	`munm≠
(
rx_m≠
, 
off
.
rx
.
desc
 +

1189 
xsk
->
c⁄fig
.
rx_size
 * (
xdp_desc
));

1190 
out_put_˘x
:

1191 
	`xsk_put_˘x
(
˘x
, 
unm≠
);

1192 
out_sockë
:

1193 i‡(--
umem
->
ªfcou¡
)

1194 
	`˛o£
(
xsk
->
fd
);

1195 
out_xsk_Æloc
:

1196 
	`‰ì
(
xsk
);

1197  
îr
;

1198 
	}
}

1200 
	$xsk_sockë__¸óã
(
xsk_sockë
 **
xsk_±r
, c⁄° *
i‚ame
,

1201 
__u32
 
queue_id
, 
xsk_umem
 *
umem
,

1202 
xsk_rög_c⁄s
 *
rx
, 
xsk_rög_¥od
 *
tx
,

1203 c⁄° 
xsk_sockë_c⁄fig
 *
u§_c⁄fig
)

1205 i‡(!
umem
)

1206  -
EFAULT
;

1208  
	`xsk_sockë__¸óã_sh¨ed
(
xsk_±r
, 
i‚ame
, 
queue_id
, 
umem
,

1209 
rx
, 
tx
, 
umem
->
fûl_ßve
,

1210 
umem
->
comp_ßve
, 
u§_c⁄fig
);

1211 
	}
}

1213 
	$xsk_umem__dñëe
(
xsk_umem
 *
umem
)

1215 
xdp_mm≠_off£ts
 
off
;

1216 
îr
;

1218 i‡(!
umem
)

1221 i‡(
umem
->
ªfcou¡
)

1222  -
EBUSY
;

1224 
îr
 = 
	`xsk_gë_mm≠_off£ts
(
umem
->
fd
, &
off
);

1225 i‡(!
îr
 && 
umem
->
fûl_ßve
 && umem->
comp_ßve
) {

1226 
	`munm≠
(
umem
->
fûl_ßve
->
rög
 - 
off
.
‰
.
desc
,

1227 
off
.
‰
.
desc
 + 
umem
->
c⁄fig
.
fûl_size
 * (
__u64
));

1228 
	`munm≠
(
umem
->
comp_ßve
->
rög
 - 
off
.
¸
.
desc
,

1229 
off
.
¸
.
desc
 + 
umem
->
c⁄fig
.
comp_size
 * (
__u64
));

1232 
	`˛o£
(
umem
->
fd
);

1233 
	`‰ì
(
umem
);

1236 
	}
}

1238 
	$xsk_sockë__dñëe
(
xsk_sockë
 *
xsk
)

1240 
size_t
 
desc_sz
 = (
xdp_desc
);

1241 
xdp_mm≠_off£ts
 
off
;

1242 
xsk_umem
 *
umem
;

1243 
xsk_˘x
 *
˘x
;

1244 
îr
;

1246 i‡(!
xsk
)

1249 
˘x
 = 
xsk
->ctx;

1250 
umem
 = 
˘x
->umem;

1251 i‡(
˘x
->
¥og_fd
 != -1) {

1252 
	`xsk_dñëe_bpf_m≠s
(
xsk
);

1253 
	`˛o£
(
˘x
->
¥og_fd
);

1254 i‡(
˘x
->
has_bpf_lök
)

1255 
	`˛o£
(
˘x
->
lök_fd
);

1258 
îr
 = 
	`xsk_gë_mm≠_off£ts
(
xsk
->
fd
, &
off
);

1259 i‡(!
îr
) {

1260 i‡(
xsk
->
rx
) {

1261 
	`munm≠
(
xsk
->
rx
->
rög
 - 
off
.rx.
desc
,

1262 
off
.
rx
.
desc
 + 
xsk
->
c⁄fig
.
rx_size
 * 
desc_sz
);

1264 i‡(
xsk
->
tx
) {

1265 
	`munm≠
(
xsk
->
tx
->
rög
 - 
off
.tx.
desc
,

1266 
off
.
tx
.
desc
 + 
xsk
->
c⁄fig
.
tx_size
 * 
desc_sz
);

1270 
	`xsk_put_˘x
(
˘x
, 
åue
);

1272 
umem
->
ªfcou¡
--;

1276 i‡(
xsk
->
fd
 !
umem
->fd)

1277 
	`˛o£
(
xsk
->
fd
);

1278 
	`‰ì
(
xsk
);

1279 
	}
}

	@xsk.h

12 #i‚de‡
__LIBBPF_XSK_H


13 
	#__LIBBPF_XSK_H


	)

15 
	~<°dio.h
>

16 
	~<°döt.h
>

17 
	~<°dboﬁ.h
>

18 
	~<löux/if_xdp.h
>

20 
	~"libbpf.h
"

22 #ifde‡
__˝lu•lus


39 
	#__XSK_READ_ONCE
(
x
Ë(*(vﬁ©ûê
	`ty≥of
(xË*)&x)

	)

40 
	#__XSK_WRITE_ONCE
(
x
, 
v
Ë(*(vﬁ©ûê
	`ty≥of
(xË*)&xË(v)

	)

42 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

43 
	#libbpf_smp_°‹e_ªÀa£
(
p
, 
v
) \

45 
asm
 volatile("" : : : "memory"); \

46 
	`__XSK_WRITE_ONCE
(*
p
, 
v
); \

47 } 0)

	)

48 
	#libbpf_smp_lﬂd_acquúe
(
p
) \

50 
	`ty≥of
(*
p
Ë
___p1
 = 
	`__XSK_READ_ONCE
(*p); \

51 
asm
 volatile("" : : : "memory"); \

52 
___p1
; \

53 })

	)

54 #ñi‡
deföed
(
__Ørch64__
)

55 
	#libbpf_smp_°‹e_ªÀa£
(
p
, 
v
) \

56 
asm
 vﬁ©ûê("°Ã %w1, %0" : "=Q" (*
p
Ë: "r" (
v
Ë: "mem‹y")

	)

57 
	#libbpf_smp_lﬂd_acquúe
(
p
) \

59 
	`ty≥of
(*
p
Ë
___p1
; \

60 
asm
 volatile ("ldar %w0, %1" \

61 : "Ù" (
___p1
Ë: "Q" (*
p
) : "memory"); \

62 
___p1
; \

63 })

	)

64 #ñi‡
deföed
(
__riscv
)

65 
	#libbpf_smp_°‹e_ªÀa£
(
p
, 
v
) \

67 
asm
 volatile ("fenceÑw,w" : : : "memory"); \

68 
	`__XSK_WRITE_ONCE
(*
p
, 
v
); \

69 } 0)

	)

70 
	#libbpf_smp_lﬂd_acquúe
(
p
) \

72 
	`ty≥of
(*
p
Ë
___p1
 = 
	`__XSK_READ_ONCE
(*p); \

73 
asm
 volatile ("fenceÑ,rw" : : : "memory"); \

74 
___p1
; \

75 })

	)

78 #i‚de‡
libbpf_smp_°‹e_ªÀa£


79 
	#libbpf_smp_°‹e_ªÀa£
(
p
, 
v
) \

81 
	`__sync_synchr⁄ize
(); \

82 
	`__XSK_WRITE_ONCE
(*
p
, 
v
); \

83 } 0)

	)

86 #i‚de‡
libbpf_smp_lﬂd_acquúe


87 
	#libbpf_smp_lﬂd_acquúe
(
p
) \

89 
	`ty≥of
(*
p
Ë
___p1
 = 
	`__XSK_READ_ONCE
(*p); \

90 
	`__sync_synchr⁄ize
(); \

91 
___p1
; \

92 })

	)

98 
	#DEFINE_XSK_RING
(
«me
) \

99 
	s«me
 { \

100 
__u32
 
ˇched_¥od
; \

101 
__u32
 
ˇched_c⁄s
; \

102 
__u32
 
mask
; \

103 
__u32
 
size
; \

104 
__u32
 *
¥odu˚r
; \

105 
__u32
 *
c⁄sumî
; \

106 *
rög
; \

107 
__u32
 *
Êags
; \

108 }

	)

110 
DEFINE_XSK_RING
(
xsk_rög_¥od
);

111 
DEFINE_XSK_RING
(
xsk_rög_c⁄s
);

117 
xsk_umem
;

118 
xsk_sockë
;

120 
ölöe
 
__u64
 *
xsk_rög_¥od__fûl_addr
(
xsk_rög_¥od
 *
fûl
,

121 
__u32
 
idx
)

123 
__u64
 *
addrs
 = (__u64 *)
fûl
->
rög
;

125  &
addrs
[
idx
 & 
fûl
->
mask
];

128 
ölöe
 c⁄° 
__u64
 *

129 
xsk_rög_c⁄s__comp_addr
(c⁄° 
xsk_rög_c⁄s
 *
comp
, 
__u32
 
idx
)

131 c⁄° 
__u64
 *
addrs
 = (c⁄° __u64 *)
comp
->
rög
;

133  &
addrs
[
idx
 & 
comp
->
mask
];

136 
ölöe
 
xdp_desc
 *
xsk_rög_¥od__tx_desc
(
xsk_rög_¥od
 *
tx
,

137 
__u32
 
idx
)

139 
xdp_desc
 *
descs
 = (xdp_des¯*)
tx
->
rög
;

141  &
descs
[
idx
 & 
tx
->
mask
];

144 
ölöe
 c⁄° 
xdp_desc
 *

145 
xsk_rög_c⁄s__rx_desc
(c⁄° 
xsk_rög_c⁄s
 *
rx
, 
__u32
 
idx
)

147 c⁄° 
xdp_desc
 *
descs
 = (c⁄° xdp_des¯*)
rx
->
rög
;

149  &
descs
[
idx
 & 
rx
->
mask
];

152 
ölöe
 
xsk_rög_¥od__√eds_wakeup
(c⁄° 
xsk_rög_¥od
 *
r
)

154  *
r
->
Êags
 & 
XDP_RING_NEED_WAKEUP
;

157 
ölöe
 
__u32
 
xsk_¥od_nb_‰ì
(
xsk_rög_¥od
 *
r
, __u32 
nb
)

159 
__u32
 
‰ì_íåõs
 = 
r
->
ˇched_c⁄s
 -Ñ->
ˇched_¥od
;

161 i‡(
‰ì_íåõs
 >
nb
)

162  
‰ì_íåõs
;

171 
r
->
ˇched_c⁄s
 = 
libbpf_smp_lﬂd_acquúe
‘->
c⁄sumî
);

172 
r
->
ˇched_c⁄s
 +r->
size
;

174  
r
->
ˇched_c⁄s
 -Ñ->
ˇched_¥od
;

177 
ölöe
 
__u32
 
xsk_c⁄s_nb_avaû
(
xsk_rög_c⁄s
 *
r
, __u32 
nb
)

179 
__u32
 
íåõs
 = 
r
->
ˇched_¥od
 -Ñ->
ˇched_c⁄s
;

181 i‡(
íåõs
 == 0) {

182 
r
->
ˇched_¥od
 = 
libbpf_smp_lﬂd_acquúe
‘->
¥odu˚r
);

183 
íåõs
 = 
r
->
ˇched_¥od
 -Ñ->
ˇched_c⁄s
;

186  (
íåõs
 > 
nb
) ?Çb :Éntries;

189 
ölöe
 
__u32
 
xsk_rög_¥od__ª£rve
(
xsk_rög_¥od
 *
¥od
, __u32 
nb
, __u32 *
idx
)

191 i‡(
xsk_¥od_nb_‰ì
(
¥od
, 
nb
) <Çb)

194 *
idx
 = 
¥od
->
ˇched_¥od
;

195 
¥od
->
ˇched_¥od
 +
nb
;

197  
nb
;

200 
ölöe
 
xsk_rög_¥od__submô
(
xsk_rög_¥od
 *
¥od
, 
__u32
 
nb
)

205 
libbpf_smp_°‹e_ªÀa£
(
¥od
->
¥odu˚r
, *¥od->¥odu˚∏+ 
nb
);

208 
ölöe
 
__u32
 
xsk_rög_c⁄s__≥ek
(
xsk_rög_c⁄s
 *
c⁄s
, __u32 
nb
, __u32 *
idx
)

210 
__u32
 
íåõs
 = 
xsk_c⁄s_nb_avaû
(
c⁄s
, 
nb
);

212 i‡(
íåõs
 > 0) {

213 *
idx
 = 
c⁄s
->
ˇched_c⁄s
;

214 
c⁄s
->
ˇched_c⁄s
 +
íåõs
;

217  
íåõs
;

220 
ölöe
 
xsk_rög_c⁄s__ˇn˚l
(
xsk_rög_c⁄s
 *
c⁄s
, 
__u32
 
nb
)

222 
c⁄s
->
ˇched_c⁄s
 -
nb
;

225 
ölöe
 
xsk_rög_c⁄s__ªÀa£
(
xsk_rög_c⁄s
 *
c⁄s
, 
__u32
 
nb
)

230 
libbpf_smp_°‹e_ªÀa£
(
c⁄s
->
c⁄sumî
, *c⁄s->c⁄sumî + 
nb
);

234 
ölöe
 *
xsk_umem__gë_d©a
(*
umem_¨ó
, 
__u64
 
addr
)

236  &((*)
umem_¨ó
)[
addr
];

239 
ölöe
 
__u64
 
xsk_umem__exåa˘_addr
(__u64 
addr
)

241  
addr
 & 
XSK_UNALIGNED_BUF_ADDR_MASK
;

244 
ölöe
 
__u64
 
xsk_umem__exåa˘_off£t
(__u64 
addr
)

246  
addr
 >> 
XSK_UNALIGNED_BUF_OFFSET_SHIFT
;

249 
ölöe
 
__u64
 
xsk_umem__add_off£t_to_addr
(__u64 
addr
)

251  
xsk_umem__exåa˘_addr
(
addr
Ë+ 
xsk_umem__exåa˘_off£t
(addr);

254 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

255 
xsk_umem__fd
(c⁄° 
xsk_umem
 *
umem
);

256 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

257 
xsk_sockë__fd
(c⁄° 
xsk_sockë
 *
xsk
);

259 
	#XSK_RING_CONS__DEFAULT_NUM_DESCS
 2048

	)

260 
	#XSK_RING_PROD__DEFAULT_NUM_DESCS
 2048

	)

261 
	#XSK_UMEM__DEFAULT_FRAME_SHIFT
 12

	)

262 
	#XSK_UMEM__DEFAULT_FRAME_SIZE
 (1 << 
XSK_UMEM__DEFAULT_FRAME_SHIFT
)

	)

263 
	#XSK_UMEM__DEFAULT_FRAME_HEADROOM
 0

	)

264 
	#XSK_UMEM__DEFAULT_FLAGS
 0

	)

266 
	sxsk_umem_c⁄fig
 {

267 
__u32
 
fûl_size
;

268 
__u32
 
comp_size
;

269 
__u32
 
‰ame_size
;

270 
__u32
 
‰ame_hódroom
;

271 
__u32
 
Êags
;

274 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

275 
xsk_£tup_xdp_¥og
(
ifödex
, *
xsks_m≠_fd
);

276 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

277 
xsk_sockë__upd©e_xskm≠
(
xsk_sockë
 *
xsk
, 
xsks_m≠_fd
);

280 
	#XSK_LIBBPF_FLAGS__INHIBIT_PROG_LOAD
 (1 << 0)

	)

282 
	sxsk_sockë_c⁄fig
 {

283 
__u32
 
rx_size
;

284 
__u32
 
tx_size
;

285 
__u32
 
libbpf_Êags
;

286 
__u32
 
xdp_Êags
;

287 
__u16
 
böd_Êags
;

291 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

292 
xsk_umem__¸óã
(
xsk_umem
 **
umem
,

293 *
umem_¨ó
, 
__u64
 
size
,

294 
xsk_rög_¥od
 *
fûl
,

295 
xsk_rög_c⁄s
 *
comp
,

296 c⁄° 
xsk_umem_c⁄fig
 *
c⁄fig
);

297 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

298 
xsk_umem__¸óã_v0_0_2
(
xsk_umem
 **
umem
,

299 *
umem_¨ó
, 
__u64
 
size
,

300 
xsk_rög_¥od
 *
fûl
,

301 
xsk_rög_c⁄s
 *
comp
,

302 c⁄° 
xsk_umem_c⁄fig
 *
c⁄fig
);

303 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

304 
xsk_umem__¸óã_v0_0_4
(
xsk_umem
 **
umem
,

305 *
umem_¨ó
, 
__u64
 
size
,

306 
xsk_rög_¥od
 *
fûl
,

307 
xsk_rög_c⁄s
 *
comp
,

308 c⁄° 
xsk_umem_c⁄fig
 *
c⁄fig
);

309 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

310 
xsk_sockë__¸óã
(
xsk_sockë
 **
xsk
,

311 c⁄° *
i‚ame
, 
__u32
 
queue_id
,

312 
xsk_umem
 *
umem
,

313 
xsk_rög_c⁄s
 *
rx
,

314 
xsk_rög_¥od
 *
tx
,

315 c⁄° 
xsk_sockë_c⁄fig
 *
c⁄fig
);

316 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

317 
xsk_sockë__¸óã_sh¨ed
(
xsk_sockë
 **
xsk_±r
,

318 c⁄° *
i‚ame
,

319 
__u32
 
queue_id
, 
xsk_umem
 *
umem
,

320 
xsk_rög_c⁄s
 *
rx
,

321 
xsk_rög_¥od
 *
tx
,

322 
xsk_rög_¥od
 *
fûl
,

323 
xsk_rög_c⁄s
 *
comp
,

324 c⁄° 
xsk_sockë_c⁄fig
 *
c⁄fig
);

327 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

328 
xsk_umem__dñëe
(
xsk_umem
 *
umem
);

329 
LIBBPF_API
 
LIBBPF_DEPRECATED_SINCE
(0, 7, "AF_XDP support deprecatedánd movedÅoÜibxdp")

330 
xsk_sockë__dñëe
(
xsk_sockë
 *
xsk
);

332 #ifde‡
__˝lu•lus


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW


78 
	`__©åibuã_dïªˇãd_msg__
 ("Use inet_ntop instead");

83 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (c⁄° *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/asm/byteorder.h

2 #i‚de‡
_ASM_X86_BYTEORDER_H


3 
	#_ASM_X86_BYTEORDER_H


	)

5 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/unistd.h

2 #i‚de‡
_ASM_X86_UNISTD_H


3 
	#_ASM_X86_UNISTD_H


	)

13 
	#__X32_SYSCALL_BIT
 0x40000000

	)

15 #ifde‡
__i386__


16 
	~<asm/uni°d_32.h
>

17 #ñi‡
deföed
(
__ILP32__
)

18 
	~<asm/uni°d_x32.h
>

20 
	~<asm/uni°d_64.h
>

	@/usr/include/bpf/bpf_core_read.h

2 #i‚de‡
__BPF_CORE_READ_H__


3 
	#__BPF_CORE_READ_H__


	)

13 
	ebpf_fõld_öfo_köd
 {

14 
	mBPF_FIELD_BYTE_OFFSET
 = 0,

15 
	mBPF_FIELD_BYTE_SIZE
 = 1,

16 
	mBPF_FIELD_EXISTS
 = 2,

17 
	mBPF_FIELD_SIGNED
 = 3,

18 
	mBPF_FIELD_LSHIFT_U64
 = 4,

19 
	mBPF_FIELD_RSHIFT_U64
 = 5,

23 
	ebpf_ty≥_id_köd
 {

24 
	mBPF_TYPE_ID_LOCAL
 = 0,

25 
	mBPF_TYPE_ID_TARGET
 = 1,

29 
	ebpf_ty≥_öfo_köd
 {

30 
	mBPF_TYPE_EXISTS
 = 0,

31 
	mBPF_TYPE_SIZE
 = 1,

35 
	ebpf_íum_vÆue_köd
 {

36 
	mBPF_ENUMVAL_EXISTS
 = 0,

37 
	mBPF_ENUMVAL_VALUE
 = 1,

40 
	#__CORE_RELO
(
§c
, 
fõld
, 
öfo
) \

41 
	`__buûtö_¥e£rve_fõld_öfo
((
§c
)->
fõld
, 
BPF_FIELD_
##
öfo
)

	)

43 #i‡
__BYTE_ORDER__
 =
__ORDER_LITTLE_ENDIAN__


44 
	#__CORE_BITFIELD_PROBE_READ
(
d°
, 
§c
, 
Êd
) \

45 
	`bpf_¥obe_ªad_kî√l
( \

46 (*)
d°
, \

47 
	`__CORE_RELO
(
§c
, 
Êd
, 
BYTE_SIZE
), \

48 (c⁄° *)
§c
 + 
	`__CORE_RELO
(§c, 
Êd
, 
BYTE_OFFSET
))

	)

54 
	#__CORE_BITFIELD_PROBE_READ
(
d°
, 
§c
, 
Êd
) \

55 
	`bpf_¥obe_ªad_kî√l
( \

56 (*)
d°
 + (8 - 
	`__CORE_RELO
(
§c
, 
Êd
, 
BYTE_SIZE
)), \

57 
	`__CORE_RELO
(
§c
, 
Êd
, 
BYTE_SIZE
), \

58 (c⁄° *)
§c
 + 
	`__CORE_RELO
(§c, 
Êd
, 
BYTE_OFFSET
))

	)

69 
	#BPF_CORE_READ_BITFIELD_PROBED
(
s
, 
fõld
) ({ \

70 
vÆ
 = 0; \

72 
	`__CORE_BITFIELD_PROBE_READ
(&
vÆ
, 
s
, 
fõld
); \

73 
vÆ
 <<
	`__CORE_RELO
(
s
, 
fõld
, 
LSHIFT_U64
); \

74 i‡(
	`__CORE_RELO
(
s
, 
fõld
, 
SIGNED
)) \

75 
vÆ
 = (()vÆË>> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

77 
vÆ
 = vÆ >> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

78 
vÆ
; \

79 })

	)

87 
	#BPF_CORE_READ_BITFIELD
(
s
, 
fõld
) ({ \

88 c⁄° *
p
 = (c⁄° *)
s
 + 
	`__CORE_RELO
(s, 
fõld
, 
BYTE_OFFSET
); \

89 
vÆ
; \

97 
asm
 vﬁ©ûe("" : "Ù"(
p
) : "0"(p)); \

99 
	`__CORE_RELO
(
s
, 
fõld
, 
BYTE_SIZE
)) { \

100 1: 
vÆ
 = *(c⁄° *)
p
; ; \

101 2: 
vÆ
 = *(c⁄° *)
p
; ; \

102 4: 
vÆ
 = *(c⁄° *)
p
; ; \

103 8: 
vÆ
 = *(c⁄° *)
p
; ; \

105 
vÆ
 <<
	`__CORE_RELO
(
s
, 
fõld
, 
LSHIFT_U64
); \

106 i‡(
	`__CORE_RELO
(
s
, 
fõld
, 
SIGNED
)) \

107 
vÆ
 = (()vÆË>> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

109 
vÆ
 = vÆ >> 
	`__CORE_RELO
(
s
, 
fõld
, 
RSHIFT_U64
); \

110 
vÆ
; \

111 })

	)

113 
	#___bpf_fõld_ªf1
(
fõld
Ë(fõld)

	)

114 
	#___bpf_fõld_ªf2
(
ty≥
, 
fõld
Ë(((
	`ty≥of
—y≥Ë*)0)->fõld)

	)

115 
	#___bpf_fõld_ªf
(
¨gs
...) \

116 
	`___bpf_≠∂y
(
___bpf_fõld_ªf
, 
	`___bpf_«rg
(
¨gs
))◊rgs)

	)

130 
	#bpf_c‹e_fõld_exi°s
(
fõld
...) \

131 
	`__buûtö_¥e£rve_fõld_öfo
(
	`___bpf_fõld_ªf
(
fõld
), 
BPF_FIELD_EXISTS
)

	)

143 
	#bpf_c‹e_fõld_size
(
fõld
...) \

144 
	`__buûtö_¥e£rve_fõld_öfo
(
	`___bpf_fõld_ªf
(
fõld
), 
BPF_FIELD_BYTE_SIZE
)

	)

155 
	#bpf_c‹e_fõld_off£t
(
fõld
...) \

156 
	`__buûtö_¥e£rve_fõld_öfo
(
	`___bpf_fõld_ªf
(
fõld
), 
BPF_FIELD_BYTE_OFFSET
)

	)

163 
	#bpf_c‹e_ty≥_id_loˇl
(
ty≥
) \

164 
	`__buûtö_btf_ty≥_id
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_ID_LOCAL
)

	)

173 
	#bpf_c‹e_ty≥_id_kî√l
(
ty≥
) \

174 
	`__buûtö_btf_ty≥_id
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_ID_TARGET
)

	)

183 
	#bpf_c‹e_ty≥_exi°s
(
ty≥
) \

184 
	`__buûtö_¥e£rve_ty≥_öfo
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_EXISTS
)

	)

193 
	#bpf_c‹e_ty≥_size
(
ty≥
) \

194 
	`__buûtö_¥e£rve_ty≥_öfo
(*(
	`ty≥of
(
ty≥
Ë*)0, 
BPF_TYPE_SIZE
)

	)

204 
	#bpf_c‹e_íum_vÆue_exi°s
(
íum_ty≥
, 
íum_vÆue
) \

205 
	`__buûtö_¥e£rve_íum_vÆue
(*(
	`ty≥of
(
íum_ty≥
Ë*)
íum_vÆue
, 
BPF_ENUMVAL_EXISTS
)

	)

215 
	#bpf_c‹e_íum_vÆue
(
íum_ty≥
, 
íum_vÆue
) \

216 
	`__buûtö_¥e£rve_íum_vÆue
(*(
	`ty≥of
(
íum_ty≥
Ë*)
íum_vÆue
, 
BPF_ENUMVAL_VALUE
)

	)

234 
	#bpf_c‹e_ªad
(
d°
, 
sz
, 
§c
) \

235 
	`bpf_¥obe_ªad_kî√l
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

238 
	#bpf_c‹e_ªad_u£r
(
d°
, 
sz
, 
§c
) \

239 
	`bpf_¥obe_ªad_u£r
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

245 
	#bpf_c‹e_ªad_°r
(
d°
, 
sz
, 
§c
) \

246 
	`bpf_¥obe_ªad_kî√l_°r
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

249 
	#bpf_c‹e_ªad_u£r_°r
(
d°
, 
sz
, 
§c
) \

250 
	`bpf_¥obe_ªad_u£r_°r
(
d°
, 
sz
, (c⁄° *)
	`__buûtö_¥e£rve_ac˚ss_ödex
(
§c
))

	)

252 
	#___c⁄ˇt
(
a
, 
b
Ë®## 
	)
b

253 
	#___≠∂y
(
‚
, 
n
Ë
	`___c⁄ˇt
(‚,Ç)

	)

254 
	#___¡h
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_10
, 
__11
, 
N
, ...Ë
	)
N

260 
	#___«rg
(...Ë
	`___¡h
(
_
, ##
__VA_ARGS__
, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

	)

266 
	#___em±y
(...Ë
	`___¡h
(
_
, ##
__VA_ARGS__
, 
N
, N, N, N, N, N, N, N, N, N, 0)

	)

268 
	#___œ°1
(
x
Ë
	)
x

269 
	#___œ°2
(
a
, 
x
Ë
	)
x

270 
	#___œ°3
(
a
, 
b
, 
x
Ë
	)
x

271 
	#___œ°4
(
a
, 
b
, 
c
, 
x
Ë
	)
x

272 
	#___œ°5
(
a
, 
b
, 
c
, 
d
, 
x
Ë
	)
x

273 
	#___œ°6
(
a
, 
b
, 
c
, 
d
, 
e
, 
x
Ë
	)
x

274 
	#___œ°7
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
x
Ë
	)
x

275 
	#___œ°8
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
x
Ë
	)
x

276 
	#___œ°9
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
x
Ë
	)
x

277 
	#___œ°10
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
x
Ë
	)
x

278 
	#___œ°
(...Ë
	`___≠∂y
(
___œ°
, 
	`___«rg
(
__VA_ARGS__
))(__VA_ARGS__)

	)

280 
	#___nﬁa°2
(
a
, 
_
Ë
	)
a

281 
	#___nﬁa°3
(
a
, 
b
, 
_
Ëa, 
	)
b

282 
	#___nﬁa°4
(
a
, 
b
, 
c
, 
_
Ëa, b, 
	)
c

283 
	#___nﬁa°5
(
a
, 
b
, 
c
, 
d
, 
_
Ëa, b, c, 
	)
d

284 
	#___nﬁa°6
(
a
, 
b
, 
c
, 
d
, 
e
, 
_
Ëa, b, c, d, 
	)
e

285 
	#___nﬁa°7
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
_
Ëa, b, c, d,É, 
	)
f

286 
	#___nﬁa°8
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
_
Ëa, b, c, d,É, f, 
	)
g

287 
	#___nﬁa°9
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
_
Ëa, b, c, d,É, f, g, 
	)
h

288 
	#___nﬁa°10
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
_
Ëa, b, c, d,É, f, g, h, 
	)
i

289 
	#___nﬁa°
(...Ë
	`___≠∂y
(
___nﬁa°
, 
	`___«rg
(
__VA_ARGS__
))(__VA_ARGS__)

	)

291 
	#___¨row1
(
a
Ë
	)
a

292 
	#___¨row2
(
a
, 
b
Ëa->
	)
b

293 
	#___¨row3
(
a
, 
b
, 
c
Ëa->b->
	)
c

294 
	#___¨row4
(
a
, 
b
, 
c
, 
d
Ëa->b->c->
	)
d

295 
	#___¨row5
(
a
, 
b
, 
c
, 
d
, 
e
Ëa->b->c->d->
	)
e

296 
	#___¨row6
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
Ëa->b->c->d->e->
	)
f

297 
	#___¨row7
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
Ëa->b->c->d->e->f->
	)
g

298 
	#___¨row8
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
Ëa->b->c->d->e->f->g->
	)
h

299 
	#___¨row9
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
Ëa->b->c->d->e->f->g->h->
	)
i

300 
	#___¨row10
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
Ëa->b->c->d->e->f->g->h->i->
	)
j

301 
	#___¨row
(...Ë
	`___≠∂y
(
___¨row
, 
	`___«rg
(
__VA_ARGS__
))(__VA_ARGS__)

	)

303 
	#___ty≥
(...Ë
	`ty≥of
(
	`___¨row
(
__VA_ARGS__
))

	)

305 
	#___ªad
(
ªad_‚
, 
d°
, 
§c_ty≥
, 
§c
, 
ac˚ss‹
) \

306 
	`ªad_‚
((*)(
d°
), (*(d°)), &((
§c_ty≥
)(
§c
))->
ac˚ss‹
)

	)

309 
	#___rd_fú°
(
‚
, 
§c
, 
a
Ë
	`___ªad
(‚, &
__t
, 
	`___ty≥
(§c), src,á);

	)

310 
	#___rd_œ°
(
‚
, ...) \

311 
	`___ªad
(
‚
, &
__t
, 
	`___ty≥
(
	`___nﬁa°
(
__VA_ARGS__
)), __t, 
	`___œ°
(__VA_ARGS__));

	)

312 
	#___rd_p1
(
‚
, ...Ëc⁄° *
__t
; 
	`___rd_fú°
(‚, 
__VA_ARGS__
)

	)

313 
	#___rd_p2
(
‚
, ...Ë
	`___rd_p1
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

314 
	#___rd_p3
(
‚
, ...Ë
	`___rd_p2
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

315 
	#___rd_p4
(
‚
, ...Ë
	`___rd_p3
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

316 
	#___rd_p5
(
‚
, ...Ë
	`___rd_p4
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

317 
	#___rd_p6
(
‚
, ...Ë
	`___rd_p5
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

318 
	#___rd_p7
(
‚
, ...Ë
	`___rd_p6
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

319 
	#___rd_p8
(
‚
, ...Ë
	`___rd_p7
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

320 
	#___rd_p9
(
‚
, ...Ë
	`___rd_p8
(‚, 
	`___nﬁa°
(
__VA_ARGS__
)Ë
	`___rd_œ°
(‚, __VA_ARGS__)

	)

321 
	#___ªad_±rs
(
‚
, 
§c
, ...) \

322 
	`___≠∂y
(
___rd_p
, 
	`___«rg
(
__VA_ARGS__
))(
‚
, 
§c
, __VA_ARGS__)

	)

324 
	#___c‹e_ªad0
(
‚
, 
‚_±r
, 
d°
, 
§c
, 
a
) \

325 
	`___ªad
(
‚
, 
d°
, 
	`___ty≥
(
§c
), src, 
a
);

	)

326 
	#___c‹e_ªadN
(
‚
, 
‚_±r
, 
d°
, 
§c
, ...) \

327 
	`___ªad_±rs
(
‚_±r
, 
§c
, 
	`___nﬁa°
(
__VA_ARGS__
)) \

328 
	`___ªad
(
‚
, 
d°
, 
	`___ty≥
(
§c
, 
	`___nﬁa°
(
__VA_ARGS__
)), 
__t
, \

329 
	`___œ°
(
__VA_ARGS__
));

	)

330 
	#___c‹e_ªad
(
‚
, 
‚_±r
, 
d°
, 
§c
, 
a
, ...) \

331 
	`___≠∂y
(
___c‹e_ªad
, 
	`___em±y
(
__VA_ARGS__
))(
‚
, 
‚_±r
, 
d°
, \

332 
§c
, 
a
, ##
__VA_ARGS__
)

	)

339 
	#BPF_CORE_READ_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

340 
	`___c‹e_ªad
(
bpf_c‹e_ªad
, bpf_core_read, \

341 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

342 })

	)

349 
	#BPF_CORE_READ_USER_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

350 
	`___c‹e_ªad
(
bpf_c‹e_ªad_u£r
, bpf_core_read_user, \

351 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

352 })

	)

355 
	#BPF_PROBE_READ_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

356 
	`___c‹e_ªad
(
bpf_¥obe_ªad
, bpf_probe_read, \

357 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

358 })

	)

365 
	#BPF_PROBE_READ_USER_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

366 
	`___c‹e_ªad
(
bpf_¥obe_ªad_u£r
, bpf_probe_read_user, \

367 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

368 })

	)

375 
	#BPF_CORE_READ_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

376 
	`___c‹e_ªad
(
bpf_c‹e_ªad_°r
, 
bpf_c‹e_ªad
, \

377 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

378 })

	)

385 
	#BPF_CORE_READ_USER_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

386 
	`___c‹e_ªad
(
bpf_c‹e_ªad_u£r_°r
, 
bpf_c‹e_ªad_u£r
, \

387 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

388 })

	)

391 
	#BPF_PROBE_READ_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

392 
	`___c‹e_ªad
(
bpf_¥obe_ªad_°r
, 
bpf_¥obe_ªad
, \

393 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

394 })

	)

402 
	#BPF_PROBE_READ_USER_STR_INTO
(
d°
, 
§c
, 
a
, ...) ({ \

403 
	`___c‹e_ªad
(
bpf_¥obe_ªad_u£r_°r
, 
bpf_¥obe_ªad_u£r
, \

404 
d°
, (
§c
), 
a
, ##
__VA_ARGS__
) \

405 })

	)

431 
	#BPF_CORE_READ
(
§c
, 
a
, ...) ({ \

432 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

433 
	`BPF_CORE_READ_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

434 
__r
; \

435 })

	)

447 
	#BPF_CORE_READ_USER
(
§c
, 
a
, ...) ({ \

448 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

449 
	`BPF_CORE_READ_USER_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

450 
__r
; \

451 })

	)

454 
	#BPF_PROBE_READ
(
§c
, 
a
, ...) ({ \

455 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

456 
	`BPF_PROBE_READ_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

457 
__r
; \

458 })

	)

466 
	#BPF_PROBE_READ_USER
(
§c
, 
a
, ...) ({ \

467 
	`___ty≥
((
§c
), 
a
, ##
__VA_ARGS__
Ë
__r
; \

468 
	`BPF_PROBE_READ_USER_INTO
(&
__r
, (
§c
), 
a
, ##
__VA_ARGS__
); \

469 
__r
; \

470 })

	)

	@/usr/include/bpf/bpf_helpers.h

2 #i‚de‡
__BPF_HELPERS__


3 
	#__BPF_HELPERS__


	)

11 
	~"bpf_hñ≥r_defs.h
"

13 
	#__uöt
(
«me
, 
vÆ
Ë(*«me)[vÆ]

	)

14 
	#__ty≥
(
«me
, 
vÆ
Ë
	`ty≥of
(vÆË*
	)
name

15 
	#__¨øy
(
«me
, 
vÆ
Ë
	`ty≥of
(vÆË*«me[]

	)

25 
	#SEC
(
«me
) \

26 
	`_Pøgma
("GCC diagnosticÖush") \

27 
	`_Pøgma
("GCC diagnostic ignored \"-Wignored-attributes\"") \

28 
	`__©åibuã__
((
	`£˘i⁄
(
«me
), 
u£d
)) \

29 
	`_Pøgma
("GCC diagnosticÖop") \

30 

	)

32 #unde‡
__Æways_ölöe


33 
	#__Æways_ölöe
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

35 #i‚de‡
__noölöe


36 
	#__noölöe
 
	`__©åibuã__
((
noölöe
))

	)

38 #i‚de‡
__wók


39 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

48 
	#__hiddí
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

56 #i‚de‡
NULL


57 
	#NULL
 ((*)0)

	)

60 #i‚de‡
KERNEL_VERSION


61 
	#KERNEL_VERSION
(
a
, 
b
, 
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ ((cË> 255 ? 255 : (c)))

	)

67 #i‚de‡
off£tof


68 
	#off£tof
(
TYPE
, 
MEMBER
Ë(()&((TYPE *)0)->MEMBER)

	)

70 #i‚de‡
c⁄èöî_of


71 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

73 *
__m±r
 = (*)(
±r
); \

74 ((
ty≥
 *)(
__m±r
 - 
	`off£tof
—y≥, 
membî
))); \

75 })

	)

81 #i‚de‡
b¨rõr


82 
	#b¨rõr
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

98 #i‚de‡
b¨rõr_v¨


99 
	#b¨rõr_v¨
(
v¨
Ë
asm
 vﬁ©ûe("" : "Ù"(v¨Ë: "0"(v¨))

	)

114 #i‚de‡
__bpf_uƒóchabÀ


115 
	#__bpf_uƒóchabÀ
(Ë
	`__buûtö_å≠
()

	)

121 #i‡
__˛™g_maj‹__
 >8 && 
deföed
(
__bpf__
)

122 
__Æways_ölöe
 

123 
	$bpf_èû_ˇŒ_°©ic
(*
˘x
, c⁄° *
m≠
, c⁄° 
__u32
 
¶Ÿ
)

125 i‡(!
	`__buûtö_c⁄°™t_p
(
¶Ÿ
))

126 
	`__bpf_uƒóchabÀ
();

141 
asm
 volatile("r1 = %[ctx]\n\t"

145 :: [
˘x
]"r"(˘x), [
m≠
]"r"(m≠), [
¶Ÿ
]"i"(slot)

147 
	}
}

154 
	sbpf_m≠_def
 {

155 
	mty≥
;

156 
	mkey_size
;

157 
	mvÆue_size
;

158 
	mmax_íåõs
;

159 
	mm≠_Êags
;

160 } 
__©åibuã__
((
dïªˇãd
("use BTF-defined maps in .maps section")));

162 
	elibbpf_pö_ty≥
 {

163 
	mLIBBPF_PIN_NONE
,

165 
	mLIBBPF_PIN_BY_NAME
,

168 
	elibbpf_åi°©e
 {

169 
	mTRI_NO
 = 0,

170 
	mTRI_YES
 = 1,

171 
	mTRI_MODULE
 = 2,

174 
	#__kc⁄fig
 
	`__©åibuã__
((
	`£˘i⁄
(".kc⁄fig")))

	)

175 
	#__ksym
 
	`__©åibuã__
((
	`£˘i⁄
(".ksyms")))

	)

176 
	#__k±r
 
	`__©åibuã__
((
	`btf_ty≥_èg
("k±r")))

	)

177 
	#__k±r_ªf
 
	`__©åibuã__
((
	`btf_ty≥_èg
("k±r_ªf")))

	)

179 #i‚de‡
___bpf_c⁄ˇt


180 
	#___bpf_c⁄ˇt
(
a
, 
b
Ë®## 
	)
b

182 #i‚de‡
___bpf_≠∂y


183 
	#___bpf_≠∂y
(
‚
, 
n
Ë
	`___bpf_c⁄ˇt
(‚,Ç)

	)

185 #i‚de‡
___bpf_¡h


186 
	#___bpf_¡h
(
_
, 
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_a
, 
_b
, 
_c
, 
N
, ...Ë
	)
N

188 #i‚de‡
___bpf_«rg


189 
	#___bpf_«rg
(...) \

190 
	`___bpf_¡h
(
_
, ##
__VA_ARGS__
, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

	)

193 
	#___bpf_fûl0
(
¨r
, 
p
, 
x
Ëdÿ{} 0)

	)

194 
	#___bpf_fûl1
(
¨r
, 
p
, 
x
Ë¨r[p] = 
	)
x

195 
	#___bpf_fûl2
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl1
◊º,Ö + 1,árgs)

	)

196 
	#___bpf_fûl3
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl2
◊º,Ö + 1,árgs)

	)

197 
	#___bpf_fûl4
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl3
◊º,Ö + 1,árgs)

	)

198 
	#___bpf_fûl5
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl4
◊º,Ö + 1,árgs)

	)

199 
	#___bpf_fûl6
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl5
◊º,Ö + 1,árgs)

	)

200 
	#___bpf_fûl7
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl6
◊º,Ö + 1,árgs)

	)

201 
	#___bpf_fûl8
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl7
◊º,Ö + 1,árgs)

	)

202 
	#___bpf_fûl9
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl8
◊º,Ö + 1,árgs)

	)

203 
	#___bpf_fûl10
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl9
◊º,Ö + 1,árgs)

	)

204 
	#___bpf_fûl11
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl10
◊º,Ö + 1,árgs)

	)

205 
	#___bpf_fûl12
(
¨r
, 
p
, 
x
, 
¨gs
...Ë¨r[p] = x; 
	`___bpf_fûl11
◊º,Ö + 1,árgs)

	)

206 
	#___bpf_fûl
(
¨r
, 
¨gs
...) \

207 
	`___bpf_≠∂y
(
___bpf_fûl
, 
	`___bpf_«rg
(
¨gs
))(
¨r
, 0,árgs)

	)

213 
	#BPF_SEQ_PRINTF
(
£q
, 
fmt
, 
¨gs
...) \

215 c⁄° 
___fmt
[] = 
fmt
; \

216 
___∑øm
[
	`___bpf_«rg
(
¨gs
)]; \

218 
	`_Pøgma
("GCC diagnosticÖush") \

219 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

220 
	`___bpf_fûl
(
___∑øm
, 
¨gs
); \

221 
	`_Pøgma
("GCC diagnosticÖop") \

223 
	`bpf_£q_¥ötf
(
£q
, 
___fmt
, (___fmt), \

224 
___∑øm
, (___param)); \

225 })

	)

231 
	#BPF_SNPRINTF
(
out
, 
out_size
, 
fmt
, 
¨gs
...) \

233 c⁄° 
___fmt
[] = 
fmt
; \

234 
___∑øm
[
	`___bpf_«rg
(
¨gs
)]; \

236 
	`_Pøgma
("GCC diagnosticÖush") \

237 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

238 
	`___bpf_fûl
(
___∑øm
, 
¨gs
); \

239 
	`_Pøgma
("GCC diagnosticÖop") \

241 
	`bpf_¢¥ötf
(
out
, 
out_size
, 
___fmt
, \

242 
___∑øm
, (___param)); \

243 })

	)

245 #ifde‡
BPF_NO_GLOBAL_DATA


246 
	#BPF_PRINTK_FMT_MOD


	)

248 
	#BPF_PRINTK_FMT_MOD
 c⁄°

	)

251 
	#__bpf_¥ötk
(
fmt
, ...) \

253 
BPF_PRINTK_FMT_MOD
 
____fmt
[] = 
fmt
; \

254 
	`bpf_åa˚_¥ötk
(
____fmt
, (____fmt), \

255 ##
__VA_ARGS__
); \

256 })

	)

262 
	#__bpf_v¥ötk
(
fmt
, 
¨gs
...) \

264 c⁄° 
___fmt
[] = 
fmt
; \

265 
___∑øm
[
	`___bpf_«rg
(
¨gs
)]; \

267 
	`_Pøgma
("GCC diagnosticÖush") \

268 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

269 
	`___bpf_fûl
(
___∑øm
, 
¨gs
); \

270 
	`_Pøgma
("GCC diagnosticÖop") \

272 
	`bpf_åa˚_v¥ötk
(
___fmt
, (___fmt), \

273 
___∑øm
, (___param)); \

274 })

	)

279 
	#___bpf_pick_¥ötk
(...) \

280 
	`___bpf_¡h
(
_
, ##
__VA_ARGS__
, 
__bpf_v¥ötk
, __bpf_vprintk, __bpf_vprintk, \

281 
__bpf_v¥ötk
, __bpf_vprintk, __bpf_vprintk, __bpf_vprintk, \

282 
__bpf_v¥ötk
, __bpf_v¥ötk, 
__bpf_¥ötk
 , __bpf_printk ,\

283 
__bpf_¥ötk
 , __bpf_¥ötk )

	)

286 
	#bpf_¥ötk
(
fmt
, 
¨gs
...Ë
	`___bpf_pick_¥ötk
◊rgs)(fmt, ##¨gs)

	)

	@/usr/include/bpf/bpf_tracing.h

2 #i‚de‡
__BPF_TRACING_H__


3 
	#__BPF_TRACING_H__


	)

6 #i‡
deföed
(
__TARGET_ARCH_x86
)

7 
	#bpf_èrgë_x86


	)

8 
	#bpf_èrgë_deföed


	)

9 #ñi‡
deföed
(
__TARGET_ARCH_s390
)

10 
	#bpf_èrgë_s390


	)

11 
	#bpf_èrgë_deföed


	)

12 #ñi‡
deföed
(
__TARGET_ARCH_¨m
)

13 
	#bpf_èrgë_¨m


	)

14 
	#bpf_èrgë_deföed


	)

15 #ñi‡
deföed
(
__TARGET_ARCH_¨m64
)

16 
	#bpf_èrgë_¨m64


	)

17 
	#bpf_èrgë_deföed


	)

18 #ñi‡
deföed
(
__TARGET_ARCH_mùs
)

19 
	#bpf_èrgë_mùs


	)

20 
	#bpf_èrgë_deföed


	)

21 #ñi‡
deföed
(
__TARGET_ARCH_powîpc
)

22 
	#bpf_èrgë_powîpc


	)

23 
	#bpf_èrgë_deföed


	)

24 #ñi‡
deföed
(
__TARGET_ARCH_•¨c
)

25 
	#bpf_èrgë_•¨c


	)

26 
	#bpf_èrgë_deföed


	)

27 #ñi‡
deföed
(
__TARGET_ARCH_riscv
)

28 
	#bpf_èrgë_riscv


	)

29 
	#bpf_èrgë_deföed


	)

30 #ñi‡
deföed
(
__TARGET_ARCH_¨c
)

31 
	#bpf_èrgë_¨c


	)

32 
	#bpf_èrgë_deföed


	)

36 #i‡
deföed
(
__x86_64__
)

37 
	#bpf_èrgë_x86


	)

38 
	#bpf_èrgë_deföed


	)

39 #ñi‡
deföed
(
__s390__
)

40 
	#bpf_èrgë_s390


	)

41 
	#bpf_èrgë_deföed


	)

42 #ñi‡
deföed
(
__¨m__
)

43 
	#bpf_èrgë_¨m


	)

44 
	#bpf_èrgë_deföed


	)

45 #ñi‡
deföed
(
__Ørch64__
)

46 
	#bpf_èrgë_¨m64


	)

47 
	#bpf_èrgë_deföed


	)

48 #ñi‡
deföed
(
__mùs__
)

49 
	#bpf_èrgë_mùs


	)

50 
	#bpf_èrgë_deföed


	)

51 #ñi‡
deföed
(
__powîpc__
)

52 
	#bpf_èrgë_powîpc


	)

53 
	#bpf_èrgë_deföed


	)

54 #ñi‡
deföed
(
__•¨c__
)

55 
	#bpf_èrgë_•¨c


	)

56 
	#bpf_èrgë_deföed


	)

57 #ñi‡
deföed
(
__riscv
Ë&& 
__riscv_xÀn
 == 64

58 
	#bpf_èrgë_riscv


	)

59 
	#bpf_èrgë_deföed


	)

60 #ñi‡
deföed
(
__¨c__
)

61 
	#bpf_èrgë_¨c


	)

62 
	#bpf_èrgë_deföed


	)

67 #i‚de‡
__BPF_TARGET_MISSING


68 
	#__BPF_TARGET_MISSING
 "GCCÉº‹ \"Mu° s≥cifyá BPFÅ¨gëárch vü __TARGET_ARCH_xxx\""

	)

71 #i‡
deföed
(
bpf_èrgë_x86
)

73 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__VMLINUX_H__
)

75 
	#__PT_PARM1_REG
 
di


	)

76 
	#__PT_PARM2_REG
 
si


	)

77 
	#__PT_PARM3_REG
 
dx


	)

78 
	#__PT_PARM4_REG
 
cx


	)

79 
	#__PT_PARM5_REG
 
r8


	)

80 
	#__PT_RET_REG
 
•


	)

81 
	#__PT_FP_REG
 
bp


	)

82 
	#__PT_RC_REG
 
ax


	)

83 
	#__PT_SP_REG
 
•


	)

84 
	#__PT_IP_REG
 
ù


	)

86 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë((x)->
r10
)

	)

87 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
(x, 
r10
)

	)

91 #ifde‡
__i386__


93 
	#__PT_PARM1_REG
 
óx


	)

94 
	#__PT_PARM2_REG
 
edx


	)

95 
	#__PT_PARM3_REG
 
ecx


	)

97 
	#__PT_PARM4_REG
 
__unsuµ‹ãd__


	)

98 
	#__PT_PARM5_REG
 
__unsuµ‹ãd__


	)

99 
	#__PT_RET_REG
 
e•


	)

100 
	#__PT_FP_REG
 
ebp


	)

101 
	#__PT_RC_REG
 
óx


	)

102 
	#__PT_SP_REG
 
e•


	)

103 
	#__PT_IP_REG
 
eù


	)

107 
	#__PT_PARM1_REG
 
rdi


	)

108 
	#__PT_PARM2_REG
 
rsi


	)

109 
	#__PT_PARM3_REG
 
rdx


	)

110 
	#__PT_PARM4_REG
 
rcx


	)

111 
	#__PT_PARM5_REG
 
r8


	)

112 
	#__PT_RET_REG
 
r•


	)

113 
	#__PT_FP_REG
 
rbp


	)

114 
	#__PT_RC_REG
 
øx


	)

115 
	#__PT_SP_REG
 
r•


	)

116 
	#__PT_IP_REG
 
rù


	)

118 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë((x)->
r10
)

	)

119 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
(x, 
r10
)

	)

125 #ñi‡
deföed
(
bpf_èrgë_s390
)

127 
	s±_ªgs___s390
 {

128 
	m‹ig_g¥2
;

132 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_±_ªgs
 *)(x))

	)

133 
	#__PT_PARM1_REG
 
g¥s
[2]

	)

134 
	#__PT_PARM2_REG
 
g¥s
[3]

	)

135 
	#__PT_PARM3_REG
 
g¥s
[4]

	)

136 
	#__PT_PARM4_REG
 
g¥s
[5]

	)

137 
	#__PT_PARM5_REG
 
g¥s
[6]

	)

138 
	#__PT_RET_REG
 
gΩs
[14]

	)

139 
	#__PT_FP_REG
 
g¥s
[11]

	)

140 
	#__PT_RC_REG
 
g¥s
[2]

	)

141 
	#__PT_SP_REG
 
g¥s
[15]

	)

142 
	#__PT_IP_REG
 
psw
.
addr


	)

143 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë({ 
	`_Pøgma
("GCCÉº‹ \"u£ PT_REGS_PARM1_CORE_SYSCALL(Ëö°ód\""); 0l; })

	)

144 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
((c⁄° 
±_ªgs___s390
 *)(x), 
‹ig_g¥2
)

	)

146 #ñi‡
deföed
(
bpf_èrgë_¨m
)

148 
	#__PT_PARM1_REG
 
uªgs
[0]

	)

149 
	#__PT_PARM2_REG
 
uªgs
[1]

	)

150 
	#__PT_PARM3_REG
 
uªgs
[2]

	)

151 
	#__PT_PARM4_REG
 
uªgs
[3]

	)

152 
	#__PT_PARM5_REG
 
uªgs
[4]

	)

153 
	#__PT_RET_REG
 
uªgs
[14]

	)

154 
	#__PT_FP_REG
 
uªgs
[11]

	)

155 
	#__PT_RC_REG
 
uªgs
[0]

	)

156 
	#__PT_SP_REG
 
uªgs
[13]

	)

157 
	#__PT_IP_REG
 
uªgs
[12]

	)

159 #ñi‡
deföed
(
bpf_èrgë_¨m64
)

161 
	s±_ªgs___¨m64
 {

162 
	m‹ig_x0
;

166 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_±_ªgs
 *)(x))

	)

167 
	#__PT_PARM1_REG
 
ªgs
[0]

	)

168 
	#__PT_PARM2_REG
 
ªgs
[1]

	)

169 
	#__PT_PARM3_REG
 
ªgs
[2]

	)

170 
	#__PT_PARM4_REG
 
ªgs
[3]

	)

171 
	#__PT_PARM5_REG
 
ªgs
[4]

	)

172 
	#__PT_RET_REG
 
ªgs
[30]

	)

173 
	#__PT_FP_REG
 
ªgs
[29]

	)

174 
	#__PT_RC_REG
 
ªgs
[0]

	)

175 
	#__PT_SP_REG
 
•


	)

176 
	#__PT_IP_REG
 
pc


	)

177 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë({ 
	`_Pøgma
("GCCÉº‹ \"u£ PT_REGS_PARM1_CORE_SYSCALL(Ëö°ód\""); 0l; })

	)

178 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë
	`BPF_CORE_READ
((c⁄° 
±_ªgs___¨m64
 *)(x), 
‹ig_x0
)

	)

180 #ñi‡
deföed
(
bpf_èrgë_mùs
)

182 
	#__PT_PARM1_REG
 
ªgs
[4]

	)

183 
	#__PT_PARM2_REG
 
ªgs
[5]

	)

184 
	#__PT_PARM3_REG
 
ªgs
[6]

	)

185 
	#__PT_PARM4_REG
 
ªgs
[7]

	)

186 
	#__PT_PARM5_REG
 
ªgs
[8]

	)

187 
	#__PT_RET_REG
 
ªgs
[31]

	)

188 
	#__PT_FP_REG
 
ªgs
[30]

	)

189 
	#__PT_RC_REG
 
ªgs
[2]

	)

190 
	#__PT_SP_REG
 
ªgs
[29]

	)

191 
	#__PT_IP_REG
 
˝0_ïc


	)

193 #ñi‡
deföed
(
bpf_èrgë_powîpc
)

195 
	#__PT_PARM1_REG
 
g¥
[3]

	)

196 
	#__PT_PARM2_REG
 
g¥
[4]

	)

197 
	#__PT_PARM3_REG
 
g¥
[5]

	)

198 
	#__PT_PARM4_REG
 
g¥
[6]

	)

199 
	#__PT_PARM5_REG
 
g¥
[7]

	)

200 
	#__PT_RET_REG
 
ªgs
[31]

	)

201 
	#__PT_FP_REG
 
__unsuµ‹ãd__


	)

202 
	#__PT_RC_REG
 
g¥
[3]

	)

203 
	#__PT_SP_REG
 
•


	)

204 
	#__PT_IP_REG
 
nù


	)

206 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë
	)
ctx

208 #ñi‡
deföed
(
bpf_èrgë_•¨c
)

210 
	#__PT_PARM1_REG
 
u_ªgs
[
UREG_I0
]

	)

211 
	#__PT_PARM2_REG
 
u_ªgs
[
UREG_I1
]

	)

212 
	#__PT_PARM3_REG
 
u_ªgs
[
UREG_I2
]

	)

213 
	#__PT_PARM4_REG
 
u_ªgs
[
UREG_I3
]

	)

214 
	#__PT_PARM5_REG
 
u_ªgs
[
UREG_I4
]

	)

215 
	#__PT_RET_REG
 
u_ªgs
[
UREG_I7
]

	)

216 
	#__PT_FP_REG
 
__unsuµ‹ãd__


	)

217 
	#__PT_RC_REG
 
u_ªgs
[
UREG_I0
]

	)

218 
	#__PT_SP_REG
 
u_ªgs
[
UREG_FP
]

	)

220 #i‡
deföed
(
__¨ch64__
)

221 
	#__PT_IP_REG
 
çc


	)

223 
	#__PT_IP_REG
 
pc


	)

226 #ñi‡
deföed
(
bpf_èrgë_riscv
)

228 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_ªgs_°ru˘
 *)(x))

	)

229 
	#__PT_PARM1_REG
 
a0


	)

230 
	#__PT_PARM2_REG
 
a1


	)

231 
	#__PT_PARM3_REG
 
a2


	)

232 
	#__PT_PARM4_REG
 
a3


	)

233 
	#__PT_PARM5_REG
 
a4


	)

234 
	#__PT_RET_REG
 
ø


	)

235 
	#__PT_FP_REG
 
s0


	)

236 
	#__PT_RC_REG
 
a5


	)

237 
	#__PT_SP_REG
 
•


	)

238 
	#__PT_IP_REG
 
pc


	)

240 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë
	)
ctx

242 #ñi‡
deföed
(
bpf_èrgë_¨c
)

245 
	#__PT_REGS_CAST
(
x
Ë((c⁄° 
u£r_ªgs_°ru˘
 *)(x))

	)

246 
	#__PT_PARM1_REG
 
s¸©ch
.
r0


	)

247 
	#__PT_PARM2_REG
 
s¸©ch
.
r1


	)

248 
	#__PT_PARM3_REG
 
s¸©ch
.
r2


	)

249 
	#__PT_PARM4_REG
 
s¸©ch
.
r3


	)

250 
	#__PT_PARM5_REG
 
s¸©ch
.
r4


	)

251 
	#__PT_RET_REG
 
s¸©ch
.
blök


	)

252 
	#__PT_FP_REG
 
__unsuµ‹ãd__


	)

253 
	#__PT_RC_REG
 
s¸©ch
.
r0


	)

254 
	#__PT_SP_REG
 
s¸©ch
.
•


	)

255 
	#__PT_IP_REG
 
s¸©ch
.
ªt


	)

257 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë
	)
ctx

261 #i‡
deföed
(
bpf_èrgë_deföed
)

263 
	g±_ªgs
;

266 #i‚de‡
__PT_REGS_CAST


267 
	#__PT_REGS_CAST
(
x
Ë(x)

	)

270 
	#PT_REGS_PARM1
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM1_REG
)

	)

271 
	#PT_REGS_PARM2
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM2_REG
)

	)

272 
	#PT_REGS_PARM3
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM3_REG
)

	)

273 
	#PT_REGS_PARM4
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM4_REG
)

	)

274 
	#PT_REGS_PARM5
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_PARM5_REG
)

	)

275 
	#PT_REGS_RET
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_RET_REG
)

	)

276 
	#PT_REGS_FP
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_FP_REG
)

	)

277 
	#PT_REGS_RC
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_RC_REG
)

	)

278 
	#PT_REGS_SP
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_SP_REG
)

	)

279 
	#PT_REGS_IP
(
x
Ë(
	`__PT_REGS_CAST
(x)->
__PT_IP_REG
)

	)

281 
	#PT_REGS_PARM1_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM1_REG
)

	)

282 
	#PT_REGS_PARM2_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM2_REG
)

	)

283 
	#PT_REGS_PARM3_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM3_REG
)

	)

284 
	#PT_REGS_PARM4_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM4_REG
)

	)

285 
	#PT_REGS_PARM5_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_PARM5_REG
)

	)

286 
	#PT_REGS_RET_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_RET_REG
)

	)

287 
	#PT_REGS_FP_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_FP_REG
)

	)

288 
	#PT_REGS_RC_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_RC_REG
)

	)

289 
	#PT_REGS_SP_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_SP_REG
)

	)

290 
	#PT_REGS_IP_CORE
(
x
Ë
	`BPF_CORE_READ
(
	`__PT_REGS_CAST
(x), 
__PT_IP_REG
)

	)

292 #i‡
deföed
(
bpf_èrgë_powîpc
)

294 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ (ùË(˘x)->
lök
; })

	)

295 
	#BPF_KRETPROBE_READ_RET_IP
 
BPF_KPROBE_READ_RET_IP


	)

297 #ñi‡
deföed
(
bpf_èrgë_•¨c
)

299 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ (ùË
	`PT_REGS_RET
(˘x); })

	)

300 
	#BPF_KRETPROBE_READ_RET_IP
 
BPF_KPROBE_READ_RET_IP


	)

304 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
) \

305 ({ 
	`bpf_¥obe_ªad_kî√l
(&(
ù
), (ù), (*)
	`PT_REGS_RET
(
˘x
)); })

	)

306 
	#BPF_KRETPROBE_READ_RET_IP
(
ù
, 
˘x
) \

307 ({ 
	`bpf_¥obe_ªad_kî√l
(&(
ù
), (ù), (*)(
	`PT_REGS_FP
(
˘x
Ë+ (ù))); })

	)

311 #i‚de‡
PT_REGS_PARM1_SYSCALL


312 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë
	`PT_REGS_PARM1
(x)

	)

314 
	#PT_REGS_PARM2_SYSCALL
(
x
Ë
	`PT_REGS_PARM2
(x)

	)

315 
	#PT_REGS_PARM3_SYSCALL
(
x
Ë
	`PT_REGS_PARM3
(x)

	)

316 #i‚de‡
PT_REGS_PARM4_SYSCALL


317 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë
	`PT_REGS_PARM4
(x)

	)

319 
	#PT_REGS_PARM5_SYSCALL
(
x
Ë
	`PT_REGS_PARM5
(x)

	)

321 #i‚de‡
PT_REGS_PARM1_CORE_SYSCALL


322 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM1_CORE
(x)

	)

324 
	#PT_REGS_PARM2_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM2_CORE
(x)

	)

325 
	#PT_REGS_PARM3_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM3_CORE
(x)

	)

326 #i‚de‡
PT_REGS_PARM4_CORE_SYSCALL


327 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM4_CORE
(x)

	)

329 
	#PT_REGS_PARM5_CORE_SYSCALL
(
x
Ë
	`PT_REGS_PARM5_CORE
(x)

	)

333 
	#PT_REGS_PARM1
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

334 
	#PT_REGS_PARM2
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

335 
	#PT_REGS_PARM3
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

336 
	#PT_REGS_PARM4
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

337 
	#PT_REGS_PARM5
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

338 
	#PT_REGS_RET
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

339 
	#PT_REGS_FP
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

340 
	#PT_REGS_RC
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

341 
	#PT_REGS_SP
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

342 
	#PT_REGS_IP
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

344 
	#PT_REGS_PARM1_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

345 
	#PT_REGS_PARM2_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

346 
	#PT_REGS_PARM3_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

347 
	#PT_REGS_PARM4_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

348 
	#PT_REGS_PARM5_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

349 
	#PT_REGS_RET_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

350 
	#PT_REGS_FP_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

351 
	#PT_REGS_RC_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

352 
	#PT_REGS_SP_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

353 
	#PT_REGS_IP_CORE
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

355 
	#BPF_KPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

356 
	#BPF_KRETPROBE_READ_RET_IP
(
ù
, 
˘x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

358 
	#PT_REGS_PARM1_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

359 
	#PT_REGS_PARM2_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

360 
	#PT_REGS_PARM3_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

361 
	#PT_REGS_PARM4_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

362 
	#PT_REGS_PARM5_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

364 
	#PT_REGS_PARM1_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

365 
	#PT_REGS_PARM2_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

366 
	#PT_REGS_PARM3_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

367 
	#PT_REGS_PARM4_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

368 
	#PT_REGS_PARM5_CORE_SYSCALL
(
x
Ë({ 
	`_Pøgma
(
__BPF_TARGET_MISSING
); 0l; })

	)

377 #i‚de‡
PT_REGS_SYSCALL_REGS


379 
	#PT_REGS_SYSCALL_REGS
(
˘x
Ë((
±_ªgs
 *)
	`PT_REGS_PARM1
(˘x))

	)

382 #i‚de‡
___bpf_c⁄ˇt


383 
	#___bpf_c⁄ˇt
(
a
, 
b
Ë®## 
	)
b

385 #i‚de‡
___bpf_≠∂y


386 
	#___bpf_≠∂y
(
‚
, 
n
Ë
	`___bpf_c⁄ˇt
(‚,Ç)

	)

388 #i‚de‡
___bpf_¡h


389 
	#___bpf_¡h
(
_
, 
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_a
, 
_b
, 
_c
, 
N
, ...Ë
	)
N

391 #i‚de‡
___bpf_«rg


392 
	#___bpf_«rg
(...Ë
	`___bpf_¡h
(
_
, ##
__VA_ARGS__
, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

	)

395 
	#___bpf_˘x_ˇ°0
(Ë
˘x


	)

396 
	#___bpf_˘x_ˇ°1
(
x
Ë
	`___bpf_˘x_ˇ°0
(), (*)
˘x
[0]

	)

397 
	#___bpf_˘x_ˇ°2
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°1
◊rgs), (*)
˘x
[1]

	)

398 
	#___bpf_˘x_ˇ°3
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°2
◊rgs), (*)
˘x
[2]

	)

399 
	#___bpf_˘x_ˇ°4
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°3
◊rgs), (*)
˘x
[3]

	)

400 
	#___bpf_˘x_ˇ°5
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°4
◊rgs), (*)
˘x
[4]

	)

401 
	#___bpf_˘x_ˇ°6
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°5
◊rgs), (*)
˘x
[5]

	)

402 
	#___bpf_˘x_ˇ°7
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°6
◊rgs), (*)
˘x
[6]

	)

403 
	#___bpf_˘x_ˇ°8
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°7
◊rgs), (*)
˘x
[7]

	)

404 
	#___bpf_˘x_ˇ°9
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°8
◊rgs), (*)
˘x
[8]

	)

405 
	#___bpf_˘x_ˇ°10
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°9
◊rgs), (*)
˘x
[9]

	)

406 
	#___bpf_˘x_ˇ°11
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°10
◊rgs), (*)
˘x
[10]

	)

407 
	#___bpf_˘x_ˇ°12
(
x
, 
¨gs
...Ë
	`___bpf_˘x_ˇ°11
◊rgs), (*)
˘x
[11]

	)

408 
	#___bpf_˘x_ˇ°
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_˘x_ˇ°
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

425 
	#BPF_PROG
(
«me
, 
¨gs
...) \

426 
	`«me
(*
˘x
); \

427 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

428 
____
##
	`«me
(*
˘x
, ##
¨gs
); \

429 
	`ty≥of
(
	`«me
(0)Ë«me(*
˘x
) \

431 
	`_Pøgma
("GCC diagnosticÖush") \

432 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

433  
____
##
	`«me
(
	`___bpf_˘x_ˇ°
(
¨gs
)); \

434 
	`_Pøgma
("GCC diagnosticÖop") \

436 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

437 
____
##
	`«me
(*
˘x
, ##
¨gs
)

	)

439 
	g±_ªgs
;

441 
	#___bpf_k¥obe_¨gs0
(Ë
˘x


	)

442 
	#___bpf_k¥obe_¨gs1
(
x
Ë
	`___bpf_k¥obe_¨gs0
(), (*)
	`PT_REGS_PARM1
(
˘x
)

	)

443 
	#___bpf_k¥obe_¨gs2
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs1
◊rgs), (*)
	`PT_REGS_PARM2
(
˘x
)

	)

444 
	#___bpf_k¥obe_¨gs3
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs2
◊rgs), (*)
	`PT_REGS_PARM3
(
˘x
)

	)

445 
	#___bpf_k¥obe_¨gs4
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs3
◊rgs), (*)
	`PT_REGS_PARM4
(
˘x
)

	)

446 
	#___bpf_k¥obe_¨gs5
(
x
, 
¨gs
...Ë
	`___bpf_k¥obe_¨gs4
◊rgs), (*)
	`PT_REGS_PARM5
(
˘x
)

	)

447 
	#___bpf_k¥obe_¨gs
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_k¥obe_¨gs
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

459 
	#BPF_KPROBE
(
«me
, 
¨gs
...) \

460 
	`«me
(
±_ªgs
 *
˘x
); \

461 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

462 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
); \

463 
	`ty≥of
(
	`«me
(0)Ë«me(
±_ªgs
 *
˘x
) \

465 
	`_Pøgma
("GCC diagnosticÖush") \

466 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

467  
____
##
	`«me
(
	`___bpf_k¥obe_¨gs
(
¨gs
)); \

468 
	`_Pøgma
("GCC diagnosticÖop") \

470 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

471 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
)

	)

473 
	#___bpf_kªçrobe_¨gs0
(Ë
˘x


	)

474 
	#___bpf_kªçrobe_¨gs1
(
x
Ë
	`___bpf_kªçrobe_¨gs0
(), (*)
	`PT_REGS_RC
(
˘x
)

	)

475 
	#___bpf_kªçrobe_¨gs
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_kªçrobe_¨gs
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

483 
	#BPF_KRETPROBE
(
«me
, 
¨gs
...) \

484 
	`«me
(
±_ªgs
 *
˘x
); \

485 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

486 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
); \

487 
	`ty≥of
(
	`«me
(0)Ë«me(
±_ªgs
 *
˘x
) \

489 
	`_Pøgma
("GCC diagnosticÖush") \

490 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

491  
____
##
	`«me
(
	`___bpf_kªçrobe_¨gs
(
¨gs
)); \

492 
	`_Pøgma
("GCC diagnosticÖop") \

494 
__Æways_ölöe
 
	`ty≥of
(
	`«me
(0)Ë
____
##«me(
±_ªgs
 *
˘x
, ##
¨gs
)

	)

496 
	#___bpf_sysˇŒ_¨gs0
(Ë
˘x


	)

497 
	#___bpf_sysˇŒ_¨gs1
(
x
Ë
	`___bpf_sysˇŒ_¨gs0
(), (*)
	`PT_REGS_PARM1_CORE_SYSCALL
(
ªgs
)

	)

498 
	#___bpf_sysˇŒ_¨gs2
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs1
◊rgs), (*)
	`PT_REGS_PARM2_CORE_SYSCALL
(
ªgs
)

	)

499 
	#___bpf_sysˇŒ_¨gs3
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs2
◊rgs), (*)
	`PT_REGS_PARM3_CORE_SYSCALL
(
ªgs
)

	)

500 
	#___bpf_sysˇŒ_¨gs4
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs3
◊rgs), (*)
	`PT_REGS_PARM4_CORE_SYSCALL
(
ªgs
)

	)

501 
	#___bpf_sysˇŒ_¨gs5
(
x
, 
¨gs
...Ë
	`___bpf_sysˇŒ_¨gs4
◊rgs), (*)
	`PT_REGS_PARM5_CORE_SYSCALL
(
ªgs
)

	)

502 
	#___bpf_sysˇŒ_¨gs
(
¨gs
...Ë
	`___bpf_≠∂y
(
___bpf_sysˇŒ_¨gs
, 
	`___bpf_«rg
◊rgs))◊rgs)

	)

516 
	#BPF_KPROBE_SYSCALL
(
«me
, 
¨gs
...) \

517 
	`«me
(
±_ªgs
 *
˘x
); \

518 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

519 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
); \

520 
	`ty≥of
(
	`«me
(0)Ë«me(
±_ªgs
 *
˘x
) \

522 
±_ªgs
 *
ªgs
 = 
	`PT_REGS_SYSCALL_REGS
(
˘x
); \

523 
	`_Pøgma
("GCC diagnosticÖush") \

524 
	`_Pøgma
("GCC diagnostic ignored \"-Wint-conversion\"") \

525  
____
##
	`«me
(
	`___bpf_sysˇŒ_¨gs
(
¨gs
)); \

526 
	`_Pøgma
("GCC diagnosticÖop") \

528 
	`__©åibuã__
((
Æways_ölöe
)Ë
	`ty≥of
(
	`«me
(0)) \

529 
____
##
	`«me
(
±_ªgs
 *
˘x
, ##
¨gs
)

	)

	@/usr/include/byteswap.h

19 #i‚de‡
_BYTESWAP_H


20 
	#_BYTESWAP_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/byãsw≠.h
>

32 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

35 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

38 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<bôs/ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

24 
	~<°döt.h
>

27 
uöt16_t
 
	tElf32_HÆf
;

28 
uöt16_t
 
	tElf64_HÆf
;

31 
uöt32_t
 
	tElf32_W‹d
;

32 
öt32_t
 
	tElf32_Sw‹d
;

33 
uöt32_t
 
	tElf64_W‹d
;

34 
öt32_t
 
	tElf64_Sw‹d
;

37 
uöt64_t
 
	tElf32_Xw‹d
;

38 
öt64_t
 
	tElf32_Sxw‹d
;

39 
uöt64_t
 
	tElf64_Xw‹d
;

40 
öt64_t
 
	tElf64_Sxw‹d
;

43 
uöt32_t
 
	tElf32_Addr
;

44 
uöt64_t
 
	tElf64_Addr
;

47 
uöt32_t
 
	tElf32_Off
;

48 
uöt64_t
 
	tElf64_Off
;

51 
uöt16_t
 
	tElf32_Se˘i⁄
;

52 
uöt16_t
 
	tElf64_Se˘i⁄
;

55 
Elf32_HÆf
 
	tElf32_Vîsym
;

56 
Elf64_HÆf
 
	tElf64_Vîsym
;

61 
	#EI_NIDENT
 (16)

	)

65 
	me_idít
[
EI_NIDENT
];

66 
Elf32_HÆf
 
	me_ty≥
;

67 
Elf32_HÆf
 
	me_machöe
;

68 
Elf32_W‹d
 
	me_vîsi⁄
;

69 
Elf32_Addr
 
	me_íåy
;

70 
Elf32_Off
 
	me_phoff
;

71 
Elf32_Off
 
	me_shoff
;

72 
Elf32_W‹d
 
	me_Êags
;

73 
Elf32_HÆf
 
	me_ehsize
;

74 
Elf32_HÆf
 
	me_phítsize
;

75 
Elf32_HÆf
 
	me_phnum
;

76 
Elf32_HÆf
 
	me_shítsize
;

77 
Elf32_HÆf
 
	me_shnum
;

78 
Elf32_HÆf
 
	me_sh°∫dx
;

79 } 
	tElf32_Ehdr
;

83 
	me_idít
[
EI_NIDENT
];

84 
Elf64_HÆf
 
	me_ty≥
;

85 
Elf64_HÆf
 
	me_machöe
;

86 
Elf64_W‹d
 
	me_vîsi⁄
;

87 
Elf64_Addr
 
	me_íåy
;

88 
Elf64_Off
 
	me_phoff
;

89 
Elf64_Off
 
	me_shoff
;

90 
Elf64_W‹d
 
	me_Êags
;

91 
Elf64_HÆf
 
	me_ehsize
;

92 
Elf64_HÆf
 
	me_phítsize
;

93 
Elf64_HÆf
 
	me_phnum
;

94 
Elf64_HÆf
 
	me_shítsize
;

95 
Elf64_HÆf
 
	me_shnum
;

96 
Elf64_HÆf
 
	me_sh°∫dx
;

97 } 
	tElf64_Ehdr
;

103 
	#EI_MAG0
 0

	)

104 
	#ELFMAG0
 0x7‡

	)

106 
	#EI_MAG1
 1

	)

107 
	#ELFMAG1
 'E'

	)

109 
	#EI_MAG2
 2

	)

110 
	#ELFMAG2
 'L'

	)

112 
	#EI_MAG3
 3

	)

113 
	#ELFMAG3
 'F'

	)

116 
	#ELFMAG
 "\177ELF"

	)

117 
	#SELFMAG
 4

	)

119 
	#EI_CLASS
 4

	)

120 
	#ELFCLASSNONE
 0

	)

121 
	#ELFCLASS32
 1

	)

122 
	#ELFCLASS64
 2

	)

123 
	#ELFCLASSNUM
 3

	)

125 
	#EI_DATA
 5

	)

126 
	#ELFDATANONE
 0

	)

127 
	#ELFDATA2LSB
 1

	)

128 
	#ELFDATA2MSB
 2

	)

129 
	#ELFDATANUM
 3

	)

131 
	#EI_VERSION
 6

	)

134 
	#EI_OSABI
 7

	)

135 
	#ELFOSABI_NONE
 0

	)

136 
	#ELFOSABI_SYSV
 0

	)

137 
	#ELFOSABI_HPUX
 1

	)

138 
	#ELFOSABI_NETBSD
 2

	)

139 
	#ELFOSABI_GNU
 3

	)

140 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

141 
	#ELFOSABI_SOLARIS
 6

	)

142 
	#ELFOSABI_AIX
 7

	)

143 
	#ELFOSABI_IRIX
 8

	)

144 
	#ELFOSABI_FREEBSD
 9

	)

145 
	#ELFOSABI_TRU64
 10

	)

146 
	#ELFOSABI_MODESTO
 11

	)

147 
	#ELFOSABI_OPENBSD
 12

	)

148 
	#ELFOSABI_ARM_AEABI
 64

	)

149 
	#ELFOSABI_ARM
 97

	)

150 
	#ELFOSABI_STANDALONE
 255

	)

152 
	#EI_ABIVERSION
 8

	)

154 
	#EI_PAD
 9

	)

158 
	#ET_NONE
 0

	)

159 
	#ET_REL
 1

	)

160 
	#ET_EXEC
 2

	)

161 
	#ET_DYN
 3

	)

162 
	#ET_CORE
 4

	)

163 
	#ET_NUM
 5

	)

164 
	#ET_LOOS
 0x„00

	)

165 
	#ET_HIOS
 0x„f‡

	)

166 
	#ET_LOPROC
 0xff00

	)

167 
	#ET_HIPROC
 0xfff‡

	)

171 
	#EM_NONE
 0

	)

172 
	#EM_M32
 1

	)

173 
	#EM_SPARC
 2

	)

174 
	#EM_386
 3

	)

175 
	#EM_68K
 4

	)

176 
	#EM_88K
 5

	)

177 
	#EM_IAMCU
 6

	)

178 
	#EM_860
 7

	)

179 
	#EM_MIPS
 8

	)

180 
	#EM_S370
 9

	)

181 
	#EM_MIPS_RS3_LE
 10

	)

183 
	#EM_PARISC
 15

	)

185 
	#EM_VPP500
 17

	)

186 
	#EM_SPARC32PLUS
 18

	)

187 
	#EM_960
 19

	)

188 
	#EM_PPC
 20

	)

189 
	#EM_PPC64
 21

	)

190 
	#EM_S390
 22

	)

191 
	#EM_SPU
 23

	)

193 
	#EM_V800
 36

	)

194 
	#EM_FR20
 37

	)

195 
	#EM_RH32
 38

	)

196 
	#EM_RCE
 39

	)

197 
	#EM_ARM
 40

	)

198 
	#EM_FAKE_ALPHA
 41

	)

199 
	#EM_SH
 42

	)

200 
	#EM_SPARCV9
 43

	)

201 
	#EM_TRICORE
 44

	)

202 
	#EM_ARC
 45

	)

203 
	#EM_H8_300
 46

	)

204 
	#EM_H8_300H
 47

	)

205 
	#EM_H8S
 48

	)

206 
	#EM_H8_500
 49

	)

207 
	#EM_IA_64
 50

	)

208 
	#EM_MIPS_X
 51

	)

209 
	#EM_COLDFIRE
 52

	)

210 
	#EM_68HC12
 53

	)

211 
	#EM_MMA
 54

	)

212 
	#EM_PCP
 55

	)

213 
	#EM_NCPU
 56

	)

214 
	#EM_NDR1
 57

	)

215 
	#EM_STARCORE
 58

	)

216 
	#EM_ME16
 59

	)

217 
	#EM_ST100
 60

	)

218 
	#EM_TINYJ
 61

	)

219 
	#EM_X86_64
 62

	)

220 
	#EM_PDSP
 63

	)

221 
	#EM_PDP10
 64

	)

222 
	#EM_PDP11
 65

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_COMPACT
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_VIDEOCORE
 95

	)

253 
	#EM_TMM_GPP
 96

	)

254 
	#EM_NS32K
 97

	)

255 
	#EM_TPC
 98

	)

256 
	#EM_SNP1K
 99

	)

257 
	#EM_ST200
 100

	)

258 
	#EM_IP2K
 101

	)

259 
	#EM_MAX
 102

	)

260 
	#EM_CR
 103

	)

261 
	#EM_F2MC16
 104

	)

262 
	#EM_MSP430
 105

	)

263 
	#EM_BLACKFIN
 106

	)

264 
	#EM_SE_C33
 107

	)

265 
	#EM_SEP
 108

	)

266 
	#EM_ARCA
 109

	)

267 
	#EM_UNICORE
 110

	)

268 
	#EM_EXCESS
 111

	)

269 
	#EM_DXP
 112

	)

270 
	#EM_ALTERA_NIOS2
 113

	)

271 
	#EM_CRX
 114

	)

272 
	#EM_XGATE
 115

	)

273 
	#EM_C166
 116

	)

274 
	#EM_M16C
 117

	)

275 
	#EM_DSPIC30F
 118

	)

276 
	#EM_CE
 119

	)

277 
	#EM_M32C
 120

	)

279 
	#EM_TSK3000
 131

	)

280 
	#EM_RS08
 132

	)

281 
	#EM_SHARC
 133

	)

282 
	#EM_ECOG2
 134

	)

283 
	#EM_SCORE7
 135

	)

284 
	#EM_DSP24
 136

	)

285 
	#EM_VIDEOCORE3
 137

	)

286 
	#EM_LATTICEMICO32
 138

	)

287 
	#EM_SE_C17
 139

	)

288 
	#EM_TI_C6000
 140

	)

289 
	#EM_TI_C2000
 141

	)

290 
	#EM_TI_C5500
 142

	)

291 
	#EM_TI_ARP32
 143

	)

292 
	#EM_TI_PRU
 144

	)

294 
	#EM_MMDSP_PLUS
 160

	)

295 
	#EM_CYPRESS_M8C
 161

	)

296 
	#EM_R32C
 162

	)

297 
	#EM_TRIMEDIA
 163

	)

298 
	#EM_QDSP6
 164

	)

299 
	#EM_8051
 165

	)

300 
	#EM_STXP7X
 166

	)

301 
	#EM_NDS32
 167

	)

302 
	#EM_ECOG1X
 168

	)

303 
	#EM_MAXQ30
 169

	)

304 
	#EM_XIMO16
 170

	)

305 
	#EM_MANIK
 171

	)

306 
	#EM_CRAYNV2
 172

	)

307 
	#EM_RX
 173

	)

308 
	#EM_METAG
 174

	)

309 
	#EM_MCST_ELBRUS
 175

	)

310 
	#EM_ECOG16
 176

	)

311 
	#EM_CR16
 177

	)

312 
	#EM_ETPU
 178

	)

313 
	#EM_SLE9X
 179

	)

314 
	#EM_L10M
 180

	)

315 
	#EM_K10M
 181

	)

317 
	#EM_AARCH64
 183

	)

319 
	#EM_AVR32
 185

	)

320 
	#EM_STM8
 186

	)

321 
	#EM_TILE64
 187

	)

322 
	#EM_TILEPRO
 188

	)

323 
	#EM_MICROBLAZE
 189

	)

324 
	#EM_CUDA
 190

	)

325 
	#EM_TILEGX
 191

	)

326 
	#EM_CLOUDSHIELD
 192

	)

327 
	#EM_COREA_1ST
 193

	)

328 
	#EM_COREA_2ND
 194

	)

329 
	#EM_ARCV2
 195

	)

330 
	#EM_OPEN8
 196

	)

331 
	#EM_RL78
 197

	)

332 
	#EM_VIDEOCORE5
 198

	)

333 
	#EM_78KOR
 199

	)

334 
	#EM_56800EX
 200

	)

335 
	#EM_BA1
 201

	)

336 
	#EM_BA2
 202

	)

337 
	#EM_XCORE
 203

	)

338 
	#EM_MCHP_PIC
 204

	)

339 
	#EM_INTELGT
 205

	)

341 
	#EM_KM32
 210

	)

342 
	#EM_KMX32
 211

	)

343 
	#EM_EMX16
 212

	)

344 
	#EM_EMX8
 213

	)

345 
	#EM_KVARC
 214

	)

346 
	#EM_CDP
 215

	)

347 
	#EM_COGE
 216

	)

348 
	#EM_COOL
 217

	)

349 
	#EM_NORC
 218

	)

350 
	#EM_CSR_KALIMBA
 219

	)

351 
	#EM_Z80
 220

	)

352 
	#EM_VISIUM
 221

	)

353 
	#EM_FT32
 222

	)

354 
	#EM_MOXIE
 223

	)

355 
	#EM_AMDGPU
 224

	)

357 
	#EM_RISCV
 243

	)

359 
	#EM_BPF
 247

	)

360 
	#EM_CSKY
 252

	)

362 
	#EM_NUM
 253

	)

366 
	#EM_ARC_A5
 
EM_ARC_COMPACT


	)

372 
	#EM_ALPHA
 0x9026

	)

376 
	#EV_NONE
 0

	)

377 
	#EV_CURRENT
 1

	)

378 
	#EV_NUM
 2

	)

384 
Elf32_W‹d
 
	msh_«me
;

385 
Elf32_W‹d
 
	msh_ty≥
;

386 
Elf32_W‹d
 
	msh_Êags
;

387 
Elf32_Addr
 
	msh_addr
;

388 
Elf32_Off
 
	msh_off£t
;

389 
Elf32_W‹d
 
	msh_size
;

390 
Elf32_W‹d
 
	msh_lök
;

391 
Elf32_W‹d
 
	msh_öfo
;

392 
Elf32_W‹d
 
	msh_addølign
;

393 
Elf32_W‹d
 
	msh_ítsize
;

394 } 
	tElf32_Shdr
;

398 
Elf64_W‹d
 
	msh_«me
;

399 
Elf64_W‹d
 
	msh_ty≥
;

400 
Elf64_Xw‹d
 
	msh_Êags
;

401 
Elf64_Addr
 
	msh_addr
;

402 
Elf64_Off
 
	msh_off£t
;

403 
Elf64_Xw‹d
 
	msh_size
;

404 
Elf64_W‹d
 
	msh_lök
;

405 
Elf64_W‹d
 
	msh_öfo
;

406 
Elf64_Xw‹d
 
	msh_addølign
;

407 
Elf64_Xw‹d
 
	msh_ítsize
;

408 } 
	tElf64_Shdr
;

412 
	#SHN_UNDEF
 0

	)

413 
	#SHN_LORESERVE
 0xff00

	)

414 
	#SHN_LOPROC
 0xff00

	)

415 
	#SHN_BEFORE
 0xff00

	)

417 
	#SHN_AFTER
 0xff01

	)

419 
	#SHN_HIPROC
 0xff1‡

	)

420 
	#SHN_LOOS
 0xff20

	)

421 
	#SHN_HIOS
 0xff3‡

	)

422 
	#SHN_ABS
 0xfff1

	)

423 
	#SHN_COMMON
 0xfff2

	)

424 
	#SHN_XINDEX
 0xfff‡

	)

425 
	#SHN_HIRESERVE
 0xfff‡

	)

429 
	#SHT_NULL
 0

	)

430 
	#SHT_PROGBITS
 1

	)

431 
	#SHT_SYMTAB
 2

	)

432 
	#SHT_STRTAB
 3

	)

433 
	#SHT_RELA
 4

	)

434 
	#SHT_HASH
 5

	)

435 
	#SHT_DYNAMIC
 6

	)

436 
	#SHT_NOTE
 7

	)

437 
	#SHT_NOBITS
 8

	)

438 
	#SHT_REL
 9

	)

439 
	#SHT_SHLIB
 10

	)

440 
	#SHT_DYNSYM
 11

	)

441 
	#SHT_INIT_ARRAY
 14

	)

442 
	#SHT_FINI_ARRAY
 15

	)

443 
	#SHT_PREINIT_ARRAY
 16

	)

444 
	#SHT_GROUP
 17

	)

445 
	#SHT_SYMTAB_SHNDX
 18

	)

446 
	#SHT_NUM
 19

	)

447 
	#SHT_LOOS
 0x60000000

	)

448 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

449 
	#SHT_GNU_HASH
 0x6ffffff6

	)

450 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

451 
	#SHT_CHECKSUM
 0x6ffffff8

	)

452 
	#SHT_LOSUNW
 0x6fffffÁ

	)

453 
	#SHT_SUNW_move
 0x6fffffÁ

	)

454 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

455 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

456 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

457 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

458 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

459 
	#SHT_HISUNW
 0x6ffffff‡

	)

460 
	#SHT_HIOS
 0x6ffffff‡

	)

461 
	#SHT_LOPROC
 0x70000000

	)

462 
	#SHT_HIPROC
 0x7ffffff‡

	)

463 
	#SHT_LOUSER
 0x80000000

	)

464 
	#SHT_HIUSER
 0x8ffffff‡

	)

468 
	#SHF_WRITE
 (1 << 0Ë

	)

469 
	#SHF_ALLOC
 (1 << 1Ë

	)

470 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

471 
	#SHF_MERGE
 (1 << 4Ë

	)

472 
	#SHF_STRINGS
 (1 << 5Ë

	)

473 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

474 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

475 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

477 
	#SHF_GROUP
 (1 << 9Ë

	)

478 
	#SHF_TLS
 (1 << 10Ë

	)

479 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

480 
	#SHF_MASKOS
 0x0ff00000

	)

481 
	#SHF_MASKPROC
 0xf0000000

	)

482 
	#SHF_GNU_RETAIN
 (1 << 21Ë

	)

483 
	#SHF_ORDERED
 (1 << 30Ë

	)

485 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

492 
Elf32_W‹d
 
	mch_ty≥
;

493 
Elf32_W‹d
 
	mch_size
;

494 
Elf32_W‹d
 
	mch_addølign
;

495 } 
	tElf32_Chdr
;

499 
Elf64_W‹d
 
	mch_ty≥
;

500 
Elf64_W‹d
 
	mch_ª£rved
;

501 
Elf64_Xw‹d
 
	mch_size
;

502 
Elf64_Xw‹d
 
	mch_addølign
;

503 } 
	tElf64_Chdr
;

506 
	#ELFCOMPRESS_ZLIB
 1

	)

507 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

508 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

509 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

510 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

513 
	#GRP_COMDAT
 0x1

	)

519 
Elf32_W‹d
 
	m°_«me
;

520 
Elf32_Addr
 
	m°_vÆue
;

521 
Elf32_W‹d
 
	m°_size
;

522 
	m°_öfo
;

523 
	m°_Ÿhî
;

524 
Elf32_Se˘i⁄
 
	m°_shndx
;

525 } 
	tElf32_Sym
;

529 
Elf64_W‹d
 
	m°_«me
;

530 
	m°_öfo
;

531 
	m°_Ÿhî
;

532 
Elf64_Se˘i⁄
 
	m°_shndx
;

533 
Elf64_Addr
 
	m°_vÆue
;

534 
Elf64_Xw‹d
 
	m°_size
;

535 } 
	tElf64_Sym
;

542 
Elf32_HÆf
 
	msi_boundto
;

543 
Elf32_HÆf
 
	msi_Êags
;

544 } 
	tElf32_Symöfo
;

548 
Elf64_HÆf
 
	msi_boundto
;

549 
Elf64_HÆf
 
	msi_Êags
;

550 } 
	tElf64_Symöfo
;

553 
	#SYMINFO_BT_SELF
 0xfff‡

	)

554 
	#SYMINFO_BT_PARENT
 0xff„

	)

555 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

558 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

559 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

560 
	#SYMINFO_FLG_COPY
 0x0004

	)

561 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

564 
	#SYMINFO_NONE
 0

	)

565 
	#SYMINFO_CURRENT
 1

	)

566 
	#SYMINFO_NUM
 2

	)

571 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

572 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

573 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

576 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

577 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

578 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

582 
	#STB_LOCAL
 0

	)

583 
	#STB_GLOBAL
 1

	)

584 
	#STB_WEAK
 2

	)

585 
	#STB_NUM
 3

	)

586 
	#STB_LOOS
 10

	)

587 
	#STB_GNU_UNIQUE
 10

	)

588 
	#STB_HIOS
 12

	)

589 
	#STB_LOPROC
 13

	)

590 
	#STB_HIPROC
 15

	)

594 
	#STT_NOTYPE
 0

	)

595 
	#STT_OBJECT
 1

	)

596 
	#STT_FUNC
 2

	)

597 
	#STT_SECTION
 3

	)

598 
	#STT_FILE
 4

	)

599 
	#STT_COMMON
 5

	)

600 
	#STT_TLS
 6

	)

601 
	#STT_NUM
 7

	)

602 
	#STT_LOOS
 10

	)

603 
	#STT_GNU_IFUNC
 10

	)

604 
	#STT_HIOS
 12

	)

605 
	#STT_LOPROC
 13

	)

606 
	#STT_HIPROC
 15

	)

613 
	#STN_UNDEF
 0

	)

618 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

621 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

624 
	#STV_DEFAULT
 0

	)

625 
	#STV_INTERNAL
 1

	)

626 
	#STV_HIDDEN
 2

	)

627 
	#STV_PROTECTED
 3

	)

634 
Elf32_Addr
 
	mr_off£t
;

635 
Elf32_W‹d
 
	mr_öfo
;

636 } 
	tElf32_Rñ
;

645 
Elf64_Addr
 
	mr_off£t
;

646 
Elf64_Xw‹d
 
	mr_öfo
;

647 } 
	tElf64_Rñ
;

653 
Elf32_Addr
 
	mr_off£t
;

654 
Elf32_W‹d
 
	mr_öfo
;

655 
Elf32_Sw‹d
 
	mr_addíd
;

656 } 
	tElf32_Rña
;

660 
Elf64_Addr
 
	mr_off£t
;

661 
Elf64_Xw‹d
 
	mr_öfo
;

662 
Elf64_Sxw‹d
 
	mr_addíd
;

663 } 
	tElf64_Rña
;

667 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

668 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

669 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

671 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

672 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

673 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

679 
Elf32_W‹d
 
	mp_ty≥
;

680 
Elf32_Off
 
	mp_off£t
;

681 
Elf32_Addr
 
	mp_vaddr
;

682 
Elf32_Addr
 
	mp_∑ddr
;

683 
Elf32_W‹d
 
	mp_fûesz
;

684 
Elf32_W‹d
 
	mp_memsz
;

685 
Elf32_W‹d
 
	mp_Êags
;

686 
Elf32_W‹d
 
	mp_Æign
;

687 } 
	tElf32_Phdr
;

691 
Elf64_W‹d
 
	mp_ty≥
;

692 
Elf64_W‹d
 
	mp_Êags
;

693 
Elf64_Off
 
	mp_off£t
;

694 
Elf64_Addr
 
	mp_vaddr
;

695 
Elf64_Addr
 
	mp_∑ddr
;

696 
Elf64_Xw‹d
 
	mp_fûesz
;

697 
Elf64_Xw‹d
 
	mp_memsz
;

698 
Elf64_Xw‹d
 
	mp_Æign
;

699 } 
	tElf64_Phdr
;

705 
	#PN_XNUM
 0xffff

	)

709 
	#PT_NULL
 0

	)

710 
	#PT_LOAD
 1

	)

711 
	#PT_DYNAMIC
 2

	)

712 
	#PT_INTERP
 3

	)

713 
	#PT_NOTE
 4

	)

714 
	#PT_SHLIB
 5

	)

715 
	#PT_PHDR
 6

	)

716 
	#PT_TLS
 7

	)

717 
	#PT_NUM
 8

	)

718 
	#PT_LOOS
 0x60000000

	)

719 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

720 
	#PT_GNU_STACK
 0x6474e551

	)

721 
	#PT_GNU_RELRO
 0x6474e552

	)

722 
	#PT_GNU_PROPERTY
 0x6474e553

	)

723 
	#PT_LOSUNW
 0x6fffffÁ

	)

724 
	#PT_SUNWBSS
 0x6fffffÁ

	)

725 
	#PT_SUNWSTACK
 0x6ffffffb

	)

726 
	#PT_HISUNW
 0x6fffffff

	)

727 
	#PT_HIOS
 0x6ffffff‡

	)

728 
	#PT_LOPROC
 0x70000000

	)

729 
	#PT_HIPROC
 0x7ffffff‡

	)

733 
	#PF_X
 (1 << 0Ë

	)

734 
	#PF_W
 (1 << 1Ë

	)

735 
	#PF_R
 (1 << 2Ë

	)

736 
	#PF_MASKOS
 0x0ff00000

	)

737 
	#PF_MASKPROC
 0xf0000000

	)

741 
	#NT_PRSTATUS
 1

	)

742 
	#NT_PRFPREG
 2

	)

744 
	#NT_FPREGSET
 2

	)

745 
	#NT_PRPSINFO
 3

	)

746 
	#NT_PRXREG
 4

	)

747 
	#NT_TASKSTRUCT
 4

	)

748 
	#NT_PLATFORM
 5

	)

749 
	#NT_AUXV
 6

	)

750 
	#NT_GWINDOWS
 7

	)

751 
	#NT_ASRS
 8

	)

752 
	#NT_PSTATUS
 10

	)

753 
	#NT_PSINFO
 13

	)

754 
	#NT_PRCRED
 14

	)

755 
	#NT_UTSNAME
 15

	)

756 
	#NT_LWPSTATUS
 16

	)

757 
	#NT_LWPSINFO
 17

	)

758 
	#NT_PRFPXREG
 20

	)

759 
	#NT_SIGINFO
 0x53494749

	)

761 
	#NT_FILE
 0x46494c45

	)

763 
	#NT_PRXFPREG
 0x46e62b7‡

	)

764 
	#NT_PPC_VMX
 0x100

	)

765 
	#NT_PPC_SPE
 0x101

	)

766 
	#NT_PPC_VSX
 0x102

	)

767 
	#NT_PPC_TAR
 0x103

	)

768 
	#NT_PPC_PPR
 0x104

	)

769 
	#NT_PPC_DSCR
 0x105

	)

770 
	#NT_PPC_EBB
 0x106

	)

771 
	#NT_PPC_PMU
 0x107

	)

772 
	#NT_PPC_TM_CGPR
 0x108

	)

773 
	#NT_PPC_TM_CFPR
 0x109

	)

774 
	#NT_PPC_TM_CVMX
 0x10®

	)

775 
	#NT_PPC_TM_CVSX
 0x10b

	)

776 
	#NT_PPC_TM_SPR
 0x10¯

	)

777 
	#NT_PPC_TM_CTAR
 0x10d

	)

779 
	#NT_PPC_TM_CPPR
 0x10ê

	)

781 
	#NT_PPC_TM_CDSCR
 0x10‡

	)

783 
	#NT_PPC_PKEY
 0x110

	)

785 
	#NT_386_TLS
 0x200

	)

786 
	#NT_386_IOPERM
 0x201

	)

787 
	#NT_X86_XSTATE
 0x202

	)

788 
	#NT_S390_HIGH_GPRS
 0x300

	)

789 
	#NT_S390_TIMER
 0x301

	)

790 
	#NT_S390_TODCMP
 0x302

	)

791 
	#NT_S390_TODPREG
 0x303

	)

792 
	#NT_S390_CTRS
 0x304

	)

793 
	#NT_S390_PREFIX
 0x305

	)

794 
	#NT_S390_LAST_BREAK
 0x306

	)

795 
	#NT_S390_SYSTEM_CALL
 0x307

	)

796 
	#NT_S390_TDB
 0x308

	)

797 
	#NT_S390_VXRS_LOW
 0x309

	)

799 
	#NT_S390_VXRS_HIGH
 0x30®

	)

800 
	#NT_S390_GS_CB
 0x30b

	)

801 
	#NT_S390_GS_BC
 0x30¯

	)

803 
	#NT_S390_RI_CB
 0x30d

	)

804 
	#NT_ARM_VFP
 0x400

	)

805 
	#NT_ARM_TLS
 0x401

	)

806 
	#NT_ARM_HW_BREAK
 0x402

	)

807 
	#NT_ARM_HW_WATCH
 0x403

	)

808 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

809 
	#NT_ARM_SVE
 0x405

	)

811 
	#NT_ARM_PAC_MASK
 0x406

	)

813 
	#NT_ARM_PACA_KEYS
 0x407

	)

815 
	#NT_ARM_PACG_KEYS
 0x408

	)

817 
	#NT_ARM_TAGGED_ADDR_CTRL
 0x409

	)

819 
	#NT_ARM_PAC_ENABLED_KEYS
 0x40®

	)

821 
	#NT_VMCOREDD
 0x700

	)

822 
	#NT_MIPS_DSP
 0x800

	)

823 
	#NT_MIPS_FP_MODE
 0x801

	)

824 
	#NT_MIPS_MSA
 0x802

	)

828 
	#NT_VERSION
 1

	)

835 
Elf32_Sw‹d
 
	md_èg
;

838 
Elf32_W‹d
 
	md_vÆ
;

839 
Elf32_Addr
 
	md_±r
;

840 } 
	md_un
;

841 } 
	tElf32_Dyn
;

845 
Elf64_Sxw‹d
 
	md_èg
;

848 
Elf64_Xw‹d
 
	md_vÆ
;

849 
Elf64_Addr
 
	md_±r
;

850 } 
	md_un
;

851 } 
	tElf64_Dyn
;

855 
	#DT_NULL
 0

	)

856 
	#DT_NEEDED
 1

	)

857 
	#DT_PLTRELSZ
 2

	)

858 
	#DT_PLTGOT
 3

	)

859 
	#DT_HASH
 4

	)

860 
	#DT_STRTAB
 5

	)

861 
	#DT_SYMTAB
 6

	)

862 
	#DT_RELA
 7

	)

863 
	#DT_RELASZ
 8

	)

864 
	#DT_RELAENT
 9

	)

865 
	#DT_STRSZ
 10

	)

866 
	#DT_SYMENT
 11

	)

867 
	#DT_INIT
 12

	)

868 
	#DT_FINI
 13

	)

869 
	#DT_SONAME
 14

	)

870 
	#DT_RPATH
 15

	)

871 
	#DT_SYMBOLIC
 16

	)

872 
	#DT_REL
 17

	)

873 
	#DT_RELSZ
 18

	)

874 
	#DT_RELENT
 19

	)

875 
	#DT_PLTREL
 20

	)

876 
	#DT_DEBUG
 21

	)

877 
	#DT_TEXTREL
 22

	)

878 
	#DT_JMPREL
 23

	)

879 
	#DT_BIND_NOW
 24

	)

880 
	#DT_INIT_ARRAY
 25

	)

881 
	#DT_FINI_ARRAY
 26

	)

882 
	#DT_INIT_ARRAYSZ
 27

	)

883 
	#DT_FINI_ARRAYSZ
 28

	)

884 
	#DT_RUNPATH
 29

	)

885 
	#DT_FLAGS
 30

	)

886 
	#DT_ENCODING
 32

	)

887 
	#DT_PREINIT_ARRAY
 32

	)

888 
	#DT_PREINIT_ARRAYSZ
 33

	)

889 
	#DT_SYMTAB_SHNDX
 34

	)

890 
	#DT_NUM
 35

	)

891 
	#DT_LOOS
 0x6000000d

	)

892 
	#DT_HIOS
 0x6ffff000

	)

893 
	#DT_LOPROC
 0x70000000

	)

894 
	#DT_HIPROC
 0x7ffffff‡

	)

895 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

900 
	#DT_VALRNGLO
 0x6ffffd00

	)

901 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

902 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

903 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

904 
	#DT_CHECKSUM
 0x6ffffdf8

	)

905 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

906 
	#DT_MOVEENT
 0x6ffffdÁ

	)

907 
	#DT_MOVESZ
 0x6ffffdfb

	)

908 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

909 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

911 
	#DT_SYMINSZ
 0x6ffffd„

	)

912 
	#DT_SYMINENT
 0x6ffffdf‡

	)

913 
	#DT_VALRNGHI
 0x6ffffdff

	)

914 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

915 
	#DT_VALNUM
 12

	)

922 
	#DT_ADDRRNGLO
 0x6fff„00

	)

923 
	#DT_GNU_HASH
 0x6fff„f5

	)

924 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

925 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

926 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

927 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

928 
	#DT_CONFIG
 0x6fff„Á

	)

929 
	#DT_DEPAUDIT
 0x6fff„fb

	)

930 
	#DT_AUDIT
 0x6fff„f¯

	)

931 
	#DT_PLTPAD
 0x6fff„fd

	)

932 
	#DT_MOVETAB
 0x6fff„„

	)

933 
	#DT_SYMINFO
 0x6fff„f‡

	)

934 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

935 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

936 
	#DT_ADDRNUM
 11

	)

940 
	#DT_VERSYM
 0x6ffffff0

	)

942 
	#DT_RELACOUNT
 0x6ffffff9

	)

943 
	#DT_RELCOUNT
 0x6fffffÁ

	)

946 
	#DT_FLAGS_1
 0x6ffffffb

	)

947 
	#DT_VERDEF
 0x6ffffff¯

	)

949 
	#DT_VERDEFNUM
 0x6ffffffd

	)

950 
	#DT_VERNEED
 0x6fffff„

	)

952 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

953 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

954 
	#DT_VERSIONTAGNUM
 16

	)

958 
	#DT_AUXILIARY
 0x7ffffffd

	)

959 
	#DT_FILTER
 0x7ffffff‡

	)

960 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

961 
	#DT_EXTRANUM
 3

	)

964 
	#DF_ORIGIN
 0x00000001

	)

965 
	#DF_SYMBOLIC
 0x00000002

	)

966 
	#DF_TEXTREL
 0x00000004

	)

967 
	#DF_BIND_NOW
 0x00000008

	)

968 
	#DF_STATIC_TLS
 0x00000010

	)

972 
	#DF_1_NOW
 0x00000001

	)

973 
	#DF_1_GLOBAL
 0x00000002

	)

974 
	#DF_1_GROUP
 0x00000004

	)

975 
	#DF_1_NODELETE
 0x00000008

	)

976 
	#DF_1_LOADFLTR
 0x00000010

	)

977 
	#DF_1_INITFIRST
 0x00000020

	)

978 
	#DF_1_NOOPEN
 0x00000040

	)

979 
	#DF_1_ORIGIN
 0x00000080

	)

980 
	#DF_1_DIRECT
 0x00000100

	)

981 
	#DF_1_TRANS
 0x00000200

	)

982 
	#DF_1_INTERPOSE
 0x00000400

	)

983 
	#DF_1_NODEFLIB
 0x00000800

	)

984 
	#DF_1_NODUMP
 0x00001000

	)

985 
	#DF_1_CONFALT
 0x00002000

	)

986 
	#DF_1_ENDFILTEE
 0x00004000

	)

987 
	#DF_1_DISPRELDNE
 0x00008000

	)

988 
	#DF_1_DISPRELPND
 0x00010000

	)

989 
	#DF_1_NODIRECT
 0x00020000

	)

990 
	#DF_1_IGNMULDEF
 0x00040000

	)

991 
	#DF_1_NOKSYMS
 0x00080000

	)

992 
	#DF_1_NOHDR
 0x00100000

	)

993 
	#DF_1_EDITED
 0x00200000

	)

994 
	#DF_1_NORELOC
 0x00400000

	)

995 
	#DF_1_SYMINTPOSE
 0x00800000

	)

996 
	#DF_1_GLOBAUDIT
 0x01000000

	)

997 
	#DF_1_SINGLETON
 0x02000000

	)

998 
	#DF_1_STUB
 0x04000000

	)

999 
	#DF_1_PIE
 0x08000000

	)

1000 
	#DF_1_KMOD
 0x10000000

	)

1001 
	#DF_1_WEAKFILTER
 0x20000000

	)

1002 
	#DF_1_NOCOMMON
 0x40000000

	)

1005 
	#DTF_1_PARINIT
 0x00000001

	)

1006 
	#DTF_1_CONFEXP
 0x00000002

	)

1009 
	#DF_P1_LAZYLOAD
 0x00000001

	)

1010 
	#DF_P1_GROUPPERM
 0x00000002

	)

1017 
Elf32_HÆf
 
	mvd_vîsi⁄
;

1018 
Elf32_HÆf
 
	mvd_Êags
;

1019 
Elf32_HÆf
 
	mvd_ndx
;

1020 
Elf32_HÆf
 
	mvd_˙t
;

1021 
Elf32_W‹d
 
	mvd_hash
;

1022 
Elf32_W‹d
 
	mvd_aux
;

1023 
Elf32_W‹d
 
	mvd_√xt
;

1025 } 
	tElf32_Vîdef
;

1029 
Elf64_HÆf
 
	mvd_vîsi⁄
;

1030 
Elf64_HÆf
 
	mvd_Êags
;

1031 
Elf64_HÆf
 
	mvd_ndx
;

1032 
Elf64_HÆf
 
	mvd_˙t
;

1033 
Elf64_W‹d
 
	mvd_hash
;

1034 
Elf64_W‹d
 
	mvd_aux
;

1035 
Elf64_W‹d
 
	mvd_√xt
;

1037 } 
	tElf64_Vîdef
;

1041 
	#VER_DEF_NONE
 0

	)

1042 
	#VER_DEF_CURRENT
 1

	)

1043 
	#VER_DEF_NUM
 2

	)

1046 
	#VER_FLG_BASE
 0x1

	)

1047 
	#VER_FLG_WEAK
 0x2

	)

1050 
	#VER_NDX_LOCAL
 0

	)

1051 
	#VER_NDX_GLOBAL
 1

	)

1052 
	#VER_NDX_LORESERVE
 0xff00

	)

1053 
	#VER_NDX_ELIMINATE
 0xff01

	)

1059 
Elf32_W‹d
 
	mvda_«me
;

1060 
Elf32_W‹d
 
	mvda_√xt
;

1062 } 
	tElf32_Vîdaux
;

1066 
Elf64_W‹d
 
	mvda_«me
;

1067 
Elf64_W‹d
 
	mvda_√xt
;

1069 } 
	tElf64_Vîdaux
;

1076 
Elf32_HÆf
 
	mvn_vîsi⁄
;

1077 
Elf32_HÆf
 
	mvn_˙t
;

1078 
Elf32_W‹d
 
	mvn_fûe
;

1080 
Elf32_W‹d
 
	mvn_aux
;

1081 
Elf32_W‹d
 
	mvn_√xt
;

1083 } 
	tElf32_Vî√ed
;

1087 
Elf64_HÆf
 
	mvn_vîsi⁄
;

1088 
Elf64_HÆf
 
	mvn_˙t
;

1089 
Elf64_W‹d
 
	mvn_fûe
;

1091 
Elf64_W‹d
 
	mvn_aux
;

1092 
Elf64_W‹d
 
	mvn_√xt
;

1094 } 
	tElf64_Vî√ed
;

1098 
	#VER_NEED_NONE
 0

	)

1099 
	#VER_NEED_CURRENT
 1

	)

1100 
	#VER_NEED_NUM
 2

	)

1106 
Elf32_W‹d
 
	mv«_hash
;

1107 
Elf32_HÆf
 
	mv«_Êags
;

1108 
Elf32_HÆf
 
	mv«_Ÿhî
;

1109 
Elf32_W‹d
 
	mv«_«me
;

1110 
Elf32_W‹d
 
	mv«_√xt
;

1112 } 
	tElf32_Vî«ux
;

1116 
Elf64_W‹d
 
	mv«_hash
;

1117 
Elf64_HÆf
 
	mv«_Êags
;

1118 
Elf64_HÆf
 
	mv«_Ÿhî
;

1119 
Elf64_W‹d
 
	mv«_«me
;

1120 
Elf64_W‹d
 
	mv«_√xt
;

1122 } 
	tElf64_Vî«ux
;

1126 
	#VER_FLG_WEAK
 0x2

	)

1140 
uöt32_t
 
	ma_ty≥
;

1143 
uöt32_t
 
	ma_vÆ
;

1147 } 
	ma_un
;

1148 } 
	tElf32_auxv_t
;

1152 
uöt64_t
 
	ma_ty≥
;

1155 
uöt64_t
 
	ma_vÆ
;

1159 } 
	ma_un
;

1160 } 
	tElf64_auxv_t
;

1164 
	#AT_NULL
 0

	)

1165 
	#AT_IGNORE
 1

	)

1166 
	#AT_EXECFD
 2

	)

1167 
	#AT_PHDR
 3

	)

1168 
	#AT_PHENT
 4

	)

1169 
	#AT_PHNUM
 5

	)

1170 
	#AT_PAGESZ
 6

	)

1171 
	#AT_BASE
 7

	)

1172 
	#AT_FLAGS
 8

	)

1173 
	#AT_ENTRY
 9

	)

1174 
	#AT_NOTELF
 10

	)

1175 
	#AT_UID
 11

	)

1176 
	#AT_EUID
 12

	)

1177 
	#AT_GID
 13

	)

1178 
	#AT_EGID
 14

	)

1179 
	#AT_CLKTCK
 17

	)

1182 
	#AT_PLATFORM
 15

	)

1183 
	#AT_HWCAP
 16

	)

1188 
	#AT_FPUCW
 18

	)

1191 
	#AT_DCACHEBSIZE
 19

	)

1192 
	#AT_ICACHEBSIZE
 20

	)

1193 
	#AT_UCACHEBSIZE
 21

	)

1197 
	#AT_IGNOREPPC
 22

	)

1199 
	#AT_SECURE
 23

	)

1201 
	#AT_BASE_PLATFORM
 24

	)

1203 
	#AT_RANDOM
 25

	)

1205 
	#AT_HWCAP2
 26

	)

1208 
	#AT_EXECFN
 31

	)

1212 
	#AT_SYSINFO
 32

	)

1213 
	#AT_SYSINFO_EHDR
 33

	)

1217 
	#AT_L1I_CACHESHAPE
 34

	)

1218 
	#AT_L1D_CACHESHAPE
 35

	)

1219 
	#AT_L2_CACHESHAPE
 36

	)

1220 
	#AT_L3_CACHESHAPE
 37

	)

1225 
	#AT_L1I_CACHESIZE
 40

	)

1226 
	#AT_L1I_CACHEGEOMETRY
 41

	)

1227 
	#AT_L1D_CACHESIZE
 42

	)

1228 
	#AT_L1D_CACHEGEOMETRY
 43

	)

1229 
	#AT_L2_CACHESIZE
 44

	)

1230 
	#AT_L2_CACHEGEOMETRY
 45

	)

1231 
	#AT_L3_CACHESIZE
 46

	)

1232 
	#AT_L3_CACHEGEOMETRY
 47

	)

1234 
	#AT_MINSIGSTKSZ
 51

	)

1241 
Elf32_W‹d
 
	mn_«mesz
;

1242 
Elf32_W‹d
 
	mn_descsz
;

1243 
Elf32_W‹d
 
	mn_ty≥
;

1244 } 
	tElf32_Nhdr
;

1248 
Elf64_W‹d
 
	mn_«mesz
;

1249 
Elf64_W‹d
 
	mn_descsz
;

1250 
Elf64_W‹d
 
	mn_ty≥
;

1251 } 
	tElf64_Nhdr
;

1256 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1259 
	#ELF_NOTE_GNU
 "GNU"

	)

1262 
	#ELF_NOTE_FDO
 "FDO"

	)

1267 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1278 
	#NT_GNU_ABI_TAG
 1

	)

1279 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1283 
	#ELF_NOTE_OS_LINUX
 0

	)

1284 
	#ELF_NOTE_OS_GNU
 1

	)

1285 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1286 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1294 
	#NT_GNU_HWCAP
 2

	)

1298 
	#NT_GNU_BUILD_ID
 3

	)

1301 
	#NT_GNU_GOLD_VERSION
 4

	)

1304 
	#NT_GNU_PROPERTY_TYPE_0
 5

	)

1308 
	#NT_FDO_PACKAGING_METADATA
 0xˇ„1a7e

	)

1311 
	#NOTE_GNU_PROPERTY_SECTION_NAME
 ".nŸe.gnu.¥›îty"

	)

1316 
	#GNU_PROPERTY_STACK_SIZE
 1

	)

1318 
	#GNU_PROPERTY_NO_COPY_ON_PROTECTED
 2

	)

1322 
	#GNU_PROPERTY_UINT32_AND_LO
 0xb0000000

	)

1323 
	#GNU_PROPERTY_UINT32_AND_HI
 0xb0007fff

	)

1327 
	#GNU_PROPERTY_UINT32_OR_LO
 0xb0008000

	)

1328 
	#GNU_PROPERTY_UINT32_OR_HI
 0xb000ffff

	)

1331 
	#GNU_PROPERTY_1_NEEDED
 
GNU_PROPERTY_UINT32_OR_LO


	)

1335 
	#GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS
 (1U << 0)

	)

1338 
	#GNU_PROPERTY_LOPROC
 0xc0000000

	)

1340 
	#GNU_PROPERTY_HIPROC
 0xdfffffff

	)

1342 
	#GNU_PROPERTY_LOUSER
 0xe0000000

	)

1344 
	#GNU_PROPERTY_HIUSER
 0xffffffff

	)

1347 
	#GNU_PROPERTY_AARCH64_FEATURE_1_AND
 0xc0000000

	)

1349 
	#GNU_PROPERTY_AARCH64_FEATURE_1_BTI
 (1U << 0)

	)

1350 
	#GNU_PROPERTY_AARCH64_FEATURE_1_PAC
 (1U << 1)

	)

1354 
	#GNU_PROPERTY_X86_ISA_1_USED
 0xc0010002

	)

1357 
	#GNU_PROPERTY_X86_ISA_1_NEEDED
 0xc0008002

	)

1359 
	#GNU_PROPERTY_X86_FEATURE_1_AND
 0xc0000002

	)

1363 
	#GNU_PROPERTY_X86_ISA_1_BASELINE
 (1U << 0)

	)

1367 
	#GNU_PROPERTY_X86_ISA_1_V2
 (1U << 1)

	)

1370 
	#GNU_PROPERTY_X86_ISA_1_V3
 (1U << 2)

	)

1373 
	#GNU_PROPERTY_X86_ISA_1_V4
 (1U << 3)

	)

1377 
	#GNU_PROPERTY_X86_FEATURE_1_IBT
 (1U << 0)

	)

1380 
	#GNU_PROPERTY_X86_FEATURE_1_SHSTK
 (1U << 1)

	)

1385 
Elf32_Xw‹d
 
	mm_vÆue
;

1386 
Elf32_W‹d
 
	mm_öfo
;

1387 
Elf32_W‹d
 
	mm_poff£t
;

1388 
Elf32_HÆf
 
	mm_ª≥©
;

1389 
Elf32_HÆf
 
	mm_°ride
;

1390 } 
	tElf32_Move
;

1394 
Elf64_Xw‹d
 
	mm_vÆue
;

1395 
Elf64_Xw‹d
 
	mm_öfo
;

1396 
Elf64_Xw‹d
 
	mm_poff£t
;

1397 
Elf64_HÆf
 
	mm_ª≥©
;

1398 
Elf64_HÆf
 
	mm_°ride
;

1399 } 
	tElf64_Move
;

1402 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1403 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1404 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1406 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1407 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1408 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1414 
	#EF_CPU32
 0x00810000

	)

1418 
	#R_68K_NONE
 0

	)

1419 
	#R_68K_32
 1

	)

1420 
	#R_68K_16
 2

	)

1421 
	#R_68K_8
 3

	)

1422 
	#R_68K_PC32
 4

	)

1423 
	#R_68K_PC16
 5

	)

1424 
	#R_68K_PC8
 6

	)

1425 
	#R_68K_GOT32
 7

	)

1426 
	#R_68K_GOT16
 8

	)

1427 
	#R_68K_GOT8
 9

	)

1428 
	#R_68K_GOT32O
 10

	)

1429 
	#R_68K_GOT16O
 11

	)

1430 
	#R_68K_GOT8O
 12

	)

1431 
	#R_68K_PLT32
 13

	)

1432 
	#R_68K_PLT16
 14

	)

1433 
	#R_68K_PLT8
 15

	)

1434 
	#R_68K_PLT32O
 16

	)

1435 
	#R_68K_PLT16O
 17

	)

1436 
	#R_68K_PLT8O
 18

	)

1437 
	#R_68K_COPY
 19

	)

1438 
	#R_68K_GLOB_DAT
 20

	)

1439 
	#R_68K_JMP_SLOT
 21

	)

1440 
	#R_68K_RELATIVE
 22

	)

1441 
	#R_68K_TLS_GD32
 25

	)

1442 
	#R_68K_TLS_GD16
 26

	)

1443 
	#R_68K_TLS_GD8
 27

	)

1444 
	#R_68K_TLS_LDM32
 28

	)

1445 
	#R_68K_TLS_LDM16
 29

	)

1446 
	#R_68K_TLS_LDM8
 30

	)

1447 
	#R_68K_TLS_LDO32
 31

	)

1448 
	#R_68K_TLS_LDO16
 32

	)

1449 
	#R_68K_TLS_LDO8
 33

	)

1450 
	#R_68K_TLS_IE32
 34

	)

1451 
	#R_68K_TLS_IE16
 35

	)

1452 
	#R_68K_TLS_IE8
 36

	)

1453 
	#R_68K_TLS_LE32
 37

	)

1455 
	#R_68K_TLS_LE16
 38

	)

1457 
	#R_68K_TLS_LE8
 39

	)

1459 
	#R_68K_TLS_DTPMOD32
 40

	)

1460 
	#R_68K_TLS_DTPREL32
 41

	)

1461 
	#R_68K_TLS_TPREL32
 42

	)

1463 
	#R_68K_NUM
 43

	)

1469 
	#R_386_NONE
 0

	)

1470 
	#R_386_32
 1

	)

1471 
	#R_386_PC32
 2

	)

1472 
	#R_386_GOT32
 3

	)

1473 
	#R_386_PLT32
 4

	)

1474 
	#R_386_COPY
 5

	)

1475 
	#R_386_GLOB_DAT
 6

	)

1476 
	#R_386_JMP_SLOT
 7

	)

1477 
	#R_386_RELATIVE
 8

	)

1478 
	#R_386_GOTOFF
 9

	)

1479 
	#R_386_GOTPC
 10

	)

1480 
	#R_386_32PLT
 11

	)

1481 
	#R_386_TLS_TPOFF
 14

	)

1482 
	#R_386_TLS_IE
 15

	)

1484 
	#R_386_TLS_GOTIE
 16

	)

1486 
	#R_386_TLS_LE
 17

	)

1488 
	#R_386_TLS_GD
 18

	)

1490 
	#R_386_TLS_LDM
 19

	)

1493 
	#R_386_16
 20

	)

1494 
	#R_386_PC16
 21

	)

1495 
	#R_386_8
 22

	)

1496 
	#R_386_PC8
 23

	)

1497 
	#R_386_TLS_GD_32
 24

	)

1499 
	#R_386_TLS_GD_PUSH
 25

	)

1500 
	#R_386_TLS_GD_CALL
 26

	)

1502 
	#R_386_TLS_GD_POP
 27

	)

1503 
	#R_386_TLS_LDM_32
 28

	)

1505 
	#R_386_TLS_LDM_PUSH
 29

	)

1506 
	#R_386_TLS_LDM_CALL
 30

	)

1508 
	#R_386_TLS_LDM_POP
 31

	)

1509 
	#R_386_TLS_LDO_32
 32

	)

1510 
	#R_386_TLS_IE_32
 33

	)

1512 
	#R_386_TLS_LE_32
 34

	)

1514 
	#R_386_TLS_DTPMOD32
 35

	)

1515 
	#R_386_TLS_DTPOFF32
 36

	)

1516 
	#R_386_TLS_TPOFF32
 37

	)

1517 
	#R_386_SIZE32
 38

	)

1518 
	#R_386_TLS_GOTDESC
 39

	)

1519 
	#R_386_TLS_DESC_CALL
 40

	)

1522 
	#R_386_TLS_DESC
 41

	)

1526 
	#R_386_IRELATIVE
 42

	)

1527 
	#R_386_GOT32X
 43

	)

1530 
	#R_386_NUM
 44

	)

1536 
	#STT_SPARC_REGISTER
 13

	)

1540 
	#EF_SPARCV9_MM
 3

	)

1541 
	#EF_SPARCV9_TSO
 0

	)

1542 
	#EF_SPARCV9_PSO
 1

	)

1543 
	#EF_SPARCV9_RMO
 2

	)

1544 
	#EF_SPARC_LEDATA
 0x800000

	)

1545 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1546 
	#EF_SPARC_32PLUS
 0x000100

	)

1547 
	#EF_SPARC_SUN_US1
 0x000200

	)

1548 
	#EF_SPARC_HAL_R1
 0x000400

	)

1549 
	#EF_SPARC_SUN_US3
 0x000800

	)

1553 
	#R_SPARC_NONE
 0

	)

1554 
	#R_SPARC_8
 1

	)

1555 
	#R_SPARC_16
 2

	)

1556 
	#R_SPARC_32
 3

	)

1557 
	#R_SPARC_DISP8
 4

	)

1558 
	#R_SPARC_DISP16
 5

	)

1559 
	#R_SPARC_DISP32
 6

	)

1560 
	#R_SPARC_WDISP30
 7

	)

1561 
	#R_SPARC_WDISP22
 8

	)

1562 
	#R_SPARC_HI22
 9

	)

1563 
	#R_SPARC_22
 10

	)

1564 
	#R_SPARC_13
 11

	)

1565 
	#R_SPARC_LO10
 12

	)

1566 
	#R_SPARC_GOT10
 13

	)

1567 
	#R_SPARC_GOT13
 14

	)

1568 
	#R_SPARC_GOT22
 15

	)

1569 
	#R_SPARC_PC10
 16

	)

1570 
	#R_SPARC_PC22
 17

	)

1571 
	#R_SPARC_WPLT30
 18

	)

1572 
	#R_SPARC_COPY
 19

	)

1573 
	#R_SPARC_GLOB_DAT
 20

	)

1574 
	#R_SPARC_JMP_SLOT
 21

	)

1575 
	#R_SPARC_RELATIVE
 22

	)

1576 
	#R_SPARC_UA32
 23

	)

1580 
	#R_SPARC_PLT32
 24

	)

1581 
	#R_SPARC_HIPLT22
 25

	)

1582 
	#R_SPARC_LOPLT10
 26

	)

1583 
	#R_SPARC_PCPLT32
 27

	)

1584 
	#R_SPARC_PCPLT22
 28

	)

1585 
	#R_SPARC_PCPLT10
 29

	)

1586 
	#R_SPARC_10
 30

	)

1587 
	#R_SPARC_11
 31

	)

1588 
	#R_SPARC_64
 32

	)

1589 
	#R_SPARC_OLO10
 33

	)

1590 
	#R_SPARC_HH22
 34

	)

1591 
	#R_SPARC_HM10
 35

	)

1592 
	#R_SPARC_LM22
 36

	)

1593 
	#R_SPARC_PC_HH22
 37

	)

1594 
	#R_SPARC_PC_HM10
 38

	)

1595 
	#R_SPARC_PC_LM22
 39

	)

1596 
	#R_SPARC_WDISP16
 40

	)

1597 
	#R_SPARC_WDISP19
 41

	)

1598 
	#R_SPARC_GLOB_JMP
 42

	)

1599 
	#R_SPARC_7
 43

	)

1600 
	#R_SPARC_5
 44

	)

1601 
	#R_SPARC_6
 45

	)

1602 
	#R_SPARC_DISP64
 46

	)

1603 
	#R_SPARC_PLT64
 47

	)

1604 
	#R_SPARC_HIX22
 48

	)

1605 
	#R_SPARC_LOX10
 49

	)

1606 
	#R_SPARC_H44
 50

	)

1607 
	#R_SPARC_M44
 51

	)

1608 
	#R_SPARC_L44
 52

	)

1609 
	#R_SPARC_REGISTER
 53

	)

1610 
	#R_SPARC_UA64
 54

	)

1611 
	#R_SPARC_UA16
 55

	)

1612 
	#R_SPARC_TLS_GD_HI22
 56

	)

1613 
	#R_SPARC_TLS_GD_LO10
 57

	)

1614 
	#R_SPARC_TLS_GD_ADD
 58

	)

1615 
	#R_SPARC_TLS_GD_CALL
 59

	)

1616 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1617 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1618 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1619 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1620 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1621 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1622 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1623 
	#R_SPARC_TLS_IE_HI22
 67

	)

1624 
	#R_SPARC_TLS_IE_LO10
 68

	)

1625 
	#R_SPARC_TLS_IE_LD
 69

	)

1626 
	#R_SPARC_TLS_IE_LDX
 70

	)

1627 
	#R_SPARC_TLS_IE_ADD
 71

	)

1628 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1629 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1630 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1631 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1632 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1633 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1634 
	#R_SPARC_TLS_TPOFF32
 78

	)

1635 
	#R_SPARC_TLS_TPOFF64
 79

	)

1636 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1637 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1638 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1639 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1640 
	#R_SPARC_GOTDATA_OP
 84

	)

1641 
	#R_SPARC_H34
 85

	)

1642 
	#R_SPARC_SIZE32
 86

	)

1643 
	#R_SPARC_SIZE64
 87

	)

1644 
	#R_SPARC_WDISP10
 88

	)

1645 
	#R_SPARC_JMP_IREL
 248

	)

1646 
	#R_SPARC_IRELATIVE
 249

	)

1647 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1648 
	#R_SPARC_GNU_VTENTRY
 251

	)

1649 
	#R_SPARC_REV32
 252

	)

1651 
	#R_SPARC_NUM
 253

	)

1655 
	#DT_SPARC_REGISTER
 0x70000001

	)

1656 
	#DT_SPARC_NUM
 2

	)

1662 
	#EF_MIPS_NOREORDER
 1

	)

1663 
	#EF_MIPS_PIC
 2

	)

1664 
	#EF_MIPS_CPIC
 4

	)

1665 
	#EF_MIPS_XGOT
 8

	)

1666 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1667 
	#EF_MIPS_ABI2
 32

	)

1668 
	#EF_MIPS_ABI_ON32
 64

	)

1669 
	#EF_MIPS_FP64
 512

	)

1670 
	#EF_MIPS_NAN2008
 1024

	)

1671 
	#EF_MIPS_ARCH
 0xf0000000

	)

1675 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1676 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1677 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1678 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1679 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1680 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1681 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1682 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1683 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1687 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1688 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1689 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1690 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1691 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1692 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1693 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1697 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1698 
	#SHN_MIPS_TEXT
 0xff01

	)

1699 
	#SHN_MIPS_DATA
 0xff02

	)

1700 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1701 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1705 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1706 
	#SHT_MIPS_MSYM
 0x70000001

	)

1707 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1708 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1709 
	#SHT_MIPS_UCODE
 0x70000004

	)

1710 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1711 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1712 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1713 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1714 
	#SHT_MIPS_RELD
 0x70000009

	)

1715 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1716 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1717 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1718 
	#SHT_MIPS_SHDR
 0x70000010

	)

1719 
	#SHT_MIPS_FDESC
 0x70000011

	)

1720 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1721 
	#SHT_MIPS_DENSE
 0x70000013

	)

1722 
	#SHT_MIPS_PDESC
 0x70000014

	)

1723 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1724 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1725 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1726 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1727 
	#SHT_MIPS_LINE
 0x70000019

	)

1728 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1729 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1730 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1731 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1732 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1733 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1734 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1735 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1736 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1737 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1738 
	#SHT_MIPS_XLATE
 0x70000024

	)

1739 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1740 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1741 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1742 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1743 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1744 
	#SHT_MIPS_XHASH
 0x7000002b

	)

1748 
	#SHF_MIPS_GPREL
 0x10000000

	)

1749 
	#SHF_MIPS_MERGE
 0x20000000

	)

1750 
	#SHF_MIPS_ADDR
 0x40000000

	)

1751 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1752 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1753 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1754 
	#SHF_MIPS_NAMES
 0x02000000

	)

1755 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1761 
	#STO_MIPS_DEFAULT
 0x0

	)

1762 
	#STO_MIPS_INTERNAL
 0x1

	)

1763 
	#STO_MIPS_HIDDEN
 0x2

	)

1764 
	#STO_MIPS_PROTECTED
 0x3

	)

1765 
	#STO_MIPS_PLT
 0x8

	)

1766 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1769 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1777 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1778 
Elf32_W‹d
 
	mgt_unu£d
;

1779 } 
	mgt_hódî
;

1782 
Elf32_W‹d
 
	mgt_g_vÆue
;

1783 
Elf32_W‹d
 
	mgt_byãs
;

1784 } 
	mgt_íåy
;

1785 } 
	tElf32_g±ab
;

1791 
Elf32_W‹d
 
	mri_g¥mask
;

1792 
Elf32_W‹d
 
	mri_˝rmask
[4];

1793 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1794 } 
	tElf32_RegInfo
;

1800 
	mköd
;

1802 
	msize
;

1803 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1805 
Elf32_W‹d
 
	möfo
;

1806 } 
	tElf_O±i⁄s
;

1810 
	#ODK_NULL
 0

	)

1811 
	#ODK_REGINFO
 1

	)

1812 
	#ODK_EXCEPTIONS
 2

	)

1813 
	#ODK_PAD
 3

	)

1814 
	#ODK_HWPATCH
 4

	)

1815 
	#ODK_FILL
 5

	)

1816 
	#ODK_TAGS
 6

	)

1817 
	#ODK_HWAND
 7

	)

1818 
	#ODK_HWOR
 8

	)

1822 
	#OEX_FPU_MIN
 0x1‡

	)

1823 
	#OEX_FPU_MAX
 0x1f00

	)

1824 
	#OEX_PAGE0
 0x10000

	)

1825 
	#OEX_SMM
 0x20000

	)

1826 
	#OEX_FPDBUG
 0x40000

	)

1827 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1828 
	#OEX_DISMISS
 0x80000

	)

1830 
	#OEX_FPU_INVAL
 0x10

	)

1831 
	#OEX_FPU_DIV0
 0x08

	)

1832 
	#OEX_FPU_OFLO
 0x04

	)

1833 
	#OEX_FPU_UFLO
 0x02

	)

1834 
	#OEX_FPU_INEX
 0x01

	)

1838 
	#OHW_R4KEOP
 0x1

	)

1839 
	#OHW_R8KPFETCH
 0x2

	)

1840 
	#OHW_R5KEOP
 0x4

	)

1841 
	#OHW_R5KCVTL
 0x8

	)

1843 
	#OPAD_PREFIX
 0x1

	)

1844 
	#OPAD_POSTFIX
 0x2

	)

1845 
	#OPAD_SYMBOL
 0x4

	)

1851 
Elf32_W‹d
 
	mhwp_Êags1
;

1852 
Elf32_W‹d
 
	mhwp_Êags2
;

1853 } 
	tElf_O±i⁄s_Hw
;

1857 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1858 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1862 
	#R_MIPS_NONE
 0

	)

1863 
	#R_MIPS_16
 1

	)

1864 
	#R_MIPS_32
 2

	)

1865 
	#R_MIPS_REL32
 3

	)

1866 
	#R_MIPS_26
 4

	)

1867 
	#R_MIPS_HI16
 5

	)

1868 
	#R_MIPS_LO16
 6

	)

1869 
	#R_MIPS_GPREL16
 7

	)

1870 
	#R_MIPS_LITERAL
 8

	)

1871 
	#R_MIPS_GOT16
 9

	)

1872 
	#R_MIPS_PC16
 10

	)

1873 
	#R_MIPS_CALL16
 11

	)

1874 
	#R_MIPS_GPREL32
 12

	)

1876 
	#R_MIPS_SHIFT5
 16

	)

1877 
	#R_MIPS_SHIFT6
 17

	)

1878 
	#R_MIPS_64
 18

	)

1879 
	#R_MIPS_GOT_DISP
 19

	)

1880 
	#R_MIPS_GOT_PAGE
 20

	)

1881 
	#R_MIPS_GOT_OFST
 21

	)

1882 
	#R_MIPS_GOT_HI16
 22

	)

1883 
	#R_MIPS_GOT_LO16
 23

	)

1884 
	#R_MIPS_SUB
 24

	)

1885 
	#R_MIPS_INSERT_A
 25

	)

1886 
	#R_MIPS_INSERT_B
 26

	)

1887 
	#R_MIPS_DELETE
 27

	)

1888 
	#R_MIPS_HIGHER
 28

	)

1889 
	#R_MIPS_HIGHEST
 29

	)

1890 
	#R_MIPS_CALL_HI16
 30

	)

1891 
	#R_MIPS_CALL_LO16
 31

	)

1892 
	#R_MIPS_SCN_DISP
 32

	)

1893 
	#R_MIPS_REL16
 33

	)

1894 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1895 
	#R_MIPS_PJUMP
 35

	)

1896 
	#R_MIPS_RELGOT
 36

	)

1897 
	#R_MIPS_JALR
 37

	)

1898 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1899 
	#R_MIPS_TLS_DTPREL32
 39

	)

1900 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1901 
	#R_MIPS_TLS_DTPREL64
 41

	)

1902 
	#R_MIPS_TLS_GD
 42

	)

1903 
	#R_MIPS_TLS_LDM
 43

	)

1904 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1905 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1906 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1907 
	#R_MIPS_TLS_TPREL32
 47

	)

1908 
	#R_MIPS_TLS_TPREL64
 48

	)

1909 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1910 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1911 
	#R_MIPS_GLOB_DAT
 51

	)

1912 
	#R_MIPS_COPY
 126

	)

1913 
	#R_MIPS_JUMP_SLOT
 127

	)

1915 
	#R_MIPS_NUM
 128

	)

1919 
	#PT_MIPS_REGINFO
 0x70000000

	)

1920 
	#PT_MIPS_RTPROC
 0x70000001

	)

1921 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1922 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1926 
	#PF_MIPS_LOCAL
 0x10000000

	)

1930 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1931 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1932 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1933 
	#DT_MIPS_IVERSION
 0x70000004

	)

1934 
	#DT_MIPS_FLAGS
 0x70000005

	)

1935 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1936 
	#DT_MIPS_MSYM
 0x70000007

	)

1937 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1938 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1939 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1940 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1941 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1942 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1943 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1944 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1945 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1946 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1947 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1948 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1950 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1951 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1953 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1954 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1956 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1958 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1960 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1962 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1964 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1965 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1966 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1967 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1968 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1969 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1970 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1971 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1972 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1973 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1974 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1975 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1977 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1979 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1980 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1981 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1983 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1987 
	#DT_MIPS_RWPLT
 0x70000034

	)

1991 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1993 
	#DT_MIPS_XHASH
 0x70000036

	)

1994 
	#DT_MIPS_NUM
 0x37

	)

1998 
	#RHF_NONE
 0

	)

1999 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

2000 
	#RHF_NOTPOT
 (1 << 1Ë

	)

2001 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

2002 
	#RHF_NO_MOVE
 (1 << 3)

	)

2003 
	#RHF_SGI_ONLY
 (1 << 4)

	)

2004 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

2005 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

2006 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

2007 
	#RHF_PIXIE
 (1 << 8)

	)

2008 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

2009 
	#RHF_REQUICKSTART
 (1 << 10)

	)

2010 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

2011 
	#RHF_CORD
 (1 << 12)

	)

2012 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

2013 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

2019 
Elf32_W‹d
 
	ml_«me
;

2020 
Elf32_W‹d
 
	ml_time_°amp
;

2021 
Elf32_W‹d
 
	ml_checksum
;

2022 
Elf32_W‹d
 
	ml_vîsi⁄
;

2023 
Elf32_W‹d
 
	ml_Êags
;

2024 } 
	tElf32_Lib
;

2028 
Elf64_W‹d
 
	ml_«me
;

2029 
Elf64_W‹d
 
	ml_time_°amp
;

2030 
Elf64_W‹d
 
	ml_checksum
;

2031 
Elf64_W‹d
 
	ml_vîsi⁄
;

2032 
Elf64_W‹d
 
	ml_Êags
;

2033 } 
	tElf64_Lib
;

2038 
	#LL_NONE
 0

	)

2039 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

2040 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

2041 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

2042 
	#LL_EXPORTS
 (1 << 3)

	)

2043 
	#LL_DELAY_LOAD
 (1 << 4)

	)

2044 
	#LL_DELTA
 (1 << 5)

	)

2048 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

2053 
Elf32_HÆf
 
	mvîsi⁄
;

2055 
	miß_Àvñ
;

2057 
	miß_ªv
;

2059 
	mg¥_size
;

2061 
	m˝r1_size
;

2063 
	m˝r2_size
;

2065 
	mÂ_abi
;

2067 
Elf32_W‹d
 
	miß_ext
;

2069 
Elf32_W‹d
 
	ma£s
;

2071 
Elf32_W‹d
 
	mÊags1
;

2072 
Elf32_W‹d
 
	mÊags2
;

2073 } 
	tElf_MIPS_ABIFœgs_v0
;

2077 
	#MIPS_AFL_REG_NONE
 0x00

	)

2078 
	#MIPS_AFL_REG_32
 0x01

	)

2079 
	#MIPS_AFL_REG_64
 0x02

	)

2080 
	#MIPS_AFL_REG_128
 0x03

	)

2084 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

2085 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

2086 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

2087 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

2088 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

2089 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

2090 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

2091 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

2092 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

2093 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

2094 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

2095 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

2096 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

2097 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

2101 
	#MIPS_AFL_EXT_XLR
 1

	)

2102 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

2103 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

2104 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

2105 
	#MIPS_AFL_EXT_OCTEON
 5

	)

2106 
	#MIPS_AFL_EXT_5900
 6

	)

2107 
	#MIPS_AFL_EXT_4650
 7

	)

2108 
	#MIPS_AFL_EXT_4010
 8

	)

2109 
	#MIPS_AFL_EXT_4100
 9

	)

2110 
	#MIPS_AFL_EXT_3900
 10

	)

2111 
	#MIPS_AFL_EXT_10000
 11

	)

2112 
	#MIPS_AFL_EXT_SB1
 12

	)

2113 
	#MIPS_AFL_EXT_4111
 13

	)

2114 
	#MIPS_AFL_EXT_4120
 14

	)

2115 
	#MIPS_AFL_EXT_5400
 15

	)

2116 
	#MIPS_AFL_EXT_5500
 16

	)

2117 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

2118 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

2121 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

2127 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

2129 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

2131 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

2133 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

2135 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

2137 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

2139 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

2141 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

2143 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

2150 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

2151 
	#EF_PARISC_EXT
 0x00020000

	)

2152 
	#EF_PARISC_LSB
 0x00040000

	)

2153 
	#EF_PARISC_WIDE
 0x00080000

	)

2154 
	#EF_PARISC_NO_KABP
 0x00100000

	)

2156 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

2157 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

2161 
	#EFA_PARISC_1_0
 0x020b

	)

2162 
	#EFA_PARISC_1_1
 0x0210

	)

2163 
	#EFA_PARISC_2_0
 0x0214

	)

2167 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

2169 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

2173 
	#SHT_PARISC_EXT
 0x70000000

	)

2174 
	#SHT_PARISC_UNWIND
 0x70000001

	)

2175 
	#SHT_PARISC_DOC
 0x70000002

	)

2179 
	#SHF_PARISC_SHORT
 0x20000000

	)

2180 
	#SHF_PARISC_HUGE
 0x40000000

	)

2181 
	#SHF_PARISC_SBP
 0x80000000

	)

2185 
	#STT_PARISC_MILLICODE
 13

	)

2187 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

2188 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

2192 
	#R_PARISC_NONE
 0

	)

2193 
	#R_PARISC_DIR32
 1

	)

2194 
	#R_PARISC_DIR21L
 2

	)

2195 
	#R_PARISC_DIR17R
 3

	)

2196 
	#R_PARISC_DIR17F
 4

	)

2197 
	#R_PARISC_DIR14R
 6

	)

2198 
	#R_PARISC_PCREL32
 9

	)

2199 
	#R_PARISC_PCREL21L
 10

	)

2200 
	#R_PARISC_PCREL17R
 11

	)

2201 
	#R_PARISC_PCREL17F
 12

	)

2202 
	#R_PARISC_PCREL14R
 14

	)

2203 
	#R_PARISC_DPREL21L
 18

	)

2204 
	#R_PARISC_DPREL14R
 22

	)

2205 
	#R_PARISC_GPREL21L
 26

	)

2206 
	#R_PARISC_GPREL14R
 30

	)

2207 
	#R_PARISC_LTOFF21L
 34

	)

2208 
	#R_PARISC_LTOFF14R
 38

	)

2209 
	#R_PARISC_SECREL32
 41

	)

2210 
	#R_PARISC_SEGBASE
 48

	)

2211 
	#R_PARISC_SEGREL32
 49

	)

2212 
	#R_PARISC_PLTOFF21L
 50

	)

2213 
	#R_PARISC_PLTOFF14R
 54

	)

2214 
	#R_PARISC_LTOFF_FPTR32
 57

	)

2215 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

2216 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

2217 
	#R_PARISC_FPTR64
 64

	)

2218 
	#R_PARISC_PLABEL32
 65

	)

2219 
	#R_PARISC_PLABEL21L
 66

	)

2220 
	#R_PARISC_PLABEL14R
 70

	)

2221 
	#R_PARISC_PCREL64
 72

	)

2222 
	#R_PARISC_PCREL22F
 74

	)

2223 
	#R_PARISC_PCREL14WR
 75

	)

2224 
	#R_PARISC_PCREL14DR
 76

	)

2225 
	#R_PARISC_PCREL16F
 77

	)

2226 
	#R_PARISC_PCREL16WF
 78

	)

2227 
	#R_PARISC_PCREL16DF
 79

	)

2228 
	#R_PARISC_DIR64
 80

	)

2229 
	#R_PARISC_DIR14WR
 83

	)

2230 
	#R_PARISC_DIR14DR
 84

	)

2231 
	#R_PARISC_DIR16F
 85

	)

2232 
	#R_PARISC_DIR16WF
 86

	)

2233 
	#R_PARISC_DIR16DF
 87

	)

2234 
	#R_PARISC_GPREL64
 88

	)

2235 
	#R_PARISC_GPREL14WR
 91

	)

2236 
	#R_PARISC_GPREL14DR
 92

	)

2237 
	#R_PARISC_GPREL16F
 93

	)

2238 
	#R_PARISC_GPREL16WF
 94

	)

2239 
	#R_PARISC_GPREL16DF
 95

	)

2240 
	#R_PARISC_LTOFF64
 96

	)

2241 
	#R_PARISC_LTOFF14WR
 99

	)

2242 
	#R_PARISC_LTOFF14DR
 100

	)

2243 
	#R_PARISC_LTOFF16F
 101

	)

2244 
	#R_PARISC_LTOFF16WF
 102

	)

2245 
	#R_PARISC_LTOFF16DF
 103

	)

2246 
	#R_PARISC_SECREL64
 104

	)

2247 
	#R_PARISC_SEGREL64
 112

	)

2248 
	#R_PARISC_PLTOFF14WR
 115

	)

2249 
	#R_PARISC_PLTOFF14DR
 116

	)

2250 
	#R_PARISC_PLTOFF16F
 117

	)

2251 
	#R_PARISC_PLTOFF16WF
 118

	)

2252 
	#R_PARISC_PLTOFF16DF
 119

	)

2253 
	#R_PARISC_LTOFF_FPTR64
 120

	)

2254 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

2255 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

2256 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

2257 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

2258 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

2259 
	#R_PARISC_LORESERVE
 128

	)

2260 
	#R_PARISC_COPY
 128

	)

2261 
	#R_PARISC_IPLT
 129

	)

2262 
	#R_PARISC_EPLT
 130

	)

2263 
	#R_PARISC_TPREL32
 153

	)

2264 
	#R_PARISC_TPREL21L
 154

	)

2265 
	#R_PARISC_TPREL14R
 158

	)

2266 
	#R_PARISC_LTOFF_TP21L
 162

	)

2267 
	#R_PARISC_LTOFF_TP14R
 166

	)

2268 
	#R_PARISC_LTOFF_TP14F
 167

	)

2269 
	#R_PARISC_TPREL64
 216

	)

2270 
	#R_PARISC_TPREL14WR
 219

	)

2271 
	#R_PARISC_TPREL14DR
 220

	)

2272 
	#R_PARISC_TPREL16F
 221

	)

2273 
	#R_PARISC_TPREL16WF
 222

	)

2274 
	#R_PARISC_TPREL16DF
 223

	)

2275 
	#R_PARISC_LTOFF_TP64
 224

	)

2276 
	#R_PARISC_LTOFF_TP14WR
 227

	)

2277 
	#R_PARISC_LTOFF_TP14DR
 228

	)

2278 
	#R_PARISC_LTOFF_TP16F
 229

	)

2279 
	#R_PARISC_LTOFF_TP16WF
 230

	)

2280 
	#R_PARISC_LTOFF_TP16DF
 231

	)

2281 
	#R_PARISC_GNU_VTENTRY
 232

	)

2282 
	#R_PARISC_GNU_VTINHERIT
 233

	)

2283 
	#R_PARISC_TLS_GD21L
 234

	)

2284 
	#R_PARISC_TLS_GD14R
 235

	)

2285 
	#R_PARISC_TLS_GDCALL
 236

	)

2286 
	#R_PARISC_TLS_LDM21L
 237

	)

2287 
	#R_PARISC_TLS_LDM14R
 238

	)

2288 
	#R_PARISC_TLS_LDMCALL
 239

	)

2289 
	#R_PARISC_TLS_LDO21L
 240

	)

2290 
	#R_PARISC_TLS_LDO14R
 241

	)

2291 
	#R_PARISC_TLS_DTPMOD32
 242

	)

2292 
	#R_PARISC_TLS_DTPMOD64
 243

	)

2293 
	#R_PARISC_TLS_DTPOFF32
 244

	)

2294 
	#R_PARISC_TLS_DTPOFF64
 245

	)

2295 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

2296 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

2297 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

2298 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

2299 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

2300 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

2301 
	#R_PARISC_HIRESERVE
 255

	)

2305 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

2306 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

2307 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

2308 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

2309 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

2310 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

2311 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

2312 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

2313 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

2314 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

2315 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

2316 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

2317 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

2318 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2319 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2321 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2322 
	#PT_PARISC_UNWIND
 0x70000001

	)

2326 
	#PF_PARISC_SBP
 0x08000000

	)

2328 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2329 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2330 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2331 
	#PF_HP_CODE
 0x01000000

	)

2332 
	#PF_HP_MODIFY
 0x02000000

	)

2333 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2334 
	#PF_HP_SBP
 0x08000000

	)

2341 
	#EF_ALPHA_32BIT
 1

	)

2342 
	#EF_ALPHA_CANRELAX
 2

	)

2347 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2348 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2352 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2355 
	#STO_ALPHA_NOPV
 0x80

	)

2356 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2360 
	#R_ALPHA_NONE
 0

	)

2361 
	#R_ALPHA_REFLONG
 1

	)

2362 
	#R_ALPHA_REFQUAD
 2

	)

2363 
	#R_ALPHA_GPREL32
 3

	)

2364 
	#R_ALPHA_LITERAL
 4

	)

2365 
	#R_ALPHA_LITUSE
 5

	)

2366 
	#R_ALPHA_GPDISP
 6

	)

2367 
	#R_ALPHA_BRADDR
 7

	)

2368 
	#R_ALPHA_HINT
 8

	)

2369 
	#R_ALPHA_SREL16
 9

	)

2370 
	#R_ALPHA_SREL32
 10

	)

2371 
	#R_ALPHA_SREL64
 11

	)

2372 
	#R_ALPHA_GPRELHIGH
 17

	)

2373 
	#R_ALPHA_GPRELLOW
 18

	)

2374 
	#R_ALPHA_GPREL16
 19

	)

2375 
	#R_ALPHA_COPY
 24

	)

2376 
	#R_ALPHA_GLOB_DAT
 25

	)

2377 
	#R_ALPHA_JMP_SLOT
 26

	)

2378 
	#R_ALPHA_RELATIVE
 27

	)

2379 
	#R_ALPHA_TLS_GD_HI
 28

	)

2380 
	#R_ALPHA_TLSGD
 29

	)

2381 
	#R_ALPHA_TLS_LDM
 30

	)

2382 
	#R_ALPHA_DTPMOD64
 31

	)

2383 
	#R_ALPHA_GOTDTPREL
 32

	)

2384 
	#R_ALPHA_DTPREL64
 33

	)

2385 
	#R_ALPHA_DTPRELHI
 34

	)

2386 
	#R_ALPHA_DTPRELLO
 35

	)

2387 
	#R_ALPHA_DTPREL16
 36

	)

2388 
	#R_ALPHA_GOTTPREL
 37

	)

2389 
	#R_ALPHA_TPREL64
 38

	)

2390 
	#R_ALPHA_TPRELHI
 39

	)

2391 
	#R_ALPHA_TPRELLO
 40

	)

2392 
	#R_ALPHA_TPREL16
 41

	)

2394 
	#R_ALPHA_NUM
 46

	)

2397 
	#LITUSE_ALPHA_ADDR
 0

	)

2398 
	#LITUSE_ALPHA_BASE
 1

	)

2399 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2400 
	#LITUSE_ALPHA_JSR
 3

	)

2401 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2402 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2405 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2406 
	#DT_ALPHA_NUM
 1

	)

2411 
	#EF_PPC_EMB
 0x80000000

	)

2414 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2415 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2419 
	#R_PPC_NONE
 0

	)

2420 
	#R_PPC_ADDR32
 1

	)

2421 
	#R_PPC_ADDR24
 2

	)

2422 
	#R_PPC_ADDR16
 3

	)

2423 
	#R_PPC_ADDR16_LO
 4

	)

2424 
	#R_PPC_ADDR16_HI
 5

	)

2425 
	#R_PPC_ADDR16_HA
 6

	)

2426 
	#R_PPC_ADDR14
 7

	)

2427 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2428 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2429 
	#R_PPC_REL24
 10

	)

2430 
	#R_PPC_REL14
 11

	)

2431 
	#R_PPC_REL14_BRTAKEN
 12

	)

2432 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2433 
	#R_PPC_GOT16
 14

	)

2434 
	#R_PPC_GOT16_LO
 15

	)

2435 
	#R_PPC_GOT16_HI
 16

	)

2436 
	#R_PPC_GOT16_HA
 17

	)

2437 
	#R_PPC_PLTREL24
 18

	)

2438 
	#R_PPC_COPY
 19

	)

2439 
	#R_PPC_GLOB_DAT
 20

	)

2440 
	#R_PPC_JMP_SLOT
 21

	)

2441 
	#R_PPC_RELATIVE
 22

	)

2442 
	#R_PPC_LOCAL24PC
 23

	)

2443 
	#R_PPC_UADDR32
 24

	)

2444 
	#R_PPC_UADDR16
 25

	)

2445 
	#R_PPC_REL32
 26

	)

2446 
	#R_PPC_PLT32
 27

	)

2447 
	#R_PPC_PLTREL32
 28

	)

2448 
	#R_PPC_PLT16_LO
 29

	)

2449 
	#R_PPC_PLT16_HI
 30

	)

2450 
	#R_PPC_PLT16_HA
 31

	)

2451 
	#R_PPC_SDAREL16
 32

	)

2452 
	#R_PPC_SECTOFF
 33

	)

2453 
	#R_PPC_SECTOFF_LO
 34

	)

2454 
	#R_PPC_SECTOFF_HI
 35

	)

2455 
	#R_PPC_SECTOFF_HA
 36

	)

2458 
	#R_PPC_TLS
 67

	)

2459 
	#R_PPC_DTPMOD32
 68

	)

2460 
	#R_PPC_TPREL16
 69

	)

2461 
	#R_PPC_TPREL16_LO
 70

	)

2462 
	#R_PPC_TPREL16_HI
 71

	)

2463 
	#R_PPC_TPREL16_HA
 72

	)

2464 
	#R_PPC_TPREL32
 73

	)

2465 
	#R_PPC_DTPREL16
 74

	)

2466 
	#R_PPC_DTPREL16_LO
 75

	)

2467 
	#R_PPC_DTPREL16_HI
 76

	)

2468 
	#R_PPC_DTPREL16_HA
 77

	)

2469 
	#R_PPC_DTPREL32
 78

	)

2470 
	#R_PPC_GOT_TLSGD16
 79

	)

2471 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2472 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2473 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2474 
	#R_PPC_GOT_TLSLD16
 83

	)

2475 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2476 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2477 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2478 
	#R_PPC_GOT_TPREL16
 87

	)

2479 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2480 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2481 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2482 
	#R_PPC_GOT_DTPREL16
 91

	)

2483 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2484 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2485 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2486 
	#R_PPC_TLSGD
 95

	)

2487 
	#R_PPC_TLSLD
 96

	)

2491 
	#R_PPC_EMB_NADDR32
 101

	)

2492 
	#R_PPC_EMB_NADDR16
 102

	)

2493 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2494 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2495 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2496 
	#R_PPC_EMB_SDAI16
 106

	)

2497 
	#R_PPC_EMB_SDA2I16
 107

	)

2498 
	#R_PPC_EMB_SDA2REL
 108

	)

2499 
	#R_PPC_EMB_SDA21
 109

	)

2500 
	#R_PPC_EMB_MRKREF
 110

	)

2501 
	#R_PPC_EMB_RELSEC16
 111

	)

2502 
	#R_PPC_EMB_RELST_LO
 112

	)

2503 
	#R_PPC_EMB_RELST_HI
 113

	)

2504 
	#R_PPC_EMB_RELST_HA
 114

	)

2505 
	#R_PPC_EMB_BIT_FLD
 115

	)

2506 
	#R_PPC_EMB_RELSDA
 116

	)

2509 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2510 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2511 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2512 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2513 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2514 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2517 
	#R_PPC_IRELATIVE
 248

	)

2520 
	#R_PPC_REL16
 249

	)

2521 
	#R_PPC_REL16_LO
 250

	)

2522 
	#R_PPC_REL16_HI
 251

	)

2523 
	#R_PPC_REL16_HA
 252

	)

2527 
	#R_PPC_TOC16
 255

	)

2530 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2531 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2532 
	#DT_PPC_NUM
 2

	)

2535 
	#PPC_OPT_TLS
 1

	)

2538 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2539 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2540 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2541 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2542 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2543 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2544 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2545 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2546 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2547 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2548 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2549 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2550 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2551 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2552 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2553 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2554 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2555 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2557 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2558 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2559 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2560 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2562 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2563 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2564 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2565 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2566 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2567 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2568 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2569 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2571 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2572 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2573 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2574 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2575 
	#R_PPC64_ADDR30
 37

	)

2576 
	#R_PPC64_ADDR64
 38

	)

2577 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2578 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2579 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2580 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2581 
	#R_PPC64_UADDR64
 43

	)

2582 
	#R_PPC64_REL64
 44

	)

2583 
	#R_PPC64_PLT64
 45

	)

2584 
	#R_PPC64_PLTREL64
 46

	)

2585 
	#R_PPC64_TOC16
 47

	)

2586 
	#R_PPC64_TOC16_LO
 48

	)

2587 
	#R_PPC64_TOC16_HI
 49

	)

2588 
	#R_PPC64_TOC16_HA
 50

	)

2589 
	#R_PPC64_TOC
 51

	)

2590 
	#R_PPC64_PLTGOT16
 52

	)

2591 
	#R_PPC64_PLTGOT16_LO
 53

	)

2592 
	#R_PPC64_PLTGOT16_HI
 54

	)

2593 
	#R_PPC64_PLTGOT16_HA
 55

	)

2595 
	#R_PPC64_ADDR16_DS
 56

	)

2596 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2597 
	#R_PPC64_GOT16_DS
 58

	)

2598 
	#R_PPC64_GOT16_LO_DS
 59

	)

2599 
	#R_PPC64_PLT16_LO_DS
 60

	)

2600 
	#R_PPC64_SECTOFF_DS
 61

	)

2601 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2602 
	#R_PPC64_TOC16_DS
 63

	)

2603 
	#R_PPC64_TOC16_LO_DS
 64

	)

2604 
	#R_PPC64_PLTGOT16_DS
 65

	)

2605 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2608 
	#R_PPC64_TLS
 67

	)

2609 
	#R_PPC64_DTPMOD64
 68

	)

2610 
	#R_PPC64_TPREL16
 69

	)

2611 
	#R_PPC64_TPREL16_LO
 70

	)

2612 
	#R_PPC64_TPREL16_HI
 71

	)

2613 
	#R_PPC64_TPREL16_HA
 72

	)

2614 
	#R_PPC64_TPREL64
 73

	)

2615 
	#R_PPC64_DTPREL16
 74

	)

2616 
	#R_PPC64_DTPREL16_LO
 75

	)

2617 
	#R_PPC64_DTPREL16_HI
 76

	)

2618 
	#R_PPC64_DTPREL16_HA
 77

	)

2619 
	#R_PPC64_DTPREL64
 78

	)

2620 
	#R_PPC64_GOT_TLSGD16
 79

	)

2621 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2622 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2623 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2624 
	#R_PPC64_GOT_TLSLD16
 83

	)

2625 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2626 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2627 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2628 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2629 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2630 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2631 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2632 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2633 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2634 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2635 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2636 
	#R_PPC64_TPREL16_DS
 95

	)

2637 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2638 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2639 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2640 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2641 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2642 
	#R_PPC64_DTPREL16_DS
 101

	)

2643 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2644 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2645 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2646 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2647 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2648 
	#R_PPC64_TLSGD
 107

	)

2649 
	#R_PPC64_TLSLD
 108

	)

2650 
	#R_PPC64_TOCSAVE
 109

	)

2653 
	#R_PPC64_ADDR16_HIGH
 110

	)

2654 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2655 
	#R_PPC64_TPREL16_HIGH
 112

	)

2656 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2657 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2658 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2661 
	#R_PPC64_JMP_IREL
 247

	)

2662 
	#R_PPC64_IRELATIVE
 248

	)

2663 
	#R_PPC64_REL16
 249

	)

2664 
	#R_PPC64_REL16_LO
 250

	)

2665 
	#R_PPC64_REL16_HI
 251

	)

2666 
	#R_PPC64_REL16_HA
 252

	)

2672 
	#EF_PPC64_ABI
 3

	)

2675 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2676 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2677 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2678 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2679 
	#DT_PPC64_NUM
 4

	)

2682 
	#PPC64_OPT_TLS
 1

	)

2683 
	#PPC64_OPT_MULTI_TOC
 2

	)

2684 
	#PPC64_OPT_LOCALENTRY
 4

	)

2687 
	#STO_PPC64_LOCAL_BIT
 5

	)

2688 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2689 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2690 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2696 
	#EF_ARM_RELEXEC
 0x01

	)

2697 
	#EF_ARM_HASENTRY
 0x02

	)

2698 
	#EF_ARM_INTERWORK
 0x04

	)

2699 
	#EF_ARM_APCS_26
 0x08

	)

2700 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2701 
	#EF_ARM_PIC
 0x20

	)

2702 
	#EF_ARM_ALIGN8
 0x40

	)

2703 
	#EF_ARM_NEW_ABI
 0x80

	)

2704 
	#EF_ARM_OLD_ABI
 0x100

	)

2705 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2706 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2707 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2709 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2710 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2715 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2716 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2717 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2718 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2721 
	#EF_ARM_BE8
 0x00800000

	)

2722 
	#EF_ARM_LE8
 0x00400000

	)

2724 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2725 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2726 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2727 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2728 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2729 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2730 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2733 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2734 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2737 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2738 
	#SHF_ARM_COMDEF
 0x80000000

	)

2742 
	#PF_ARM_SB
 0x10000000

	)

2744 
	#PF_ARM_PI
 0x20000000

	)

2745 
	#PF_ARM_ABS
 0x40000000

	)

2748 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2751 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2752 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2753 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2758 
	#R_AARCH64_NONE
 0

	)

2761 
	#R_AARCH64_P32_ABS32
 1

	)

2762 
	#R_AARCH64_P32_COPY
 180

	)

2763 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2764 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2765 
	#R_AARCH64_P32_RELATIVE
 183

	)

2766 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2767 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2768 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2769 
	#R_AARCH64_P32_TLSDESC
 187

	)

2770 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2773 
	#R_AARCH64_ABS64
 257

	)

2774 
	#R_AARCH64_ABS32
 258

	)

2775 
	#R_AARCH64_ABS16
 259

	)

2776 
	#R_AARCH64_PREL64
 260

	)

2777 
	#R_AARCH64_PREL32
 261

	)

2778 
	#R_AARCH64_PREL16
 262

	)

2779 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2780 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2781 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2782 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2783 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2784 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2785 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2786 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2787 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2788 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2789 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2790 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2791 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2792 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2793 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2794 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2795 
	#R_AARCH64_TSTBR14
 279

	)

2796 
	#R_AARCH64_CONDBR19
 280

	)

2797 
	#R_AARCH64_JUMP26
 282

	)

2798 
	#R_AARCH64_CALL26
 283

	)

2799 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2800 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2801 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2802 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2803 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2804 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2805 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2806 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2807 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2808 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2809 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2810 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2811 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2812 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2813 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2814 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2815 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2816 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2817 
	#R_AARCH64_GOTREL64
 307

	)

2818 
	#R_AARCH64_GOTREL32
 308

	)

2819 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2820 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2821 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2822 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2823 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2824 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2825 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2826 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2827 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2828 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2829 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2830 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2831 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2832 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2833 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2834 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2835 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2836 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2837 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2838 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2839 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2840 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2841 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2842 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2843 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2844 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2845 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2846 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2847 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2848 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2849 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2850 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2851 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2852 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2853 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2854 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2855 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2856 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2857 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2858 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2859 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2860 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2861 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2862 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2863 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2864 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2865 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2866 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2867 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2868 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2869 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2870 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2871 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2872 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2873 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2874 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2875 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2876 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2877 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2878 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2879 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2880 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2881 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2882 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2883 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2884 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2885 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2886 
	#R_AARCH64_COPY
 1024

	)

2887 
	#R_AARCH64_GLOB_DAT
 1025

	)

2888 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2889 
	#R_AARCH64_RELATIVE
 1027

	)

2890 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2891 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2892 
	#R_AARCH64_TLS_TPREL
 1030

	)

2893 
	#R_AARCH64_TLSDESC
 1031

	)

2894 
	#R_AARCH64_IRELATIVE
 1032

	)

2897 
	#DT_AARCH64_BTI_PLT
 (
DT_LOPROC
 + 1)

	)

2898 
	#DT_AARCH64_PAC_PLT
 (
DT_LOPROC
 + 3)

	)

2899 
	#DT_AARCH64_VARIANT_PCS
 (
DT_LOPROC
 + 5)

	)

2900 
	#DT_AARCH64_NUM
 6

	)

2903 
	#STO_AARCH64_VARIANT_PCS
 0x80

	)

2907 
	#R_ARM_NONE
 0

	)

2908 
	#R_ARM_PC24
 1

	)

2910 
	#R_ARM_ABS32
 2

	)

2911 
	#R_ARM_REL32
 3

	)

2912 
	#R_ARM_PC13
 4

	)

2913 
	#R_ARM_ABS16
 5

	)

2914 
	#R_ARM_ABS12
 6

	)

2915 
	#R_ARM_THM_ABS5
 7

	)

2916 
	#R_ARM_ABS8
 8

	)

2917 
	#R_ARM_SBREL32
 9

	)

2918 
	#R_ARM_THM_PC22
 10

	)

2919 
	#R_ARM_THM_PC8
 11

	)

2921 
	#R_ARM_AMP_VCALL9
 12

	)

2922 
	#R_ARM_SWI24
 13

	)

2923 
	#R_ARM_TLS_DESC
 13

	)

2924 
	#R_ARM_THM_SWI8
 14

	)

2925 
	#R_ARM_XPC25
 15

	)

2926 
	#R_ARM_THM_XPC22
 16

	)

2927 
	#R_ARM_TLS_DTPMOD32
 17

	)

2928 
	#R_ARM_TLS_DTPOFF32
 18

	)

2929 
	#R_ARM_TLS_TPOFF32
 19

	)

2930 
	#R_ARM_COPY
 20

	)

2931 
	#R_ARM_GLOB_DAT
 21

	)

2932 
	#R_ARM_JUMP_SLOT
 22

	)

2933 
	#R_ARM_RELATIVE
 23

	)

2934 
	#R_ARM_GOTOFF
 24

	)

2935 
	#R_ARM_GOTPC
 25

	)

2936 
	#R_ARM_GOT32
 26

	)

2937 
	#R_ARM_PLT32
 27

	)

2938 
	#R_ARM_CALL
 28

	)

2939 
	#R_ARM_JUMP24
 29

	)

2941 
	#R_ARM_THM_JUMP24
 30

	)

2942 
	#R_ARM_BASE_ABS
 31

	)

2943 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2944 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2945 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2946 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2947 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2948 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2949 
	#R_ARM_TARGET1
 38

	)

2950 
	#R_ARM_SBREL31
 39

	)

2951 
	#R_ARM_V4BX
 40

	)

2952 
	#R_ARM_TARGET2
 41

	)

2953 
	#R_ARM_PREL31
 42

	)

2954 
	#R_ARM_MOVW_ABS_NC
 43

	)

2955 
	#R_ARM_MOVT_ABS
 44

	)

2956 
	#R_ARM_MOVW_PREL_NC
 45

	)

2957 
	#R_ARM_MOVT_PREL
 46

	)

2958 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2959 
	#R_ARM_THM_MOVT_ABS
 48

	)

2961 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2963 
	#R_ARM_THM_MOVT_PREL
 50

	)

2965 
	#R_ARM_THM_JUMP19
 51

	)

2967 
	#R_ARM_THM_JUMP6
 52

	)

2969 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2971 
	#R_ARM_THM_PC12
 54

	)

2973 
	#R_ARM_ABS32_NOI
 55

	)

2974 
	#R_ARM_REL32_NOI
 56

	)

2975 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2976 
	#R_ARM_ALU_PC_G0
 58

	)

2977 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2978 
	#R_ARM_ALU_PC_G1
 60

	)

2979 
	#R_ARM_ALU_PC_G2
 61

	)

2980 
	#R_ARM_LDR_PC_G1
 62

	)

2981 
	#R_ARM_LDR_PC_G2
 63

	)

2982 
	#R_ARM_LDRS_PC_G0
 64

	)

2984 
	#R_ARM_LDRS_PC_G1
 65

	)

2986 
	#R_ARM_LDRS_PC_G2
 66

	)

2988 
	#R_ARM_LDC_PC_G0
 67

	)

2989 
	#R_ARM_LDC_PC_G1
 68

	)

2990 
	#R_ARM_LDC_PC_G2
 69

	)

2991 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2992 
	#R_ARM_ALU_SB_G0
 71

	)

2993 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2994 
	#R_ARM_ALU_SB_G1
 73

	)

2995 
	#R_ARM_ALU_SB_G2
 74

	)

2996 
	#R_ARM_LDR_SB_G0
 75

	)

2998 
	#R_ARM_LDR_SB_G1
 76

	)

3000 
	#R_ARM_LDR_SB_G2
 77

	)

3002 
	#R_ARM_LDRS_SB_G0
 78

	)

3004 
	#R_ARM_LDRS_SB_G1
 79

	)

3006 
	#R_ARM_LDRS_SB_G2
 80

	)

3008 
	#R_ARM_LDC_SB_G0
 81

	)

3009 
	#R_ARM_LDC_SB_G1
 82

	)

3010 
	#R_ARM_LDC_SB_G2
 83

	)

3011 
	#R_ARM_MOVW_BREL_NC
 84

	)

3013 
	#R_ARM_MOVT_BREL
 85

	)

3015 
	#R_ARM_MOVW_BREL
 86

	)

3017 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

3019 
	#R_ARM_THM_MOVT_BREL
 88

	)

3021 
	#R_ARM_THM_MOVW_BREL
 89

	)

3023 
	#R_ARM_TLS_GOTDESC
 90

	)

3024 
	#R_ARM_TLS_CALL
 91

	)

3025 
	#R_ARM_TLS_DESCSEQ
 92

	)

3026 
	#R_ARM_THM_TLS_CALL
 93

	)

3027 
	#R_ARM_PLT32_ABS
 94

	)

3028 
	#R_ARM_GOT_ABS
 95

	)

3029 
	#R_ARM_GOT_PREL
 96

	)

3030 
	#R_ARM_GOT_BREL12
 97

	)

3032 
	#R_ARM_GOTOFF12
 98

	)

3034 
	#R_ARM_GOTRELAX
 99

	)

3035 
	#R_ARM_GNU_VTENTRY
 100

	)

3036 
	#R_ARM_GNU_VTINHERIT
 101

	)

3037 
	#R_ARM_THM_PC11
 102

	)

3038 
	#R_ARM_THM_PC9
 103

	)

3040 
	#R_ARM_TLS_GD32
 104

	)

3042 
	#R_ARM_TLS_LDM32
 105

	)

3044 
	#R_ARM_TLS_LDO32
 106

	)

3046 
	#R_ARM_TLS_IE32
 107

	)

3048 
	#R_ARM_TLS_LE32
 108

	)

3050 
	#R_ARM_TLS_LDO12
 109

	)

3052 
	#R_ARM_TLS_LE12
 110

	)

3054 
	#R_ARM_TLS_IE12GP
 111

	)

3056 
	#R_ARM_ME_TOO
 128

	)

3057 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

3058 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

3059 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

3060 
	#R_ARM_THM_GOT_BREL12
 131

	)

3062 
	#R_ARM_IRELATIVE
 160

	)

3063 
	#R_ARM_RXPC25
 249

	)

3064 
	#R_ARM_RSBREL32
 250

	)

3065 
	#R_ARM_THM_RPC22
 251

	)

3066 
	#R_ARM_RREL32
 252

	)

3067 
	#R_ARM_RABS22
 253

	)

3068 
	#R_ARM_RPC24
 254

	)

3069 
	#R_ARM_RBASE
 255

	)

3071 
	#R_ARM_NUM
 256

	)

3074 
	#R_CKCORE_NONE
 0

	)

3075 
	#R_CKCORE_ADDR32
 1

	)

3076 
	#R_CKCORE_PCRELIMM8BY4
 2

	)

3077 
	#R_CKCORE_PCRELIMM11BY2
 3

	)

3078 
	#R_CKCORE_PCREL32
 5

	)

3079 
	#R_CKCORE_PCRELJSR_IMM11BY2
 6

	)

3080 
	#R_CKCORE_RELATIVE
 9

	)

3081 
	#R_CKCORE_COPY
 10

	)

3082 
	#R_CKCORE_GLOB_DAT
 11

	)

3083 
	#R_CKCORE_JUMP_SLOT
 12

	)

3084 
	#R_CKCORE_GOTOFF
 13

	)

3085 
	#R_CKCORE_GOTPC
 14

	)

3086 
	#R_CKCORE_GOT32
 15

	)

3087 
	#R_CKCORE_PLT32
 16

	)

3088 
	#R_CKCORE_ADDRGOT
 17

	)

3089 
	#R_CKCORE_ADDRPLT
 18

	)

3090 
	#R_CKCORE_PCREL_IMM26BY2
 19

	)

3091 
	#R_CKCORE_PCREL_IMM16BY2
 20

	)

3092 
	#R_CKCORE_PCREL_IMM16BY4
 21

	)

3093 
	#R_CKCORE_PCREL_IMM10BY2
 22

	)

3094 
	#R_CKCORE_PCREL_IMM10BY4
 23

	)

3095 
	#R_CKCORE_ADDR_HI16
 24

	)

3097 
	#R_CKCORE_ADDR_LO16
 25

	)

3098 
	#R_CKCORE_GOTPC_HI16
 26

	)

3100 
	#R_CKCORE_GOTPC_LO16
 27

	)

3101 
	#R_CKCORE_GOTOFF_HI16
 28

	)

3103 
	#R_CKCORE_GOTOFF_LO16
 29

	)

3104 
	#R_CKCORE_GOT12
 30

	)

3105 
	#R_CKCORE_GOT_HI16
 31

	)

3107 
	#R_CKCORE_GOT_LO16
 32

	)

3108 
	#R_CKCORE_PLT12
 33

	)

3109 
	#R_CKCORE_PLT_HI16
 34

	)

3111 
	#R_CKCORE_PLT_LO16
 35

	)

3112 
	#R_CKCORE_ADDRGOT_HI16
 36

	)

3114 
	#R_CKCORE_ADDRGOT_LO16
 37

	)

3115 
	#R_CKCORE_ADDRPLT_HI16
 38

	)

3117 
	#R_CKCORE_ADDRPLT_LO16
 39

	)

3118 
	#R_CKCORE_PCREL_JSR_IMM26BY2
 40

	)

3119 
	#R_CKCORE_TOFFSET_LO16
 41

	)

3120 
	#R_CKCORE_DOFFSET_LO16
 42

	)

3121 
	#R_CKCORE_PCREL_IMM18BY2
 43

	)

3122 
	#R_CKCORE_DOFFSET_IMM18
 44

	)

3123 
	#R_CKCORE_DOFFSET_IMM18BY2
 45

	)

3124 
	#R_CKCORE_DOFFSET_IMM18BY4
 46

	)

3125 
	#R_CKCORE_GOT_IMM18BY4
 48

	)

3126 
	#R_CKCORE_PLT_IMM18BY4
 49

	)

3127 
	#R_CKCORE_PCREL_IMM7BY4
 50

	)

3128 
	#R_CKCORE_TLS_LE32
 51

	)

3129 
	#R_CKCORE_TLS_IE32
 52

	)

3130 
	#R_CKCORE_TLS_GD32
 53

	)

3131 
	#R_CKCORE_TLS_LDM32
 54

	)

3132 
	#R_CKCORE_TLS_LDO32
 55

	)

3133 
	#R_CKCORE_TLS_DTPMOD32
 56

	)

3134 
	#R_CKCORE_TLS_DTPOFF32
 57

	)

3135 
	#R_CKCORE_TLS_TPOFF32
 58

	)

3138 
	#EF_CSKY_ABIMASK
 0XF0000000

	)

3139 
	#EF_CSKY_OTHER
 0X0FFF0000

	)

3140 
	#EF_CSKY_PROCESSOR
 0X0000FFFF

	)

3142 
	#EF_CSKY_ABIV1
 0X10000000

	)

3143 
	#EF_CSKY_ABIV2
 0X20000000

	)

3146 
	#SHT_CSKY_ATTRIBUTES
 (
SHT_LOPROC
 + 1)

	)

3151 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

3152 
	#EF_IA_64_ABI64
 0x00000010

	)

3153 
	#EF_IA_64_ARCH
 0xff000000

	)

3156 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

3157 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

3158 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

3159 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

3160 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

3163 
	#PF_IA_64_NORECOV
 0x80000000

	)

3166 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

3167 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

3170 
	#SHF_IA_64_SHORT
 0x10000000

	)

3171 
	#SHF_IA_64_NORECOV
 0x20000000

	)

3174 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

3175 
	#DT_IA_64_NUM
 1

	)

3178 
	#R_IA64_NONE
 0x00

	)

3179 
	#R_IA64_IMM14
 0x21

	)

3180 
	#R_IA64_IMM22
 0x22

	)

3181 
	#R_IA64_IMM64
 0x23

	)

3182 
	#R_IA64_DIR32MSB
 0x24

	)

3183 
	#R_IA64_DIR32LSB
 0x25

	)

3184 
	#R_IA64_DIR64MSB
 0x26

	)

3185 
	#R_IA64_DIR64LSB
 0x27

	)

3186 
	#R_IA64_GPREL22
 0x2®

	)

3187 
	#R_IA64_GPREL64I
 0x2b

	)

3188 
	#R_IA64_GPREL32MSB
 0x2¯

	)

3189 
	#R_IA64_GPREL32LSB
 0x2d

	)

3190 
	#R_IA64_GPREL64MSB
 0x2ê

	)

3191 
	#R_IA64_GPREL64LSB
 0x2‡

	)

3192 
	#R_IA64_LTOFF22
 0x32

	)

3193 
	#R_IA64_LTOFF64I
 0x33

	)

3194 
	#R_IA64_PLTOFF22
 0x3®

	)

3195 
	#R_IA64_PLTOFF64I
 0x3b

	)

3196 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

3197 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

3198 
	#R_IA64_FPTR64I
 0x43

	)

3199 
	#R_IA64_FPTR32MSB
 0x44

	)

3200 
	#R_IA64_FPTR32LSB
 0x45

	)

3201 
	#R_IA64_FPTR64MSB
 0x46

	)

3202 
	#R_IA64_FPTR64LSB
 0x47

	)

3203 
	#R_IA64_PCREL60B
 0x48

	)

3204 
	#R_IA64_PCREL21B
 0x49

	)

3205 
	#R_IA64_PCREL21M
 0x4®

	)

3206 
	#R_IA64_PCREL21F
 0x4b

	)

3207 
	#R_IA64_PCREL32MSB
 0x4¯

	)

3208 
	#R_IA64_PCREL32LSB
 0x4d

	)

3209 
	#R_IA64_PCREL64MSB
 0x4ê

	)

3210 
	#R_IA64_PCREL64LSB
 0x4‡

	)

3211 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

3212 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

3213 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

3214 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

3215 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

3216 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

3217 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

3218 
	#R_IA64_SEGREL32LSB
 0x5d

	)

3219 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

3220 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

3221 
	#R_IA64_SECREL32MSB
 0x64

	)

3222 
	#R_IA64_SECREL32LSB
 0x65

	)

3223 
	#R_IA64_SECREL64MSB
 0x66

	)

3224 
	#R_IA64_SECREL64LSB
 0x67

	)

3225 
	#R_IA64_REL32MSB
 0x6¯

	)

3226 
	#R_IA64_REL32LSB
 0x6d

	)

3227 
	#R_IA64_REL64MSB
 0x6ê

	)

3228 
	#R_IA64_REL64LSB
 0x6‡

	)

3229 
	#R_IA64_LTV32MSB
 0x74

	)

3230 
	#R_IA64_LTV32LSB
 0x75

	)

3231 
	#R_IA64_LTV64MSB
 0x76

	)

3232 
	#R_IA64_LTV64LSB
 0x77

	)

3233 
	#R_IA64_PCREL21BI
 0x79

	)

3234 
	#R_IA64_PCREL22
 0x7®

	)

3235 
	#R_IA64_PCREL64I
 0x7b

	)

3236 
	#R_IA64_IPLTMSB
 0x80

	)

3237 
	#R_IA64_IPLTLSB
 0x81

	)

3238 
	#R_IA64_COPY
 0x84

	)

3239 
	#R_IA64_SUB
 0x85

	)

3240 
	#R_IA64_LTOFF22X
 0x86

	)

3241 
	#R_IA64_LDXMOV
 0x87

	)

3242 
	#R_IA64_TPREL14
 0x91

	)

3243 
	#R_IA64_TPREL22
 0x92

	)

3244 
	#R_IA64_TPREL64I
 0x93

	)

3245 
	#R_IA64_TPREL64MSB
 0x96

	)

3246 
	#R_IA64_TPREL64LSB
 0x97

	)

3247 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

3248 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

3249 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

3250 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

3251 
	#R_IA64_DTPREL14
 0xb1

	)

3252 
	#R_IA64_DTPREL22
 0xb2

	)

3253 
	#R_IA64_DTPREL64I
 0xb3

	)

3254 
	#R_IA64_DTPREL32MSB
 0xb4

	)

3255 
	#R_IA64_DTPREL32LSB
 0xb5

	)

3256 
	#R_IA64_DTPREL64MSB
 0xb6

	)

3257 
	#R_IA64_DTPREL64LSB
 0xb7

	)

3258 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

3263 
	#EF_SH_MACH_MASK
 0x1f

	)

3264 
	#EF_SH_UNKNOWN
 0x0

	)

3265 
	#EF_SH1
 0x1

	)

3266 
	#EF_SH2
 0x2

	)

3267 
	#EF_SH3
 0x3

	)

3268 
	#EF_SH_DSP
 0x4

	)

3269 
	#EF_SH3_DSP
 0x5

	)

3270 
	#EF_SH4AL_DSP
 0x6

	)

3271 
	#EF_SH3E
 0x8

	)

3272 
	#EF_SH4
 0x9

	)

3273 
	#EF_SH2E
 0xb

	)

3274 
	#EF_SH4A
 0xc

	)

3275 
	#EF_SH2A
 0xd

	)

3276 
	#EF_SH4_NOFPU
 0x10

	)

3277 
	#EF_SH4A_NOFPU
 0x11

	)

3278 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

3279 
	#EF_SH2A_NOFPU
 0x13

	)

3280 
	#EF_SH3_NOMMU
 0x14

	)

3281 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

3282 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

3283 
	#EF_SH2A_SH4
 0x17

	)

3284 
	#EF_SH2A_SH3E
 0x18

	)

3287 
	#R_SH_NONE
 0

	)

3288 
	#R_SH_DIR32
 1

	)

3289 
	#R_SH_REL32
 2

	)

3290 
	#R_SH_DIR8WPN
 3

	)

3291 
	#R_SH_IND12W
 4

	)

3292 
	#R_SH_DIR8WPL
 5

	)

3293 
	#R_SH_DIR8WPZ
 6

	)

3294 
	#R_SH_DIR8BP
 7

	)

3295 
	#R_SH_DIR8W
 8

	)

3296 
	#R_SH_DIR8L
 9

	)

3297 
	#R_SH_SWITCH16
 25

	)

3298 
	#R_SH_SWITCH32
 26

	)

3299 
	#R_SH_USES
 27

	)

3300 
	#R_SH_COUNT
 28

	)

3301 
	#R_SH_ALIGN
 29

	)

3302 
	#R_SH_CODE
 30

	)

3303 
	#R_SH_DATA
 31

	)

3304 
	#R_SH_LABEL
 32

	)

3305 
	#R_SH_SWITCH8
 33

	)

3306 
	#R_SH_GNU_VTINHERIT
 34

	)

3307 
	#R_SH_GNU_VTENTRY
 35

	)

3308 
	#R_SH_TLS_GD_32
 144

	)

3309 
	#R_SH_TLS_LD_32
 145

	)

3310 
	#R_SH_TLS_LDO_32
 146

	)

3311 
	#R_SH_TLS_IE_32
 147

	)

3312 
	#R_SH_TLS_LE_32
 148

	)

3313 
	#R_SH_TLS_DTPMOD32
 149

	)

3314 
	#R_SH_TLS_DTPOFF32
 150

	)

3315 
	#R_SH_TLS_TPOFF32
 151

	)

3316 
	#R_SH_GOT32
 160

	)

3317 
	#R_SH_PLT32
 161

	)

3318 
	#R_SH_COPY
 162

	)

3319 
	#R_SH_GLOB_DAT
 163

	)

3320 
	#R_SH_JMP_SLOT
 164

	)

3321 
	#R_SH_RELATIVE
 165

	)

3322 
	#R_SH_GOTOFF
 166

	)

3323 
	#R_SH_GOTPC
 167

	)

3325 
	#R_SH_NUM
 256

	)

3331 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

3335 
	#R_390_NONE
 0

	)

3336 
	#R_390_8
 1

	)

3337 
	#R_390_12
 2

	)

3338 
	#R_390_16
 3

	)

3339 
	#R_390_32
 4

	)

3340 
	#R_390_PC32
 5

	)

3341 
	#R_390_GOT12
 6

	)

3342 
	#R_390_GOT32
 7

	)

3343 
	#R_390_PLT32
 8

	)

3344 
	#R_390_COPY
 9

	)

3345 
	#R_390_GLOB_DAT
 10

	)

3346 
	#R_390_JMP_SLOT
 11

	)

3347 
	#R_390_RELATIVE
 12

	)

3348 
	#R_390_GOTOFF32
 13

	)

3349 
	#R_390_GOTPC
 14

	)

3350 
	#R_390_GOT16
 15

	)

3351 
	#R_390_PC16
 16

	)

3352 
	#R_390_PC16DBL
 17

	)

3353 
	#R_390_PLT16DBL
 18

	)

3354 
	#R_390_PC32DBL
 19

	)

3355 
	#R_390_PLT32DBL
 20

	)

3356 
	#R_390_GOTPCDBL
 21

	)

3357 
	#R_390_64
 22

	)

3358 
	#R_390_PC64
 23

	)

3359 
	#R_390_GOT64
 24

	)

3360 
	#R_390_PLT64
 25

	)

3361 
	#R_390_GOTENT
 26

	)

3362 
	#R_390_GOTOFF16
 27

	)

3363 
	#R_390_GOTOFF64
 28

	)

3364 
	#R_390_GOTPLT12
 29

	)

3365 
	#R_390_GOTPLT16
 30

	)

3366 
	#R_390_GOTPLT32
 31

	)

3367 
	#R_390_GOTPLT64
 32

	)

3368 
	#R_390_GOTPLTENT
 33

	)

3369 
	#R_390_PLTOFF16
 34

	)

3370 
	#R_390_PLTOFF32
 35

	)

3371 
	#R_390_PLTOFF64
 36

	)

3372 
	#R_390_TLS_LOAD
 37

	)

3373 
	#R_390_TLS_GDCALL
 38

	)

3375 
	#R_390_TLS_LDCALL
 39

	)

3377 
	#R_390_TLS_GD32
 40

	)

3379 
	#R_390_TLS_GD64
 41

	)

3381 
	#R_390_TLS_GOTIE12
 42

	)

3383 
	#R_390_TLS_GOTIE32
 43

	)

3385 
	#R_390_TLS_GOTIE64
 44

	)

3387 
	#R_390_TLS_LDM32
 45

	)

3389 
	#R_390_TLS_LDM64
 46

	)

3391 
	#R_390_TLS_IE32
 47

	)

3393 
	#R_390_TLS_IE64
 48

	)

3395 
	#R_390_TLS_IEENT
 49

	)

3397 
	#R_390_TLS_LE32
 50

	)

3399 
	#R_390_TLS_LE64
 51

	)

3401 
	#R_390_TLS_LDO32
 52

	)

3403 
	#R_390_TLS_LDO64
 53

	)

3405 
	#R_390_TLS_DTPMOD
 54

	)

3406 
	#R_390_TLS_DTPOFF
 55

	)

3407 
	#R_390_TLS_TPOFF
 56

	)

3409 
	#R_390_20
 57

	)

3410 
	#R_390_GOT20
 58

	)

3411 
	#R_390_GOTPLT20
 59

	)

3412 
	#R_390_TLS_GOTIE20
 60

	)

3414 
	#R_390_IRELATIVE
 61

	)

3416 
	#R_390_NUM
 62

	)

3420 
	#R_CRIS_NONE
 0

	)

3421 
	#R_CRIS_8
 1

	)

3422 
	#R_CRIS_16
 2

	)

3423 
	#R_CRIS_32
 3

	)

3424 
	#R_CRIS_8_PCREL
 4

	)

3425 
	#R_CRIS_16_PCREL
 5

	)

3426 
	#R_CRIS_32_PCREL
 6

	)

3427 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3428 
	#R_CRIS_GNU_VTENTRY
 8

	)

3429 
	#R_CRIS_COPY
 9

	)

3430 
	#R_CRIS_GLOB_DAT
 10

	)

3431 
	#R_CRIS_JUMP_SLOT
 11

	)

3432 
	#R_CRIS_RELATIVE
 12

	)

3433 
	#R_CRIS_16_GOT
 13

	)

3434 
	#R_CRIS_32_GOT
 14

	)

3435 
	#R_CRIS_16_GOTPLT
 15

	)

3436 
	#R_CRIS_32_GOTPLT
 16

	)

3437 
	#R_CRIS_32_GOTREL
 17

	)

3438 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3439 
	#R_CRIS_32_PLT_PCREL
 19

	)

3441 
	#R_CRIS_NUM
 20

	)

3445 
	#R_X86_64_NONE
 0

	)

3446 
	#R_X86_64_64
 1

	)

3447 
	#R_X86_64_PC32
 2

	)

3448 
	#R_X86_64_GOT32
 3

	)

3449 
	#R_X86_64_PLT32
 4

	)

3450 
	#R_X86_64_COPY
 5

	)

3451 
	#R_X86_64_GLOB_DAT
 6

	)

3452 
	#R_X86_64_JUMP_SLOT
 7

	)

3453 
	#R_X86_64_RELATIVE
 8

	)

3454 
	#R_X86_64_GOTPCREL
 9

	)

3456 
	#R_X86_64_32
 10

	)

3457 
	#R_X86_64_32S
 11

	)

3458 
	#R_X86_64_16
 12

	)

3459 
	#R_X86_64_PC16
 13

	)

3460 
	#R_X86_64_8
 14

	)

3461 
	#R_X86_64_PC8
 15

	)

3462 
	#R_X86_64_DTPMOD64
 16

	)

3463 
	#R_X86_64_DTPOFF64
 17

	)

3464 
	#R_X86_64_TPOFF64
 18

	)

3465 
	#R_X86_64_TLSGD
 19

	)

3467 
	#R_X86_64_TLSLD
 20

	)

3469 
	#R_X86_64_DTPOFF32
 21

	)

3470 
	#R_X86_64_GOTTPOFF
 22

	)

3472 
	#R_X86_64_TPOFF32
 23

	)

3473 
	#R_X86_64_PC64
 24

	)

3474 
	#R_X86_64_GOTOFF64
 25

	)

3475 
	#R_X86_64_GOTPC32
 26

	)

3477 
	#R_X86_64_GOT64
 27

	)

3478 
	#R_X86_64_GOTPCREL64
 28

	)

3480 
	#R_X86_64_GOTPC64
 29

	)

3481 
	#R_X86_64_GOTPLT64
 30

	)

3482 
	#R_X86_64_PLTOFF64
 31

	)

3484 
	#R_X86_64_SIZE32
 32

	)

3485 
	#R_X86_64_SIZE64
 33

	)

3486 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3487 
	#R_X86_64_TLSDESC_CALL
 35

	)

3489 
	#R_X86_64_TLSDESC
 36

	)

3490 
	#R_X86_64_IRELATIVE
 37

	)

3491 
	#R_X86_64_RELATIVE64
 38

	)

3494 
	#R_X86_64_GOTPCRELX
 41

	)

3497 
	#R_X86_64_REX_GOTPCRELX
 42

	)

3500 
	#R_X86_64_NUM
 43

	)

3503 
	#SHT_X86_64_UNWIND
 0x70000001

	)

3507 
	#R_MN10300_NONE
 0

	)

3508 
	#R_MN10300_32
 1

	)

3509 
	#R_MN10300_16
 2

	)

3510 
	#R_MN10300_8
 3

	)

3511 
	#R_MN10300_PCREL32
 4

	)

3512 
	#R_MN10300_PCREL16
 5

	)

3513 
	#R_MN10300_PCREL8
 6

	)

3514 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3515 
	#R_MN10300_GNU_VTENTRY
 8

	)

3516 
	#R_MN10300_24
 9

	)

3517 
	#R_MN10300_GOTPC32
 10

	)

3518 
	#R_MN10300_GOTPC16
 11

	)

3519 
	#R_MN10300_GOTOFF32
 12

	)

3520 
	#R_MN10300_GOTOFF24
 13

	)

3521 
	#R_MN10300_GOTOFF16
 14

	)

3522 
	#R_MN10300_PLT32
 15

	)

3523 
	#R_MN10300_PLT16
 16

	)

3524 
	#R_MN10300_GOT32
 17

	)

3525 
	#R_MN10300_GOT24
 18

	)

3526 
	#R_MN10300_GOT16
 19

	)

3527 
	#R_MN10300_COPY
 20

	)

3528 
	#R_MN10300_GLOB_DAT
 21

	)

3529 
	#R_MN10300_JMP_SLOT
 22

	)

3530 
	#R_MN10300_RELATIVE
 23

	)

3531 
	#R_MN10300_TLS_GD
 24

	)

3532 
	#R_MN10300_TLS_LD
 25

	)

3533 
	#R_MN10300_TLS_LDO
 26

	)

3534 
	#R_MN10300_TLS_GOTIE
 27

	)

3536 
	#R_MN10300_TLS_IE
 28

	)

3538 
	#R_MN10300_TLS_LE
 29

	)

3540 
	#R_MN10300_TLS_DTPMOD
 30

	)

3541 
	#R_MN10300_TLS_DTPOFF
 31

	)

3542 
	#R_MN10300_TLS_TPOFF
 32

	)

3543 
	#R_MN10300_SYM_DIFF
 33

	)

3545 
	#R_MN10300_ALIGN
 34

	)

3547 
	#R_MN10300_NUM
 35

	)

3551 
	#R_M32R_NONE
 0

	)

3552 
	#R_M32R_16
 1

	)

3553 
	#R_M32R_32
 2

	)

3554 
	#R_M32R_24
 3

	)

3555 
	#R_M32R_10_PCREL
 4

	)

3556 
	#R_M32R_18_PCREL
 5

	)

3557 
	#R_M32R_26_PCREL
 6

	)

3558 
	#R_M32R_HI16_ULO
 7

	)

3559 
	#R_M32R_HI16_SLO
 8

	)

3560 
	#R_M32R_LO16
 9

	)

3561 
	#R_M32R_SDA16
 10

	)

3562 
	#R_M32R_GNU_VTINHERIT
 11

	)

3563 
	#R_M32R_GNU_VTENTRY
 12

	)

3565 
	#R_M32R_16_RELA
 33

	)

3566 
	#R_M32R_32_RELA
 34

	)

3567 
	#R_M32R_24_RELA
 35

	)

3568 
	#R_M32R_10_PCREL_RELA
 36

	)

3569 
	#R_M32R_18_PCREL_RELA
 37

	)

3570 
	#R_M32R_26_PCREL_RELA
 38

	)

3571 
	#R_M32R_HI16_ULO_RELA
 39

	)

3572 
	#R_M32R_HI16_SLO_RELA
 40

	)

3573 
	#R_M32R_LO16_RELA
 41

	)

3574 
	#R_M32R_SDA16_RELA
 42

	)

3575 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3576 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3577 
	#R_M32R_REL32
 45

	)

3579 
	#R_M32R_GOT24
 48

	)

3580 
	#R_M32R_26_PLTREL
 49

	)

3581 
	#R_M32R_COPY
 50

	)

3582 
	#R_M32R_GLOB_DAT
 51

	)

3583 
	#R_M32R_JMP_SLOT
 52

	)

3584 
	#R_M32R_RELATIVE
 53

	)

3585 
	#R_M32R_GOTOFF
 54

	)

3586 
	#R_M32R_GOTPC24
 55

	)

3587 
	#R_M32R_GOT16_HI_ULO
 56

	)

3589 
	#R_M32R_GOT16_HI_SLO
 57

	)

3591 
	#R_M32R_GOT16_LO
 58

	)

3592 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3594 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3596 
	#R_M32R_GOTPC_LO
 61

	)

3598 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3600 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3602 
	#R_M32R_GOTOFF_LO
 64

	)

3603 
	#R_M32R_NUM
 256

	)

3606 
	#R_MICROBLAZE_NONE
 0

	)

3607 
	#R_MICROBLAZE_32
 1

	)

3608 
	#R_MICROBLAZE_32_PCREL
 2

	)

3609 
	#R_MICROBLAZE_64_PCREL
 3

	)

3610 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3611 
	#R_MICROBLAZE_64
 5

	)

3612 
	#R_MICROBLAZE_32_LO
 6

	)

3613 
	#R_MICROBLAZE_SRO32
 7

	)

3614 
	#R_MICROBLAZE_SRW32
 8

	)

3615 
	#R_MICROBLAZE_64_NONE
 9

	)

3616 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3617 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3618 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3619 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3620 
	#R_MICROBLAZE_GOT_64
 14

	)

3621 
	#R_MICROBLAZE_PLT_64
 15

	)

3622 
	#R_MICROBLAZE_REL
 16

	)

3623 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3624 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3625 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3626 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3627 
	#R_MICROBLAZE_COPY
 21

	)

3628 
	#R_MICROBLAZE_TLS
 22

	)

3629 
	#R_MICROBLAZE_TLSGD
 23

	)

3630 
	#R_MICROBLAZE_TLSLD
 24

	)

3631 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3632 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3633 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3634 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3635 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3638 
	#DT_NIOS2_GP
 0x70000002

	)

3641 
	#R_NIOS2_NONE
 0

	)

3642 
	#R_NIOS2_S16
 1

	)

3643 
	#R_NIOS2_U16
 2

	)

3644 
	#R_NIOS2_PCREL16
 3

	)

3645 
	#R_NIOS2_CALL26
 4

	)

3646 
	#R_NIOS2_IMM5
 5

	)

3647 
	#R_NIOS2_CACHE_OPX
 6

	)

3648 
	#R_NIOS2_IMM6
 7

	)

3649 
	#R_NIOS2_IMM8
 8

	)

3650 
	#R_NIOS2_HI16
 9

	)

3651 
	#R_NIOS2_LO16
 10

	)

3652 
	#R_NIOS2_HIADJ16
 11

	)

3653 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3654 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3655 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3656 
	#R_NIOS2_GPREL
 15

	)

3657 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3658 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3659 
	#R_NIOS2_UJMP
 18

	)

3660 
	#R_NIOS2_CJMP
 19

	)

3661 
	#R_NIOS2_CALLR
 20

	)

3662 
	#R_NIOS2_ALIGN
 21

	)

3664 
	#R_NIOS2_GOT16
 22

	)

3665 
	#R_NIOS2_CALL16
 23

	)

3666 
	#R_NIOS2_GOTOFF_LO
 24

	)

3667 
	#R_NIOS2_GOTOFF_HA
 25

	)

3668 
	#R_NIOS2_PCREL_LO
 26

	)

3669 
	#R_NIOS2_PCREL_HA
 27

	)

3670 
	#R_NIOS2_TLS_GD16
 28

	)

3671 
	#R_NIOS2_TLS_LDM16
 29

	)

3672 
	#R_NIOS2_TLS_LDO16
 30

	)

3673 
	#R_NIOS2_TLS_IE16
 31

	)

3674 
	#R_NIOS2_TLS_LE16
 32

	)

3675 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3676 
	#R_NIOS2_TLS_DTPREL
 34

	)

3677 
	#R_NIOS2_TLS_TPREL
 35

	)

3678 
	#R_NIOS2_COPY
 36

	)

3679 
	#R_NIOS2_GLOB_DAT
 37

	)

3680 
	#R_NIOS2_JUMP_SLOT
 38

	)

3681 
	#R_NIOS2_RELATIVE
 39

	)

3682 
	#R_NIOS2_GOTOFF
 40

	)

3683 
	#R_NIOS2_CALL26_NOAT
 41

	)

3684 
	#R_NIOS2_GOT_LO
 42

	)

3685 
	#R_NIOS2_GOT_HA
 43

	)

3686 
	#R_NIOS2_CALL_LO
 44

	)

3687 
	#R_NIOS2_CALL_HA
 45

	)

3690 
	#R_TILEPRO_NONE
 0

	)

3691 
	#R_TILEPRO_32
 1

	)

3692 
	#R_TILEPRO_16
 2

	)

3693 
	#R_TILEPRO_8
 3

	)

3694 
	#R_TILEPRO_32_PCREL
 4

	)

3695 
	#R_TILEPRO_16_PCREL
 5

	)

3696 
	#R_TILEPRO_8_PCREL
 6

	)

3697 
	#R_TILEPRO_LO16
 7

	)

3698 
	#R_TILEPRO_HI16
 8

	)

3699 
	#R_TILEPRO_HA16
 9

	)

3700 
	#R_TILEPRO_COPY
 10

	)

3701 
	#R_TILEPRO_GLOB_DAT
 11

	)

3702 
	#R_TILEPRO_JMP_SLOT
 12

	)

3703 
	#R_TILEPRO_RELATIVE
 13

	)

3704 
	#R_TILEPRO_BROFF_X1
 14

	)

3705 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3706 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3707 
	#R_TILEPRO_IMM8_X0
 17

	)

3708 
	#R_TILEPRO_IMM8_Y0
 18

	)

3709 
	#R_TILEPRO_IMM8_X1
 19

	)

3710 
	#R_TILEPRO_IMM8_Y1
 20

	)

3711 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3712 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3713 
	#R_TILEPRO_IMM16_X0
 23

	)

3714 
	#R_TILEPRO_IMM16_X1
 24

	)

3715 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3716 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3717 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3718 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3719 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3720 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3721 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3722 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3723 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3724 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3725 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3726 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3727 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3728 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3729 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3730 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3731 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3732 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3733 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3734 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3735 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3736 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3737 
	#R_TILEPRO_MMSTART_X0
 47

	)

3738 
	#R_TILEPRO_MMEND_X0
 48

	)

3739 
	#R_TILEPRO_MMSTART_X1
 49

	)

3740 
	#R_TILEPRO_MMEND_X1
 50

	)

3741 
	#R_TILEPRO_SHAMT_X0
 51

	)

3742 
	#R_TILEPRO_SHAMT_X1
 52

	)

3743 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3744 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3745 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3747 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3748 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3749 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3750 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3751 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3752 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3753 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3754 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3755 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3756 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3757 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3758 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3759 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3760 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3761 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3762 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3763 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3764 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3765 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3766 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3767 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3768 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3769 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3770 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3771 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3772 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3773 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3774 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3775 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3776 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3777 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3778 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3779 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3781 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3782 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3784 
	#R_TILEPRO_NUM
 130

	)

3788 
	#R_TILEGX_NONE
 0

	)

3789 
	#R_TILEGX_64
 1

	)

3790 
	#R_TILEGX_32
 2

	)

3791 
	#R_TILEGX_16
 3

	)

3792 
	#R_TILEGX_8
 4

	)

3793 
	#R_TILEGX_64_PCREL
 5

	)

3794 
	#R_TILEGX_32_PCREL
 6

	)

3795 
	#R_TILEGX_16_PCREL
 7

	)

3796 
	#R_TILEGX_8_PCREL
 8

	)

3797 
	#R_TILEGX_HW0
 9

	)

3798 
	#R_TILEGX_HW1
 10

	)

3799 
	#R_TILEGX_HW2
 11

	)

3800 
	#R_TILEGX_HW3
 12

	)

3801 
	#R_TILEGX_HW0_LAST
 13

	)

3802 
	#R_TILEGX_HW1_LAST
 14

	)

3803 
	#R_TILEGX_HW2_LAST
 15

	)

3804 
	#R_TILEGX_COPY
 16

	)

3805 
	#R_TILEGX_GLOB_DAT
 17

	)

3806 
	#R_TILEGX_JMP_SLOT
 18

	)

3807 
	#R_TILEGX_RELATIVE
 19

	)

3808 
	#R_TILEGX_BROFF_X1
 20

	)

3809 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3810 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3811 
	#R_TILEGX_IMM8_X0
 23

	)

3812 
	#R_TILEGX_IMM8_Y0
 24

	)

3813 
	#R_TILEGX_IMM8_X1
 25

	)

3814 
	#R_TILEGX_IMM8_Y1
 26

	)

3815 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3816 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3817 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3818 
	#R_TILEGX_MMSTART_X0
 30

	)

3819 
	#R_TILEGX_MMEND_X0
 31

	)

3820 
	#R_TILEGX_SHAMT_X0
 32

	)

3821 
	#R_TILEGX_SHAMT_X1
 33

	)

3822 
	#R_TILEGX_SHAMT_Y0
 34

	)

3823 
	#R_TILEGX_SHAMT_Y1
 35

	)

3824 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3825 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3826 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3827 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3828 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3829 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3830 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3831 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3832 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3833 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3834 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3835 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3836 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3837 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3838 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3839 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3840 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3841 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3842 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3843 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3844 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3845 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3846 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3847 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3848 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3849 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3850 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3851 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3852 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3853 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3854 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3855 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3856 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3857 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3858 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3859 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3860 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3861 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3862 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3863 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3864 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3865 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3866 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3867 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3868 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3869 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3870 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3871 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3872 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3873 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3874 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3875 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3876 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3877 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3879 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3880 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3881 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3882 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3883 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3884 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3885 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3886 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3887 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3888 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3889 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3890 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3892 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3893 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3894 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3895 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3896 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3897 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3898 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3899 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3900 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3901 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3902 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3903 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3904 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3905 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3906 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3907 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3909 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3910 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3912 
	#R_TILEGX_NUM
 130

	)

3915 
	#EF_RISCV_RVC
 0x0001

	)

3916 
	#EF_RISCV_FLOAT_ABI
 0x0006

	)

3917 
	#EF_RISCV_FLOAT_ABI_SOFT
 0x0000

	)

3918 
	#EF_RISCV_FLOAT_ABI_SINGLE
 0x0002

	)

3919 
	#EF_RISCV_FLOAT_ABI_DOUBLE
 0x0004

	)

3920 
	#EF_RISCV_FLOAT_ABI_QUAD
 0x0006

	)

3923 
	#R_RISCV_NONE
 0

	)

3924 
	#R_RISCV_32
 1

	)

3925 
	#R_RISCV_64
 2

	)

3926 
	#R_RISCV_RELATIVE
 3

	)

3927 
	#R_RISCV_COPY
 4

	)

3928 
	#R_RISCV_JUMP_SLOT
 5

	)

3929 
	#R_RISCV_TLS_DTPMOD32
 6

	)

3930 
	#R_RISCV_TLS_DTPMOD64
 7

	)

3931 
	#R_RISCV_TLS_DTPREL32
 8

	)

3932 
	#R_RISCV_TLS_DTPREL64
 9

	)

3933 
	#R_RISCV_TLS_TPREL32
 10

	)

3934 
	#R_RISCV_TLS_TPREL64
 11

	)

3935 
	#R_RISCV_BRANCH
 16

	)

3936 
	#R_RISCV_JAL
 17

	)

3937 
	#R_RISCV_CALL
 18

	)

3938 
	#R_RISCV_CALL_PLT
 19

	)

3939 
	#R_RISCV_GOT_HI20
 20

	)

3940 
	#R_RISCV_TLS_GOT_HI20
 21

	)

3941 
	#R_RISCV_TLS_GD_HI20
 22

	)

3942 
	#R_RISCV_PCREL_HI20
 23

	)

3943 
	#R_RISCV_PCREL_LO12_I
 24

	)

3944 
	#R_RISCV_PCREL_LO12_S
 25

	)

3945 
	#R_RISCV_HI20
 26

	)

3946 
	#R_RISCV_LO12_I
 27

	)

3947 
	#R_RISCV_LO12_S
 28

	)

3948 
	#R_RISCV_TPREL_HI20
 29

	)

3949 
	#R_RISCV_TPREL_LO12_I
 30

	)

3950 
	#R_RISCV_TPREL_LO12_S
 31

	)

3951 
	#R_RISCV_TPREL_ADD
 32

	)

3952 
	#R_RISCV_ADD8
 33

	)

3953 
	#R_RISCV_ADD16
 34

	)

3954 
	#R_RISCV_ADD32
 35

	)

3955 
	#R_RISCV_ADD64
 36

	)

3956 
	#R_RISCV_SUB8
 37

	)

3957 
	#R_RISCV_SUB16
 38

	)

3958 
	#R_RISCV_SUB32
 39

	)

3959 
	#R_RISCV_SUB64
 40

	)

3960 
	#R_RISCV_GNU_VTINHERIT
 41

	)

3961 
	#R_RISCV_GNU_VTENTRY
 42

	)

3962 
	#R_RISCV_ALIGN
 43

	)

3963 
	#R_RISCV_RVC_BRANCH
 44

	)

3964 
	#R_RISCV_RVC_JUMP
 45

	)

3965 
	#R_RISCV_RVC_LUI
 46

	)

3966 
	#R_RISCV_GPREL_I
 47

	)

3967 
	#R_RISCV_GPREL_S
 48

	)

3968 
	#R_RISCV_TPREL_I
 49

	)

3969 
	#R_RISCV_TPREL_S
 50

	)

3970 
	#R_RISCV_RELAX
 51

	)

3971 
	#R_RISCV_SUB6
 52

	)

3972 
	#R_RISCV_SET6
 53

	)

3973 
	#R_RISCV_SET8
 54

	)

3974 
	#R_RISCV_SET16
 55

	)

3975 
	#R_RISCV_SET32
 56

	)

3976 
	#R_RISCV_32_PCREL
 57

	)

3977 
	#R_RISCV_IRELATIVE
 58

	)

3979 
	#R_RISCV_NUM
 59

	)

3983 
	#R_BPF_NONE
 0

	)

3984 
	#R_BPF_64_64
 1

	)

3985 
	#R_BPF_64_32
 10

	)

3989 
	#R_METAG_HIADDR16
 0

	)

3990 
	#R_METAG_LOADDR16
 1

	)

3991 
	#R_METAG_ADDR32
 2

	)

3992 
	#R_METAG_NONE
 3

	)

3993 
	#R_METAG_RELBRANCH
 4

	)

3994 
	#R_METAG_GETSETOFF
 5

	)

3997 
	#R_METAG_REG32OP1
 6

	)

3998 
	#R_METAG_REG32OP2
 7

	)

3999 
	#R_METAG_REG32OP3
 8

	)

4000 
	#R_METAG_REG16OP1
 9

	)

4001 
	#R_METAG_REG16OP2
 10

	)

4002 
	#R_METAG_REG16OP3
 11

	)

4003 
	#R_METAG_REG32OP4
 12

	)

4005 
	#R_METAG_HIOG
 13

	)

4006 
	#R_METAG_LOOG
 14

	)

4008 
	#R_METAG_REL8
 15

	)

4009 
	#R_METAG_REL16
 16

	)

4012 
	#R_METAG_GNU_VTINHERIT
 30

	)

4013 
	#R_METAG_GNU_VTENTRY
 31

	)

4016 
	#R_METAG_HI16_GOTOFF
 32

	)

4017 
	#R_METAG_LO16_GOTOFF
 33

	)

4018 
	#R_METAG_GETSET_GOTOFF
 34

	)

4019 
	#R_METAG_GETSET_GOT
 35

	)

4020 
	#R_METAG_HI16_GOTPC
 36

	)

4021 
	#R_METAG_LO16_GOTPC
 37

	)

4022 
	#R_METAG_HI16_PLT
 38

	)

4023 
	#R_METAG_LO16_PLT
 39

	)

4024 
	#R_METAG_RELBRANCH_PLT
 40

	)

4025 
	#R_METAG_GOTOFF
 41

	)

4026 
	#R_METAG_PLT
 42

	)

4027 
	#R_METAG_COPY
 43

	)

4028 
	#R_METAG_JMP_SLOT
 44

	)

4029 
	#R_METAG_RELATIVE
 45

	)

4030 
	#R_METAG_GLOB_DAT
 46

	)

4033 
	#R_METAG_TLS_GD
 47

	)

4034 
	#R_METAG_TLS_LDM
 48

	)

4035 
	#R_METAG_TLS_LDO_HI16
 49

	)

4036 
	#R_METAG_TLS_LDO_LO16
 50

	)

4037 
	#R_METAG_TLS_LDO
 51

	)

4038 
	#R_METAG_TLS_IE
 52

	)

4039 
	#R_METAG_TLS_IENONPIC
 53

	)

4040 
	#R_METAG_TLS_IENONPIC_HI16
 54

	)

4041 
	#R_METAG_TLS_IENONPIC_LO16
 55

	)

4042 
	#R_METAG_TLS_TPOFF
 56

	)

4043 
	#R_METAG_TLS_DTPMOD
 57

	)

4044 
	#R_METAG_TLS_DTPOFF
 58

	)

4045 
	#R_METAG_TLS_LE
 59

	)

4046 
	#R_METAG_TLS_LE_HI16
 60

	)

4047 
	#R_METAG_TLS_LE_LO16
 61

	)

4050 
	#R_NDS32_NONE
 0

	)

4051 
	#R_NDS32_32_RELA
 20

	)

4052 
	#R_NDS32_COPY
 39

	)

4053 
	#R_NDS32_GLOB_DAT
 40

	)

4054 
	#R_NDS32_JMP_SLOT
 41

	)

4055 
	#R_NDS32_RELATIVE
 42

	)

4056 
	#R_NDS32_TLS_TPOFF
 102

	)

4057 
	#R_NDS32_TLS_DESC
 119

	)

4060 
	#R_ARC_NONE
 0x0

	)

4061 
	#R_ARC_8
 0x1

	)

4062 
	#R_ARC_16
 0x2

	)

4063 
	#R_ARC_24
 0x3

	)

4064 
	#R_ARC_32
 0x4

	)

4065 
	#R_ARC_B26
 0x5

	)

4066 
	#R_ARC_B22_PCREL
 0x6

	)

4067 
	#R_ARC_H30
 0x7

	)

4068 
	#R_ARC_N8
 0x8

	)

4069 
	#R_ARC_N16
 0x9

	)

4070 
	#R_ARC_N24
 0xA

	)

4071 
	#R_ARC_N32
 0xB

	)

4072 
	#R_ARC_SDA
 0xC

	)

4073 
	#R_ARC_SECTOFF
 0xD

	)

4074 
	#R_ARC_S21H_PCREL
 0xE

	)

4075 
	#R_ARC_S21W_PCREL
 0xF

	)

4076 
	#R_ARC_S25H_PCREL
 0x10

	)

4077 
	#R_ARC_S25W_PCREL
 0x11

	)

4078 
	#R_ARC_SDA32
 0x12

	)

4079 
	#R_ARC_SDA_LDST
 0x13

	)

4080 
	#R_ARC_SDA_LDST1
 0x14

	)

4081 
	#R_ARC_SDA_LDST2
 0x15

	)

4082 
	#R_ARC_SDA16_LD
 0x16

	)

4083 
	#R_ARC_SDA16_LD1
 0x17

	)

4084 
	#R_ARC_SDA16_LD2
 0x18

	)

4085 
	#R_ARC_S13_PCREL
 0x19

	)

4086 
	#R_ARC_W
 0x1A

	)

4087 
	#R_ARC_32_ME
 0x1B

	)

4088 
	#R_ARC_N32_ME
 0x1C

	)

4089 
	#R_ARC_SECTOFF_ME
 0x1D

	)

4090 
	#R_ARC_SDA32_ME
 0x1E

	)

4091 
	#R_ARC_W_ME
 0x1F

	)

4092 
	#R_ARC_H30_ME
 0x20

	)

4093 
	#R_ARC_SECTOFF_U8
 0x21

	)

4094 
	#R_ARC_SECTOFF_S9
 0x22

	)

4095 
	#R_AC_SECTOFF_U8
 0x23

	)

4096 
	#R_AC_SECTOFF_U8_1
 0x24

	)

4097 
	#R_AC_SECTOFF_U8_2
 0x25

	)

4098 
	#R_AC_SECTOFF_S9
 0x26

	)

4099 
	#R_AC_SECTOFF_S9_1
 0x27

	)

4100 
	#R_AC_SECTOFF_S9_2
 0x28

	)

4101 
	#R_ARC_SECTOFF_ME_1
 0x29

	)

4102 
	#R_ARC_SECTOFF_ME_2
 0x2A

	)

4103 
	#R_ARC_SECTOFF_1
 0x2B

	)

4104 
	#R_ARC_SECTOFF_2
 0x2C

	)

4105 
	#R_ARC_PC32
 0x32

	)

4106 
	#R_ARC_GOTPC32
 0x33

	)

4107 
	#R_ARC_PLT32
 0x34

	)

4108 
	#R_ARC_COPY
 0x35

	)

4109 
	#R_ARC_GLOB_DAT
 0x36

	)

4110 
	#R_ARC_JUMP_SLOT
 0x37

	)

4111 
	#R_ARC_RELATIVE
 0x38

	)

4112 
	#R_ARC_GOTOFF
 0x39

	)

4113 
	#R_ARC_GOTPC
 0x3A

	)

4114 
	#R_ARC_GOT32
 0x3B

	)

4116 
	#R_ARC_TLS_DTPMOD
 0x42

	)

4117 
	#R_ARC_TLS_DTPOFF
 0x43

	)

4118 
	#R_ARC_TLS_TPOFF
 0x44

	)

4119 
	#R_ARC_TLS_GD_GOT
 0x45

	)

4120 
	#R_ARC_TLS_GD_LD
 0x46

	)

4121 
	#R_ARC_TLS_GD_CALL
 0x47

	)

4122 
	#R_ARC_TLS_IE_GOT
 0x48

	)

4123 
	#R_ARC_TLS_DTPOFF_S9
 0x4a

	)

4124 
	#R_ARC_TLS_LE_S9
 0x4a

	)

4125 
	#R_ARC_TLS_LE_32
 0x4b

	)

4128 
	#R_OR1K_NONE
 0

	)

4129 
	#R_OR1K_32
 1

	)

4130 
	#R_OR1K_16
 2

	)

4131 
	#R_OR1K_8
 3

	)

4132 
	#R_OR1K_LO_16_IN_INSN
 4

	)

4133 
	#R_OR1K_HI_16_IN_INSN
 5

	)

4134 
	#R_OR1K_INSN_REL_26
 6

	)

4135 
	#R_OR1K_GNU_VTENTRY
 7

	)

4136 
	#R_OR1K_GNU_VTINHERIT
 8

	)

4137 
	#R_OR1K_32_PCREL
 9

	)

4138 
	#R_OR1K_16_PCREL
 10

	)

4139 
	#R_OR1K_8_PCREL
 11

	)

4140 
	#R_OR1K_GOTPC_HI16
 12

	)

4141 
	#R_OR1K_GOTPC_LO16
 13

	)

4142 
	#R_OR1K_GOT16
 14

	)

4143 
	#R_OR1K_PLT26
 15

	)

4144 
	#R_OR1K_GOTOFF_HI16
 16

	)

4145 
	#R_OR1K_GOTOFF_LO16
 17

	)

4146 
	#R_OR1K_COPY
 18

	)

4147 
	#R_OR1K_GLOB_DAT
 19

	)

4148 
	#R_OR1K_JMP_SLOT
 20

	)

4149 
	#R_OR1K_RELATIVE
 21

	)

4150 
	#R_OR1K_TLS_GD_HI16
 22

	)

4151 
	#R_OR1K_TLS_GD_LO16
 23

	)

4152 
	#R_OR1K_TLS_LDM_HI16
 24

	)

4153 
	#R_OR1K_TLS_LDM_LO16
 25

	)

4154 
	#R_OR1K_TLS_LDO_HI16
 26

	)

4155 
	#R_OR1K_TLS_LDO_LO16
 27

	)

4156 
	#R_OR1K_TLS_IE_HI16
 28

	)

4157 
	#R_OR1K_TLS_IE_LO16
 29

	)

4158 
	#R_OR1K_TLS_LE_HI16
 30

	)

4159 
	#R_OR1K_TLS_LE_LO16
 31

	)

4160 
	#R_OR1K_TLS_TPOFF
 32

	)

4161 
	#R_OR1K_TLS_DTPOFF
 33

	)

4162 
	#R_OR1K_TLS_DTPMOD
 34

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ídün.h
>

26 #ifde‡
__USE_MISC


27 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


35 
	~<bôs/byãsw≠.h
>

36 
	~<bôs/uöä-idítôy.h
>

38 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


39 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

40 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

41 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

42 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

44 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

45 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

46 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

47 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

49 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

50 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

51 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

52 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

55 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

56 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

57 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

58 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

60 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

61 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

62 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

63 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

65 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

66 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

67 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

68 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_TIME_BITS64


148 #i‚de‡
__USE_FILE_OFFSET64


149 
f˙é
 (
__fd
, 
__cmd
, ...);

151 #ifde‡
__REDIRECT


152 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

154 
	#f˙é
 
f˙é64


	)

157 #ifde‡
__USE_LARGEFILE64


158 
f˙é64
 (
__fd
, 
__cmd
, ...);

161 #ifde‡
__REDIRECT


162 
__REDIRECT_NTH
 (
f˙é
, (
__fd
, 
__ªque°
, ...),

163 
__f˙é_time64
);

164 
__REDIRECT_NTH
 (
f˙é64
, (
__fd
, 
__ªque°
, ...),

165 
__f˙é_time64
);

167 
	$__f˙é_time64
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

168 
	#f˙é64
 
__f˙é_time64


	)

169 
	#f˙é
 
__f˙é_time64


	)

180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

185 
	`__n⁄nuŒ
 ((1));

187 
	#›í
 
›í64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__USE_ATFILE


204 #i‚de‡
__USE_FILE_OFFSET64


205 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

206 
	`__n⁄nuŒ
 ((2));

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

210 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

212 
	#›í©
 
›í©64


	)

215 #ifde‡
__USE_LARGEFILE64


216 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

217 
	`__n⁄nuŒ
 ((2));

226 #i‚de‡
__USE_FILE_OFFSET64


227 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__REDIRECT


230 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

231 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

233 
	#¸ót
 
¸ót64


	)

236 #ifde‡
__USE_LARGEFILE64


237 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

240 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

241 && !
deföed
 
__USE_POSIX
))

250 
	#F_ULOCK
 0

	)

251 
	#F_LOCK
 1

	)

252 
	#F_TLOCK
 2

	)

253 
	#F_TEST
 3

	)

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

258 #ifde‡
__REDIRECT


259 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

261 
	#lockf
 
lockf64


	)

264 #ifde‡
__USE_LARGEFILE64


265 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

269 #ifde‡
__USE_XOPEN2K


272 #i‚de‡
__USE_FILE_OFFSET64


273 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

274 
__advi£
Ë
__THROW
;

276 #ifde‡
__REDIRECT_NTH


277 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

278 
__off64_t
 
__Àn
, 
__advi£
),

279 
posix_Ádvi£64
);

281 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

284 #ifde‡
__USE_LARGEFILE64


285 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

286 
__advi£
Ë
__THROW
;

294 #i‚de‡
__USE_FILE_OFFSET64


295 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

297 #ifde‡
__REDIRECT


298 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

299 
__off64_t
 
__Àn
),

300 
posix_ÁŒoˇã64
);

302 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

305 #ifde‡
__USE_LARGEFILE64


306 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

312 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

313 && 
deföed
 
__va_¨g_∑ck_Àn


314 
	~<bôs/f˙é2.h
>

317 
__END_DECLS


	@/usr/include/gelf.h

29 #i‚de‡
_GELF_H


30 
	#_GELF_H
 1

	)

32 
	~<libñf.h
>

35 #ifde‡
__˝lu•lus


44 
Elf64_HÆf
 
	tGElf_HÆf
;

47 
Elf64_W‹d
 
	tGElf_W‹d
;

48 
Elf64_Sw‹d
 
	tGElf_Sw‹d
;

51 
Elf64_Xw‹d
 
	tGElf_Xw‹d
;

52 
Elf64_Sxw‹d
 
	tGElf_Sxw‹d
;

55 
Elf64_Addr
 
	tGElf_Addr
;

58 
Elf64_Off
 
	tGElf_Off
;

62 
Elf64_Ehdr
 
	tGElf_Ehdr
;

65 
Elf64_Shdr
 
	tGElf_Shdr
;

70 
Elf64_Se˘i⁄
 
	tGElf_Se˘i⁄
;

73 
Elf64_Sym
 
	tGElf_Sym
;

77 
Elf64_Symöfo
 
	tGElf_Symöfo
;

80 
Elf64_Rñ
 
	tGElf_Rñ
;

83 
Elf64_Rña
 
	tGElf_Rña
;

86 
Elf64_Phdr
 
	tGElf_Phdr
;

89 
Elf64_Chdr
 
	tGElf_Chdr
;

92 
Elf64_Dyn
 
	tGElf_Dyn
;

96 
Elf64_Vîdef
 
	tGElf_Vîdef
;

99 
Elf64_Vîdaux
 
	tGElf_Vîdaux
;

102 
Elf64_Vî√ed
 
	tGElf_Vî√ed
;

105 
Elf64_Vî«ux
 
	tGElf_Vî«ux
;

109 
Elf64_Vîsym
 
	tGElf_Vîsym
;

113 
Elf64_auxv_t
 
	tGElf_auxv_t
;

117 
Elf64_Nhdr
 
	tGElf_Nhdr
;

121 
Elf64_Move
 
	tGElf_Move
;

125 
Elf64_Lib
 
	tGElf_Lib
;

130 
	#GELF_ST_BIND
(
vÆ
Ë
	`ELF64_ST_BIND
 (vÆ)

	)

131 
	#GELF_ST_TYPE
(
vÆ
Ë
	`ELF64_ST_TYPE
 (vÆ)

	)

132 
	#GELF_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF64_ST_INFO
 (böd,Åy≥)

	)

136 
	#GELF_ST_VISIBILITY
(
vÆ
Ë
	`ELF64_ST_VISIBILITY
 (vÆ)

	)

141 
	#GELF_R_SYM
(
öfo
Ë
	`ELF64_R_SYM
 (öfo)

	)

142 
	#GELF_R_TYPE
(
öfo
Ë
	`ELF64_R_TYPE
 (öfo)

	)

143 
	#GELF_R_INFO
(
sym
, 
ty≥
Ë
	`ELF64_R_INFO
 (sym,Åy≥)

	)

147 
	#GELF_M_SYM
(
öfo
Ë
	`ELF64_M_SYM
 (öfo)

	)

148 
	#GELF_M_SIZE
(
öfo
Ë
	`ELF64_M_SIZE
 (öfo)

	)

149 
	#GELF_M_INFO
(
sym
, 
size
Ë
	`ELF64_M_INFO
 (sym, size)

	)

153 
gñf_gë˛ass
 (
Elf
 *
__ñf
);

159 
size_t
 
gñf_fsize
 (
Elf
 *
__ñf
, 
Elf_Ty≥
 
__ty≥
, size_à
__cou¡
,

160 
__vîsi⁄
);

163 
GElf_Ehdr
 *
gñf_gëehdr
 (
Elf
 *
__ñf
, GElf_Ehd∏*
__de°
);

166 
gñf_upd©e_ehdr
 (
Elf
 *
__ñf
, 
GElf_Ehdr
 *
__§c
);

171 *
gñf_√wehdr
 (
Elf
 *
__ñf
, 
__˛ass
);

174 
Elf_S˙
 *
gñf_offs˙
 (
Elf
 *
__ñf
, 
GElf_Off
 
__off£t
);

177 
GElf_Shdr
 *
gñf_gëshdr
 (
Elf_S˙
 *
__s˙
, GElf_Shd∏*
__d°
);

180 
gñf_upd©e_shdr
 (
Elf_S˙
 *
__s˙
, 
GElf_Shdr
 *
__§c
);

183 
GElf_Phdr
 *
gñf_gëphdr
 (
Elf
 *
__ñf
, 
__ndx
, GElf_Phd∏*
__d°
);

186 
gñf_upd©e_phdr
 (
Elf
 *
__ñf
, 
__ndx
, 
GElf_Phdr
 *
__§c
);

191 *
gñf_√wphdr
 (
Elf
 *
__ñf
, 
size_t
 
__phnum
);

195 
GElf_Chdr
 *
gñf_gëchdr
 (
Elf_S˙
 *
__s˙
, GElf_Chd∏*
__d°
);

199 
Elf_D©a
 *
gñf_xœãtom
 (
Elf
 *
__ñf
, Elf_D©®*
__de°
,

200 c⁄° 
Elf_D©a
 *
__§c
, 
__ícode
);

204 
Elf_D©a
 *
gñf_xœãtof
 (
Elf
 *
__ñf
, Elf_D©®*
__de°
,

205 c⁄° 
Elf_D©a
 *
__§c
, 
__ícode
);

209 
GElf_Rñ
 *
gñf_gëªl
 (
Elf_D©a
 *
__d©a
, 
__ndx
, GElf_Rñ *
__d°
);

212 
GElf_Rña
 *
gñf_gëªœ
 (
Elf_D©a
 *
__d©a
, 
__ndx
, GElf_Rñ®*
__d°
);

215 
gñf_upd©e_ªl
 (
Elf_D©a
 *
__d°
, 
__ndx
, 
GElf_Rñ
 *
__§c
);

218 
gñf_upd©e_ªœ
 (
Elf_D©a
 *
__d°
, 
__ndx
, 
GElf_Rña
 *
__§c
);

222 
GElf_Sym
 *
gñf_gësym
 (
Elf_D©a
 *
__d©a
, 
__ndx
, GElf_Sym *
__d°
);

225 
gñf_upd©e_sym
 (
Elf_D©a
 *
__d©a
, 
__ndx
, 
GElf_Sym
 *
__§c
);

230 
GElf_Sym
 *
gñf_gësymshndx
 (
Elf_D©a
 *
__symd©a
, Elf_D©®*
__shndxd©a
,

231 
__ndx
, 
GElf_Sym
 *
__sym
,

232 
Elf32_W‹d
 *
__xshndx
);

236 
gñf_upd©e_symshndx
 (
Elf_D©a
 *
__symd©a
, Elf_D©®*
__shndxd©a
,

237 
__ndx
, 
GElf_Sym
 *
__sym
,

238 
Elf32_W‹d
 
__xshndx
);

243 
GElf_Symöfo
 *
gñf_gësymöfo
 (
Elf_D©a
 *
__d©a
, 
__ndx
,

244 
GElf_Symöfo
 *
__d°
);

248 
gñf_upd©e_symöfo
 (
Elf_D©a
 *
__d©a
, 
__ndx
,

249 
GElf_Symöfo
 *
__§c
);

253 
GElf_Dyn
 *
gñf_gëdyn
 (
Elf_D©a
 *
__d©a
, 
__ndx
, GElf_Dy¿*
__d°
);

256 
gñf_upd©e_dyn
 (
Elf_D©a
 *
__d°
, 
__ndx
, 
GElf_Dyn
 *
__§c
);

260 
GElf_Move
 *
gñf_gëmove
 (
Elf_D©a
 *
__d©a
, 
__ndx
, GElf_Movê*
__d°
);

263 
gñf_upd©e_move
 (
Elf_D©a
 *
__d©a
, 
__ndx
,

264 
GElf_Move
 *
__§c
);

268 
GElf_Lib
 *
gñf_gëlib
 (
Elf_D©a
 *
__d©a
, 
__ndx
, GElf_Lib *
__d°
);

271 
gñf_upd©e_lib
 (
Elf_D©a
 *
__d©a
, 
__ndx
, 
GElf_Lib
 *
__§c
);

276 
GElf_Vîsym
 *
gñf_gëvîsym
 (
Elf_D©a
 *
__d©a
, 
__ndx
,

277 
GElf_Vîsym
 *
__d°
);

280 
gñf_upd©e_vîsym
 (
Elf_D©a
 *
__d©a
, 
__ndx
,

281 
GElf_Vîsym
 *
__§c
);

285 
GElf_Vî√ed
 *
gñf_gëvî√ed
 (
Elf_D©a
 *
__d©a
, 
__off£t
,

286 
GElf_Vî√ed
 *
__d°
);

289 
gñf_upd©e_vî√ed
 (
Elf_D©a
 *
__d©a
, 
__off£t
,

290 
GElf_Vî√ed
 *
__§c
);

293 
GElf_Vî«ux
 *
gñf_gëvî«ux
 (
Elf_D©a
 *
__d©a
, 
__off£t
,

294 
GElf_Vî«ux
 *
__d°
);

297 
gñf_upd©e_vî«ux
 (
Elf_D©a
 *
__d©a
, 
__off£t
,

298 
GElf_Vî«ux
 *
__§c
);

302 
GElf_Vîdef
 *
gñf_gëvîdef
 (
Elf_D©a
 *
__d©a
, 
__off£t
,

303 
GElf_Vîdef
 *
__d°
);

306 
gñf_upd©e_vîdef
 (
Elf_D©a
 *
__d©a
, 
__off£t
,

307 
GElf_Vîdef
 *
__§c
);

311 
GElf_Vîdaux
 *
gñf_gëvîdaux
 (
Elf_D©a
 *
__d©a
, 
__off£t
,

312 
GElf_Vîdaux
 *
__d°
);

315 
gñf_upd©e_vîdaux
 (
Elf_D©a
 *
__d©a
, 
__off£t
,

316 
GElf_Vîdaux
 *
__§c
);

320 
GElf_auxv_t
 *
gñf_gëauxv
 (
Elf_D©a
 *
__d©a
, 
__ndx
,

321 
GElf_auxv_t
 *
__d°
);

324 
gñf_upd©e_auxv
 (
Elf_D©a
 *
__d©a
, 
__ndx
, 
GElf_auxv_t
 *
__§c
);

330 
size_t
 
gñf_gënŸe
 (
Elf_D©a
 *
__d©a
, size_à
__off£t
,

331 
GElf_Nhdr
 *
__ªsu…
,

332 
size_t
 *
__«me_off£t
, size_à*
__desc_off£t
);

336 
gñf_checksum
 (
Elf
 *
__ñf
);

338 #ifde‡
__˝lu•lus


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 
__END_DECLS


	@/usr/include/libelf.h

29 #i‚de‡
_LIBELF_H


30 
	#_LIBELF_H
 1

	)

32 
	~<°döt.h
>

33 
	~<sys/ty≥s.h
>

36 
	~<ñf.h
>

38 #i‚de‡
SHF_COMPRESSED


40 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

46 
Elf32_W‹d
 
	mch_ty≥
;

47 
Elf32_W‹d
 
	mch_size
;

48 
Elf32_W‹d
 
	mch_addølign
;

49 } 
	tElf32_Chdr
;

53 
Elf64_W‹d
 
	mch_ty≥
;

54 
Elf64_W‹d
 
	mch_ª£rved
;

55 
Elf64_Xw‹d
 
	mch_size
;

56 
Elf64_Xw‹d
 
	mch_addølign
;

57 } 
	tElf64_Chdr
;

60 
	#ELFCOMPRESS_ZLIB
 1

	)

61 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

62 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

63 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

64 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

67 #i‡
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 3)

68 
	#__n⁄nuŒ_©åibuã__
(...Ë
	`__©åibuã__
 ((
	`__n⁄nuŒ__
 (
__VA_ARGS__
)))

	)

69 
	#__dïªˇãd_©åibuã__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

70 
	#__puª_©åibuã__
 
	`__©åibuã__
 ((
__puª__
))

	)

71 
	#__c⁄°_©åibuã__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

73 
	#__n⁄nuŒ_©åibuã__
(...)

	)

74 
	#__dïªˇãd_©åibuã__


	)

75 
	#__puª_©åibuã__


	)

76 
	#__c⁄°_©åibuã__


	)

79 #i‡
__GNUC__
 < 4

80 
	#__n‹ëu∫_©åibuã__


	)

82 
	#__n‹ëu∫_©åibuã__
 
	`__©åibuã__
 ((
n‹ëu∫
))

	)

85 #ifde‡
__GNUC_STDC_INLINE__


86 
	#__libdw_exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

88 
	#__libdw_exã∫_ölöe
 
__ölöe


	)

94 
ELF_T_BYTE
,

95 
ELF_T_ADDR
,

96 
ELF_T_DYN
,

97 
ELF_T_EHDR
,

98 
ELF_T_HALF
,

99 
ELF_T_OFF
,

100 
ELF_T_PHDR
,

101 
ELF_T_RELA
,

102 
ELF_T_REL
,

103 
ELF_T_SHDR
,

104 
ELF_T_SWORD
,

105 
ELF_T_SYM
,

106 
ELF_T_WORD
,

107 
ELF_T_XWORD
,

108 
ELF_T_SXWORD
,

109 
ELF_T_VDEF
,

110 
ELF_T_VDAUX
,

111 
ELF_T_VNEED
,

112 
ELF_T_VNAUX
,

113 
ELF_T_NHDR
,

114 
ELF_T_SYMINFO
,

115 
ELF_T_MOVE
,

116 
ELF_T_LIB
,

117 
ELF_T_GNUHASH
,

118 
ELF_T_AUXV
,

119 
ELF_T_CHDR
,

120 
ELF_T_NHDR8
,

123 
ELF_T_NUM


124 } 
	tElf_Ty≥
;

129 *
	md_buf
;

130 
Elf_Ty≥
 
	md_ty≥
;

131 
	md_vîsi⁄
;

132 
size_t
 
	md_size
;

133 
öt64_t
 
	md_off
;

134 
size_t
 
	md_Æign
;

135 } 
	tElf_D©a
;

141 
	mELF_C_NULL
,

142 
	mELF_C_READ
,

143 
	mELF_C_RDWR
,

144 
	mELF_C_WRITE
,

145 
	mELF_C_CLR
,

146 
	mELF_C_SET
,

147 
	mELF_C_FDDONE
,

149 
	mELF_C_FDREAD
,

152 
	mELF_C_READ_MMAP
,

153 
	mELF_C_RDWR_MMAP
,

154 
	mELF_C_WRITE_MMAP
,

155 
	mELF_C_READ_MMAP_PRIVATE
,

157 
	mELF_C_EMPTY
,

159 
	mELF_C_NUM


160 } 
	tElf_Cmd
;

166 
	mELF_F_DIRTY
 = 0x1,

167 
	#ELF_F_DIRTY
 
ELF_F_DIRTY


	)

168 
	mELF_F_LAYOUT
 = 0x4,

169 
	#ELF_F_LAYOUT
 
ELF_F_LAYOUT


	)

170 
	mELF_F_PERMISSIVE
 = 0x8

171 
	#ELF_F_PERMISSIVE
 
ELF_F_PERMISSIVE


	)

177 
	mELF_CHF_FORCE
 = 0x1

178 
	#ELF_CHF_FORCE
 
ELF_CHF_FORCE


	)

184 
	mELF_K_NONE
,

185 
	mELF_K_AR
,

186 
	mELF_K_COFF
,

187 
	mELF_K_ELF
,

189 
	mELF_K_NUM


190 } 
	tElf_Köd
;

196 *
	m¨_«me
;

197 
time_t
 
	m¨_d©e
;

198 
uid_t
 
	m¨_uid
;

199 
gid_t
 
	m¨_gid
;

200 
mode_t
 
	m¨_mode
;

201 
öt64_t
 
	m¨_size
;

202 *
	m¨_øw«me
;

203 } 
	tElf_Arhdr
;

209 *
	mas_«me
;

210 
size_t
 
	mas_off
;

211 
	mas_hash
;

212 } 
	tElf_Arsym
;

216 
Elf
 
	tElf
;

219 
Elf_S˙
 
	tElf_S˙
;

222 #ifde‡
__˝lu•lus


227 
Elf
 *
ñf_begö
 (
__fûdes
, 
Elf_Cmd
 
__cmd
, El‡*
__ªf
);

230 
Elf
 *
ñf_˛⁄e
 (El‡*
__ñf
, 
Elf_Cmd
 
__cmd
);

233 
Elf
 *
ñf_mem‹y
 (*
__image
, 
size_t
 
__size
);

236 
Elf_Cmd
 
ñf_√xt
 (
Elf
 *
__ñf
);

239 
ñf_íd
 (
Elf
 *
__ñf
);

242 
öt64_t
 
ñf_upd©e
 (
Elf
 *
__ñf
, 
Elf_Cmd
 
__cmd
);

245 
Elf_Köd
 
ñf_köd
 (
Elf
 *
__ñf
Ë
__puª_©åibuã__
;

248 
öt64_t
 
ñf_gëba£
 (
Elf
 *
__ñf
);

252 *
ñf_gëidít
 (
Elf
 *
__ñf
, 
size_t
 *
__nbyãs
);

255 
Elf32_Ehdr
 *
ñf32_gëehdr
 (
Elf
 *
__ñf
);

257 
Elf64_Ehdr
 *
ñf64_gëehdr
 (
Elf
 *
__ñf
);

260 
Elf32_Ehdr
 *
ñf32_√wehdr
 (
Elf
 *
__ñf
);

262 
Elf64_Ehdr
 *
ñf64_√wehdr
 (
Elf
 *
__ñf
);

268 
ñf_gëphd∫um
 (
Elf
 *
__ñf
, 
size_t
 *
__d°
);

271 
Elf32_Phdr
 *
ñf32_gëphdr
 (
Elf
 *
__ñf
);

273 
Elf64_Phdr
 *
ñf64_gëphdr
 (
Elf
 *
__ñf
);

276 
Elf32_Phdr
 *
ñf32_√wphdr
 (
Elf
 *
__ñf
, 
size_t
 
__˙t
);

278 
Elf64_Phdr
 *
ñf64_√wphdr
 (
Elf
 *
__ñf
, 
size_t
 
__˙t
);

282 
Elf_S˙
 *
ñf_gës˙
 (
Elf
 *
__ñf
, 
size_t
 
__ödex
);

285 
Elf_S˙
 *
ñf32_offs˙
 (
Elf
 *
__ñf
, 
Elf32_Off
 
__off£t
);

287 
Elf_S˙
 *
ñf64_offs˙
 (
Elf
 *
__ñf
, 
Elf64_Off
 
__off£t
);

290 
size_t
 
ñf_ndxs˙
 (
Elf_S˙
 *
__s˙
);

293 
Elf_S˙
 *
ñf_√xts˙
 (
Elf
 *
__ñf
, Elf_S˙ *
__s˙
);

296 
Elf_S˙
 *
ñf_√ws˙
 (
Elf
 *
__ñf
);

300 
ñf_s˙shndx
 (
Elf_S˙
 *
__s˙
);

306 
ñf_gëshd∫um
 (
Elf
 *
__ñf
, 
size_t
 *
__d°
);

310 
ñf_gëshnum
 (
Elf
 *
__ñf
, 
size_t
 *
__d°
)

311 
__dïªˇãd_©åibuã__
;

318 
ñf_gëshdr°∫dx
 (
Elf
 *
__ñf
, 
size_t
 *
__d°
);

322 
ñf_gësh°∫dx
 (
Elf
 *
__ñf
, 
size_t
 *
__d°
)

323 
__dïªˇãd_©åibuã__
;

327 
Elf32_Shdr
 *
ñf32_gëshdr
 (
Elf_S˙
 *
__s˙
);

329 
Elf64_Shdr
 *
ñf64_gëshdr
 (
Elf_S˙
 *
__s˙
);

334 
Elf32_Chdr
 *
ñf32_gëchdr
 (
Elf_S˙
 *
__s˙
);

335 
Elf64_Chdr
 *
ñf64_gëchdr
 (
Elf_S˙
 *
__s˙
);

390 
ñf_com¥ess
 (
Elf_S˙
 *
s˙
, 
ty≥
, 
Êags
);

391 
ñf_com¥ess_gnu
 (
Elf_S˙
 *
s˙
, 
com¥ess
, 
Êags
);

394 
ñf_Êagñf
 (
Elf
 *
__ñf
, 
Elf_Cmd
 
__cmd
,

395 
__Êags
);

397 
ñf_Êagehdr
 (
Elf
 *
__ñf
, 
Elf_Cmd
 
__cmd
,

398 
__Êags
);

400 
ñf_Êagphdr
 (
Elf
 *
__ñf
, 
Elf_Cmd
 
__cmd
,

401 
__Êags
);

403 
ñf_Êags˙
 (
Elf_S˙
 *
__s˙
, 
Elf_Cmd
 
__cmd
,

404 
__Êags
);

406 
ñf_Êagd©a
 (
Elf_D©a
 *
__d©a
, 
Elf_Cmd
 
__cmd
,

407 
__Êags
);

409 
ñf_Êagshdr
 (
Elf_S˙
 *
__s˙
, 
Elf_Cmd
 
__cmd
,

410 
__Êags
);

418 
Elf_D©a
 *
ñf_gëd©a
 (
Elf_S˙
 *
__s˙
, Elf_D©®*
__d©a
);

421 
Elf_D©a
 *
ñf_øwd©a
 (
Elf_S˙
 *
__s˙
, Elf_D©®*
__d©a
);

424 
Elf_D©a
 *
ñf_√wd©a
 (
Elf_S˙
 *
__s˙
);

429 
Elf_D©a
 *
ñf_gëd©a_øwchunk
 (
Elf
 *
__ñf
,

430 
öt64_t
 
__off£t
, 
size_t
 
__size
,

431 
Elf_Ty≥
 
__ty≥
);

435 *
ñf_°Ωå
 (
Elf
 *
__ñf
, 
size_t
 
__ödex
, size_à
__off£t
);

439 
Elf_Arhdr
 *
ñf_gë¨hdr
 (
Elf
 *
__ñf
);

442 
öt64_t
 
ñf_gë¨off
 (
Elf
 *
__ñf
);

445 
size_t
 
ñf_ønd
 (
Elf
 *
__ñf
, size_à
__off£t
);

448 
Elf_Arsym
 *
ñf_gë¨sym
 (
Elf
 *
__ñf
, 
size_t
 *
__«rsyms
);

452 
ñf_˙é
 (
Elf
 *
__ñf
, 
Elf_Cmd
 
__cmd
);

455 *
ñf_øwfûe
 (
Elf
 *
__ñf
, 
size_t
 *
__nbyãs
);

461 
size_t
 
ñf32_fsize
 (
Elf_Ty≥
 
__ty≥
, size_à
__cou¡
,

462 
__vîsi⁄
)

463 
__c⁄°_©åibuã__
;

465 
size_t
 
ñf64_fsize
 (
Elf_Ty≥
 
__ty≥
, size_à
__cou¡
,

466 
__vîsi⁄
)

467 
__c⁄°_©åibuã__
;

472 
Elf_D©a
 *
ñf32_xœãtom
 (Elf_D©®*
__de°
, c⁄° Elf_D©®*
__§c
,

473 
__ícode
);

475 
Elf_D©a
 *
ñf64_xœãtom
 (Elf_D©®*
__de°
, c⁄° Elf_D©®*
__§c
,

476 
__ícode
);

480 
Elf_D©a
 *
ñf32_xœãtof
 (Elf_D©®*
__de°
, c⁄° Elf_D©®*
__§c
,

481 
__ícode
);

483 
Elf_D©a
 *
ñf64_xœãtof
 (Elf_D©®*
__de°
, c⁄° Elf_D©®*
__§c
,

484 
__ícode
);

489 
ñf_î∫o
 ();

495 c⁄° *
ñf_îrmsg
 (
__îr‹
);

499 
ñf_vîsi⁄
 (
__vîsi⁄
);

502 
ñf_fûl
 (
__fûl
);

505 
ñf_hash
 (c⁄° *
__°rög
)

506 
__puª_©åibuã__
;

509 
ñf_gnu_hash
 (c⁄° *
__°rög
)

510 
__puª_©åibuã__
;

514 
ñf32_checksum
 (
Elf
 *
__ñf
);

516 
ñf64_checksum
 (
Elf
 *
__ñf
);

518 #ifde‡
__˝lu•lus


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

184 #i‡
__GLIBC_USE
 (
ISOC2X
)

185 #i‚de‡
BOOL_MAX


186 
	#BOOL_MAX
 1

	)

188 #i‚de‡
BOOL_WIDTH


189 
	#BOOL_WIDTH
 1

	)

193 #ifdef 
__USE_POSIX


195 
	~<bôs/posix1_lim.h
>

198 #ifdef 
__USE_POSIX2


199 
	~<bôs/posix2_lim.h
>

202 #ifdef 
__USE_XOPEN


203 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/bpf.h

8 #i‚de‡
__LINUX_BPF_H__


9 
	#__LINUX_BPF_H__


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/bpf_comm⁄.h
>

17 
	#BPF_JMP32
 0x06

	)

18 
	#BPF_ALU64
 0x07

	)

21 
	#BPF_DW
 0x18

	)

22 
	#BPF_ATOMIC
 0xc0

	)

23 
	#BPF_XADD
 0xc0

	)

26 
	#BPF_MOV
 0xb0

	)

27 
	#BPF_ARSH
 0xc0

	)

30 
	#BPF_END
 0xd0

	)

31 
	#BPF_TO_LE
 0x00

	)

32 
	#BPF_TO_BE
 0x08

	)

33 
	#BPF_FROM_LE
 
BPF_TO_LE


	)

34 
	#BPF_FROM_BE
 
BPF_TO_BE


	)

37 
	#BPF_JNE
 0x50

	)

38 
	#BPF_JLT
 0xa0

	)

39 
	#BPF_JLE
 0xb0

	)

40 
	#BPF_JSGT
 0x60

	)

41 
	#BPF_JSGE
 0x70

	)

42 
	#BPF_JSLT
 0xc0

	)

43 
	#BPF_JSLE
 0xd0

	)

44 
	#BPF_CALL
 0x80

	)

45 
	#BPF_EXIT
 0x90

	)

48 
	#BPF_FETCH
 0x01

	)

49 
	#BPF_XCHG
 (0xe0 | 
BPF_FETCH
Ë

	)

50 
	#BPF_CMPXCHG
 (0xf0 | 
BPF_FETCH
Ë

	)

54 
	mBPF_REG_0
 = 0,

55 
	mBPF_REG_1
,

56 
	mBPF_REG_2
,

57 
	mBPF_REG_3
,

58 
	mBPF_REG_4
,

59 
	mBPF_REG_5
,

60 
	mBPF_REG_6
,

61 
	mBPF_REG_7
,

62 
	mBPF_REG_8
,

63 
	mBPF_REG_9
,

64 
	mBPF_REG_10
,

65 
	m__MAX_BPF_REG
,

69 
	#MAX_BPF_REG
 
__MAX_BPF_REG


	)

71 
	sbpf_ö¢
 {

72 
__u8
 
	mcode
;

73 
__u8
 
	md°_ªg
:4;

74 
__u8
 
	m§c_ªg
:4;

75 
__s16
 
	moff
;

76 
__s32
 
	mimm
;

80 
	sbpf_Õm_åõ_key
 {

81 
__u32
 
	m¥efixÀn
;

82 
__u8
 
	md©a
[0];

85 
	sbpf_cgroup_°‹age_key
 {

86 
__u64
 
	mcgroup_öode_id
;

87 
__u32
 
	m©èch_ty≥
;

90 
	ubpf_ôî_lök_öfo
 {

92 
__u32
 
	mm≠_fd
;

93 } 
	mm≠
;

838 
	ebpf_cmd
 {

839 
	mBPF_MAP_CREATE
,

840 
	mBPF_MAP_LOOKUP_ELEM
,

841 
	mBPF_MAP_UPDATE_ELEM
,

842 
	mBPF_MAP_DELETE_ELEM
,

843 
	mBPF_MAP_GET_NEXT_KEY
,

844 
	mBPF_PROG_LOAD
,

845 
	mBPF_OBJ_PIN
,

846 
	mBPF_OBJ_GET
,

847 
	mBPF_PROG_ATTACH
,

848 
	mBPF_PROG_DETACH
,

849 
	mBPF_PROG_TEST_RUN
,

850 
	mBPF_PROG_RUN
 = 
BPF_PROG_TEST_RUN
,

851 
	mBPF_PROG_GET_NEXT_ID
,

852 
	mBPF_MAP_GET_NEXT_ID
,

853 
	mBPF_PROG_GET_FD_BY_ID
,

854 
	mBPF_MAP_GET_FD_BY_ID
,

855 
	mBPF_OBJ_GET_INFO_BY_FD
,

856 
	mBPF_PROG_QUERY
,

857 
	mBPF_RAW_TRACEPOINT_OPEN
,

858 
	mBPF_BTF_LOAD
,

859 
	mBPF_BTF_GET_FD_BY_ID
,

860 
	mBPF_TASK_FD_QUERY
,

861 
	mBPF_MAP_LOOKUP_AND_DELETE_ELEM
,

862 
	mBPF_MAP_FREEZE
,

863 
	mBPF_BTF_GET_NEXT_ID
,

864 
	mBPF_MAP_LOOKUP_BATCH
,

865 
	mBPF_MAP_LOOKUP_AND_DELETE_BATCH
,

866 
	mBPF_MAP_UPDATE_BATCH
,

867 
	mBPF_MAP_DELETE_BATCH
,

868 
	mBPF_LINK_CREATE
,

869 
	mBPF_LINK_UPDATE
,

870 
	mBPF_LINK_GET_FD_BY_ID
,

871 
	mBPF_LINK_GET_NEXT_ID
,

872 
	mBPF_ENABLE_STATS
,

873 
	mBPF_ITER_CREATE
,

874 
	mBPF_LINK_DETACH
,

875 
	mBPF_PROG_BIND_MAP
,

878 
	ebpf_m≠_ty≥
 {

879 
	mBPF_MAP_TYPE_UNSPEC
,

880 
	mBPF_MAP_TYPE_HASH
,

881 
	mBPF_MAP_TYPE_ARRAY
,

882 
	mBPF_MAP_TYPE_PROG_ARRAY
,

883 
	mBPF_MAP_TYPE_PERF_EVENT_ARRAY
,

884 
	mBPF_MAP_TYPE_PERCPU_HASH
,

885 
	mBPF_MAP_TYPE_PERCPU_ARRAY
,

886 
	mBPF_MAP_TYPE_STACK_TRACE
,

887 
	mBPF_MAP_TYPE_CGROUP_ARRAY
,

888 
	mBPF_MAP_TYPE_LRU_HASH
,

889 
	mBPF_MAP_TYPE_LRU_PERCPU_HASH
,

890 
	mBPF_MAP_TYPE_LPM_TRIE
,

891 
	mBPF_MAP_TYPE_ARRAY_OF_MAPS
,

892 
	mBPF_MAP_TYPE_HASH_OF_MAPS
,

893 
	mBPF_MAP_TYPE_DEVMAP
,

894 
	mBPF_MAP_TYPE_SOCKMAP
,

895 
	mBPF_MAP_TYPE_CPUMAP
,

896 
	mBPF_MAP_TYPE_XSKMAP
,

897 
	mBPF_MAP_TYPE_SOCKHASH
,

898 
	mBPF_MAP_TYPE_CGROUP_STORAGE
,

899 
	mBPF_MAP_TYPE_REUSEPORT_SOCKARRAY
,

900 
	mBPF_MAP_TYPE_PERCPU_CGROUP_STORAGE
,

901 
	mBPF_MAP_TYPE_QUEUE
,

902 
	mBPF_MAP_TYPE_STACK
,

903 
	mBPF_MAP_TYPE_SK_STORAGE
,

904 
	mBPF_MAP_TYPE_DEVMAP_HASH
,

905 
	mBPF_MAP_TYPE_STRUCT_OPS
,

906 
	mBPF_MAP_TYPE_RINGBUF
,

907 
	mBPF_MAP_TYPE_INODE_STORAGE
,

908 
	mBPF_MAP_TYPE_TASK_STORAGE
,

919 
	ebpf_¥og_ty≥
 {

920 
	mBPF_PROG_TYPE_UNSPEC
,

921 
	mBPF_PROG_TYPE_SOCKET_FILTER
,

922 
	mBPF_PROG_TYPE_KPROBE
,

923 
	mBPF_PROG_TYPE_SCHED_CLS
,

924 
	mBPF_PROG_TYPE_SCHED_ACT
,

925 
	mBPF_PROG_TYPE_TRACEPOINT
,

926 
	mBPF_PROG_TYPE_XDP
,

927 
	mBPF_PROG_TYPE_PERF_EVENT
,

928 
	mBPF_PROG_TYPE_CGROUP_SKB
,

929 
	mBPF_PROG_TYPE_CGROUP_SOCK
,

930 
	mBPF_PROG_TYPE_LWT_IN
,

931 
	mBPF_PROG_TYPE_LWT_OUT
,

932 
	mBPF_PROG_TYPE_LWT_XMIT
,

933 
	mBPF_PROG_TYPE_SOCK_OPS
,

934 
	mBPF_PROG_TYPE_SK_SKB
,

935 
	mBPF_PROG_TYPE_CGROUP_DEVICE
,

936 
	mBPF_PROG_TYPE_SK_MSG
,

937 
	mBPF_PROG_TYPE_RAW_TRACEPOINT
,

938 
	mBPF_PROG_TYPE_CGROUP_SOCK_ADDR
,

939 
	mBPF_PROG_TYPE_LWT_SEG6LOCAL
,

940 
	mBPF_PROG_TYPE_LIRC_MODE2
,

941 
	mBPF_PROG_TYPE_SK_REUSEPORT
,

942 
	mBPF_PROG_TYPE_FLOW_DISSECTOR
,

943 
	mBPF_PROG_TYPE_CGROUP_SYSCTL
,

944 
	mBPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE
,

945 
	mBPF_PROG_TYPE_CGROUP_SOCKOPT
,

946 
	mBPF_PROG_TYPE_TRACING
,

947 
	mBPF_PROG_TYPE_STRUCT_OPS
,

948 
	mBPF_PROG_TYPE_EXT
,

949 
	mBPF_PROG_TYPE_LSM
,

950 
	mBPF_PROG_TYPE_SK_LOOKUP
,

951 
	mBPF_PROG_TYPE_SYSCALL
,

954 
	ebpf_©èch_ty≥
 {

955 
	mBPF_CGROUP_INET_INGRESS
,

956 
	mBPF_CGROUP_INET_EGRESS
,

957 
	mBPF_CGROUP_INET_SOCK_CREATE
,

958 
	mBPF_CGROUP_SOCK_OPS
,

959 
	mBPF_SK_SKB_STREAM_PARSER
,

960 
	mBPF_SK_SKB_STREAM_VERDICT
,

961 
	mBPF_CGROUP_DEVICE
,

962 
	mBPF_SK_MSG_VERDICT
,

963 
	mBPF_CGROUP_INET4_BIND
,

964 
	mBPF_CGROUP_INET6_BIND
,

965 
	mBPF_CGROUP_INET4_CONNECT
,

966 
	mBPF_CGROUP_INET6_CONNECT
,

967 
	mBPF_CGROUP_INET4_POST_BIND
,

968 
	mBPF_CGROUP_INET6_POST_BIND
,

969 
	mBPF_CGROUP_UDP4_SENDMSG
,

970 
	mBPF_CGROUP_UDP6_SENDMSG
,

971 
	mBPF_LIRC_MODE2
,

972 
	mBPF_FLOW_DISSECTOR
,

973 
	mBPF_CGROUP_SYSCTL
,

974 
	mBPF_CGROUP_UDP4_RECVMSG
,

975 
	mBPF_CGROUP_UDP6_RECVMSG
,

976 
	mBPF_CGROUP_GETSOCKOPT
,

977 
	mBPF_CGROUP_SETSOCKOPT
,

978 
	mBPF_TRACE_RAW_TP
,

979 
	mBPF_TRACE_FENTRY
,

980 
	mBPF_TRACE_FEXIT
,

981 
	mBPF_MODIFY_RETURN
,

982 
	mBPF_LSM_MAC
,

983 
	mBPF_TRACE_ITER
,

984 
	mBPF_CGROUP_INET4_GETPEERNAME
,

985 
	mBPF_CGROUP_INET6_GETPEERNAME
,

986 
	mBPF_CGROUP_INET4_GETSOCKNAME
,

987 
	mBPF_CGROUP_INET6_GETSOCKNAME
,

988 
	mBPF_XDP_DEVMAP
,

989 
	mBPF_CGROUP_INET_SOCK_RELEASE
,

990 
	mBPF_XDP_CPUMAP
,

991 
	mBPF_SK_LOOKUP
,

992 
	mBPF_XDP
,

993 
	mBPF_SK_SKB_VERDICT
,

994 
	mBPF_SK_REUSEPORT_SELECT
,

995 
	mBPF_SK_REUSEPORT_SELECT_OR_MIGRATE
,

996 
	mBPF_PERF_EVENT
,

997 
	m__MAX_BPF_ATTACH_TYPE


1000 
	#MAX_BPF_ATTACH_TYPE
 
__MAX_BPF_ATTACH_TYPE


	)

1002 
	ebpf_lök_ty≥
 {

1003 
	mBPF_LINK_TYPE_UNSPEC
 = 0,

1004 
	mBPF_LINK_TYPE_RAW_TRACEPOINT
 = 1,

1005 
	mBPF_LINK_TYPE_TRACING
 = 2,

1006 
	mBPF_LINK_TYPE_CGROUP
 = 3,

1007 
	mBPF_LINK_TYPE_ITER
 = 4,

1008 
	mBPF_LINK_TYPE_NETNS
 = 5,

1009 
	mBPF_LINK_TYPE_XDP
 = 6,

1010 
	mBPF_LINK_TYPE_PERF_EVENT
 = 7,

1012 
	mMAX_BPF_LINK_TYPE
,

1059 
	#BPF_F_ALLOW_OVERRIDE
 (1U << 0)

	)

1060 
	#BPF_F_ALLOW_MULTI
 (1U << 1)

	)

1061 
	#BPF_F_REPLACE
 (1U << 2)

	)

1068 
	#BPF_F_STRICT_ALIGNMENT
 (1U << 0)

	)

1082 
	#BPF_F_ANY_ALIGNMENT
 (1U << 1)

	)

1100 
	#BPF_F_TEST_RND_HI32
 (1U << 2)

	)

1103 
	#BPF_F_TEST_STATE_FREQ
 (1U << 3)

	)

1111 
	#BPF_F_SLEEPABLE
 (1U << 4)

	)

1124 
	#BPF_PSEUDO_MAP_FD
 1

	)

1125 
	#BPF_PSEUDO_MAP_IDX
 5

	)

1135 
	#BPF_PSEUDO_MAP_VALUE
 2

	)

1136 
	#BPF_PSEUDO_MAP_IDX_VALUE
 6

	)

1147 
	#BPF_PSEUDO_BTF_ID
 3

	)

1156 
	#BPF_PSEUDO_FUNC
 4

	)

1161 
	#BPF_PSEUDO_CALL
 1

	)

1165 
	#BPF_PSEUDO_KFUNC_CALL
 2

	)

1169 
	mBPF_ANY
 = 0,

1170 
	mBPF_NOEXIST
 = 1,

1171 
	mBPF_EXIST
 = 2,

1172 
	mBPF_F_LOCK
 = 4,

1177 
	mBPF_F_NO_PREALLOC
 = (1U << 0),

1184 
	mBPF_F_NO_COMMON_LRU
 = (1U << 1),

1186 
	mBPF_F_NUMA_NODE
 = (1U << 2),

1189 
	mBPF_F_RDONLY
 = (1U << 3),

1190 
	mBPF_F_WRONLY
 = (1U << 4),

1193 
	mBPF_F_STACK_BUILD_ID
 = (1U << 5),

1196 
	mBPF_F_ZERO_SEED
 = (1U << 6),

1199 
	mBPF_F_RDONLY_PROG
 = (1U << 7),

1200 
	mBPF_F_WRONLY_PROG
 = (1U << 8),

1203 
	mBPF_F_CLONE
 = (1U << 9),

1206 
	mBPF_F_MMAPABLE
 = (1U << 10),

1209 
	mBPF_F_PRESERVE_ELEMS
 = (1U << 11),

1212 
	mBPF_F_INNER_MAP
 = (1U << 12),

1221 
	#BPF_F_QUERY_EFFECTIVE
 (1U << 0)

	)

1226 
	#BPF_F_TEST_RUN_ON_CPU
 (1U << 0)

	)

1229 
	ebpf_°©s_ty≥
 {

1231 
	mBPF_STATS_RUN_TIME
 = 0,

1234 
	ebpf_°ack_buûd_id_°©us
 {

1236 
	mBPF_STACK_BUILD_ID_EMPTY
 = 0,

1238 
	mBPF_STACK_BUILD_ID_VALID
 = 1,

1240 
	mBPF_STACK_BUILD_ID_IP
 = 2,

1243 
	#BPF_BUILD_ID_SIZE
 20

	)

1244 
	sbpf_°ack_buûd_id
 {

1245 
__s32
 
	m°©us
;

1246 
	mbuûd_id
[
BPF_BUILD_ID_SIZE
];

1248 
__u64
 
	moff£t
;

1249 
__u64
 
	mù
;

1253 
	#BPF_OBJ_NAME_LEN
 16U

	)

1255 
	ubpf_©å
 {

1257 
__u32
 
	mm≠_ty≥
;

1258 
__u32
 
	mkey_size
;

1259 
__u32
 
	mvÆue_size
;

1260 
__u32
 
	mmax_íåõs
;

1261 
__u32
 
	mm≠_Êags
;

1264 
__u32
 
	mö√r_m≠_fd
;

1265 
__u32
 
	mnuma_node
;

1268 
	mm≠_«me
[
BPF_OBJ_NAME_LEN
];

1269 
__u32
 
	mm≠_ifödex
;

1270 
__u32
 
	mbtf_fd
;

1271 
__u32
 
	mbtf_key_ty≥_id
;

1272 
__u32
 
	mbtf_vÆue_ty≥_id
;

1273 
__u32
 
	mbtf_vmlöux_vÆue_ty≥_id
;

1280 
__u32
 
	mm≠_fd
;

1281 
__Æig√d_u64
 
	mkey
;

1283 
__Æig√d_u64
 
	mvÆue
;

1284 
__Æig√d_u64
 
	m√xt_key
;

1286 
__u64
 
	mÊags
;

1290 
__Æig√d_u64
 
	mö_b©ch
;

1293 
__Æig√d_u64
 
	mout_b©ch
;

1294 
__Æig√d_u64
 
	mkeys
;

1295 
__Æig√d_u64
 
	mvÆues
;

1296 
__u32
 
	mcou¡
;

1301 
__u32
 
	mm≠_fd
;

1302 
__u64
 
	mñem_Êags
;

1303 
__u64
 
	mÊags
;

1304 } 
	mb©ch
;

1307 
__u32
 
	m¥og_ty≥
;

1308 
__u32
 
	mö¢_˙t
;

1309 
__Æig√d_u64
 
	mö¢s
;

1310 
__Æig√d_u64
 
	mli˚n£
;

1311 
__u32
 
	mlog_Àvñ
;

1312 
__u32
 
	mlog_size
;

1313 
__Æig√d_u64
 
	mlog_buf
;

1314 
__u32
 
	mkîn_vîsi⁄
;

1315 
__u32
 
	m¥og_Êags
;

1316 
	m¥og_«me
[
BPF_OBJ_NAME_LEN
];

1317 
__u32
 
	m¥og_ifödex
;

1322 
__u32
 
	mex≥˘ed_©èch_ty≥
;

1323 
__u32
 
	m¥og_btf_fd
;

1324 
__u32
 
	mfunc_öfo_ªc_size
;

1325 
__Æig√d_u64
 
	mfunc_öfo
;

1326 
__u32
 
	mfunc_öfo_˙t
;

1327 
__u32
 
	mlöe_öfo_ªc_size
;

1328 
__Æig√d_u64
 
	mlöe_öfo
;

1329 
__u32
 
	mlöe_öfo_˙t
;

1330 
__u32
 
	m©èch_btf_id
;

1333 
__u32
 
	m©èch_¥og_fd
;

1335 
__u32
 
	m©èch_btf_obj_fd
;

1337 
	m__u32
 :32;

1338 
__Æig√d_u64
 
	mfd_¨øy
;

1342 
__Æig√d_u64
 
	m∑th«me
;

1343 
__u32
 
	mbpf_fd
;

1344 
__u32
 
	mfûe_Êags
;

1348 
__u32
 
	mèrgë_fd
;

1349 
__u32
 
	m©èch_bpf_fd
;

1350 
__u32
 
	m©èch_ty≥
;

1351 
__u32
 
	m©èch_Êags
;

1352 
__u32
 
	mª∂a˚_bpf_fd
;

1359 
__u32
 
	m¥og_fd
;

1360 
__u32
 
	mªtvÆ
;

1361 
__u32
 
	md©a_size_ö
;

1362 
__u32
 
	md©a_size_out
;

1366 
__Æig√d_u64
 
	md©a_ö
;

1367 
__Æig√d_u64
 
	md©a_out
;

1368 
__u32
 
	mª≥©
;

1369 
__u32
 
	mduøti⁄
;

1370 
__u32
 
	m˘x_size_ö
;

1371 
__u32
 
	m˘x_size_out
;

1375 
__Æig√d_u64
 
	m˘x_ö
;

1376 
__Æig√d_u64
 
	m˘x_out
;

1377 
__u32
 
	mÊags
;

1378 
__u32
 
	m˝u
;

1379 } 
	mã°
;

1383 
__u32
 
	m°¨t_id
;

1384 
__u32
 
	m¥og_id
;

1385 
__u32
 
	mm≠_id
;

1386 
__u32
 
	mbtf_id
;

1387 
__u32
 
	mlök_id
;

1389 
__u32
 
	m√xt_id
;

1390 
__u32
 
	m›í_Êags
;

1394 
__u32
 
	mbpf_fd
;

1395 
__u32
 
	möfo_Àn
;

1396 
__Æig√d_u64
 
	möfo
;

1397 } 
	möfo
;

1400 
__u32
 
	mèrgë_fd
;

1401 
__u32
 
	m©èch_ty≥
;

1402 
__u32
 
	mquîy_Êags
;

1403 
__u32
 
	m©èch_Êags
;

1404 
__Æig√d_u64
 
	m¥og_ids
;

1405 
__u32
 
	m¥og_˙t
;

1406 } 
	mquîy
;

1409 
__u64
 
	m«me
;

1410 
__u32
 
	m¥og_fd
;

1411 } 
	møw_åa˚poöt
;

1414 
__Æig√d_u64
 
	mbtf
;

1415 
__Æig√d_u64
 
	mbtf_log_buf
;

1416 
__u32
 
	mbtf_size
;

1417 
__u32
 
	mbtf_log_size
;

1418 
__u32
 
	mbtf_log_Àvñ
;

1422 
__u32
 
	mpid
;

1423 
__u32
 
	mfd
;

1424 
__u32
 
	mÊags
;

1425 
__u32
 
	mbuf_Àn
;

1426 
__Æig√d_u64
 
	mbuf
;

1431 
__u32
 
	m¥og_id
;

1432 
__u32
 
	mfd_ty≥
;

1433 
__u64
 
	m¥obe_off£t
;

1434 
__u64
 
	m¥obe_addr
;

1435 } 
	mèsk_fd_quîy
;

1438 
__u32
 
	m¥og_fd
;

1440 
__u32
 
	mèrgë_fd
;

1441 
__u32
 
	mèrgë_ifödex
;

1443 
__u32
 
	m©èch_ty≥
;

1444 
__u32
 
	mÊags
;

1446 
__u32
 
	mèrgë_btf_id
;

1448 
__Æig√d_u64
 
	môî_öfo
;

1449 
__u32
 
	môî_öfo_Àn
;

1456 
__u64
 
	mbpf_cookõ
;

1457 } 
	m≥rf_evít
;

1459 } 
	mlök_¸óã
;

1462 
__u32
 
	mlök_fd
;

1464 
__u32
 
	m√w_¥og_fd
;

1465 
__u32
 
	mÊags
;

1468 
__u32
 
	mﬁd_¥og_fd
;

1469 } 
	mlök_upd©e
;

1472 
__u32
 
	mlök_fd
;

1473 } 
	mlök_dëach
;

1476 
__u32
 
	mty≥
;

1477 } 
	míabÀ_°©s
;

1480 
__u32
 
	mlök_fd
;

1481 
__u32
 
	mÊags
;

1482 } 
	môî_¸óã
;

1485 
__u32
 
	m¥og_fd
;

1486 
__u32
 
	mm≠_fd
;

1487 
__u32
 
	mÊags
;

1488 } 
	m¥og_böd_m≠
;

1490 } 
__©åibuã__
((
Æig√d
(8)));

4883 
	#__BPF_FUNC_MAPPER
(
FN
) \

4884 
	`FN
(
un•ec
), \

4885 
	`FN
(
m≠_lookup_ñem
), \

4886 
	`FN
(
m≠_upd©e_ñem
), \

4887 
	`FN
(
m≠_dñëe_ñem
), \

4888 
	`FN
(
¥obe_ªad
), \

4889 
	`FN
(
ktime_gë_ns
), \

4890 
	`FN
(
åa˚_¥ötk
), \

4891 
	`FN
(
gë_¥™dom_u32
), \

4892 
	`FN
(
gë_smp_¥o˚ss‹_id
), \

4893 
	`FN
(
skb_°‹e_byãs
), \

4894 
	`FN
(
l3_csum_ª∂a˚
), \

4895 
	`FN
(
l4_csum_ª∂a˚
), \

4896 
	`FN
(
èû_ˇŒ
), \

4897 
	`FN
(
˛⁄e_ªdúe˘
), \

4898 
	`FN
(
gë_cuºít_pid_tgid
), \

4899 
	`FN
(
gë_cuºít_uid_gid
), \

4900 
	`FN
(
gë_cuºít_comm
), \

4901 
	`FN
(
gë_cgroup_˛assid
), \

4902 
	`FN
(
skb_vœn_push
), \

4903 
	`FN
(
skb_vœn_p›
), \

4904 
	`FN
(
skb_gë_tu¬ñ_key
), \

4905 
	`FN
(
skb_£t_tu¬ñ_key
), \

4906 
	`FN
(
≥rf_evít_ªad
), \

4907 
	`FN
(
ªdúe˘
), \

4908 
	`FN
(
gë_rouã_ªÆm
), \

4909 
	`FN
(
≥rf_evít_ouçut
), \

4910 
	`FN
(
skb_lﬂd_byãs
), \

4911 
	`FN
(
gë_°ackid
), \

4912 
	`FN
(
csum_diff
), \

4913 
	`FN
(
skb_gë_tu¬ñ_›t
), \

4914 
	`FN
(
skb_£t_tu¬ñ_›t
), \

4915 
	`FN
(
skb_ch™ge_¥Ÿo
), \

4916 
	`FN
(
skb_ch™ge_ty≥
), \

4917 
	`FN
(
skb_undî_cgroup
), \

4918 
	`FN
(
gë_hash_ªˇlc
), \

4919 
	`FN
(
gë_cuºít_èsk
), \

4920 
	`FN
(
¥obe_wrôe_u£r
), \

4921 
	`FN
(
cuºít_èsk_undî_cgroup
), \

4922 
	`FN
(
skb_ch™ge_èû
), \

4923 
	`FN
(
skb_puŒ_d©a
), \

4924 
	`FN
(
csum_upd©e
), \

4925 
	`FN
(
£t_hash_övÆid
), \

4926 
	`FN
(
gë_numa_node_id
), \

4927 
	`FN
(
skb_ch™ge_hód
), \

4928 
	`FN
(
xdp_adju°_hód
), \

4929 
	`FN
(
¥obe_ªad_°r
), \

4930 
	`FN
(
gë_sockë_cookõ
), \

4931 
	`FN
(
gë_sockë_uid
), \

4932 
	`FN
(
£t_hash
), \

4933 
	`FN
(
£tsock›t
), \

4934 
	`FN
(
skb_adju°_room
), \

4935 
	`FN
(
ªdúe˘_m≠
), \

4936 
	`FN
(
sk_ªdúe˘_m≠
), \

4937 
	`FN
(
sock_m≠_upd©e
), \

4938 
	`FN
(
xdp_adju°_mëa
), \

4939 
	`FN
(
≥rf_evít_ªad_vÆue
), \

4940 
	`FN
(
≥rf_¥og_ªad_vÆue
), \

4941 
	`FN
(
gësock›t
), \

4942 
	`FN
(
ovîride_ªtu∫
), \

4943 
	`FN
(
sock_›s_cb_Êags_£t
), \

4944 
	`FN
(
msg_ªdúe˘_m≠
), \

4945 
	`FN
(
msg_≠∂y_byãs
), \

4946 
	`FN
(
msg_c‹k_byãs
), \

4947 
	`FN
(
msg_puŒ_d©a
), \

4948 
	`FN
(
böd
), \

4949 
	`FN
(
xdp_adju°_èû
), \

4950 
	`FN
(
skb_gë_x‰m_°©e
), \

4951 
	`FN
(
gë_°ack
), \

4952 
	`FN
(
skb_lﬂd_byãs_ªœtive
), \

4953 
	`FN
(
fib_lookup
), \

4954 
	`FN
(
sock_hash_upd©e
), \

4955 
	`FN
(
msg_ªdúe˘_hash
), \

4956 
	`FN
(
sk_ªdúe˘_hash
), \

4957 
	`FN
(
lwt_push_íˇp
), \

4958 
	`FN
(
lwt_£g6_°‹e_byãs
), \

4959 
	`FN
(
lwt_£g6_adju°_§h
), \

4960 
	`FN
(
lwt_£g6_a˘i⁄
), \

4961 
	`FN
(
rc_ª≥©
), \

4962 
	`FN
(
rc_keydown
), \

4963 
	`FN
(
skb_cgroup_id
), \

4964 
	`FN
(
gë_cuºít_cgroup_id
), \

4965 
	`FN
(
gë_loˇl_°‹age
), \

4966 
	`FN
(
sk_£À˘_ªu£p‹t
), \

4967 
	`FN
(
skb_™˚°‹_cgroup_id
), \

4968 
	`FN
(
sk_lookup_t˝
), \

4969 
	`FN
(
sk_lookup_udp
), \

4970 
	`FN
(
sk_ªÀa£
), \

4971 
	`FN
(
m≠_push_ñem
), \

4972 
	`FN
(
m≠_p›_ñem
), \

4973 
	`FN
(
m≠_≥ek_ñem
), \

4974 
	`FN
(
msg_push_d©a
), \

4975 
	`FN
(
msg_p›_d©a
), \

4976 
	`FN
(
rc_poöãr_ªl
), \

4977 
	`FN
(
•ö_lock
), \

4978 
	`FN
(
•ö_u∆ock
), \

4979 
	`FN
(
sk_fuŒsock
), \

4980 
	`FN
(
t˝_sock
), \

4981 
	`FN
(
skb_e˙_£t_˚
), \

4982 
	`FN
(
gë_li°íî_sock
), \

4983 
	`FN
(
skc_lookup_t˝
), \

4984 
	`FN
(
t˝_check_syncookõ
), \

4985 
	`FN
(
sys˘l_gë_«me
), \

4986 
	`FN
(
sys˘l_gë_cuºít_vÆue
), \

4987 
	`FN
(
sys˘l_gë_√w_vÆue
), \

4988 
	`FN
(
sys˘l_£t_√w_vÆue
), \

4989 
	`FN
(
°πﬁ
), \

4990 
	`FN
(
°πoul
), \

4991 
	`FN
(
sk_°‹age_gë
), \

4992 
	`FN
(
sk_°‹age_dñëe
), \

4993 
	`FN
(
£nd_sig«l
), \

4994 
	`FN
(
t˝_gí_syncookõ
), \

4995 
	`FN
(
skb_ouçut
), \

4996 
	`FN
(
¥obe_ªad_u£r
), \

4997 
	`FN
(
¥obe_ªad_kî√l
), \

4998 
	`FN
(
¥obe_ªad_u£r_°r
), \

4999 
	`FN
(
¥obe_ªad_kî√l_°r
), \

5000 
	`FN
(
t˝_£nd_ack
), \

5001 
	`FN
(
£nd_sig«l_thªad
), \

5002 
	`FN
(
jiffõs64
), \

5003 
	`FN
(
ªad_bønch_ªc‹ds
), \

5004 
	`FN
(
gë_ns_cuºít_pid_tgid
), \

5005 
	`FN
(
xdp_ouçut
), \

5006 
	`FN
(
gë_√äs_cookõ
), \

5007 
	`FN
(
gë_cuºít_™˚°‹_cgroup_id
), \

5008 
	`FN
(
sk_assign
), \

5009 
	`FN
(
ktime_gë_boŸ_ns
), \

5010 
	`FN
(
£q_¥ötf
), \

5011 
	`FN
(
£q_wrôe
), \

5012 
	`FN
(
sk_cgroup_id
), \

5013 
	`FN
(
sk_™˚°‹_cgroup_id
), \

5014 
	`FN
(
rögbuf_ouçut
), \

5015 
	`FN
(
rögbuf_ª£rve
), \

5016 
	`FN
(
rögbuf_submô
), \

5017 
	`FN
(
rögbuf_disˇrd
), \

5018 
	`FN
(
rögbuf_quîy
), \

5019 
	`FN
(
csum_Àvñ
), \

5020 
	`FN
(
skc_to_t˝6_sock
), \

5021 
	`FN
(
skc_to_t˝_sock
), \

5022 
	`FN
(
skc_to_t˝_timewaô_sock
), \

5023 
	`FN
(
skc_to_t˝_ªque°_sock
), \

5024 
	`FN
(
skc_to_udp6_sock
), \

5025 
	`FN
(
gë_èsk_°ack
), \

5026 
	`FN
(
lﬂd_hdr_›t
), \

5027 
	`FN
(
°‹e_hdr_›t
), \

5028 
	`FN
(
ª£rve_hdr_›t
), \

5029 
	`FN
(
öode_°‹age_gë
), \

5030 
	`FN
(
öode_°‹age_dñëe
), \

5031 
	`FN
(
d_∑th
), \

5032 
	`FN
(
c›y_‰om_u£r
), \

5033 
	`FN
(
¢¥ötf_btf
), \

5034 
	`FN
(
£q_¥ötf_btf
), \

5035 
	`FN
(
skb_cgroup_˛assid
), \

5036 
	`FN
(
ªdúe˘_√igh
), \

5037 
	`FN
(
≥r_˝u_±r
), \

5038 
	`FN
(
this_˝u_±r
), \

5039 
	`FN
(
ªdúe˘_≥î
), \

5040 
	`FN
(
èsk_°‹age_gë
), \

5041 
	`FN
(
èsk_°‹age_dñëe
), \

5042 
	`FN
(
gë_cuºít_èsk_btf
), \

5043 
	`FN
(
b¥m_›ts_£t
), \

5044 
	`FN
(
ktime_gë_cﬂr£_ns
), \

5045 
	`FN
(
ima_öode_hash
), \

5046 
	`FN
(
sock_‰om_fûe
), \

5047 
	`FN
(
check_mtu
), \

5048 
	`FN
(
f‹_óch_m≠_ñem
), \

5049 
	`FN
(
¢¥ötf
), \

5050 
	`FN
(
sys_bpf
), \

5051 
	`FN
(
btf_föd_by_«me_köd
), \

5052 
	`FN
(
sys_˛o£
), \

5053 
	`FN
(
timî_öô
), \

5054 
	`FN
(
timî_£t_ˇŒback
), \

5055 
	`FN
(
timî_°¨t
), \

5056 
	`FN
(
timî_ˇn˚l
), \

5057 
	`FN
(
gë_func_ù
), \

5058 
	`FN
(
gë_©èch_cookõ
), \

5059 
	`FN
(
èsk_±_ªgs
), \

5060 

	)

5065 
	#__BPF_ENUM_FN
(
x
Ë
BPF_FUNC_
 ## 
	)
x

5066 
	ebpf_func_id
 {

5067 
__BPF_FUNC_MAPPER
(
__BPF_ENUM_FN
)

5068 
	m__BPF_FUNC_MAX_ID
,

5070 #unde‡
__BPF_ENUM_FN


5076 
	mBPF_F_RECOMPUTE_CSUM
 = (1ULL << 0),

5077 
	mBPF_F_INVALIDATE_HASH
 = (1ULL << 1),

5084 
	mBPF_F_HDR_FIELD_MASK
 = 0xfULL,

5089 
	mBPF_F_PSEUDO_HDR
 = (1ULL << 4),

5090 
	mBPF_F_MARK_MANGLED_0
 = (1ULL << 5),

5091 
	mBPF_F_MARK_ENFORCE
 = (1ULL << 6),

5096 
	mBPF_F_INGRESS
 = (1ULL << 0),

5101 
	mBPF_F_TUNINFO_IPV6
 = (1ULL << 0),

5106 
	mBPF_F_SKIP_FIELD_MASK
 = 0xffULL,

5107 
	mBPF_F_USER_STACK
 = (1ULL << 8),

5109 
	mBPF_F_FAST_STACK_CMP
 = (1ULL << 9),

5110 
	mBPF_F_REUSE_STACKID
 = (1ULL << 10),

5112 
	mBPF_F_USER_BUILD_ID
 = (1ULL << 11),

5117 
	mBPF_F_ZERO_CSUM_TX
 = (1ULL << 1),

5118 
	mBPF_F_DONT_FRAGMENT
 = (1ULL << 2),

5119 
	mBPF_F_SEQ_NUMBER
 = (1ULL << 3),

5126 
	mBPF_F_INDEX_MASK
 = 0xffffffffULL,

5127 
	mBPF_F_CURRENT_CPU
 = 
BPF_F_INDEX_MASK
,

5129 
	mBPF_F_CTXLEN_MASK
 = (0xfffffULL << 32),

5134 
	mBPF_F_CURRENT_NETNS
 = (-1L),

5139 
	mBPF_CSUM_LEVEL_QUERY
,

5140 
	mBPF_CSUM_LEVEL_INC
,

5141 
	mBPF_CSUM_LEVEL_DEC
,

5142 
	mBPF_CSUM_LEVEL_RESET
,

5147 
	mBPF_F_ADJ_ROOM_FIXED_GSO
 = (1ULL << 0),

5148 
	mBPF_F_ADJ_ROOM_ENCAP_L3_IPV4
 = (1ULL << 1),

5149 
	mBPF_F_ADJ_ROOM_ENCAP_L3_IPV6
 = (1ULL << 2),

5150 
	mBPF_F_ADJ_ROOM_ENCAP_L4_GRE
 = (1ULL << 3),

5151 
	mBPF_F_ADJ_ROOM_ENCAP_L4_UDP
 = (1ULL << 4),

5152 
	mBPF_F_ADJ_ROOM_NO_CSUM_RESET
 = (1ULL << 5),

5153 
	mBPF_F_ADJ_ROOM_ENCAP_L2_ETH
 = (1ULL << 6),

5157 
	mBPF_ADJ_ROOM_ENCAP_L2_MASK
 = 0xff,

5158 
	mBPF_ADJ_ROOM_ENCAP_L2_SHIFT
 = 56,

5161 
	#BPF_F_ADJ_ROOM_ENCAP_L2
(
Àn
Ë(((
__u64
)len & \

5162 
BPF_ADJ_ROOM_ENCAP_L2_MASK
) \

5163 << 
BPF_ADJ_ROOM_ENCAP_L2_SHIFT
)

	)

5167 
	mBPF_F_SYSCTL_BASE_NAME
 = (1ULL << 0),

5172 
	mBPF_LOCAL_STORAGE_GET_F_CREATE
 = (1ULL << 0),

5176 
	mBPF_SK_STORAGE_GET_F_CREATE
 = 
BPF_LOCAL_STORAGE_GET_F_CREATE
,

5181 
	mBPF_F_GET_BRANCH_RECORDS_SIZE
 = (1ULL << 0),

5188 
	mBPF_RB_NO_WAKEUP
 = (1ULL << 0),

5189 
	mBPF_RB_FORCE_WAKEUP
 = (1ULL << 1),

5194 
	mBPF_RB_AVAIL_DATA
 = 0,

5195 
	mBPF_RB_RING_SIZE
 = 1,

5196 
	mBPF_RB_CONS_POS
 = 2,

5197 
	mBPF_RB_PROD_POS
 = 3,

5202 
	mBPF_RINGBUF_BUSY_BIT
 = (1U << 31),

5203 
	mBPF_RINGBUF_DISCARD_BIT
 = (1U << 30),

5204 
	mBPF_RINGBUF_HDR_SZ
 = 8,

5209 
	mBPF_SK_LOOKUP_F_REPLACE
 = (1ULL << 0),

5210 
	mBPF_SK_LOOKUP_F_NO_REUSEPORT
 = (1ULL << 1),

5214 
	ebpf_adj_room_mode
 {

5215 
	mBPF_ADJ_ROOM_NET
,

5216 
	mBPF_ADJ_ROOM_MAC
,

5220 
	ebpf_hdr_°¨t_off
 {

5221 
	mBPF_HDR_START_MAC
,

5222 
	mBPF_HDR_START_NET
,

5226 
	ebpf_lwt_íˇp_mode
 {

5227 
	mBPF_LWT_ENCAP_SEG6
,

5228 
	mBPF_LWT_ENCAP_SEG6_INLINE
,

5229 
	mBPF_LWT_ENCAP_IP
,

5234 
	mBPF_F_BPRM_SECUREEXEC
 = (1ULL << 0),

5239 
	mBPF_F_BROADCAST
 = (1ULL << 3),

5240 
	mBPF_F_EXCLUDE_INGRESS
 = (1ULL << 4),

5243 
	#__bpf_md_±r
(
ty≥
, 
«me
) \

5245 
ty≥
 
«me
; \

5246 
__u64
 :64; \

5247 } 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

5252 
	s__sk_buff
 {

5253 
__u32
 
	mÀn
;

5254 
__u32
 
	mpkt_ty≥
;

5255 
__u32
 
	mm¨k
;

5256 
__u32
 
	mqueue_m≠pög
;

5257 
__u32
 
	m¥Ÿocﬁ
;

5258 
__u32
 
	mvœn_¥e£¡
;

5259 
__u32
 
	mvœn_tci
;

5260 
__u32
 
	mvœn_¥Ÿo
;

5261 
__u32
 
	m¥i‹ôy
;

5262 
__u32
 
	mögªss_ifödex
;

5263 
__u32
 
	mifödex
;

5264 
__u32
 
	mtc_ödex
;

5265 
__u32
 
	mcb
[5];

5266 
__u32
 
	mhash
;

5267 
__u32
 
	mtc_˛assid
;

5268 
__u32
 
	md©a
;

5269 
__u32
 
	md©a_íd
;

5270 
__u32
 
	m«pi_id
;

5273 
__u32
 
	mÁmûy
;

5274 
__u32
 
	mªmŸe_ù4
;

5275 
__u32
 
	mloˇl_ù4
;

5276 
__u32
 
	mªmŸe_ù6
[4];

5277 
__u32
 
	mloˇl_ù6
[4];

5278 
__u32
 
	mªmŸe_p‹t
;

5279 
__u32
 
	mloˇl_p‹t
;

5282 
__u32
 
	md©a_mëa
;

5283 
__bpf_md_±r
(
bpf_Êow_keys
 *, 
Êow_keys
);

5284 
__u64
 
	mt°amp
;

5285 
__u32
 
	mwúe_Àn
;

5286 
__u32
 
	mgso_£gs
;

5287 
__bpf_md_±r
(
bpf_sock
 *, 
sk
);

5288 
__u32
 
	mgso_size
;

5291 
	sbpf_tu¬ñ_key
 {

5292 
__u32
 
	mtu¬ñ_id
;

5294 
__u32
 
	mªmŸe_ùv4
;

5295 
__u32
 
	mªmŸe_ùv6
[4];

5297 
__u8
 
	mtu¬ñ_tos
;

5298 
__u8
 
	mtu¬ñ_âl
;

5299 
__u16
 
	mtu¬ñ_ext
;

5300 
__u32
 
	mtu¬ñ_œbñ
;

5306 
	sbpf_x‰m_°©e
 {

5307 
__u32
 
	mªqid
;

5308 
__u32
 
	m•i
;

5309 
__u16
 
	mÁmûy
;

5310 
__u16
 
	mext
;

5312 
__u32
 
	mªmŸe_ùv4
;

5313 
__u32
 
	mªmŸe_ùv6
[4];

5324 
	ebpf_ªt_code
 {

5325 
	mBPF_OK
 = 0,

5327 
	mBPF_DROP
 = 2,

5329 
	mBPF_REDIRECT
 = 7,

5338 
	mBPF_LWT_REROUTE
 = 128,

5341 
	sbpf_sock
 {

5342 
__u32
 
	mbound_dev_if
;

5343 
__u32
 
	mÁmûy
;

5344 
__u32
 
	mty≥
;

5345 
__u32
 
	m¥Ÿocﬁ
;

5346 
__u32
 
	mm¨k
;

5347 
__u32
 
	m¥i‹ôy
;

5349 
__u32
 
	m§c_ù4
;

5350 
__u32
 
	m§c_ù6
[4];

5351 
__u32
 
	m§c_p‹t
;

5352 
__be16
 
	md°_p‹t
;

5353 
	m__u16
 :16;

5354 
__u32
 
	md°_ù4
;

5355 
__u32
 
	md°_ù6
[4];

5356 
__u32
 
	m°©e
;

5357 
__s32
 
	mrx_queue_m≠pög
;

5360 
	sbpf_t˝_sock
 {

5361 
__u32
 
	m¢d_cwnd
;

5362 
__u32
 
	m§â_us
;

5363 
__u32
 
	mπt_mö
;

5364 
__u32
 
	m¢d_s°hªsh
;

5365 
__u32
 
	mrcv_nxt
;

5366 
__u32
 
	m¢d_nxt
;

5367 
__u32
 
	m¢d_u«
;

5368 
__u32
 
	mmss_ˇche
;

5369 
__u32
 
	me˙_Êags
;

5370 
__u32
 
	møã_dñivîed
;

5371 
__u32
 
	møã_öãrvÆ_us
;

5372 
__u32
 
	m∑ckës_out
;

5373 
__u32
 
	mªå™s_out
;

5374 
__u32
 
	mtŸÆ_ªå™s
;

5375 
__u32
 
	m£gs_ö
;

5378 
__u32
 
	md©a_£gs_ö
;

5381 
__u32
 
	m£gs_out
;

5384 
__u32
 
	md©a_£gs_out
;

5387 
__u32
 
	mlo°_out
;

5388 
__u32
 
	mßcked_out
;

5389 
__u64
 
	mbyãs_ª˚ived
;

5393 
__u64
 
	mbyãs_acked
;

5397 
__u32
 
	mdßck_dups
;

5400 
__u32
 
	mdñivîed
;

5401 
__u32
 
	mdñivîed_˚
;

5402 
__u32
 
	micsk_ªå™smôs
;

5405 
	sbpf_sock_tu∂e
 {

5408 
__be32
 
	mßddr
;

5409 
__be32
 
	mdaddr
;

5410 
__be16
 
	m•‹t
;

5411 
__be16
 
	mdp‹t
;

5412 } 
	mùv4
;

5414 
__be32
 
	mßddr
[4];

5415 
__be32
 
	mdaddr
[4];

5416 
__be16
 
	m•‹t
;

5417 
__be16
 
	mdp‹t
;

5418 } 
	mùv6
;

5422 
	sbpf_xdp_sock
 {

5423 
__u32
 
	mqueue_id
;

5426 
	#XDP_PACKET_HEADROOM
 256

	)

5433 
	exdp_a˘i⁄
 {

5434 
	mXDP_ABORTED
 = 0,

5435 
	mXDP_DROP
,

5436 
	mXDP_PASS
,

5437 
	mXDP_TX
,

5438 
	mXDP_REDIRECT
,

5444 
	sxdp_md
 {

5445 
__u32
 
	md©a
;

5446 
__u32
 
	md©a_íd
;

5447 
__u32
 
	md©a_mëa
;

5449 
__u32
 
	mögªss_ifödex
;

5450 
__u32
 
	mrx_queue_ödex
;

5452 
__u32
 
	megªss_ifödex
;

5460 
	sbpf_devm≠_vÆ
 {

5461 
__u32
 
	mifödex
;

5463 
	mfd
;

5464 
__u32
 
	mid
;

5465 } 
	mbpf_¥og
;

5473 
	sbpf_˝um≠_vÆ
 {

5474 
__u32
 
	mqsize
;

5476 
	mfd
;

5477 
__u32
 
	mid
;

5478 } 
	mbpf_¥og
;

5481 
	esk_a˘i⁄
 {

5482 
	mSK_DROP
 = 0,

5483 
	mSK_PASS
,

5489 
	ssk_msg_md
 {

5490 
__bpf_md_±r
(*, 
d©a
);

5491 
__bpf_md_±r
(*, 
d©a_íd
);

5493 
__u32
 
	mÁmûy
;

5494 
__u32
 
	mªmŸe_ù4
;

5495 
__u32
 
	mloˇl_ù4
;

5496 
__u32
 
	mªmŸe_ù6
[4];

5497 
__u32
 
	mloˇl_ù6
[4];

5498 
__u32
 
	mªmŸe_p‹t
;

5499 
__u32
 
	mloˇl_p‹t
;

5500 
__u32
 
	msize
;

5502 
__bpf_md_±r
(
bpf_sock
 *, 
sk
);

5505 
	ssk_ªu£p‹t_md
 {

5510 
__bpf_md_±r
(*, 
d©a
);

5512 
__bpf_md_±r
(*, 
d©a_íd
);

5519 
__u32
 
	mÀn
;

5524 
__u32
 
	mëh_¥Ÿocﬁ
;

5525 
__u32
 
	mù_¥Ÿocﬁ
;

5526 
__u32
 
	mböd_ö™y
;

5527 
__u32
 
	mhash
;

5540 
__bpf_md_±r
(
bpf_sock
 *, 
sk
);

5541 
__bpf_md_±r
(
bpf_sock
 *, 
migøtög_sk
);

5544 
	#BPF_TAG_SIZE
 8

	)

5546 
	sbpf_¥og_öfo
 {

5547 
__u32
 
	mty≥
;

5548 
__u32
 
	mid
;

5549 
__u8
 
	mèg
[
BPF_TAG_SIZE
];

5550 
__u32
 
	mjôed_¥og_Àn
;

5551 
__u32
 
	mxœãd_¥og_Àn
;

5552 
__Æig√d_u64
 
	mjôed_¥og_ö¢s
;

5553 
__Æig√d_u64
 
	mxœãd_¥og_ö¢s
;

5554 
__u64
 
	mlﬂd_time
;

5555 
__u32
 
	m¸óãd_by_uid
;

5556 
__u32
 
	mƒ_m≠_ids
;

5557 
__Æig√d_u64
 
	mm≠_ids
;

5558 
	m«me
[
BPF_OBJ_NAME_LEN
];

5559 
__u32
 
	mifödex
;

5560 
__u32
 
	mg∂_com∑tibÀ
:1;

5561 
	m__u32
 :31;

5562 
__u64
 
	m√äs_dev
;

5563 
__u64
 
	m√äs_öo
;

5564 
__u32
 
	mƒ_jôed_ksyms
;

5565 
__u32
 
	mƒ_jôed_func_Àns
;

5566 
__Æig√d_u64
 
	mjôed_ksyms
;

5567 
__Æig√d_u64
 
	mjôed_func_Àns
;

5568 
__u32
 
	mbtf_id
;

5569 
__u32
 
	mfunc_öfo_ªc_size
;

5570 
__Æig√d_u64
 
	mfunc_öfo
;

5571 
__u32
 
	mƒ_func_öfo
;

5572 
__u32
 
	mƒ_löe_öfo
;

5573 
__Æig√d_u64
 
	mlöe_öfo
;

5574 
__Æig√d_u64
 
	mjôed_löe_öfo
;

5575 
__u32
 
	mƒ_jôed_löe_öfo
;

5576 
__u32
 
	mlöe_öfo_ªc_size
;

5577 
__u32
 
	mjôed_löe_öfo_ªc_size
;

5578 
__u32
 
	mƒ_¥og_ègs
;

5579 
__Æig√d_u64
 
	m¥og_ègs
;

5580 
__u64
 
	mrun_time_ns
;

5581 
__u64
 
	mrun_˙t
;

5582 
__u64
 
	mªcursi⁄_mis£s
;

5583 } 
__©åibuã__
((
Æig√d
(8)));

5585 
	sbpf_m≠_öfo
 {

5586 
__u32
 
	mty≥
;

5587 
__u32
 
	mid
;

5588 
__u32
 
	mkey_size
;

5589 
__u32
 
	mvÆue_size
;

5590 
__u32
 
	mmax_íåõs
;

5591 
__u32
 
	mm≠_Êags
;

5592 
	m«me
[
BPF_OBJ_NAME_LEN
];

5593 
__u32
 
	mifödex
;

5594 
__u32
 
	mbtf_vmlöux_vÆue_ty≥_id
;

5595 
__u64
 
	m√äs_dev
;

5596 
__u64
 
	m√äs_öo
;

5597 
__u32
 
	mbtf_id
;

5598 
__u32
 
	mbtf_key_ty≥_id
;

5599 
__u32
 
	mbtf_vÆue_ty≥_id
;

5600 } 
__©åibuã__
((
Æig√d
(8)));

5602 
	sbpf_btf_öfo
 {

5603 
__Æig√d_u64
 
	mbtf
;

5604 
__u32
 
	mbtf_size
;

5605 
__u32
 
	mid
;

5606 
__Æig√d_u64
 
	m«me
;

5607 
__u32
 
	m«me_Àn
;

5608 
__u32
 
	mkî√l_btf
;

5609 } 
__©åibuã__
((
Æig√d
(8)));

5611 
	sbpf_lök_öfo
 {

5612 
__u32
 
	mty≥
;

5613 
__u32
 
	mid
;

5614 
__u32
 
	m¥og_id
;

5617 
__Æig√d_u64
 
	mç_«me
;

5618 
__u32
 
	mç_«me_Àn
;

5619 } 
	møw_åa˚poöt
;

5621 
__u32
 
	m©èch_ty≥
;

5622 
__u32
 
	mèrgë_obj_id
;

5623 
__u32
 
	mèrgë_btf_id
;

5624 } 
	måacög
;

5626 
__u64
 
	mcgroup_id
;

5627 
__u32
 
	m©èch_ty≥
;

5628 } 
	mcgroup
;

5630 
__Æig√d_u64
 
	mèrgë_«me
;

5631 
__u32
 
	mèrgë_«me_Àn
;

5634 
__u32
 
	mm≠_id
;

5635 } 
	mm≠
;

5637 } 
	môî
;

5639 
__u32
 
	m√äs_öo
;

5640 
__u32
 
	m©èch_ty≥
;

5641 } 
	m√äs
;

5643 
__u32
 
	mifödex
;

5644 } 
	mxdp
;

5646 } 
__©åibuã__
((
Æig√d
(8)));

5652 
	sbpf_sock_addr
 {

5653 
__u32
 
	mu£r_Ámûy
;

5654 
__u32
 
	mu£r_ù4
;

5657 
__u32
 
	mu£r_ù6
[4];

5660 
__u32
 
	mu£r_p‹t
;

5663 
__u32
 
	mÁmûy
;

5664 
__u32
 
	mty≥
;

5665 
__u32
 
	m¥Ÿocﬁ
;

5666 
__u32
 
	mmsg_§c_ù4
;

5669 
__u32
 
	mmsg_§c_ù6
[4];

5672 
__bpf_md_±r
(
bpf_sock
 *, 
sk
);

5681 
	sbpf_sock_›s
 {

5682 
__u32
 
	m›
;

5684 
__u32
 
	m¨gs
[4];

5685 
__u32
 
	mª∂y
;

5686 
__u32
 
	mª∂yl⁄g
[4];

5688 
__u32
 
	mÁmûy
;

5689 
__u32
 
	mªmŸe_ù4
;

5690 
__u32
 
	mloˇl_ù4
;

5691 
__u32
 
	mªmŸe_ù6
[4];

5692 
__u32
 
	mloˇl_ù6
[4];

5693 
__u32
 
	mªmŸe_p‹t
;

5694 
__u32
 
	mloˇl_p‹t
;

5695 
__u32
 
	mis_fuŒsock
;

5699 
__u32
 
	m¢d_cwnd
;

5700 
__u32
 
	m§â_us
;

5701 
__u32
 
	mbpf_sock_›s_cb_Êags
;

5702 
__u32
 
	m°©e
;

5703 
__u32
 
	mπt_mö
;

5704 
__u32
 
	m¢d_s°hªsh
;

5705 
__u32
 
	mrcv_nxt
;

5706 
__u32
 
	m¢d_nxt
;

5707 
__u32
 
	m¢d_u«
;

5708 
__u32
 
	mmss_ˇche
;

5709 
__u32
 
	me˙_Êags
;

5710 
__u32
 
	møã_dñivîed
;

5711 
__u32
 
	møã_öãrvÆ_us
;

5712 
__u32
 
	m∑ckës_out
;

5713 
__u32
 
	mªå™s_out
;

5714 
__u32
 
	mtŸÆ_ªå™s
;

5715 
__u32
 
	m£gs_ö
;

5716 
__u32
 
	md©a_£gs_ö
;

5717 
__u32
 
	m£gs_out
;

5718 
__u32
 
	md©a_£gs_out
;

5719 
__u32
 
	mlo°_out
;

5720 
__u32
 
	mßcked_out
;

5721 
__u32
 
	msk_txhash
;

5722 
__u64
 
	mbyãs_ª˚ived
;

5723 
__u64
 
	mbyãs_acked
;

5724 
__bpf_md_±r
(
bpf_sock
 *, 
sk
);

5739 
__bpf_md_±r
(*, 
skb_d©a
);

5740 
__bpf_md_±r
(*, 
skb_d©a_íd
);

5741 
__u32
 
	mskb_Àn
;

5745 
__u32
 
	mskb_t˝_Êags
;

5759 
	mBPF_SOCK_OPS_RTO_CB_FLAG
 = (1<<0),

5760 
	mBPF_SOCK_OPS_RETRANS_CB_FLAG
 = (1<<1),

5761 
	mBPF_SOCK_OPS_STATE_CB_FLAG
 = (1<<2),

5762 
	mBPF_SOCK_OPS_RTT_CB_FLAG
 = (1<<3),

5781 
	mBPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG
 = (1<<4),

5790 
	mBPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG
 = (1<<5),

5805 
	mBPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG
 = (1<<6),

5807 
	mBPF_SOCK_OPS_ALL_CB_FLAGS
 = 0x7F,

5814 
	mBPF_SOCK_OPS_VOID
,

5815 
	mBPF_SOCK_OPS_TIMEOUT_INIT
,

5818 
	mBPF_SOCK_OPS_RWND_INIT
,

5822 
	mBPF_SOCK_OPS_TCP_CONNECT_CB
,

5825 
	mBPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB
,

5829 
	mBPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB
,

5833 
	mBPF_SOCK_OPS_NEEDS_ECN
,

5836 
	mBPF_SOCK_OPS_BASE_RTT
,

5843 
	mBPF_SOCK_OPS_RTO_CB
,

5848 
	mBPF_SOCK_OPS_RETRANS_CB
,

5854 
	mBPF_SOCK_OPS_STATE_CB
,

5858 
	mBPF_SOCK_OPS_TCP_LISTEN_CB
,

5861 
	mBPF_SOCK_OPS_RTT_CB
,

5863 
	mBPF_SOCK_OPS_PARSE_HDR_OPT_CB
,

5877 
	mBPF_SOCK_OPS_HDR_OPT_LEN_CB
,

5894 
	mBPF_SOCK_OPS_WRITE_HDR_OPT_CB
,

5928 
	mBPF_TCP_ESTABLISHED
 = 1,

5929 
	mBPF_TCP_SYN_SENT
,

5930 
	mBPF_TCP_SYN_RECV
,

5931 
	mBPF_TCP_FIN_WAIT1
,

5932 
	mBPF_TCP_FIN_WAIT2
,

5933 
	mBPF_TCP_TIME_WAIT
,

5934 
	mBPF_TCP_CLOSE
,

5935 
	mBPF_TCP_CLOSE_WAIT
,

5936 
	mBPF_TCP_LAST_ACK
,

5937 
	mBPF_TCP_LISTEN
,

5938 
	mBPF_TCP_CLOSING
,

5939 
	mBPF_TCP_NEW_SYN_RECV
,

5941 
	mBPF_TCP_MAX_STATES


5945 
	mTCP_BPF_IW
 = 1001,

5946 
	mTCP_BPF_SNDCWND_CLAMP
 = 1002,

5947 
	mTCP_BPF_DELACK_MAX
 = 1003,

5948 
	mTCP_BPF_RTO_MIN
 = 1004,

5981 
	mTCP_BPF_SYN
 = 1005,

5982 
	mTCP_BPF_SYN_IP
 = 1006,

5983 
	mTCP_BPF_SYN_MAC
 = 1007,

5987 
	mBPF_LOAD_HDR_OPT_TCP_SYN
 = (1ULL << 0),

5994 
	mBPF_WRITE_HDR_TCP_CURRENT_MSS
 = 1,

6001 
	mBPF_WRITE_HDR_TCP_SYNACK_COOKIE
 = 2,

6006 
	sbpf_≥rf_evít_vÆue
 {

6007 
__u64
 
	mcou¡î
;

6008 
__u64
 
	míabÀd
;

6009 
__u64
 
	mru¬ög
;

6013 
	mBPF_DEVCG_ACC_MKNOD
 = (1ULL << 0),

6014 
	mBPF_DEVCG_ACC_READ
 = (1ULL << 1),

6015 
	mBPF_DEVCG_ACC_WRITE
 = (1ULL << 2),

6019 
	mBPF_DEVCG_DEV_BLOCK
 = (1ULL << 0),

6020 
	mBPF_DEVCG_DEV_CHAR
 = (1ULL << 1),

6023 
	sbpf_cgroup_dev_˘x
 {

6025 
__u32
 
	mac˚ss_ty≥
;

6026 
__u32
 
	mmaj‹
;

6027 
__u32
 
	mmö‹
;

6030 
	sbpf_øw_åa˚poöt_¨gs
 {

6031 
__u64
 
	m¨gs
[0];

6038 
	mBPF_FIB_LOOKUP_DIRECT
 = (1U << 0),

6039 
	mBPF_FIB_LOOKUP_OUTPUT
 = (1U << 1),

6043 
	mBPF_FIB_LKUP_RET_SUCCESS
,

6044 
	mBPF_FIB_LKUP_RET_BLACKHOLE
,

6045 
	mBPF_FIB_LKUP_RET_UNREACHABLE
,

6046 
	mBPF_FIB_LKUP_RET_PROHIBIT
,

6047 
	mBPF_FIB_LKUP_RET_NOT_FWDED
,

6048 
	mBPF_FIB_LKUP_RET_FWD_DISABLED
,

6049 
	mBPF_FIB_LKUP_RET_UNSUPP_LWT
,

6050 
	mBPF_FIB_LKUP_RET_NO_NEIGH
,

6051 
	mBPF_FIB_LKUP_RET_FRAG_NEEDED
,

6054 
	sbpf_fib_lookup
 {

6058 
__u8
 
	mÁmûy
;

6061 
__u8
 
	ml4_¥Ÿocﬁ
;

6062 
__be16
 
	m•‹t
;

6063 
__be16
 
	mdp‹t
;

6067 
__u16
 
	mtŸ_Àn
;

6070 
__u16
 
	mmtu_ªsu…
;

6075 
__u32
 
	mifödex
;

6079 
__u8
 
	mtos
;

6080 
__be32
 
	mÊowöfo
;

6083 
__u32
 
	mπ_mëric
;

6087 
__be32
 
	mùv4_§c
;

6088 
__u32
 
	mùv6_§c
[4];

6096 
__be32
 
	mùv4_d°
;

6097 
__u32
 
	mùv6_d°
[4];

6101 
__be16
 
	mh_vœn_¥Ÿo
;

6102 
__be16
 
	mh_vœn_TCI
;

6103 
__u8
 
	msmac
[6];

6104 
__u8
 
	mdmac
[6];

6107 
	sbpf_ªdú_√igh
 {

6109 
__u32
 
	mnh_Ámûy
;

6112 
__be32
 
	mùv4_nh
;

6113 
__u32
 
	mùv6_nh
[4];

6118 
	ebpf_check_mtu_Êags
 {

6119 
	mBPF_MTU_CHK_SEGS
 = (1U << 0),

6122 
	ebpf_check_mtu_ªt
 {

6123 
	mBPF_MTU_CHK_RET_SUCCESS
,

6124 
	mBPF_MTU_CHK_RET_FRAG_NEEDED
,

6125 
	mBPF_MTU_CHK_RET_SEGS_TOOBIG
,

6128 
	ebpf_èsk_fd_ty≥
 {

6129 
	mBPF_FD_TYPE_RAW_TRACEPOINT
,

6130 
	mBPF_FD_TYPE_TRACEPOINT
,

6131 
	mBPF_FD_TYPE_KPROBE
,

6132 
	mBPF_FD_TYPE_KRETPROBE
,

6133 
	mBPF_FD_TYPE_UPROBE
,

6134 
	mBPF_FD_TYPE_URETPROBE
,

6138 
	mBPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG
 = (1U << 0),

6139 
	mBPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL
 = (1U << 1),

6140 
	mBPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP
 = (1U << 2),

6143 
	sbpf_Êow_keys
 {

6144 
__u16
 
	mnhoff
;

6145 
__u16
 
	mthoff
;

6146 
__u16
 
	maddr_¥Ÿo
;

6147 
__u8
 
	mis_‰ag
;

6148 
__u8
 
	mis_fú°_‰ag
;

6149 
__u8
 
	mis_íˇp
;

6150 
__u8
 
	mù_¥Ÿo
;

6151 
__be16
 
	mn_¥Ÿo
;

6152 
__be16
 
	m•‹t
;

6153 
__be16
 
	mdp‹t
;

6156 
__be32
 
	mùv4_§c
;

6157 
__be32
 
	mùv4_d°
;

6160 
__u32
 
	mùv6_§c
[4];

6161 
__u32
 
	mùv6_d°
[4];

6164 
__u32
 
	mÊags
;

6165 
__be32
 
	mÊow_œbñ
;

6168 
	sbpf_func_öfo
 {

6169 
__u32
 
	mö¢_off
;

6170 
__u32
 
	mty≥_id
;

6173 
	#BPF_LINE_INFO_LINE_NUM
(
löe_cﬁ
Ë(÷öe_cﬁË>> 10)

	)

6174 
	#BPF_LINE_INFO_LINE_COL
(
löe_cﬁ
Ë(÷öe_cﬁË& 0x3ff)

	)

6176 
	sbpf_löe_öfo
 {

6177 
__u32
 
	mö¢_off
;

6178 
__u32
 
	mfûe_«me_off
;

6179 
__u32
 
	mlöe_off
;

6180 
__u32
 
	mlöe_cﬁ
;

6183 
	sbpf_•ö_lock
 {

6184 
__u32
 
	mvÆ
;

6187 
	sbpf_timî
 {

6188 
	m__u64
 :64;

6189 
	m__u64
 :64;

6190 } 
__©åibuã__
((
Æig√d
(8)));

6192 
	sbpf_sys˘l
 {

6193 
__u32
 
	mwrôe
;

6196 
__u32
 
	mfûe_pos
;

6201 
	sbpf_sock›t
 {

6202 
__bpf_md_±r
(
bpf_sock
 *, 
sk
);

6203 
__bpf_md_±r
(*, 
›tvÆ
);

6204 
__bpf_md_±r
(*, 
›tvÆ_íd
);

6206 
__s32
 
	mÀvñ
;

6207 
__s32
 
	m›äame
;

6208 
__s32
 
	m›éí
;

6209 
__s32
 
	mªtvÆ
;

6212 
	sbpf_pidns_öfo
 {

6213 
__u32
 
	mpid
;

6214 
__u32
 
	mtgid
;

6218 
	sbpf_sk_lookup
 {

6220 
__bpf_md_±r
(
bpf_sock
 *, 
sk
);

6221 
__u64
 
	mcookõ
;

6224 
__u32
 
	mÁmûy
;

6225 
__u32
 
	m¥Ÿocﬁ
;

6226 
__u32
 
	mªmŸe_ù4
;

6227 
__u32
 
	mªmŸe_ù6
[4];

6228 
__be16
 
	mªmŸe_p‹t
;

6229 
	m__u16
 :16;

6230 
__u32
 
	mloˇl_ù4
;

6231 
__u32
 
	mloˇl_ù6
[4];

6232 
__u32
 
	mloˇl_p‹t
;

6243 
	sbtf_±r
 {

6244 *
	m±r
;

6245 
__u32
 
	mty≥_id
;

6246 
__u32
 
	mÊags
;

6259 
	mBTF_F_COMPACT
 = (1ULL << 0),

6260 
	mBTF_F_NONAME
 = (1ULL << 1),

6261 
	mBTF_F_PTR_RAW
 = (1ULL << 2),

6262 
	mBTF_F_ZERO
 = (1ULL << 3),

	@/usr/include/linux/btf.h

3 #i‚de‡
__LINUX_BTF_H__


4 
	#__LINUX_BTF_H__


	)

6 
	~<löux/ty≥s.h
>

8 
	#BTF_MAGIC
 0xeB9F

	)

9 
	#BTF_VERSION
 1

	)

11 
	sbtf_hódî
 {

12 
__u16
 
	mmagic
;

13 
__u8
 
	mvîsi⁄
;

14 
__u8
 
	mÊags
;

15 
__u32
 
	mhdr_Àn
;

18 
__u32
 
	mty≥_off
;

19 
__u32
 
	mty≥_Àn
;

20 
__u32
 
	m°r_off
;

21 
__u32
 
	m°r_Àn
;

25 
	#BTF_MAX_TYPE
 0x000fffff

	)

27 
	#BTF_MAX_NAME_OFFSET
 0x00ffffff

	)

29 
	#BTF_MAX_VLEN
 0xffff

	)

31 
	sbtf_ty≥
 {

32 
__u32
 
	m«me_off
;

41 
__u32
 
	möfo
;

50 
__u32
 
	msize
;

51 
__u32
 
	mty≥
;

55 
	#BTF_INFO_KIND
(
öfo
Ë(((öfoË>> 24Ë& 0x1f)

	)

56 
	#BTF_INFO_VLEN
(
öfo
Ë((öfoË& 0xffff)

	)

57 
	#BTF_INFO_KFLAG
(
öfo
Ë((öfoË>> 31)

	)

59 
	#BTF_KIND_UNKN
 0

	)

60 
	#BTF_KIND_INT
 1

	)

61 
	#BTF_KIND_PTR
 2

	)

62 
	#BTF_KIND_ARRAY
 3

	)

63 
	#BTF_KIND_STRUCT
 4

	)

64 
	#BTF_KIND_UNION
 5

	)

65 
	#BTF_KIND_ENUM
 6

	)

66 
	#BTF_KIND_FWD
 7

	)

67 
	#BTF_KIND_TYPEDEF
 8

	)

68 
	#BTF_KIND_VOLATILE
 9

	)

69 
	#BTF_KIND_CONST
 10

	)

70 
	#BTF_KIND_RESTRICT
 11

	)

71 
	#BTF_KIND_FUNC
 12

	)

72 
	#BTF_KIND_FUNC_PROTO
 13

	)

73 
	#BTF_KIND_VAR
 14

	)

74 
	#BTF_KIND_DATASEC
 15

	)

75 
	#BTF_KIND_FLOAT
 16

	)

76 
	#BTF_KIND_MAX
 
BTF_KIND_FLOAT


	)

77 
	#NR_BTF_KINDS
 (
BTF_KIND_MAX
 + 1)

	)

86 
	#BTF_INT_ENCODING
(
VAL
Ë(((VALË& 0x0f000000Ë>> 24)

	)

87 
	#BTF_INT_OFFSET
(
VAL
Ë(((VALË& 0x00ff0000Ë>> 16)

	)

88 
	#BTF_INT_BITS
(
VAL
Ë((VALË& 0x000000ff)

	)

91 
	#BTF_INT_SIGNED
 (1 << 0)

	)

92 
	#BTF_INT_CHAR
 (1 << 1)

	)

93 
	#BTF_INT_BOOL
 (1 << 2)

	)

99 
	sbtf_íum
 {

100 
__u32
 
	m«me_off
;

101 
__s32
 
	mvÆ
;

105 
	sbtf_¨øy
 {

106 
__u32
 
	mty≥
;

107 
__u32
 
	mödex_ty≥
;

108 
__u32
 
	m√Àms
;

116 
	sbtf_membî
 {

117 
__u32
 
	m«me_off
;

118 
__u32
 
	mty≥
;

125 
__u32
 
	moff£t
;

132 
	#BTF_MEMBER_BITFIELD_SIZE
(
vÆ
Ë((vÆË>> 24)

	)

133 
	#BTF_MEMBER_BIT_OFFSET
(
vÆ
Ë((vÆË& 0xffffff)

	)

139 
	sbtf_∑øm
 {

140 
__u32
 
	m«me_off
;

141 
__u32
 
	mty≥
;

145 
	mBTF_VAR_STATIC
 = 0,

146 
	mBTF_VAR_GLOBAL_ALLOCATED
 = 1,

147 
	mBTF_VAR_GLOBAL_EXTERN
 = 2,

150 
	ebtf_func_lökage
 {

151 
	mBTF_FUNC_STATIC
 = 0,

152 
	mBTF_FUNC_GLOBAL
 = 1,

153 
	mBTF_FUNC_EXTERN
 = 2,

159 
	sbtf_v¨
 {

160 
__u32
 
	mlökage
;

167 
	sbtf_v¨_£cöfo
 {

168 
__u32
 
	mty≥
;

169 
__u32
 
	moff£t
;

170 
__u32
 
	msize
;

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/ethtool.h

14 #i‚de‡
_LINUX_ETHTOOL_H


15 
	#_LINUX_ETHTOOL_H


	)

17 
	~<löux/c⁄°.h
>

18 
	~<löux/ty≥s.h
>

19 
	~<löux/if_ëhî.h
>

21 
	~<limôs.h
>

103 
	sëhtoﬁ_cmd
 {

104 
__u32
 
	mcmd
;

105 
__u32
 
	msuµ‹ãd
;

106 
__u32
 
	madvîtisög
;

107 
__u16
 
	m•ìd
;

108 
__u8
 
	mdu∂ex
;

109 
__u8
 
	mp‹t
;

110 
__u8
 
	mphy_addªss
;

111 
__u8
 
	må™s˚ivî
;

112 
__u8
 
	maut⁄eg
;

113 
__u8
 
	mmdio_suµ‹t
;

114 
__u32
 
	mmaxtxpkt
;

115 
__u32
 
	mmaxrxpkt
;

116 
__u16
 
	m•ìd_hi
;

117 
__u8
 
	mëh_ç_mdix
;

118 
__u8
 
	mëh_ç_mdix_˘æ
;

119 
__u32
 
	mÕ_advîtisög
;

120 
__u32
 
	mª£rved
[2];

123 
__ölöe__
 
	$ëhtoﬁ_cmd_•ìd_£t
(
ëhtoﬁ_cmd
 *
ï
,

124 
__u32
 
•ìd
)

126 
ï
->
•ìd
 = (
__u16
)(speed & 0xFFFF);

127 
ï
->
•ìd_hi
 = (
__u16
)(
•ìd
 >> 16);

128 
	}
}

130 
__ölöe__
 
__u32
 
	$ëhtoﬁ_cmd_•ìd
(c⁄° 
ëhtoﬁ_cmd
 *
ï
)

132  (
ï
->
•ìd_hi
 << 16Ë|Ép->
•ìd
;

133 
	}
}

140 
	#ETH_MDIO_SUPPORTS_C22
 1

	)

147 
	#ETH_MDIO_SUPPORTS_C45
 2

	)

149 
	#ETHTOOL_FWVERS_LEN
 32

	)

150 
	#ETHTOOL_BUSINFO_LEN
 32

	)

151 
	#ETHTOOL_EROMVERS_LEN
 32

	)

185 
	sëhtoﬁ_drvöfo
 {

186 
__u32
 
	mcmd
;

187 
	mdrivî
[32];

188 
	mvîsi⁄
[32];

189 
	mfw_vîsi⁄
[
ETHTOOL_FWVERS_LEN
];

190 
	mbus_öfo
[
ETHTOOL_BUSINFO_LEN
];

191 
	mîom_vîsi⁄
[
ETHTOOL_EROMVERS_LEN
];

192 
	mª£rved2
[12];

193 
__u32
 
	mn_¥iv_Êags
;

194 
__u32
 
	mn_°©s
;

195 
__u32
 
	mã°öfo_Àn
;

196 
__u32
 
	mìdump_Àn
;

197 
__u32
 
	mªgdump_Àn
;

200 
	#SOPASS_MAX
 6

	)

211 
	sëhtoﬁ_wﬁöfo
 {

212 
__u32
 
	mcmd
;

213 
__u32
 
	msuµ‹ãd
;

214 
__u32
 
	mwﬁ›ts
;

215 
__u8
 
	ms›ass
[
SOPASS_MAX
];

219 
	sëhtoﬁ_vÆue
 {

220 
__u32
 
	mcmd
;

221 
__u32
 
	md©a
;

224 
	#PFC_STORM_PREVENTION_AUTO
 0xffff

	)

225 
	#PFC_STORM_PREVENTION_DISABLE
 0

	)

227 
	etu«bÀ_id
 {

228 
	mETHTOOL_ID_UNSPEC
,

229 
	mETHTOOL_RX_COPYBREAK
,

230 
	mETHTOOL_TX_COPYBREAK
,

231 
	mETHTOOL_PFC_PREVENTION_TOUT
,

236 
	m__ETHTOOL_TUNABLE_COUNT
,

239 
	etu«bÀ_ty≥_id
 {

240 
	mETHTOOL_TUNABLE_UNSPEC
,

241 
	mETHTOOL_TUNABLE_U8
,

242 
	mETHTOOL_TUNABLE_U16
,

243 
	mETHTOOL_TUNABLE_U32
,

244 
	mETHTOOL_TUNABLE_U64
,

245 
	mETHTOOL_TUNABLE_STRING
,

246 
	mETHTOOL_TUNABLE_S8
,

247 
	mETHTOOL_TUNABLE_S16
,

248 
	mETHTOOL_TUNABLE_S32
,

249 
	mETHTOOL_TUNABLE_S64
,

252 
	sëhtoﬁ_tu«bÀ
 {

253 
__u32
 
	mcmd
;

254 
__u32
 
	mid
;

255 
__u32
 
	mty≥_id
;

256 
__u32
 
	mÀn
;

257 *
	md©a
[0];

260 
	#DOWNSHIFT_DEV_DEFAULT_COUNT
 0xff

	)

261 
	#DOWNSHIFT_DEV_DISABLE
 0

	)

267 
	#ETHTOOL_PHY_FAST_LINK_DOWN_ON
 0

	)

268 
	#ETHTOOL_PHY_FAST_LINK_DOWN_OFF
 0xff

	)

287 
	#ETHTOOL_PHY_EDPD_DFLT_TX_MSECS
 0xffff

	)

288 
	#ETHTOOL_PHY_EDPD_NO_TX
 0xff„

	)

289 
	#ETHTOOL_PHY_EDPD_DISABLE
 0

	)

291 
	ephy_tu«bÀ_id
 {

292 
	mETHTOOL_PHY_ID_UNSPEC
,

293 
	mETHTOOL_PHY_DOWNSHIFT
,

294 
	mETHTOOL_PHY_FAST_LINK_DOWN
,

295 
	mETHTOOL_PHY_EDPD
,

300 
	m__ETHTOOL_PHY_TUNABLE_COUNT
,

318 
	sëhtoﬁ_ªgs
 {

319 
__u32
 
	mcmd
;

320 
__u32
 
	mvîsi⁄
;

321 
__u32
 
	mÀn
;

322 
__u8
 
	md©a
[0];

343 
	sëhtoﬁ_ì¥om
 {

344 
__u32
 
	mcmd
;

345 
__u32
 
	mmagic
;

346 
__u32
 
	moff£t
;

347 
__u32
 
	mÀn
;

348 
__u8
 
	md©a
[0];

369 
	sëhtoﬁ_ìe
 {

370 
__u32
 
	mcmd
;

371 
__u32
 
	msuµ‹ãd
;

372 
__u32
 
	madvîti£d
;

373 
__u32
 
	mÕ_advîti£d
;

374 
__u32
 
	mìe_a˘ive
;

375 
__u32
 
	mìe_íabÀd
;

376 
__u32
 
	mtx_Õi_íabÀd
;

377 
__u32
 
	mtx_Õi_timî
;

378 
__u32
 
	mª£rved
[2];

392 
	sëhtoﬁ_modöfo
 {

393 
__u32
 
	mcmd
;

394 
__u32
 
	mty≥
;

395 
__u32
 
	mì¥om_Àn
;

396 
__u32
 
	mª£rved
[8];

472 
	sëhtoﬁ_cﬂÀs˚
 {

473 
__u32
 
	mcmd
;

474 
__u32
 
	mrx_cﬂÀs˚_u£cs
;

475 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames
;

476 
__u32
 
	mrx_cﬂÀs˚_u£cs_úq
;

477 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

478 
__u32
 
	mtx_cﬂÀs˚_u£cs
;

479 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames
;

480 
__u32
 
	mtx_cﬂÀs˚_u£cs_úq
;

481 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

482 
__u32
 
	m°©s_block_cﬂÀs˚_u£cs
;

483 
__u32
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

484 
__u32
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

485 
__u32
 
	mpkt_øã_low
;

486 
__u32
 
	mrx_cﬂÀs˚_u£cs_low
;

487 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

488 
__u32
 
	mtx_cﬂÀs˚_u£cs_low
;

489 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

490 
__u32
 
	mpkt_øã_high
;

491 
__u32
 
	mrx_cﬂÀs˚_u£cs_high
;

492 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

493 
__u32
 
	mtx_cﬂÀs˚_u£cs_high
;

494 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

495 
__u32
 
	møã_ßm∂e_öãrvÆ
;

523 
	sëhtoﬁ_rög∑øm
 {

524 
__u32
 
	mcmd
;

525 
__u32
 
	mrx_max_≥ndög
;

526 
__u32
 
	mrx_möi_max_≥ndög
;

527 
__u32
 
	mrx_jumbo_max_≥ndög
;

528 
__u32
 
	mtx_max_≥ndög
;

529 
__u32
 
	mrx_≥ndög
;

530 
__u32
 
	mrx_möi_≥ndög
;

531 
__u32
 
	mrx_jumbo_≥ndög
;

532 
__u32
 
	mtx_≥ndög
;

551 
	sëhtoﬁ_ch™√ls
 {

552 
__u32
 
	mcmd
;

553 
__u32
 
	mmax_rx
;

554 
__u32
 
	mmax_tx
;

555 
__u32
 
	mmax_Ÿhî
;

556 
__u32
 
	mmax_comböed
;

557 
__u32
 
	mrx_cou¡
;

558 
__u32
 
	mtx_cou¡
;

559 
__u32
 
	mŸhî_cou¡
;

560 
__u32
 
	mcomböed_cou¡
;

585 
	sëhtoﬁ_∑u£∑øm
 {

586 
__u32
 
	mcmd
;

587 
__u32
 
	maut⁄eg
;

588 
__u32
 
	mrx_∑u£
;

589 
__u32
 
	mtx_∑u£
;

593 
	eëhtoﬁ_lök_ext_°©e
 {

594 
	mETHTOOL_LINK_EXT_STATE_AUTONEG
,

595 
	mETHTOOL_LINK_EXT_STATE_LINK_TRAINING_FAILURE
,

596 
	mETHTOOL_LINK_EXT_STATE_LINK_LOGICAL_MISMATCH
,

597 
	mETHTOOL_LINK_EXT_STATE_BAD_SIGNAL_INTEGRITY
,

598 
	mETHTOOL_LINK_EXT_STATE_NO_CABLE
,

599 
	mETHTOOL_LINK_EXT_STATE_CABLE_ISSUE
,

600 
	mETHTOOL_LINK_EXT_STATE_EEPROM_ISSUE
,

601 
	mETHTOOL_LINK_EXT_STATE_CALIBRATION_FAILURE
,

602 
	mETHTOOL_LINK_EXT_STATE_POWER_BUDGET_EXCEEDED
,

603 
	mETHTOOL_LINK_EXT_STATE_OVERHEAT
,

607 
	eëhtoﬁ_lök_ext_sub°©e_aut⁄eg
 {

608 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_NO_PARTNER_DETECTED
 = 1,

609 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_ACK_NOT_RECEIVED
,

610 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_NEXT_PAGE_EXCHANGE_FAILED
,

611 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_NO_PARTNER_DETECTED_FORCE_MODE
,

612 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_FEC_MISMATCH_DURING_OVERRIDE
,

613 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_NO_HCD
,

618 
	eëhtoﬁ_lök_ext_sub°©e_lök_åaöög
 {

619 
	mETHTOOL_LINK_EXT_SUBSTATE_LT_KR_FRAME_LOCK_NOT_ACQUIRED
 = 1,

620 
	mETHTOOL_LINK_EXT_SUBSTATE_LT_KR_LINK_INHIBIT_TIMEOUT
,

621 
	mETHTOOL_LINK_EXT_SUBSTATE_LT_KR_LINK_PARTNER_DID_NOT_SET_RECEIVER_READY
,

622 
	mETHTOOL_LINK_EXT_SUBSTATE_LT_REMOTE_FAULT
,

627 
	eëhtoﬁ_lök_ext_sub°©e_lök_logiˇl_mism©ch
 {

628 
	mETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_ACQUIRE_BLOCK_LOCK
 = 1,

629 
	mETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_ACQUIRE_AM_LOCK
,

630 
	mETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_GET_ALIGN_STATUS
,

631 
	mETHTOOL_LINK_EXT_SUBSTATE_LLM_FC_FEC_IS_NOT_LOCKED
,

632 
	mETHTOOL_LINK_EXT_SUBSTATE_LLM_RS_FEC_IS_NOT_LOCKED
,

637 
	eëhtoﬁ_lök_ext_sub°©e_bad_sig«l_öãgrôy
 {

638 
	mETHTOOL_LINK_EXT_SUBSTATE_BSI_LARGE_NUMBER_OF_PHYSICAL_ERRORS
 = 1,

639 
	mETHTOOL_LINK_EXT_SUBSTATE_BSI_UNSUPPORTED_RATE
,

640 
	mETHTOOL_LINK_EXT_SUBSTATE_BSI_SERDES_REFERENCE_CLOCK_LOST
,

641 
	mETHTOOL_LINK_EXT_SUBSTATE_BSI_SERDES_ALOS
,

645 
	eëhtoﬁ_lök_ext_sub°©e_ˇbÀ_issue
 {

646 
	mETHTOOL_LINK_EXT_SUBSTATE_CI_UNSUPPORTED_CABLE
 = 1,

647 
	mETHTOOL_LINK_EXT_SUBSTATE_CI_CABLE_TEST_FAILURE
,

650 
	#ETH_GSTRING_LEN
 32

	)

680 
	eëhtoﬁ_°rög£t
 {

681 
	mETH_SS_TEST
 = 0,

682 
	mETH_SS_STATS
,

683 
	mETH_SS_PRIV_FLAGS
,

684 
	mETH_SS_NTUPLE_FILTERS
,

685 
	mETH_SS_FEATURES
,

686 
	mETH_SS_RSS_HASH_FUNCS
,

687 
	mETH_SS_TUNABLES
,

688 
	mETH_SS_PHY_STATS
,

689 
	mETH_SS_PHY_TUNABLES
,

690 
	mETH_SS_LINK_MODES
,

691 
	mETH_SS_MSG_CLASSES
,

692 
	mETH_SS_WOL_MODES
,

693 
	mETH_SS_SOF_TIMESTAMPING
,

694 
	mETH_SS_TS_TX_TYPES
,

695 
	mETH_SS_TS_RX_FILTERS
,

696 
	mETH_SS_UDP_TUNNEL_TYPES
,

697 
	mETH_SS_STATS_STD
,

698 
	mETH_SS_STATS_ETH_PHY
,

699 
	mETH_SS_STATS_ETH_MAC
,

700 
	mETH_SS_STATS_ETH_CTRL
,

701 
	mETH_SS_STATS_RMON
,

704 
	mETH_SS_COUNT


719 
	sëhtoﬁ_g°rögs
 {

720 
__u32
 
	mcmd
;

721 
__u32
 
	m°rög_£t
;

722 
__u32
 
	mÀn
;

723 
__u8
 
	md©a
[0];

744 
	sëhtoﬁ_s£t_öfo
 {

745 
__u32
 
	mcmd
;

746 
__u32
 
	mª£rved
;

747 
__u64
 
	ms£t_mask
;

748 
__u32
 
	md©a
[0];

761 
	eëhtoﬁ_ã°_Êags
 {

762 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

763 
	mETH_TEST_FL_FAILED
 = (1 << 1),

764 
	mETH_TEST_FL_EXTERNAL_LB
 = (1 << 2),

765 
	mETH_TEST_FL_EXTERNAL_LB_DONE
 = (1 << 3),

783 
	sëhtoﬁ_ã°
 {

784 
__u32
 
	mcmd
;

785 
__u32
 
	mÊags
;

786 
__u32
 
	mª£rved
;

787 
__u32
 
	mÀn
;

788 
__u64
 
	md©a
[0];

802 
	sëhtoﬁ_°©s
 {

803 
__u32
 
	mcmd
;

804 
__u32
 
	mn_°©s
;

805 
__u64
 
	md©a
[0];

819 
	sëhtoﬁ_≥rm_addr
 {

820 
__u32
 
	mcmd
;

821 
__u32
 
	msize
;

822 
__u8
 
	md©a
[0];

834 
	eëhtoﬁ_Êags
 {

835 
	mETH_FLAG_TXVLAN
 = (1 << 7),

836 
	mETH_FLAG_RXVLAN
 = (1 << 8),

837 
	mETH_FLAG_LRO
 = (1 << 15),

838 
	mETH_FLAG_NTUPLE
 = (1 << 27),

839 
	mETH_FLAG_RXHASH
 = (1 << 28),

858 
	sëhtoﬁ_t˝ù4_•ec
 {

859 
__be32
 
	mù4§c
;

860 
__be32
 
	mù4d°
;

861 
__be16
 
	mp§c
;

862 
__be16
 
	mpd°
;

863 
__u8
 
	mtos
;

875 
	sëhtoﬁ_ah_e•ù4_•ec
 {

876 
__be32
 
	mù4§c
;

877 
__be32
 
	mù4d°
;

878 
__be32
 
	m•i
;

879 
__u8
 
	mtos
;

882 
	#ETH_RX_NFC_IP4
 1

	)

893 
	sëhtoﬁ_u§ù4_•ec
 {

894 
__be32
 
	mù4§c
;

895 
__be32
 
	mù4d°
;

896 
__be32
 
	ml4_4_byãs
;

897 
__u8
 
	mtos
;

898 
__u8
 
	mù_vî
;

899 
__u8
 
	m¥Ÿo
;

912 
	sëhtoﬁ_t˝ù6_•ec
 {

913 
__be32
 
	mù6§c
[4];

914 
__be32
 
	mù6d°
[4];

915 
__be16
 
	mp§c
;

916 
__be16
 
	mpd°
;

917 
__u8
 
	mt˛ass
;

929 
	sëhtoﬁ_ah_e•ù6_•ec
 {

930 
__be32
 
	mù6§c
[4];

931 
__be32
 
	mù6d°
[4];

932 
__be32
 
	m•i
;

933 
__u8
 
	mt˛ass
;

944 
	sëhtoﬁ_u§ù6_•ec
 {

945 
__be32
 
	mù6§c
[4];

946 
__be32
 
	mù6d°
[4];

947 
__be32
 
	ml4_4_byãs
;

948 
__u8
 
	mt˛ass
;

949 
__u8
 
	ml4_¥Ÿo
;

952 
	uëhtoﬁ_Êow_uni⁄
 {

953 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

954 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

955 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

956 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

957 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

958 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

959 
ëhtoﬁ_t˝ù6_•ec
 
	mt˝_ù6_•ec
;

960 
ëhtoﬁ_t˝ù6_•ec
 
	mudp_ù6_•ec
;

961 
ëhtoﬁ_t˝ù6_•ec
 
	ms˘p_ù6_•ec
;

962 
ëhtoﬁ_ah_e•ù6_•ec
 
	mah_ù6_•ec
;

963 
ëhtoﬁ_ah_e•ù6_•ec
 
	me•_ù6_•ec
;

964 
ëhtoﬁ_u§ù6_•ec
 
	mu§_ù6_•ec
;

965 
ëhhdr
 
	mëhî_•ec
;

966 
__u8
 
	mhd©a
[52];

981 
	sëhtoﬁ_Êow_ext
 {

982 
__u8
 
	m∑ddög
[2];

983 
	mh_de°
[
ETH_ALEN
];

984 
__be16
 
	mvœn_ëy≥
;

985 
__be16
 
	mvœn_tci
;

986 
__be32
 
	md©a
[2];

1006 
	sëhtoﬁ_rx_Êow_•ec
 {

1007 
__u32
 
	mÊow_ty≥
;

1008 
ëhtoﬁ_Êow_uni⁄
 
	mh_u
;

1009 
ëhtoﬁ_Êow_ext
 
	mh_ext
;

1010 
ëhtoﬁ_Êow_uni⁄
 
	mm_u
;

1011 
ëhtoﬁ_Êow_ext
 
	mm_ext
;

1012 
__u64
 
	mrög_cookõ
;

1013 
__u32
 
	mloˇti⁄
;

1027 
	#ETHTOOL_RX_FLOW_SPEC_RING
 0x00000000FFFFFFFFLL

	)

1028 
	#ETHTOOL_RX_FLOW_SPEC_RING_VF
 0x000000FF00000000LL

	)

1029 
	#ETHTOOL_RX_FLOW_SPEC_RING_VF_OFF
 32

	)

1030 
__ölöe__
 
__u64
 
	$ëhtoﬁ_gë_Êow_•ec_rög
(
__u64
 
rög_cookõ
)

1032  
ETHTOOL_RX_FLOW_SPEC_RING
 & 
rög_cookõ
;

1033 
	}
}

1035 
__ölöe__
 
__u64
 
	$ëhtoﬁ_gë_Êow_•ec_rög_vf
(
__u64
 
rög_cookõ
)

1037  (
ETHTOOL_RX_FLOW_SPEC_RING_VF
 & 
rög_cookõ
) >>

1038 
ETHTOOL_RX_FLOW_SPEC_RING_VF_OFF
;

1039 
	}
}

1102 
	sëhtoﬁ_rxnfc
 {

1103 
__u32
 
	mcmd
;

1104 
__u32
 
	mÊow_ty≥
;

1105 
__u64
 
	md©a
;

1106 
ëhtoﬁ_rx_Êow_•ec
 
	mfs
;

1108 
__u32
 
	mruÀ_˙t
;

1109 
__u32
 
	mrss_c⁄ãxt
;

1111 
__u32
 
	mruÀ_locs
[0];

1128 
	sëhtoﬁ_rxfh_ödú
 {

1129 
__u32
 
	mcmd
;

1130 
__u32
 
	msize
;

1131 
__u32
 
	mrög_ödex
[0];

1164 
	sëhtoﬁ_rxfh
 {

1165 
__u32
 
	mcmd
;

1166 
__u32
 
	mrss_c⁄ãxt
;

1167 
__u32
 
	mödú_size
;

1168 
__u32
 
	mkey_size
;

1169 
__u8
 
	mhfunc
;

1170 
__u8
 
	mrsvd8
[3];

1171 
__u32
 
	mrsvd32
;

1172 
__u32
 
	mrss_c⁄fig
[0];

1174 
	#ETH_RXFH_CONTEXT_ALLOC
 0xffffffff

	)

1175 
	#ETH_RXFH_INDIR_NO_CHANGE
 0xffffffff

	)

1193 
	sëhtoﬁ_rx_¡u∂e_Êow_•ec
 {

1194 
__u32
 
	mÊow_ty≥
;

1196 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

1197 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

1198 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

1199 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

1200 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

1201 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

1202 
ëhhdr
 
	mëhî_•ec
;

1203 
__u8
 
	mhd©a
[72];

1204 } 
	mh_u
, 
	mm_u
;

1206 
__u16
 
	mvœn_èg
;

1207 
__u16
 
	mvœn_èg_mask
;

1208 
__u64
 
	md©a
;

1209 
__u64
 
	md©a_mask
;

1211 
__s32
 
	ma˘i⁄
;

1212 
	#ETHTOOL_RXNTUPLE_ACTION_DROP
 (-1Ë

	)

1213 
	#ETHTOOL_RXNTUPLE_ACTION_CLEAR
 (-2Ë

	)

1221 
	sëhtoﬁ_rx_¡u∂e
 {

1222 
__u32
 
	mcmd
;

1223 
ëhtoﬁ_rx_¡u∂e_Êow_•ec
 
	mfs
;

1226 
	#ETHTOOL_FLASH_MAX_FILENAME
 128

	)

1227 
	eëhtoﬁ_Êash_›_ty≥
 {

1228 
	mETHTOOL_FLASH_ALL_REGIONS
 = 0,

1232 
	sëhtoﬁ_Êash
 {

1233 
__u32
 
	mcmd
;

1234 
__u32
 
	mªgi⁄
;

1235 
	md©a
[
ETHTOOL_FLASH_MAX_FILENAME
];

1252 
	sëhtoﬁ_dump
 {

1253 
__u32
 
	mcmd
;

1254 
__u32
 
	mvîsi⁄
;

1255 
__u32
 
	mÊag
;

1256 
__u32
 
	mÀn
;

1257 
__u8
 
	md©a
[0];

1260 
	#ETH_FW_DUMP_DISABLE
 0

	)

1271 
	sëhtoﬁ_gë_„©uªs_block
 {

1272 
__u32
 
	mavaûabÀ
;

1273 
__u32
 
	mªque°ed
;

1274 
__u32
 
	ma˘ive
;

1275 
__u32
 
	m√vî_ch™ged
;

1286 
	sëhtoﬁ_g„©uªs
 {

1287 
__u32
 
	mcmd
;

1288 
__u32
 
	msize
;

1289 
ëhtoﬁ_gë_„©uªs_block
 
	m„©uªs
[0];

1297 
	sëhtoﬁ_£t_„©uªs_block
 {

1298 
__u32
 
	mvÆid
;

1299 
__u32
 
	mªque°ed
;

1308 
	sëhtoﬁ_s„©uªs
 {

1309 
__u32
 
	mcmd
;

1310 
__u32
 
	msize
;

1311 
ëhtoﬁ_£t_„©uªs_block
 
	m„©uªs
[0];

1334 
	sëhtoﬁ_ts_öfo
 {

1335 
__u32
 
	mcmd
;

1336 
__u32
 
	mso_time°ampög
;

1337 
__s32
 
	mphc_ödex
;

1338 
__u32
 
	mtx_ty≥s
;

1339 
__u32
 
	mtx_ª£rved
[3];

1340 
__u32
 
	mrx_fûãrs
;

1341 
__u32
 
	mrx_ª£rved
[3];

1369 
	eëhtoﬁ_s„©uªs_ªtvÆ_bôs
 {

1370 
	mETHTOOL_F_UNSUPPORTED__BIT
,

1371 
	mETHTOOL_F_WISH__BIT
,

1372 
	mETHTOOL_F_COMPAT__BIT
,

1375 
	#ETHTOOL_F_UNSUPPORTED
 (1 << 
ETHTOOL_F_UNSUPPORTED__BIT
)

	)

1376 
	#ETHTOOL_F_WISH
 (1 << 
ETHTOOL_F_WISH__BIT
)

	)

1377 
	#ETHTOOL_F_COMPAT
 (1 << 
ETHTOOL_F_COMPAT__BIT
)

	)

1379 
	#MAX_NUM_QUEUE
 4096

	)

1388 
	sëhtoﬁ_≥r_queue_›
 {

1389 
__u32
 
	mcmd
;

1390 
__u32
 
	msub_comm™d
;

1391 
__u32
 
	mqueue_mask
[
__KERNEL_DIV_ROUND_UP
(
MAX_NUM_QUEUE
, 32)];

1392 
	md©a
[];

1424 
	sëhtoﬁ_„˝¨am
 {

1425 
__u32
 
	mcmd
;

1427 
__u32
 
	ma˘ive_„c
;

1428 
__u32
 
	m„c
;

1429 
__u32
 
	mª£rved
;

1445 
	eëhtoﬁ_„c_c⁄fig_bôs
 {

1446 
	mETHTOOL_FEC_NONE_BIT
,

1447 
	mETHTOOL_FEC_AUTO_BIT
,

1448 
	mETHTOOL_FEC_OFF_BIT
,

1449 
	mETHTOOL_FEC_RS_BIT
,

1450 
	mETHTOOL_FEC_BASER_BIT
,

1451 
	mETHTOOL_FEC_LLRS_BIT
,

1454 
	#ETHTOOL_FEC_NONE
 (1 << 
ETHTOOL_FEC_NONE_BIT
)

	)

1455 
	#ETHTOOL_FEC_AUTO
 (1 << 
ETHTOOL_FEC_AUTO_BIT
)

	)

1456 
	#ETHTOOL_FEC_OFF
 (1 << 
ETHTOOL_FEC_OFF_BIT
)

	)

1457 
	#ETHTOOL_FEC_RS
 (1 << 
ETHTOOL_FEC_RS_BIT
)

	)

1458 
	#ETHTOOL_FEC_BASER
 (1 << 
ETHTOOL_FEC_BASER_BIT
)

	)

1459 
	#ETHTOOL_FEC_LLRS
 (1 << 
ETHTOOL_FEC_LLRS_BIT
)

	)

1462 
	#ETHTOOL_GSET
 0x00000001

	)

1465 
	#ETHTOOL_SSET
 0x00000002

	)

1468 
	#ETHTOOL_GDRVINFO
 0x00000003

	)

1469 
	#ETHTOOL_GREGS
 0x00000004

	)

1470 
	#ETHTOOL_GWOL
 0x00000005

	)

1471 
	#ETHTOOL_SWOL
 0x00000006

	)

1472 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

1473 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

1474 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

1477 
	#ETHTOOL_GLINK
 0x0000000a

	)

1478 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

1479 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

1480 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

1481 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

1482 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

1483 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

1484 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

1485 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

1486 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

1487 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

1488 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

1489 
	#ETHTOOL_STXCSUM
 0x00000017

	)

1490 
	#ETHTOOL_GSG
 0x00000018

	)

1492 
	#ETHTOOL_SSG
 0x00000019

	)

1494 
	#ETHTOOL_TEST
 0x0000001®

	)

1495 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

1496 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

1497 
	#ETHTOOL_GSTATS
 0x0000001d

	)

1498 
	#ETHTOOL_GTSO
 0x0000001ê

	)

1499 
	#ETHTOOL_STSO
 0x0000001‡

	)

1500 
	#ETHTOOL_GPERMADDR
 0x00000020

	)

1501 
	#ETHTOOL_GUFO
 0x00000021

	)

1502 
	#ETHTOOL_SUFO
 0x00000022

	)

1503 
	#ETHTOOL_GGSO
 0x00000023

	)

1504 
	#ETHTOOL_SGSO
 0x00000024

	)

1505 
	#ETHTOOL_GFLAGS
 0x00000025

	)

1506 
	#ETHTOOL_SFLAGS
 0x00000026

	)

1507 
	#ETHTOOL_GPFLAGS
 0x00000027

	)

1508 
	#ETHTOOL_SPFLAGS
 0x00000028

	)

1510 
	#ETHTOOL_GRXFH
 0x00000029

	)

1511 
	#ETHTOOL_SRXFH
 0x0000002®

	)

1512 
	#ETHTOOL_GGRO
 0x0000002b

	)

1513 
	#ETHTOOL_SGRO
 0x0000002¯

	)

1514 
	#ETHTOOL_GRXRINGS
 0x0000002d

	)

1515 
	#ETHTOOL_GRXCLSRLCNT
 0x0000002ê

	)

1516 
	#ETHTOOL_GRXCLSRULE
 0x0000002‡

	)

1517 
	#ETHTOOL_GRXCLSRLALL
 0x00000030

	)

1518 
	#ETHTOOL_SRXCLSRLDEL
 0x00000031

	)

1519 
	#ETHTOOL_SRXCLSRLINS
 0x00000032

	)

1520 
	#ETHTOOL_FLASHDEV
 0x00000033

	)

1521 
	#ETHTOOL_RESET
 0x00000034

	)

1522 
	#ETHTOOL_SRXNTUPLE
 0x00000035

	)

1523 
	#ETHTOOL_GRXNTUPLE
 0x00000036

	)

1524 
	#ETHTOOL_GSSET_INFO
 0x00000037

	)

1525 
	#ETHTOOL_GRXFHINDIR
 0x00000038

	)

1526 
	#ETHTOOL_SRXFHINDIR
 0x00000039

	)

1528 
	#ETHTOOL_GFEATURES
 0x0000003®

	)

1529 
	#ETHTOOL_SFEATURES
 0x0000003b

	)

1530 
	#ETHTOOL_GCHANNELS
 0x0000003¯

	)

1531 
	#ETHTOOL_SCHANNELS
 0x0000003d

	)

1532 
	#ETHTOOL_SET_DUMP
 0x0000003ê

	)

1533 
	#ETHTOOL_GET_DUMP_FLAG
 0x0000003‡

	)

1534 
	#ETHTOOL_GET_DUMP_DATA
 0x00000040

	)

1535 
	#ETHTOOL_GET_TS_INFO
 0x00000041

	)

1536 
	#ETHTOOL_GMODULEINFO
 0x00000042

	)

1537 
	#ETHTOOL_GMODULEEEPROM
 0x00000043

	)

1538 
	#ETHTOOL_GEEE
 0x00000044

	)

1539 
	#ETHTOOL_SEEE
 0x00000045

	)

1541 
	#ETHTOOL_GRSSH
 0x00000046

	)

1542 
	#ETHTOOL_SRSSH
 0x00000047

	)

1543 
	#ETHTOOL_GTUNABLE
 0x00000048

	)

1544 
	#ETHTOOL_STUNABLE
 0x00000049

	)

1545 
	#ETHTOOL_GPHYSTATS
 0x0000004®

	)

1547 
	#ETHTOOL_PERQUEUE
 0x0000004b

	)

1549 
	#ETHTOOL_GLINKSETTINGS
 0x0000004¯

	)

1550 
	#ETHTOOL_SLINKSETTINGS
 0x0000004d

	)

1551 
	#ETHTOOL_PHY_GTUNABLE
 0x0000004ê

	)

1552 
	#ETHTOOL_PHY_STUNABLE
 0x0000004‡

	)

1553 
	#ETHTOOL_GFECPARAM
 0x00000050

	)

1554 
	#ETHTOOL_SFECPARAM
 0x00000051

	)

1557 
	#SPARC_ETH_GSET
 
ETHTOOL_GSET


	)

1558 
	#SPARC_ETH_SSET
 
ETHTOOL_SSET


	)

1561 
	eëhtoﬁ_lök_mode_bô_ödi˚s
 {

1562 
	mETHTOOL_LINK_MODE_10ba£T_HÆf_BIT
 = 0,

1563 
	mETHTOOL_LINK_MODE_10ba£T_FuŒ_BIT
 = 1,

1564 
	mETHTOOL_LINK_MODE_100ba£T_HÆf_BIT
 = 2,

1565 
	mETHTOOL_LINK_MODE_100ba£T_FuŒ_BIT
 = 3,

1566 
	mETHTOOL_LINK_MODE_1000ba£T_HÆf_BIT
 = 4,

1567 
	mETHTOOL_LINK_MODE_1000ba£T_FuŒ_BIT
 = 5,

1568 
	mETHTOOL_LINK_MODE_Aut⁄eg_BIT
 = 6,

1569 
	mETHTOOL_LINK_MODE_TP_BIT
 = 7,

1570 
	mETHTOOL_LINK_MODE_AUI_BIT
 = 8,

1571 
	mETHTOOL_LINK_MODE_MII_BIT
 = 9,

1572 
	mETHTOOL_LINK_MODE_FIBRE_BIT
 = 10,

1573 
	mETHTOOL_LINK_MODE_BNC_BIT
 = 11,

1574 
	mETHTOOL_LINK_MODE_10000ba£T_FuŒ_BIT
 = 12,

1575 
	mETHTOOL_LINK_MODE_Pau£_BIT
 = 13,

1576 
	mETHTOOL_LINK_MODE_Asym_Pau£_BIT
 = 14,

1577 
	mETHTOOL_LINK_MODE_2500ba£X_FuŒ_BIT
 = 15,

1578 
	mETHTOOL_LINK_MODE_Back∂™e_BIT
 = 16,

1579 
	mETHTOOL_LINK_MODE_1000ba£KX_FuŒ_BIT
 = 17,

1580 
	mETHTOOL_LINK_MODE_10000ba£KX4_FuŒ_BIT
 = 18,

1581 
	mETHTOOL_LINK_MODE_10000ba£KR_FuŒ_BIT
 = 19,

1582 
	mETHTOOL_LINK_MODE_10000ba£R_FEC_BIT
 = 20,

1583 
	mETHTOOL_LINK_MODE_20000ba£MLD2_FuŒ_BIT
 = 21,

1584 
	mETHTOOL_LINK_MODE_20000ba£KR2_FuŒ_BIT
 = 22,

1585 
	mETHTOOL_LINK_MODE_40000ba£KR4_FuŒ_BIT
 = 23,

1586 
	mETHTOOL_LINK_MODE_40000ba£CR4_FuŒ_BIT
 = 24,

1587 
	mETHTOOL_LINK_MODE_40000ba£SR4_FuŒ_BIT
 = 25,

1588 
	mETHTOOL_LINK_MODE_40000ba£LR4_FuŒ_BIT
 = 26,

1589 
	mETHTOOL_LINK_MODE_56000ba£KR4_FuŒ_BIT
 = 27,

1590 
	mETHTOOL_LINK_MODE_56000ba£CR4_FuŒ_BIT
 = 28,

1591 
	mETHTOOL_LINK_MODE_56000ba£SR4_FuŒ_BIT
 = 29,

1592 
	mETHTOOL_LINK_MODE_56000ba£LR4_FuŒ_BIT
 = 30,

1593 
	mETHTOOL_LINK_MODE_25000ba£CR_FuŒ_BIT
 = 31,

1601 
	mETHTOOL_LINK_MODE_25000ba£KR_FuŒ_BIT
 = 32,

1602 
	mETHTOOL_LINK_MODE_25000ba£SR_FuŒ_BIT
 = 33,

1603 
	mETHTOOL_LINK_MODE_50000ba£CR2_FuŒ_BIT
 = 34,

1604 
	mETHTOOL_LINK_MODE_50000ba£KR2_FuŒ_BIT
 = 35,

1605 
	mETHTOOL_LINK_MODE_100000ba£KR4_FuŒ_BIT
 = 36,

1606 
	mETHTOOL_LINK_MODE_100000ba£SR4_FuŒ_BIT
 = 37,

1607 
	mETHTOOL_LINK_MODE_100000ba£CR4_FuŒ_BIT
 = 38,

1608 
	mETHTOOL_LINK_MODE_100000ba£LR4_ER4_FuŒ_BIT
 = 39,

1609 
	mETHTOOL_LINK_MODE_50000ba£SR2_FuŒ_BIT
 = 40,

1610 
	mETHTOOL_LINK_MODE_1000ba£X_FuŒ_BIT
 = 41,

1611 
	mETHTOOL_LINK_MODE_10000ba£CR_FuŒ_BIT
 = 42,

1612 
	mETHTOOL_LINK_MODE_10000ba£SR_FuŒ_BIT
 = 43,

1613 
	mETHTOOL_LINK_MODE_10000ba£LR_FuŒ_BIT
 = 44,

1614 
	mETHTOOL_LINK_MODE_10000ba£LRM_FuŒ_BIT
 = 45,

1615 
	mETHTOOL_LINK_MODE_10000ba£ER_FuŒ_BIT
 = 46,

1616 
	mETHTOOL_LINK_MODE_2500ba£T_FuŒ_BIT
 = 47,

1617 
	mETHTOOL_LINK_MODE_5000ba£T_FuŒ_BIT
 = 48,

1619 
	mETHTOOL_LINK_MODE_FEC_NONE_BIT
 = 49,

1620 
	mETHTOOL_LINK_MODE_FEC_RS_BIT
 = 50,

1621 
	mETHTOOL_LINK_MODE_FEC_BASER_BIT
 = 51,

1622 
	mETHTOOL_LINK_MODE_50000ba£KR_FuŒ_BIT
 = 52,

1623 
	mETHTOOL_LINK_MODE_50000ba£SR_FuŒ_BIT
 = 53,

1624 
	mETHTOOL_LINK_MODE_50000ba£CR_FuŒ_BIT
 = 54,

1625 
	mETHTOOL_LINK_MODE_50000ba£LR_ER_FR_FuŒ_BIT
 = 55,

1626 
	mETHTOOL_LINK_MODE_50000ba£DR_FuŒ_BIT
 = 56,

1627 
	mETHTOOL_LINK_MODE_100000ba£KR2_FuŒ_BIT
 = 57,

1628 
	mETHTOOL_LINK_MODE_100000ba£SR2_FuŒ_BIT
 = 58,

1629 
	mETHTOOL_LINK_MODE_100000ba£CR2_FuŒ_BIT
 = 59,

1630 
	mETHTOOL_LINK_MODE_100000ba£LR2_ER2_FR2_FuŒ_BIT
 = 60,

1631 
	mETHTOOL_LINK_MODE_100000ba£DR2_FuŒ_BIT
 = 61,

1632 
	mETHTOOL_LINK_MODE_200000ba£KR4_FuŒ_BIT
 = 62,

1633 
	mETHTOOL_LINK_MODE_200000ba£SR4_FuŒ_BIT
 = 63,

1634 
	mETHTOOL_LINK_MODE_200000ba£LR4_ER4_FR4_FuŒ_BIT
 = 64,

1635 
	mETHTOOL_LINK_MODE_200000ba£DR4_FuŒ_BIT
 = 65,

1636 
	mETHTOOL_LINK_MODE_200000ba£CR4_FuŒ_BIT
 = 66,

1637 
	mETHTOOL_LINK_MODE_100ba£T1_FuŒ_BIT
 = 67,

1638 
	mETHTOOL_LINK_MODE_1000ba£T1_FuŒ_BIT
 = 68,

1639 
	mETHTOOL_LINK_MODE_400000ba£KR8_FuŒ_BIT
 = 69,

1640 
	mETHTOOL_LINK_MODE_400000ba£SR8_FuŒ_BIT
 = 70,

1641 
	mETHTOOL_LINK_MODE_400000ba£LR8_ER8_FR8_FuŒ_BIT
 = 71,

1642 
	mETHTOOL_LINK_MODE_400000ba£DR8_FuŒ_BIT
 = 72,

1643 
	mETHTOOL_LINK_MODE_400000ba£CR8_FuŒ_BIT
 = 73,

1644 
	mETHTOOL_LINK_MODE_FEC_LLRS_BIT
 = 74,

1645 
	mETHTOOL_LINK_MODE_100000ba£KR_FuŒ_BIT
 = 75,

1646 
	mETHTOOL_LINK_MODE_100000ba£SR_FuŒ_BIT
 = 76,

1647 
	mETHTOOL_LINK_MODE_100000ba£LR_ER_FR_FuŒ_BIT
 = 77,

1648 
	mETHTOOL_LINK_MODE_100000ba£CR_FuŒ_BIT
 = 78,

1649 
	mETHTOOL_LINK_MODE_100000ba£DR_FuŒ_BIT
 = 79,

1650 
	mETHTOOL_LINK_MODE_200000ba£KR2_FuŒ_BIT
 = 80,

1651 
	mETHTOOL_LINK_MODE_200000ba£SR2_FuŒ_BIT
 = 81,

1652 
	mETHTOOL_LINK_MODE_200000ba£LR2_ER2_FR2_FuŒ_BIT
 = 82,

1653 
	mETHTOOL_LINK_MODE_200000ba£DR2_FuŒ_BIT
 = 83,

1654 
	mETHTOOL_LINK_MODE_200000ba£CR2_FuŒ_BIT
 = 84,

1655 
	mETHTOOL_LINK_MODE_400000ba£KR4_FuŒ_BIT
 = 85,

1656 
	mETHTOOL_LINK_MODE_400000ba£SR4_FuŒ_BIT
 = 86,

1657 
	mETHTOOL_LINK_MODE_400000ba£LR4_ER4_FR4_FuŒ_BIT
 = 87,

1658 
	mETHTOOL_LINK_MODE_400000ba£DR4_FuŒ_BIT
 = 88,

1659 
	mETHTOOL_LINK_MODE_400000ba£CR4_FuŒ_BIT
 = 89,

1660 
	mETHTOOL_LINK_MODE_100ba£FX_HÆf_BIT
 = 90,

1661 
	mETHTOOL_LINK_MODE_100ba£FX_FuŒ_BIT
 = 91,

1663 
	m__ETHTOOL_LINK_MODE_MASK_NBITS


1666 
	#__ETHTOOL_LINK_MODE_LEGACY_MASK
(
ba£_«me
) \

1667 (1UL << (
ETHTOOL_LINK_MODE_
 ## 
ba£_«me
 ## 
_BIT
))

	)

1673 
	#SUPPORTED_10ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_HÆf
)

	)

1674 
	#SUPPORTED_10ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_FuŒ
)

	)

1675 
	#SUPPORTED_100ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_HÆf
)

	)

1676 
	#SUPPORTED_100ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_FuŒ
)

	)

1677 
	#SUPPORTED_1000ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_HÆf
)

	)

1678 
	#SUPPORTED_1000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_FuŒ
)

	)

1679 
	#SUPPORTED_Aut⁄eg
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Aut⁄eg
)

	)

1680 
	#SUPPORTED_TP
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
TP
)

	)

1681 
	#SUPPORTED_AUI
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
AUI
)

	)

1682 
	#SUPPORTED_MII
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
MII
)

	)

1683 
	#SUPPORTED_FIBRE
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
FIBRE
)

	)

1684 
	#SUPPORTED_BNC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
BNC
)

	)

1685 
	#SUPPORTED_10000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£T_FuŒ
)

	)

1686 
	#SUPPORTED_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Pau£
)

	)

1687 
	#SUPPORTED_Asym_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Asym_Pau£
)

	)

1688 
	#SUPPORTED_2500ba£X_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(2500ba
£X_FuŒ
)

	)

1689 
	#SUPPORTED_Back∂™e
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Back∂™e
)

	)

1690 
	#SUPPORTED_1000ba£KX_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£KX_FuŒ
)

	)

1691 
	#SUPPORTED_10000ba£KX4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KX4_FuŒ
)

	)

1692 
	#SUPPORTED_10000ba£KR_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KR_FuŒ
)

	)

1693 
	#SUPPORTED_10000ba£R_FEC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£R_FEC
)

	)

1694 
	#SUPPORTED_20000ba£MLD2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£MLD2_FuŒ
)

	)

1695 
	#SUPPORTED_20000ba£KR2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£KR2_FuŒ
)

	)

1696 
	#SUPPORTED_40000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£KR4_FuŒ
)

	)

1697 
	#SUPPORTED_40000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£CR4_FuŒ
)

	)

1698 
	#SUPPORTED_40000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£SR4_FuŒ
)

	)

1699 
	#SUPPORTED_40000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£LR4_FuŒ
)

	)

1700 
	#SUPPORTED_56000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£KR4_FuŒ
)

	)

1701 
	#SUPPORTED_56000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£CR4_FuŒ
)

	)

1702 
	#SUPPORTED_56000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£SR4_FuŒ
)

	)

1703 
	#SUPPORTED_56000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£LR4_FuŒ
)

	)

1713 
	#ADVERTISED_10ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_HÆf
)

	)

1714 
	#ADVERTISED_10ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_FuŒ
)

	)

1715 
	#ADVERTISED_100ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_HÆf
)

	)

1716 
	#ADVERTISED_100ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_FuŒ
)

	)

1717 
	#ADVERTISED_1000ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_HÆf
)

	)

1718 
	#ADVERTISED_1000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_FuŒ
)

	)

1719 
	#ADVERTISED_Aut⁄eg
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Aut⁄eg
)

	)

1720 
	#ADVERTISED_TP
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
TP
)

	)

1721 
	#ADVERTISED_AUI
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
AUI
)

	)

1722 
	#ADVERTISED_MII
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
MII
)

	)

1723 
	#ADVERTISED_FIBRE
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
FIBRE
)

	)

1724 
	#ADVERTISED_BNC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
BNC
)

	)

1725 
	#ADVERTISED_10000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£T_FuŒ
)

	)

1726 
	#ADVERTISED_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Pau£
)

	)

1727 
	#ADVERTISED_Asym_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Asym_Pau£
)

	)

1728 
	#ADVERTISED_2500ba£X_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(2500ba
£X_FuŒ
)

	)

1729 
	#ADVERTISED_Back∂™e
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Back∂™e
)

	)

1730 
	#ADVERTISED_1000ba£KX_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£KX_FuŒ
)

	)

1731 
	#ADVERTISED_10000ba£KX4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KX4_FuŒ
)

	)

1732 
	#ADVERTISED_10000ba£KR_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KR_FuŒ
)

	)

1733 
	#ADVERTISED_10000ba£R_FEC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£R_FEC
)

	)

1734 
	#ADVERTISED_20000ba£MLD2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£MLD2_FuŒ
)

	)

1735 
	#ADVERTISED_20000ba£KR2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£KR2_FuŒ
)

	)

1736 
	#ADVERTISED_40000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£KR4_FuŒ
)

	)

1737 
	#ADVERTISED_40000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£CR4_FuŒ
)

	)

1738 
	#ADVERTISED_40000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£SR4_FuŒ
)

	)

1739 
	#ADVERTISED_40000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£LR4_FuŒ
)

	)

1740 
	#ADVERTISED_56000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£KR4_FuŒ
)

	)

1741 
	#ADVERTISED_56000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£CR4_FuŒ
)

	)

1742 
	#ADVERTISED_56000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£SR4_FuŒ
)

	)

1743 
	#ADVERTISED_56000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£LR4_FuŒ
)

	)

1758 
	#SPEED_10
 10

	)

1759 
	#SPEED_100
 100

	)

1760 
	#SPEED_1000
 1000

	)

1761 
	#SPEED_2500
 2500

	)

1762 
	#SPEED_5000
 5000

	)

1763 
	#SPEED_10000
 10000

	)

1764 
	#SPEED_14000
 14000

	)

1765 
	#SPEED_20000
 20000

	)

1766 
	#SPEED_25000
 25000

	)

1767 
	#SPEED_40000
 40000

	)

1768 
	#SPEED_50000
 50000

	)

1769 
	#SPEED_56000
 56000

	)

1770 
	#SPEED_100000
 100000

	)

1771 
	#SPEED_200000
 200000

	)

1772 
	#SPEED_400000
 400000

	)

1774 
	#SPEED_UNKNOWN
 -1

	)

1776 
__ölöe__
 
	$ëhtoﬁ_vÆid©e_•ìd
(
__u32
 
•ìd
)

1778  
•ìd
 <
INT_MAX
 || s≥ed =(
__u32
)
SPEED_UNKNOWN
;

1779 
	}
}

1782 
	#DUPLEX_HALF
 0x00

	)

1783 
	#DUPLEX_FULL
 0x01

	)

1784 
	#DUPLEX_UNKNOWN
 0xff

	)

1786 
__ölöe__
 
	$ëhtoﬁ_vÆid©e_du∂ex
(
__u8
 
du∂ex
)

1788 
du∂ex
) {

1789 
DUPLEX_HALF
:

1790 
DUPLEX_FULL
:

1791 
DUPLEX_UNKNOWN
:

1796 
	}
}

1798 
	#MASTER_SLAVE_CFG_UNSUPPORTED
 0

	)

1799 
	#MASTER_SLAVE_CFG_UNKNOWN
 1

	)

1800 
	#MASTER_SLAVE_CFG_MASTER_PREFERRED
 2

	)

1801 
	#MASTER_SLAVE_CFG_SLAVE_PREFERRED
 3

	)

1802 
	#MASTER_SLAVE_CFG_MASTER_FORCE
 4

	)

1803 
	#MASTER_SLAVE_CFG_SLAVE_FORCE
 5

	)

1804 
	#MASTER_SLAVE_STATE_UNSUPPORTED
 0

	)

1805 
	#MASTER_SLAVE_STATE_UNKNOWN
 1

	)

1806 
	#MASTER_SLAVE_STATE_MASTER
 2

	)

1807 
	#MASTER_SLAVE_STATE_SLAVE
 3

	)

1808 
	#MASTER_SLAVE_STATE_ERR
 4

	)

1811 
	#PORT_TP
 0x00

	)

1812 
	#PORT_AUI
 0x01

	)

1813 
	#PORT_MII
 0x02

	)

1814 
	#PORT_FIBRE
 0x03

	)

1815 
	#PORT_BNC
 0x04

	)

1816 
	#PORT_DA
 0x05

	)

1817 
	#PORT_NONE
 0xef

	)

1818 
	#PORT_OTHER
 0xff

	)

1821 
	#XCVR_INTERNAL
 0x00

	)

1822 
	#XCVR_EXTERNAL
 0x01

	)

1823 
	#XCVR_DUMMY1
 0x02

	)

1824 
	#XCVR_DUMMY2
 0x03

	)

1825 
	#XCVR_DUMMY3
 0x04

	)

1828 
	#AUTONEG_DISABLE
 0x00

	)

1829 
	#AUTONEG_ENABLE
 0x01

	)

1834 
	#ETH_TP_MDI_INVALID
 0x00

	)

1835 
	#ETH_TP_MDI
 0x01

	)

1836 
	#ETH_TP_MDI_X
 0x02

	)

1837 
	#ETH_TP_MDI_AUTO
 0x03

	)

1840 
	#WAKE_PHY
 (1 << 0)

	)

1841 
	#WAKE_UCAST
 (1 << 1)

	)

1842 
	#WAKE_MCAST
 (1 << 2)

	)

1843 
	#WAKE_BCAST
 (1 << 3)

	)

1844 
	#WAKE_ARP
 (1 << 4)

	)

1845 
	#WAKE_MAGIC
 (1 << 5)

	)

1846 
	#WAKE_MAGICSECURE
 (1 << 6Ë

	)

1847 
	#WAKE_FILTER
 (1 << 7)

	)

1849 
	#WOL_MODE_COUNT
 8

	)

1852 
	#TCP_V4_FLOW
 0x01

	)

1853 
	#UDP_V4_FLOW
 0x02

	)

1854 
	#SCTP_V4_FLOW
 0x03

	)

1855 
	#AH_ESP_V4_FLOW
 0x04

	)

1856 
	#TCP_V6_FLOW
 0x05

	)

1857 
	#UDP_V6_FLOW
 0x06

	)

1858 
	#SCTP_V6_FLOW
 0x07

	)

1859 
	#AH_ESP_V6_FLOW
 0x08

	)

1860 
	#AH_V4_FLOW
 0x09

	)

1861 
	#ESP_V4_FLOW
 0x0®

	)

1862 
	#AH_V6_FLOW
 0x0b

	)

1863 
	#ESP_V6_FLOW
 0x0¯

	)

1864 
	#IPV4_USER_FLOW
 0x0d

	)

1865 
	#IP_USER_FLOW
 
IPV4_USER_FLOW


	)

1866 
	#IPV6_USER_FLOW
 0x0ê

	)

1867 
	#IPV4_FLOW
 0x10

	)

1868 
	#IPV6_FLOW
 0x11

	)

1869 
	#ETHER_FLOW
 0x12

	)

1871 
	#FLOW_EXT
 0x80000000

	)

1872 
	#FLOW_MAC_EXT
 0x40000000

	)

1874 
	#FLOW_RSS
 0x20000000

	)

1877 
	#RXH_L2DA
 (1 << 1)

	)

1878 
	#RXH_VLAN
 (1 << 2)

	)

1879 
	#RXH_L3_PROTO
 (1 << 3)

	)

1880 
	#RXH_IP_SRC
 (1 << 4)

	)

1881 
	#RXH_IP_DST
 (1 << 5)

	)

1882 
	#RXH_L4_B_0_1
 (1 << 6Ë

	)

1883 
	#RXH_L4_B_2_3
 (1 << 7Ë

	)

1884 
	#RXH_DISCARD
 (1 << 31)

	)

1886 
	#RX_CLS_FLOW_DISC
 0xffffffffffffffffULL

	)

1887 
	#RX_CLS_FLOW_WAKE
 0xffffffffffffff„ULL

	)

1890 
	#RX_CLS_LOC_SPECIAL
 0x80000000

	)

1891 
	#RX_CLS_LOC_ANY
 0xffffffff

	)

1892 
	#RX_CLS_LOC_FIRST
 0xffffff„

	)

1893 
	#RX_CLS_LOC_LAST
 0xfffffffd

	)

1896 
	#ETH_MODULE_SFF_8079
 0x1

	)

1897 
	#ETH_MODULE_SFF_8079_LEN
 256

	)

1898 
	#ETH_MODULE_SFF_8472
 0x2

	)

1899 
	#ETH_MODULE_SFF_8472_LEN
 512

	)

1900 
	#ETH_MODULE_SFF_8636
 0x3

	)

1901 
	#ETH_MODULE_SFF_8636_LEN
 256

	)

1902 
	#ETH_MODULE_SFF_8436
 0x4

	)

1903 
	#ETH_MODULE_SFF_8436_LEN
 256

	)

1905 
	#ETH_MODULE_SFF_8636_MAX_LEN
 640

	)

1906 
	#ETH_MODULE_SFF_8436_MAX_LEN
 640

	)

1915 
	eëhtoﬁ_ª£t_Êags
 {

1921 
	mETH_RESET_MGMT
 = 1 << 0,

1922 
	mETH_RESET_IRQ
 = 1 << 1,

1923 
	mETH_RESET_DMA
 = 1 << 2,

1924 
	mETH_RESET_FILTER
 = 1 << 3,

1925 
	mETH_RESET_OFFLOAD
 = 1 << 4,

1926 
	mETH_RESET_MAC
 = 1 << 5,

1927 
	mETH_RESET_PHY
 = 1 << 6,

1928 
	mETH_RESET_RAM
 = 1 << 7,

1930 
	mETH_RESET_AP
 = 1 << 8,

1932 
	mETH_RESET_DEDICATED
 = 0x0000ffff,

1934 
	mETH_RESET_ALL
 = 0xffffffff,

1937 
	#ETH_RESET_SHARED_SHIFT
 16

	)

2041 
	sëhtoﬁ_lök_£âögs
 {

2042 
__u32
 
	mcmd
;

2043 
__u32
 
	m•ìd
;

2044 
__u8
 
	mdu∂ex
;

2045 
__u8
 
	mp‹t
;

2046 
__u8
 
	mphy_addªss
;

2047 
__u8
 
	maut⁄eg
;

2048 
__u8
 
	mmdio_suµ‹t
;

2049 
__u8
 
	mëh_ç_mdix
;

2050 
__u8
 
	mëh_ç_mdix_˘æ
;

2051 
__s8
 
	mlök_mode_masks_nw‹ds
;

2052 
__u8
 
	må™s˚ivî
;

2053 
__u8
 
	mma°î_¶ave_cfg
;

2054 
__u8
 
	mma°î_¶ave_°©e
;

2055 
__u8
 
	mª£rved1
[1];

2056 
__u32
 
	mª£rved
[7];

2057 
__u32
 
	mlök_mode_masks
[0];

	@/usr/include/linux/filter.h

6 #i‚de‡
__LINUX_FILTER_H__


7 
	#__LINUX_FILTER_H__


	)

10 
	~<löux/ty≥s.h
>

11 
	~<löux/bpf_comm⁄.h
>

16 
	#BPF_MAJOR_VERSION
 1

	)

17 
	#BPF_MINOR_VERSION
 1

	)

24 
	ssock_fûãr
 {

25 
__u16
 
	mcode
;

26 
__u8
 
	mjt
;

27 
__u8
 
	mjf
;

28 
__u32
 
	mk
;

31 
	ssock_Ârog
 {

32 
	mÀn
;

33 
sock_fûãr
 *
	mfûãr
;

37 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

38 
	#BPF_A
 0x10

	)

41 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

42 
	#BPF_TAX
 0x00

	)

43 
	#BPF_TXA
 0x80

	)

48 #i‚de‡
BPF_STMT


49 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

51 #i‚de‡
BPF_JUMP


52 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

58 
	#BPF_MEMWORDS
 16

	)

65 
	#SKF_AD_OFF
 (-0x1000)

	)

66 
	#SKF_AD_PROTOCOL
 0

	)

67 
	#SKF_AD_PKTTYPE
 4

	)

68 
	#SKF_AD_IFINDEX
 8

	)

69 
	#SKF_AD_NLATTR
 12

	)

70 
	#SKF_AD_NLATTR_NEST
 16

	)

71 
	#SKF_AD_MARK
 20

	)

72 
	#SKF_AD_QUEUE
 24

	)

73 
	#SKF_AD_HATYPE
 28

	)

74 
	#SKF_AD_RXHASH
 32

	)

75 
	#SKF_AD_CPU
 36

	)

76 
	#SKF_AD_ALU_XOR_X
 40

	)

77 
	#SKF_AD_VLAN_TAG
 44

	)

78 
	#SKF_AD_VLAN_TAG_PRESENT
 48

	)

79 
	#SKF_AD_PAY_OFFSET
 52

	)

80 
	#SKF_AD_RANDOM
 56

	)

81 
	#SKF_AD_VLAN_TPID
 60

	)

82 
	#SKF_AD_MAX
 64

	)

84 
	#SKF_NET_OFF
 (-0x100000)

	)

85 
	#SKF_LL_OFF
 (-0x200000)

	)

87 
	#BPF_NET_OFF
 
SKF_NET_OFF


	)

88 
	#BPF_LL_OFF
 
SKF_LL_OFF


	)

	@/usr/include/linux/if_ether.h

22 #i‚de‡
_LINUX_IF_ETHER_H


23 
	#_LINUX_IF_ETHER_H


	)

25 
	~<löux/ty≥s.h
>

32 
	#ETH_ALEN
 6

	)

33 
	#ETH_TLEN
 2

	)

34 
	#ETH_HLEN
 14

	)

35 
	#ETH_ZLEN
 60

	)

36 
	#ETH_DATA_LEN
 1500

	)

37 
	#ETH_FRAME_LEN
 1514

	)

38 
	#ETH_FCS_LEN
 4

	)

40 
	#ETH_MIN_MTU
 68

	)

41 
	#ETH_MAX_MTU
 0xFFFFU

	)

47 
	#ETH_P_LOOP
 0x0060

	)

48 
	#ETH_P_PUP
 0x0200

	)

49 
	#ETH_P_PUPAT
 0x0201

	)

50 
	#ETH_P_TSN
 0x22F0

	)

51 
	#ETH_P_ERSPAN2
 0x22EB

	)

52 
	#ETH_P_IP
 0x0800

	)

53 
	#ETH_P_X25
 0x0805

	)

54 
	#ETH_P_ARP
 0x0806

	)

55 
	#ETH_P_BPQ
 0x08FF

	)

56 
	#ETH_P_IEEEPUP
 0x0a00

	)

57 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

58 
	#ETH_P_BATMAN
 0x4305

	)

59 
	#ETH_P_DEC
 0x6000

	)

60 
	#ETH_P_DNA_DL
 0x6001

	)

61 
	#ETH_P_DNA_RC
 0x6002

	)

62 
	#ETH_P_DNA_RT
 0x6003

	)

63 
	#ETH_P_LAT
 0x6004

	)

64 
	#ETH_P_DIAG
 0x6005

	)

65 
	#ETH_P_CUST
 0x6006

	)

66 
	#ETH_P_SCA
 0x6007

	)

67 
	#ETH_P_TEB
 0x6558

	)

68 
	#ETH_P_RARP
 0x8035

	)

69 
	#ETH_P_ATALK
 0x809B

	)

70 
	#ETH_P_AARP
 0x80F3

	)

71 
	#ETH_P_8021Q
 0x8100

	)

72 
	#ETH_P_ERSPAN
 0x88BE

	)

73 
	#ETH_P_IPX
 0x8137

	)

74 
	#ETH_P_IPV6
 0x86DD

	)

75 
	#ETH_P_PAUSE
 0x8808

	)

76 
	#ETH_P_SLOW
 0x8809

	)

77 
	#ETH_P_WCCP
 0x883E

	)

79 
	#ETH_P_MPLS_UC
 0x8847

	)

80 
	#ETH_P_MPLS_MC
 0x8848

	)

81 
	#ETH_P_ATMMPOA
 0x884¯

	)

82 
	#ETH_P_PPP_DISC
 0x8863

	)

83 
	#ETH_P_PPP_SES
 0x8864

	)

84 
	#ETH_P_LINK_CTL
 0x886¯

	)

85 
	#ETH_P_ATMFATE
 0x8884

	)

88 
	#ETH_P_PAE
 0x888E

	)

89 
	#ETH_P_AOE
 0x88A2

	)

90 
	#ETH_P_8021AD
 0x88A8

	)

91 
	#ETH_P_802_EX1
 0x88B5

	)

92 
	#ETH_P_PREAUTH
 0x88C7

	)

93 
	#ETH_P_TIPC
 0x88CA

	)

94 
	#ETH_P_LLDP
 0x88CC

	)

95 
	#ETH_P_MRP
 0x88E3

	)

96 
	#ETH_P_MACSEC
 0x88E5

	)

97 
	#ETH_P_8021AH
 0x88E7

	)

98 
	#ETH_P_MVRP
 0x88F5

	)

99 
	#ETH_P_1588
 0x88F7

	)

100 
	#ETH_P_NCSI
 0x88F8

	)

101 
	#ETH_P_PRP
 0x88FB

	)

102 
	#ETH_P_CFM
 0x8902

	)

103 
	#ETH_P_FCOE
 0x8906

	)

104 
	#ETH_P_IBOE
 0x8915

	)

105 
	#ETH_P_TDLS
 0x890D

	)

106 
	#ETH_P_FIP
 0x8914

	)

107 
	#ETH_P_80221
 0x8917

	)

108 
	#ETH_P_HSR
 0x892F

	)

109 
	#ETH_P_NSH
 0x894F

	)

110 
	#ETH_P_LOOPBACK
 0x9000

	)

111 
	#ETH_P_QINQ1
 0x9100

	)

112 
	#ETH_P_QINQ2
 0x9200

	)

113 
	#ETH_P_QINQ3
 0x9300

	)

114 
	#ETH_P_EDSA
 0xDADA

	)

115 
	#ETH_P_DSA_8021Q
 0xDADB

	)

116 
	#ETH_P_IFE
 0xED3E

	)

117 
	#ETH_P_AF_IUCV
 0xFBFB

	)

119 
	#ETH_P_802_3_MIN
 0x0600

	)

126 
	#ETH_P_802_3
 0x0001

	)

127 
	#ETH_P_AX25
 0x0002

	)

128 
	#ETH_P_ALL
 0x0003

	)

129 
	#ETH_P_802_2
 0x0004

	)

130 
	#ETH_P_SNAP
 0x0005

	)

131 
	#ETH_P_DDCMP
 0x0006

	)

132 
	#ETH_P_WAN_PPP
 0x0007

	)

133 
	#ETH_P_PPP_MP
 0x0008

	)

134 
	#ETH_P_LOCALTALK
 0x0009

	)

135 
	#ETH_P_CAN
 0x000C

	)

136 
	#ETH_P_CANFD
 0x000D

	)

137 
	#ETH_P_PPPTALK
 0x0010

	)

138 
	#ETH_P_TR_802_2
 0x0011

	)

139 
	#ETH_P_MOBITEX
 0x0015

	)

140 
	#ETH_P_CONTROL
 0x0016

	)

141 
	#ETH_P_IRDA
 0x0017

	)

142 
	#ETH_P_ECONET
 0x0018

	)

143 
	#ETH_P_HDLC
 0x0019

	)

144 
	#ETH_P_ARCNET
 0x001A

	)

145 
	#ETH_P_DSA
 0x001B

	)

146 
	#ETH_P_TRAILER
 0x001C

	)

147 
	#ETH_P_PHONET
 0x00F5

	)

148 
	#ETH_P_IEEE802154
 0x00F6

	)

149 
	#ETH_P_CAIF
 0x00F7

	)

150 
	#ETH_P_XDSA
 0x00F8

	)

151 
	#ETH_P_MAP
 0x00F9

	)

154 
	#ETH_P_MCTP
 0x00FA

	)

163 #i‚de‡
__UAPI_DEF_ETHHDR


164 
	#__UAPI_DEF_ETHHDR
 1

	)

167 #i‡
__UAPI_DEF_ETHHDR


168 
	sëhhdr
 {

169 
	mh_de°
[
ETH_ALEN
];

170 
	mh_sour˚
[
ETH_ALEN
];

171 
__be16
 
	mh_¥Ÿo
;

172 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_link.h

2 #i‚de‡
_LINUX_IF_LINK_H


3 
	#_LINUX_IF_LINK_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/√éök.h
>

9 
	sπ∆_lök_°©s
 {

10 
__u32
 
	mrx_∑ckës
;

11 
__u32
 
	mtx_∑ckës
;

12 
__u32
 
	mrx_byãs
;

13 
__u32
 
	mtx_byãs
;

14 
__u32
 
	mrx_îr‹s
;

15 
__u32
 
	mtx_îr‹s
;

16 
__u32
 
	mrx_dr›≥d
;

17 
__u32
 
	mtx_dr›≥d
;

18 
__u32
 
	mmu…iˇ°
;

19 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

39 
__u32
 
	mrx_noh™dÀr
;

215 
	sπ∆_lök_°©s64
 {

216 
__u64
 
	mrx_∑ckës
;

217 
__u64
 
	mtx_∑ckës
;

218 
__u64
 
	mrx_byãs
;

219 
__u64
 
	mtx_byãs
;

220 
__u64
 
	mrx_îr‹s
;

221 
__u64
 
	mtx_îr‹s
;

222 
__u64
 
	mrx_dr›≥d
;

223 
__u64
 
	mtx_dr›≥d
;

224 
__u64
 
	mmu…iˇ°
;

225 
__u64
 
	mcﬁlisi⁄s
;

228 
__u64
 
	mrx_Àngth_îr‹s
;

229 
__u64
 
	mrx_ovî_îr‹s
;

230 
__u64
 
	mrx_¸c_îr‹s
;

231 
__u64
 
	mrx_‰ame_îr‹s
;

232 
__u64
 
	mrx_fifo_îr‹s
;

233 
__u64
 
	mrx_mis£d_îr‹s
;

236 
__u64
 
	mtx_ab‹ãd_îr‹s
;

237 
__u64
 
	mtx_ˇºõr_îr‹s
;

238 
__u64
 
	mtx_fifo_îr‹s
;

239 
__u64
 
	mtx_hóπbót_îr‹s
;

240 
__u64
 
	mtx_wödow_îr‹s
;

243 
__u64
 
	mrx_com¥es£d
;

244 
__u64
 
	mtx_com¥es£d
;

245 
__u64
 
	mrx_noh™dÀr
;

249 
	sπ∆_lök_ifm≠
 {

250 
__u64
 
	mmem_°¨t
;

251 
__u64
 
	mmem_íd
;

252 
__u64
 
	mba£_addr
;

253 
__u16
 
	múq
;

254 
__u8
 
	mdma
;

255 
__u8
 
	mp‹t
;

277 
	mIFLA_UNSPEC
,

278 
	mIFLA_ADDRESS
,

279 
	mIFLA_BROADCAST
,

280 
	mIFLA_IFNAME
,

281 
	mIFLA_MTU
,

282 
	mIFLA_LINK
,

283 
	mIFLA_QDISC
,

284 
	mIFLA_STATS
,

285 
	mIFLA_COST
,

286 
	#IFLA_COST
 
IFLA_COST


	)

287 
	mIFLA_PRIORITY
,

288 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

289 
	mIFLA_MASTER
,

290 
	#IFLA_MASTER
 
IFLA_MASTER


	)

291 
	mIFLA_WIRELESS
,

292 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

293 
	mIFLA_PROTINFO
,

294 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

295 
	mIFLA_TXQLEN
,

296 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

297 
	mIFLA_MAP
,

298 
	#IFLA_MAP
 
IFLA_MAP


	)

299 
	mIFLA_WEIGHT
,

300 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

301 
	mIFLA_OPERSTATE
,

302 
	mIFLA_LINKMODE
,

303 
	mIFLA_LINKINFO
,

304 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

305 
	mIFLA_NET_NS_PID
,

306 
	mIFLA_IFALIAS
,

307 
	mIFLA_NUM_VF
,

308 
	mIFLA_VFINFO_LIST
,

309 
	mIFLA_STATS64
,

310 
	mIFLA_VF_PORTS
,

311 
	mIFLA_PORT_SELF
,

312 
	mIFLA_AF_SPEC
,

313 
	mIFLA_GROUP
,

314 
	mIFLA_NET_NS_FD
,

315 
	mIFLA_EXT_MASK
,

316 
	mIFLA_PROMISCUITY
,

317 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

318 
	mIFLA_NUM_TX_QUEUES
,

319 
	mIFLA_NUM_RX_QUEUES
,

320 
	mIFLA_CARRIER
,

321 
	mIFLA_PHYS_PORT_ID
,

322 
	mIFLA_CARRIER_CHANGES
,

323 
	mIFLA_PHYS_SWITCH_ID
,

324 
	mIFLA_LINK_NETNSID
,

325 
	mIFLA_PHYS_PORT_NAME
,

326 
	mIFLA_PROTO_DOWN
,

327 
	mIFLA_GSO_MAX_SEGS
,

328 
	mIFLA_GSO_MAX_SIZE
,

329 
	mIFLA_PAD
,

330 
	mIFLA_XDP
,

331 
	mIFLA_EVENT
,

332 
	mIFLA_NEW_NETNSID
,

333 
	mIFLA_IF_NETNSID
,

334 
	mIFLA_TARGET_NETNSID
 = 
IFLA_IF_NETNSID
,

335 
	mIFLA_CARRIER_UP_COUNT
,

336 
	mIFLA_CARRIER_DOWN_COUNT
,

337 
	mIFLA_NEW_IFINDEX
,

338 
	mIFLA_MIN_MTU
,

339 
	mIFLA_MAX_MTU
,

340 
	mIFLA_PROP_LIST
,

341 
	mIFLA_ALT_IFNAME
,

342 
	mIFLA_PERM_ADDRESS
,

343 
	mIFLA_PROTO_DOWN_REASON
,

348 
	mIFLA_PARENT_DEV_NAME
,

349 
	mIFLA_PARENT_DEV_BUS_NAME
,

351 
	m__IFLA_MAX


355 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

358 
	mIFLA_PROTO_DOWN_REASON_UNSPEC
,

359 
	mIFLA_PROTO_DOWN_REASON_MASK
,

360 
	mIFLA_PROTO_DOWN_REASON_VALUE
,

362 
	m__IFLA_PROTO_DOWN_REASON_CNT
,

363 
	mIFLA_PROTO_DOWN_REASON_MAX
 = 
__IFLA_PROTO_DOWN_REASON_CNT
 - 1

367 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

368 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

371 
	mIFLA_INET_UNSPEC
,

372 
	mIFLA_INET_CONF
,

373 
	m__IFLA_INET_MAX
,

376 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

409 
	mIFLA_INET6_UNSPEC
,

410 
	mIFLA_INET6_FLAGS
,

411 
	mIFLA_INET6_CONF
,

412 
	mIFLA_INET6_STATS
,

413 
	mIFLA_INET6_MCAST
,

414 
	mIFLA_INET6_CACHEINFO
,

415 
	mIFLA_INET6_ICMP6STATS
,

416 
	mIFLA_INET6_TOKEN
,

417 
	mIFLA_INET6_ADDR_GEN_MODE
,

418 
	mIFLA_INET6_RA_MTU
,

419 
	m__IFLA_INET6_MAX


422 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

424 
	eö6_addr_gí_mode
 {

425 
	mIN6_ADDR_GEN_MODE_EUI64
,

426 
	mIN6_ADDR_GEN_MODE_NONE
,

427 
	mIN6_ADDR_GEN_MODE_STABLE_PRIVACY
,

428 
	mIN6_ADDR_GEN_MODE_RANDOM
,

434 
	mIFLA_BR_UNSPEC
,

435 
	mIFLA_BR_FORWARD_DELAY
,

436 
	mIFLA_BR_HELLO_TIME
,

437 
	mIFLA_BR_MAX_AGE
,

438 
	mIFLA_BR_AGEING_TIME
,

439 
	mIFLA_BR_STP_STATE
,

440 
	mIFLA_BR_PRIORITY
,

441 
	mIFLA_BR_VLAN_FILTERING
,

442 
	mIFLA_BR_VLAN_PROTOCOL
,

443 
	mIFLA_BR_GROUP_FWD_MASK
,

444 
	mIFLA_BR_ROOT_ID
,

445 
	mIFLA_BR_BRIDGE_ID
,

446 
	mIFLA_BR_ROOT_PORT
,

447 
	mIFLA_BR_ROOT_PATH_COST
,

448 
	mIFLA_BR_TOPOLOGY_CHANGE
,

449 
	mIFLA_BR_TOPOLOGY_CHANGE_DETECTED
,

450 
	mIFLA_BR_HELLO_TIMER
,

451 
	mIFLA_BR_TCN_TIMER
,

452 
	mIFLA_BR_TOPOLOGY_CHANGE_TIMER
,

453 
	mIFLA_BR_GC_TIMER
,

454 
	mIFLA_BR_GROUP_ADDR
,

455 
	mIFLA_BR_FDB_FLUSH
,

456 
	mIFLA_BR_MCAST_ROUTER
,

457 
	mIFLA_BR_MCAST_SNOOPING
,

458 
	mIFLA_BR_MCAST_QUERY_USE_IFADDR
,

459 
	mIFLA_BR_MCAST_QUERIER
,

460 
	mIFLA_BR_MCAST_HASH_ELASTICITY
,

461 
	mIFLA_BR_MCAST_HASH_MAX
,

462 
	mIFLA_BR_MCAST_LAST_MEMBER_CNT
,

463 
	mIFLA_BR_MCAST_STARTUP_QUERY_CNT
,

464 
	mIFLA_BR_MCAST_LAST_MEMBER_INTVL
,

465 
	mIFLA_BR_MCAST_MEMBERSHIP_INTVL
,

466 
	mIFLA_BR_MCAST_QUERIER_INTVL
,

467 
	mIFLA_BR_MCAST_QUERY_INTVL
,

468 
	mIFLA_BR_MCAST_QUERY_RESPONSE_INTVL
,

469 
	mIFLA_BR_MCAST_STARTUP_QUERY_INTVL
,

470 
	mIFLA_BR_NF_CALL_IPTABLES
,

471 
	mIFLA_BR_NF_CALL_IP6TABLES
,

472 
	mIFLA_BR_NF_CALL_ARPTABLES
,

473 
	mIFLA_BR_VLAN_DEFAULT_PVID
,

474 
	mIFLA_BR_PAD
,

475 
	mIFLA_BR_VLAN_STATS_ENABLED
,

476 
	mIFLA_BR_MCAST_STATS_ENABLED
,

477 
	mIFLA_BR_MCAST_IGMP_VERSION
,

478 
	mIFLA_BR_MCAST_MLD_VERSION
,

479 
	mIFLA_BR_VLAN_STATS_PER_PORT
,

480 
	mIFLA_BR_MULTI_BOOLOPT
,

481 
	mIFLA_BR_MCAST_QUERIER_STATE
,

482 
	m__IFLA_BR_MAX
,

485 
	#IFLA_BR_MAX
 (
__IFLA_BR_MAX
 - 1)

	)

487 
	siÊa_bridge_id
 {

488 
__u8
 
	m¥io
[2];

489 
__u8
 
	maddr
[6];

493 
	mBRIDGE_MODE_UNSPEC
,

494 
	mBRIDGE_MODE_HAIRPIN
,

498 
	mIFLA_BRPORT_UNSPEC
,

499 
	mIFLA_BRPORT_STATE
,

500 
	mIFLA_BRPORT_PRIORITY
,

501 
	mIFLA_BRPORT_COST
,

502 
	mIFLA_BRPORT_MODE
,

503 
	mIFLA_BRPORT_GUARD
,

504 
	mIFLA_BRPORT_PROTECT
,

505 
	mIFLA_BRPORT_FAST_LEAVE
,

506 
	mIFLA_BRPORT_LEARNING
,

507 
	mIFLA_BRPORT_UNICAST_FLOOD
,

508 
	mIFLA_BRPORT_PROXYARP
,

509 
	mIFLA_BRPORT_LEARNING_SYNC
,

510 
	mIFLA_BRPORT_PROXYARP_WIFI
,

511 
	mIFLA_BRPORT_ROOT_ID
,

512 
	mIFLA_BRPORT_BRIDGE_ID
,

513 
	mIFLA_BRPORT_DESIGNATED_PORT
,

514 
	mIFLA_BRPORT_DESIGNATED_COST
,

515 
	mIFLA_BRPORT_ID
,

516 
	mIFLA_BRPORT_NO
,

517 
	mIFLA_BRPORT_TOPOLOGY_CHANGE_ACK
,

518 
	mIFLA_BRPORT_CONFIG_PENDING
,

519 
	mIFLA_BRPORT_MESSAGE_AGE_TIMER
,

520 
	mIFLA_BRPORT_FORWARD_DELAY_TIMER
,

521 
	mIFLA_BRPORT_HOLD_TIMER
,

522 
	mIFLA_BRPORT_FLUSH
,

523 
	mIFLA_BRPORT_MULTICAST_ROUTER
,

524 
	mIFLA_BRPORT_PAD
,

525 
	mIFLA_BRPORT_MCAST_FLOOD
,

526 
	mIFLA_BRPORT_MCAST_TO_UCAST
,

527 
	mIFLA_BRPORT_VLAN_TUNNEL
,

528 
	mIFLA_BRPORT_BCAST_FLOOD
,

529 
	mIFLA_BRPORT_GROUP_FWD_MASK
,

530 
	mIFLA_BRPORT_NEIGH_SUPPRESS
,

531 
	mIFLA_BRPORT_ISOLATED
,

532 
	mIFLA_BRPORT_BACKUP_PORT
,

533 
	mIFLA_BRPORT_MRP_RING_OPEN
,

534 
	mIFLA_BRPORT_MRP_IN_OPEN
,

535 
	mIFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT
,

536 
	mIFLA_BRPORT_MCAST_EHT_HOSTS_CNT
,

537 
	m__IFLA_BRPORT_MAX


539 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

541 
	siÊa_ˇcheöfo
 {

542 
__u32
 
	mmax_ªasm_Àn
;

543 
__u32
 
	mt°amp
;

544 
__u32
 
	mªachabÀ_time
;

545 
__u32
 
	mªå™s_time
;

549 
	mIFLA_INFO_UNSPEC
,

550 
	mIFLA_INFO_KIND
,

551 
	mIFLA_INFO_DATA
,

552 
	mIFLA_INFO_XSTATS
,

553 
	mIFLA_INFO_SLAVE_KIND
,

554 
	mIFLA_INFO_SLAVE_DATA
,

555 
	m__IFLA_INFO_MAX
,

558 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

563 
	mIFLA_VLAN_UNSPEC
,

564 
	mIFLA_VLAN_ID
,

565 
	mIFLA_VLAN_FLAGS
,

566 
	mIFLA_VLAN_EGRESS_QOS
,

567 
	mIFLA_VLAN_INGRESS_QOS
,

568 
	mIFLA_VLAN_PROTOCOL
,

569 
	m__IFLA_VLAN_MAX
,

572 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

574 
	siÊa_vœn_Êags
 {

575 
__u32
 
	mÊags
;

576 
__u32
 
	mmask
;

580 
	mIFLA_VLAN_QOS_UNSPEC
,

581 
	mIFLA_VLAN_QOS_MAPPING
,

582 
	m__IFLA_VLAN_QOS_MAX


585 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

587 
	siÊa_vœn_qos_m≠pög
 {

588 
__u32
 
	m‰om
;

589 
__u32
 
	mto
;

594 
	mIFLA_MACVLAN_UNSPEC
,

595 
	mIFLA_MACVLAN_MODE
,

596 
	mIFLA_MACVLAN_FLAGS
,

597 
	mIFLA_MACVLAN_MACADDR_MODE
,

598 
	mIFLA_MACVLAN_MACADDR
,

599 
	mIFLA_MACVLAN_MACADDR_DATA
,

600 
	mIFLA_MACVLAN_MACADDR_COUNT
,

601 
	mIFLA_MACVLAN_BC_QUEUE_LEN
,

602 
	mIFLA_MACVLAN_BC_QUEUE_LEN_USED
,

603 
	m__IFLA_MACVLAN_MAX
,

606 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

608 
	emacvœn_mode
 {

609 
	mMACVLAN_MODE_PRIVATE
 = 1,

610 
	mMACVLAN_MODE_VEPA
 = 2,

611 
	mMACVLAN_MODE_BRIDGE
 = 4,

612 
	mMACVLAN_MODE_PASSTHRU
 = 8,

613 
	mMACVLAN_MODE_SOURCE
 = 16,

616 
	emacvœn_maˇddr_mode
 {

617 
	mMACVLAN_MACADDR_ADD
,

618 
	mMACVLAN_MACADDR_DEL
,

619 
	mMACVLAN_MACADDR_FLUSH
,

620 
	mMACVLAN_MACADDR_SET
,

623 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

624 
	#MACVLAN_FLAG_NODST
 2

	)

628 
	mIFLA_VRF_UNSPEC
,

629 
	mIFLA_VRF_TABLE
,

630 
	m__IFLA_VRF_MAX


633 
	#IFLA_VRF_MAX
 (
__IFLA_VRF_MAX
 - 1)

	)

636 
	mIFLA_VRF_PORT_UNSPEC
,

637 
	mIFLA_VRF_PORT_TABLE
,

638 
	m__IFLA_VRF_PORT_MAX


641 
	#IFLA_VRF_PORT_MAX
 (
__IFLA_VRF_PORT_MAX
 - 1)

	)

645 
	mIFLA_MACSEC_UNSPEC
,

646 
	mIFLA_MACSEC_SCI
,

647 
	mIFLA_MACSEC_PORT
,

648 
	mIFLA_MACSEC_ICV_LEN
,

649 
	mIFLA_MACSEC_CIPHER_SUITE
,

650 
	mIFLA_MACSEC_WINDOW
,

651 
	mIFLA_MACSEC_ENCODING_SA
,

652 
	mIFLA_MACSEC_ENCRYPT
,

653 
	mIFLA_MACSEC_PROTECT
,

654 
	mIFLA_MACSEC_INC_SCI
,

655 
	mIFLA_MACSEC_ES
,

656 
	mIFLA_MACSEC_SCB
,

657 
	mIFLA_MACSEC_REPLAY_PROTECT
,

658 
	mIFLA_MACSEC_VALIDATION
,

659 
	mIFLA_MACSEC_PAD
,

660 
	mIFLA_MACSEC_OFFLOAD
,

661 
	m__IFLA_MACSEC_MAX
,

664 
	#IFLA_MACSEC_MAX
 (
__IFLA_MACSEC_MAX
 - 1)

	)

668 
	mIFLA_XFRM_UNSPEC
,

669 
	mIFLA_XFRM_LINK
,

670 
	mIFLA_XFRM_IF_ID
,

671 
	m__IFLA_XFRM_MAX


674 
	#IFLA_XFRM_MAX
 (
__IFLA_XFRM_MAX
 - 1)

	)

676 
	emac£c_vÆid©i⁄_ty≥
 {

677 
	mMACSEC_VALIDATE_DISABLED
 = 0,

678 
	mMACSEC_VALIDATE_CHECK
 = 1,

679 
	mMACSEC_VALIDATE_STRICT
 = 2,

680 
	m__MACSEC_VALIDATE_END
,

681 
	mMACSEC_VALIDATE_MAX
 = 
__MACSEC_VALIDATE_END
 - 1,

684 
	emac£c_ofÊﬂd
 {

685 
	mMACSEC_OFFLOAD_OFF
 = 0,

686 
	mMACSEC_OFFLOAD_PHY
 = 1,

687 
	mMACSEC_OFFLOAD_MAC
 = 2,

688 
	m__MACSEC_OFFLOAD_END
,

689 
	mMACSEC_OFFLOAD_MAX
 = 
__MACSEC_OFFLOAD_END
 - 1,

694 
	mIFLA_IPVLAN_UNSPEC
,

695 
	mIFLA_IPVLAN_MODE
,

696 
	mIFLA_IPVLAN_FLAGS
,

697 
	m__IFLA_IPVLAN_MAX


700 
	#IFLA_IPVLAN_MAX
 (
__IFLA_IPVLAN_MAX
 - 1)

	)

702 
	eùvœn_mode
 {

703 
	mIPVLAN_MODE_L2
 = 0,

704 
	mIPVLAN_MODE_L3
,

705 
	mIPVLAN_MODE_L3S
,

706 
	mIPVLAN_MODE_MAX


709 
	#IPVLAN_F_PRIVATE
 0x01

	)

710 
	#IPVLAN_F_VEPA
 0x02

	)

714 
	mIFLA_VXLAN_UNSPEC
,

715 
	mIFLA_VXLAN_ID
,

716 
	mIFLA_VXLAN_GROUP
,

717 
	mIFLA_VXLAN_LINK
,

718 
	mIFLA_VXLAN_LOCAL
,

719 
	mIFLA_VXLAN_TTL
,

720 
	mIFLA_VXLAN_TOS
,

721 
	mIFLA_VXLAN_LEARNING
,

722 
	mIFLA_VXLAN_AGEING
,

723 
	mIFLA_VXLAN_LIMIT
,

724 
	mIFLA_VXLAN_PORT_RANGE
,

725 
	mIFLA_VXLAN_PROXY
,

726 
	mIFLA_VXLAN_RSC
,

727 
	mIFLA_VXLAN_L2MISS
,

728 
	mIFLA_VXLAN_L3MISS
,

729 
	mIFLA_VXLAN_PORT
,

730 
	mIFLA_VXLAN_GROUP6
,

731 
	mIFLA_VXLAN_LOCAL6
,

732 
	mIFLA_VXLAN_UDP_CSUM
,

733 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_TX
,

734 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_RX
,

735 
	mIFLA_VXLAN_REMCSUM_TX
,

736 
	mIFLA_VXLAN_REMCSUM_RX
,

737 
	mIFLA_VXLAN_GBP
,

738 
	mIFLA_VXLAN_REMCSUM_NOPARTIAL
,

739 
	mIFLA_VXLAN_COLLECT_METADATA
,

740 
	mIFLA_VXLAN_LABEL
,

741 
	mIFLA_VXLAN_GPE
,

742 
	mIFLA_VXLAN_TTL_INHERIT
,

743 
	mIFLA_VXLAN_DF
,

744 
	mIFLA_VXLAN_FAN_MAP
 = 33,

745 
	m__IFLA_VXLAN_MAX


747 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

749 
	siÊa_vxœn_p‹t_ønge
 {

750 
__be16
 
	mlow
;

751 
__be16
 
	mhigh
;

754 
	eiÊa_vxœn_df
 {

755 
	mVXLAN_DF_UNSET
 = 0,

756 
	mVXLAN_DF_SET
,

757 
	mVXLAN_DF_INHERIT
,

758 
	m__VXLAN_DF_END
,

759 
	mVXLAN_DF_MAX
 = 
__VXLAN_DF_END
 - 1,

764 
	mIFLA_GENEVE_UNSPEC
,

765 
	mIFLA_GENEVE_ID
,

766 
	mIFLA_GENEVE_REMOTE
,

767 
	mIFLA_GENEVE_TTL
,

768 
	mIFLA_GENEVE_TOS
,

769 
	mIFLA_GENEVE_PORT
,

770 
	mIFLA_GENEVE_COLLECT_METADATA
,

771 
	mIFLA_GENEVE_REMOTE6
,

772 
	mIFLA_GENEVE_UDP_CSUM
,

773 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_TX
,

774 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_RX
,

775 
	mIFLA_GENEVE_LABEL
,

776 
	mIFLA_GENEVE_TTL_INHERIT
,

777 
	mIFLA_GENEVE_DF
,

778 
	m__IFLA_GENEVE_MAX


780 
	#IFLA_GENEVE_MAX
 (
__IFLA_GENEVE_MAX
 - 1)

	)

782 
	eiÊa_gíeve_df
 {

783 
	mGENEVE_DF_UNSET
 = 0,

784 
	mGENEVE_DF_SET
,

785 
	mGENEVE_DF_INHERIT
,

786 
	m__GENEVE_DF_END
,

787 
	mGENEVE_DF_MAX
 = 
__GENEVE_DF_END
 - 1,

792 
	mIFLA_BAREUDP_UNSPEC
,

793 
	mIFLA_BAREUDP_PORT
,

794 
	mIFLA_BAREUDP_ETHERTYPE
,

795 
	mIFLA_BAREUDP_SRCPORT_MIN
,

796 
	mIFLA_BAREUDP_MULTIPROTO_MODE
,

797 
	m__IFLA_BAREUDP_MAX


800 
	#IFLA_BAREUDP_MAX
 (
__IFLA_BAREUDP_MAX
 - 1)

	)

804 
	mIFLA_PPP_UNSPEC
,

805 
	mIFLA_PPP_DEV_FD
,

806 
	m__IFLA_PPP_MAX


808 
	#IFLA_PPP_MAX
 (
__IFLA_PPP_MAX
 - 1)

	)

812 
	eiÊa_gç_rﬁe
 {

813 
	mGTP_ROLE_GGSN
 = 0,

814 
	mGTP_ROLE_SGSN
,

818 
	mIFLA_GTP_UNSPEC
,

819 
	mIFLA_GTP_FD0
,

820 
	mIFLA_GTP_FD1
,

821 
	mIFLA_GTP_PDP_HASHSIZE
,

822 
	mIFLA_GTP_ROLE
,

823 
	m__IFLA_GTP_MAX
,

825 
	#IFLA_GTP_MAX
 (
__IFLA_GTP_MAX
 - 1)

	)

830 
	mIFLA_BOND_UNSPEC
,

831 
	mIFLA_BOND_MODE
,

832 
	mIFLA_BOND_ACTIVE_SLAVE
,

833 
	mIFLA_BOND_MIIMON
,

834 
	mIFLA_BOND_UPDELAY
,

835 
	mIFLA_BOND_DOWNDELAY
,

836 
	mIFLA_BOND_USE_CARRIER
,

837 
	mIFLA_BOND_ARP_INTERVAL
,

838 
	mIFLA_BOND_ARP_IP_TARGET
,

839 
	mIFLA_BOND_ARP_VALIDATE
,

840 
	mIFLA_BOND_ARP_ALL_TARGETS
,

841 
	mIFLA_BOND_PRIMARY
,

842 
	mIFLA_BOND_PRIMARY_RESELECT
,

843 
	mIFLA_BOND_FAIL_OVER_MAC
,

844 
	mIFLA_BOND_XMIT_HASH_POLICY
,

845 
	mIFLA_BOND_RESEND_IGMP
,

846 
	mIFLA_BOND_NUM_PEER_NOTIF
,

847 
	mIFLA_BOND_ALL_SLAVES_ACTIVE
,

848 
	mIFLA_BOND_MIN_LINKS
,

849 
	mIFLA_BOND_LP_INTERVAL
,

850 
	mIFLA_BOND_PACKETS_PER_SLAVE
,

851 
	mIFLA_BOND_AD_LACP_RATE
,

852 
	mIFLA_BOND_AD_SELECT
,

853 
	mIFLA_BOND_AD_INFO
,

854 
	mIFLA_BOND_AD_ACTOR_SYS_PRIO
,

855 
	mIFLA_BOND_AD_USER_PORT_KEY
,

856 
	mIFLA_BOND_AD_ACTOR_SYSTEM
,

857 
	mIFLA_BOND_TLB_DYNAMIC_LB
,

858 
	mIFLA_BOND_PEER_NOTIF_DELAY
,

859 
	mIFLA_BOND_AD_LACP_ACTIVE
,

860 
	mIFLA_BOND_MISSED_MAX
,

861 
	m__IFLA_BOND_MAX
,

864 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

867 
	mIFLA_BOND_AD_INFO_UNSPEC
,

868 
	mIFLA_BOND_AD_INFO_AGGREGATOR
,

869 
	mIFLA_BOND_AD_INFO_NUM_PORTS
,

870 
	mIFLA_BOND_AD_INFO_ACTOR_KEY
,

871 
	mIFLA_BOND_AD_INFO_PARTNER_KEY
,

872 
	mIFLA_BOND_AD_INFO_PARTNER_MAC
,

873 
	m__IFLA_BOND_AD_INFO_MAX
,

876 
	#IFLA_BOND_AD_INFO_MAX
 (
__IFLA_BOND_AD_INFO_MAX
 - 1)

	)

879 
	mIFLA_BOND_SLAVE_UNSPEC
,

880 
	mIFLA_BOND_SLAVE_STATE
,

881 
	mIFLA_BOND_SLAVE_MII_STATUS
,

882 
	mIFLA_BOND_SLAVE_LINK_FAILURE_COUNT
,

883 
	mIFLA_BOND_SLAVE_PERM_HWADDR
,

884 
	mIFLA_BOND_SLAVE_QUEUE_ID
,

885 
	mIFLA_BOND_SLAVE_AD_AGGREGATOR_ID
,

886 
	mIFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
,

887 
	mIFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
,

888 
	m__IFLA_BOND_SLAVE_MAX
,

891 
	#IFLA_BOND_SLAVE_MAX
 (
__IFLA_BOND_SLAVE_MAX
 - 1)

	)

896 
	mIFLA_VF_INFO_UNSPEC
,

897 
	mIFLA_VF_INFO
,

898 
	m__IFLA_VF_INFO_MAX
,

901 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

904 
	mIFLA_VF_UNSPEC
,

905 
	mIFLA_VF_MAC
,

906 
	mIFLA_VF_VLAN
,

907 
	mIFLA_VF_TX_RATE
,

908 
	mIFLA_VF_SPOOFCHK
,

909 
	mIFLA_VF_LINK_STATE
,

910 
	mIFLA_VF_RATE
,

911 
	mIFLA_VF_RSS_QUERY_EN
,

914 
	mIFLA_VF_STATS
,

915 
	mIFLA_VF_TRUST
,

916 
	mIFLA_VF_IB_NODE_GUID
,

917 
	mIFLA_VF_IB_PORT_GUID
,

918 
	mIFLA_VF_VLAN_LIST
,

919 
	mIFLA_VF_BROADCAST
,

920 
	m__IFLA_VF_MAX
,

923 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

925 
	siÊa_vf_mac
 {

926 
__u32
 
	mvf
;

927 
__u8
 
	mmac
[32];

930 
	siÊa_vf_brﬂdˇ°
 {

931 
__u8
 
	mbrﬂdˇ°
[32];

934 
	siÊa_vf_vœn
 {

935 
__u32
 
	mvf
;

936 
__u32
 
	mvœn
;

937 
__u32
 
	mqos
;

941 
	mIFLA_VF_VLAN_INFO_UNSPEC
,

942 
	mIFLA_VF_VLAN_INFO
,

943 
	m__IFLA_VF_VLAN_INFO_MAX
,

946 
	#IFLA_VF_VLAN_INFO_MAX
 (
__IFLA_VF_VLAN_INFO_MAX
 - 1)

	)

947 
	#MAX_VLAN_LIST_LEN
 1

	)

949 
	siÊa_vf_vœn_öfo
 {

950 
__u32
 
	mvf
;

951 
__u32
 
	mvœn
;

952 
__u32
 
	mqos
;

953 
__be16
 
	mvœn_¥Ÿo
;

956 
	siÊa_vf_tx_øã
 {

957 
__u32
 
	mvf
;

958 
__u32
 
	møã
;

961 
	siÊa_vf_øã
 {

962 
__u32
 
	mvf
;

963 
__u32
 
	mmö_tx_øã
;

964 
__u32
 
	mmax_tx_øã
;

967 
	siÊa_vf_•oofchk
 {

968 
__u32
 
	mvf
;

969 
__u32
 
	m£âög
;

972 
	siÊa_vf_guid
 {

973 
__u32
 
	mvf
;

974 
__u64
 
	mguid
;

978 
	mIFLA_VF_LINK_STATE_AUTO
,

979 
	mIFLA_VF_LINK_STATE_ENABLE
,

980 
	mIFLA_VF_LINK_STATE_DISABLE
,

981 
	m__IFLA_VF_LINK_STATE_MAX
,

984 
	siÊa_vf_lök_°©e
 {

985 
__u32
 
	mvf
;

986 
__u32
 
	mlök_°©e
;

989 
	siÊa_vf_rss_quîy_í
 {

990 
__u32
 
	mvf
;

991 
__u32
 
	m£âög
;

995 
	mIFLA_VF_STATS_RX_PACKETS
,

996 
	mIFLA_VF_STATS_TX_PACKETS
,

997 
	mIFLA_VF_STATS_RX_BYTES
,

998 
	mIFLA_VF_STATS_TX_BYTES
,

999 
	mIFLA_VF_STATS_BROADCAST
,

1000 
	mIFLA_VF_STATS_MULTICAST
,

1001 
	mIFLA_VF_STATS_PAD
,

1002 
	mIFLA_VF_STATS_RX_DROPPED
,

1003 
	mIFLA_VF_STATS_TX_DROPPED
,

1004 
	m__IFLA_VF_STATS_MAX
,

1007 
	#IFLA_VF_STATS_MAX
 (
__IFLA_VF_STATS_MAX
 - 1)

	)

1009 
	siÊa_vf_åu°
 {

1010 
__u32
 
	mvf
;

1011 
__u32
 
	m£âög
;

1030 
	mIFLA_VF_PORT_UNSPEC
,

1031 
	mIFLA_VF_PORT
,

1032 
	m__IFLA_VF_PORT_MAX
,

1035 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

1038 
	mIFLA_PORT_UNSPEC
,

1039 
	mIFLA_PORT_VF
,

1040 
	mIFLA_PORT_PROFILE
,

1041 
	mIFLA_PORT_VSI_TYPE
,

1042 
	mIFLA_PORT_INSTANCE_UUID
,

1043 
	mIFLA_PORT_HOST_UUID
,

1044 
	mIFLA_PORT_REQUEST
,

1045 
	mIFLA_PORT_RESPONSE
,

1046 
	m__IFLA_PORT_MAX
,

1049 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

1051 
	#PORT_PROFILE_MAX
 40

	)

1052 
	#PORT_UUID_MAX
 16

	)

1053 
	#PORT_SELF_VF
 -1

	)

1056 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

1057 
	mPORT_REQUEST_PREASSOCIATE_RR
,

1058 
	mPORT_REQUEST_ASSOCIATE
,

1059 
	mPORT_REQUEST_DISASSOCIATE
,

1063 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

1064 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

1065 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

1066 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

1067 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

1068 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

1069 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

1071 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

1072 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

1073 
	mPORT_PROFILE_RESPONSE_INVALID
,

1074 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

1075 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

1076 
	mPORT_PROFILE_RESPONSE_ERROR
,

1079 
	siÊa_p‹t_vsi
 {

1080 
__u8
 
	mvsi_mgr_id
;

1081 
__u8
 
	mvsi_ty≥_id
[3];

1082 
__u8
 
	mvsi_ty≥_vîsi⁄
;

1083 
__u8
 
	m∑d
[3];

1090 
	mIFLA_IPOIB_UNSPEC
,

1091 
	mIFLA_IPOIB_PKEY
,

1092 
	mIFLA_IPOIB_MODE
,

1093 
	mIFLA_IPOIB_UMCAST
,

1094 
	m__IFLA_IPOIB_MAX


1098 
	mIPOIB_MODE_DATAGRAM
 = 0,

1099 
	mIPOIB_MODE_CONNECTED
 = 1,

1102 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

1109 
	mHSR_PROTOCOL_HSR
,

1110 
	mHSR_PROTOCOL_PRP
,

1111 
	mHSR_PROTOCOL_MAX
,

1115 
	mIFLA_HSR_UNSPEC
,

1116 
	mIFLA_HSR_SLAVE1
,

1117 
	mIFLA_HSR_SLAVE2
,

1118 
	mIFLA_HSR_MULTICAST_SPEC
,

1119 
	mIFLA_HSR_SUPERVISION_ADDR
,

1120 
	mIFLA_HSR_SEQ_NR
,

1121 
	mIFLA_HSR_VERSION
,

1122 
	mIFLA_HSR_PROTOCOL
,

1125 
	m__IFLA_HSR_MAX
,

1128 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

1132 
	sif_°©s_msg
 {

1133 
__u8
 
	mÁmûy
;

1134 
__u8
 
	m∑d1
;

1135 
__u16
 
	m∑d2
;

1136 
__u32
 
	mifödex
;

1137 
__u32
 
	mfûãr_mask
;

1144 
	mIFLA_STATS_UNSPEC
,

1145 
	mIFLA_STATS_LINK_64
,

1146 
	mIFLA_STATS_LINK_XSTATS
,

1147 
	mIFLA_STATS_LINK_XSTATS_SLAVE
,

1148 
	mIFLA_STATS_LINK_OFFLOAD_XSTATS
,

1149 
	mIFLA_STATS_AF_SPEC
,

1150 
	m__IFLA_STATS_MAX
,

1153 
	#IFLA_STATS_MAX
 (
__IFLA_STATS_MAX
 - 1)

	)

1155 
	#IFLA_STATS_FILTER_BIT
(
ATTR
Ë(1 << (ATTR - 1))

	)

1163 
	mLINK_XSTATS_TYPE_UNSPEC
,

1164 
	mLINK_XSTATS_TYPE_BRIDGE
,

1165 
	mLINK_XSTATS_TYPE_BOND
,

1166 
	m__LINK_XSTATS_TYPE_MAX


1168 
	#LINK_XSTATS_TYPE_MAX
 (
__LINK_XSTATS_TYPE_MAX
 - 1)

	)

1172 
	mIFLA_OFFLOAD_XSTATS_UNSPEC
,

1173 
	mIFLA_OFFLOAD_XSTATS_CPU_HIT
,

1174 
	m__IFLA_OFFLOAD_XSTATS_MAX


1176 
	#IFLA_OFFLOAD_XSTATS_MAX
 (
__IFLA_OFFLOAD_XSTATS_MAX
 - 1)

	)

1180 
	#XDP_FLAGS_UPDATE_IF_NOEXIST
 (1U << 0)

	)

1181 
	#XDP_FLAGS_SKB_MODE
 (1U << 1)

	)

1182 
	#XDP_FLAGS_DRV_MODE
 (1U << 2)

	)

1183 
	#XDP_FLAGS_HW_MODE
 (1U << 3)

	)

1184 
	#XDP_FLAGS_REPLACE
 (1U << 4)

	)

1185 
	#XDP_FLAGS_MODES
 (
XDP_FLAGS_SKB_MODE
 | \

1186 
XDP_FLAGS_DRV_MODE
 | \

1187 
XDP_FLAGS_HW_MODE
)

	)

1188 
	#XDP_FLAGS_MASK
 (
XDP_FLAGS_UPDATE_IF_NOEXIST
 | \

1189 
XDP_FLAGS_MODES
 | 
XDP_FLAGS_REPLACE
)

	)

1193 
	mXDP_ATTACHED_NONE
 = 0,

1194 
	mXDP_ATTACHED_DRV
,

1195 
	mXDP_ATTACHED_SKB
,

1196 
	mXDP_ATTACHED_HW
,

1197 
	mXDP_ATTACHED_MULTI
,

1201 
	mIFLA_XDP_UNSPEC
,

1202 
	mIFLA_XDP_FD
,

1203 
	mIFLA_XDP_ATTACHED
,

1204 
	mIFLA_XDP_FLAGS
,

1205 
	mIFLA_XDP_PROG_ID
,

1206 
	mIFLA_XDP_DRV_PROG_ID
,

1207 
	mIFLA_XDP_SKB_PROG_ID
,

1208 
	mIFLA_XDP_HW_PROG_ID
,

1209 
	mIFLA_XDP_EXPECTED_FD
,

1210 
	m__IFLA_XDP_MAX
,

1213 
	#IFLA_XDP_MAX
 (
__IFLA_XDP_MAX
 - 1)

	)

1216 
	mIFLA_EVENT_NONE
,

1217 
	mIFLA_EVENT_REBOOT
,

1218 
	mIFLA_EVENT_FEATURES
,

1219 
	mIFLA_EVENT_BONDING_FAILOVER
,

1220 
	mIFLA_EVENT_NOTIFY_PEERS
,

1221 
	mIFLA_EVENT_IGMP_RESEND
,

1222 
	mIFLA_EVENT_BONDING_OPTIONS
,

1228 
	mIFLA_TUN_UNSPEC
,

1229 
	mIFLA_TUN_OWNER
,

1230 
	mIFLA_TUN_GROUP
,

1231 
	mIFLA_TUN_TYPE
,

1232 
	mIFLA_TUN_PI
,

1233 
	mIFLA_TUN_VNET_HDR
,

1234 
	mIFLA_TUN_PERSIST
,

1235 
	mIFLA_TUN_MULTI_QUEUE
,

1236 
	mIFLA_TUN_NUM_QUEUES
,

1237 
	mIFLA_TUN_NUM_DISABLED_QUEUES
,

1238 
	m__IFLA_TUN_MAX
,

1241 
	#IFLA_TUN_MAX
 (
__IFLA_TUN_MAX
 - 1)

	)

1245 
	#RMNET_FLAGS_INGRESS_DEAGGREGATION
 (1U << 0)

	)

1246 
	#RMNET_FLAGS_INGRESS_MAP_COMMANDS
 (1U << 1)

	)

1247 
	#RMNET_FLAGS_INGRESS_MAP_CKSUMV4
 (1U << 2)

	)

1248 
	#RMNET_FLAGS_EGRESS_MAP_CKSUMV4
 (1U << 3)

	)

1249 
	#RMNET_FLAGS_INGRESS_MAP_CKSUMV5
 (1U << 4)

	)

1250 
	#RMNET_FLAGS_EGRESS_MAP_CKSUMV5
 (1U << 5)

	)

1253 
	mIFLA_RMNET_UNSPEC
,

1254 
	mIFLA_RMNET_MUX_ID
,

1255 
	mIFLA_RMNET_FLAGS
,

1256 
	m__IFLA_RMNET_MAX
,

1259 
	#IFLA_RMNET_MAX
 (
__IFLA_RMNET_MAX
 - 1)

	)

1261 
	siÊa_rm√t_Êags
 {

1262 
__u32
 
	mÊags
;

1263 
__u32
 
	mmask
;

1269 
	mIFLA_MCTP_UNSPEC
,

1270 
	mIFLA_MCTP_NET
,

1271 
	m__IFLA_MCTP_MAX
,

1274 
	#IFLA_MCTP_MAX
 (
__IFLA_MCTP_MAX
 - 1)

	)

	@/usr/include/linux/if_packet.h

2 #i‚de‡
__LINUX_IF_PACKET_H


3 
	#__LINUX_IF_PACKET_H


	)

5 
	~<asm/byã‹dî.h
>

6 
	~<löux/ty≥s.h
>

8 
	ssockaddr_pkt
 {

9 
	m•kt_Ámûy
;

10 
	m•kt_devi˚
[14];

11 
__be16
 
	m•kt_¥Ÿocﬁ
;

14 
	ssockaddr_Œ
 {

15 
	m¶l_Ámûy
;

16 
__be16
 
	m¶l_¥Ÿocﬁ
;

17 
	m¶l_ifödex
;

18 
	m¶l_h©y≥
;

19 
	m¶l_pkây≥
;

20 
	m¶l_hÆí
;

21 
	m¶l_addr
[8];

26 
	#PACKET_HOST
 0

	)

27 
	#PACKET_BROADCAST
 1

	)

28 
	#PACKET_MULTICAST
 2

	)

29 
	#PACKET_OTHERHOST
 3

	)

30 
	#PACKET_OUTGOING
 4

	)

31 
	#PACKET_LOOPBACK
 5

	)

32 
	#PACKET_USER
 6

	)

33 
	#PACKET_KERNEL
 7

	)

35 
	#PACKET_FASTROUTE
 6

	)

39 
	#PACKET_ADD_MEMBERSHIP
 1

	)

40 
	#PACKET_DROP_MEMBERSHIP
 2

	)

41 
	#PACKET_RECV_OUTPUT
 3

	)

43 
	#PACKET_RX_RING
 5

	)

44 
	#PACKET_STATISTICS
 6

	)

45 
	#PACKET_COPY_THRESH
 7

	)

46 
	#PACKET_AUXDATA
 8

	)

47 
	#PACKET_ORIGDEV
 9

	)

48 
	#PACKET_VERSION
 10

	)

49 
	#PACKET_HDRLEN
 11

	)

50 
	#PACKET_RESERVE
 12

	)

51 
	#PACKET_TX_RING
 13

	)

52 
	#PACKET_LOSS
 14

	)

53 
	#PACKET_VNET_HDR
 15

	)

54 
	#PACKET_TX_TIMESTAMP
 16

	)

55 
	#PACKET_TIMESTAMP
 17

	)

56 
	#PACKET_FANOUT
 18

	)

57 
	#PACKET_TX_HAS_OFF
 19

	)

58 
	#PACKET_QDISC_BYPASS
 20

	)

59 
	#PACKET_ROLLOVER_STATS
 21

	)

60 
	#PACKET_FANOUT_DATA
 22

	)

61 
	#PACKET_IGNORE_OUTGOING
 23

	)

63 
	#PACKET_FANOUT_HASH
 0

	)

64 
	#PACKET_FANOUT_LB
 1

	)

65 
	#PACKET_FANOUT_CPU
 2

	)

66 
	#PACKET_FANOUT_ROLLOVER
 3

	)

67 
	#PACKET_FANOUT_RND
 4

	)

68 
	#PACKET_FANOUT_QM
 5

	)

69 
	#PACKET_FANOUT_CBPF
 6

	)

70 
	#PACKET_FANOUT_EBPF
 7

	)

71 
	#PACKET_FANOUT_FLAG_ROLLOVER
 0x1000

	)

72 
	#PACKET_FANOUT_FLAG_UNIQUEID
 0x2000

	)

73 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

75 
	sçackë_°©s
 {

76 
	mç_∑ckës
;

77 
	mç_dr›s
;

80 
	sçackë_°©s_v3
 {

81 
	mç_∑ckës
;

82 
	mç_dr›s
;

83 
	mç_‰ìze_q_˙t
;

86 
	sçackë_rﬁlovî_°©s
 {

87 
__Æig√d_u64
 
	mç_Æl
;

88 
__Æig√d_u64
 
	mç_huge
;

89 
__Æig√d_u64
 
	mç_Áûed
;

92 
	uçackë_°©s_u
 {

93 
çackë_°©s
 
	m°©s1
;

94 
çackë_°©s_v3
 
	m°©s3
;

97 
	sçackë_auxd©a
 {

98 
__u32
 
	mç_°©us
;

99 
__u32
 
	mç_Àn
;

100 
__u32
 
	mç_¢≠Àn
;

101 
__u16
 
	mç_mac
;

102 
__u16
 
	mç_√t
;

103 
__u16
 
	mç_vœn_tci
;

104 
__u16
 
	mç_vœn_çid
;

108 
	#TP_STATUS_KERNEL
 0

	)

109 
	#TP_STATUS_USER
 (1 << 0)

	)

110 
	#TP_STATUS_COPY
 (1 << 1)

	)

111 
	#TP_STATUS_LOSING
 (1 << 2)

	)

112 
	#TP_STATUS_CSUMNOTREADY
 (1 << 3)

	)

113 
	#TP_STATUS_VLAN_VALID
 (1 << 4Ë

	)

114 
	#TP_STATUS_BLK_TMO
 (1 << 5)

	)

115 
	#TP_STATUS_VLAN_TPID_VALID
 (1 << 6Ë

	)

116 
	#TP_STATUS_CSUM_VALID
 (1 << 7)

	)

119 
	#TP_STATUS_AVAILABLE
 0

	)

120 
	#TP_STATUS_SEND_REQUEST
 (1 << 0)

	)

121 
	#TP_STATUS_SENDING
 (1 << 1)

	)

122 
	#TP_STATUS_WRONG_FORMAT
 (1 << 2)

	)

125 
	#TP_STATUS_TS_SOFTWARE
 (1 << 29)

	)

126 
	#TP_STATUS_TS_SYS_HARDWARE
 (1 << 30Ë

	)

127 
	#TP_STATUS_TS_RAW_HARDWARE
 (1U << 31)

	)

130 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

132 
	sçackë_hdr
 {

133 
	mç_°©us
;

134 
	mç_Àn
;

135 
	mç_¢≠Àn
;

136 
	mç_mac
;

137 
	mç_√t
;

138 
	mç_£c
;

139 
	mç_u£c
;

142 
	#TPACKET_ALIGNMENT
 16

	)

143 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

144 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

146 
	sçackë2_hdr
 {

147 
__u32
 
	mç_°©us
;

148 
__u32
 
	mç_Àn
;

149 
__u32
 
	mç_¢≠Àn
;

150 
__u16
 
	mç_mac
;

151 
__u16
 
	mç_√t
;

152 
__u32
 
	mç_£c
;

153 
__u32
 
	mç_n£c
;

154 
__u16
 
	mç_vœn_tci
;

155 
__u16
 
	mç_vœn_çid
;

156 
__u8
 
	mç_∑ddög
[4];

159 
	sçackë_hdr_v¨ü¡1
 {

160 
__u32
 
	mç_rxhash
;

161 
__u32
 
	mç_vœn_tci
;

162 
__u16
 
	mç_vœn_çid
;

163 
__u16
 
	mç_∑ddög
;

166 
	sçackë3_hdr
 {

167 
__u32
 
	mç_√xt_off£t
;

168 
__u32
 
	mç_£c
;

169 
__u32
 
	mç_n£c
;

170 
__u32
 
	mç_¢≠Àn
;

171 
__u32
 
	mç_Àn
;

172 
__u32
 
	mç_°©us
;

173 
__u16
 
	mç_mac
;

174 
__u16
 
	mç_√t
;

177 
çackë_hdr_v¨ü¡1
 
	mhv1
;

179 
__u8
 
	mç_∑ddög
[8];

182 
	sçackë_bd_ts
 {

183 
	mts_£c
;

185 
	mts_u£c
;

186 
	mts_n£c
;

190 
	sçackë_hdr_v1
 {

191 
__u32
 
	mblock_°©us
;

192 
__u32
 
	mnum_pkts
;

193 
__u32
 
	moff£t_to_fú°_pkt
;

198 
__u32
 
	mblk_Àn
;

209 
__Æig√d_u64
 
	m£q_num
;

236 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

239 
	uçackë_bd_hódî_u
 {

240 
çackë_hdr_v1
 
	mbh1
;

243 
	sçackë_block_desc
 {

244 
__u32
 
	mvîsi⁄
;

245 
__u32
 
	moff£t_to_¥iv
;

246 
çackë_bd_hódî_u
 
	mhdr
;

249 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

250 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

252 
	eçackë_vîsi⁄s
 {

253 
	mTPACKET_V1
,

254 
	mTPACKET_V2
,

255 
	mTPACKET_V3


271 
	sçackë_ªq
 {

272 
	mç_block_size
;

273 
	mç_block_ƒ
;

274 
	mç_‰ame_size
;

275 
	mç_‰ame_ƒ
;

278 
	sçackë_ªq3
 {

279 
	mç_block_size
;

280 
	mç_block_ƒ
;

281 
	mç_‰ame_size
;

282 
	mç_‰ame_ƒ
;

283 
	mç_ªtúe_blk_tov
;

284 
	mç_sizeof_¥iv
;

285 
	mç_„©uª_ªq_w‹d
;

288 
	uçackë_ªq_u
 {

289 
çackë_ªq
 
	mªq
;

290 
çackë_ªq3
 
	mªq3
;

293 
	s∑ckë_mªq
 {

294 
	mmr_ifödex
;

295 
	mmr_ty≥
;

296 
	mmr_Æí
;

297 
	mmr_addªss
[8];

300 
	sÁnout_¨gs
 {

301 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

302 
__u16
 
	mid
;

303 
__u16
 
	mty≥_Êags
;

305 
__u16
 
	mty≥_Êags
;

306 
__u16
 
	mid
;

308 
__u32
 
	mmax_num_membîs
;

311 
	#PACKET_MR_MULTICAST
 0

	)

312 
	#PACKET_MR_PROMISC
 1

	)

313 
	#PACKET_MR_ALLMULTI
 2

	)

314 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/if_xdp.h

10 #i‚de‡
_LINUX_IF_XDP_H


11 
	#_LINUX_IF_XDP_H


	)

13 
	~<löux/ty≥s.h
>

16 
	#XDP_SHARED_UMEM
 (1 << 0)

	)

17 
	#XDP_COPY
 (1 << 1Ë

	)

18 
	#XDP_ZEROCOPY
 (1 << 2Ë

	)

27 
	#XDP_USE_NEED_WAKEUP
 (1 << 3)

	)

30 
	#XDP_UMEM_UNALIGNED_CHUNK_FLAG
 (1 << 0)

	)

32 
	ssockaddr_xdp
 {

33 
__u16
 
	msxdp_Ámûy
;

34 
__u16
 
	msxdp_Êags
;

35 
__u32
 
	msxdp_ifödex
;

36 
__u32
 
	msxdp_queue_id
;

37 
__u32
 
	msxdp_sh¨ed_umem_fd
;

41 
	#XDP_RING_NEED_WAKEUP
 (1 << 0)

	)

43 
	sxdp_rög_off£t
 {

44 
__u64
 
	m¥odu˚r
;

45 
__u64
 
	mc⁄sumî
;

46 
__u64
 
	mdesc
;

47 
__u64
 
	mÊags
;

50 
	sxdp_mm≠_off£ts
 {

51 
xdp_rög_off£t
 
	mrx
;

52 
xdp_rög_off£t
 
	mtx
;

53 
xdp_rög_off£t
 
	m‰
;

54 
xdp_rög_off£t
 
	m¸
;

58 
	#XDP_MMAP_OFFSETS
 1

	)

59 
	#XDP_RX_RING
 2

	)

60 
	#XDP_TX_RING
 3

	)

61 
	#XDP_UMEM_REG
 4

	)

62 
	#XDP_UMEM_FILL_RING
 5

	)

63 
	#XDP_UMEM_COMPLETION_RING
 6

	)

64 
	#XDP_STATISTICS
 7

	)

65 
	#XDP_OPTIONS
 8

	)

67 
	sxdp_umem_ªg
 {

68 
__u64
 
	maddr
;

69 
__u64
 
	mÀn
;

70 
__u32
 
	mchunk_size
;

71 
__u32
 
	mhódroom
;

72 
__u32
 
	mÊags
;

75 
	sxdp_°©i°ics
 {

76 
__u64
 
	mrx_dr›≥d
;

77 
__u64
 
	mrx_övÆid_descs
;

78 
__u64
 
	mtx_övÆid_descs
;

79 
__u64
 
	mrx_rög_fuŒ
;

80 
__u64
 
	mrx_fûl_rög_em±y_descs
;

81 
__u64
 
	mtx_rög_em±y_descs
;

84 
	sxdp_›ti⁄s
 {

85 
__u32
 
	mÊags
;

89 
	#XDP_OPTIONS_ZEROCOPY
 (1 << 0)

	)

92 
	#XDP_PGOFF_RX_RING
 0

	)

93 
	#XDP_PGOFF_TX_RING
 0x80000000

	)

94 
	#XDP_UMEM_PGOFF_FILL_RING
 0x100000000ULL

	)

95 
	#XDP_UMEM_PGOFF_COMPLETION_RING
 0x180000000ULL

	)

98 
	#XSK_UNALIGNED_BUF_OFFSET_SHIFT
 48

	)

99 
	#XSK_UNALIGNED_BUF_ADDR_MASK
 \

100 ((1ULL << 
XSK_UNALIGNED_BUF_OFFSET_SHIFT
Ë- 1)

	)

103 
	sxdp_desc
 {

104 
__u64
 
	maddr
;

105 
__u32
 
	mÀn
;

106 
__u32
 
	m›ti⁄s
;

	@/usr/include/linux/kernel.h

2 #i‚de‡
_LINUX_KERNEL_H


3 
	#_LINUX_KERNEL_H


	)

5 
	~<löux/sysöfo.h
>

6 
	~<löux/c⁄°.h
>

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/mman.h

2 #i‚de‡
_LINUX_MMAN_H


3 
	#_LINUX_MMAN_H


	)

5 
	~<asm/mm™.h
>

6 
	~<asm-gíîic/hugëlb_ícode.h
>

8 
	#MREMAP_MAYMOVE
 1

	)

9 
	#MREMAP_FIXED
 2

	)

10 
	#MREMAP_DONTUNMAP
 4

	)

12 
	#OVERCOMMIT_GUESS
 0

	)

13 
	#OVERCOMMIT_ALWAYS
 1

	)

14 
	#OVERCOMMIT_NEVER
 2

	)

16 
	#MAP_SHARED
 0x01

	)

17 
	#MAP_PRIVATE
 0x02

	)

18 
	#MAP_SHARED_VALIDATE
 0x03

	)

27 
	#MAP_HUGE_SHIFT
 
HUGETLB_FLAG_ENCODE_SHIFT


	)

28 
	#MAP_HUGE_MASK
 
HUGETLB_FLAG_ENCODE_MASK


	)

30 
	#MAP_HUGE_16KB
 
HUGETLB_FLAG_ENCODE_16KB


	)

31 
	#MAP_HUGE_64KB
 
HUGETLB_FLAG_ENCODE_64KB


	)

32 
	#MAP_HUGE_512KB
 
HUGETLB_FLAG_ENCODE_512KB


	)

33 
	#MAP_HUGE_1MB
 
HUGETLB_FLAG_ENCODE_1MB


	)

34 
	#MAP_HUGE_2MB
 
HUGETLB_FLAG_ENCODE_2MB


	)

35 
	#MAP_HUGE_8MB
 
HUGETLB_FLAG_ENCODE_8MB


	)

36 
	#MAP_HUGE_16MB
 
HUGETLB_FLAG_ENCODE_16MB


	)

37 
	#MAP_HUGE_32MB
 
HUGETLB_FLAG_ENCODE_32MB


	)

38 
	#MAP_HUGE_256MB
 
HUGETLB_FLAG_ENCODE_256MB


	)

39 
	#MAP_HUGE_512MB
 
HUGETLB_FLAG_ENCODE_512MB


	)

40 
	#MAP_HUGE_1GB
 
HUGETLB_FLAG_ENCODE_1GB


	)

41 
	#MAP_HUGE_2GB
 
HUGETLB_FLAG_ENCODE_2GB


	)

42 
	#MAP_HUGE_16GB
 
HUGETLB_FLAG_ENCODE_16GB


	)

	@/usr/include/linux/netlink.h

2 #i‚de‡
__LINUX_NETLINK_H


3 
	#__LINUX_NETLINK_H


	)

5 
	~<löux/c⁄°.h
>

6 
	~<löux/sockë.h
>

7 
	~<löux/ty≥s.h
>

9 
	#NETLINK_ROUTE
 0

	)

10 
	#NETLINK_UNUSED
 1

	)

11 
	#NETLINK_USERSOCK
 2

	)

12 
	#NETLINK_FIREWALL
 3

	)

13 
	#NETLINK_SOCK_DIAG
 4

	)

14 
	#NETLINK_NFLOG
 5

	)

15 
	#NETLINK_XFRM
 6

	)

16 
	#NETLINK_SELINUX
 7

	)

17 
	#NETLINK_ISCSI
 8

	)

18 
	#NETLINK_AUDIT
 9

	)

19 
	#NETLINK_FIB_LOOKUP
 10

	)

20 
	#NETLINK_CONNECTOR
 11

	)

21 
	#NETLINK_NETFILTER
 12

	)

22 
	#NETLINK_IP6_FW
 13

	)

23 
	#NETLINK_DNRTMSG
 14

	)

24 
	#NETLINK_KOBJECT_UEVENT
 15

	)

25 
	#NETLINK_GENERIC
 16

	)

27 
	#NETLINK_SCSITRANSPORT
 18

	)

28 
	#NETLINK_ECRYPTFS
 19

	)

29 
	#NETLINK_RDMA
 20

	)

30 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_SMC
 22

	)

33 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

35 
	#MAX_LINKS
 32

	)

37 
	ssockaddr_∆
 {

38 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

39 
	m∆_∑d
;

40 
__u32
 
	m∆_pid
;

41 
__u32
 
	m∆_groups
;

44 
	s∆msghdr
 {

45 
__u32
 
	m∆msg_Àn
;

46 
__u16
 
	m∆msg_ty≥
;

47 
__u16
 
	m∆msg_Êags
;

48 
__u32
 
	m∆msg_£q
;

49 
__u32
 
	m∆msg_pid
;

54 
	#NLM_F_REQUEST
 0x01

	)

55 
	#NLM_F_MULTI
 0x02

	)

56 
	#NLM_F_ACK
 0x04

	)

57 
	#NLM_F_ECHO
 0x08

	)

58 
	#NLM_F_DUMP_INTR
 0x10

	)

59 
	#NLM_F_DUMP_FILTERED
 0x20

	)

62 
	#NLM_F_ROOT
 0x100

	)

63 
	#NLM_F_MATCH
 0x200

	)

64 
	#NLM_F_ATOMIC
 0x400

	)

65 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

68 
	#NLM_F_REPLACE
 0x100

	)

69 
	#NLM_F_EXCL
 0x200

	)

70 
	#NLM_F_CREATE
 0x400

	)

71 
	#NLM_F_APPEND
 0x800

	)

74 
	#NLM_F_NONREC
 0x100

	)

77 
	#NLM_F_CAPPED
 0x100

	)

78 
	#NLM_F_ACK_TLVS
 0x200

	)

89 
	#NLMSG_ALIGNTO
 4U

	)

90 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

91 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

92 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

93 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

94 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
NLMSG_HDRLEN
))

	)

95 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

96 (
∆msghdr
 *)(((*)(
∆h
)) + \

97 
	`NLMSG_ALIGN
((
∆h
)->
∆msg_Àn
)))

	)

98 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

99 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

100 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

101 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

103 
	#NLMSG_NOOP
 0x1

	)

104 
	#NLMSG_ERROR
 0x2

	)

105 
	#NLMSG_DONE
 0x3

	)

106 
	#NLMSG_OVERRUN
 0x4

	)

108 
	#NLMSG_MIN_TYPE
 0x10

	)

110 
	s∆msgîr
 {

111 
	mîr‹
;

112 
∆msghdr
 
	mmsg
;

137 
	e∆msgîr_©ås
 {

138 
	mNLMSGERR_ATTR_UNUSED
,

139 
	mNLMSGERR_ATTR_MSG
,

140 
	mNLMSGERR_ATTR_OFFS
,

141 
	mNLMSGERR_ATTR_COOKIE
,

142 
	mNLMSGERR_ATTR_POLICY
,

144 
	m__NLMSGERR_ATTR_MAX
,

145 
	mNLMSGERR_ATTR_MAX
 = 
__NLMSGERR_ATTR_MAX
 - 1

148 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

149 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

150 
	#NETLINK_PKTINFO
 3

	)

151 
	#NETLINK_BROADCAST_ERROR
 4

	)

152 
	#NETLINK_NO_ENOBUFS
 5

	)

153 
	#NETLINK_RX_RING
 6

	)

154 
	#NETLINK_TX_RING
 7

	)

155 
	#NETLINK_LISTEN_ALL_NSID
 8

	)

156 
	#NETLINK_LIST_MEMBERSHIPS
 9

	)

157 
	#NETLINK_CAP_ACK
 10

	)

158 
	#NETLINK_EXT_ACK
 11

	)

159 
	#NETLINK_GET_STRICT_CHK
 12

	)

161 
	s∆_pktöfo
 {

162 
__u32
 
	mgroup
;

165 
	s∆_mm≠_ªq
 {

166 
	mnm_block_size
;

167 
	mnm_block_ƒ
;

168 
	mnm_‰ame_size
;

169 
	mnm_‰ame_ƒ
;

172 
	s∆_mm≠_hdr
 {

173 
	mnm_°©us
;

174 
	mnm_Àn
;

175 
__u32
 
	mnm_group
;

177 
__u32
 
	mnm_pid
;

178 
__u32
 
	mnm_uid
;

179 
__u32
 
	mnm_gid
;

182 
	e∆_mm≠_°©us
 {

183 
	mNL_MMAP_STATUS_UNUSED
,

184 
	mNL_MMAP_STATUS_RESERVED
,

185 
	mNL_MMAP_STATUS_VALID
,

186 
	mNL_MMAP_STATUS_COPY
,

187 
	mNL_MMAP_STATUS_SKIP
,

190 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

191 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

192 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

194 
	#NET_MAJOR
 36

	)

197 
	mNETLINK_UNCONNECTED
 = 0,

198 
	mNETLINK_CONNECTED
,

210 
	s∆©å
 {

211 
__u16
 
	m∆a_Àn
;

212 
__u16
 
	m∆a_ty≥
;

225 
	#NLA_F_NESTED
 (1 << 15)

	)

226 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

227 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

229 
	#NLA_ALIGNTO
 4

	)

230 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

231 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

246 
	s∆a_bôfõld32
 {

247 
__u32
 
	mvÆue
;

248 
__u32
 
	m£À˘‹
;

283 
	e√éök_©åibuã_ty≥
 {

284 
	mNL_ATTR_TYPE_INVALID
,

286 
	mNL_ATTR_TYPE_FLAG
,

288 
	mNL_ATTR_TYPE_U8
,

289 
	mNL_ATTR_TYPE_U16
,

290 
	mNL_ATTR_TYPE_U32
,

291 
	mNL_ATTR_TYPE_U64
,

293 
	mNL_ATTR_TYPE_S8
,

294 
	mNL_ATTR_TYPE_S16
,

295 
	mNL_ATTR_TYPE_S32
,

296 
	mNL_ATTR_TYPE_S64
,

298 
	mNL_ATTR_TYPE_BINARY
,

299 
	mNL_ATTR_TYPE_STRING
,

300 
	mNL_ATTR_TYPE_NUL_STRING
,

302 
	mNL_ATTR_TYPE_NESTED
,

303 
	mNL_ATTR_TYPE_NESTED_ARRAY
,

305 
	mNL_ATTR_TYPE_BITFIELD32
,

336 
	e√éök_pﬁicy_ty≥_©å
 {

337 
	mNL_POLICY_TYPE_ATTR_UNSPEC
,

338 
	mNL_POLICY_TYPE_ATTR_TYPE
,

339 
	mNL_POLICY_TYPE_ATTR_MIN_VALUE_S
,

340 
	mNL_POLICY_TYPE_ATTR_MAX_VALUE_S
,

341 
	mNL_POLICY_TYPE_ATTR_MIN_VALUE_U
,

342 
	mNL_POLICY_TYPE_ATTR_MAX_VALUE_U
,

343 
	mNL_POLICY_TYPE_ATTR_MIN_LENGTH
,

344 
	mNL_POLICY_TYPE_ATTR_MAX_LENGTH
,

345 
	mNL_POLICY_TYPE_ATTR_POLICY_IDX
,

346 
	mNL_POLICY_TYPE_ATTR_POLICY_MAXTYPE
,

347 
	mNL_POLICY_TYPE_ATTR_BITFIELD32_MASK
,

348 
	mNL_POLICY_TYPE_ATTR_PAD
,

349 
	mNL_POLICY_TYPE_ATTR_MASK
,

352 
	m__NL_POLICY_TYPE_ATTR_MAX
,

353 
	mNL_POLICY_TYPE_ATTR_MAX
 = 
__NL_POLICY_TYPE_ATTR_MAX
 - 1

	@/usr/include/linux/perf_event.h

15 #i‚de‡
_LINUX_PERF_EVENT_H


16 
	#_LINUX_PERF_EVENT_H


	)

18 
	~<löux/ty≥s.h
>

19 
	~<löux/io˘l.h
>

20 
	~<asm/byã‹dî.h
>

29 
	e≥rf_ty≥_id
 {

30 
	mPERF_TYPE_HARDWARE
 = 0,

31 
	mPERF_TYPE_SOFTWARE
 = 1,

32 
	mPERF_TYPE_TRACEPOINT
 = 2,

33 
	mPERF_TYPE_HW_CACHE
 = 3,

34 
	mPERF_TYPE_RAW
 = 4,

35 
	mPERF_TYPE_BREAKPOINT
 = 5,

37 
	mPERF_TYPE_MAX
,

52 
	#PERF_PMU_TYPE_SHIFT
 32

	)

53 
	#PERF_HW_EVENT_MASK
 0xffffffff

	)

60 
	e≥rf_hw_id
 {

64 
	mPERF_COUNT_HW_CPU_CYCLES
 = 0,

65 
	mPERF_COUNT_HW_INSTRUCTIONS
 = 1,

66 
	mPERF_COUNT_HW_CACHE_REFERENCES
 = 2,

67 
	mPERF_COUNT_HW_CACHE_MISSES
 = 3,

68 
	mPERF_COUNT_HW_BRANCH_INSTRUCTIONS
 = 4,

69 
	mPERF_COUNT_HW_BRANCH_MISSES
 = 5,

70 
	mPERF_COUNT_HW_BUS_CYCLES
 = 6,

71 
	mPERF_COUNT_HW_STALLED_CYCLES_FRONTEND
 = 7,

72 
	mPERF_COUNT_HW_STALLED_CYCLES_BACKEND
 = 8,

73 
	mPERF_COUNT_HW_REF_CPU_CYCLES
 = 9,

75 
	mPERF_COUNT_HW_MAX
,

85 
	e≥rf_hw_ˇche_id
 {

86 
	mPERF_COUNT_HW_CACHE_L1D
 = 0,

87 
	mPERF_COUNT_HW_CACHE_L1I
 = 1,

88 
	mPERF_COUNT_HW_CACHE_LL
 = 2,

89 
	mPERF_COUNT_HW_CACHE_DTLB
 = 3,

90 
	mPERF_COUNT_HW_CACHE_ITLB
 = 4,

91 
	mPERF_COUNT_HW_CACHE_BPU
 = 5,

92 
	mPERF_COUNT_HW_CACHE_NODE
 = 6,

94 
	mPERF_COUNT_HW_CACHE_MAX
,

97 
	e≥rf_hw_ˇche_›_id
 {

98 
	mPERF_COUNT_HW_CACHE_OP_READ
 = 0,

99 
	mPERF_COUNT_HW_CACHE_OP_WRITE
 = 1,

100 
	mPERF_COUNT_HW_CACHE_OP_PREFETCH
 = 2,

102 
	mPERF_COUNT_HW_CACHE_OP_MAX
,

105 
	e≥rf_hw_ˇche_›_ªsu…_id
 {

106 
	mPERF_COUNT_HW_CACHE_RESULT_ACCESS
 = 0,

107 
	mPERF_COUNT_HW_CACHE_RESULT_MISS
 = 1,

109 
	mPERF_COUNT_HW_CACHE_RESULT_MAX
,

118 
	e≥rf_sw_ids
 {

119 
	mPERF_COUNT_SW_CPU_CLOCK
 = 0,

120 
	mPERF_COUNT_SW_TASK_CLOCK
 = 1,

121 
	mPERF_COUNT_SW_PAGE_FAULTS
 = 2,

122 
	mPERF_COUNT_SW_CONTEXT_SWITCHES
 = 3,

123 
	mPERF_COUNT_SW_CPU_MIGRATIONS
 = 4,

124 
	mPERF_COUNT_SW_PAGE_FAULTS_MIN
 = 5,

125 
	mPERF_COUNT_SW_PAGE_FAULTS_MAJ
 = 6,

126 
	mPERF_COUNT_SW_ALIGNMENT_FAULTS
 = 7,

127 
	mPERF_COUNT_SW_EMULATION_FAULTS
 = 8,

128 
	mPERF_COUNT_SW_DUMMY
 = 9,

129 
	mPERF_COUNT_SW_BPF_OUTPUT
 = 10,

130 
	mPERF_COUNT_SW_CGROUP_SWITCHES
 = 11,

132 
	mPERF_COUNT_SW_MAX
,

139 
	e≥rf_evít_ßm∂e_f‹m©
 {

140 
	mPERF_SAMPLE_IP
 = 1U << 0,

141 
	mPERF_SAMPLE_TID
 = 1U << 1,

142 
	mPERF_SAMPLE_TIME
 = 1U << 2,

143 
	mPERF_SAMPLE_ADDR
 = 1U << 3,

144 
	mPERF_SAMPLE_READ
 = 1U << 4,

145 
	mPERF_SAMPLE_CALLCHAIN
 = 1U << 5,

146 
	mPERF_SAMPLE_ID
 = 1U << 6,

147 
	mPERF_SAMPLE_CPU
 = 1U << 7,

148 
	mPERF_SAMPLE_PERIOD
 = 1U << 8,

149 
	mPERF_SAMPLE_STREAM_ID
 = 1U << 9,

150 
	mPERF_SAMPLE_RAW
 = 1U << 10,

151 
	mPERF_SAMPLE_BRANCH_STACK
 = 1U << 11,

152 
	mPERF_SAMPLE_REGS_USER
 = 1U << 12,

153 
	mPERF_SAMPLE_STACK_USER
 = 1U << 13,

154 
	mPERF_SAMPLE_WEIGHT
 = 1U << 14,

155 
	mPERF_SAMPLE_DATA_SRC
 = 1U << 15,

156 
	mPERF_SAMPLE_IDENTIFIER
 = 1U << 16,

157 
	mPERF_SAMPLE_TRANSACTION
 = 1U << 17,

158 
	mPERF_SAMPLE_REGS_INTR
 = 1U << 18,

159 
	mPERF_SAMPLE_PHYS_ADDR
 = 1U << 19,

160 
	mPERF_SAMPLE_AUX
 = 1U << 20,

161 
	mPERF_SAMPLE_CGROUP
 = 1U << 21,

162 
	mPERF_SAMPLE_DATA_PAGE_SIZE
 = 1U << 22,

163 
	mPERF_SAMPLE_CODE_PAGE_SIZE
 = 1U << 23,

164 
	mPERF_SAMPLE_WEIGHT_STRUCT
 = 1U << 24,

166 
	mPERF_SAMPLE_MAX
 = 1U << 25,

168 
	m__PERF_SAMPLE_CALLCHAIN_EARLY
 = 1ULL << 63,

171 
	#PERF_SAMPLE_WEIGHT_TYPE
 (
PERF_SAMPLE_WEIGHT
 | 
PERF_SAMPLE_WEIGHT_STRUCT
)

	)

182 
	e≥rf_bønch_ßm∂e_ty≥_shi·
 {

183 
	mPERF_SAMPLE_BRANCH_USER_SHIFT
 = 0,

184 
	mPERF_SAMPLE_BRANCH_KERNEL_SHIFT
 = 1,

185 
	mPERF_SAMPLE_BRANCH_HV_SHIFT
 = 2,

187 
	mPERF_SAMPLE_BRANCH_ANY_SHIFT
 = 3,

188 
	mPERF_SAMPLE_BRANCH_ANY_CALL_SHIFT
 = 4,

189 
	mPERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT
 = 5,

190 
	mPERF_SAMPLE_BRANCH_IND_CALL_SHIFT
 = 6,

191 
	mPERF_SAMPLE_BRANCH_ABORT_TX_SHIFT
 = 7,

192 
	mPERF_SAMPLE_BRANCH_IN_TX_SHIFT
 = 8,

193 
	mPERF_SAMPLE_BRANCH_NO_TX_SHIFT
 = 9,

194 
	mPERF_SAMPLE_BRANCH_COND_SHIFT
 = 10,

196 
	mPERF_SAMPLE_BRANCH_CALL_STACK_SHIFT
 = 11,

197 
	mPERF_SAMPLE_BRANCH_IND_JUMP_SHIFT
 = 12,

198 
	mPERF_SAMPLE_BRANCH_CALL_SHIFT
 = 13,

200 
	mPERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT
 = 14,

201 
	mPERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT
 = 15,

203 
	mPERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT
 = 16,

205 
	mPERF_SAMPLE_BRANCH_HW_INDEX_SHIFT
 = 17,

207 
	mPERF_SAMPLE_BRANCH_MAX_SHIFT


210 
	e≥rf_bønch_ßm∂e_ty≥
 {

211 
	mPERF_SAMPLE_BRANCH_USER
 = 1U << 
PERF_SAMPLE_BRANCH_USER_SHIFT
,

212 
	mPERF_SAMPLE_BRANCH_KERNEL
 = 1U << 
PERF_SAMPLE_BRANCH_KERNEL_SHIFT
,

213 
	mPERF_SAMPLE_BRANCH_HV
 = 1U << 
PERF_SAMPLE_BRANCH_HV_SHIFT
,

215 
	mPERF_SAMPLE_BRANCH_ANY
 = 1U << 
PERF_SAMPLE_BRANCH_ANY_SHIFT
,

216 
	mPERF_SAMPLE_BRANCH_ANY_CALL
 = 1U << 
PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT
,

217 
	mPERF_SAMPLE_BRANCH_ANY_RETURN
 = 1U << 
PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT
,

218 
	mPERF_SAMPLE_BRANCH_IND_CALL
 = 1U << 
PERF_SAMPLE_BRANCH_IND_CALL_SHIFT
,

219 
	mPERF_SAMPLE_BRANCH_ABORT_TX
 = 1U << 
PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT
,

220 
	mPERF_SAMPLE_BRANCH_IN_TX
 = 1U << 
PERF_SAMPLE_BRANCH_IN_TX_SHIFT
,

221 
	mPERF_SAMPLE_BRANCH_NO_TX
 = 1U << 
PERF_SAMPLE_BRANCH_NO_TX_SHIFT
,

222 
	mPERF_SAMPLE_BRANCH_COND
 = 1U << 
PERF_SAMPLE_BRANCH_COND_SHIFT
,

224 
	mPERF_SAMPLE_BRANCH_CALL_STACK
 = 1U << 
PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT
,

225 
	mPERF_SAMPLE_BRANCH_IND_JUMP
 = 1U << 
PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT
,

226 
	mPERF_SAMPLE_BRANCH_CALL
 = 1U << 
PERF_SAMPLE_BRANCH_CALL_SHIFT
,

228 
	mPERF_SAMPLE_BRANCH_NO_FLAGS
 = 1U << 
PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT
,

229 
	mPERF_SAMPLE_BRANCH_NO_CYCLES
 = 1U << 
PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT
,

231 
	mPERF_SAMPLE_BRANCH_TYPE_SAVE
 =

232 1U << 
PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT
,

234 
	mPERF_SAMPLE_BRANCH_HW_INDEX
 = 1U << 
PERF_SAMPLE_BRANCH_HW_INDEX_SHIFT
,

236 
	mPERF_SAMPLE_BRANCH_MAX
 = 1U << 
PERF_SAMPLE_BRANCH_MAX_SHIFT
,

243 
	mPERF_BR_UNKNOWN
 = 0,

244 
	mPERF_BR_COND
 = 1,

245 
	mPERF_BR_UNCOND
 = 2,

246 
	mPERF_BR_IND
 = 3,

247 
	mPERF_BR_CALL
 = 4,

248 
	mPERF_BR_IND_CALL
 = 5,

249 
	mPERF_BR_RET
 = 6,

250 
	mPERF_BR_SYSCALL
 = 7,

251 
	mPERF_BR_SYSRET
 = 8,

252 
	mPERF_BR_COND_CALL
 = 9,

253 
	mPERF_BR_COND_RET
 = 10,

254 
	mPERF_BR_MAX
,

257 
	#PERF_SAMPLE_BRANCH_PLM_ALL
 \

258 (
PERF_SAMPLE_BRANCH_USER
|\

259 
PERF_SAMPLE_BRANCH_KERNEL
|\

260 
PERF_SAMPLE_BRANCH_HV
)

	)

265 
	e≥rf_ßm∂e_ªgs_abi
 {

266 
	mPERF_SAMPLE_REGS_ABI_NONE
 = 0,

267 
	mPERF_SAMPLE_REGS_ABI_32
 = 1,

268 
	mPERF_SAMPLE_REGS_ABI_64
 = 2,

276 
	mPERF_TXN_ELISION
 = (1 << 0),

277 
	mPERF_TXN_TRANSACTION
 = (1 << 1),

278 
	mPERF_TXN_SYNC
 = (1 << 2),

279 
	mPERF_TXN_ASYNC
 = (1 << 3),

280 
	mPERF_TXN_RETRY
 = (1 << 4),

281 
	mPERF_TXN_CONFLICT
 = (1 << 5),

282 
	mPERF_TXN_CAPACITY_WRITE
 = (1 << 6),

283 
	mPERF_TXN_CAPACITY_READ
 = (1 << 7),

285 
	mPERF_TXN_MAX
 = (1 << 8),

289 
	mPERF_TXN_ABORT_MASK
 = (0xffffffffULL << 32),

290 
	mPERF_TXN_ABORT_SHIFT
 = 32,

315 
	e≥rf_evít_ªad_f‹m©
 {

316 
	mPERF_FORMAT_TOTAL_TIME_ENABLED
 = 1U << 0,

317 
	mPERF_FORMAT_TOTAL_TIME_RUNNING
 = 1U << 1,

318 
	mPERF_FORMAT_ID
 = 1U << 2,

319 
	mPERF_FORMAT_GROUP
 = 1U << 3,

320 
	mPERF_FORMAT_LOST
 = 1U << 4,

322 
	mPERF_FORMAT_MAX
 = 1U << 5,

325 
	#PERF_ATTR_SIZE_VER0
 64

	)

326 
	#PERF_ATTR_SIZE_VER1
 72

	)

327 
	#PERF_ATTR_SIZE_VER2
 80

	)

328 
	#PERF_ATTR_SIZE_VER3
 96

	)

330 
	#PERF_ATTR_SIZE_VER4
 104

	)

331 
	#PERF_ATTR_SIZE_VER5
 112

	)

332 
	#PERF_ATTR_SIZE_VER6
 120

	)

333 
	#PERF_ATTR_SIZE_VER7
 128

	)

341 
	s≥rf_evít_©å
 {

346 
__u32
 
	mty≥
;

351 
__u32
 
	msize
;

356 
__u64
 
	mc⁄fig
;

359 
__u64
 
	mßm∂e_≥riod
;

360 
__u64
 
	mßm∂e_‰eq
;

363 
__u64
 
	mßm∂e_ty≥
;

364 
__u64
 
	mªad_f‹m©
;

366 
__u64
 
	mdißbÀd
 : 1,

367 
	möhîô
 : 1,

368 
	mpö√d
 : 1,

369 
	mex˛usive
 : 1,

370 
	mex˛ude_u£r
 : 1,

371 
	mex˛ude_kî√l
 : 1,

372 
	mex˛ude_hv
 : 1,

373 
	mex˛ude_idÀ
 : 1,

374 
	mmm≠
 : 1,

375 
	mcomm
 : 1,

376 
	m‰eq
 : 1,

377 
	möhîô_°©
 : 1,

378 
	míabÀ_⁄_exec
 : 1,

379 
	mèsk
 : 1,

380 
	mw©îm¨k
 : 1,

391 
	m¥eci£_ù
 : 2,

392 
	mmm≠_d©a
 : 1,

393 
	mßm∂e_id_Æl
 : 1,

395 
	mex˛ude_ho°
 : 1,

396 
	mex˛ude_gue°
 : 1,

398 
	mex˛ude_ˇŒchaö_kî√l
 : 1,

399 
	mex˛ude_ˇŒchaö_u£r
 : 1,

400 
	mmm≠2
 : 1,

401 
	mcomm_exec
 : 1,

402 
	mu£_˛ockid
 : 1,

403 
	mc⁄ãxt_swôch
 : 1,

404 
	mwrôe_backw¨d
 : 1,

405 
	m«me•a˚s
 : 1,

406 
	mksymbﬁ
 : 1,

407 
	mbpf_evít
 : 1,

408 
	maux_ouçut
 : 1,

409 
	mcgroup
 : 1,

410 
	mãxt_poke
 : 1,

411 
	mbuûd_id
 : 1,

412 
	möhîô_thªad
 : 1,

413 
	mªmove_⁄_exec
 : 1,

414 
	msigå≠
 : 1,

415 
	m__ª£rved_1
 : 26;

418 
__u32
 
	mwakeup_evíts
;

419 
__u32
 
	mwakeup_w©îm¨k
;

422 
__u32
 
	mbp_ty≥
;

424 
__u64
 
	mbp_addr
;

425 
__u64
 
	mk¥obe_func
;

426 
__u64
 
	mu¥obe_∑th
;

427 
__u64
 
	mc⁄fig1
;

430 
__u64
 
	mbp_Àn
;

431 
__u64
 
	mk¥obe_addr
;

432 
__u64
 
	m¥obe_off£t
;

433 
__u64
 
	mc⁄fig2
;

435 
__u64
 
	mbønch_ßm∂e_ty≥
;

441 
__u64
 
	mßm∂e_ªgs_u£r
;

446 
__u32
 
	mßm∂e_°ack_u£r
;

448 
__s32
 
	m˛ockid
;

457 
__u64
 
	mßm∂e_ªgs_öå
;

462 
__u32
 
	maux_w©îm¨k
;

463 
__u16
 
	mßm∂e_max_°ack
;

464 
__u16
 
	m__ª£rved_2
;

465 
__u32
 
	maux_ßm∂e_size
;

466 
__u32
 
	m__ª£rved_3
;

472 
__u64
 
	msig_d©a
;

480 
	s≥rf_evít_quîy_bpf
 {

484 
__u32
 
	mids_Àn
;

489 
__u32
 
	m¥og_˙t
;

493 
__u32
 
	mids
[0];

499 
	#PERF_EVENT_IOC_ENABLE
 
	`_IO
 ('$', 0)

	)

500 
	#PERF_EVENT_IOC_DISABLE
 
	`_IO
 ('$', 1)

	)

501 
	#PERF_EVENT_IOC_REFRESH
 
	`_IO
 ('$', 2)

	)

502 
	#PERF_EVENT_IOC_RESET
 
	`_IO
 ('$', 3)

	)

503 
	#PERF_EVENT_IOC_PERIOD
 
	`_IOW
('$', 4, 
__u64
)

	)

504 
	#PERF_EVENT_IOC_SET_OUTPUT
 
	`_IO
 ('$', 5)

	)

505 
	#PERF_EVENT_IOC_SET_FILTER
 
	`_IOW
('$', 6, *)

	)

506 
	#PERF_EVENT_IOC_ID
 
	`_IOR
('$', 7, 
__u64
 *)

	)

507 
	#PERF_EVENT_IOC_SET_BPF
 
	`_IOW
('$', 8, 
__u32
)

	)

508 
	#PERF_EVENT_IOC_PAUSE_OUTPUT
 
	`_IOW
('$', 9, 
__u32
)

	)

509 
	#PERF_EVENT_IOC_QUERY_BPF
 
	`_IOWR
('$', 10, 
≥rf_evít_quîy_bpf
 *)

	)

510 
	#PERF_EVENT_IOC_MODIFY_ATTRIBUTES
 
	`_IOW
('$', 11, 
≥rf_evít_©å
 *)

	)

512 
	e≥rf_evít_ioc_Êags
 {

513 
	mPERF_IOC_FLAG_GROUP
 = 1U << 0,

519 
	s≥rf_evít_mm≠_∑ge
 {

520 
__u32
 
	mvîsi⁄
;

521 
__u32
 
	mcom∑t_vîsi⁄
;

558 
__u32
 
	mlock
;

559 
__u32
 
	mödex
;

560 
__s64
 
	moff£t
;

561 
__u64
 
	mtime_íabÀd
;

562 
__u64
 
	mtime_ru¬ög
;

564 
__u64
 
	mˇ∑bûôõs
;

566 
__u64
 
	mˇp_bô0
 : 1,

567 
	mˇp_bô0_is_dïªˇãd
 : 1,

569 
	mˇp_u£r_rdpmc
 : 1,

570 
	mˇp_u£r_time
 : 1,

571 
	mˇp_u£r_time_zîo
 : 1,

572 
	mˇp_u£r_time_sh‹t
 : 1,

573 
	mˇp_____ªs
 : 58;

586 
__u16
 
	mpmc_width
;

612 
__u16
 
	mtime_shi·
;

613 
__u32
 
	mtime_mu…
;

614 
__u64
 
	mtime_off£t
;

631 
__u64
 
	mtime_zîo
;

633 
__u32
 
	msize
;

634 
__u32
 
	m__ª£rved_1
;

647 
__u64
 
	mtime_cy˛es
;

648 
__u64
 
	mtime_mask
;

654 
__u8
 
	m__ª£rved
[116*8];

672 
__u64
 
	md©a_hód
;

673 
__u64
 
	md©a_èû
;

674 
__u64
 
	md©a_off£t
;

675 
__u64
 
	md©a_size
;

688 
__u64
 
	maux_hód
;

689 
__u64
 
	maux_èû
;

690 
__u64
 
	maux_off£t
;

691 
__u64
 
	maux_size
;

710 
	#PERF_RECORD_MISC_CPUMODE_MASK
 (7 << 0)

	)

711 
	#PERF_RECORD_MISC_CPUMODE_UNKNOWN
 (0 << 0)

	)

712 
	#PERF_RECORD_MISC_KERNEL
 (1 << 0)

	)

713 
	#PERF_RECORD_MISC_USER
 (2 << 0)

	)

714 
	#PERF_RECORD_MISC_HYPERVISOR
 (3 << 0)

	)

715 
	#PERF_RECORD_MISC_GUEST_KERNEL
 (4 << 0)

	)

716 
	#PERF_RECORD_MISC_GUEST_USER
 (5 << 0)

	)

721 
	#PERF_RECORD_MISC_PROC_MAP_PARSE_TIMEOUT
 (1 << 12)

	)

731 
	#PERF_RECORD_MISC_MMAP_DATA
 (1 << 13)

	)

732 
	#PERF_RECORD_MISC_COMM_EXEC
 (1 << 13)

	)

733 
	#PERF_RECORD_MISC_FORK_EXEC
 (1 << 13)

	)

734 
	#PERF_RECORD_MISC_SWITCH_OUT
 (1 << 13)

	)

755 
	#PERF_RECORD_MISC_EXACT_IP
 (1 << 14)

	)

756 
	#PERF_RECORD_MISC_SWITCH_OUT_PREEMPT
 (1 << 14)

	)

757 
	#PERF_RECORD_MISC_MMAP_BUILD_ID
 (1 << 14)

	)

761 
	#PERF_RECORD_MISC_EXT_RESERVED
 (1 << 15)

	)

763 
	s≥rf_evít_hódî
 {

764 
__u32
 
	mty≥
;

765 
__u16
 
	mmisc
;

766 
__u16
 
	msize
;

769 
	s≥rf_ns_lök_öfo
 {

770 
__u64
 
	mdev
;

771 
__u64
 
	möo
;

775 
	mNET_NS_INDEX
 = 0,

776 
	mUTS_NS_INDEX
 = 1,

777 
	mIPC_NS_INDEX
 = 2,

778 
	mPID_NS_INDEX
 = 3,

779 
	mUSER_NS_INDEX
 = 4,

780 
	mMNT_NS_INDEX
 = 5,

781 
	mCGROUP_NS_INDEX
 = 6,

783 
	mNR_NAMESPACES
,

786 
	e≥rf_evít_ty≥
 {

827 
	mPERF_RECORD_MMAP
 = 1,

837 
	mPERF_RECORD_LOST
 = 2,

848 
	mPERF_RECORD_COMM
 = 3,

859 
	mPERF_RECORD_EXIT
 = 4,

870 
	mPERF_RECORD_THROTTLE
 = 5,

871 
	mPERF_RECORD_UNTHROTTLE
 = 6,

882 
	mPERF_RECORD_FORK
 = 7,

893 
	mPERF_RECORD_READ
 = 8,

975 
	mPERF_RECORD_SAMPLE
 = 9,

1007 
	mPERF_RECORD_MMAP2
 = 10,

1021 
	mPERF_RECORD_AUX
 = 11,

1033 
	mPERF_RECORD_ITRACE_START
 = 12,

1045 
	mPERF_RECORD_LOST_SAMPLES
 = 13,

1057 
	mPERF_RECORD_SWITCH
 = 14,

1071 
	mPERF_RECORD_SWITCH_CPU_WIDE
 = 15,

1083 
	mPERF_RECORD_NAMESPACES
 = 16,

1098 
	mPERF_RECORD_KSYMBOL
 = 17,

1117 
	mPERF_RECORD_BPF_EVENT
 = 18,

1127 
	mPERF_RECORD_CGROUP
 = 19,

1145 
	mPERF_RECORD_TEXT_POKE
 = 20,

1147 
	mPERF_RECORD_MAX
,

1150 
	e≥rf_ªc‹d_ksymbﬁ_ty≥
 {

1151 
	mPERF_RECORD_KSYMBOL_TYPE_UNKNOWN
 = 0,

1152 
	mPERF_RECORD_KSYMBOL_TYPE_BPF
 = 1,

1157 
	mPERF_RECORD_KSYMBOL_TYPE_OOL
 = 2,

1158 
	mPERF_RECORD_KSYMBOL_TYPE_MAX


1161 
	#PERF_RECORD_KSYMBOL_FLAGS_UNREGISTER
 (1 << 0)

	)

1163 
	e≥rf_bpf_evít_ty≥
 {

1164 
	mPERF_BPF_EVENT_UNKNOWN
 = 0,

1165 
	mPERF_BPF_EVENT_PROG_LOAD
 = 1,

1166 
	mPERF_BPF_EVENT_PROG_UNLOAD
 = 2,

1167 
	mPERF_BPF_EVENT_MAX
,

1170 
	#PERF_MAX_STACK_DEPTH
 127

	)

1171 
	#PERF_MAX_CONTEXTS_PER_STACK
 8

	)

1173 
	e≥rf_ˇŒchaö_c⁄ãxt
 {

1174 
	mPERF_CONTEXT_HV
 = (
__u64
)-32,

1175 
	mPERF_CONTEXT_KERNEL
 = (
__u64
)-128,

1176 
	mPERF_CONTEXT_USER
 = (
__u64
)-512,

1178 
	mPERF_CONTEXT_GUEST
 = (
__u64
)-2048,

1179 
	mPERF_CONTEXT_GUEST_KERNEL
 = (
__u64
)-2176,

1180 
	mPERF_CONTEXT_GUEST_USER
 = (
__u64
)-2560,

1182 
	mPERF_CONTEXT_MAX
 = (
__u64
)-4095,

1188 
	#PERF_AUX_FLAG_TRUNCATED
 0x01

	)

1189 
	#PERF_AUX_FLAG_OVERWRITE
 0x02

	)

1190 
	#PERF_AUX_FLAG_PARTIAL
 0x04

	)

1191 
	#PERF_AUX_FLAG_COLLISION
 0x08

	)

1192 
	#PERF_AUX_FLAG_PMU_FORMAT_TYPE_MASK
 0xff00

	)

1195 
	#PERF_AUX_FLAG_CORESIGHT_FORMAT_CORESIGHT
 0x0000

	)

1196 
	#PERF_AUX_FLAG_CORESIGHT_FORMAT_RAW
 0x0100

	)

1198 
	#PERF_FLAG_FD_NO_GROUP
 (1UL << 0)

	)

1199 
	#PERF_FLAG_FD_OUTPUT
 (1UL << 1)

	)

1200 
	#PERF_FLAG_PID_CGROUP
 (1UL << 2Ë

	)

1201 
	#PERF_FLAG_FD_CLOEXEC
 (1UL << 3Ë

	)

1203 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

1204 
	u≥rf_mem_d©a_§c
 {

1205 
__u64
 
	mvÆ
;

1207 
__u64
 
	mmem_›
:5,

1208 
	mmem_lvl
:14,

1209 
	mmem_¢o›
:5,

1210 
	mmem_lock
:2,

1211 
	mmem_déb
:7,

1212 
	mmem_lvl_num
:4,

1213 
	mmem_ªmŸe
:1,

1214 
	mmem_¢o›x
:2,

1215 
	mmem_blk
:3,

1216 
	mmem_rsvd
:21;

1219 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

1220 
	u≥rf_mem_d©a_§c
 {

1221 
__u64
 
	mvÆ
;

1223 
__u64
 
	mmem_rsvd
:21,

1224 
	mmem_blk
:3,

1225 
	mmem_¢o›x
:2,

1226 
	mmem_ªmŸe
:1,

1227 
	mmem_lvl_num
:4,

1228 
	mmem_déb
:7,

1229 
	mmem_lock
:2,

1230 
	mmem_¢o›
:5,

1231 
	mmem_lvl
:14,

1232 
	mmem_›
:5;

1240 
	#PERF_MEM_OP_NA
 0x01

	)

1241 
	#PERF_MEM_OP_LOAD
 0x02

	)

1242 
	#PERF_MEM_OP_STORE
 0x04

	)

1243 
	#PERF_MEM_OP_PFETCH
 0x08

	)

1244 
	#PERF_MEM_OP_EXEC
 0x10

	)

1245 
	#PERF_MEM_OP_SHIFT
 0

	)

1248 
	#PERF_MEM_LVL_NA
 0x01

	)

1249 
	#PERF_MEM_LVL_HIT
 0x02

	)

1250 
	#PERF_MEM_LVL_MISS
 0x04

	)

1251 
	#PERF_MEM_LVL_L1
 0x08

	)

1252 
	#PERF_MEM_LVL_LFB
 0x10

	)

1253 
	#PERF_MEM_LVL_L2
 0x20

	)

1254 
	#PERF_MEM_LVL_L3
 0x40

	)

1255 
	#PERF_MEM_LVL_LOC_RAM
 0x80

	)

1256 
	#PERF_MEM_LVL_REM_RAM1
 0x100

	)

1257 
	#PERF_MEM_LVL_REM_RAM2
 0x200

	)

1258 
	#PERF_MEM_LVL_REM_CCE1
 0x400

	)

1259 
	#PERF_MEM_LVL_REM_CCE2
 0x800

	)

1260 
	#PERF_MEM_LVL_IO
 0x1000

	)

1261 
	#PERF_MEM_LVL_UNC
 0x2000

	)

1262 
	#PERF_MEM_LVL_SHIFT
 5

	)

1264 
	#PERF_MEM_REMOTE_REMOTE
 0x01

	)

1265 
	#PERF_MEM_REMOTE_SHIFT
 37

	)

1267 
	#PERF_MEM_LVLNUM_L1
 0x01

	)

1268 
	#PERF_MEM_LVLNUM_L2
 0x02

	)

1269 
	#PERF_MEM_LVLNUM_L3
 0x03

	)

1270 
	#PERF_MEM_LVLNUM_L4
 0x04

	)

1272 
	#PERF_MEM_LVLNUM_ANY_CACHE
 0x0b

	)

1273 
	#PERF_MEM_LVLNUM_LFB
 0x0¯

	)

1274 
	#PERF_MEM_LVLNUM_RAM
 0x0d

	)

1275 
	#PERF_MEM_LVLNUM_PMEM
 0x0ê

	)

1276 
	#PERF_MEM_LVLNUM_NA
 0x0‡

	)

1278 
	#PERF_MEM_LVLNUM_SHIFT
 33

	)

1281 
	#PERF_MEM_SNOOP_NA
 0x01

	)

1282 
	#PERF_MEM_SNOOP_NONE
 0x02

	)

1283 
	#PERF_MEM_SNOOP_HIT
 0x04

	)

1284 
	#PERF_MEM_SNOOP_MISS
 0x08

	)

1285 
	#PERF_MEM_SNOOP_HITM
 0x10

	)

1286 
	#PERF_MEM_SNOOP_SHIFT
 19

	)

1288 
	#PERF_MEM_SNOOPX_FWD
 0x01

	)

1290 
	#PERF_MEM_SNOOPX_SHIFT
 38

	)

1293 
	#PERF_MEM_LOCK_NA
 0x01

	)

1294 
	#PERF_MEM_LOCK_LOCKED
 0x02

	)

1295 
	#PERF_MEM_LOCK_SHIFT
 24

	)

1298 
	#PERF_MEM_TLB_NA
 0x01

	)

1299 
	#PERF_MEM_TLB_HIT
 0x02

	)

1300 
	#PERF_MEM_TLB_MISS
 0x04

	)

1301 
	#PERF_MEM_TLB_L1
 0x08

	)

1302 
	#PERF_MEM_TLB_L2
 0x10

	)

1303 
	#PERF_MEM_TLB_WK
 0x20

	)

1304 
	#PERF_MEM_TLB_OS
 0x40

	)

1305 
	#PERF_MEM_TLB_SHIFT
 26

	)

1308 
	#PERF_MEM_BLK_NA
 0x01

	)

1309 
	#PERF_MEM_BLK_DATA
 0x02

	)

1310 
	#PERF_MEM_BLK_ADDR
 0x04

	)

1311 
	#PERF_MEM_BLK_SHIFT
 40

	)

1313 
	#PERF_MEM_S
(
a
, 
s
) \

1314 (((
__u64
)
PERF_MEM_
##
a
##
_
##
s
Ë<< PERF_MEM_##a##
_SHIFT
)

	)

1332 
	s≥rf_bønch_íåy
 {

1333 
__u64
 
	m‰om
;

1334 
__u64
 
	mto
;

1335 
__u64
 
	mmi•ªd
:1,

1336 
	m¥edi˘ed
:1,

1337 
	mö_tx
:1,

1338 
	mab‹t
:1,

1339 
	mcy˛es
:16,

1340 
	mty≥
:4,

1341 
	mª£rved
:40;

1344 
	u≥rf_ßm∂e_weight
 {

1345 
__u64
 
	mfuŒ
;

1346 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

1348 
__u32
 
	mv¨1_dw
;

1349 
__u16
 
	mv¨2_w
;

1350 
__u16
 
	mv¨3_w
;

1352 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

1354 
__u16
 
	mv¨3_w
;

1355 
__u16
 
	mv¨2_w
;

1356 
__u32
 
	mv¨1_dw
;

	@/usr/include/linux/pkt_cls.h

2 #i‚de‡
__LINUX_PKT_CLS_H


3 
	#__LINUX_PKT_CLS_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/pkt_sched.h
>

8 
	#TC_COOKIE_MAX_SIZE
 16

	)

12 
	mTCA_ACT_UNSPEC
,

13 
	mTCA_ACT_KIND
,

14 
	mTCA_ACT_OPTIONS
,

15 
	mTCA_ACT_INDEX
,

16 
	mTCA_ACT_STATS
,

17 
	mTCA_ACT_PAD
,

18 
	mTCA_ACT_COOKIE
,

19 
	mTCA_ACT_FLAGS
,

20 
	mTCA_ACT_HW_STATS
,

21 
	mTCA_ACT_USED_HW_STATS
,

22 
	m__TCA_ACT_MAX


26 
	#TCA_ACT_FLAGS_NO_PERCPU_STATS
 1

	)

36 
	#TCA_ACT_HW_STATS_IMMEDIATE
 (1 << 0Ë

	)

41 
	#TCA_ACT_HW_STATS_DELAYED
 (1 << 1Ë

	)

50 
	#TCA_ACT_MAX
 
__TCA_ACT_MAX


	)

51 
	#TCA_OLD_COMPAT
 (
TCA_ACT_MAX
+1)

	)

52 
	#TCA_ACT_MAX_PRIO
 32

	)

53 
	#TCA_ACT_BIND
 1

	)

54 
	#TCA_ACT_NOBIND
 0

	)

55 
	#TCA_ACT_UNBIND
 1

	)

56 
	#TCA_ACT_NOUNBIND
 0

	)

57 
	#TCA_ACT_REPLACE
 1

	)

58 
	#TCA_ACT_NOREPLACE
 0

	)

60 
	#TC_ACT_UNSPEC
 (-1)

	)

61 
	#TC_ACT_OK
 0

	)

62 
	#TC_ACT_RECLASSIFY
 1

	)

63 
	#TC_ACT_SHOT
 2

	)

64 
	#TC_ACT_PIPE
 3

	)

65 
	#TC_ACT_STOLEN
 4

	)

66 
	#TC_ACT_QUEUED
 5

	)

67 
	#TC_ACT_REPEAT
 6

	)

68 
	#TC_ACT_REDIRECT
 7

	)

69 
	#TC_ACT_TRAP
 8

	)

76 
	#TC_ACT_VALUE_MAX
 
TC_ACT_TRAP


	)

84 
	#__TC_ACT_EXT_SHIFT
 28

	)

85 
	#__TC_ACT_EXT
(
loˇl
Ë(÷oˇlË<< 
__TC_ACT_EXT_SHIFT
)

	)

86 
	#TC_ACT_EXT_VAL_MASK
 ((1 << 
__TC_ACT_EXT_SHIFT
Ë- 1)

	)

87 
	#TC_ACT_EXT_OPCODE
(
comböed
Ë((comböedË& (~
TC_ACT_EXT_VAL_MASK
))

	)

88 
	#TC_ACT_EXT_CMP
(
comböed
, 
›code
Ë(
	`TC_ACT_EXT_OPCODE
(comböedË=›code)

	)

90 
	#TC_ACT_JUMP
 
	`__TC_ACT_EXT
(1)

	)

91 
	#TC_ACT_GOTO_CHAIN
 
	`__TC_ACT_EXT
(2)

	)

92 
	#TC_ACT_EXT_OPCODE_MAX
 
TC_ACT_GOTO_CHAIN


	)

98 
	#TCA_ACT_GACT
 5

	)

99 
	#TCA_ACT_IPT
 6

	)

100 
	#TCA_ACT_PEDIT
 7

	)

101 
	#TCA_ACT_MIRRED
 8

	)

102 
	#TCA_ACT_NAT
 9

	)

103 
	#TCA_ACT_XT
 10

	)

104 
	#TCA_ACT_SKBEDIT
 11

	)

105 
	#TCA_ACT_VLAN
 12

	)

106 
	#TCA_ACT_BPF
 13

	)

107 
	#TCA_ACT_CONNMARK
 14

	)

108 
	#TCA_ACT_SKBMOD
 15

	)

109 
	#TCA_ACT_CSUM
 16

	)

110 
	#TCA_ACT_TUNNEL_KEY
 17

	)

111 
	#TCA_ACT_SIMP
 22

	)

112 
	#TCA_ACT_IFE
 25

	)

113 
	#TCA_ACT_SAMPLE
 26

	)

116 
	etˇ_id
 {

117 
	mTCA_ID_UNSPEC
 = 0,

118 
	mTCA_ID_POLICE
 = 1,

119 
	mTCA_ID_GACT
 = 
TCA_ACT_GACT
,

120 
	mTCA_ID_IPT
 = 
TCA_ACT_IPT
,

121 
	mTCA_ID_PEDIT
 = 
TCA_ACT_PEDIT
,

122 
	mTCA_ID_MIRRED
 = 
TCA_ACT_MIRRED
,

123 
	mTCA_ID_NAT
 = 
TCA_ACT_NAT
,

124 
	mTCA_ID_XT
 = 
TCA_ACT_XT
,

125 
	mTCA_ID_SKBEDIT
 = 
TCA_ACT_SKBEDIT
,

126 
	mTCA_ID_VLAN
 = 
TCA_ACT_VLAN
,

127 
	mTCA_ID_BPF
 = 
TCA_ACT_BPF
,

128 
	mTCA_ID_CONNMARK
 = 
TCA_ACT_CONNMARK
,

129 
	mTCA_ID_SKBMOD
 = 
TCA_ACT_SKBMOD
,

130 
	mTCA_ID_CSUM
 = 
TCA_ACT_CSUM
,

131 
	mTCA_ID_TUNNEL_KEY
 = 
TCA_ACT_TUNNEL_KEY
,

132 
	mTCA_ID_SIMP
 = 
TCA_ACT_SIMP
,

133 
	mTCA_ID_IFE
 = 
TCA_ACT_IFE
,

134 
	mTCA_ID_SAMPLE
 = 
TCA_ACT_SAMPLE
,

135 
	mTCA_ID_CTINFO
,

136 
	mTCA_ID_MPLS
,

137 
	mTCA_ID_CT
,

138 
	mTCA_ID_GATE
,

140 
	m__TCA_ID_MAX
 = 255

143 
	#TCA_ID_MAX
 
__TCA_ID_MAX


	)

145 
	stc_pﬁi˚
 {

146 
__u32
 
	mödex
;

147 
	ma˘i⁄
;

148 
	#TC_POLICE_UNSPEC
 
TC_ACT_UNSPEC


	)

149 
	#TC_POLICE_OK
 
TC_ACT_OK


	)

150 
	#TC_POLICE_RECLASSIFY
 
TC_ACT_RECLASSIFY


	)

151 
	#TC_POLICE_SHOT
 
TC_ACT_SHOT


	)

152 
	#TC_POLICE_PIPE
 
TC_ACT_PIPE


	)

154 
__u32
 
	mlimô
;

155 
__u32
 
	mbur°
;

156 
__u32
 
	mmtu
;

157 
tc_øã•ec
 
	møã
;

158 
tc_øã•ec
 
	m≥akøã
;

159 
	mªf˙t
;

160 
	mböd˙t
;

161 
__u32
 
	mˇ∑b
;

164 
	stcf_t
 {

165 
__u64
 
	mö°Æl
;

166 
__u64
 
	mœ°u£
;

167 
__u64
 
	mexpúes
;

168 
__u64
 
	mfú°u£
;

171 
	stc_˙t
 {

172 
	mªf˙t
;

173 
	mböd˙t
;

176 
	#tc_gí
 \

177 
__u32
 
ödex
; \

178 
__u32
 
ˇ∑b
; \

179 
a˘i⁄
; \

180 
ªf˙t
; \

181 
böd˙t


	)

184 
	mTCA_POLICE_UNSPEC
,

185 
	mTCA_POLICE_TBF
,

186 
	mTCA_POLICE_RATE
,

187 
	mTCA_POLICE_PEAKRATE
,

188 
	mTCA_POLICE_AVRATE
,

189 
	mTCA_POLICE_RESULT
,

190 
	mTCA_POLICE_TM
,

191 
	mTCA_POLICE_PAD
,

192 
	mTCA_POLICE_RATE64
,

193 
	mTCA_POLICE_PEAKRATE64
,

194 
	mTCA_POLICE_PKTRATE64
,

195 
	mTCA_POLICE_PKTBURST64
,

196 
	m__TCA_POLICE_MAX


197 
	#TCA_POLICE_RESULT
 
TCA_POLICE_RESULT


	)

200 
	#TCA_POLICE_MAX
 (
__TCA_POLICE_MAX
 - 1)

	)

203 
	#TCA_CLS_FLAGS_SKIP_HW
 (1 << 0Ë

	)

204 
	#TCA_CLS_FLAGS_SKIP_SW
 (1 << 1Ë

	)

205 
	#TCA_CLS_FLAGS_IN_HW
 (1 << 2Ë

	)

206 
	#TCA_CLS_FLAGS_NOT_IN_HW
 (1 << 3Ë

	)

207 
	#TCA_CLS_FLAGS_VERBOSE
 (1 << 4Ë

	)

211 
	#TC_U32_HTID
(
h
Ë((h)&0xFFF00000)

	)

212 
	#TC_U32_USERHTID
(
h
Ë(
	`TC_U32_HTID
(h)>>20)

	)

213 
	#TC_U32_HASH
(
h
Ë(((h)>>12)&0xFF)

	)

214 
	#TC_U32_NODE
(
h
Ë((h)&0xFFF)

	)

215 
	#TC_U32_KEY
(
h
Ë((h)&0xFFFFF)

	)

216 
	#TC_U32_UNSPEC
 0

	)

217 
	#TC_U32_ROOT
 (0xFFF00000)

	)

220 
	mTCA_U32_UNSPEC
,

221 
	mTCA_U32_CLASSID
,

222 
	mTCA_U32_HASH
,

223 
	mTCA_U32_LINK
,

224 
	mTCA_U32_DIVISOR
,

225 
	mTCA_U32_SEL
,

226 
	mTCA_U32_POLICE
,

227 
	mTCA_U32_ACT
,

228 
	mTCA_U32_INDEV
,

229 
	mTCA_U32_PCNT
,

230 
	mTCA_U32_MARK
,

231 
	mTCA_U32_FLAGS
,

232 
	mTCA_U32_PAD
,

233 
	m__TCA_U32_MAX


236 
	#TCA_U32_MAX
 (
__TCA_U32_MAX
 - 1)

	)

238 
	stc_u32_key
 {

239 
__be32
 
	mmask
;

240 
__be32
 
	mvÆ
;

241 
	moff
;

242 
	moffmask
;

245 
	stc_u32_£l
 {

246 
	mÊags
;

247 
	moffshi·
;

248 
	mnkeys
;

250 
__be16
 
	moffmask
;

251 
__u16
 
	moff
;

252 
	moffoff
;

254 
	mhoff
;

255 
__be32
 
	mhmask
;

256 
tc_u32_key
 
	mkeys
[0];

259 
	stc_u32_m¨k
 {

260 
__u32
 
	mvÆ
;

261 
__u32
 
	mmask
;

262 
__u32
 
	msuc˚ss
;

265 
	stc_u32_p˙t
 {

266 
__u64
 
	mr˙t
;

267 
__u64
 
	mrhô
;

268 
__u64
 
	mk˙ts
[0];

273 
	#TC_U32_TERMINAL
 1

	)

274 
	#TC_U32_OFFSET
 2

	)

275 
	#TC_U32_VAROFFSET
 4

	)

276 
	#TC_U32_EAT
 8

	)

278 
	#TC_U32_MAXDEPTH
 8

	)

284 
	mTCA_RSVP_UNSPEC
,

285 
	mTCA_RSVP_CLASSID
,

286 
	mTCA_RSVP_DST
,

287 
	mTCA_RSVP_SRC
,

288 
	mTCA_RSVP_PINFO
,

289 
	mTCA_RSVP_POLICE
,

290 
	mTCA_RSVP_ACT
,

291 
	m__TCA_RSVP_MAX


294 
	#TCA_RSVP_MAX
 (
__TCA_RSVP_MAX
 - 1 )

	)

296 
	stc_rsvp_gpi
 {

297 
__u32
 
	mkey
;

298 
__u32
 
	mmask
;

299 
	moff£t
;

302 
	stc_rsvp_pöfo
 {

303 
tc_rsvp_gpi
 
	mdpi
;

304 
tc_rsvp_gpi
 
	m•i
;

305 
__u8
 
	m¥Ÿocﬁ
;

306 
__u8
 
	mtu¬ñid
;

307 
__u8
 
	mtu¬ñhdr
;

308 
__u8
 
	m∑d
;

314 
	mTCA_ROUTE4_UNSPEC
,

315 
	mTCA_ROUTE4_CLASSID
,

316 
	mTCA_ROUTE4_TO
,

317 
	mTCA_ROUTE4_FROM
,

318 
	mTCA_ROUTE4_IIF
,

319 
	mTCA_ROUTE4_POLICE
,

320 
	mTCA_ROUTE4_ACT
,

321 
	m__TCA_ROUTE4_MAX


324 
	#TCA_ROUTE4_MAX
 (
__TCA_ROUTE4_MAX
 - 1)

	)

330 
	mTCA_FW_UNSPEC
,

331 
	mTCA_FW_CLASSID
,

332 
	mTCA_FW_POLICE
,

333 
	mTCA_FW_INDEV
,

334 
	mTCA_FW_ACT
,

335 
	mTCA_FW_MASK
,

336 
	m__TCA_FW_MAX


339 
	#TCA_FW_MAX
 (
__TCA_FW_MAX
 - 1)

	)

344 
	mTCA_TCINDEX_UNSPEC
,

345 
	mTCA_TCINDEX_HASH
,

346 
	mTCA_TCINDEX_MASK
,

347 
	mTCA_TCINDEX_SHIFT
,

348 
	mTCA_TCINDEX_FALL_THROUGH
,

349 
	mTCA_TCINDEX_CLASSID
,

350 
	mTCA_TCINDEX_POLICE
,

351 
	mTCA_TCINDEX_ACT
,

352 
	m__TCA_TCINDEX_MAX


355 
	#TCA_TCINDEX_MAX
 (
__TCA_TCINDEX_MAX
 - 1)

	)

360 
	mFLOW_KEY_SRC
,

361 
	mFLOW_KEY_DST
,

362 
	mFLOW_KEY_PROTO
,

363 
	mFLOW_KEY_PROTO_SRC
,

364 
	mFLOW_KEY_PROTO_DST
,

365 
	mFLOW_KEY_IIF
,

366 
	mFLOW_KEY_PRIORITY
,

367 
	mFLOW_KEY_MARK
,

368 
	mFLOW_KEY_NFCT
,

369 
	mFLOW_KEY_NFCT_SRC
,

370 
	mFLOW_KEY_NFCT_DST
,

371 
	mFLOW_KEY_NFCT_PROTO_SRC
,

372 
	mFLOW_KEY_NFCT_PROTO_DST
,

373 
	mFLOW_KEY_RTCLASSID
,

374 
	mFLOW_KEY_SKUID
,

375 
	mFLOW_KEY_SKGID
,

376 
	mFLOW_KEY_VLAN_TAG
,

377 
	mFLOW_KEY_RXHASH
,

378 
	m__FLOW_KEY_MAX
,

381 
	#FLOW_KEY_MAX
 (
__FLOW_KEY_MAX
 - 1)

	)

384 
	mFLOW_MODE_MAP
,

385 
	mFLOW_MODE_HASH
,

389 
	mTCA_FLOW_UNSPEC
,

390 
	mTCA_FLOW_KEYS
,

391 
	mTCA_FLOW_MODE
,

392 
	mTCA_FLOW_BASECLASS
,

393 
	mTCA_FLOW_RSHIFT
,

394 
	mTCA_FLOW_ADDEND
,

395 
	mTCA_FLOW_MASK
,

396 
	mTCA_FLOW_XOR
,

397 
	mTCA_FLOW_DIVISOR
,

398 
	mTCA_FLOW_ACT
,

399 
	mTCA_FLOW_POLICE
,

400 
	mTCA_FLOW_EMATCHES
,

401 
	mTCA_FLOW_PERTURB
,

402 
	m__TCA_FLOW_MAX


405 
	#TCA_FLOW_MAX
 (
__TCA_FLOW_MAX
 - 1)

	)

409 
	stc_basic_p˙t
 {

410 
__u64
 
	mr˙t
;

411 
__u64
 
	mrhô
;

415 
	mTCA_BASIC_UNSPEC
,

416 
	mTCA_BASIC_CLASSID
,

417 
	mTCA_BASIC_EMATCHES
,

418 
	mTCA_BASIC_ACT
,

419 
	mTCA_BASIC_POLICE
,

420 
	mTCA_BASIC_PCNT
,

421 
	mTCA_BASIC_PAD
,

422 
	m__TCA_BASIC_MAX


425 
	#TCA_BASIC_MAX
 (
__TCA_BASIC_MAX
 - 1)

	)

431 
	mTCA_CGROUP_UNSPEC
,

432 
	mTCA_CGROUP_ACT
,

433 
	mTCA_CGROUP_POLICE
,

434 
	mTCA_CGROUP_EMATCHES
,

435 
	m__TCA_CGROUP_MAX
,

438 
	#TCA_CGROUP_MAX
 (
__TCA_CGROUP_MAX
 - 1)

	)

442 
	#TCA_BPF_FLAG_ACT_DIRECT
 (1 << 0)

	)

445 
	mTCA_BPF_UNSPEC
,

446 
	mTCA_BPF_ACT
,

447 
	mTCA_BPF_POLICE
,

448 
	mTCA_BPF_CLASSID
,

449 
	mTCA_BPF_OPS_LEN
,

450 
	mTCA_BPF_OPS
,

451 
	mTCA_BPF_FD
,

452 
	mTCA_BPF_NAME
,

453 
	mTCA_BPF_FLAGS
,

454 
	mTCA_BPF_FLAGS_GEN
,

455 
	mTCA_BPF_TAG
,

456 
	mTCA_BPF_ID
,

457 
	m__TCA_BPF_MAX
,

460 
	#TCA_BPF_MAX
 (
__TCA_BPF_MAX
 - 1)

	)

465 
	mTCA_FLOWER_UNSPEC
,

466 
	mTCA_FLOWER_CLASSID
,

467 
	mTCA_FLOWER_INDEV
,

468 
	mTCA_FLOWER_ACT
,

469 
	mTCA_FLOWER_KEY_ETH_DST
,

470 
	mTCA_FLOWER_KEY_ETH_DST_MASK
,

471 
	mTCA_FLOWER_KEY_ETH_SRC
,

472 
	mTCA_FLOWER_KEY_ETH_SRC_MASK
,

473 
	mTCA_FLOWER_KEY_ETH_TYPE
,

474 
	mTCA_FLOWER_KEY_IP_PROTO
,

475 
	mTCA_FLOWER_KEY_IPV4_SRC
,

476 
	mTCA_FLOWER_KEY_IPV4_SRC_MASK
,

477 
	mTCA_FLOWER_KEY_IPV4_DST
,

478 
	mTCA_FLOWER_KEY_IPV4_DST_MASK
,

479 
	mTCA_FLOWER_KEY_IPV6_SRC
,

480 
	mTCA_FLOWER_KEY_IPV6_SRC_MASK
,

481 
	mTCA_FLOWER_KEY_IPV6_DST
,

482 
	mTCA_FLOWER_KEY_IPV6_DST_MASK
,

483 
	mTCA_FLOWER_KEY_TCP_SRC
,

484 
	mTCA_FLOWER_KEY_TCP_DST
,

485 
	mTCA_FLOWER_KEY_UDP_SRC
,

486 
	mTCA_FLOWER_KEY_UDP_DST
,

488 
	mTCA_FLOWER_FLAGS
,

489 
	mTCA_FLOWER_KEY_VLAN_ID
,

490 
	mTCA_FLOWER_KEY_VLAN_PRIO
,

491 
	mTCA_FLOWER_KEY_VLAN_ETH_TYPE
,

493 
	mTCA_FLOWER_KEY_ENC_KEY_ID
,

494 
	mTCA_FLOWER_KEY_ENC_IPV4_SRC
,

495 
	mTCA_FLOWER_KEY_ENC_IPV4_SRC_MASK
,

496 
	mTCA_FLOWER_KEY_ENC_IPV4_DST
,

497 
	mTCA_FLOWER_KEY_ENC_IPV4_DST_MASK
,

498 
	mTCA_FLOWER_KEY_ENC_IPV6_SRC
,

499 
	mTCA_FLOWER_KEY_ENC_IPV6_SRC_MASK
,

500 
	mTCA_FLOWER_KEY_ENC_IPV6_DST
,

501 
	mTCA_FLOWER_KEY_ENC_IPV6_DST_MASK
,

503 
	mTCA_FLOWER_KEY_TCP_SRC_MASK
,

504 
	mTCA_FLOWER_KEY_TCP_DST_MASK
,

505 
	mTCA_FLOWER_KEY_UDP_SRC_MASK
,

506 
	mTCA_FLOWER_KEY_UDP_DST_MASK
,

507 
	mTCA_FLOWER_KEY_SCTP_SRC_MASK
,

508 
	mTCA_FLOWER_KEY_SCTP_DST_MASK
,

510 
	mTCA_FLOWER_KEY_SCTP_SRC
,

511 
	mTCA_FLOWER_KEY_SCTP_DST
,

513 
	mTCA_FLOWER_KEY_ENC_UDP_SRC_PORT
,

514 
	mTCA_FLOWER_KEY_ENC_UDP_SRC_PORT_MASK
,

515 
	mTCA_FLOWER_KEY_ENC_UDP_DST_PORT
,

516 
	mTCA_FLOWER_KEY_ENC_UDP_DST_PORT_MASK
,

518 
	mTCA_FLOWER_KEY_FLAGS
,

519 
	mTCA_FLOWER_KEY_FLAGS_MASK
,

521 
	mTCA_FLOWER_KEY_ICMPV4_CODE
,

522 
	mTCA_FLOWER_KEY_ICMPV4_CODE_MASK
,

523 
	mTCA_FLOWER_KEY_ICMPV4_TYPE
,

524 
	mTCA_FLOWER_KEY_ICMPV4_TYPE_MASK
,

525 
	mTCA_FLOWER_KEY_ICMPV6_CODE
,

526 
	mTCA_FLOWER_KEY_ICMPV6_CODE_MASK
,

527 
	mTCA_FLOWER_KEY_ICMPV6_TYPE
,

528 
	mTCA_FLOWER_KEY_ICMPV6_TYPE_MASK
,

530 
	mTCA_FLOWER_KEY_ARP_SIP
,

531 
	mTCA_FLOWER_KEY_ARP_SIP_MASK
,

532 
	mTCA_FLOWER_KEY_ARP_TIP
,

533 
	mTCA_FLOWER_KEY_ARP_TIP_MASK
,

534 
	mTCA_FLOWER_KEY_ARP_OP
,

535 
	mTCA_FLOWER_KEY_ARP_OP_MASK
,

536 
	mTCA_FLOWER_KEY_ARP_SHA
,

537 
	mTCA_FLOWER_KEY_ARP_SHA_MASK
,

538 
	mTCA_FLOWER_KEY_ARP_THA
,

539 
	mTCA_FLOWER_KEY_ARP_THA_MASK
,

541 
	mTCA_FLOWER_KEY_MPLS_TTL
,

542 
	mTCA_FLOWER_KEY_MPLS_BOS
,

543 
	mTCA_FLOWER_KEY_MPLS_TC
,

544 
	mTCA_FLOWER_KEY_MPLS_LABEL
,

546 
	mTCA_FLOWER_KEY_TCP_FLAGS
,

547 
	mTCA_FLOWER_KEY_TCP_FLAGS_MASK
,

549 
	mTCA_FLOWER_KEY_IP_TOS
,

550 
	mTCA_FLOWER_KEY_IP_TOS_MASK
,

551 
	mTCA_FLOWER_KEY_IP_TTL
,

552 
	mTCA_FLOWER_KEY_IP_TTL_MASK
,

554 
	mTCA_FLOWER_KEY_CVLAN_ID
,

555 
	mTCA_FLOWER_KEY_CVLAN_PRIO
,

556 
	mTCA_FLOWER_KEY_CVLAN_ETH_TYPE
,

558 
	mTCA_FLOWER_KEY_ENC_IP_TOS
,

559 
	mTCA_FLOWER_KEY_ENC_IP_TOS_MASK
,

560 
	mTCA_FLOWER_KEY_ENC_IP_TTL
,

561 
	mTCA_FLOWER_KEY_ENC_IP_TTL_MASK
,

563 
	mTCA_FLOWER_KEY_ENC_OPTS
,

564 
	mTCA_FLOWER_KEY_ENC_OPTS_MASK
,

566 
	mTCA_FLOWER_IN_HW_COUNT
,

568 
	mTCA_FLOWER_KEY_PORT_SRC_MIN
,

569 
	mTCA_FLOWER_KEY_PORT_SRC_MAX
,

570 
	mTCA_FLOWER_KEY_PORT_DST_MIN
,

571 
	mTCA_FLOWER_KEY_PORT_DST_MAX
,

573 
	mTCA_FLOWER_KEY_CT_STATE
,

574 
	mTCA_FLOWER_KEY_CT_STATE_MASK
,

575 
	mTCA_FLOWER_KEY_CT_ZONE
,

576 
	mTCA_FLOWER_KEY_CT_ZONE_MASK
,

577 
	mTCA_FLOWER_KEY_CT_MARK
,

578 
	mTCA_FLOWER_KEY_CT_MARK_MASK
,

579 
	mTCA_FLOWER_KEY_CT_LABELS
,

580 
	mTCA_FLOWER_KEY_CT_LABELS_MASK
,

582 
	mTCA_FLOWER_KEY_MPLS_OPTS
,

584 
	mTCA_FLOWER_KEY_HASH
,

585 
	mTCA_FLOWER_KEY_HASH_MASK
,

587 
	m__TCA_FLOWER_MAX
,

590 
	#TCA_FLOWER_MAX
 (
__TCA_FLOWER_MAX
 - 1)

	)

593 
	mTCA_FLOWER_KEY_CT_FLAGS_NEW
 = 1 << 0,

594 
	mTCA_FLOWER_KEY_CT_FLAGS_ESTABLISHED
 = 1 << 1,

595 
	mTCA_FLOWER_KEY_CT_FLAGS_RELATED
 = 1 << 2,

596 
	mTCA_FLOWER_KEY_CT_FLAGS_TRACKED
 = 1 << 3,

597 
	mTCA_FLOWER_KEY_CT_FLAGS_INVALID
 = 1 << 4,

598 
	mTCA_FLOWER_KEY_CT_FLAGS_REPLY
 = 1 << 5,

599 
	m__TCA_FLOWER_KEY_CT_FLAGS_MAX
,

603 
	mTCA_FLOWER_KEY_ENC_OPTS_UNSPEC
,

604 
	mTCA_FLOWER_KEY_ENC_OPTS_GENEVE
,

608 
	mTCA_FLOWER_KEY_ENC_OPTS_VXLAN
,

612 
	mTCA_FLOWER_KEY_ENC_OPTS_ERSPAN
,

616 
	m__TCA_FLOWER_KEY_ENC_OPTS_MAX
,

619 
	#TCA_FLOWER_KEY_ENC_OPTS_MAX
 (
__TCA_FLOWER_KEY_ENC_OPTS_MAX
 - 1)

	)

622 
	mTCA_FLOWER_KEY_ENC_OPT_GENEVE_UNSPEC
,

623 
	mTCA_FLOWER_KEY_ENC_OPT_GENEVE_CLASS
,

624 
	mTCA_FLOWER_KEY_ENC_OPT_GENEVE_TYPE
,

625 
	mTCA_FLOWER_KEY_ENC_OPT_GENEVE_DATA
,

627 
	m__TCA_FLOWER_KEY_ENC_OPT_GENEVE_MAX
,

630 
	#TCA_FLOWER_KEY_ENC_OPT_GENEVE_MAX
 \

631 (
__TCA_FLOWER_KEY_ENC_OPT_GENEVE_MAX
 - 1)

	)

634 
	mTCA_FLOWER_KEY_ENC_OPT_VXLAN_UNSPEC
,

635 
	mTCA_FLOWER_KEY_ENC_OPT_VXLAN_GBP
,

636 
	m__TCA_FLOWER_KEY_ENC_OPT_VXLAN_MAX
,

639 
	#TCA_FLOWER_KEY_ENC_OPT_VXLAN_MAX
 \

640 (
__TCA_FLOWER_KEY_ENC_OPT_VXLAN_MAX
 - 1)

	)

643 
	mTCA_FLOWER_KEY_ENC_OPT_ERSPAN_UNSPEC
,

644 
	mTCA_FLOWER_KEY_ENC_OPT_ERSPAN_VER
,

645 
	mTCA_FLOWER_KEY_ENC_OPT_ERSPAN_INDEX
,

646 
	mTCA_FLOWER_KEY_ENC_OPT_ERSPAN_DIR
,

647 
	mTCA_FLOWER_KEY_ENC_OPT_ERSPAN_HWID
,

648 
	m__TCA_FLOWER_KEY_ENC_OPT_ERSPAN_MAX
,

651 
	#TCA_FLOWER_KEY_ENC_OPT_ERSPAN_MAX
 \

652 (
__TCA_FLOWER_KEY_ENC_OPT_ERSPAN_MAX
 - 1)

	)

655 
	mTCA_FLOWER_KEY_MPLS_OPTS_UNSPEC
,

656 
	mTCA_FLOWER_KEY_MPLS_OPTS_LSE
,

657 
	m__TCA_FLOWER_KEY_MPLS_OPTS_MAX
,

660 
	#TCA_FLOWER_KEY_MPLS_OPTS_MAX
 (
__TCA_FLOWER_KEY_MPLS_OPTS_MAX
 - 1)

	)

663 
	mTCA_FLOWER_KEY_MPLS_OPT_LSE_UNSPEC
,

664 
	mTCA_FLOWER_KEY_MPLS_OPT_LSE_DEPTH
,

665 
	mTCA_FLOWER_KEY_MPLS_OPT_LSE_TTL
,

666 
	mTCA_FLOWER_KEY_MPLS_OPT_LSE_BOS
,

667 
	mTCA_FLOWER_KEY_MPLS_OPT_LSE_TC
,

668 
	mTCA_FLOWER_KEY_MPLS_OPT_LSE_LABEL
,

669 
	m__TCA_FLOWER_KEY_MPLS_OPT_LSE_MAX
,

672 
	#TCA_FLOWER_KEY_MPLS_OPT_LSE_MAX
 \

673 (
__TCA_FLOWER_KEY_MPLS_OPT_LSE_MAX
 - 1)

	)

676 
	mTCA_FLOWER_KEY_FLAGS_IS_FRAGMENT
 = (1 << 0),

677 
	mTCA_FLOWER_KEY_FLAGS_FRAG_IS_FIRST
 = (1 << 1),

680 
	#TCA_FLOWER_MASK_FLAGS_RANGE
 (1 << 0Ë

	)

684 
	stc_m©chÆl_p˙t
 {

685 
__u64
 
	mrhô
;

689 
	mTCA_MATCHALL_UNSPEC
,

690 
	mTCA_MATCHALL_CLASSID
,

691 
	mTCA_MATCHALL_ACT
,

692 
	mTCA_MATCHALL_FLAGS
,

693 
	mTCA_MATCHALL_PCNT
,

694 
	mTCA_MATCHALL_PAD
,

695 
	m__TCA_MATCHALL_MAX
,

698 
	#TCA_MATCHALL_MAX
 (
__TCA_MATCHALL_MAX
 - 1)

	)

702 
	stcf_em©ch_åì_hdr
 {

703 
__u16
 
	mnm©ches
;

704 
__u16
 
	m¥ogid
;

708 
	mTCA_EMATCH_TREE_UNSPEC
,

709 
	mTCA_EMATCH_TREE_HDR
,

710 
	mTCA_EMATCH_TREE_LIST
,

711 
	m__TCA_EMATCH_TREE_MAX


713 
	#TCA_EMATCH_TREE_MAX
 (
__TCA_EMATCH_TREE_MAX
 - 1)

	)

715 
	stcf_em©ch_hdr
 {

716 
__u16
 
	mm©chid
;

717 
__u16
 
	mköd
;

718 
__u16
 
	mÊags
;

719 
__u16
 
	m∑d
;

736 
	#TCF_EM_REL_END
 0

	)

737 
	#TCF_EM_REL_AND
 (1<<0)

	)

738 
	#TCF_EM_REL_OR
 (1<<1)

	)

739 
	#TCF_EM_INVERT
 (1<<2)

	)

740 
	#TCF_EM_SIMPLE
 (1<<3)

	)

742 
	#TCF_EM_REL_MASK
 3

	)

743 
	#TCF_EM_REL_VALID
(
v
Ë(((vË& 
TCF_EM_REL_MASK
Ë!TCF_EM_REL_MASK)

	)

746 
	mTCF_LAYER_LINK
,

747 
	mTCF_LAYER_NETWORK
,

748 
	mTCF_LAYER_TRANSPORT
,

749 
	m__TCF_LAYER_MAX


751 
	#TCF_LAYER_MAX
 (
__TCF_LAYER_MAX
 - 1)

	)

757 
	#TCF_EM_CONTAINER
 0

	)

758 
	#TCF_EM_CMP
 1

	)

759 
	#TCF_EM_NBYTE
 2

	)

760 
	#TCF_EM_U32
 3

	)

761 
	#TCF_EM_META
 4

	)

762 
	#TCF_EM_TEXT
 5

	)

763 
	#TCF_EM_VLAN
 6

	)

764 
	#TCF_EM_CANID
 7

	)

765 
	#TCF_EM_IPSET
 8

	)

766 
	#TCF_EM_IPT
 9

	)

767 
	#TCF_EM_MAX
 9

	)

770 
	mTCF_EM_PROG_TC


774 
	mTCF_EM_OPND_EQ
,

775 
	mTCF_EM_OPND_GT
,

776 
	mTCF_EM_OPND_LT


	@/usr/include/linux/ptrace.h

2 #i‚de‡
_LINUX_PTRACE_H


3 
	#_LINUX_PTRACE_H


	)

9 
	~<löux/ty≥s.h
>

11 
	#PTRACE_TRACEME
 0

	)

12 
	#PTRACE_PEEKTEXT
 1

	)

13 
	#PTRACE_PEEKDATA
 2

	)

14 
	#PTRACE_PEEKUSR
 3

	)

15 
	#PTRACE_POKETEXT
 4

	)

16 
	#PTRACE_POKEDATA
 5

	)

17 
	#PTRACE_POKEUSR
 6

	)

18 
	#PTRACE_CONT
 7

	)

19 
	#PTRACE_KILL
 8

	)

20 
	#PTRACE_SINGLESTEP
 9

	)

22 
	#PTRACE_ATTACH
 16

	)

23 
	#PTRACE_DETACH
 17

	)

25 
	#PTRACE_SYSCALL
 24

	)

28 
	#PTRACE_SETOPTIONS
 0x4200

	)

29 
	#PTRACE_GETEVENTMSG
 0x4201

	)

30 
	#PTRACE_GETSIGINFO
 0x4202

	)

31 
	#PTRACE_SETSIGINFO
 0x4203

	)

50 
	#PTRACE_GETREGSET
 0x4204

	)

51 
	#PTRACE_SETREGSET
 0x4205

	)

53 
	#PTRACE_SEIZE
 0x4206

	)

54 
	#PTRACE_INTERRUPT
 0x4207

	)

55 
	#PTRACE_LISTEN
 0x4208

	)

57 
	#PTRACE_PEEKSIGINFO
 0x4209

	)

59 
	s±ø˚_≥eksigöfo_¨gs
 {

60 
__u64
 
	moff
;

61 
__u32
 
	mÊags
;

62 
__s32
 
	mƒ
;

65 
	#PTRACE_GETSIGMASK
 0x420a

	)

66 
	#PTRACE_SETSIGMASK
 0x420b

	)

68 
	#PTRACE_SECCOMP_GET_FILTER
 0x420c

	)

69 
	#PTRACE_SECCOMP_GET_METADATA
 0x420d

	)

71 
	s£ccomp_mëad©a
 {

72 
__u64
 
	mfûãr_off
;

73 
__u64
 
	mÊags
;

76 
	#PTRACE_GET_SYSCALL_INFO
 0x420e

	)

77 
	#PTRACE_SYSCALL_INFO_NONE
 0

	)

78 
	#PTRACE_SYSCALL_INFO_ENTRY
 1

	)

79 
	#PTRACE_SYSCALL_INFO_EXIT
 2

	)

80 
	#PTRACE_SYSCALL_INFO_SECCOMP
 3

	)

82 
	s±ø˚_sysˇŒ_öfo
 {

83 
__u8
 
	m›
;

84 
__u8
 
	m∑d
[3];

85 
__u32
 
	m¨ch
;

86 
__u64
 
	mö°ru˘i⁄_poöãr
;

87 
__u64
 
	m°ack_poöãr
;

90 
__u64
 
	mƒ
;

91 
__u64
 
	m¨gs
[6];

92 } 
	míåy
;

94 
__s64
 
	mrvÆ
;

95 
__u8
 
	mis_îr‹
;

96 } 
	mexô
;

98 
__u64
 
	mƒ
;

99 
__u64
 
	m¨gs
[6];

100 
__u32
 
	mªt_d©a
;

101 } 
	m£ccomp
;

105 
	#PTRACE_GET_RSEQ_CONFIGURATION
 0x420f

	)

107 
	s±ø˚_r£q_c⁄figuøti⁄
 {

108 
__u64
 
	mr£q_abi_poöãr
;

109 
__u32
 
	mr£q_abi_size
;

110 
__u32
 
	msig«tuª
;

111 
__u32
 
	mÊags
;

112 
__u32
 
	m∑d
;

119 
	#PTRACE_EVENTMSG_SYSCALL_ENTRY
 1

	)

120 
	#PTRACE_EVENTMSG_SYSCALL_EXIT
 2

	)

123 
	#PTRACE_PEEKSIGINFO_SHARED
 (1 << 0)

	)

126 
	#PTRACE_EVENT_FORK
 1

	)

127 
	#PTRACE_EVENT_VFORK
 2

	)

128 
	#PTRACE_EVENT_CLONE
 3

	)

129 
	#PTRACE_EVENT_EXEC
 4

	)

130 
	#PTRACE_EVENT_VFORK_DONE
 5

	)

131 
	#PTRACE_EVENT_EXIT
 6

	)

132 
	#PTRACE_EVENT_SECCOMP
 7

	)

134 
	#PTRACE_EVENT_STOP
 128

	)

137 
	#PTRACE_O_TRACESYSGOOD
 1

	)

138 
	#PTRACE_O_TRACEFORK
 (1 << 
PTRACE_EVENT_FORK
)

	)

139 
	#PTRACE_O_TRACEVFORK
 (1 << 
PTRACE_EVENT_VFORK
)

	)

140 
	#PTRACE_O_TRACECLONE
 (1 << 
PTRACE_EVENT_CLONE
)

	)

141 
	#PTRACE_O_TRACEEXEC
 (1 << 
PTRACE_EVENT_EXEC
)

	)

142 
	#PTRACE_O_TRACEVFORKDONE
 (1 << 
PTRACE_EVENT_VFORK_DONE
)

	)

143 
	#PTRACE_O_TRACEEXIT
 (1 << 
PTRACE_EVENT_EXIT
)

	)

144 
	#PTRACE_O_TRACESECCOMP
 (1 << 
PTRACE_EVENT_SECCOMP
)

	)

147 
	#PTRACE_O_EXITKILL
 (1 << 20)

	)

148 
	#PTRACE_O_SUSPEND_SECCOMP
 (1 << 21)

	)

150 
	#PTRACE_O_MASK
 (\

151 0x000000f‡| 
PTRACE_O_EXITKILL
 | 
PTRACE_O_SUSPEND_SECCOMP
)

	)

153 
	~<asm/±ø˚.h
>

	@/usr/include/linux/rtnetlink.h

2 #i‚de‡
__LINUX_RTNETLINK_H


3 
	#__LINUX_RTNETLINK_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/√éök.h
>

7 
	~<löux/if_lök.h
>

8 
	~<löux/if_addr.h
>

9 
	~<löux/√ighbour.h
>

14 
	#RTNL_FAMILY_IPMR
 128

	)

15 
	#RTNL_FAMILY_IP6MR
 129

	)

16 
	#RTNL_FAMILY_MAX
 129

	)

25 
	mRTM_BASE
 = 16,

26 
	#RTM_BASE
 
RTM_BASE


	)

28 
	mRTM_NEWLINK
 = 16,

29 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

30 
	mRTM_DELLINK
,

31 
	#RTM_DELLINK
 
RTM_DELLINK


	)

32 
	mRTM_GETLINK
,

33 
	#RTM_GETLINK
 
RTM_GETLINK


	)

34 
	mRTM_SETLINK
,

35 
	#RTM_SETLINK
 
RTM_SETLINK


	)

37 
	mRTM_NEWADDR
 = 20,

38 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

39 
	mRTM_DELADDR
,

40 
	#RTM_DELADDR
 
RTM_DELADDR


	)

41 
	mRTM_GETADDR
,

42 
	#RTM_GETADDR
 
RTM_GETADDR


	)

44 
	mRTM_NEWROUTE
 = 24,

45 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

46 
	mRTM_DELROUTE
,

47 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

48 
	mRTM_GETROUTE
,

49 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

51 
	mRTM_NEWNEIGH
 = 28,

52 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

53 
	mRTM_DELNEIGH
,

54 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

55 
	mRTM_GETNEIGH
,

56 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

58 
	mRTM_NEWRULE
 = 32,

59 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

60 
	mRTM_DELRULE
,

61 
	#RTM_DELRULE
 
RTM_DELRULE


	)

62 
	mRTM_GETRULE
,

63 
	#RTM_GETRULE
 
RTM_GETRULE


	)

65 
	mRTM_NEWQDISC
 = 36,

66 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

67 
	mRTM_DELQDISC
,

68 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

69 
	mRTM_GETQDISC
,

70 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

72 
	mRTM_NEWTCLASS
 = 40,

73 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

74 
	mRTM_DELTCLASS
,

75 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

76 
	mRTM_GETTCLASS
,

77 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

79 
	mRTM_NEWTFILTER
 = 44,

80 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

81 
	mRTM_DELTFILTER
,

82 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

83 
	mRTM_GETTFILTER
,

84 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

86 
	mRTM_NEWACTION
 = 48,

87 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

88 
	mRTM_DELACTION
,

89 
	#RTM_DELACTION
 
RTM_DELACTION


	)

90 
	mRTM_GETACTION
,

91 
	#RTM_GETACTION
 
RTM_GETACTION


	)

93 
	mRTM_NEWPREFIX
 = 52,

94 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

96 
	mRTM_GETMULTICAST
 = 58,

97 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

99 
	mRTM_GETANYCAST
 = 62,

100 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

102 
	mRTM_NEWNEIGHTBL
 = 64,

103 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

104 
	mRTM_GETNEIGHTBL
 = 66,

105 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

106 
	mRTM_SETNEIGHTBL
,

107 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

109 
	mRTM_NEWNDUSEROPT
 = 68,

110 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

112 
	mRTM_NEWADDRLABEL
 = 72,

113 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

114 
	mRTM_DELADDRLABEL
,

115 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

116 
	mRTM_GETADDRLABEL
,

117 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

119 
	mRTM_GETDCB
 = 78,

120 
	#RTM_GETDCB
 
RTM_GETDCB


	)

121 
	mRTM_SETDCB
,

122 
	#RTM_SETDCB
 
RTM_SETDCB


	)

124 
	mRTM_NEWNETCONF
 = 80,

125 
	#RTM_NEWNETCONF
 
RTM_NEWNETCONF


	)

126 
	mRTM_DELNETCONF
,

127 
	#RTM_DELNETCONF
 
RTM_DELNETCONF


	)

128 
	mRTM_GETNETCONF
 = 82,

129 
	#RTM_GETNETCONF
 
RTM_GETNETCONF


	)

131 
	mRTM_NEWMDB
 = 84,

132 
	#RTM_NEWMDB
 
RTM_NEWMDB


	)

133 
	mRTM_DELMDB
 = 85,

134 
	#RTM_DELMDB
 
RTM_DELMDB


	)

135 
	mRTM_GETMDB
 = 86,

136 
	#RTM_GETMDB
 
RTM_GETMDB


	)

138 
	mRTM_NEWNSID
 = 88,

139 
	#RTM_NEWNSID
 
RTM_NEWNSID


	)

140 
	mRTM_DELNSID
 = 89,

141 
	#RTM_DELNSID
 
RTM_DELNSID


	)

142 
	mRTM_GETNSID
 = 90,

143 
	#RTM_GETNSID
 
RTM_GETNSID


	)

145 
	mRTM_NEWSTATS
 = 92,

146 
	#RTM_NEWSTATS
 
RTM_NEWSTATS


	)

147 
	mRTM_GETSTATS
 = 94,

148 
	#RTM_GETSTATS
 
RTM_GETSTATS


	)

150 
	mRTM_NEWCACHEREPORT
 = 96,

151 
	#RTM_NEWCACHEREPORT
 
RTM_NEWCACHEREPORT


	)

153 
	mRTM_NEWCHAIN
 = 100,

154 
	#RTM_NEWCHAIN
 
RTM_NEWCHAIN


	)

155 
	mRTM_DELCHAIN
,

156 
	#RTM_DELCHAIN
 
RTM_DELCHAIN


	)

157 
	mRTM_GETCHAIN
,

158 
	#RTM_GETCHAIN
 
RTM_GETCHAIN


	)

160 
	mRTM_NEWNEXTHOP
 = 104,

161 
	#RTM_NEWNEXTHOP
 
RTM_NEWNEXTHOP


	)

162 
	mRTM_DELNEXTHOP
,

163 
	#RTM_DELNEXTHOP
 
RTM_DELNEXTHOP


	)

164 
	mRTM_GETNEXTHOP
,

165 
	#RTM_GETNEXTHOP
 
RTM_GETNEXTHOP


	)

167 
	mRTM_NEWLINKPROP
 = 108,

168 
	#RTM_NEWLINKPROP
 
RTM_NEWLINKPROP


	)

169 
	mRTM_DELLINKPROP
,

170 
	#RTM_DELLINKPROP
 
RTM_DELLINKPROP


	)

171 
	mRTM_GETLINKPROP
,

172 
	#RTM_GETLINKPROP
 
RTM_GETLINKPROP


	)

174 
	mRTM_NEWVLAN
 = 112,

175 
	#RTM_NEWNVLAN
 
RTM_NEWVLAN


	)

176 
	mRTM_DELVLAN
,

177 
	#RTM_DELVLAN
 
RTM_DELVLAN


	)

178 
	mRTM_GETVLAN
,

179 
	#RTM_GETVLAN
 
RTM_GETVLAN


	)

181 
	mRTM_NEWNEXTHOPBUCKET
 = 116,

182 
	#RTM_NEWNEXTHOPBUCKET
 
RTM_NEWNEXTHOPBUCKET


	)

183 
	mRTM_DELNEXTHOPBUCKET
,

184 
	#RTM_DELNEXTHOPBUCKET
 
RTM_DELNEXTHOPBUCKET


	)

185 
	mRTM_GETNEXTHOPBUCKET
,

186 
	#RTM_GETNEXTHOPBUCKET
 
RTM_GETNEXTHOPBUCKET


	)

188 
	m__RTM_MAX
,

189 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

192 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

193 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

194 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

202 
	sπ©å
 {

203 
	mπa_Àn
;

204 
	mπa_ty≥
;

209 
	#RTA_ALIGNTO
 4U

	)

210 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

211 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

212 (
πa
)->
πa_Àn
 >(
π©å
) && \

213 (
πa
)->
πa_Àn
 <(
Àn
))

	)

214 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

215 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

216 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

217 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

218 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

219 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

228 
	sπmsg
 {

229 
	mπm_Ámûy
;

230 
	mπm_d°_Àn
;

231 
	mπm_§c_Àn
;

232 
	mπm_tos
;

234 
	mπm_èbÀ
;

235 
	mπm_¥Ÿocﬁ
;

236 
	mπm_sc›e
;

237 
	mπm_ty≥
;

239 
	mπm_Êags
;

245 
	mRTN_UNSPEC
,

246 
	mRTN_UNICAST
,

247 
	mRTN_LOCAL
,

248 
	mRTN_BROADCAST
,

250 
	mRTN_ANYCAST
,

252 
	mRTN_MULTICAST
,

253 
	mRTN_BLACKHOLE
,

254 
	mRTN_UNREACHABLE
,

255 
	mRTN_PROHIBIT
,

256 
	mRTN_THROW
,

257 
	mRTN_NAT
,

258 
	mRTN_XRESOLVE
,

259 
	m__RTN_MAX


262 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

267 
	#RTPROT_UNSPEC
 0

	)

268 
	#RTPROT_REDIRECT
 1

	)

270 
	#RTPROT_KERNEL
 2

	)

271 
	#RTPROT_BOOT
 3

	)

272 
	#RTPROT_STATIC
 4

	)

281 
	#RTPROT_GATED
 8

	)

282 
	#RTPROT_RA
 9

	)

283 
	#RTPROT_MRT
 10

	)

284 
	#RTPROT_ZEBRA
 11

	)

285 
	#RTPROT_BIRD
 12

	)

286 
	#RTPROT_DNROUTED
 13

	)

287 
	#RTPROT_XORP
 14

	)

288 
	#RTPROT_NTK
 15

	)

289 
	#RTPROT_DHCP
 16

	)

290 
	#RTPROT_MROUTED
 17

	)

291 
	#RTPROT_KEEPALIVED
 18

	)

292 
	#RTPROT_BABEL
 42

	)

293 
	#RTPROT_OPENR
 99

	)

294 
	#RTPROT_BGP
 186

	)

295 
	#RTPROT_ISIS
 187

	)

296 
	#RTPROT_OSPF
 188

	)

297 
	#RTPROT_RIP
 189

	)

298 
	#RTPROT_EIGRP
 192

	)

311 
	eπ_sc›e_t
 {

312 
	mRT_SCOPE_UNIVERSE
=0,

314 
	mRT_SCOPE_SITE
=200,

315 
	mRT_SCOPE_LINK
=253,

316 
	mRT_SCOPE_HOST
=254,

317 
	mRT_SCOPE_NOWHERE
=255

322 
	#RTM_F_NOTIFY
 0x100

	)

323 
	#RTM_F_CLONED
 0x200

	)

324 
	#RTM_F_EQUALIZE
 0x400

	)

325 
	#RTM_F_PREFIX
 0x800

	)

326 
	#RTM_F_LOOKUP_TABLE
 0x1000

	)

327 
	#RTM_F_FIB_MATCH
 0x2000

	)

328 
	#RTM_F_OFFLOAD
 0x4000

	)

329 
	#RTM_F_TRAP
 0x8000

	)

330 
	#RTM_F_OFFLOAD_FAILED
 0x20000000

	)

338 
	eπ_˛ass_t
 {

339 
	mRT_TABLE_UNSPEC
=0,

341 
	mRT_TABLE_COMPAT
=252,

342 
	mRT_TABLE_DEFAULT
=253,

343 
	mRT_TABLE_MAIN
=254,

344 
	mRT_TABLE_LOCAL
=255,

345 
	mRT_TABLE_MAX
=0xFFFFFFFF

351 
	eπ©å_ty≥_t
 {

352 
	mRTA_UNSPEC
,

353 
	mRTA_DST
,

354 
	mRTA_SRC
,

355 
	mRTA_IIF
,

356 
	mRTA_OIF
,

357 
	mRTA_GATEWAY
,

358 
	mRTA_PRIORITY
,

359 
	mRTA_PREFSRC
,

360 
	mRTA_METRICS
,

361 
	mRTA_MULTIPATH
,

362 
	mRTA_PROTOINFO
,

363 
	mRTA_FLOW
,

364 
	mRTA_CACHEINFO
,

365 
	mRTA_SESSION
,

366 
	mRTA_MP_ALGO
,

367 
	mRTA_TABLE
,

368 
	mRTA_MARK
,

369 
	mRTA_MFC_STATS
,

370 
	mRTA_VIA
,

371 
	mRTA_NEWDST
,

372 
	mRTA_PREF
,

373 
	mRTA_ENCAP_TYPE
,

374 
	mRTA_ENCAP
,

375 
	mRTA_EXPIRES
,

376 
	mRTA_PAD
,

377 
	mRTA_UID
,

378 
	mRTA_TTL_PROPAGATE
,

379 
	mRTA_IP_PROTO
,

380 
	mRTA_SPORT
,

381 
	mRTA_DPORT
,

382 
	mRTA_NH_ID
,

383 
	m__RTA_MAX


386 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

388 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

389 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

400 
	sπ√xth›
 {

401 
	mπnh_Àn
;

402 
	mπnh_Êags
;

403 
	mπnh_h›s
;

404 
	mπnh_ifödex
;

409 
	#RTNH_F_DEAD
 1

	)

410 
	#RTNH_F_PERVASIVE
 2

	)

411 
	#RTNH_F_ONLINK
 4

	)

412 
	#RTNH_F_OFFLOAD
 8

	)

413 
	#RTNH_F_LINKDOWN
 16

	)

414 
	#RTNH_F_UNRESOLVED
 32

	)

415 
	#RTNH_F_TRAP
 64

	)

417 
	#RTNH_COMPARE_MASK
 (
RTNH_F_DEAD
 | 
RTNH_F_LINKDOWN
 | \

418 
RTNH_F_OFFLOAD
 | 
RTNH_F_TRAP
)

	)

422 
	#RTNH_ALIGNTO
 4

	)

423 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

424 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

425 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

426 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

427 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

428 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

429 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

432 
	sπvü
 {

433 
__kî√l_ß_Ámûy_t
 
	mπvü_Ámûy
;

434 
__u8
 
	mπvü_addr
[0];

439 
	sπa_ˇcheöfo
 {

440 
__u32
 
	mπa_˛¡ªf
;

441 
__u32
 
	mπa_œ°u£
;

442 
__s32
 
	mπa_expúes
;

443 
__u32
 
	mπa_îr‹
;

444 
__u32
 
	mπa_u£d
;

446 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

447 
__u32
 
	mπa_id
;

448 
__u32
 
	mπa_ts
;

449 
__u32
 
	mπa_tßge
;

455 
	mRTAX_UNSPEC
,

456 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

457 
	mRTAX_LOCK
,

458 
	#RTAX_LOCK
 
RTAX_LOCK


	)

459 
	mRTAX_MTU
,

460 
	#RTAX_MTU
 
RTAX_MTU


	)

461 
	mRTAX_WINDOW
,

462 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

463 
	mRTAX_RTT
,

464 
	#RTAX_RTT
 
RTAX_RTT


	)

465 
	mRTAX_RTTVAR
,

466 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

467 
	mRTAX_SSTHRESH
,

468 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

469 
	mRTAX_CWND
,

470 
	#RTAX_CWND
 
RTAX_CWND


	)

471 
	mRTAX_ADVMSS
,

472 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

473 
	mRTAX_REORDERING
,

474 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

475 
	mRTAX_HOPLIMIT
,

476 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

477 
	mRTAX_INITCWND
,

478 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

479 
	mRTAX_FEATURES
,

480 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

481 
	mRTAX_RTO_MIN
,

482 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

483 
	mRTAX_INITRWND
,

484 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

485 
	mRTAX_QUICKACK
,

486 
	#RTAX_QUICKACK
 
RTAX_QUICKACK


	)

487 
	mRTAX_CC_ALGO
,

488 
	#RTAX_CC_ALGO
 
RTAX_CC_ALGO


	)

489 
	mRTAX_FASTOPEN_NO_COOKIE
,

490 
	#RTAX_FASTOPEN_NO_COOKIE
 
RTAX_FASTOPEN_NO_COOKIE


	)

491 
	m__RTAX_MAX


494 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

496 
	#RTAX_FEATURE_ECN
 (1 << 0)

	)

497 
	#RTAX_FEATURE_SACK
 (1 << 1)

	)

498 
	#RTAX_FEATURE_TIMESTAMP
 (1 << 2)

	)

499 
	#RTAX_FEATURE_ALLFRAG
 (1 << 3)

	)

501 
	#RTAX_FEATURE_MASK
 (
RTAX_FEATURE_ECN
 | 
RTAX_FEATURE_SACK
 | \

502 
RTAX_FEATURE_TIMESTAMP
 | 
RTAX_FEATURE_ALLFRAG
)

	)

504 
	sπa_£ssi⁄
 {

505 
__u8
 
	m¥Ÿo
;

506 
__u8
 
	m∑d1
;

507 
__u16
 
	m∑d2
;

511 
__u16
 
	m•‹t
;

512 
__u16
 
	mdp‹t
;

513 } 
	mp‹ts
;

516 
__u8
 
	mty≥
;

517 
__u8
 
	mcode
;

518 
__u16
 
	midít
;

519 } 
	micm±
;

521 
__u32
 
	m•i
;

522 } 
	mu
;

525 
	sπa_mfc_°©s
 {

526 
__u64
 
	mmfcs_∑ckës
;

527 
__u64
 
	mmfcs_byãs
;

528 
__u64
 
	mmfcs_wr⁄g_if
;

535 
	sπgímsg
 {

536 
	mπgí_Ámûy
;

548 
	siföfomsg
 {

549 
	mifi_Ámûy
;

550 
	m__ifi_∑d
;

551 
	mifi_ty≥
;

552 
	mifi_ödex
;

553 
	mifi_Êags
;

554 
	mifi_ch™ge
;

561 
	s¥efixmsg
 {

562 
	m¥efix_Ámûy
;

563 
	m¥efix_∑d1
;

564 
	m¥efix_∑d2
;

565 
	m¥efix_ifödex
;

566 
	m¥efix_ty≥
;

567 
	m¥efix_Àn
;

568 
	m¥efix_Êags
;

569 
	m¥efix_∑d3
;

574 
	mPREFIX_UNSPEC
,

575 
	mPREFIX_ADDRESS
,

576 
	mPREFIX_CACHEINFO
,

577 
	m__PREFIX_MAX


580 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

582 
	s¥efix_ˇcheöfo
 {

583 
__u32
 
	m¥e„ºed_time
;

584 
__u32
 
	mvÆid_time
;

592 
	stcmsg
 {

593 
	mtcm_Ámûy
;

594 
	mtcm__∑d1
;

595 
	mtcm__∑d2
;

596 
	mtcm_ifödex
;

597 
__u32
 
	mtcm_h™dÀ
;

598 
__u32
 
	mtcm_∑ª¡
;

602 
	#tcm_block_ödex
 
tcm_∑ª¡


	)

603 
__u32
 
	mtcm_öfo
;

610 
	#TCM_IFINDEX_MAGIC_BLOCK
 (0xFFFFFFFFU)

	)

613 
	mTCA_UNSPEC
,

614 
	mTCA_KIND
,

615 
	mTCA_OPTIONS
,

616 
	mTCA_STATS
,

617 
	mTCA_XSTATS
,

618 
	mTCA_RATE
,

619 
	mTCA_FCNT
,

620 
	mTCA_STATS2
,

621 
	mTCA_STAB
,

622 
	mTCA_PAD
,

623 
	mTCA_DUMP_INVISIBLE
,

624 
	mTCA_CHAIN
,

625 
	mTCA_HW_OFFLOAD
,

626 
	mTCA_INGRESS_BLOCK
,

627 
	mTCA_EGRESS_BLOCK
,

628 
	mTCA_DUMP_FLAGS
,

629 
	m__TCA_MAX


632 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

634 
	#TCA_DUMP_FLAGS_TERSE
 (1 << 0Ë

	)

639 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

640 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

646 
	sndu£r›tmsg
 {

647 
	mndu£r›t_Ámûy
;

648 
	mndu£r›t_∑d1
;

649 
	mndu£r›t_›ts_Àn
;

650 
	mndu£r›t_ifödex
;

651 
__u8
 
	mndu£r›t_icmp_ty≥
;

652 
__u8
 
	mndu£r›t_icmp_code
;

653 
	mndu£r›t_∑d2
;

654 
	mndu£r›t_∑d3
;

659 
	mNDUSEROPT_UNSPEC
,

660 
	mNDUSEROPT_SRCADDR
,

661 
	m__NDUSEROPT_MAX


664 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

667 
	#RTMGRP_LINK
 1

	)

668 
	#RTMGRP_NOTIFY
 2

	)

669 
	#RTMGRP_NEIGH
 4

	)

670 
	#RTMGRP_TC
 8

	)

672 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

673 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

674 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

675 
	#RTMGRP_IPV4_RULE
 0x80

	)

677 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

678 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

679 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

680 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

682 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

683 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

685 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

688 
	eπ√éök_groups
 {

689 
	mRTNLGRP_NONE
,

690 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

691 
	mRTNLGRP_LINK
,

692 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

693 
	mRTNLGRP_NOTIFY
,

694 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

695 
	mRTNLGRP_NEIGH
,

696 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

697 
	mRTNLGRP_TC
,

698 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

699 
	mRTNLGRP_IPV4_IFADDR
,

700 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

701 
	mRTNLGRP_IPV4_MROUTE
,

702 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

703 
	mRTNLGRP_IPV4_ROUTE
,

704 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

705 
	mRTNLGRP_IPV4_RULE
,

706 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

707 
	mRTNLGRP_IPV6_IFADDR
,

708 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

709 
	mRTNLGRP_IPV6_MROUTE
,

710 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

711 
	mRTNLGRP_IPV6_ROUTE
,

712 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

713 
	mRTNLGRP_IPV6_IFINFO
,

714 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

715 
	mRTNLGRP_DEC√t_IFADDR
,

716 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

717 
	mRTNLGRP_NOP2
,

718 
	mRTNLGRP_DEC√t_ROUTE
,

719 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

720 
	mRTNLGRP_DEC√t_RULE
,

721 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

722 
	mRTNLGRP_NOP4
,

723 
	mRTNLGRP_IPV6_PREFIX
,

724 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

725 
	mRTNLGRP_IPV6_RULE
,

726 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

727 
	mRTNLGRP_ND_USEROPT
,

728 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

729 
	mRTNLGRP_PHONET_IFADDR
,

730 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

731 
	mRTNLGRP_PHONET_ROUTE
,

732 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

733 
	mRTNLGRP_DCB
,

734 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

735 
	mRTNLGRP_IPV4_NETCONF
,

736 
	#RTNLGRP_IPV4_NETCONF
 
RTNLGRP_IPV4_NETCONF


	)

737 
	mRTNLGRP_IPV6_NETCONF
,

738 
	#RTNLGRP_IPV6_NETCONF
 
RTNLGRP_IPV6_NETCONF


	)

739 
	mRTNLGRP_MDB
,

740 
	#RTNLGRP_MDB
 
RTNLGRP_MDB


	)

741 
	mRTNLGRP_MPLS_ROUTE
,

742 
	#RTNLGRP_MPLS_ROUTE
 
RTNLGRP_MPLS_ROUTE


	)

743 
	mRTNLGRP_NSID
,

744 
	#RTNLGRP_NSID
 
RTNLGRP_NSID


	)

745 
	mRTNLGRP_MPLS_NETCONF
,

746 
	#RTNLGRP_MPLS_NETCONF
 
RTNLGRP_MPLS_NETCONF


	)

747 
	mRTNLGRP_IPV4_MROUTE_R
,

748 
	#RTNLGRP_IPV4_MROUTE_R
 
RTNLGRP_IPV4_MROUTE_R


	)

749 
	mRTNLGRP_IPV6_MROUTE_R
,

750 
	#RTNLGRP_IPV6_MROUTE_R
 
RTNLGRP_IPV6_MROUTE_R


	)

751 
	mRTNLGRP_NEXTHOP
,

752 
	#RTNLGRP_NEXTHOP
 
RTNLGRP_NEXTHOP


	)

753 
	mRTNLGRP_BRVLAN
,

754 
	#RTNLGRP_BRVLAN
 
RTNLGRP_BRVLAN


	)

755 
	m__RTNLGRP_MAX


757 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

760 
	stˇmsg
 {

761 
	mtˇ_Ámûy
;

762 
	mtˇ__∑d1
;

763 
	mtˇ__∑d2
;

767 
	mTCA_ROOT_UNSPEC
,

768 
	mTCA_ROOT_TAB
,

769 
	#TCA_ACT_TAB
 
TCA_ROOT_TAB


	)

770 
	#TCAA_MAX
 
TCA_ROOT_TAB


	)

771 
	mTCA_ROOT_FLAGS
,

772 
	mTCA_ROOT_COUNT
,

773 
	mTCA_ROOT_TIME_DELTA
,

774 
	m__TCA_ROOT_MAX
,

775 
	#TCA_ROOT_MAX
 (
__TCA_ROOT_MAX
 - 1)

	)

778 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

779 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

791 
	#TCA_FLAG_LARGE_DUMP_ON
 (1 << 0)

	)

792 
	#TCA_ACT_FLAG_LARGE_DUMP_ON
 
TCA_FLAG_LARGE_DUMP_ON


	)

793 
	#TCA_ACT_FLAG_TERSE_DUMP
 (1 << 1)

	)

796 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

797 
	#RTEXT_FILTER_BRVLAN
 (1 << 1)

	)

798 
	#RTEXT_FILTER_BRVLAN_COMPRESSED
 (1 << 2)

	)

799 
	#RTEXT_FILTER_SKIP_STATS
 (1 << 3)

	)

800 
	#RTEXT_FILTER_MRP
 (1 << 4)

	)

801 
	#RTEXT_FILTER_CFM_CONFIG
 (1 << 5)

	)

802 
	#RTEXT_FILTER_CFM_STATUS
 (1 << 6)

	)

	@/usr/include/linux/sockios.h

19 #i‚de‡
_LINUX_SOCKIOS_H


20 
	#_LINUX_SOCKIOS_H


	)

22 
	~<asm/bô•îl⁄g.h
>

23 
	~<asm/sockios.h
>

26 
	#SIOCINQ
 
FIONREAD


	)

27 
	#SIOCOUTQ
 
TIOCOUTQ


	)

29 
	#SOCK_IOC_TYPE
 0x89

	)

36 
	#SIOCGSTAMP_NEW
 
	`_IOR
(
SOCK_IOC_TYPE
, 0x06, [2])

	)

38 
	#SIOCGSTAMPNS_NEW
 
	`_IOR
(
SOCK_IOC_TYPE
, 0x07, [2])

	)

40 #i‡
__BITS_PER_LONG
 =64 || (
deföed
(
__x86_64__
Ë&& deföed(
__ILP32__
))

42 
	#SIOCGSTAMP
 
SIOCGSTAMP_OLD


	)

43 
	#SIOCGSTAMPNS
 
SIOCGSTAMPNS_OLD


	)

45 
	#SIOCGSTAMP
 (((
timevÆ
)) == 8 ? \

46 
SIOCGSTAMP_OLD
 : 
SIOCGSTAMP_NEW
)

	)

47 
	#SIOCGSTAMPNS
 (((
time•ec
)) == 8 ? \

48 
SIOCGSTAMPNS_OLD
 : 
SIOCGSTAMPNS_NEW
)

	)

52 
	#SIOCADDRT
 0x890B

	)

53 
	#SIOCDELRT
 0x890C

	)

54 
	#SIOCRTMSG
 0x890D

	)

57 
	#SIOCGIFNAME
 0x8910

	)

58 
	#SIOCSIFLINK
 0x8911

	)

59 
	#SIOCGIFCONF
 0x8912

	)

60 
	#SIOCGIFFLAGS
 0x8913

	)

61 
	#SIOCSIFFLAGS
 0x8914

	)

62 
	#SIOCGIFADDR
 0x8915

	)

63 
	#SIOCSIFADDR
 0x8916

	)

64 
	#SIOCGIFDSTADDR
 0x8917

	)

65 
	#SIOCSIFDSTADDR
 0x8918

	)

66 
	#SIOCGIFBRDADDR
 0x8919

	)

67 
	#SIOCSIFBRDADDR
 0x891®

	)

68 
	#SIOCGIFNETMASK
 0x891b

	)

69 
	#SIOCSIFNETMASK
 0x891¯

	)

70 
	#SIOCGIFMETRIC
 0x891d

	)

71 
	#SIOCSIFMETRIC
 0x891ê

	)

72 
	#SIOCGIFMEM
 0x891‡

	)

73 
	#SIOCSIFMEM
 0x8920

	)

74 
	#SIOCGIFMTU
 0x8921

	)

75 
	#SIOCSIFMTU
 0x8922

	)

76 
	#SIOCSIFNAME
 0x8923

	)

77 
	#SIOCSIFHWADDR
 0x8924

	)

78 
	#SIOCGIFENCAP
 0x8925

	)

79 
	#SIOCSIFENCAP
 0x8926

	)

80 
	#SIOCGIFHWADDR
 0x8927

	)

81 
	#SIOCGIFSLAVE
 0x8929

	)

82 
	#SIOCSIFSLAVE
 0x8930

	)

83 
	#SIOCADDMULTI
 0x8931

	)

84 
	#SIOCDELMULTI
 0x8932

	)

85 
	#SIOCGIFINDEX
 0x8933

	)

86 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

87 
	#SIOCSIFPFLAGS
 0x8934

	)

88 
	#SIOCGIFPFLAGS
 0x8935

	)

89 
	#SIOCDIFADDR
 0x8936

	)

90 
	#SIOCSIFHWBROADCAST
 0x8937

	)

91 
	#SIOCGIFCOUNT
 0x8938

	)

93 
	#SIOCGIFBR
 0x8940

	)

94 
	#SIOCSIFBR
 0x8941

	)

96 
	#SIOCGIFTXQLEN
 0x8942

	)

97 
	#SIOCSIFTXQLEN
 0x8943

	)

102 
	#SIOCETHTOOL
 0x8946

	)

104 
	#SIOCGMIIPHY
 0x8947

	)

105 
	#SIOCGMIIREG
 0x8948

	)

106 
	#SIOCSMIIREG
 0x8949

	)

108 
	#SIOCWANDEV
 0x894A

	)

110 
	#SIOCOUTQNSD
 0x894B

	)

111 
	#SIOCGSKNS
 0x894C

	)

115 
	#SIOCDARP
 0x8953

	)

116 
	#SIOCGARP
 0x8954

	)

117 
	#SIOCSARP
 0x8955

	)

120 
	#SIOCDRARP
 0x8960

	)

121 
	#SIOCGRARP
 0x8961

	)

122 
	#SIOCSRARP
 0x8962

	)

126 
	#SIOCGIFMAP
 0x8970

	)

127 
	#SIOCSIFMAP
 0x8971

	)

131 
	#SIOCADDDLCI
 0x8980

	)

132 
	#SIOCDELDLCI
 0x8981

	)

134 
	#SIOCGIFVLAN
 0x8982

	)

135 
	#SIOCSIFVLAN
 0x8983

	)

139 
	#SIOCBONDENSLAVE
 0x8990

	)

140 
	#SIOCBONDRELEASE
 0x8991

	)

141 
	#SIOCBONDSETHWADDR
 0x8992

	)

142 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

143 
	#SIOCBONDINFOQUERY
 0x8994

	)

144 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

147 
	#SIOCBRADDBR
 0x89a0

	)

148 
	#SIOCBRDELBR
 0x89a1

	)

149 
	#SIOCBRADDIF
 0x89a2

	)

150 
	#SIOCBRDELIF
 0x89a3

	)

153 
	#SIOCSHWTSTAMP
 0x89b0

	)

154 
	#SIOCGHWTSTAMP
 0x89b1

	)

167 
	#SIOCDEVPRIVATE
 0x89F0

	)

173 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/string.h

2 #i‚de‡
_LINUX_STRING_H_


3 
	#_LINUX_STRING_H_


	)

7 
	~<°rög.h
>

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 331656

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ ((cË> 255 ? 255 : (c)))

	)

3 
	#LINUX_VERSION_MAJOR
 5

	)

4 
	#LINUX_VERSION_PATCHLEVEL
 15

	)

5 
	#LINUX_VERSION_SUBLEVEL
 136

	)

	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
,

195 
__i‚ame
[
IF_NAMESIZE
]Ë
__THROW


196 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2));

199 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

202 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

204 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

136 #i‡
__GLIBC_USE
 (
ISOC2X
)

138 
	#_PRINTF_NAN_LEN_MAX
 4

	)

143 
FILE
 *
°dö
;

144 
FILE
 *
°dout
;

145 
FILE
 *
°dîr
;

147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

154 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_ATFILE


158 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

159 c⁄° *
__√w
Ë
__THROW
;

162 #ifde‡
__USE_GNU


164 
	#RENAME_NOREPLACE
 (1 << 0)

	)

165 
	#RENAME_EXCHANGE
 (1 << 1)

	)

166 
	#RENAME_WHITEOUT
 (1 << 2)

	)

170 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

171 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

178 
	`f˛o£
 (
FILE
 *
__°ªam
);

180 #unde‡
__©å_dóŒoc_f˛o£


181 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
f˛o£
, 1)

	)

187 #i‚de‡
__USE_FILE_OFFSET64


188 
FILE
 *
	$tmpfûe
 ()

189 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

191 #ifde‡
__REDIRECT


192 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
)

193 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

195 
	#tmpfûe
 
tmpfûe64


	)

199 #ifde‡
__USE_LARGEFILE64


200 
FILE
 *
	$tmpfûe64
 ()

201 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

205 *
	$tm≤am
 ([
L_tm≤am
]Ë
__THROW
 
__wur
;

207 #ifde‡
__USE_MISC


210 *
	$tm≤am_r
 (
__s
[
L_tm≤am
]Ë
__THROW
 
__wur
;

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


222 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

223 
__THROW
 
__©åibuã_mÆloc__
 
__wur
 
__©å_dóŒoc_‰ì
;

230 
	`fÊush
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_MISC


239 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

242 #ifde‡
__USE_GNU


249 
	`f˛o£Æl
 ();

253 #i‚de‡
__USE_FILE_OFFSET64


258 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
)

260 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

265 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

266 c⁄° *
__ª°ri˘
 
__modes
,

267 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 #ifde‡
__REDIRECT


270 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

272 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

273 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

274 c⁄° *
__ª°ri˘
 
__modes
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

276 
__wur
;

278 
	#f›í
 
f›í64


	)

279 
	#‰e›í
 
‰e›í64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
)

285 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

286 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

291 #ifdef 
__USE_POSIX


293 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW


294 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

297 #ifdef 
__USE_GNU


300 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

301 c⁄° *
__ª°ri˘
 
__modes
,

302 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW


303 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

306 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

308 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

309 
__THROW
 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

314 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


315 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

317 #ifde‡
_WCHAR_H


321 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


322 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

328 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

332 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

333 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 #ifdef 
__USE_MISC


338 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
size_t
 
__size
Ë
__THROW
;

342 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

351 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

356 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

358 
	$•rötf
 (*
__ª°ri˘
 
__s
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

365 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

366 
__gnuc_va_li°
 
__¨g
);

371 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

373 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

376 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


378 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

379 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

380 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

382 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

383 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

384 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

387 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

390 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

391 
__gnuc_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

393 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

394 c⁄° *
__ª°ri˘
 
__fmt
, ...)

395 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

396 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

397 c⁄° *
__ª°ri˘
 
__fmt
, ...)

398 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

401 #ifde‡
__USE_XOPEN2K8


403 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

404 
__gnuc_va_li°
 
__¨g
)

405 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

406 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

415 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

416 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

423 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

424 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

430 
	~<bôs/Êﬂä.h
>

431 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

432 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

433 #ifde‡
__REDIRECT


434 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

436 
__isoc99_fsˇnf
Ë
__wur
;

437 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

438 
__isoc99_sˇnf
Ë
__wur
;

439 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

440 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

441 
__isoc99_ssˇnf
);

443 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

445 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

446 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

448 
	#fsˇnf
 
__isoc99_fsˇnf


	)

449 
	#sˇnf
 
__isoc99_sˇnf


	)

450 
	#ssˇnf
 
__isoc99_ssˇnf


	)

454 #ifdef 
__USE_ISOC99


459 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

460 
__gnuc_va_li°
 
__¨g
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

467 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

468 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

471 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

473 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

476 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

477 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

478 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

479 
	`__REDIRECT
 (
vfsˇnf
,

480 (
FILE
 *
__ª°ri˘
 
__s
,

481 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

482 
__isoc99_vfsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

485 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	`__REDIRECT_NTH
 (
vssˇnf
,

488 (c⁄° *
__ª°ri˘
 
__s
,

489 c⁄° *
__ª°ri˘
 
__f‹m©
,

490 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

491 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

492 #ñi‡!
deföed
 
__REDIRECT


493 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

494 c⁄° *
__ª°ri˘
 
__f‹m©
,

495 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

496 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

497 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

498 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

499 c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

501 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

502 
	#vsˇnf
 
__isoc99_vsˇnf


	)

503 
	#vssˇnf
 
__isoc99_vssˇnf


	)

513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

522 #ifde‡
__USE_POSIX199506


527 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

528 
	`gëch¨_u∆ocked
 ();

531 #ifde‡
__USE_MISC


538 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

549 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

550 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putch¨
 (
__c
);

558 #ifde‡
__USE_MISC


565 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

568 #ifde‡
__USE_POSIX199506


573 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putch¨_u∆ocked
 (
__c
);

578 #i‡
deföed
 
__USE_MISC
 \

579 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

581 
	`gëw
 (
FILE
 *
__°ªam
);

584 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

592 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

593 
__wur
 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

595 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

605 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

608 #ifde‡
__USE_GNU


615 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

616 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


617 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

621 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

632 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

633 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

634 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

635 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

636 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

637 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

645 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

646 
size_t
 *
__ª°ri˘
 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

655 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

661 
	`puts
 (c⁄° *
__s
);

668 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

675 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

684 #ifde‡
__USE_GNU


691 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

692 
FILE
 *
__ª°ri˘
 
__°ªam
);

695 #ifde‡
__USE_MISC


702 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

704 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

713 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

718 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

723 
	`ªwöd
 (
FILE
 *
__°ªam
);

730 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


731 #i‚de‡
__USE_FILE_OFFSET64


736 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

741 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

743 #ifde‡
__REDIRECT


744 
	`__REDIRECT
 (
f£eko
,

745 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

746 
f£eko64
);

747 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

749 
	#f£eko
 
f£eko64


	)

750 
	#·ñlo
 
·ñlo64


	)

755 #i‚de‡
__USE_FILE_OFFSET64


760 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

765 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

767 #ifde‡
__REDIRECT


768 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

769 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

770 
	`__REDIRECT
 (
f£ços
,

771 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

773 
	#fgëpos
 
fgëpos64


	)

774 
	#f£ços
 
f£ços64


	)

778 #ifde‡
__USE_LARGEFILE64


779 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

780 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

781 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

782 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

786 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

788 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

790 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

792 #ifde‡
__USE_MISC


794 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

795 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

796 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
	`≥º‹
 (c⁄° *
__s
);

807 #ifdef 
__USE_POSIX


809 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

812 #ifde‡
__USE_MISC


814 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

818 #ifde‡
__USE_POSIX2


823 
	`p˛o£
 (
FILE
 *
__°ªam
);

829 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
)

830 
__©åibuã_mÆloc__
 
	$__©å_dóŒoc
 (
p˛o£
, 1Ë
__wur
;

835 #ifdef 
__USE_POSIX


837 *
	$˘îmid
 (*
__s
Ë
__THROW


838 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

842 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


844 *
	$cu£rid
 (*
__s
)

845 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

849 #ifdef 
__USE_GNU


850 
ob°ack
;

853 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

854 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

855 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

856 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

857 c⁄° *
__ª°ri˘
 
__f‹m©
,

858 
__gnuc_va_li°
 
__¨gs
)

859 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

863 #ifde‡
__USE_POSIX199506


867 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

871 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

874 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

877 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


880 
	~<bôs/gë›t_posix.h
>

885 
	`__uÊow
 (
FILE
 *);

886 
	`__ovîÊow
 (
FILE
 *, );

890 #ifde‡
__USE_EXTERN_INLINES


891 
	~<bôs/°dio.h
>

893 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


894 
	~<bôs/°dio2.h
>

897 
	~<bôs/Êﬂä.h
>

898 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

899 
	~<bôs/°dio-ldbl.h
>

902 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 
	#_STDLIB_H
 1

	)

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


40 
	~<bôs/waôÊags.h
>

41 
	~<bôs/waô°©us.h
>

44 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

45 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

46 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

47 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

48 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

49 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

50 #ifde‡
__WIFCONTINUED


51 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
	~<bôs/Êﬂä.h
>

61 
	mquŸ
;

62 
	mªm
;

63 } 
	tdiv_t
;

66 #i‚de‡
__ldiv_t_deföed


69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

72 
	#__ldiv_t_deföed
 1

	)

75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


77 
__exãnsi⁄__
 struct

79 
	mquŸ
;

80 
	mªm
;

81 } 
	tŒdiv_t
;

82 
	#__Œdiv_t_deföed
 1

	)

87 
	#RAND_MAX
 2147483647

	)

92 
	#EXIT_FAILURE
 1

	)

93 
	#EXIT_SUCCESS
 0

	)

97 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

98 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

102 
	$©of
 (c⁄° *
__≈å
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

105 
	$©oi
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©ﬁ
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 #ifde‡
__USE_ISOC99


113 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

114 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

118 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

119 **
__ª°ri˘
 
__íd±r
)

120 
__THROW
 
	`__n⁄nuŒ
 ((1));

122 #ifdef 
__USE_ISOC99


124 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

125 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

127 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

128 **
__ª°ri˘
 
__íd±r
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1));

134 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

135 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

136 **
__ª°ri˘
 
__íd±r
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1));

140 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

141 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

142 **
__ª°ri˘
 
__íd±r
)

143 
__THROW
 
	`__n⁄nuŒ
 ((1));

146 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

147 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

148 **
__ª°ri˘
 
__íd±r
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1));

152 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

153 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

154 **
__ª°ri˘
 
__íd±r
)

155 
__THROW
 
	`__n⁄nuŒ
 ((1));

158 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

159 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

160 **
__ª°ri˘
 
__íd±r
)

161 
__THROW
 
	`__n⁄nuŒ
 ((1));

164 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

165 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1));

170 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

171 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

172 **
__ª°ri˘
 
__íd±r
)

173 
__THROW
 
	`__n⁄nuŒ
 ((1));

177 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

178 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

179 
__THROW
 
	`__n⁄nuŒ
 ((1));

181 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

182 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

183 
__THROW
 
	`__n⁄nuŒ
 ((1));

185 #ifde‡
__USE_MISC


187 
__exãnsi⁄__


188 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1));

192 
__exãnsi⁄__


193 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

194 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

195 
__THROW
 
	`__n⁄nuŒ
 ((1));

198 #ifde‡
__USE_ISOC99


200 
__exãnsi⁄__


201 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
__exãnsi⁄__


206 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

207 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

208 
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

213 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

214 
__f
)

215 
__THROW
 
	`__n⁄nuŒ
 ((3));

217 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

218 
__f
)

219 
__THROW
 
	`__n⁄nuŒ
 ((3));

221 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

222 
__f
)

223 
__THROW
 
	`__n⁄nuŒ
 ((3));

226 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

227 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

228 
_Flﬂt16
 
__f
)

229 
__THROW
 
	`__n⁄nuŒ
 ((3));

232 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

233 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

234 
_Flﬂt32
 
__f
)

235 
__THROW
 
	`__n⁄nuŒ
 ((3));

238 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

239 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

240 
_Flﬂt64
 
__f
)

241 
__THROW
 
	`__n⁄nuŒ
 ((3));

244 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

245 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

246 
_Flﬂt128
 
__f
)

247 
__THROW
 
	`__n⁄nuŒ
 ((3));

250 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

251 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

252 
_Flﬂt32x
 
__f
)

253 
__THROW
 
	`__n⁄nuŒ
 ((3));

256 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

257 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

258 
_Flﬂt64x
 
__f
)

259 
__THROW
 
	`__n⁄nuŒ
 ((3));

262 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

263 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

264 
_Flﬂt128x
 
__f
)

265 
__THROW
 
	`__n⁄nuŒ
 ((3));

269 #ifde‡
__USE_GNU


273 
	~<bôs/ty≥s/loˇÀ_t.h
>

275 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

276 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

277 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

279 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

280 **
__ª°ri˘
 
__íd±r
,

281 
__ba£
, 
loˇÀ_t
 
__loc
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

284 
__exãnsi⁄__


285 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

286 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

287 
loˇÀ_t
 
__loc
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

290 
__exãnsi⁄__


291 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

292 **
__ª°ri˘
 
__íd±r
,

293 
__ba£
, 
loˇÀ_t
 
__loc
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

296 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

297 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

300 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

301 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

304 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

305 **
__ª°ri˘
 
__íd±r
,

306 
loˇÀ_t
 
__loc
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

309 #i‡
__HAVE_FLOAT16


310 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

311 **
__ª°ri˘
 
__íd±r
,

312 
loˇÀ_t
 
__loc
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

316 #i‡
__HAVE_FLOAT32


317 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

318 **
__ª°ri˘
 
__íd±r
,

319 
loˇÀ_t
 
__loc
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

323 #i‡
__HAVE_FLOAT64


324 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

325 **
__ª°ri˘
 
__íd±r
,

326 
loˇÀ_t
 
__loc
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

330 #i‡
__HAVE_FLOAT128


331 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

332 **
__ª°ri˘
 
__íd±r
,

333 
loˇÀ_t
 
__loc
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

337 #i‡
__HAVE_FLOAT32X


338 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

339 **
__ª°ri˘
 
__íd±r
,

340 
loˇÀ_t
 
__loc
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

344 #i‡
__HAVE_FLOAT64X


345 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

346 **
__ª°ri˘
 
__íd±r
,

347 
loˇÀ_t
 
__loc
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

351 #i‡
__HAVE_FLOAT128X


352 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

353 **
__ª°ri˘
 
__íd±r
,

354 
loˇÀ_t
 
__loc
)

355 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

360 #ifde‡
__USE_EXTERN_INLINES


361 
__exã∫_ölöe
 

362 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

364  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

365 
	}
}

366 
__exã∫_ölöe
 

367 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

369  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

370 
	}
}

372 #ifde‡
__USE_ISOC99


373 
__exãnsi⁄__
 
__exã∫_ölöe
 

374 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

376  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

377 
	}
}

382 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


386 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

389 
	$a64l
 (c⁄° *
__s
)

390 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

394 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


395 
	~<sys/ty≥s.h
>

402 
	$øndom
 (Ë
__THROW
;

405 
	$§™dom
 (
__£ed
Ë
__THROW
;

411 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

412 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

416 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

419 #ifde‡
__USE_MISC


424 
	søndom_d©a


426 
öt32_t
 *
Âå
;

427 
öt32_t
 *
Ωå
;

428 
öt32_t
 *
°©e
;

429 
ønd_ty≥
;

430 
ønd_deg
;

431 
ønd_£p
;

432 
öt32_t
 *
íd_±r
;

435 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

436 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

442 
size_t
 
__°©ñí
,

443 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

444 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

447 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

448 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$ønd
 (Ë
__THROW
;

456 
	$§™d
 (
__£ed
Ë
__THROW
;

458 #ifde‡
__USE_POSIX199506


460 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

464 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


468 
	$dønd48
 (Ë
__THROW
;

469 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

472 
	$Ã™d48
 (Ë
__THROW
;

473 
	$ƒ™d48
 (
__xsubi
[3])

474 
__THROW
 
	`__n⁄nuŒ
 ((1));

477 
	$mønd48
 (Ë
__THROW
;

478 
	$jønd48
 (
__xsubi
[3])

479 
__THROW
 
	`__n⁄nuŒ
 ((1));

482 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

483 *
	$£ed48
 (
__£ed16v
[3])

484 
__THROW
 
	`__n⁄nuŒ
 ((1));

485 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

487 #ifde‡
__USE_MISC


491 
	sdønd48_d©a


493 
__x
[3];

494 
__ﬁd_x
[3];

495 
__c
;

496 
__öô
;

497 
__exãnsi⁄__
 
__a
;

502 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

503 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 
	$î™d48_r
 (
__xsubi
[3],

505 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

506 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

509 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

510 *
__ª°ri˘
 
__ªsu…
)

511 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

512 
	$ƒ™d48_r
 (
__xsubi
[3],

513 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

514 *
__ª°ri˘
 
__ªsu…
)

515 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

518 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

519 *
__ª°ri˘
 
__ªsu…
)

520 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

521 
	$jønd48_r
 (
__xsubi
[3],

522 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

523 *
__ª°ri˘
 
__ªsu…
)

524 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

527 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

528 
__THROW
 
	`__n⁄nuŒ
 ((2));

530 
	$£ed48_r
 (
__£ed16v
[3],

531 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$lc⁄g48_r
 (
__∑øm
[7],

534 
dønd48_d©a
 *
__buf„r
)

535 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

540 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


541 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

543 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

544 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

551 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

552 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

555 
	$‰ì
 (*
__±r
Ë
__THROW
;

557 #ifde‡
__USE_MISC


563 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

564 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


565 
	`__©åibuã_Æloc_size__
 ((2, 3))

566 
__©å_dóŒoc_‰ì
;

569 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

570 
__THROW
 
	`__©å_dóŒoc
 (
ªÆloˇºay
, 1);

573 #ifde‡
__USE_MISC


574 
	~<Æloˇ.h
>

577 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

578 || 
deföed
 
__USE_MISC


580 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


581 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

584 #ifde‡
__USE_XOPEN2K


586 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

590 #ifde‡
__USE_ISOC11


592 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

593 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_Æign__
 ((1))

594 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

598 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

602 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


606 #ifde‡
__˝lu•lus


607 "C++" 
	$©_quick_exô
 ((*
__func
) ())

608 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

610 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

614 #ifdef 
__USE_MISC


617 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

618 
__THROW
 
	`__n⁄nuŒ
 ((1));

624 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


630 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

633 #ifde‡
__USE_ISOC99


636 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

641 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__USE_GNU


646 *
	$£cuª_gëív
 (c⁄° *
__«me
)

647 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

650 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


654 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifde‡
__USE_XOPEN2K


660 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

661 
__THROW
 
	`__n⁄nuŒ
 ((2));

664 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

667 #ifdef 
__USE_MISC


671 
	$˛óªnv
 (Ë
__THROW
;

675 #i‡
deföed
 
__USE_MISC
 \

676 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

682 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

685 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 #i‚de‡
__USE_FILE_OFFSET64


695 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mk°emp
 
mk°emp64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__USE_MISC


716 #i‚de‡
__USE_FILE_OFFSET64


717 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

719 #ifde‡
__REDIRECT


720 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

721 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 
	#mk°emps
 
mk°emps64


	)

726 #ifde‡
__USE_LARGEFILE64


727 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

728 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

732 #ifde‡
__USE_XOPEN2K8


738 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__USE_GNU


748 #i‚de‡
__USE_FILE_OFFSET64


749 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

751 #ifde‡
__REDIRECT


752 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

753 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

755 
	#mko°emp
 
mko°emp64


	)

758 #ifde‡
__USE_LARGEFILE64


759 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

768 #i‚de‡
__USE_FILE_OFFSET64


769 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

770 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

772 #ifde‡
__REDIRECT


773 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

774 
__Êags
), 
mko°emps64
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

777 
	#mko°emps
 
mko°emps64


	)

780 #ifde‡
__USE_LARGEFILE64


781 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

782 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

794 #ifdef 
__USE_GNU


797 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_mÆloc__


799 
__©å_dóŒoc_‰ì
 
__wur
;

802 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


808 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

809 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

814 #i‚de‡
__COMPAR_FN_T


815 
	#__COMPAR_FN_T


	)

816 (*
	t__com∑r_‚_t
) (const *, const *);

818 #ifdef 
__USE_GNU


819 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

822 #ifde‡
__USE_GNU


823 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

828 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

829 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

830 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

832 #ifde‡
__USE_EXTERN_INLINES


833 
	~<bôs/°dlib-b£¨ch.h
>

838 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

839 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

840 #ifde‡
__USE_GNU


841 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

842 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

843 
	`__n⁄nuŒ
 ((1, 4));

848 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 #ifde‡
__USE_ISOC99


852 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

860 
div_t
 
	$div
 (
__numî
, 
__díom
)

861 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

862 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

863 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

865 #ifde‡
__USE_ISOC99


866 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

867 
__díom
)

868 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

872 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

873 || 
deföed
 
__USE_MISC


880 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

881 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

886 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

887 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

892 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

893 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

896 #ifde‡
__USE_MISC


898 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

899 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

900 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

901 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

902 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

903 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

904 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

905 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

910 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

911 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

912 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

914 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

915 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

917 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

918 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

919 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

921 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

922 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

923 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

924 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

930 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

937 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

941 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

942 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW


943 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

945 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

946 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

947 
__THROW


948 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 3)

949 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

951 #ifde‡
__USE_MISC


956 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

960 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


967 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

968 *c⁄° *
__ª°ri˘
 
__tokís
,

969 **
__ª°ri˘
 
__vÆuï
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

976 #ifde‡
__USE_XOPEN2KXSI


978 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

981 #ifde‡
__USE_XOPEN_EXTENDED


986 
	$gø¡±
 (
__fd
Ë
__THROW
;

990 
	$u∆ock±
 (
__fd
Ë
__THROW
;

995 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

998 #ifde‡
__USE_GNU


1002 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

1006 
	`gë±
 ();

1009 #ifde‡
__USE_MISC


1013 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1020 
	$ây¶Ÿ
 (Ë
__THROW
;

1023 
	~<bôs/°dlib-Êﬂt.h
>

1026 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1027 
	~<bôs/°dlib.h
>

1030 
	~<bôs/Êﬂä.h
>

1031 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

1032 
	~<bôs/°dlib-ldbl.h
>

1035 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

80 
	$__memcm≥q
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

81 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

84 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


87 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

88 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

90 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

92 #ifde‡
__OPTIMIZE__


93 
__exã∫_Æways_ölöe
 *

94 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


96  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

99 
__exã∫_Æways_ölöe
 const *

100 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


102  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

105 
	}
}

107 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__USE_GNU


114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

116 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

118 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


126 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

127 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

128 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

129 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

130 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

131 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

133 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

134 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

135 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

141 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

145 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

149 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

156 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

159 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

163 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

164 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

166 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

167 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

168 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

170 #ifde‡
__USE_XOPEN2K8


172 
	~<bôs/ty≥s/loˇÀ_t.h
>

175 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

176 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

179 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

180 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

181 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

184 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

185 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

187 *
	$°rdup
 (c⁄° *
__s
)

188 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

194 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

195 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

196 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

199 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


201 
	#°rdu∑
(
s
) \

202 (
__exãnsi⁄__
 \

204 c⁄° *
__ﬁd
 = (
s
); \

205 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

206 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 
	}
}))

	)

211 
	#°∫du∑
(
s
, 
n
) \

212 (
__exãnsi⁄__
 \

214 c⁄° *
__ﬁd
 = (
s
); \

215 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

216 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

217 
__√w
[
__Àn
] = '\0'; \

218 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

219 }))

	)

223 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


226 *
°rchr
 (*
__s
, 
__c
)

227 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

228 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

229 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

231 #ifde‡
__OPTIMIZE__


232 
__exã∫_Æways_ölöe
 *

233 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


235  
__buûtö_°rchr
 (
__s
, 
__c
);

238 
__exã∫_Æways_ölöe
 const *

239 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


241  
__buûtö_°rchr
 (
__s
, 
__c
);

246 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

247 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


253 *
	`°ºchr
 (*
__s
, 
__c
)

254 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

255 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

256 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__OPTIMIZE__


259 
__exã∫_Æways_ölöe
 *

260 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


262  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

265 
__exã∫_Æways_ölöe
 const *

266 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


268  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

271 
	}
}

273 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 #ifde‡
__USE_GNU


280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


281 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

282 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

283 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

284 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

286 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

293 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


303 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

305 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

306 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

308 #ifde‡
__OPTIMIZE__


309 
__exã∫_Æways_ölöe
 *

310 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


312  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

315 
__exã∫_Æways_ölöe
 const *

316 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


318  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

321 
	}
}

323 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

324 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


330 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

332 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

333 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 #ifde‡
__OPTIMIZE__


336 
__exã∫_Æways_ölöe
 *

337 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


339  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

342 
__exã∫_Æways_ölöe
 const *

343 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


345  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

348 
	}
}

350 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

351 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

362 c⁄° *
__ª°ri˘
 
__dñim
,

363 **
__ª°ri˘
 
__ßve_±r
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

365 #ifde‡
__USE_POSIX


366 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

367 **
__ª°ri˘
 
__ßve_±r
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

371 #ifde‡
__USE_GNU


373 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


374 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

375 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

377 c⁄° *
__√edÀ
)

378 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

380 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__USE_GNU


389 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

390 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

392 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

393 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

397 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

398 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

401 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

407 
size_t
 
	$°æí
 (c⁄° *
__s
)

408 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 #ifdef 
__USE_XOPEN2K8


413 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

414 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

419 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

420 #ifde‡
__USE_XOPEN2K


428 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


431 #ifde‡
__REDIRECT_NTH


432 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

433 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

434 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

435 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

437 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

439 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

444 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

445 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

448 #ifde‡
__USE_GNU


450 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

452 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

456 #ifde‡
__USE_XOPEN2K8


458 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

461 #ifde‡
__USE_MISC


462 
	~<°rögs.h
>

466 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

467 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

471 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

472 c⁄° *
__ª°ri˘
 
__dñim
)

473 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 #ifdef 
__USE_XOPEN2K8


478 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

480 #ifde‡
__USE_GNU


482 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

485 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

489 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

490 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

492 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

497 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

498 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

499 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

500 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

501 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 #ifdef 
__USE_GNU


506 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

507 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

510 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

513 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

514 
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 2));

516 #i‚de‡
ba£«me


521 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


522 "C++" *
	$ba£«me
 (*
__fûíame
)

523 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

524 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

525 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

527 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

532 #i‡
	`__GNUC_PREREQ
 (3,4)

533 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


535 
	~<bôs/°rög_f‹tifõd.h
>

539 
__END_DECLS


	@/usr/include/sys/epoll.h

18 #i‚def 
_SYS_EPOLL_H


19 
	#_SYS_EPOLL_H
 1

	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<bôs/ty≥s/sig£t_t.h
>

25 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

28 
	~<bôs/ïﬁl.h
>

30 #i‚de‡
__EPOLL_PACKED


31 
	#__EPOLL_PACKED


	)

35 
	eEPOLL_EVENTS


37 
	mEPOLLIN
 = 0x001,

38 
	#EPOLLIN
 
EPOLLIN


	)

39 
	mEPOLLPRI
 = 0x002,

40 
	#EPOLLPRI
 
EPOLLPRI


	)

41 
	mEPOLLOUT
 = 0x004,

42 
	#EPOLLOUT
 
EPOLLOUT


	)

43 
	mEPOLLRDNORM
 = 0x040,

44 
	#EPOLLRDNORM
 
EPOLLRDNORM


	)

45 
	mEPOLLRDBAND
 = 0x080,

46 
	#EPOLLRDBAND
 
EPOLLRDBAND


	)

47 
	mEPOLLWRNORM
 = 0x100,

48 
	#EPOLLWRNORM
 
EPOLLWRNORM


	)

49 
	mEPOLLWRBAND
 = 0x200,

50 
	#EPOLLWRBAND
 
EPOLLWRBAND


	)

51 
	mEPOLLMSG
 = 0x400,

52 
	#EPOLLMSG
 
EPOLLMSG


	)

53 
	mEPOLLERR
 = 0x008,

54 
	#EPOLLERR
 
EPOLLERR


	)

55 
	mEPOLLHUP
 = 0x010,

56 
	#EPOLLHUP
 
EPOLLHUP


	)

57 
	mEPOLLRDHUP
 = 0x2000,

58 
	#EPOLLRDHUP
 
EPOLLRDHUP


	)

59 
	mEPOLLEXCLUSIVE
 = 1u << 28,

60 
	#EPOLLEXCLUSIVE
 
EPOLLEXCLUSIVE


	)

61 
	mEPOLLWAKEUP
 = 1u << 29,

62 
	#EPOLLWAKEUP
 
EPOLLWAKEUP


	)

63 
	mEPOLLONESHOT
 = 1u << 30,

64 
	#EPOLLONESHOT
 
EPOLLONESHOT


	)

65 
	mEPOLLET
 = 1u << 31

66 
	#EPOLLET
 
EPOLLET


	)

71 
	#EPOLL_CTL_ADD
 1

	)

72 
	#EPOLL_CTL_DEL
 2

	)

73 
	#EPOLL_CTL_MOD
 3

	)

76 
	uïﬁl_d©a


78 *
	m±r
;

79 
	mfd
;

80 
uöt32_t
 
	mu32
;

81 
uöt64_t
 
	mu64
;

82 } 
	tïﬁl_d©a_t
;

84 
	sïﬁl_evít


86 
uöt32_t
 
	mevíts
;

87 
ïﬁl_d©a_t
 
	md©a
;

88 } 
	g__EPOLL_PACKED
;

91 
__BEGIN_DECLS


97 
	$ïﬁl_¸óã
 (
__size
Ë
__THROW
;

101 
	$ïﬁl_¸óã1
 (
__Êags
Ë
__THROW
;

110 
	$ïﬁl_˘l
 (
__ïfd
, 
__›
, 
__fd
,

111 
ïﬁl_evít
 *
__evít
Ë
__THROW
;

124 
	`ïﬁl_waô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

125 
__maxevíts
, 
__timeout
);

133 
	`ïﬁl_pwaô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

134 
__maxevíts
, 
__timeout
,

135 c⁄° 
__sig£t_t
 *
__ss
);

141 #i‚de‡
__USE_TIME_BITS64


142 
	`ïﬁl_pwaô2
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

143 
__maxevíts
, c⁄° 
time•ec
 *
__timeout
,

144 c⁄° 
__sig£t_t
 *
__ss
);

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
ïﬁl_pwaô2
, (
__ïfd
, 
ïﬁl_evít
 *
__ev
,

148 
__maxevs
,

149 c⁄° 
time•ec
 *
__timeout
,

150 c⁄° 
__sig£t_t
 *
__ss
),

151 
__ïﬁl_pwaô2_time64
);

153 
	#ïﬁl_pwaô2
 
__ïﬁl_pwaô2_time64


	)

157 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 #i‚de‡
__USE_TIME_BITS64


42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 #ifde‡
__REDIRECT


45 
	`__REDIRECT_NTH
 (
io˘l
, (
__fd
, 
__ªque°
, ...),

46 
__io˘l_time64
);

48 
	$__io˘l_time64
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

49 
	#io˘l
 
__io˘l_time64


	)

53 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‡!
deföed
 
MAXHOSTNAMELEN
 && deföed 
HOST_NAME_MAX


54 
	#MAXHOSTNAMELEN
 
HOST_NAME_MAX


	)

56 #i‚de‡
NCARGS


57 #ifde‡
ARG_MAX


58 
	#NCARGS
 
ARG_MAX


	)

62 
	#NCARGS
 
INT_MAX


	)

68 #i‚de‡
NOGROUP


69 
	#NOGROUP
 65535

	)

71 #i‚de‡
NODEV


72 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

77 #i‚de‡
DEV_BSIZE


78 
	#DEV_BSIZE
 512

	)

83 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

84 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

85 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

86 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

89 #i‚de‡
howm™y


90 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

92 #ifde‡
__GNUC__


93 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

94 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

95 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

97 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

99 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

102 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

103 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
)

56 
	`__n⁄nuŒ
 ((2));

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 c⁄° 
æimô
 *
__æimôs
),

76 
£ålimô64
Ë
	`__n⁄nuŒ
 ((2));

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW


84 
	`__n⁄nuŒ
 ((2));

89 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

91 #ifde‡
__USE_TIME_BITS64


92 #i‡
	`deföed
(
__REDIRECT_NTH
)

93 
	`__REDIRECT_NTH
 (
gërußge
, (
__rußge_who_t
 
__who
,

94 
rußge
 *
__ußge
),

95 
__gërußge64
);

97 
	#gërußge
 
__gërußge64


	)

105 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

109 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

110 
__THROW
;

112 
__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<bôs/ty≥s/°ru˘_iovec.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

33 
	~<bôs/sockë.h
>

35 #ifde‡
__USE_MISC


36 
	~<bôs/ty≥s/°ru˘_osockaddr.h
>

43 
	mSHUT_RD
 = 0,

44 
	#SHUT_RD
 
SHUT_RD


	)

45 
	mSHUT_WR
,

46 
	#SHUT_WR
 
SHUT_WR


	)

47 
	mSHUT_RDWR


48 
	#SHUT_RDWR
 
SHUT_RDWR


	)

57 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


58 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

59 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

63 
	#__SOCKADDR_ALLTYPES
 \

64 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

65 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

66 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

67 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

68 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

69 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

70 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

71 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

72 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

73 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

74 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

78 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

79 uni⁄ { 
	m__SOCKADDR_ALLTYPES


80 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

81 #unde‡
__SOCKADDR_ONETYPE


82 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

83 uni⁄ { 
	m__SOCKADDR_ALLTYPES


84 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

85 #unde‡
__SOCKADDR_ONETYPE


88 #ifde‡
__USE_GNU


90 
	smmsghdr


92 
msghdr
 
	mmsg_hdr
;

93 
	mmsg_Àn
;

102 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

108 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

109 
__fds
[2]Ë
__THROW
;

112 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

113 
__THROW
;

116 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

117 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

126 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

130 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

131 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

138 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

145 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

152 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

153 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

154 
sockÀn_t
 
__addr_Àn
);

163 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

173 #i‚de‡
__USE_TIME_BITS64


174 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

175 
__Êags
);

177 #ifde‡
__REDIRECT


178 
ssize_t
 
	`__REDIRECT
 (
£ndmsg
, (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

179 
__Êags
),

180 
__£ndmsg64
);

182 
ssize_t
 
	`__£ndmsg64
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

183 
__Êags
);

184 
	#£ndmsg
 
__£ndmsg64


	)

188 #ifde‡
__USE_GNU


194 #i‚de‡
__USE_TIME_BITS64


195 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

196 
__vÀn
, 
__Êags
);

198 #ifde‡
__REDIRECT


199 
	`__REDIRECT
 (
£ndmmsg
, (
__fd
, 
mmsghdr
 *
__vmesßges
,

200 
__vÀn
, 
__Êags
),

201 
__£ndmmsg64
);

203 
	`__£ndmmsg64
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

204 
__vÀn
, 
__Êags
);

205 
	#£ndmmsg
 
__£ndmmsg64


	)

215 #i‚de‡
__USE_TIME_BITS64


216 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

218 #ifde‡
__REDIRECT


219 
ssize_t
 
	`__REDIRECT
 (
ªcvmsg
,

220 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
),

221 
__ªcvmsg64
);

223 
ssize_t
 
	`__ªcvmsg64
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

224 
	#ªcvmsg
 
__ªcvmsg64


	)

228 #ifde‡
__USE_GNU


234 #i‚de‡
__USE_TIME_BITS64


235 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

236 
__vÀn
, 
__Êags
,

237 
time•ec
 *
__tmo
);

239 #ifde‡
__REDIRECT


240 
	`__REDIRECT
 (
ªcvmmsg
, (
__fd
, 
mmsghdr
 *
__vmesßges
,

241 
__vÀn
, 
__Êags
,

242 
time•ec
 *
__tmo
),

243 
__ªcvmmsg64
);

245 
	#ªcvmmsg
 
__ªcvmmsg64


	)

254 #i‚de‡
__USE_TIME_BITS64


255 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

256 *
__ª°ri˘
 
__›tvÆ
,

257 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

259 #ifde‡
__REDIRECT


260 
	`__REDIRECT_NTH
 (
gësock›t
,

261 (
__fd
, 
__Àvñ
, 
__›äame
,

262 *
__ª°ri˘
 
__›tvÆ
,

263 
sockÀn_t
 *
__ª°ri˘
 
__›éí
),

264 
__gësock›t64
);

266 
	$__gësock›t64
 (
__fd
, 
__Àvñ
, 
__›äame
,

267 *
__ª°ri˘
 
__›tvÆ
,

268 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

269 
	#gësock›t
 
__gësock›t64


	)

276 #i‚de‡
__USE_TIME_BITS64


277 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

278 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

280 #ifde‡
__REDIRECT


281 
	`__REDIRECT_NTH
 (
£tsock›t
,

282 (
__fd
, 
__Àvñ
, 
__›äame
,

283 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
),

284 
__£tsock›t64
);

286 
	$__£tsock›t64
 (
__fd
, 
__Àvñ
, 
__›äame
,

287 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

288 
	#£tsock›t
 
__£tsock›t64


	)

296 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

306 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

307 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

309 #ifde‡
__USE_GNU


314 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

315 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

324 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

327 #ifde‡
__USE_XOPEN2K


329 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

333 #ifde‡
__USE_MISC


337 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

342 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


343 
	~<bôs/sockë2.h
>

346 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #ifde‡
__USE_XOPEN2K8


30 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 
	~<bôs/ty≥s/time_t.h
>

39 #i‚de‡
__dev_t_deföed


40 
__dev_t
 
	tdev_t
;

41 
	#__dev_t_deföed


	)

44 #i‚de‡
__gid_t_deföed


45 
__gid_t
 
	tgid_t
;

46 
	#__gid_t_deföed


	)

49 #i‚de‡
__öo_t_deföed


50 #i‚de‡
__USE_FILE_OFFSET64


51 
__öo_t
 
	töo_t
;

53 
__öo64_t
 
	töo_t
;

55 
	#__öo_t_deföed


	)

58 #i‚de‡
__mode_t_deföed


59 
__mode_t
 
	tmode_t
;

60 
	#__mode_t_deföed


	)

63 #i‚de‡
__∆ök_t_deföed


64 
__∆ök_t
 
	t∆ök_t
;

65 
	#__∆ök_t_deföed


	)

68 #i‚de‡
__off_t_deföed


69 #i‚de‡
__USE_FILE_OFFSET64


70 
__off_t
 
	toff_t
;

72 
__off64_t
 
	toff_t
;

74 
	#__off_t_deföed


	)

77 #i‚de‡
__uid_t_deföed


78 
__uid_t
 
	tuid_t
;

79 
	#__uid_t_deföed


	)

83 #ifde‡
__USE_UNIX98


84 #i‚de‡
__blk˙t_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__blk˙t_t
 
	tblk˙t_t
;

88 
__blk˙t64_t
 
	tblk˙t_t
;

90 
	#__blk˙t_t_deföed


	)

93 #i‚de‡
__blksize_t_deföed


94 
__blksize_t
 
	tblksize_t
;

95 
	#__blksize_t_deföed


	)

99 
	g__BEGIN_DECLS


101 
	~<bôs/°©.h
>

103 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


104 
	#S_IFMT
 
__S_IFMT


	)

105 
	#S_IFDIR
 
__S_IFDIR


	)

106 
	#S_IFCHR
 
__S_IFCHR


	)

107 
	#S_IFBLK
 
__S_IFBLK


	)

108 
	#S_IFREG
 
__S_IFREG


	)

109 #ifde‡
__S_IFIFO


110 
	#S_IFIFO
 
__S_IFIFO


	)

112 #ifde‡
__S_IFLNK


113 
	#S_IFLNK
 
__S_IFLNK


	)

115 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
) \

116 && 
deföed
 
	g__S_IFSOCK


117 
	#S_IFSOCK
 
__S_IFSOCK


	)

123 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

125 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

126 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

127 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

128 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

129 #ifde‡
__S_IFIFO


130 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

132 #ifde‡
__S_IFLNK


133 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

136 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë0

	)

140 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K
) \

141 && 
deföed
 
	g__S_IFSOCK


142 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

143 #ñi‡
deföed
 
__USE_XOPEN2K


144 
	#S_ISSOCK
(
mode
Ë0

	)

151 #ifdef 
__USE_POSIX199309


152 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

153 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

154 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

160 
	#S_ISUID
 
__S_ISUID


	)

161 
	#S_ISGID
 
__S_ISGID


	)

163 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


165 
	#S_ISVTX
 
__S_ISVTX


	)

168 
	#S_IRUSR
 
__S_IREAD


	)

169 
	#S_IWUSR
 
__S_IWRITE


	)

170 
	#S_IXUSR
 
__S_IEXEC


	)

172 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

174 #ifde‡
__USE_MISC


175 
	#S_IREAD
 
S_IRUSR


	)

176 
	#S_IWRITE
 
S_IWUSR


	)

177 
	#S_IEXEC
 
S_IXUSR


	)

180 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

181 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

182 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

184 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

186 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

187 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

188 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

190 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

193 #ifdef 
__USE_MISC


195 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

196 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

197 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

199 
	#S_BLKSIZE
 512

	)

203 #i‚de‡
__USE_FILE_OFFSET64


205 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

206 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

210 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

212 #ifde‡
__USE_TIME_BITS64


213 #ifde‡
__REDIRECT_NTH


214 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

215 
°©
 *
__ª°ri˘
 
__buf
),

216 
__°©64_time64
)

217 
	`__n⁄nuŒ
 ((1, 2));

218 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
),

219 
__f°©64_time64
)

220 
	`__n⁄nuŒ
 ((2));

222 
	#°©
 
__°©64_time64


	)

223 
	#f°©
 
__f°©64_time64


	)

226 #ifde‡
__REDIRECT_NTH


227 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

228 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

229 
	`__n⁄nuŒ
 ((1, 2));

230 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

231 
	`__n⁄nuŒ
 ((2));

233 
	#°©
 
°©64


	)

234 
	#f°©
 
f°©64


	)

238 #ifde‡
__USE_LARGEFILE64


239 #i‚de‡
__USE_TIME_BITS64


240 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

241 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

242 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
°©64
, (c⁄° *
__ª°ri˘
 
__fûe
,

246 
°©64
 *
__ª°ri˘
 
__buf
),

247 
__°©64_time64
)

248 
	`__n⁄nuŒ
 ((1, 2));

249 
	`__REDIRECT_NTH
 (
f°©64
, (
__fd
, 
°©64
 *
__buf
),

250 
__f°©64_time64
)

251 
	`__n⁄nuŒ
 ((2));

253 
	#°©64
 
__°©64_time64


	)

254 
	#f°©64
 
__f°©64_time


	)

259 #ifde‡
__USE_ATFILE


263 #i‚de‡
__USE_FILE_OFFSET64


264 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

266 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

268 #ifde‡
__USE_TIME_BITS64


269 #ifde‡
__REDIRECT_NTH


270 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
,

272 
__Êag
),

273 
__f°©©64_time64
Ë
	`__n⁄nuŒ
 ((2, 3));

275 
	#f°©©
 
__f°©©64_time64


	)

278 #ifde‡
__REDIRECT_NTH


279 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

280 
°©
 *
__ª°ri˘
 
__buf
,

281 
__Êag
),

282 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

284 
	#f°©©
 
f°©©64


	)

289 #ifde‡
__USE_LARGEFILE64


290 #i‚de‡
__USE_TIME_BITS64


291 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

292 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

293 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

295 #ifde‡
__REDIRECT_NTH


296 
	`__REDIRECT_NTH
 (
f°©©64
, (
__fd
,

297 c⁄° *
__ª°ri˘
 
__fûe
,

298 
°©64
 *
__ª°ri˘
 
__buf
,

299 
__Êag
),

300 
__f°©©64_time64
)

301 
	`__n⁄nuŒ
 ((2, 3));

303 
	#f°©©64
 
__f°©©64_time64


	)

309 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


310 #i‚de‡
__USE_FILE_OFFSET64


313 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

314 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__USE_TIME_BITS64


317 #ifde‡
__REDIRECT_NTH


318 
	`__REDIRECT_NTH
 (
l°©
,

319 (c⁄° *
__ª°ri˘
 
__fûe
,

320 
°©
 *
__ª°ri˘
 
__buf
), 
__l°©64_time64
)

321 
	`__n⁄nuŒ
 ((1, 2));

323 
	#l°©
 
__l°©64_time64


	)

326 #ifde‡
__REDIRECT_NTH


327 
	`__REDIRECT_NTH
 (
l°©
,

328 (c⁄° *
__ª°ri˘
 
__fûe
,

329 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

330 
	`__n⁄nuŒ
 ((1, 2));

332 
	#l°©
 
l°©64


	)

336 #ifde‡
__USE_LARGEFILE64


337 #i‚de‡
__USE_TIME_BITS64


338 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

339 
°©64
 *
__ª°ri˘
 
__buf
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	`__REDIRECT_NTH
 (
l°©64
, (c⁄° *
__ª°ri˘
 
__fûe
,

343 
°©64
 *
__ª°ri˘
 
__buf
),

344 
__l°©64_time64
)

345 
	`__n⁄nuŒ
 ((1, 2));

352 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_MISC


359 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((1));

364 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


365 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

368 #ifde‡
__USE_ATFILE


371 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

372 
__Êag
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

380 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

382 #ifdef 
__USE_GNU


385 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

389 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1));

392 #ifde‡
__USE_ATFILE


396 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

397 
__THROW
 
	`__n⁄nuŒ
 ((2));

403 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


404 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

407 #ifde‡
__USE_ATFILE


411 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

412 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

418 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

419 
__THROW
 
	`__n⁄nuŒ
 ((1));

421 #ifde‡
__USE_ATFILE


425 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

426 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 #ifde‡
__USE_ATFILE


430 #i‚de‡
__USE_TIME_BITS64


433 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

434 c⁄° 
time•ec
 
__times
[2],

435 
__Êags
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

438 #ifde‡
__REDIRECT_NTH


439 
	`__REDIRECT_NTH
 (
utimíßt
, (
fd
, c⁄° *
__∑th
,

440 c⁄° 
time•ec
 
__times
[2],

441 
Êags
),

442 
__utimíßt64
Ë
	`__n⁄nuŒ
 ((2));

444 
	#utimíßt
 
__utimíßt64


	)

449 #ifde‡
__USE_XOPEN2K8


450 #i‚de‡
__USE_TIME_BITS64


452 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

455 #ifde‡
__REDIRECT_NTH


456 
	`__REDIRECT_NTH
 (
futimís
, (
fd
, c⁄° 
time•ec
 
__times
[2]),

457 
__futimís64
);

459 
	#futimís
 
__futimís64


	)

464 #ifde‡
__USE_GNU


465 
	~<bôs/°©x.h
>

468 
__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

29 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

42 
__loff_t
 
	tloff_t
;

45 #i‚de‡
__öo_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__öo_t
 
	töo_t
;

49 
__öo64_t
 
	töo_t
;

51 
	#__öo_t_deföed


	)

53 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


54 
__öo64_t
 
	töo64_t
;

55 
	#__öo64_t_deföed


	)

58 #i‚de‡
__dev_t_deföed


59 
__dev_t
 
	tdev_t
;

60 
	#__dev_t_deföed


	)

63 #i‚de‡
__gid_t_deföed


64 
__gid_t
 
	tgid_t
;

65 
	#__gid_t_deföed


	)

68 #i‚de‡
__mode_t_deföed


69 
__mode_t
 
	tmode_t
;

70 
	#__mode_t_deföed


	)

73 #i‚de‡
__∆ök_t_deföed


74 
__∆ök_t
 
	t∆ök_t
;

75 
	#__∆ök_t_deföed


	)

78 #i‚de‡
__uid_t_deföed


79 
__uid_t
 
	tuid_t
;

80 
	#__uid_t_deföed


	)

83 #i‚de‡
__off_t_deföed


84 #i‚de‡
__USE_FILE_OFFSET64


85 
__off_t
 
	toff_t
;

87 
__off64_t
 
	toff_t
;

89 
	#__off_t_deföed


	)

91 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


92 
__off64_t
 
	toff64_t
;

93 
	#__off64_t_deföed


	)

96 #i‚de‡
__pid_t_deföed


97 
__pid_t
 
	tpid_t
;

98 
	#__pid_t_deföed


	)

101 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

102 && !
deföed
 
__id_t_deföed


103 
__id_t
 
	tid_t
;

104 
	#__id_t_deföed


	)

107 #i‚de‡
__ssize_t_deföed


108 
__ssize_t
 
	tssize_t
;

109 
	#__ssize_t_deföed


	)

112 #ifdef 
__USE_MISC


113 #i‚de‡
__daddr_t_deföed


114 
__daddr_t
 
	tdaddr_t
;

115 
__ˇddr_t
 
	tˇddr_t
;

116 
	#__daddr_t_deföed


	)

120 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


121 
__key_t
 
	tkey_t
;

122 
	#__key_t_deföed


	)

125 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


126 
	~<bôs/ty≥s/˛ock_t.h
>

128 
	~<bôs/ty≥s/˛ockid_t.h
>

129 
	~<bôs/ty≥s/time_t.h
>

130 
	~<bôs/ty≥s/timî_t.h
>

132 #ifde‡
__USE_XOPEN


133 #i‚de‡
__u£c⁄ds_t_deföed


134 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

135 
	#__u£c⁄ds_t_deföed


	)

137 #i‚de‡
__su£c⁄ds_t_deföed


138 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

139 
	#__su£c⁄ds_t_deföed


	)

143 
	#__√ed_size_t


	)

144 
	~<°ddef.h
>

146 #ifde‡
__USE_MISC


148 
	tul⁄g
;

149 
	tush‹t
;

150 
	tuöt
;

155 
	~<bôs/°döt-öä.h
>

158 
__uöt8_t
 
	tu_öt8_t
;

159 
__uöt16_t
 
	tu_öt16_t
;

160 
__uöt32_t
 
	tu_öt32_t
;

161 
__uöt64_t
 
	tu_öt64_t
;

163 #i‡
__GNUC_PREREQ
 (2, 7)

164 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

166 
	tªgi°î_t
;

171 
	#__BIT_TYPES_DEFINED__
 1

	)

174 #ifdef 
__USE_MISC


176 
	~<ídün.h
>

179 
	~<sys/£À˘.h
>

183 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

184 && !
deföed
 
__blksize_t_deföed


185 
__blksize_t
 
	tblksize_t
;

186 
	#__blksize_t_deföed


	)

190 #i‚de‡
__USE_FILE_OFFSET64


191 #i‚de‡
__blk˙t_t_deföed


192 
__blk˙t_t
 
	tblk˙t_t
;

193 
	#__blk˙t_t_deföed


	)

195 #i‚de‡
__fsblk˙t_t_deföed


196 
__fsblk˙t_t
 
	tfsblk˙t_t
;

197 
	#__fsblk˙t_t_deföed


	)

199 #i‚de‡
__fsfû˙t_t_deföed


200 
__fsfû˙t_t
 
	tfsfû˙t_t
;

201 
	#__fsfû˙t_t_deföed


	)

204 #i‚de‡
__blk˙t_t_deföed


205 
__blk˙t64_t
 
	tblk˙t_t
;

206 
	#__blk˙t_t_deföed


	)

208 #i‚de‡
__fsblk˙t_t_deföed


209 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

210 
	#__fsblk˙t_t_deföed


	)

212 #i‚de‡
__fsfû˙t_t_deföed


213 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

214 
	#__fsfû˙t_t_deföed


	)

218 #ifde‡
__USE_LARGEFILE64


219 
__blk˙t64_t
 
	tblk˙t64_t
;

220 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

221 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

226 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


227 
	~<bôs/±hªadty≥s.h
>

230 
	g__END_DECLS


	@/usr/include/sys/utsname.h

22 #i‚def 
_SYS_UTSNAME_H


23 
	#_SYS_UTSNAME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ut¢ame.h
>

31 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


32 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

34 #i‚de‡
_UTSNAME_NODENAME_LENGTH


35 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

37 #i‚de‡
_UTSNAME_RELEASE_LENGTH


38 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

40 #i‚de‡
_UTSNAME_VERSION_LENGTH


41 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

43 #i‚de‡
_UTSNAME_MACHINE_LENGTH


44 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

48 
	sut¢ame


51 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

54 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

57 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

59 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

62 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

64 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

66 #ifde‡
__USE_GNU


67 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

69 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

74 #ifde‡
__USE_MISC


76 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

81 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/sys/vfs.h

4 
	~<sys/°©fs.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

74 #i‚de‡
__USE_TIME_BITS64


76 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

79 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

85 #ifde‡
__REDIRECT_NTH


86 
time_t
 
	`__REDIRECT_NTH
 (
time
, (time_à*
__timî
), 
__time64
);

87 
	`__REDIRECT_NTH
 (
dif·ime
, (
time_t
 
__time1
,Åime_à
__time0
),

88 
__dif·ime64
Ë
	`__©åibuã__
 ((
__c⁄°__
));

89 
time_t
 
	`__REDIRECT_NTH
 (
mktime
, (
tm
 *
__ç
), 
__mktime64
);

91 
	#time
 
__time64


	)

92 
	#dif·ime
 
__dif·ime64


	)

93 
	#mktime
 
__mktime64


	)

100 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

101 c⁄° *
__ª°ri˘
 
__f‹m©
,

102 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

104 #ifde‡
__USE_XOPEN


107 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

108 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

109 
__THROW
;

112 #ifde‡
__USE_XOPEN2K8


116 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

117 c⁄° *
__ª°ri˘
 
__f‹m©
,

118 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

119 
loˇÀ_t
 
__loc
Ë
__THROW
;

122 #ifde‡
__USE_GNU


123 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

124 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

125 
loˇÀ_t
 
__loc
Ë
__THROW
;

129 #i‚de‡
__USE_TIME_BITS64


132 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

136 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

139 #ifde‡
__REDIRECT_NTH


140 
tm
*
	`__REDIRECT_NTH
 (
gmtime
, (c⁄° 
time_t
 *
__timî
), 
__gmtime64
);

141 
tm
 *
	`__REDIRECT_NTH
 (
loˇ…ime
, (c⁄° 
time_t
 *
__timî
),

142 
__loˇ…ime64
);

144 
	#gmtime
 
__gmtime64


	)

145 
	#loˇ…ime
 
__loˇ…ime64


	)

150 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

151 #i‚de‡
__USE_TIME_BITS64


154 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

155 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

159 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

160 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

162 #ifde‡
__REDIRECT_NTH


163 
tm
*
	`__REDIRECT_NTH
 (
gmtime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

164 
tm
 *
__ª°ri˘
 
__ç
),

165 
__gmtime64_r
);

167 
tm
*
	`__REDIRECT_NTH
 (
loˇ…ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__t
,

168 
tm
 *
__ª°ri˘
 
__ç
),

169 
__loˇ…ime64_r
);

171 
	#gmtime_r
 
__gmtime64_r


	)

172 
	#loˇ…ime_r
 
__loˇ…ime_r


	)

179 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

182 #i‚de‡
__USE_TIME_BITS64


183 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

185 #ifde‡
__REDIRECT_NTH


186 *
	`__REDIRECT_NTH
 (
˘ime
, (c⁄° 
time_t
 *
__timî
), 
__˘ime64
);

188 
	#˘ime
 
__˘ime64


	)

192 #ifde‡
__USE_POSIX


197 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

198 *
__ª°ri˘
 
__buf
Ë
__THROW
;

201 #i‚de‡
__USE_TIME_BITS64


202 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

203 *
__ª°ri˘
 
__buf
Ë
__THROW
;

205 #ifde‡
__REDIRECT_NTH


206 *
	`__REDIRECT_NTH
 (
˘ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

207 *
__ª°ri˘
 
__buf
), 
__˘ime64_r
);

209 
	#˘ime_r
 
__˘ime64_r


	)

217 *
__tz«me
[2];

218 
__daylight
;

219 
__timez⁄e
;

222 #ifdef 
__USE_POSIX


224 *
tz«me
[2];

228 
	$tz£t
 (Ë
__THROW
;

231 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


232 
daylight
;

233 
timez⁄e
;

239 
	#__i¶óp
(
yór
) \

240 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

243 #ifde‡
__USE_MISC


247 #i‚de‡
__USE_TIME_BITS64


249 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

251 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

253 #ifde‡
__REDIRECT_NTH


254 
time_t
 
	`__REDIRECT_NTH
 (
timegm
, (
tm
 *
__ç
), 
__timegm64
);

255 
time_t
 
	`__REDIRECT_NTH
 (
timñoˇl
, (
tm
 *
__ç
), 
__mktime64
);

257 
	#timegm
 
__timegm64


	)

262 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

266 #ifde‡
__USE_POSIX199309


267 #i‚de‡
__USE_TIME_BITS64


272 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

273 
time•ec
 *
__ªmaöög
);

276 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

279 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

282 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

283 
__THROW
;

285 #ifde‡
__REDIRECT


286 
	`__REDIRECT
 (
«no¶ìp
, (c⁄° 
time•ec
 *
__ªque°ed_time
,

287 
time•ec
 *
__ªmaöög
),

288 
__«no¶ìp64
);

289 
	`__REDIRECT_NTH
 (
˛ock_gëªs
, (
˛ockid_t
 
__˛ock_id
,

290 
time•ec
 *
__ªs
),

291 
__˛ock_gëªs64
);

292 
	`__REDIRECT_NTH
 (
˛ock_gëtime
, (
˛ockid_t
 
__˛ock_id
, 

293 
time•ec
 *
__ç
), 
__˛ock_gëtime64
);

294 
	`__REDIRECT_NTH
 (
˛ock_£âime
, (
˛ockid_t
 
__˛ock_id
, const 

295 
time•ec
 *
__ç
), 
__˛ock_£âime64
);

297 
	#«no¶ìp
 
__«no¶ìp64


	)

298 
	#˛ock_gëªs
 
__˛ock_gëªs64


	)

299 
	#˛ock_gëtime
 
__˛ock_gëtime64


	)

300 
	#˛ock_£âime
 
__˛ock_£âime64


	)

305 #ifde‡
__USE_XOPEN2K


310 #i‚de‡
__USE_TIME_BITS64


311 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

312 c⁄° 
time•ec
 *
__ªq
,

313 
time•ec
 *
__ªm
);

315 #ifde‡
__REDIRECT


316 
	`__REDIRECT
 (
˛ock_«no¶ìp
, (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

317 c⁄° 
time•ec
 *
__ªq
,

318 
time•ec
 *
__ªm
),

319 
__˛ock_«no¶ìp_time64
);

321 
	#˛ock_«no¶ìp
 
__˛ock_«no¶ìp_time64


	)

326 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

331 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

332 
sigevít
 *
__ª°ri˘
 
__evp
,

333 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

336 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

339 #i‚de‡
__USE_TIME_BITS64


340 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

341 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

342 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

345 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

346 
__THROW
;

348 #ifde‡
__REDIRECT_NTH


349 
	`__REDIRECT_NTH
 (
timî_£âime
, (
timî_t
 
__timîid
, 
__Êags
,

350 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

351 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
),

352 
__timî_£âime64
);

354 
	`__REDIRECT_NTH
 (
timî_gëtime
, (
timî_t
 
__timîid
,

355 
ôimî•ec
 *
__vÆue
),

356 
__timî_gëtime64
);

358 
	#timî_£âime
 
__timî_£âime64


	)

359 
	#timî_gëtime
 
__timî_gëtime64


	)

364 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

368 #ifde‡
__USE_ISOC11


369 #i‚de‡
__USE_TIME_BITS64


371 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1));

374 #ifde‡
__REDIRECT_NTH


375 
	`__REDIRECT_NTH
 (
time•ec_gë
, (
time•ec
 *
__ts
, 
__ba£
),

376 
__time•ec_gë64
Ë
	`__n⁄nuŒ
 ((1));

378 
	#time•ec_gë
 
__time•ec_gë64


	)

384 #i‡
	`__GLIBC_USE
 (
ISOC2X
)

385 #i‚de‡
__USE_TIME_BITS64


387 
	$time•ec_gëªs
 (
time•ec
 *
__ts
, 
__ba£
)

388 
__THROW
;

390 #ifde‡
__REDIRECT_NTH


391 
	`__REDIRECT_NTH
 (
time•ec_gëªs
, (
time•ec
 *
__ts
,

392 
__ba£
),

393 
__time•ec_gëªs64
);

395 
	#time•ec_gëªs
 
__time•ec_gëªs64


	)

401 #ifde‡
__USE_XOPEN_EXTENDED


413 
gëd©e_îr
;

422 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

425 #ifde‡
__USE_GNU


436 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

437 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

440 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 
	$execvót
 (
__fd
, c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

301 *c⁄° 
__ívp
[], 
__Êags
)

302 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

305 #ifde‡
__USE_ATFILE


309 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

310 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

315 #i‚def 
_STDIO_H


316 
	#SEEK_SET
 0

	)

317 
	#SEEK_CUR
 1

	)

318 
	#SEEK_END
 2

	)

319 #ifde‡
__USE_GNU


320 
	#SEEK_DATA
 3

	)

321 
	#SEEK_HOLE
 4

	)

325 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


327 
	#L_SET
 
SEEK_SET


	)

328 
	#L_INCR
 
SEEK_CUR


	)

329 
	#L_XTND
 
SEEK_END


	)

338 #i‚de‡
__USE_FILE_OFFSET64


339 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

341 #ifde‡
__REDIRECT_NTH


342 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

343 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

344 
l£ek64
);

346 
	#l£ek
 
l£ek64


	)

349 #ifde‡
__USE_LARGEFILE64


350 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

351 
__THROW
;

358 
	`˛o£
 (
__fd
);

360 #ifde‡
__USE_MISC


363 
	$˛o£‰om
 (
__lowfd
Ë
__THROW
;

371 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur


372 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

378 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur


379 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

381 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


382 #i‚de‡
__USE_FILE_OFFSET64


389 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off_t
 
__off£t
Ë
__wur


391 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

398 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

399 
__off_t
 
__off£t
Ë
__wur


400 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

403 #ifde‡
__REDIRECT


404 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
),

406 
¥ód64
Ë
__wur


407 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

408 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

409 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

410 
pwrôe64
Ë
__wur


411 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

413 
	#¥ód
 
¥ód64


	)

414 
	#pwrôe
 
pwrôe64


	)

418 #ifde‡
__USE_LARGEFILE64


422 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

423 
__off64_t
 
__off£t
Ë
__wur


424 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

427 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

428 
__off64_t
 
__off£t
Ë
__wur


429 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

437 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

439 #ifde‡
__USE_GNU


442 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

452 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

464 
	`¶ìp
 (
__£c⁄ds
);

466 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

467 || 
deföed
 
__USE_MISC


472 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

473 
__THROW
;

480 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

489 
	`∑u£
 ();

493 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

494 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

503 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

508 #ifde‡
__USE_ATFILE


511 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

512 
__gid_t
 
__group
, 
__Êag
)

513 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

517 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

519 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


521 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

531 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

533 #ifdef 
__USE_GNU


537 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

540 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

541 || 
deföed
 
__USE_MISC


545 *
	$gëwd
 (*
__buf
)

546 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur


547 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

552 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

555 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

557 #ifde‡
__USE_GNU


560 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

564 **
__ívú⁄
;

565 #ifde‡
__USE_GNU


566 **
ívú⁄
;

572 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

573 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 #ifde‡
__USE_XOPEN2K8


578 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((2));

584 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

589 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

590 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

594 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

600 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

605 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

606 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

608 #ifde‡
__USE_GNU


611 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

612 *c⁄° 
__ívp
[])

613 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

617 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


619 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

624 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

630 
	~<bôs/c⁄‚ame.h
>

633 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

634 
__THROW
 
	`__n⁄nuŒ
 ((1));

637 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

640 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

642 #ifdef 
__USE_POSIX2


644 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW


645 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

650 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

653 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

656 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

659 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

660 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


661 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

668 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

670 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


682 
	$£çgΩ
 (Ë
__THROW
;

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur


712 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 1);

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #ifde‡
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_MISC


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 #ifde‡
__USE_GNU


793 
__pid_t
 
	$_F‹k
 (Ë
__THROW
;

799 *
	$ây«me
 (
__fd
Ë
__THROW
;

803 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

804 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur


805 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

809 
	$ißây
 (
__fd
Ë
__THROW
;

811 #ifde‡
__USE_MISC


814 
	$ây¶Ÿ
 (Ë
__THROW
;

819 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

822 #ifde‡
__USE_ATFILE


825 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

826 c⁄° *
__to
, 
__Êags
)

827 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

830 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


832 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

838 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

839 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur


841 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

845 #ifde‡
__USE_ATFILE


847 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

848 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

851 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

852 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur


854 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 3, 4);

858 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_ATFILE


862 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

863 
__THROW
 
	`__n⁄nuŒ
 ((2));

867 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

871 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

874 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

881 *
	`gëlogö
 ();

882 #ifde‡
__USE_POSIX199506


889 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1))

890 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

893 #ifdef 
__USE_MISC


895 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #ifdef 
__USE_POSIX2


903 
	~<bôs/gë›t_posix.h
>

907 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


911 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

912 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

916 #i‡
deföed
 
__USE_MISC


919 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

924 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

930 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

931 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur


932 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

933 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

939 
	$vh™gup
 (Ë
__THROW
;

942 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

951 
size_t
 
__off£t
, 
__sˇÀ
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

958 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

962 *
	$gëu£rshñl
 (Ë
__THROW
;

963 
	$ídu£rshñl
 (Ë
__THROW
;

964 
	$£tu£rshñl
 (Ë
__THROW
;

970 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

974 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

977 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

981 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

989 
	`fsync
 (
__fd
);

992 #ifde‡
__USE_GNU


995 
	$syncfs
 (
__fd
Ë
__THROW
;

999 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1002 
	`gëho°id
 ();

1005 
	$sync
 (Ë
__THROW
;

1008 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


1011 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1016 
	$gëdèbÀsize
 (Ë
__THROW
;

1022 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1027 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1029 #ifde‡
__REDIRECT_NTH


1030 
	`__REDIRECT_NTH
 (
åunˇã
,

1031 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1032 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1034 
	#åunˇã
 
åunˇã64


	)

1037 #ifde‡
__USE_LARGEFILE64


1038 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1044 #i‡
deföed
 
__USE_POSIX199309
 \

1045 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1048 #i‚de‡
__USE_FILE_OFFSET64


1049 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1051 #ifde‡
__REDIRECT_NTH


1052 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1053 
·runˇã64
Ë
__wur
;

1055 
	#·runˇã
 
·runˇã64


	)

1058 #ifde‡
__USE_LARGEFILE64


1059 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1065 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1066 || 
deföed
 
__USE_MISC


1070 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1076 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1080 #ifde‡
__USE_MISC


1091 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1096 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1108 
	#F_ULOCK
 0

	)

1109 
	#F_LOCK
 1

	)

1110 
	#F_TLOCK
 2

	)

1111 
	#F_TEST
 3

	)

1113 #i‚de‡
__USE_FILE_OFFSET64


1114 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1116 #ifde‡
__REDIRECT


1117 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1118 
lockf64
Ë
__wur
;

1120 
	#lockf
 
lockf64


	)

1123 #ifde‡
__USE_LARGEFILE64


1124 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1129 #ifde‡
__USE_GNU


1134 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1135 (
__exãnsi⁄__
 \

1136 ({ 
__ªsu…
; \

1137 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1138 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1139 
__ªsu…
; 
	}
}))

	)

1142 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1143 
__outfd
, 
__off64_t
 *
__poutoff
,

1144 
size_t
 
__Àngth
, 
__Êags
);

1147 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1150 
fd©async
 (
__fûdes
);

1153 #ifde‡
__USE_MISC


1159 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1160 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #ifdef 
__USE_XOPEN


1168 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1169 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2))

1170 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3))

1171 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

1178 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1180 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1183 *
	`cu£rid
 (*
__s
);

1189 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1190 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1191 (*
__∑ª¡
) (),

1192 (*
__chûd
Ë()Ë
__THROW
;

1195 #ifde‡
__USE_MISC


1198 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur


1199 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

1202 #ifde‡
__USE_GNU


1208 
	$˛o£_ønge
 (
__fd
, 
__max_fd
,

1209 
__Êags
Ë
__THROW
;

1213 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1214 
	~<bôs/uni°d.h
>

1218 
	~<bôs/uni°d_ext.h
>

1220 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.11"

	)

41 
	#ZLIB_VERNUM
 0x12b0

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 11

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

81 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

82 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

84 
öã∫Æ_°©e
;

86 
	sz_°ªam_s
 {

87 
z_c⁄°
 
Byãf
 *
√xt_ö
;

88 
uI¡
 
avaû_ö
;

89 
uL⁄g
 
tŸÆ_ö
;

91 
Byãf
 *
√xt_out
;

92 
uI¡
 
avaû_out
;

93 
uL⁄g
 
tŸÆ_out
;

95 
z_c⁄°
 *
msg
;

96 
öã∫Æ_°©e
 
FAR
 *
°©e
;

98 
Æloc_func
 
zÆloc
;

99 
‰ì_func
 
z‰ì
;

100 
voidpf
 
›aque
;

102 
d©a_ty≥
;

104 
uL⁄g
 
adÀr
;

105 
uL⁄g
 
ª£rved
;

106 } 
	tz_°ªam
;

108 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

114 
	sgz_hódî_s
 {

115 
ãxt
;

116 
uL⁄g
 
time
;

117 
xÊags
;

118 
os
;

119 
Byãf
 *
exåa
;

120 
uI¡
 
exåa_Àn
;

121 
uI¡
 
exåa_max
;

122 
Byãf
 *
«me
;

123 
uI¡
 
«me_max
;

124 
Byãf
 *
commít
;

125 
uI¡
 
comm_max
;

126 
h¸c
;

127 
d⁄e
;

129 } 
	tgz_hódî
;

131 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

168 
	#Z_NO_FLUSH
 0

	)

169 
	#Z_PARTIAL_FLUSH
 1

	)

170 
	#Z_SYNC_FLUSH
 2

	)

171 
	#Z_FULL_FLUSH
 3

	)

172 
	#Z_FINISH
 4

	)

173 
	#Z_BLOCK
 5

	)

174 
	#Z_TREES
 6

	)

177 
	#Z_OK
 0

	)

178 
	#Z_STREAM_END
 1

	)

179 
	#Z_NEED_DICT
 2

	)

180 
	#Z_ERRNO
 (-1)

	)

181 
	#Z_STREAM_ERROR
 (-2)

	)

182 
	#Z_DATA_ERROR
 (-3)

	)

183 
	#Z_MEM_ERROR
 (-4)

	)

184 
	#Z_BUF_ERROR
 (-5)

	)

185 
	#Z_VERSION_ERROR
 (-6)

	)

190 
	#Z_NO_COMPRESSION
 0

	)

191 
	#Z_BEST_SPEED
 1

	)

192 
	#Z_BEST_COMPRESSION
 9

	)

193 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

196 
	#Z_FILTERED
 1

	)

197 
	#Z_HUFFMAN_ONLY
 2

	)

198 
	#Z_RLE
 3

	)

199 
	#Z_FIXED
 4

	)

200 
	#Z_DEFAULT_STRATEGY
 0

	)

203 
	#Z_BINARY
 0

	)

204 
	#Z_TEXT
 1

	)

205 
	#Z_ASCII
 
Z_TEXT


	)

206 
	#Z_UNKNOWN
 2

	)

209 
	#Z_DEFLATED
 8

	)

212 
	#Z_NULL
 0

	)

214 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

220 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

250 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

363 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

400 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

520 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

611 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

612 c⁄° 
Byãf
 *
di˘i⁄¨y
,

613 
uI¡
 
di˘Lígth
));

655 
ZEXTERN
 
ZEXPORT
 
deÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

656 
Byãf
 *
di˘i⁄¨y
,

657 
uI¡
 *
di˘Lígth
));

677 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

678 
z_°ªamp
 
sour˚
));

695 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

706 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

707 
Àvñ
,

708 
°øãgy
));

744 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

745 
good_Àngth
,

746 
max_œzy
,

747 
ni˚_Àngth
,

748 
max_chaö
));

761 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

762 
uL⁄g
 
sour˚Lí
));

776 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

777 *
≥ndög
,

778 *
bôs
));

791 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

792 
bôs
,

793 
vÆue
));

808 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

809 
gz_hódîp
 
hód
));

885 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

886 c⁄° 
Byãf
 *
di˘i⁄¨y
,

887 
uI¡
 
di˘Lígth
));

908 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

909 
Byãf
 *
di˘i⁄¨y
,

910 
uI¡
 *
di˘Lígth
));

923 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

942 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

943 
z_°ªamp
 
sour˚
));

958 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

968 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

969 
wödowBôs
));

982 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

983 
bôs
,

984 
vÆue
));

1003 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

1031 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

1032 
gz_hódîp
 
hód
));

1093 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1094 
	tz_c⁄°
 
	tFAR
 * FAR *));

1095 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1097 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1098 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1099 
out_func
 
out
, 
FAR
 *
out_desc
));

1167 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1175 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1216 #i‚de‡
Z_SOLO


1228 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1229 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1243 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1244 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1245 
Àvñ
));

1259 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1266 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1267 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1284 
ZEXTERN
 
ZEXPORT
 
uncom¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1285 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 *
sour˚Lí
));

1301 
gzFûe_s
 *
	tgzFûe
;

1341 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1364 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1380 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1391 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1421 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gz‰ód
 
OF
((
voidp
 
buf
, z_size_à
size
, z_size_à
nôems
,

1422 
gzFûe
 
fûe
));

1447 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1448 
voidpc
 
buf
, 
Àn
));

1455 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gzfwrôe
 
OF
((
voidpc
 
buf
, z_size_à
size
,

1456 
z_size_t
 
nôems
, 
gzFûe
 
fûe
));

1469 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1484 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1492 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1505 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1511 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1520 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1532 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1567 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1595 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1610 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1631 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1644 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1645 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1656 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1672 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1689 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1708 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1709 
z_size_t
 
Àn
));

1726 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1743 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1744 
z_size_t
 
Àn
));

1765 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1766 c⁄° *
vîsi⁄
, 
°ªam_size
));

1767 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1768 c⁄° *
vîsi⁄
, 
°ªam_size
));

1769 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1770 
wödowBôs
, 
memLevñ
,

1771 
°øãgy
, c⁄° *
vîsi⁄
,

1772 
°ªam_size
));

1773 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1774 c⁄° *
vîsi⁄
, 
°ªam_size
));

1775 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1776 
FAR
 *
wödow
,

1777 c⁄° *
vîsi⁄
,

1778 
°ªam_size
));

1779 #ifde‡
Z_PREFIX_SET


1780 
	#z_deÊ©eInô
(
°rm
, 
Àvñ
) \

1781 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1782 
	#z_öÊ©eInô
(
°rm
) \

1783 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1784 
	#z_deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1785 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1786 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1787 
	#z_öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1788 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1789 ()(
z_°ªam
))

	)

1790 
	#z_öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1791 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1792 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1794 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1795 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1796 
	#öÊ©eInô
(
°rm
) \

1797 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1798 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1799 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1800 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1801 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1802 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1803 ()(
z_°ªam
))

	)

1804 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1805 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1806 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1809 #i‚de‡
Z_SOLO


1818 
	sgzFûe_s
 {

1819 
have
;

1820 *
√xt
;

1821 
z_off64_t
 
pos
;

1823 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1824 #ifde‡
Z_PREFIX_SET


1825 #unde‡
z_gzgëc


1826 
	#z_gzgëc
(
g
) \

1827 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1829 
	#gzgëc
(
g
) \

1830 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1839 #ifde‡
Z_LARGE64


1840 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1841 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1842 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1843 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1844 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1845 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1848 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1849 #ifde‡
Z_PREFIX_SET


1850 
	#z_gz›í
 
z_gz›í64


	)

1851 
	#z_gz£ek
 
z_gz£ek64


	)

1852 
	#z_gzãŒ
 
z_gzãŒ64


	)

1853 
	#z_gzoff£t
 
z_gzoff£t64


	)

1854 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1855 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1857 
	#gz›í
 
gz›í64


	)

1858 
	#gz£ek
 
gz£ek64


	)

1859 
	#gzãŒ
 
gzãŒ64


	)

1860 
	#gzoff£t
 
gzoff£t64


	)

1861 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1862 
	#¸c32_comböe
 
¸c32_comböe64


	)

1864 #i‚de‡
Z_LARGE64


1865 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1866 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1867 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1868 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1869 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1870 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1873 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1874 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1875 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1876 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1877 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1878 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1883 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1884 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1889 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1890 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1891 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1892 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1893 
ZEXTERN
 
ZEXPORT
 
öÊ©eVÆid©e
 
OF
((
z_°ªamp
, ));

1894 
ZEXTERN
 
ZEXPORT
 
öÊ©eCodesU£d
 
OF
 ((
z_°ªamp
));

1895 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1896 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1897 #i‡(
deföed
(
_WIN32
Ë|| deföed(
__CYGWIN__
)Ë&& !deföed(
Z_SOLO
)

1898 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1899 c⁄° *
mode
));

1901 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1902 #i‚de‡
Z_SOLO


1903 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1904 c⁄° *
f‹m©
,

1905 
va_li°
 
va
));

1909 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm-generic/hugetlb_encode.h

1 #i‚de‡
_ASM_GENERIC_HUGETLB_ENCODE_H_


2 
	#_ASM_GENERIC_HUGETLB_ENCODE_H_


	)

20 
	#HUGETLB_FLAG_ENCODE_SHIFT
 26

	)

21 
	#HUGETLB_FLAG_ENCODE_MASK
 0x3f

	)

23 
	#HUGETLB_FLAG_ENCODE_16KB
 (14 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

24 
	#HUGETLB_FLAG_ENCODE_64KB
 (16 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

25 
	#HUGETLB_FLAG_ENCODE_512KB
 (19 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

26 
	#HUGETLB_FLAG_ENCODE_1MB
 (20 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

27 
	#HUGETLB_FLAG_ENCODE_2MB
 (21 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

28 
	#HUGETLB_FLAG_ENCODE_8MB
 (23 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

29 
	#HUGETLB_FLAG_ENCODE_16MB
 (24 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

30 
	#HUGETLB_FLAG_ENCODE_32MB
 (25 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

31 
	#HUGETLB_FLAG_ENCODE_256MB
 (28 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

32 
	#HUGETLB_FLAG_ENCODE_512MB
 (29 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

33 
	#HUGETLB_FLAG_ENCODE_1GB
 (30 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

34 
	#HUGETLB_FLAG_ENCODE_2GB
 (31 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

35 
	#HUGETLB_FLAG_ENCODE_16GB
 (34 << 
HUGETLB_FLAG_ENCODE_SHIFT
)

	)

	@/usr/include/asm/bitsperlong.h

2 #i‚de‡
__ASM_X86_BITSPERLONG_H


3 
	#__ASM_X86_BITSPERLONG_H


	)

5 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

6 
	#__BITS_PER_LONG
 64

	)

8 
	#__BITS_PER_LONG
 32

	)

11 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/mman.h

2 #i‚de‡
_ASM_X86_MMAN_H


3 
	#_ASM_X86_MMAN_H


	)

5 
	#MAP_32BIT
 0x40

	)

7 #ifde‡
CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS


16 
	#¨ch_vm_gë_∑ge_¥Ÿ
(
vm_Êags
Ë
	`__pg¥Ÿ
( \

17 ((
vm_Êags
Ë& 
VM_PKEY_BIT0
 ? 
_PAGE_PKEY_BIT0
 : 0) | \

18 ((
vm_Êags
Ë& 
VM_PKEY_BIT1
 ? 
_PAGE_PKEY_BIT1
 : 0) | \

19 ((
vm_Êags
Ë& 
VM_PKEY_BIT2
 ? 
_PAGE_PKEY_BIT2
 : 0) | \

20 ((
vm_Êags
Ë& 
VM_PKEY_BIT3
 ? 
_PAGE_PKEY_BIT3
 : 0))

	)

22 
	#¨ch_ˇlc_vm_¥Ÿ_bôs
(
¥Ÿ
, 
key
) ( \

23 ((
key
Ë& 0x1 ? 
VM_PKEY_BIT0
 : 0) | \

24 ((
key
Ë& 0x2 ? 
VM_PKEY_BIT1
 : 0) | \

25 ((
key
Ë& 0x4 ? 
VM_PKEY_BIT2
 : 0) | \

26 ((
key
Ë& 0x8 ? 
VM_PKEY_BIT3
 : 0))

	)

29 
	~<asm-gíîic/mm™.h
>

	@/usr/include/asm/ptrace.h

2 #i‚de‡
_ASM_X86_PTRACE_H


3 
	#_ASM_X86_PTRACE_H


	)

6 
	~<asm/±ø˚-abi.h
>

7 
	~<asm/¥o˚ss‹-Êags.h
>

10 #i‚de‡
__ASSEMBLY__


12 #ifde‡
__i386__


17 
	s±_ªgs
 {

18 
	mebx
;

19 
	mecx
;

20 
	medx
;

21 
	mesi
;

22 
	medi
;

23 
	mebp
;

24 
	móx
;

25 
	mxds
;

26 
	mxes
;

27 
	mxfs
;

28 
	mxgs
;

29 
	m‹ig_óx
;

30 
	meù
;

31 
	mxcs
;

32 
	meÊags
;

33 
	me•
;

34 
	mxss
;

41 
	s±_ªgs
 {

46 
	mr15
;

47 
	mr14
;

48 
	mr13
;

49 
	mr12
;

50 
	mrbp
;

51 
	mrbx
;

53 
	mr11
;

54 
	mr10
;

55 
	mr9
;

56 
	mr8
;

57 
	møx
;

58 
	mrcx
;

59 
	mrdx
;

60 
	mrsi
;

61 
	mrdi
;

66 
	m‹ig_øx
;

68 
	mrù
;

69 
	mcs
;

70 
	meÊags
;

71 
	mr•
;

72 
	mss
;

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm/types.h

1 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_UNISTD_32_H


2 
	#_ASM_UNISTD_32_H


	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

351 
	#__NR_sched_£èâr
 351

	)

352 
	#__NR_sched_gë©å
 352

	)

353 
	#__NR_ª«mót2
 353

	)

354 
	#__NR_£ccomp
 354

	)

355 
	#__NR_gëøndom
 355

	)

356 
	#__NR_memfd_¸óã
 356

	)

357 
	#__NR_bpf
 357

	)

358 
	#__NR_execvót
 358

	)

359 
	#__NR_sockë
 359

	)

360 
	#__NR_sockë∑ú
 360

	)

361 
	#__NR_böd
 361

	)

362 
	#__NR_c⁄√˘
 362

	)

363 
	#__NR_li°í
 363

	)

364 
	#__NR_ac˚±4
 364

	)

365 
	#__NR_gësock›t
 365

	)

366 
	#__NR_£tsock›t
 366

	)

367 
	#__NR_gësock«me
 367

	)

368 
	#__NR_gë≥î«me
 368

	)

369 
	#__NR_£ndto
 369

	)

370 
	#__NR_£ndmsg
 370

	)

371 
	#__NR_ªcv‰om
 371

	)

372 
	#__NR_ªcvmsg
 372

	)

373 
	#__NR_shutdown
 373

	)

374 
	#__NR_u£rÁu…fd
 374

	)

375 
	#__NR_memb¨rõr
 375

	)

376 
	#__NR_mlock2
 376

	)

377 
	#__NR_c›y_fûe_ønge
 377

	)

378 
	#__NR_¥ódv2
 378

	)

379 
	#__NR_pwrôev2
 379

	)

380 
	#__NR_pkey_m¥Ÿe˘
 380

	)

381 
	#__NR_pkey_Æloc
 381

	)

382 
	#__NR_pkey_‰ì
 382

	)

383 
	#__NR_°©x
 383

	)

384 
	#__NR_¨ch_¥˘l
 384

	)

385 
	#__NR_io_pgëevíts
 385

	)

386 
	#__NR_r£q
 386

	)

387 
	#__NR_£mgë
 393

	)

388 
	#__NR_£m˘l
 394

	)

389 
	#__NR_shmgë
 395

	)

390 
	#__NR_shm˘l
 396

	)

391 
	#__NR_shm©
 397

	)

392 
	#__NR_shmdt
 398

	)

393 
	#__NR_msggë
 399

	)

394 
	#__NR_msg¢d
 400

	)

395 
	#__NR_msgrcv
 401

	)

396 
	#__NR_msg˘l
 402

	)

397 
	#__NR_˛ock_gëtime64
 403

	)

398 
	#__NR_˛ock_£âime64
 404

	)

399 
	#__NR_˛ock_adjtime64
 405

	)

400 
	#__NR_˛ock_gëªs_time64
 406

	)

401 
	#__NR_˛ock_«no¶ìp_time64
 407

	)

402 
	#__NR_timî_gëtime64
 408

	)

403 
	#__NR_timî_£âime64
 409

	)

404 
	#__NR_timîfd_gëtime64
 410

	)

405 
	#__NR_timîfd_£âime64
 411

	)

406 
	#__NR_utimíßt_time64
 412

	)

407 
	#__NR_p£À˘6_time64
 413

	)

408 
	#__NR_µﬁl_time64
 414

	)

409 
	#__NR_io_pgëevíts_time64
 416

	)

410 
	#__NR_ªcvmmsg_time64
 417

	)

411 
	#__NR_mq_timed£nd_time64
 418

	)

412 
	#__NR_mq_timedª˚ive_time64
 419

	)

413 
	#__NR_£mtimed›_time64
 420

	)

414 
	#__NR_π_sigtimedwaô_time64
 421

	)

415 
	#__NR_fuãx_time64
 422

	)

416 
	#__NR_sched_º_gë_öãrvÆ_time64
 423

	)

417 
	#__NR_pidfd_£nd_sig«l
 424

	)

418 
	#__NR_io_urög_£tup
 425

	)

419 
	#__NR_io_urög_íãr
 426

	)

420 
	#__NR_io_urög_ªgi°î
 427

	)

421 
	#__NR_›í_åì
 428

	)

422 
	#__NR_move_mou¡
 429

	)

423 
	#__NR_fs›í
 430

	)

424 
	#__NR_fsc⁄fig
 431

	)

425 
	#__NR_fsmou¡
 432

	)

426 
	#__NR_f•ick
 433

	)

427 
	#__NR_pidfd_›í
 434

	)

428 
	#__NR_˛⁄e3
 435

	)

429 
	#__NR_˛o£_ønge
 436

	)

430 
	#__NR_›í©2
 437

	)

431 
	#__NR_pidfd_gëfd
 438

	)

432 
	#__NR_Ác˚sßt2
 439

	)

433 
	#__NR_¥o˚ss_madvi£
 440

	)

434 
	#__NR_ïﬁl_pwaô2
 441

	)

435 
	#__NR_mou¡_£èâr
 442

	)

436 
	#__NR_quŸa˘l_fd
 443

	)

437 
	#__NR_œndlock_¸óã_ruÀ£t
 444

	)

438 
	#__NR_œndlock_add_ruÀ
 445

	)

439 
	#__NR_œndlock_ª°ri˘_£lf
 446

	)

440 
	#__NR_memfd_£¸ë
 447

	)

441 
	#__NR_¥o˚ss_mªÀa£
 448

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_UNISTD_64_H


2 
	#_ASM_UNISTD_64_H


	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

318 
	#__NR_sched_£èâr
 314

	)

319 
	#__NR_sched_gë©å
 315

	)

320 
	#__NR_ª«mót2
 316

	)

321 
	#__NR_£ccomp
 317

	)

322 
	#__NR_gëøndom
 318

	)

323 
	#__NR_memfd_¸óã
 319

	)

324 
	#__NR_kexec_fûe_lﬂd
 320

	)

325 
	#__NR_bpf
 321

	)

326 
	#__NR_execvót
 322

	)

327 
	#__NR_u£rÁu…fd
 323

	)

328 
	#__NR_memb¨rõr
 324

	)

329 
	#__NR_mlock2
 325

	)

330 
	#__NR_c›y_fûe_ønge
 326

	)

331 
	#__NR_¥ódv2
 327

	)

332 
	#__NR_pwrôev2
 328

	)

333 
	#__NR_pkey_m¥Ÿe˘
 329

	)

334 
	#__NR_pkey_Æloc
 330

	)

335 
	#__NR_pkey_‰ì
 331

	)

336 
	#__NR_°©x
 332

	)

337 
	#__NR_io_pgëevíts
 333

	)

338 
	#__NR_r£q
 334

	)

339 
	#__NR_pidfd_£nd_sig«l
 424

	)

340 
	#__NR_io_urög_£tup
 425

	)

341 
	#__NR_io_urög_íãr
 426

	)

342 
	#__NR_io_urög_ªgi°î
 427

	)

343 
	#__NR_›í_åì
 428

	)

344 
	#__NR_move_mou¡
 429

	)

345 
	#__NR_fs›í
 430

	)

346 
	#__NR_fsc⁄fig
 431

	)

347 
	#__NR_fsmou¡
 432

	)

348 
	#__NR_f•ick
 433

	)

349 
	#__NR_pidfd_›í
 434

	)

350 
	#__NR_˛⁄e3
 435

	)

351 
	#__NR_˛o£_ønge
 436

	)

352 
	#__NR_›í©2
 437

	)

353 
	#__NR_pidfd_gëfd
 438

	)

354 
	#__NR_Ác˚sßt2
 439

	)

355 
	#__NR_¥o˚ss_madvi£
 440

	)

356 
	#__NR_ïﬁl_pwaô2
 441

	)

357 
	#__NR_mou¡_£èâr
 442

	)

358 
	#__NR_quŸa˘l_fd
 443

	)

359 
	#__NR_œndlock_¸óã_ruÀ£t
 444

	)

360 
	#__NR_œndlock_add_ruÀ
 445

	)

361 
	#__NR_œndlock_ª°ri˘_£lf
 446

	)

362 
	#__NR_memfd_£¸ë
 447

	)

363 
	#__NR_¥o˚ss_mªÀa£
 448

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_UNISTD_X32_H


2 
	#_ASM_UNISTD_X32_H


	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

188 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

189 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

190 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

191 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

192 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

193 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

194 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

195 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

196 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

197 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

198 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

199 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

200 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

201 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

202 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

203 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

204 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

205 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

206 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

207 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

208 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

209 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

210 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

211 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

212 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

213 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

214 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

215 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

216 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

217 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

218 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

219 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

220 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

221 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

222 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

223 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

224 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

225 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

226 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

227 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

228 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

229 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

230 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

231 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

232 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

233 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

234 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

235 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

236 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

237 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

238 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

239 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

240 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

241 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

242 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

243 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

244 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

245 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

246 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

247 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

248 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

249 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

250 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

251 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

252 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

253 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

254 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

255 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

256 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

257 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

258 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

259 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

260 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

261 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

262 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

263 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

264 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

265 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

266 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

267 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

268 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

269 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

270 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

271 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

272 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

273 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

274 
	#__NR_sched_£èâr
 (
__X32_SYSCALL_BIT
 + 314)

	)

275 
	#__NR_sched_gë©å
 (
__X32_SYSCALL_BIT
 + 315)

	)

276 
	#__NR_ª«mót2
 (
__X32_SYSCALL_BIT
 + 316)

	)

277 
	#__NR_£ccomp
 (
__X32_SYSCALL_BIT
 + 317)

	)

278 
	#__NR_gëøndom
 (
__X32_SYSCALL_BIT
 + 318)

	)

279 
	#__NR_memfd_¸óã
 (
__X32_SYSCALL_BIT
 + 319)

	)

280 
	#__NR_kexec_fûe_lﬂd
 (
__X32_SYSCALL_BIT
 + 320)

	)

281 
	#__NR_bpf
 (
__X32_SYSCALL_BIT
 + 321)

	)

282 
	#__NR_u£rÁu…fd
 (
__X32_SYSCALL_BIT
 + 323)

	)

283 
	#__NR_memb¨rõr
 (
__X32_SYSCALL_BIT
 + 324)

	)

284 
	#__NR_mlock2
 (
__X32_SYSCALL_BIT
 + 325)

	)

285 
	#__NR_c›y_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 326)

	)

286 
	#__NR_pkey_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 329)

	)

287 
	#__NR_pkey_Æloc
 (
__X32_SYSCALL_BIT
 + 330)

	)

288 
	#__NR_pkey_‰ì
 (
__X32_SYSCALL_BIT
 + 331)

	)

289 
	#__NR_°©x
 (
__X32_SYSCALL_BIT
 + 332)

	)

290 
	#__NR_io_pgëevíts
 (
__X32_SYSCALL_BIT
 + 333)

	)

291 
	#__NR_r£q
 (
__X32_SYSCALL_BIT
 + 334)

	)

292 
	#__NR_pidfd_£nd_sig«l
 (
__X32_SYSCALL_BIT
 + 424)

	)

293 
	#__NR_io_urög_£tup
 (
__X32_SYSCALL_BIT
 + 425)

	)

294 
	#__NR_io_urög_íãr
 (
__X32_SYSCALL_BIT
 + 426)

	)

295 
	#__NR_io_urög_ªgi°î
 (
__X32_SYSCALL_BIT
 + 427)

	)

296 
	#__NR_›í_åì
 (
__X32_SYSCALL_BIT
 + 428)

	)

297 
	#__NR_move_mou¡
 (
__X32_SYSCALL_BIT
 + 429)

	)

298 
	#__NR_fs›í
 (
__X32_SYSCALL_BIT
 + 430)

	)

299 
	#__NR_fsc⁄fig
 (
__X32_SYSCALL_BIT
 + 431)

	)

300 
	#__NR_fsmou¡
 (
__X32_SYSCALL_BIT
 + 432)

	)

301 
	#__NR_f•ick
 (
__X32_SYSCALL_BIT
 + 433)

	)

302 
	#__NR_pidfd_›í
 (
__X32_SYSCALL_BIT
 + 434)

	)

303 
	#__NR_˛⁄e3
 (
__X32_SYSCALL_BIT
 + 435)

	)

304 
	#__NR_˛o£_ønge
 (
__X32_SYSCALL_BIT
 + 436)

	)

305 
	#__NR_›í©2
 (
__X32_SYSCALL_BIT
 + 437)

	)

306 
	#__NR_pidfd_gëfd
 (
__X32_SYSCALL_BIT
 + 438)

	)

307 
	#__NR_Ác˚sßt2
 (
__X32_SYSCALL_BIT
 + 439)

	)

308 
	#__NR_¥o˚ss_madvi£
 (
__X32_SYSCALL_BIT
 + 440)

	)

309 
	#__NR_ïﬁl_pwaô2
 (
__X32_SYSCALL_BIT
 + 441)

	)

310 
	#__NR_mou¡_£èâr
 (
__X32_SYSCALL_BIT
 + 442)

	)

311 
	#__NR_quŸa˘l_fd
 (
__X32_SYSCALL_BIT
 + 443)

	)

312 
	#__NR_œndlock_¸óã_ruÀ£t
 (
__X32_SYSCALL_BIT
 + 444)

	)

313 
	#__NR_œndlock_add_ruÀ
 (
__X32_SYSCALL_BIT
 + 445)

	)

314 
	#__NR_œndlock_ª°ri˘_£lf
 (
__X32_SYSCALL_BIT
 + 446)

	)

315 
	#__NR_memfd_£¸ë
 (
__X32_SYSCALL_BIT
 + 447)

	)

316 
	#__NR_¥o˚ss_mªÀa£
 (
__X32_SYSCALL_BIT
 + 448)

	)

317 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

318 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

319 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

320 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

321 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

322 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

323 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

324 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

325 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

326 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

327 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

328 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

329 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

330 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

331 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

332 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

333 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

334 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

335 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

336 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

337 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

338 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

339 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

340 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

341 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

342 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

343 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

344 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

345 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

346 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

347 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

348 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 543)

	)

349 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 544)

	)

350 
	#__NR_execvót
 (
__X32_SYSCALL_BIT
 + 545)

	)

351 
	#__NR_¥ódv2
 (
__X32_SYSCALL_BIT
 + 546)

	)

352 
	#__NR_pwrôev2
 (
__X32_SYSCALL_BIT
 + 547)

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((
__uöt16_t
Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

33 
__ölöe
 
__uöt16_t


34 
	$__bsw≠_16
 (
__uöt16_t
 
__bsx
)

36 #i‡
	`__GNUC_PREREQ
 (4, 8)

37  
	`__buûtö_bsw≠16
 (
__bsx
);

39  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

41 
	}
}

44 
	#__bsw≠_c⁄°™t_32
(
x
) \

45 ((((
x
) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) \

46 | (((
x
Ë& 0x0000ff00uË<< 8Ë| (((xË& 0x000000ffuË<< 24))

	)

48 
__ölöe
 
__uöt32_t


49 
	$__bsw≠_32
 (
__uöt32_t
 
__bsx
)

51 #i‡
	`__GNUC_PREREQ
 (4, 3)

52  
	`__buûtö_bsw≠32
 (
__bsx
);

54  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

56 
	}
}

59 
	#__bsw≠_c⁄°™t_64
(
x
) \

60 ((((
x
) & 0xff00000000000000ull) >> 56) \

61 | (((
x
) & 0x00ff000000000000ull) >> 40) \

62 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

63 | (((
x
) & 0x000000ff00000000ull) >> 8) \

64 | (((
x
) & 0x00000000ff000000ull) << 8) \

65 | (((
x
) & 0x0000000000ff0000ull) << 24) \

66 | (((
x
) & 0x000000000000ff00ull) << 40) \

67 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

69 
__exãnsi⁄__
 
__ölöe
 
__uöt64_t


70 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

72 #i‡
	`__GNUC_PREREQ
 (4, 3)

73  
	`__buûtö_bsw≠64
 (
__bsx
);

75  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

77 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT
,

529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

531 
	m_SC_MINSIGSTKSZ
,

532 
	#_SC_MINSIGSTKSZ
 
_SC_MINSIGSTKSZ


	)

534 
	m_SC_SIGSTKSZ


535 
	#_SC_SIGSTKSZ
 
_SC_SIGSTKSZ


	)

541 
	m_CS_PATH
,

542 
	#_CS_PATH
 
_CS_PATH


	)

544 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

545 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

546 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

548 
	m_CS_GNU_LIBC_VERSION
,

549 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

550 
	m_CS_GNU_LIBPTHREAD_VERSION
,

551 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

553 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

558 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

559 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

561 
	m_CS_LFS_CFLAGS
 = 1000,

562 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

563 
	m_CS_LFS_LDFLAGS
,

564 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

565 
	m_CS_LFS_LIBS
,

566 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

567 
	m_CS_LFS_LINTFLAGS
,

568 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

569 
	m_CS_LFS64_CFLAGS
,

570 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

571 
	m_CS_LFS64_LDFLAGS
,

572 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

573 
	m_CS_LFS64_LIBS
,

574 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

575 
	m_CS_LFS64_LINTFLAGS
,

576 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

579 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

583 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

584 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

585 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

590 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

591 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

592 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

593 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

596 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

598 
	m_CS_XBS5_LP64_OFF64_LIBS
,

599 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

600 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

601 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

606 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

607 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

608 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

609 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

616 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

617 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

623 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

624 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

625 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

626 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

631 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

632 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

633 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

634 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

639 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

640 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

641 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

642 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

649 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

650 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

656 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

657 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

658 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

659 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

664 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

665 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

666 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

667 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

672 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

673 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

674 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

675 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

677 
	m_CS_V6_ENV
,

678 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

679 
	m_CS_V7_ENV


680 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/endian.h

19 #i‚de‡
_BITS_ENDIAN_H


20 
	#_BITS_ENDIAN_H
 1

	)

30 
	#__LITTLE_ENDIAN
 1234

	)

31 
	#__BIG_ENDIAN
 4321

	)

32 
	#__PDP_ENDIAN
 3412

	)

35 
	~<bôs/ídü¬ess.h
>

39 #i‚de‡
__FLOAT_WORD_ORDER


40 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

43 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


44 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

45 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/epoll.h

18 #i‚def 
_SYS_EPOLL_H


25 
	mEPOLL_CLOEXEC
 = 02000000

26 
	#EPOLL_CLOEXEC
 
EPOLL_CLOEXEC


	)

29 
	#__EPOLL_PACKED
 
	`__©åibuã__
 ((
__∑cked__
))

	)

	@/usr/include/bits/errno.h

19 #i‚de‡
_BITS_ERRNO_H


20 
	#_BITS_ERRNO_H
 1

	)

22 #i‡!
deföed
 
_ERRNO_H


26 
	~<löux/î∫o.h
>

29 #i‚de‡
ENOTSUP


30 
	#ENOTSUP
 
EOPNOTSUPP


	)

33 #i‚de‡
ECANCELED


34 
	#ECANCELED
 125

	)

37 #i‚de‡
EOWNERDEAD


38 
	#EOWNERDEAD
 130

	)

41 #i‚de‡
ENOTRECOVERABLE


42 
	#ENOTRECOVERABLE
 131

	)

45 #i‚de‡
ERFKILL


46 
	#ERFKILL
 132

	)

49 #i‚de‡
EHWPOISON


50 
	#EHWPOISON
 133

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/floatn.h

19 #i‚de‡
_BITS_FLOATN_H


20 
	#_BITS_FLOATN_H


	)

22 
	~<„©uªs.h
>

29 #i‡(
deföed
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
deföed
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5Ë: 
	$__GNUC_PREREQ
 (4, 4)))

32 
	#__HAVE_FLOAT128
 1

	)

34 
	#__HAVE_FLOAT128
 0

	)

39 #i‡
__HAVE_FLOAT128


40 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

42 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

48 
	#__HAVE_FLOAT64X
 1

	)

54 
	#__HAVE_FLOAT64X_LONG_DOUBLE
 1

	)

56 #i‚de‡
__ASSEMBLER__


60 #i‡
__HAVE_FLOAT128


61 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


63 
	#__f128
(
x
Ëx##
q


	)

65 
	#__f128
(
x
Ëx##
f128


	)

70 #i‡
__HAVE_FLOAT128


71 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


74 
_Com∂ex
 
	t__cÊﬂt128
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__TC__
)));

75 
	#__CFLOAT128
 
__cÊﬂt128


	)

77 
	#__CFLOAT128
 
_Com∂ex
 
_Flﬂt128


	)

82 #i‡
__HAVE_FLOAT128


85 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


86 
__Êﬂt128
 
	t_Flﬂt128
;

90 #i‡!
	`__GNUC_PREREQ
 (7, 0)

91 
	#__buûtö_huge_vÆf128
(Ë((
_Flﬂt128
Ë
	`__buûtö_huge_vÆ
 ())

	)

99 #i‡!
	`__GNUC_PREREQ
 (7, 0)

100 
	#__buûtö_c›ysignf128
 
__buûtö_c›ysignq


	)

101 
	#__buûtö_Ábsf128
 
__buûtö_Ábsq


	)

102 
	#__buûtö_öff128
(Ë((
_Flﬂt128
Ë
	`__buûtö_öf
 ())

	)

103 
	#__buûtö_«nf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«n
 (x))

	)

104 
	#__buûtö_«nsf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«ns
 (x))

	)

111 #i‡!
	`__GNUC_PREREQ
 (6, 0)

112 
	#__buûtö_signbôf128
 
__signbôf128


	)

119 
	~<bôs/Êﬂä-comm⁄.h
>

	@/usr/include/bits/getopt_posix.h

20 #i‚de‡
_GETOPT_POSIX_H


21 
	#_GETOPT_POSIX_H
 1

	)

23 #i‡!
deföed
 
_UNISTD_H
 && !deföed 
_STDIO_H


27 
	~<bôs/gë›t_c‹e.h
>

29 
	g__BEGIN_DECLS


31 #i‡
deföed
 
__USE_POSIX2
 && !deföed 
__USE_POSIX_IMPLICITLY
 \

32 && !
deföed
 
	g__USE_GNU
 && !deföed 
	g_GETOPT_H


37 #ifde‡
__REDIRECT


38 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

39 c⁄° *
__sh‹t›ts
),

40 
__posix_gë›t
);

42 
	$__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

43 c⁄° *
__sh‹t›ts
)

44 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

45 
	#gë›t
 
__posix_gë›t


	)

49 
__END_DECLS


	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

67 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


68 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


69 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

71 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

73 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT_C2X


74 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

75 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 1

	)

77 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 0

	)

79 #unde‡
__GLIBC_USE_IEC_60559_EXT


80 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| 
deföed
 
__STDC_WANT_IEC_60559_EXT__


81 
	#__GLIBC_USE_IEC_60559_EXT
 1

	)

83 
	#__GLIBC_USE_IEC_60559_EXT
 0

	)

90 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


91 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


92 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

94 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

96 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X


97 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

98 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 1

	)

100 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 0

	)

105 #unde‡
__GLIBC_USE_IEC_60559_TYPES_EXT


106 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_TYPES_EXT__


107 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

109 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

31 
	~<bôs/mm™-m≠-Êags-gíîic.h
>

34 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

27 
	~<bôs/w‹dsize.h
>

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 #ifde‡
__USE_XOPEN2K


139 
	#_POSIX_TZNAME_MAX
 6

	)

141 
	#_POSIX_TZNAME_MAX
 3

	)

144 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


146 
	#_POSIX_QLIMIT
 1

	)

150 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

153 
	#_POSIX_UIO_MAXIOV
 16

	)

157 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

161 
	~<bôs/loˇl_lim.h
>

164 #i‚def 
SSIZE_MAX


168 #i‡
__WORDSIZE
 =64 || 
__WORDSIZE32_SIZE_ULONG


169 
	#SSIZE_MAX
 
LONG_MAX


	)

171 
	#SSIZE_MAX
 
INT_MAX


	)

179 #i‚def 
NGROUPS_MAX


180 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

32 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

35 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

38 
	#_POSIX_FSYNC
 200809L

	)

41 
	#_POSIX_MAPPED_FILES
 200809L

	)

44 
	#_POSIX_MEMLOCK
 200809L

	)

47 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

50 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

53 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

57 
	#_POSIX_VDISABLE
 '\0'

	)

60 
	#_POSIX_NO_TRUNC
 1

	)

63 
	#_XOPEN_REALTIME
 1

	)

66 
	#_XOPEN_REALTIME_THREADS
 1

	)

69 
	#_XOPEN_SHM
 1

	)

72 
	#_POSIX_THREADS
 200809L

	)

75 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

76 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

79 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

85 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

88 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

92 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

94 #ifde‡
__USE_XOPEN2K8


96 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

99 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

103 
	#_POSIX_SEMAPHORES
 200809L

	)

106 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

109 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

110 
	#_POSIX_ASYNC_IO
 1

	)

112 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

114 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

117 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

120 
	#_LFS_LARGEFILE
 1

	)

121 
	#_LFS64_LARGEFILE
 1

	)

122 
	#_LFS64_STDIO
 1

	)

125 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

128 
	#_POSIX_CPUTIME
 0

	)

131 
	#_POSIX_THREAD_CPUTIME
 0

	)

134 
	#_POSIX_REGEXP
 1

	)

137 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

140 
	#_POSIX_SHELL
 1

	)

143 
	#_POSIX_TIMEOUTS
 200809L

	)

146 
	#_POSIX_SPIN_LOCKS
 200809L

	)

149 
	#_POSIX_SPAWN
 200809L

	)

152 
	#_POSIX_TIMERS
 200809L

	)

155 
	#_POSIX_BARRIERS
 200809L

	)

158 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

161 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

164 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

167 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

170 
	#_POSIX_ADVISORY_INFO
 200809L

	)

173 
	#_POSIX_IPV6
 200809L

	)

176 
	#_POSIX_RAW_SOCKETS
 200809L

	)

179 
	#_POSIX2_CHAR_TERM
 200809L

	)

182 
	#_POSIX_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

186 
	#_POSIX_TRACE
 -1

	)

187 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

188 
	#_POSIX_TRACE_INHERIT
 -1

	)

189 
	#_POSIX_TRACE_LOG
 -1

	)

192 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_COMMON_H


20 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 
	~<bôs/thªad-sh¨ed-ty≥s.h
>

27 
	t±hªad_t
;

34 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 
	m__Æign
;

36 } 
	t±hªad_muãx©å_t
;

43 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 
	m__Æign
;

45 } 
	t±hªad_c⁄d©å_t
;

49 
	t±hªad_key_t
;

53 
	t__ONCE_ALIGNMENT
 
	t±hªad_⁄˚_t
;

56 
	u±hªad_©å_t


58 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 
	m__Æign
;

61 #i‚de‡
__have_±hªad_©å_t


62 
±hªad_©å_t
 
	t±hªad_©å_t
;

63 
	#__have_±hªad_©å_t
 1

	)

69 
__±hªad_muãx_s
 
	m__d©a
;

70 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 
	m__Æign
;

72 } 
	t±hªad_muãx_t
;

77 
__±hªad_c⁄d_s
 
	m__d©a
;

78 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__exãnsi⁄__
 
	m__Æign
;

80 } 
	t±hªad_c⁄d_t
;

83 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 
__±hªad_rwlock_¨ch_t
 
	m__d©a
;

89 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 
	m__Æign
;

91 } 
	t±hªad_rwlock_t
;

95 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 
	m__Æign
;

97 } 
	t±hªad_rwlock©å_t
;

101 #ifde‡
__USE_XOPEN2K


103 vﬁ©ûê
	t±hªad_•ölock_t
;

110 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 
	m__Æign
;

112 } 
	t±hªad_b¨rõr_t
;

116 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 
	m__Æign
;

118 } 
	t±hªad_b¨rõøâr_t
;

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

179 
	~<bôs/ty≥s/°ru˘_rußge.h
>

182 
	#PRIO_MIN
 -20

	)

183 
	#PRIO_MAX
 20

	)

187 
	e__¥i‹ôy_which


189 
	mPRIO_PROCESS
 = 0,

190 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

191 
	mPRIO_PGRP
 = 1,

192 
	#PRIO_PGRP
 
PRIO_PGRP


	)

193 
	mPRIO_USER
 = 2

194 
	#PRIO_USER
 
PRIO_USER


	)

198 
	g__BEGIN_DECLS


200 #ifde‡
__USE_GNU


202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

204 c⁄° 
æimô
 *
__√w_limô
,

205 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

207 #ifde‡
__REDIRECT_NTH


208 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

209 
__æimô_ªsour˚
 
__ªsour˚
,

210 c⁄° 
æimô
 *
__√w_limô
,

211 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

213 
	#¥limô
 
¥limô64


	)

216 #ifde‡
__USE_LARGEFILE64


217 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

218 c⁄° 
æimô64
 *
__√w_limô
,

219 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

223 
__END_DECLS


	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_IB
 27

	)

72 
	#PF_MPLS
 28

	)

73 
	#PF_CAN
 29

	)

74 
	#PF_TIPC
 30

	)

75 
	#PF_BLUETOOTH
 31

	)

76 
	#PF_IUCV
 32

	)

77 
	#PF_RXRPC
 33

	)

78 
	#PF_ISDN
 34

	)

79 
	#PF_PHONET
 35

	)

80 
	#PF_IEEE802154
 36

	)

81 
	#PF_CAIF
 37

	)

82 
	#PF_ALG
 38

	)

83 
	#PF_NFC
 39

	)

84 
	#PF_VSOCK
 40

	)

85 
	#PF_KCM
 41

	)

86 
	#PF_QIPCRTR
 42

	)

87 
	#PF_SMC
 43

	)

88 
	#PF_XDP
 44

	)

89 
	#PF_MCTP
 45

	)

90 
	#PF_MAX
 46

	)

93 
	#AF_UNSPEC
 
PF_UNSPEC


	)

94 
	#AF_LOCAL
 
PF_LOCAL


	)

95 
	#AF_UNIX
 
PF_UNIX


	)

96 
	#AF_FILE
 
PF_FILE


	)

97 
	#AF_INET
 
PF_INET


	)

98 
	#AF_AX25
 
PF_AX25


	)

99 
	#AF_IPX
 
PF_IPX


	)

100 
	#AF_APPLETALK
 
PF_APPLETALK


	)

101 
	#AF_NETROM
 
PF_NETROM


	)

102 
	#AF_BRIDGE
 
PF_BRIDGE


	)

103 
	#AF_ATMPVC
 
PF_ATMPVC


	)

104 
	#AF_X25
 
PF_X25


	)

105 
	#AF_INET6
 
PF_INET6


	)

106 
	#AF_ROSE
 
PF_ROSE


	)

107 
	#AF_DEC√t
 
PF_DEC√t


	)

108 
	#AF_NETBEUI
 
PF_NETBEUI


	)

109 
	#AF_SECURITY
 
PF_SECURITY


	)

110 
	#AF_KEY
 
PF_KEY


	)

111 
	#AF_NETLINK
 
PF_NETLINK


	)

112 
	#AF_ROUTE
 
PF_ROUTE


	)

113 
	#AF_PACKET
 
PF_PACKET


	)

114 
	#AF_ASH
 
PF_ASH


	)

115 
	#AF_ECONET
 
PF_ECONET


	)

116 
	#AF_ATMSVC
 
PF_ATMSVC


	)

117 
	#AF_RDS
 
PF_RDS


	)

118 
	#AF_SNA
 
PF_SNA


	)

119 
	#AF_IRDA
 
PF_IRDA


	)

120 
	#AF_PPPOX
 
PF_PPPOX


	)

121 
	#AF_WANPIPE
 
PF_WANPIPE


	)

122 
	#AF_LLC
 
PF_LLC


	)

123 
	#AF_IB
 
PF_IB


	)

124 
	#AF_MPLS
 
PF_MPLS


	)

125 
	#AF_CAN
 
PF_CAN


	)

126 
	#AF_TIPC
 
PF_TIPC


	)

127 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

128 
	#AF_IUCV
 
PF_IUCV


	)

129 
	#AF_RXRPC
 
PF_RXRPC


	)

130 
	#AF_ISDN
 
PF_ISDN


	)

131 
	#AF_PHONET
 
PF_PHONET


	)

132 
	#AF_IEEE802154
 
PF_IEEE802154


	)

133 
	#AF_CAIF
 
PF_CAIF


	)

134 
	#AF_ALG
 
PF_ALG


	)

135 
	#AF_NFC
 
PF_NFC


	)

136 
	#AF_VSOCK
 
PF_VSOCK


	)

137 
	#AF_KCM
 
PF_KCM


	)

138 
	#AF_QIPCRTR
 
PF_QIPCRTR


	)

139 
	#AF_SMC
 
PF_SMC


	)

140 
	#AF_XDP
 
PF_XDP


	)

141 
	#AF_MCTP
 
PF_MCTP


	)

142 
	#AF_MAX
 
PF_MAX


	)

148 
	#SOL_RAW
 255

	)

149 
	#SOL_DECNET
 261

	)

150 
	#SOL_X25
 262

	)

151 
	#SOL_PACKET
 263

	)

152 
	#SOL_ATM
 264

	)

153 
	#SOL_AAL
 265

	)

154 
	#SOL_IRDA
 266

	)

155 
	#SOL_NETBEUI
 267

	)

156 
	#SOL_LLC
 268

	)

157 
	#SOL_DCCP
 269

	)

158 
	#SOL_NETLINK
 270

	)

159 
	#SOL_TIPC
 271

	)

160 
	#SOL_RXRPC
 272

	)

161 
	#SOL_PPPOL2TP
 273

	)

162 
	#SOL_BLUETOOTH
 274

	)

163 
	#SOL_PNPIPE
 275

	)

164 
	#SOL_RDS
 276

	)

165 
	#SOL_IUCV
 277

	)

166 
	#SOL_CAIF
 278

	)

167 
	#SOL_ALG
 279

	)

168 
	#SOL_NFC
 280

	)

169 
	#SOL_KCM
 281

	)

170 
	#SOL_TLS
 282

	)

171 
	#SOL_XDP
 283

	)

174 
	#SOMAXCONN
 4096

	)

177 
	~<bôs/sockaddr.h
>

180 
	ssockaddr


182 
__SOCKADDR_COMMON
 (
ß_
);

183 
	mß_d©a
[14];

189 
	#__ss_Æig¡y≥
 

	)

190 
	#_SS_PADSIZE
 \

191 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

193 
	ssockaddr_°‹age


195 
__SOCKADDR_COMMON
 (
ss_
);

196 
	m__ss_∑ddög
[
_SS_PADSIZE
];

197 
__ss_Æig¡y≥
 
	m__ss_Æign
;

204 
	mMSG_OOB
 = 0x01,

205 
	#MSG_OOB
 
MSG_OOB


	)

206 
	mMSG_PEEK
 = 0x02,

207 
	#MSG_PEEK
 
MSG_PEEK


	)

208 
	mMSG_DONTROUTE
 = 0x04,

209 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

210 #ifde‡
__USE_GNU


212 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

213 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

215 
	mMSG_CTRUNC
 = 0x08,

216 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

217 
	mMSG_PROXY
 = 0x10,

218 
	#MSG_PROXY
 
MSG_PROXY


	)

219 
	mMSG_TRUNC
 = 0x20,

220 
	#MSG_TRUNC
 
MSG_TRUNC


	)

221 
	mMSG_DONTWAIT
 = 0x40,

222 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

223 
	mMSG_EOR
 = 0x80,

224 
	#MSG_EOR
 
MSG_EOR


	)

225 
	mMSG_WAITALL
 = 0x100,

226 
	#MSG_WAITALL
 
MSG_WAITALL


	)

227 
	mMSG_FIN
 = 0x200,

228 
	#MSG_FIN
 
MSG_FIN


	)

229 
	mMSG_SYN
 = 0x400,

230 
	#MSG_SYN
 
MSG_SYN


	)

231 
	mMSG_CONFIRM
 = 0x800,

232 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

233 
	mMSG_RST
 = 0x1000,

234 
	#MSG_RST
 
MSG_RST


	)

235 
	mMSG_ERRQUEUE
 = 0x2000,

236 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

237 
	mMSG_NOSIGNAL
 = 0x4000,

238 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

239 
	mMSG_MORE
 = 0x8000,

240 
	#MSG_MORE
 
MSG_MORE


	)

241 
	mMSG_WAITFORONE
 = 0x10000,

242 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

243 
	mMSG_BATCH
 = 0x40000,

244 
	#MSG_BATCH
 
MSG_BATCH


	)

245 
	mMSG_ZEROCOPY
 = 0x4000000,

246 
	#MSG_ZEROCOPY
 
MSG_ZEROCOPY


	)

247 
	mMSG_FASTOPEN
 = 0x20000000,

248 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

250 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

253 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

259 
	smsghdr


261 *
	mmsg_«me
;

262 
sockÀn_t
 
	mmsg_«mñí
;

264 
iovec
 *
	mmsg_iov
;

265 
size_t
 
	mmsg_iovÀn
;

267 *
	mmsg_c⁄åﬁ
;

268 
size_t
 
	mmsg_c⁄åﬁÀn
;

273 
	mmsg_Êags
;

277 
	scmsghdr


279 
size_t
 
	mcmsg_Àn
;

284 
	mcmsg_Àvñ
;

285 
	mcmsg_ty≥
;

286 #i‡
__glibc_c99_Êex¨r_avaûabÀ


287 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

292 #i‡
__glibc_c99_Êex¨r_avaûabÀ


293 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

295 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

297 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

298 
	#CMSG_FIRSTHDR
(
mhdr
) \

299 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

300 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

301 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

302 & (
size_t
Ë~( (size_tË- 1))

	)

303 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

304 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

305 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

307 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

308 
cmsghdr
 *
__cmsg
Ë
__THROW
;

309 #ifde‡
__USE_EXTERN_INLINES


310 #i‚de‡
_EXTERN_INLINE


311 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

313 
_EXTERN_INLINE
 
cmsghdr
 *

314 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

316 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

318  (
cmsghdr
 *) 0;

320 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

321 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

322 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


323 + 
__mhdr
->
msg_c⁄åﬁÀn
)

324 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

325 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

327  (
cmsghdr
 *) 0;

328  
__cmsg
;

329 
	}
}

336 
	mSCM_RIGHTS
 = 0x01

337 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

338 #ifde‡
__USE_GNU


339 , 
	mSCM_CREDENTIALS
 = 0x02

340 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

344 #ifde‡
__USE_GNU


346 
	su¸ed


348 
pid_t
 
	mpid
;

349 
uid_t
 
	muid
;

350 
gid_t
 
	mgid
;

354 #ifde‡
__USE_MISC


355 
	~<bôs/ty≥s/time_t.h
>

356 
	~<asm/sockë.h
>

358 
	#SO_DEBUG
 1

	)

359 
	~<bôs/sockë-c⁄°™ts.h
>

363 
	slögî


365 
	ml_⁄off
;

366 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__buf
);

37 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

38  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

39 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

40  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
);

41  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
);

42 
	}
}

44 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

45 
size_t
 
__buÊí
, 
__Êags
,

46 
__SOCKADDR_ARG
 
__addr
,

47 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

48 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

49 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

50 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
size_t
 
__buÊí
, 
__Êags
,

55 
__SOCKADDR_ARG
 
__addr
,

56 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

57 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

60 
__f‹tify_fun˘i⁄
 
ssize_t


61 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

62 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

64 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__buf
);

65 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

66  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

67 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

68  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
, 
__addr
,

69 
__addr_Àn
);

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
, 
__addr
, 
__addr_Àn
);

71 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

25 
	~<bôs/°ru˘_°©.h
>

29 
	#__S_IFMT
 0170000

	)

32 
	#__S_IFDIR
 0040000

	)

33 
	#__S_IFCHR
 0020000

	)

34 
	#__S_IFBLK
 0060000

	)

35 
	#__S_IFREG
 0100000

	)

36 
	#__S_IFIFO
 0010000

	)

37 
	#__S_IFLNK
 0120000

	)

38 
	#__S_IFSOCK
 0140000

	)

42 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

43 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

44 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

48 
	#__S_ISUID
 04000

	)

49 
	#__S_ISGID
 02000

	)

50 
	#__S_ISVTX
 01000

	)

51 
	#__S_IREAD
 0400

	)

52 
	#__S_IWRITE
 0200

	)

53 
	#__S_IEXEC
 0100

	)

55 #ifde‡
__USE_ATFILE


56 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

57 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/statx.h

21 #i‚de‡
_SYS_STAT_H


22 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
°©x
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

29 #ifde‡
__has_ö˛ude


30 #i‡
__has_ö˛ude
 ("linux/stat.h")

31 
	~"löux/°©.h
"

32 #ifde‡
STATX_TYPE


33 
	#__°©x_time°amp_deföed
 1

	)

34 
	#__°©x_deföed
 1

	)

39 
	~<bôs/°©x-gíîic.h
>

	@/usr/include/bits/stdint-intn.h

19 #i‚de‡
_BITS_STDINT_INTN_H


20 
	#_BITS_STDINT_INTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__öt8_t
 
	töt8_t
;

25 
__öt16_t
 
	töt16_t
;

26 
__öt32_t
 
	töt32_t
;

27 
__öt64_t
 
	töt64_t
;

	@/usr/include/bits/stdint-uintn.h

19 #i‚de‡
_BITS_STDINT_UINTN_H


20 
	#_BITS_STDINT_UINTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__uöt8_t
 
	tuöt8_t
;

25 
__uöt16_t
 
	tuöt16_t
;

26 
__uöt32_t
 
	tuöt32_t
;

27 
__uöt64_t
 
	tuöt64_t
;

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

24 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

25 
	$__LDBL_REDIR_DECL
 (
•rötf
)

26 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

27 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

28 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

29 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

30 #i‡
deföed
 
__LDBL_COMPAT


31 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

32 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

33 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

34 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

35 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__isoc99_fsˇnfõì128
)

36 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__isoc99_sˇnfõì128
)

37 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__isoc99_ssˇnfõì128
)

39 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

42 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

43 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

44 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

47 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


48 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

49 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

52 #ifdef 
__USE_ISOC99


53 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

54 #i‡
deföed
 
__LDBL_COMPAT


55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

59 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__isoc99_vfsˇnfõì128
)

60 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__isoc99_vsˇnfõì128
)

61 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__isoc99_vssˇnfõì128
)

63 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

66 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

67 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

68 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

72 #ifde‡
__USE_XOPEN2K8


73 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

74 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

77 #ifde‡
__USE_GNU


78 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

79 
	$__LDBL_REDIR2_DECL
 (
a•rötf
)

80 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

81 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

82 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


86 
	$__LDBL_REDIR2_DECL
 (
•rötf_chk
)

87 
	$__LDBL_REDIR2_DECL
 (
v•rötf_chk
)

88 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


89 
	$__LDBL_REDIR2_DECL
 (
¢¥ötf_chk
)

90 
	$__LDBL_REDIR2_DECL
 (
v¢¥ötf_chk
)

92 #i‡
__USE_FORTIFY_LEVEL
 > 1

93 
	$__LDBL_REDIR2_DECL
 (
Ârötf_chk
)

94 
	$__LDBL_REDIR2_DECL
 (
¥ötf_chk
)

95 
	$__LDBL_REDIR2_DECL
 (
vÂrötf_chk
)

96 
	$__LDBL_REDIR2_DECL
 (
v¥ötf_chk
)

97 #ifde‡
__USE_XOPEN2K8


98 
	$__LDBL_REDIR2_DECL
 (
d¥ötf_chk
)

99 
	$__LDBL_REDIR2_DECL
 (
vd¥ötf_chk
)

101 #ifde‡
__USE_GNU


102 
	$__LDBL_REDIR2_DECL
 (
a•rötf_chk
)

103 
	$__LDBL_REDIR2_DECL
 (
va•rötf_chk
)

104 
	$__LDBL_REDIR2_DECL
 (
ob°ack_¥ötf_chk
)

105 
	$__LDBL_REDIR2_DECL
 (
ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_BITS_STDIO_H


20 
	#_BITS_STDIO_H
 1

	)

22 #i‚de‡
_STDIO_H


26 #i‚de‡
__exã∫_ölöe


27 
	#__STDIO_INLINE
 
ölöe


	)

29 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

33 #ifde‡
__USE_EXTERN_INLINES


36 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

38 
__STDIO_INLINE
 

39 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

41  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

42 
	}
}

46 
__STDIO_INLINE
 

47 
	$gëch¨
 ()

49  
	`gëc
 (
°dö
);

50 
	}
}

53 #ifde‡
__USE_MISC


55 
__STDIO_INLINE
 

56 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

58  
	`__gëc_u∆ocked_body
 (
__Â
);

59 
	}
}

63 #ifde‡
__USE_POSIX199506


65 
__STDIO_INLINE
 

66 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

68  
	`__gëc_u∆ocked_body
 (
__Â
);

69 
	}
}

72 
__STDIO_INLINE
 

73 
	$gëch¨_u∆ocked
 ()

75  
	`__gëc_u∆ocked_body
 (
°dö
);

76 
	}
}

81 
__STDIO_INLINE
 

82 
	$putch¨
 (
__c
)

84  
	`putc
 (
__c
, 
°dout
);

85 
	}
}

88 #ifde‡
__USE_MISC


90 
__STDIO_INLINE
 

91 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

93  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

94 
	}
}

98 #ifde‡
__USE_POSIX199506


100 
__STDIO_INLINE
 

101 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

103  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

104 
	}
}

107 
__STDIO_INLINE
 

108 
	$putch¨_u∆ocked
 (
__c
)

110  
	`__putc_u∆ocked_body
 (
__c
, 
°dout
);

111 
	}
}

115 #ifdef 
__USE_GNU


117 
__STDIO_INLINE
 
__ssize_t


118 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

120  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

121 
	}
}

125 #ifde‡
__USE_MISC


127 
__STDIO_INLINE
 

128 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

130  
	`__„of_u∆ocked_body
 (
__°ªam
);

131 
	}
}

134 
__STDIO_INLINE
 

135 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

137  
	`__„º‹_u∆ocked_body
 (
__°ªam
);

138 
	}
}

144 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

145 && !
deföed
 
	g__˝lu•lus


147 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

148 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

149 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

150 && (
size_t
Ë(
size
) != 0) \

151 ? ({ *
__±r
 = (*Ë(
±r
); \

152 
FILE
 *
__°ªam
 = (
°ªam
); \

153 
size_t
 
__˙t
; \

154 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

155 
__˙t
 > 0; --__cnt) \

157 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
); \

158 i‡(
__c
 =
EOF
) \

160 *
__±r
++ = 
__c
; \

162 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

163 / (
size_t
Ë(
size
); }) \

164 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

165 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

167 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

168 (Ë(
n
), (
size_t
) 0) \

169 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

171 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

172 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

173 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

174 && (
size_t
Ë(
size
) != 0) \

175 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

176 
FILE
 *
__°ªam
 = (
°ªam
); \

177 
size_t
 
__˙t
; \

178 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

179 
__˙t
 > 0; --__cnt) \

180 i‡(
	`putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

182 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

183 / (
size_t
Ë(
size
); }) \

184 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

185 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

187 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

188 (Ë(
n
), (
size_t
) 0) \

189 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

193 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_BITS_STDIO2_H


20 
	#_BITS_STDIO2_H
 1

	)

22 #i‚de‡
_STDIO_H


26 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW


28 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

29 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

30 c⁄° *
__ª°ri˘
 
__f‹m©
,

31 
__gnuc_va_li°
 
__≠
Ë
__THROW


32 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

34 #ifde‡
__va_¨g_∑ck


35 
__f‹tify_fun˘i⁄
 

36 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

38  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

39 
	`__glibc_objsize
 (
__s
), 
__fmt
,

40 
	`__va_¨g_∑ck
 ());

41 
	}
}

42 #ñi‡!
deföed
 
__˝lu•lus


43 
	#•rötf
(
°r
, ...) \

44 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, \

45 
	`__glibc_objsize
 (
°r
), 
__VA_ARGS__
)

	)

48 
__f‹tify_fun˘i⁄
 

49 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

50 
__gnuc_va_li°
 
__≠
))

52  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

53 
	`__glibc_objsize
 (
__s
), 
__fmt
, 
__≠
);

54 
	}
}

56 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


58 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

59 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

60 ...Ë
__THROW


61 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

62 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

63 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

64 
__gnuc_va_li°
 
__≠
Ë
__THROW
;

66 #ifde‡
__va_¨g_∑ck


67 
__f‹tify_fun˘i⁄
 

68 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

69 c⁄° *
__ª°ri˘
 
__fmt
, ...))

71  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

72 
	`__glibc_objsize
 (
__s
), 
__fmt
,

73 
	`__va_¨g_∑ck
 ());

74 
	}
}

75 #ñi‡!
deföed
 
__˝lu•lus


76 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

77 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, \

78 
	`__glibc_objsize
 (
°r
), 
__VA_ARGS__
)

	)

81 
__f‹tify_fun˘i⁄
 

82 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

83 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

85  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

86 
	`__glibc_objsize
 (
__s
), 
__fmt
, 
__≠
);

87 
	}
}

91 #i‡
__USE_FORTIFY_LEVEL
 > 1

93 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

94 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

95 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

96 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

97 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__≠
);

98 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

99 
__gnuc_va_li°
 
__≠
);

101 #ifde‡
__va_¨g_∑ck


102 
__f‹tify_fun˘i⁄
 

103 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

105  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

106 
	`__va_¨g_∑ck
 ());

107 
	}
}

109 
__f‹tify_fun˘i⁄
 

110 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

112  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

113 
	}
}

114 #ñi‡!
deföed
 
__˝lu•lus


115 
	#¥ötf
(...) \

116 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

117 
	#Ârötf
(
°ªam
, ...) \

118 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

121 
__f‹tify_fun˘i⁄
 

122 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

124 #ifde‡
__USE_EXTERN_INLINES


125  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

127  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 
__f‹tify_fun˘i⁄
 

132 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

133 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

135  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

136 
	}
}

138 #ifde‡
__USE_XOPEN2K8


139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

145 #ifde‡
__va_¨g_∑ck


146 
__f‹tify_fun˘i⁄
 

147 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

149  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

150 
	`__va_¨g_∑ck
 ());

151 
	}
}

152 #ñi‡!
deföed
 
__˝lu•lus


153 
	#d¥ötf
(
fd
, ...) \

154 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

157 
__f‹tify_fun˘i⁄
 

158 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

160  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

161 
	}
}

164 #ifde‡
__USE_GNU


166 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

167 c⁄° *
__ª°ri˘
 
__fmt
, ...)

168 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

169 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

171 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

172 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

173 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

175 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

176 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

177 
__Êag
,

178 c⁄° *
__ª°ri˘
 
__f‹m©
,

179 
__gnuc_va_li°
 
__¨gs
)

180 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

182 #ifde‡
__va_¨g_∑ck


183 
__f‹tify_fun˘i⁄
 

184 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

194  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

198 
__f‹tify_fun˘i⁄
 

199 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

200 c⁄° *
__ª°ri˘
 
__fmt
, ...))

202  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

203 
	`__va_¨g_∑ck
 ());

204 
	}
}

205 #ñi‡!
deföed
 
__˝lu•lus


206 
	#a•rötf
(
±r
, ...) \

207 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

208 
	#__a•rötf
(
±r
, ...) \

209 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

210 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

211 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

214 
__f‹tify_fun˘i⁄
 

215 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

216 
__gnuc_va_li°
 
__≠
))

218  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

219 
	}
}

221 
__f‹tify_fun˘i⁄
 

222 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

223 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

225  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

226 
__≠
);

227 
	}
}

233 #i‡
__GLIBC_USE
 (
DEPRECATED_GETS
)

234 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

235 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

236 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

239 
__f‹tify_fun˘i⁄
 
__wur
 *

240 
	$gës
 (*
__°r
)

242 i‡(
	`__glibc_objsize
 (
__°r
Ë!(
size_t
) -1)

243  
	`__gës_chk
 (
__°r
, 
	`__glibc_objsize
 (__str));

244  
	`__gës_w¨n
 (
__°r
);

245 
	}
}

248 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

249 
FILE
 *
__ª°ri˘
 
__°ªam
)

250 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

251 *
	`__REDIRECT
 (
__fgës_Æüs
,

252 (*
__ª°ri˘
 
__s
, 
__n
,

253 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
)

254 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

255 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

256 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

258 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

261 
__f‹tify_fun˘i⁄
 
__wur
 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2) *

262 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

264 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

265 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

266  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

267 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

268  
	`__fgës_chk_w¨n
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

269  
	`__fgës_chk
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

270 
	}
}

272 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

273 
size_t
 
__size
, size_à
__n
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

275 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

276 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

277 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

278 
‰ód
Ë
__wur
;

279 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

280 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

281 
size_t
 
__size
, size_à
__n
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
),

283 
__‰ód_chk
)

284 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

287 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


288 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
)

291 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__±r
);

292 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
, 
__size
, 
sz
))

293  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

294 i‡(
	`__glibc_unß„_Àn
 (
__n
, 
__size
, 
sz
))

295  
	`__‰ód_chk_w¨n
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

296  
	`__‰ód_chk
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

297 
	}
}

299 #ifde‡
__USE_GNU


300 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

301 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
)

302 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

303 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

304 (*
__ª°ri˘
 
__s
, 
__n
,

305 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
)

306 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

307 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

308 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

309 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

310 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

313 
__f‹tify_fun˘i⁄
 
__wur
 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2) *

314 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

316 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

317 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

318  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

319 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

320  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_chk
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__±r
);

347 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
, 
__size
, 
sz
))

349 #ifde‡
__USE_EXTERN_INLINES


350 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

351 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

352 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

353 && 
__size
 * 
__n
 <= 8)

355 
size_t
 
__˙t
 = 
__size
 * 
__n
;

356 *
__˝å
 = (*Ë
__±r
;

357 i‡(
__˙t
 == 0)

360 ; 
__˙t
 > 0; --__cnt)

362 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
);

363 i‡(
__c
 =
EOF
)

365 *
__˝å
++ = 
__c
;

367  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

370  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

372 i‡(
	`__glibc_unß„_Àn
 (
__n
, 
__size
, 
sz
))

373  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

374  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

376 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‚de‡
_BITS_STDIO_LIM_H


19 
	#_BITS_STDIO_LIM_H
 1

	)

21 #i‚de‡
_STDIO_H


25 
	#L_tm≤am
 20

	)

26 
	#TMP_MAX
 238328

	)

27 
	#FILENAME_MAX
 4096

	)

29 #ifde‡
__USE_POSIX


30 
	#L_˘îmid
 9

	)

31 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


32 
	#L_cu£rid
 9

	)

36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (c⁄° *Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

40 #i‡
	`__GNUC_PREREQ
(4, 6)

41 #¥agm®
GCC
 
dügno°ic
 
push


42 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wcast-qual"

44  (*Ë
__p
;

45 #i‡
	`__GNUC_PREREQ
(4, 6)

46 #¥agm®
GCC
 
dügno°ic
 
p›


51  
NULL
;

52 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__exã∫_ölöe
 

25 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

27  
	`°πod
 (
__≈å
, (**Ë
NULL
);

28 
	}
}

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 #ifde‡
__LDBL_COMPAT


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
__°πoõì128
)

31 #ifde‡
__USE_GNU


32 #ifde‡
__LDBL_COMPAT


33 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

35 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
__°πoõì128_l
)

39 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

40 #ifde‡
__LDBL_COMPAT


41 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
°r‰omd
)

43 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
__°r‰omõì128
)

47 #ifde‡
__USE_MISC


48 #i‡
deföed
 
__LDBL_COMPAT


49 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

50 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

51 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

52 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

53 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

54 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

55 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
__qecvtõì128
)

56 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
__qfcvtõì128
)

57 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
__qgcvtõì128
)

58 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
__qecvtõì128_r
)

59 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
__qfcvtõì128_r
)

61 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__ªsﬁved
);

41 i‡(
sz
 =(
size_t
) -1)

42  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

44 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


45 i‡(
	`__glibc_unß„_Àn
 (
PATH_MAX
,  (), 
sz
))

46  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
sz
);

48  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
sz
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2))

54 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__f‹tify_fun˘i⁄
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67  
	`__glibc_f‹tify
 (
±¢ame_r
, 
__buÊí
,  (),

68 
	`__glibc_objsize
 (
__buf
),

69 
__fd
, 
__buf
, 
__buÊí
);

70 
	}
}

73 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

74 
__THROW
 
__wur
;

75 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

76 
w˘omb
Ë
__wur
;

78 
__f‹tify_fun˘i⁄
 
__wur
 

79 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

84 
	#__STDLIB_MB_LEN_MAX
 16

	)

85 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


88 i‡(
	`__glibc_objsize
 (
__s
Ë!(
size_t
) -1

89 && 
__STDLIB_MB_LEN_MAX
 > 
	`__glibc_objsize
 (
__s
))

90  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__glibc_objsize
 (__s));

91  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

92 
	}
}

95 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

96 c⁄° *
__ª°ri˘
 
__§c
,

97 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW


98 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

99 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

100 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

101 c⁄° *
__ª°ri˘
 
__§c
,

102 
size_t
 
__Àn
), 
mb°owcs
)

103 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

104 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

105 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

106 c⁄° *
__ª°ri˘
 
__§c
,

107 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

108 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

111 
__f‹tify_fun˘i⁄
 
size_t


112 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

113 
size_t
 
__Àn
))

115  
	`__glibc_f‹tify_n
 (
mb°owcs
, 
__Àn
,  (
wch¨_t
),

116 
	`__glibc_objsize
 (
__d°
),

117 
__d°
, 
__§c
, 
__Àn
);

118 
	}
}

121 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

122 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

123 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW


124 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

125 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

126 (*
__ª°ri˘
 
__d°
,

127 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

128 
size_t
 
__Àn
), 
wc°ombs
)

129 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

130 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

131 (*
__ª°ri˘
 
__d°
,

132 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

134 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

136 
__f‹tify_fun˘i⁄
 
size_t


137 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

138 
size_t
 
__Àn
))

140  
	`__glibc_f‹tify
 (
wc°ombs
, 
__Àn
,  (),

141 
	`__glibc_objsize
 (
__d°
),

142 
__d°
, 
__§c
, 
__Àn
);

143 
	}
}

	@/usr/include/bits/string_fortified.h

18 #i‚de‡
_BITS_STRING_FORTIFIED_H


19 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #i‚de‡
_STRING_H


25 
__f‹tify_fun˘i⁄
 *

26 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

27 
size_t
 
__Àn
))

29  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

30 
	`__glibc_objsize0
 (
__de°
));

31 
	}
}

33 
__f‹tify_fun˘i⁄
 *

34 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

36  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
,

37 
	`__glibc_objsize0
 (
__de°
));

38 
	}
}

40 #ifde‡
__USE_GNU


41 
__f‹tify_fun˘i⁄
 *

42 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__Àn
))

45  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

46 
	`__glibc_objsize0
 (
__de°
));

47 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

59  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
,

60 
	`__glibc_objsize0
 (
__de°
));

61 
	}
}

63 #ifde‡
__USE_MISC


64 
	~<bôs/°rögs_f‹tifõd.h
>

66 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

67 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

69 
__f‹tify_fun˘i⁄
 

70 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

72 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__glibc_objsize0
 (__dest));

73 
	}
}

76 
__f‹tify_fun˘i⁄
 *

77 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

79  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

80 
	}
}

82 #ifde‡
__USE_XOPEN2K8


83 
__f‹tify_fun˘i⁄
 *

84 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

86  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

87 
	}
}

91 
__f‹tify_fun˘i⁄
 *

92 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

93 
size_t
 
__Àn
))

95  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

96 
	`__glibc_objsize
 (
__de°
));

97 
	}
}

99 #ifde‡
__USE_XOPEN2K8


100 #i‡
__GNUC_PREREQ
 (4, 7Ë|| 
__glibc_˛™g_¥îeq
 (2, 6)

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

104  
	`__buûtö___°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
,

105 
	`__glibc_objsize
 (
__de°
));

106 
	}
}

108 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

109 
size_t
 
__de°Àn
Ë
__THROW


110 
	`__f‹tifõd_©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3))

111 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

112 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

113 
size_t
 
__n
), 
°≤˝y
);

115 
__f‹tify_fun˘i⁄
 *

116 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

119 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

120  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

121  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

122 
	}
}

127 
__f‹tify_fun˘i⁄
 *

128 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

130  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

131 
	}
}

134 
__f‹tify_fun˘i⁄
 *

135 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

136 
size_t
 
__Àn
))

138  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
,

139 
	`__glibc_objsize
 (
__de°
));

140 
	}
}

	@/usr/include/bits/syscall.h

4 #i‚de‡
_SYSCALL_H


8 
	#__GLIBC_LINUX_VERSION_CODE
 331776

	)

10 #ifde‡
__NR_FAST_©omic_upd©e


11 
	#SYS_FAST_©omic_upd©e
 
__NR_FAST_©omic_upd©e


	)

14 #ifde‡
__NR_FAST_cmpxchg


15 
	#SYS_FAST_cmpxchg
 
__NR_FAST_cmpxchg


	)

18 #ifde‡
__NR_FAST_cmpxchg64


19 
	#SYS_FAST_cmpxchg64
 
__NR_FAST_cmpxchg64


	)

22 #ifde‡
__NR__Œ£ek


23 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

26 #ifde‡
__NR__√w£À˘


27 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

30 #ifde‡
__NR__sys˘l


31 
	#SYS__sys˘l
 
__NR__sys˘l


	)

34 #ifde‡
__NR_ac˚±


35 
	#SYS_ac˚±
 
__NR_ac˚±


	)

38 #ifde‡
__NR_ac˚±4


39 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

42 #ifde‡
__NR_ac˚ss


43 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

46 #ifde‡
__NR_ac˘


47 
	#SYS_ac˘
 
__NR_ac˘


	)

50 #ifde‡
__NR_a˛_gë


51 
	#SYS_a˛_gë
 
__NR_a˛_gë


	)

54 #ifde‡
__NR_a˛_£t


55 
	#SYS_a˛_£t
 
__NR_a˛_£t


	)

58 #ifde‡
__NR_add_key


59 
	#SYS_add_key
 
__NR_add_key


	)

62 #ifde‡
__NR_adjtimex


63 
	#SYS_adjtimex
 
__NR_adjtimex


	)

66 #ifde‡
__NR_afs_sysˇŒ


67 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

70 #ifde‡
__NR_Æ¨m


71 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

74 #ifde‡
__NR_Æloc_hugïages


75 
	#SYS_Æloc_hugïages
 
__NR_Æloc_hugïages


	)

78 #ifde‡
__NR_¨c_gëés


79 
	#SYS_¨c_gëés
 
__NR_¨c_gëés


	)

82 #ifde‡
__NR_¨c_£âls


83 
	#SYS_¨c_£âls
 
__NR_¨c_£âls


	)

86 #ifde‡
__NR_¨c_u§_cmpxchg


87 
	#SYS_¨c_u§_cmpxchg
 
__NR_¨c_u§_cmpxchg


	)

90 #ifde‡
__NR_¨ch_¥˘l


91 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

94 #ifde‡
__NR_¨m_Ádvi£64_64


95 
	#SYS_¨m_Ádvi£64_64
 
__NR_¨m_Ádvi£64_64


	)

98 #ifde‡
__NR_¨m_sync_fûe_ønge


99 
	#SYS_¨m_sync_fûe_ønge
 
__NR_¨m_sync_fûe_ønge


	)

102 #ifde‡
__NR_©omic_b¨rõr


103 
	#SYS_©omic_b¨rõr
 
__NR_©omic_b¨rõr


	)

106 #ifde‡
__NR_©omic_cmpxchg_32


107 
	#SYS_©omic_cmpxchg_32
 
__NR_©omic_cmpxchg_32


	)

110 #ifde‡
__NR_©å˘l


111 
	#SYS_©å˘l
 
__NR_©å˘l


	)

114 #ifde‡
__NR_bdÊush


115 
	#SYS_bdÊush
 
__NR_bdÊush


	)

118 #ifde‡
__NR_böd


119 
	#SYS_böd
 
__NR_böd


	)

122 #ifde‡
__NR_bpf


123 
	#SYS_bpf
 
__NR_bpf


	)

126 #ifde‡
__NR_bªak


127 
	#SYS_bªak
 
__NR_bªak


	)

130 #ifde‡
__NR_bªakpoöt


131 
	#SYS_bªakpoöt
 
__NR_bªakpoöt


	)

134 #ifde‡
__NR_brk


135 
	#SYS_brk
 
__NR_brk


	)

138 #ifde‡
__NR_ˇche˘l


139 
	#SYS_ˇche˘l
 
__NR_ˇche˘l


	)

142 #ifde‡
__NR_ˇcheÊush


143 
	#SYS_ˇcheÊush
 
__NR_ˇcheÊush


	)

146 #ifde‡
__NR_ˇpgë


147 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

150 #ifde‡
__NR_ˇp£t


151 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

154 #ifde‡
__NR_chdú


155 
	#SYS_chdú
 
__NR_chdú


	)

158 #ifde‡
__NR_chmod


159 
	#SYS_chmod
 
__NR_chmod


	)

162 #ifde‡
__NR_chown


163 
	#SYS_chown
 
__NR_chown


	)

166 #ifde‡
__NR_chown32


167 
	#SYS_chown32
 
__NR_chown32


	)

170 #ifde‡
__NR_chroŸ


171 
	#SYS_chroŸ
 
__NR_chroŸ


	)

174 #ifde‡
__NR_˛ock_adjtime


175 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

178 #ifde‡
__NR_˛ock_adjtime64


179 
	#SYS_˛ock_adjtime64
 
__NR_˛ock_adjtime64


	)

182 #ifde‡
__NR_˛ock_gëªs


183 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

186 #ifde‡
__NR_˛ock_gëªs_time64


187 
	#SYS_˛ock_gëªs_time64
 
__NR_˛ock_gëªs_time64


	)

190 #ifde‡
__NR_˛ock_gëtime


191 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

194 #ifde‡
__NR_˛ock_gëtime64


195 
	#SYS_˛ock_gëtime64
 
__NR_˛ock_gëtime64


	)

198 #ifde‡
__NR_˛ock_«no¶ìp


199 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

202 #ifde‡
__NR_˛ock_«no¶ìp_time64


203 
	#SYS_˛ock_«no¶ìp_time64
 
__NR_˛ock_«no¶ìp_time64


	)

206 #ifde‡
__NR_˛ock_£âime


207 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

210 #ifde‡
__NR_˛ock_£âime64


211 
	#SYS_˛ock_£âime64
 
__NR_˛ock_£âime64


	)

214 #ifde‡
__NR_˛⁄e


215 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

218 #ifde‡
__NR_˛⁄e2


219 
	#SYS_˛⁄e2
 
__NR_˛⁄e2


	)

222 #ifde‡
__NR_˛⁄e3


223 
	#SYS_˛⁄e3
 
__NR_˛⁄e3


	)

226 #ifde‡
__NR_˛o£


227 
	#SYS_˛o£
 
__NR_˛o£


	)

230 #ifde‡
__NR_˛o£_ønge


231 
	#SYS_˛o£_ønge
 
__NR_˛o£_ønge


	)

234 #ifde‡
__NR_cmpxchg_badaddr


235 
	#SYS_cmpxchg_badaddr
 
__NR_cmpxchg_badaddr


	)

238 #ifde‡
__NR_c⁄√˘


239 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

242 #ifde‡
__NR_c›y_fûe_ønge


243 
	#SYS_c›y_fûe_ønge
 
__NR_c›y_fûe_ønge


	)

246 #ifde‡
__NR_¸ót


247 
	#SYS_¸ót
 
__NR_¸ót


	)

250 #ifde‡
__NR_¸óã_moduÀ


251 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

254 #ifde‡
__NR_dñëe_moduÀ


255 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

258 #ifde‡
__NR_dùc


259 
	#SYS_dùc
 
__NR_dùc


	)

262 #ifde‡
__NR_dup


263 
	#SYS_dup
 
__NR_dup


	)

266 #ifde‡
__NR_dup2


267 
	#SYS_dup2
 
__NR_dup2


	)

270 #ifde‡
__NR_dup3


271 
	#SYS_dup3
 
__NR_dup3


	)

274 #ifde‡
__NR_ïﬁl_¸óã


275 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

278 #ifde‡
__NR_ïﬁl_¸óã1


279 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

282 #ifde‡
__NR_ïﬁl_˘l


283 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

286 #ifde‡
__NR_ïﬁl_˘l_ﬁd


287 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

290 #ifde‡
__NR_ïﬁl_pwaô


291 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

294 #ifde‡
__NR_ïﬁl_pwaô2


295 
	#SYS_ïﬁl_pwaô2
 
__NR_ïﬁl_pwaô2


	)

298 #ifde‡
__NR_ïﬁl_waô


299 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

302 #ifde‡
__NR_ïﬁl_waô_ﬁd


303 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

306 #ifde‡
__NR_evítfd


307 
	#SYS_evítfd
 
__NR_evítfd


	)

310 #ifde‡
__NR_evítfd2


311 
	#SYS_evítfd2
 
__NR_evítfd2


	)

314 #ifde‡
__NR_exec_wôh_lﬂdî


315 
	#SYS_exec_wôh_lﬂdî
 
__NR_exec_wôh_lﬂdî


	)

318 #ifde‡
__NR_execv


319 
	#SYS_execv
 
__NR_execv


	)

322 #ifde‡
__NR_execve


323 
	#SYS_execve
 
__NR_execve


	)

326 #ifde‡
__NR_execvót


327 
	#SYS_execvót
 
__NR_execvót


	)

330 #ifde‡
__NR_exô


331 
	#SYS_exô
 
__NR_exô


	)

334 #ifde‡
__NR_exô_group


335 
	#SYS_exô_group
 
__NR_exô_group


	)

338 #ifde‡
__NR_Ác˚sßt


339 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

342 #ifde‡
__NR_Ác˚sßt2


343 
	#SYS_Ác˚sßt2
 
__NR_Ác˚sßt2


	)

346 #ifde‡
__NR_Ádvi£64


347 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

350 #ifde‡
__NR_Ádvi£64_64


351 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

354 #ifde‡
__NR_ÁŒoˇã


355 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

358 #ifde‡
__NR_ÁnŸify_öô


359 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

362 #ifde‡
__NR_ÁnŸify_m¨k


363 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

366 #ifde‡
__NR_fchdú


367 
	#SYS_fchdú
 
__NR_fchdú


	)

370 #ifde‡
__NR_fchmod


371 
	#SYS_fchmod
 
__NR_fchmod


	)

374 #ifde‡
__NR_fchmod©


375 
	#SYS_fchmod©
 
__NR_fchmod©


	)

378 #ifde‡
__NR_fchown


379 
	#SYS_fchown
 
__NR_fchown


	)

382 #ifde‡
__NR_fchown32


383 
	#SYS_fchown32
 
__NR_fchown32


	)

386 #ifde‡
__NR_fchow«t


387 
	#SYS_fchow«t
 
__NR_fchow«t


	)

390 #ifde‡
__NR_f˙é


391 
	#SYS_f˙é
 
__NR_f˙é


	)

394 #ifde‡
__NR_f˙é64


395 
	#SYS_f˙é64
 
__NR_f˙é64


	)

398 #ifde‡
__NR_fd©async


399 
	#SYS_fd©async
 
__NR_fd©async


	)

402 #ifde‡
__NR_fgëx©å


403 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

406 #ifde‡
__NR_föô_moduÀ


407 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

410 #ifde‡
__NR_Êi°x©å


411 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

414 #ifde‡
__NR_Êock


415 
	#SYS_Êock
 
__NR_Êock


	)

418 #ifde‡
__NR_f‹k


419 
	#SYS_f‹k
 
__NR_f‹k


	)

422 #ifde‡
__NR_Â_udfõx_¸é


423 
	#SYS_Â_udfõx_¸é
 
__NR_Â_udfõx_¸é


	)

426 #ifde‡
__NR_‰ì_hugïages


427 
	#SYS_‰ì_hugïages
 
__NR_‰ì_hugïages


	)

430 #ifde‡
__NR_‰emovex©å


431 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

434 #ifde‡
__NR_fsc⁄fig


435 
	#SYS_fsc⁄fig
 
__NR_fsc⁄fig


	)

438 #ifde‡
__NR_f£tx©å


439 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

442 #ifde‡
__NR_fsmou¡


443 
	#SYS_fsmou¡
 
__NR_fsmou¡


	)

446 #ifde‡
__NR_fs›í


447 
	#SYS_fs›í
 
__NR_fs›í


	)

450 #ifde‡
__NR_f•ick


451 
	#SYS_f•ick
 
__NR_f•ick


	)

454 #ifde‡
__NR_f°©


455 
	#SYS_f°©
 
__NR_f°©


	)

458 #ifde‡
__NR_f°©64


459 
	#SYS_f°©64
 
__NR_f°©64


	)

462 #ifde‡
__NR_f°©©64


463 
	#SYS_f°©©64
 
__NR_f°©©64


	)

466 #ifde‡
__NR_f°©fs


467 
	#SYS_f°©fs
 
__NR_f°©fs


	)

470 #ifde‡
__NR_f°©fs64


471 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

474 #ifde‡
__NR_fsync


475 
	#SYS_fsync
 
__NR_fsync


	)

478 #ifde‡
__NR_·ime


479 
	#SYS_·ime
 
__NR_·ime


	)

482 #ifde‡
__NR_·runˇã


483 
	#SYS_·runˇã
 
__NR_·runˇã


	)

486 #ifde‡
__NR_·runˇã64


487 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

490 #ifde‡
__NR_fuãx


491 
	#SYS_fuãx
 
__NR_fuãx


	)

494 #ifde‡
__NR_fuãx_time64


495 
	#SYS_fuãx_time64
 
__NR_fuãx_time64


	)

498 #ifde‡
__NR_fuãx_waôv


499 
	#SYS_fuãx_waôv
 
__NR_fuãx_waôv


	)

502 #ifde‡
__NR_futimeßt


503 
	#SYS_futimeßt
 
__NR_futimeßt


	)

506 #ifde‡
__NR_gë_kî√l_syms


507 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

510 #ifde‡
__NR_gë_mempﬁicy


511 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

514 #ifde‡
__NR_gë_robu°_li°


515 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

518 #ifde‡
__NR_gë_thªad_¨ó


519 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

522 #ifde‡
__NR_gë_és


523 
	#SYS_gë_és
 
__NR_gë_és


	)

526 #ifde‡
__NR_gë˝u


527 
	#SYS_gë˝u
 
__NR_gë˝u


	)

530 #ifde‡
__NR_gëcwd


531 
	#SYS_gëcwd
 
__NR_gëcwd


	)

534 #ifde‡
__NR_gëdíts


535 
	#SYS_gëdíts
 
__NR_gëdíts


	)

538 #ifde‡
__NR_gëdíts64


539 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

542 #ifde‡
__NR_gëdomaö«me


543 
	#SYS_gëdomaö«me
 
__NR_gëdomaö«me


	)

546 #ifde‡
__NR_gëdèbÀsize


547 
	#SYS_gëdèbÀsize
 
__NR_gëdèbÀsize


	)

550 #ifde‡
__NR_gëegid


551 
	#SYS_gëegid
 
__NR_gëegid


	)

554 #ifde‡
__NR_gëegid32


555 
	#SYS_gëegid32
 
__NR_gëegid32


	)

558 #ifde‡
__NR_gëeuid


559 
	#SYS_gëeuid
 
__NR_gëeuid


	)

562 #ifde‡
__NR_gëeuid32


563 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

566 #ifde‡
__NR_gëgid


567 
	#SYS_gëgid
 
__NR_gëgid


	)

570 #ifde‡
__NR_gëgid32


571 
	#SYS_gëgid32
 
__NR_gëgid32


	)

574 #ifde‡
__NR_gëgroups


575 
	#SYS_gëgroups
 
__NR_gëgroups


	)

578 #ifde‡
__NR_gëgroups32


579 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

582 #ifde‡
__NR_gëho°«me


583 
	#SYS_gëho°«me
 
__NR_gëho°«me


	)

586 #ifde‡
__NR_gëôimî


587 
	#SYS_gëôimî
 
__NR_gëôimî


	)

590 #ifde‡
__NR_gë∑gesize


591 
	#SYS_gë∑gesize
 
__NR_gë∑gesize


	)

594 #ifde‡
__NR_gë≥î«me


595 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

598 #ifde‡
__NR_gëpgid


599 
	#SYS_gëpgid
 
__NR_gëpgid


	)

602 #ifde‡
__NR_gëpgΩ


603 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

606 #ifde‡
__NR_gëpid


607 
	#SYS_gëpid
 
__NR_gëpid


	)

610 #ifde‡
__NR_gëpmsg


611 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

614 #ifde‡
__NR_gëµid


615 
	#SYS_gëµid
 
__NR_gëµid


	)

618 #ifde‡
__NR_gë¥i‹ôy


619 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

622 #ifde‡
__NR_gëøndom


623 
	#SYS_gëøndom
 
__NR_gëøndom


	)

626 #ifde‡
__NR_gëªsgid


627 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

630 #ifde‡
__NR_gëªsgid32


631 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

634 #ifde‡
__NR_gëªsuid


635 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

638 #ifde‡
__NR_gëªsuid32


639 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

642 #ifde‡
__NR_gëæimô


643 
	#SYS_gëæimô
 
__NR_gëæimô


	)

646 #ifde‡
__NR_gërußge


647 
	#SYS_gërußge
 
__NR_gërußge


	)

650 #ifde‡
__NR_gësid


651 
	#SYS_gësid
 
__NR_gësid


	)

654 #ifde‡
__NR_gësock«me


655 
	#SYS_gësock«me
 
__NR_gësock«me


	)

658 #ifde‡
__NR_gësock›t


659 
	#SYS_gësock›t
 
__NR_gësock›t


	)

662 #ifde‡
__NR_gëtid


663 
	#SYS_gëtid
 
__NR_gëtid


	)

666 #ifde‡
__NR_gëtimeofday


667 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

670 #ifde‡
__NR_gëuid


671 
	#SYS_gëuid
 
__NR_gëuid


	)

674 #ifde‡
__NR_gëuid32


675 
	#SYS_gëuid32
 
__NR_gëuid32


	)

678 #ifde‡
__NR_gëunwöd


679 
	#SYS_gëunwöd
 
__NR_gëunwöd


	)

682 #ifde‡
__NR_gëx©å


683 
	#SYS_gëx©å
 
__NR_gëx©å


	)

686 #ifde‡
__NR_gëxgid


687 
	#SYS_gëxgid
 
__NR_gëxgid


	)

690 #ifde‡
__NR_gëxpid


691 
	#SYS_gëxpid
 
__NR_gëxpid


	)

694 #ifde‡
__NR_gëxuid


695 
	#SYS_gëxuid
 
__NR_gëxuid


	)

698 #ifde‡
__NR_gây


699 
	#SYS_gây
 
__NR_gây


	)

702 #ifde‡
__NR_idÀ


703 
	#SYS_idÀ
 
__NR_idÀ


	)

706 #ifde‡
__NR_öô_moduÀ


707 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

710 #ifde‡
__NR_öŸify_add_w©ch


711 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

714 #ifde‡
__NR_öŸify_öô


715 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

718 #ifde‡
__NR_öŸify_öô1


719 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

722 #ifde‡
__NR_öŸify_rm_w©ch


723 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

726 #ifde‡
__NR_io_ˇn˚l


727 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

730 #ifde‡
__NR_io_de°roy


731 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

734 #ifde‡
__NR_io_gëevíts


735 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

738 #ifde‡
__NR_io_pgëevíts


739 
	#SYS_io_pgëevíts
 
__NR_io_pgëevíts


	)

742 #ifde‡
__NR_io_pgëevíts_time64


743 
	#SYS_io_pgëevíts_time64
 
__NR_io_pgëevíts_time64


	)

746 #ifde‡
__NR_io_£tup


747 
	#SYS_io_£tup
 
__NR_io_£tup


	)

750 #ifde‡
__NR_io_submô


751 
	#SYS_io_submô
 
__NR_io_submô


	)

754 #ifde‡
__NR_io_urög_íãr


755 
	#SYS_io_urög_íãr
 
__NR_io_urög_íãr


	)

758 #ifde‡
__NR_io_urög_ªgi°î


759 
	#SYS_io_urög_ªgi°î
 
__NR_io_urög_ªgi°î


	)

762 #ifde‡
__NR_io_urög_£tup


763 
	#SYS_io_urög_£tup
 
__NR_io_urög_£tup


	)

766 #ifde‡
__NR_io˘l


767 
	#SYS_io˘l
 
__NR_io˘l


	)

770 #ifde‡
__NR_i›îm


771 
	#SYS_i›îm
 
__NR_i›îm


	)

774 #ifde‡
__NR_i›l


775 
	#SYS_i›l
 
__NR_i›l


	)

778 #ifde‡
__NR_i›rio_gë


779 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

782 #ifde‡
__NR_i›rio_£t


783 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

786 #ifde‡
__NR_ùc


787 
	#SYS_ùc
 
__NR_ùc


	)

790 #ifde‡
__NR_kcmp


791 
	#SYS_kcmp
 
__NR_kcmp


	)

794 #ifde‡
__NR_kîn_„©uªs


795 
	#SYS_kîn_„©uªs
 
__NR_kîn_„©uªs


	)

798 #ifde‡
__NR_kexec_fûe_lﬂd


799 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

802 #ifde‡
__NR_kexec_lﬂd


803 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

806 #ifde‡
__NR_key˘l


807 
	#SYS_key˘l
 
__NR_key˘l


	)

810 #ifde‡
__NR_kûl


811 
	#SYS_kûl
 
__NR_kûl


	)

814 #ifde‡
__NR_œndlock_add_ruÀ


815 
	#SYS_œndlock_add_ruÀ
 
__NR_œndlock_add_ruÀ


	)

818 #ifde‡
__NR_œndlock_¸óã_ruÀ£t


819 
	#SYS_œndlock_¸óã_ruÀ£t
 
__NR_œndlock_¸óã_ruÀ£t


	)

822 #ifde‡
__NR_œndlock_ª°ri˘_£lf


823 
	#SYS_œndlock_ª°ri˘_£lf
 
__NR_œndlock_ª°ri˘_£lf


	)

826 #ifde‡
__NR_lchown


827 
	#SYS_lchown
 
__NR_lchown


	)

830 #ifde‡
__NR_lchown32


831 
	#SYS_lchown32
 
__NR_lchown32


	)

834 #ifde‡
__NR_lgëx©å


835 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

838 #ifde‡
__NR_lök


839 
	#SYS_lök
 
__NR_lök


	)

842 #ifde‡
__NR_lök©


843 
	#SYS_lök©
 
__NR_lök©


	)

846 #ifde‡
__NR_li°í


847 
	#SYS_li°í
 
__NR_li°í


	)

850 #ifde‡
__NR_li°x©å


851 
	#SYS_li°x©å
 
__NR_li°x©å


	)

854 #ifde‡
__NR_Œi°x©å


855 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

858 #ifde‡
__NR_Œ£ek


859 
	#SYS_Œ£ek
 
__NR_Œ£ek


	)

862 #ifde‡
__NR_lock


863 
	#SYS_lock
 
__NR_lock


	)

866 #ifde‡
__NR_lookup_dcookõ


867 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

870 #ifde‡
__NR_Ãemovex©å


871 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

874 #ifde‡
__NR_l£ek


875 
	#SYS_l£ek
 
__NR_l£ek


	)

878 #ifde‡
__NR_l£tx©å


879 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

882 #ifde‡
__NR_l°©


883 
	#SYS_l°©
 
__NR_l°©


	)

886 #ifde‡
__NR_l°©64


887 
	#SYS_l°©64
 
__NR_l°©64


	)

890 #ifde‡
__NR_madvi£


891 
	#SYS_madvi£
 
__NR_madvi£


	)

894 #ifde‡
__NR_mböd


895 
	#SYS_mböd
 
__NR_mböd


	)

898 #ifde‡
__NR_memb¨rõr


899 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

902 #ifde‡
__NR_memfd_¸óã


903 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

906 #ifde‡
__NR_memfd_£¸ë


907 
	#SYS_memfd_£¸ë
 
__NR_memfd_£¸ë


	)

910 #ifde‡
__NR_mem‹y_‹dîög


911 
	#SYS_mem‹y_‹dîög
 
__NR_mem‹y_‹dîög


	)

914 #ifde‡
__NR_migøã_∑ges


915 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

918 #ifde‡
__NR_möc‹e


919 
	#SYS_möc‹e
 
__NR_möc‹e


	)

922 #ifde‡
__NR_mkdú


923 
	#SYS_mkdú
 
__NR_mkdú


	)

926 #ifde‡
__NR_mkdú©


927 
	#SYS_mkdú©
 
__NR_mkdú©


	)

930 #ifde‡
__NR_mknod


931 
	#SYS_mknod
 
__NR_mknod


	)

934 #ifde‡
__NR_mknod©


935 
	#SYS_mknod©
 
__NR_mknod©


	)

938 #ifde‡
__NR_mlock


939 
	#SYS_mlock
 
__NR_mlock


	)

942 #ifde‡
__NR_mlock2


943 
	#SYS_mlock2
 
__NR_mlock2


	)

946 #ifde‡
__NR_mlockÆl


947 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

950 #ifde‡
__NR_mm≠


951 
	#SYS_mm≠
 
__NR_mm≠


	)

954 #ifde‡
__NR_mm≠2


955 
	#SYS_mm≠2
 
__NR_mm≠2


	)

958 #ifde‡
__NR_modify_ldt


959 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

962 #ifde‡
__NR_mou¡


963 
	#SYS_mou¡
 
__NR_mou¡


	)

966 #ifde‡
__NR_mou¡_£èâr


967 
	#SYS_mou¡_£èâr
 
__NR_mou¡_£èâr


	)

970 #ifde‡
__NR_move_mou¡


971 
	#SYS_move_mou¡
 
__NR_move_mou¡


	)

974 #ifde‡
__NR_move_∑ges


975 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

978 #ifde‡
__NR_m¥Ÿe˘


979 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

982 #ifde‡
__NR_mpx


983 
	#SYS_mpx
 
__NR_mpx


	)

986 #ifde‡
__NR_mq_gë£èâr


987 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

990 #ifde‡
__NR_mq_nŸify


991 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

994 #ifde‡
__NR_mq_›í


995 
	#SYS_mq_›í
 
__NR_mq_›í


	)

998 #ifde‡
__NR_mq_timedª˚ive


999 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

1002 #ifde‡
__NR_mq_timedª˚ive_time64


1003 
	#SYS_mq_timedª˚ive_time64
 
__NR_mq_timedª˚ive_time64


	)

1006 #ifde‡
__NR_mq_timed£nd


1007 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

1010 #ifde‡
__NR_mq_timed£nd_time64


1011 
	#SYS_mq_timed£nd_time64
 
__NR_mq_timed£nd_time64


	)

1014 #ifde‡
__NR_mq_u∆ök


1015 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

1018 #ifde‡
__NR_mªm≠


1019 
	#SYS_mªm≠
 
__NR_mªm≠


	)

1022 #ifde‡
__NR_msg˘l


1023 
	#SYS_msg˘l
 
__NR_msg˘l


	)

1026 #ifde‡
__NR_msggë


1027 
	#SYS_msggë
 
__NR_msggë


	)

1030 #ifde‡
__NR_msgrcv


1031 
	#SYS_msgrcv
 
__NR_msgrcv


	)

1034 #ifde‡
__NR_msg¢d


1035 
	#SYS_msg¢d
 
__NR_msg¢d


	)

1038 #ifde‡
__NR_msync


1039 
	#SYS_msync
 
__NR_msync


	)

1042 #ifde‡
__NR_mu…ùÀxî


1043 
	#SYS_mu…ùÀxî
 
__NR_mu…ùÀxî


	)

1046 #ifde‡
__NR_mu∆ock


1047 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

1050 #ifde‡
__NR_mu∆ockÆl


1051 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

1054 #ifde‡
__NR_munm≠


1055 
	#SYS_munm≠
 
__NR_munm≠


	)

1058 #ifde‡
__NR_«me_to_h™dÀ_©


1059 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

1062 #ifde‡
__NR_«no¶ìp


1063 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

1066 #ifde‡
__NR_√wf°©©


1067 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

1070 #ifde‡
__NR_nfs£rv˘l


1071 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

1074 #ifde‡
__NR_ni_sysˇŒ


1075 
	#SYS_ni_sysˇŒ
 
__NR_ni_sysˇŒ


	)

1078 #ifde‡
__NR_ni˚


1079 
	#SYS_ni˚
 
__NR_ni˚


	)

1082 #ifde‡
__NR_ﬁd_adjtimex


1083 
	#SYS_ﬁd_adjtimex
 
__NR_ﬁd_adjtimex


	)

1086 #ifde‡
__NR_ﬁd_gë∑gesize


1087 
	#SYS_ﬁd_gë∑gesize
 
__NR_ﬁd_gë∑gesize


	)

1090 #ifde‡
__NR_ﬁdf°©


1091 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

1094 #ifde‡
__NR_ﬁdl°©


1095 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

1098 #ifde‡
__NR_ﬁdﬁdu«me


1099 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

1102 #ifde‡
__NR_ﬁd°©


1103 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

1106 #ifde‡
__NR_ﬁdumou¡


1107 
	#SYS_ﬁdumou¡
 
__NR_ﬁdumou¡


	)

1110 #ifde‡
__NR_ﬁdu«me


1111 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

1114 #ifde‡
__NR_›í


1115 
	#SYS_›í
 
__NR_›í


	)

1118 #ifde‡
__NR_›í_by_h™dÀ_©


1119 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

1122 #ifde‡
__NR_›í_åì


1123 
	#SYS_›í_åì
 
__NR_›í_åì


	)

1126 #ifde‡
__NR_›í©


1127 
	#SYS_›í©
 
__NR_›í©


	)

1130 #ifde‡
__NR_›í©2


1131 
	#SYS_›í©2
 
__NR_›í©2


	)

1134 #ifde‡
__NR_‹1k_©omic


1135 
	#SYS_‹1k_©omic
 
__NR_‹1k_©omic


	)

1138 #ifde‡
__NR_osf_adjtime


1139 
	#SYS_osf_adjtime
 
__NR_osf_adjtime


	)

1142 #ifde‡
__NR_osf_afs_sysˇŒ


1143 
	#SYS_osf_afs_sysˇŒ
 
__NR_osf_afs_sysˇŒ


	)

1146 #ifde‡
__NR_osf_Æt_∂ock


1147 
	#SYS_osf_Æt_∂ock
 
__NR_osf_Æt_∂ock


	)

1150 #ifde‡
__NR_osf_Æt_£tsid


1151 
	#SYS_osf_Æt_£tsid
 
__NR_osf_Æt_£tsid


	)

1154 #ifde‡
__NR_osf_Æt_sig≥ndög


1155 
	#SYS_osf_Æt_sig≥ndög
 
__NR_osf_Æt_sig≥ndög


	)

1158 #ifde‡
__NR_osf_asynch_d´m⁄


1159 
	#SYS_osf_asynch_d´m⁄
 
__NR_osf_asynch_d´m⁄


	)

1162 #ifde‡
__NR_osf_aud˙é


1163 
	#SYS_osf_aud˙é
 
__NR_osf_aud˙é


	)

1166 #ifde‡
__NR_osf_audgí


1167 
	#SYS_osf_audgí
 
__NR_osf_audgí


	)

1170 #ifde‡
__NR_osf_chÊags


1171 
	#SYS_osf_chÊags
 
__NR_osf_chÊags


	)

1174 #ifde‡
__NR_osf_execve


1175 
	#SYS_osf_execve
 
__NR_osf_execve


	)

1178 #ifde‡
__NR_osf_exp‹tfs


1179 
	#SYS_osf_exp‹tfs
 
__NR_osf_exp‹tfs


	)

1182 #ifde‡
__NR_osf_fchÊags


1183 
	#SYS_osf_fchÊags
 
__NR_osf_fchÊags


	)

1186 #ifde‡
__NR_osf_fd©async


1187 
	#SYS_osf_fd©async
 
__NR_osf_fd©async


	)

1190 #ifde‡
__NR_osf_Â©hc⁄f


1191 
	#SYS_osf_Â©hc⁄f
 
__NR_osf_Â©hc⁄f


	)

1194 #ifde‡
__NR_osf_f°©


1195 
	#SYS_osf_f°©
 
__NR_osf_f°©


	)

1198 #ifde‡
__NR_osf_f°©fs


1199 
	#SYS_osf_f°©fs
 
__NR_osf_f°©fs


	)

1202 #ifde‡
__NR_osf_f°©fs64


1203 
	#SYS_osf_f°©fs64
 
__NR_osf_f°©fs64


	)

1206 #ifde‡
__NR_osf_fu£r


1207 
	#SYS_osf_fu£r
 
__NR_osf_fu£r


	)

1210 #ifde‡
__NR_osf_gëaddªssc⁄f


1211 
	#SYS_osf_gëaddªssc⁄f
 
__NR_osf_gëaddªssc⁄f


	)

1214 #ifde‡
__NR_osf_gëdúíåõs


1215 
	#SYS_osf_gëdúíåõs
 
__NR_osf_gëdúíåõs


	)

1218 #ifde‡
__NR_osf_gëdomaö«me


1219 
	#SYS_osf_gëdomaö«me
 
__NR_osf_gëdomaö«me


	)

1222 #ifde‡
__NR_osf_gëfh


1223 
	#SYS_osf_gëfh
 
__NR_osf_gëfh


	)

1226 #ifde‡
__NR_osf_gëfs°©


1227 
	#SYS_osf_gëfs°©
 
__NR_osf_gëfs°©


	)

1230 #ifde‡
__NR_osf_gëho°id


1231 
	#SYS_osf_gëho°id
 
__NR_osf_gëho°id


	)

1234 #ifde‡
__NR_osf_gëôimî


1235 
	#SYS_osf_gëôimî
 
__NR_osf_gëôimî


	)

1238 #ifde‡
__NR_osf_gëlogö


1239 
	#SYS_osf_gëlogö
 
__NR_osf_gëlogö


	)

1242 #ifde‡
__NR_osf_gëm¡


1243 
	#SYS_osf_gëm¡
 
__NR_osf_gëm¡


	)

1246 #ifde‡
__NR_osf_gërußge


1247 
	#SYS_osf_gërußge
 
__NR_osf_gërußge


	)

1250 #ifde‡
__NR_osf_gësysöfo


1251 
	#SYS_osf_gësysöfo
 
__NR_osf_gësysöfo


	)

1254 #ifde‡
__NR_osf_gëtimeofday


1255 
	#SYS_osf_gëtimeofday
 
__NR_osf_gëtimeofday


	)

1258 #ifde‡
__NR_osf_klﬂdˇŒ


1259 
	#SYS_osf_klﬂdˇŒ
 
__NR_osf_klﬂdˇŒ


	)

1262 #ifde‡
__NR_osf_kmodˇŒ


1263 
	#SYS_osf_kmodˇŒ
 
__NR_osf_kmodˇŒ


	)

1266 #ifde‡
__NR_osf_l°©


1267 
	#SYS_osf_l°©
 
__NR_osf_l°©


	)

1270 #ifde‡
__NR_osf_mem˙é


1271 
	#SYS_osf_mem˙é
 
__NR_osf_mem˙é


	)

1274 #ifde‡
__NR_osf_möc‹e


1275 
	#SYS_osf_möc‹e
 
__NR_osf_möc‹e


	)

1278 #ifde‡
__NR_osf_mou¡


1279 
	#SYS_osf_mou¡
 
__NR_osf_mou¡


	)

1282 #ifde‡
__NR_osf_mªm≠


1283 
	#SYS_osf_mªm≠
 
__NR_osf_mªm≠


	)

1286 #ifde‡
__NR_osf_msfs_sysˇŒ


1287 
	#SYS_osf_msfs_sysˇŒ
 
__NR_osf_msfs_sysˇŒ


	)

1290 #ifde‡
__NR_osf_m¶ìp


1291 
	#SYS_osf_m¶ìp
 
__NR_osf_m¶ìp


	)

1294 #ifde‡
__NR_osf_mvÆid


1295 
	#SYS_osf_mvÆid
 
__NR_osf_mvÆid


	)

1298 #ifde‡
__NR_osf_mwakeup


1299 
	#SYS_osf_mwakeup
 
__NR_osf_mwakeup


	)

1302 #ifde‡
__NR_osf_«c˚±


1303 
	#SYS_osf_«c˚±
 
__NR_osf_«c˚±


	)

1306 #ifde‡
__NR_osf_nfssvc


1307 
	#SYS_osf_nfssvc
 
__NR_osf_nfssvc


	)

1310 #ifde‡
__NR_osf_ngë≥î«me


1311 
	#SYS_osf_ngë≥î«me
 
__NR_osf_ngë≥î«me


	)

1314 #ifde‡
__NR_osf_ngësock«me


1315 
	#SYS_osf_ngësock«me
 
__NR_osf_ngësock«me


	)

1318 #ifde‡
__NR_osf_ƒecv‰om


1319 
	#SYS_osf_ƒecv‰om
 
__NR_osf_ƒecv‰om


	)

1322 #ifde‡
__NR_osf_ƒecvmsg


1323 
	#SYS_osf_ƒecvmsg
 
__NR_osf_ƒecvmsg


	)

1326 #ifde‡
__NR_osf_n£ndmsg


1327 
	#SYS_osf_n£ndmsg
 
__NR_osf_n£ndmsg


	)

1330 #ifde‡
__NR_osf_¡p_adjtime


1331 
	#SYS_osf_¡p_adjtime
 
__NR_osf_¡p_adjtime


	)

1334 #ifde‡
__NR_osf_¡p_gëtime


1335 
	#SYS_osf_¡p_gëtime
 
__NR_osf_¡p_gëtime


	)

1338 #ifde‡
__NR_osf_ﬁd_¸ót


1339 
	#SYS_osf_ﬁd_¸ót
 
__NR_osf_ﬁd_¸ót


	)

1342 #ifde‡
__NR_osf_ﬁd_f°©


1343 
	#SYS_osf_ﬁd_f°©
 
__NR_osf_ﬁd_f°©


	)

1346 #ifde‡
__NR_osf_ﬁd_gëpgΩ


1347 
	#SYS_osf_ﬁd_gëpgΩ
 
__NR_osf_ﬁd_gëpgΩ


	)

1350 #ifde‡
__NR_osf_ﬁd_kûÕg


1351 
	#SYS_osf_ﬁd_kûÕg
 
__NR_osf_ﬁd_kûÕg


	)

1354 #ifde‡
__NR_osf_ﬁd_l°©


1355 
	#SYS_osf_ﬁd_l°©
 
__NR_osf_ﬁd_l°©


	)

1358 #ifde‡
__NR_osf_ﬁd_›í


1359 
	#SYS_osf_ﬁd_›í
 
__NR_osf_ﬁd_›í


	)

1362 #ifde‡
__NR_osf_ﬁd_siga˘i⁄


1363 
	#SYS_osf_ﬁd_siga˘i⁄
 
__NR_osf_ﬁd_siga˘i⁄


	)

1366 #ifde‡
__NR_osf_ﬁd_sigblock


1367 
	#SYS_osf_ﬁd_sigblock
 
__NR_osf_ﬁd_sigblock


	)

1370 #ifde‡
__NR_osf_ﬁd_sigªtu∫


1371 
	#SYS_osf_ﬁd_sigªtu∫
 
__NR_osf_ﬁd_sigªtu∫


	)

1374 #ifde‡
__NR_osf_ﬁd_sig£tmask


1375 
	#SYS_osf_ﬁd_sig£tmask
 
__NR_osf_ﬁd_sig£tmask


	)

1378 #ifde‡
__NR_osf_ﬁd_sigvec


1379 
	#SYS_osf_ﬁd_sigvec
 
__NR_osf_ﬁd_sigvec


	)

1382 #ifde‡
__NR_osf_ﬁd_°©


1383 
	#SYS_osf_ﬁd_°©
 
__NR_osf_ﬁd_°©


	)

1386 #ifde‡
__NR_osf_ﬁd_vadvi£


1387 
	#SYS_osf_ﬁd_vadvi£
 
__NR_osf_ﬁd_vadvi£


	)

1390 #ifde‡
__NR_osf_ﬁd_våa˚


1391 
	#SYS_osf_ﬁd_våa˚
 
__NR_osf_ﬁd_våa˚


	)

1394 #ifde‡
__NR_osf_ﬁd_waô


1395 
	#SYS_osf_ﬁd_waô
 
__NR_osf_ﬁd_waô


	)

1398 #ifde‡
__NR_osf_ﬁdquŸa


1399 
	#SYS_osf_ﬁdquŸa
 
__NR_osf_ﬁdquŸa


	)

1402 #ifde‡
__NR_osf_∑thc⁄f


1403 
	#SYS_osf_∑thc⁄f
 
__NR_osf_∑thc⁄f


	)

1406 #ifde‡
__NR_osf_pid_block


1407 
	#SYS_osf_pid_block
 
__NR_osf_pid_block


	)

1410 #ifde‡
__NR_osf_pid_unblock


1411 
	#SYS_osf_pid_unblock
 
__NR_osf_pid_unblock


	)

1414 #ifde‡
__NR_osf_∂ock


1415 
	#SYS_osf_∂ock
 
__NR_osf_∂ock


	)

1418 #ifde‡
__NR_osf_¥io˙é£t


1419 
	#SYS_osf_¥io˙é£t
 
__NR_osf_¥io˙é£t


	)

1422 #ifde‡
__NR_osf_¥ofû


1423 
	#SYS_osf_¥ofû
 
__NR_osf_¥ofû


	)

1426 #ifde‡
__NR_osf_¥›li°_sysˇŒ


1427 
	#SYS_osf_¥›li°_sysˇŒ
 
__NR_osf_¥›li°_sysˇŒ


	)

1430 #ifde‡
__NR_osf_ªboŸ


1431 
	#SYS_osf_ªboŸ
 
__NR_osf_ªboŸ


	)

1434 #ifde‡
__NR_osf_ªvoke


1435 
	#SYS_osf_ªvoke
 
__NR_osf_ªvoke


	)

1438 #ifde‡
__NR_osf_sbrk


1439 
	#SYS_osf_sbrk
 
__NR_osf_sbrk


	)

1442 #ifde‡
__NR_osf_£curôy


1443 
	#SYS_osf_£curôy
 
__NR_osf_£curôy


	)

1446 #ifde‡
__NR_osf_£À˘


1447 
	#SYS_osf_£À˘
 
__NR_osf_£À˘


	)

1450 #ifde‡
__NR_osf_£t_¥ogøm_©åibuãs


1451 
	#SYS_osf_£t_¥ogøm_©åibuãs
 
__NR_osf_£t_¥ogøm_©åibuãs


	)

1454 #ifde‡
__NR_osf_£t_•ecuœtive


1455 
	#SYS_osf_£t_•ecuœtive
 
__NR_osf_£t_•ecuœtive


	)

1458 #ifde‡
__NR_osf_£tho°id


1459 
	#SYS_osf_£tho°id
 
__NR_osf_£tho°id


	)

1462 #ifde‡
__NR_osf_£tôimî


1463 
	#SYS_osf_£tôimî
 
__NR_osf_£tôimî


	)

1466 #ifde‡
__NR_osf_£éogö


1467 
	#SYS_osf_£éogö
 
__NR_osf_£éogö


	)

1470 #ifde‡
__NR_osf_£tsysöfo


1471 
	#SYS_osf_£tsysöfo
 
__NR_osf_£tsysöfo


	)

1474 #ifde‡
__NR_osf_£âimeofday


1475 
	#SYS_osf_£âimeofday
 
__NR_osf_£âimeofday


	)

1478 #ifde‡
__NR_osf_shm©


1479 
	#SYS_osf_shm©
 
__NR_osf_shm©


	)

1482 #ifde‡
__NR_osf_sig«l


1483 
	#SYS_osf_sig«l
 
__NR_osf_sig«l


	)

1486 #ifde‡
__NR_osf_sig¥ocmask


1487 
	#SYS_osf_sig¥ocmask
 
__NR_osf_sig¥ocmask


	)

1490 #ifde‡
__NR_osf_sig£nd£t


1491 
	#SYS_osf_sig£nd£t
 
__NR_osf_sig£nd£t


	)

1494 #ifde‡
__NR_osf_sig°ack


1495 
	#SYS_osf_sig°ack
 
__NR_osf_sig°ack


	)

1498 #ifde‡
__NR_osf_sigwaô¥im


1499 
	#SYS_osf_sigwaô¥im
 
__NR_osf_sigwaô¥im


	)

1502 #ifde‡
__NR_osf_s°k


1503 
	#SYS_osf_s°k
 
__NR_osf_s°k


	)

1506 #ifde‡
__NR_osf_°©


1507 
	#SYS_osf_°©
 
__NR_osf_°©


	)

1510 #ifde‡
__NR_osf_°©fs


1511 
	#SYS_osf_°©fs
 
__NR_osf_°©fs


	)

1514 #ifde‡
__NR_osf_°©fs64


1515 
	#SYS_osf_°©fs64
 
__NR_osf_°©fs64


	)

1518 #ifde‡
__NR_osf_subsys_öfo


1519 
	#SYS_osf_subsys_öfo
 
__NR_osf_subsys_öfo


	)

1522 #ifde‡
__NR_osf_sw≠˘l


1523 
	#SYS_osf_sw≠˘l
 
__NR_osf_sw≠˘l


	)

1526 #ifde‡
__NR_osf_sw≠⁄


1527 
	#SYS_osf_sw≠⁄
 
__NR_osf_sw≠⁄


	)

1530 #ifde‡
__NR_osf_sysˇŒ


1531 
	#SYS_osf_sysˇŒ
 
__NR_osf_sysˇŒ


	)

1534 #ifde‡
__NR_osf_sysöfo


1535 
	#SYS_osf_sysöfo
 
__NR_osf_sysöfo


	)

1538 #ifde‡
__NR_osf_èbÀ


1539 
	#SYS_osf_èbÀ
 
__NR_osf_èbÀ


	)

1542 #ifde‡
__NR_osf_uadmö


1543 
	#SYS_osf_uadmö
 
__NR_osf_uadmö


	)

1546 #ifde‡
__NR_osf_u¶ìp_thªad


1547 
	#SYS_osf_u¶ìp_thªad
 
__NR_osf_u¶ìp_thªad


	)

1550 #ifde‡
__NR_osf_uswôch


1551 
	#SYS_osf_uswôch
 
__NR_osf_uswôch


	)

1554 #ifde‡
__NR_osf_utc_adjtime


1555 
	#SYS_osf_utc_adjtime
 
__NR_osf_utc_adjtime


	)

1558 #ifde‡
__NR_osf_utc_gëtime


1559 
	#SYS_osf_utc_gëtime
 
__NR_osf_utc_gëtime


	)

1562 #ifde‡
__NR_osf_utimes


1563 
	#SYS_osf_utimes
 
__NR_osf_utimes


	)

1566 #ifde‡
__NR_osf_ut¢ame


1567 
	#SYS_osf_ut¢ame
 
__NR_osf_ut¢ame


	)

1570 #ifde‡
__NR_osf_waô4


1571 
	#SYS_osf_waô4
 
__NR_osf_waô4


	)

1574 #ifde‡
__NR_osf_waôid


1575 
	#SYS_osf_waôid
 
__NR_osf_waôid


	)

1578 #ifde‡
__NR_∑u£


1579 
	#SYS_∑u£
 
__NR_∑u£


	)

1582 #ifde‡
__NR_pcic⁄fig_ioba£


1583 
	#SYS_pcic⁄fig_ioba£
 
__NR_pcic⁄fig_ioba£


	)

1586 #ifde‡
__NR_pcic⁄fig_ªad


1587 
	#SYS_pcic⁄fig_ªad
 
__NR_pcic⁄fig_ªad


	)

1590 #ifde‡
__NR_pcic⁄fig_wrôe


1591 
	#SYS_pcic⁄fig_wrôe
 
__NR_pcic⁄fig_wrôe


	)

1594 #ifde‡
__NR_≥rf_evít_›í


1595 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

1598 #ifde‡
__NR_≥rf˘r


1599 
	#SYS_≥rf˘r
 
__NR_≥rf˘r


	)

1602 #ifde‡
__NR_≥rfm⁄˘l


1603 
	#SYS_≥rfm⁄˘l
 
__NR_≥rfm⁄˘l


	)

1606 #ifde‡
__NR_≥rs⁄Æôy


1607 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

1610 #ifde‡
__NR_pidfd_gëfd


1611 
	#SYS_pidfd_gëfd
 
__NR_pidfd_gëfd


	)

1614 #ifde‡
__NR_pidfd_›í


1615 
	#SYS_pidfd_›í
 
__NR_pidfd_›í


	)

1618 #ifde‡
__NR_pidfd_£nd_sig«l


1619 
	#SYS_pidfd_£nd_sig«l
 
__NR_pidfd_£nd_sig«l


	)

1622 #ifde‡
__NR_pùe


1623 
	#SYS_pùe
 
__NR_pùe


	)

1626 #ifde‡
__NR_pùe2


1627 
	#SYS_pùe2
 
__NR_pùe2


	)

1630 #ifde‡
__NR_pivŸ_roŸ


1631 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

1634 #ifde‡
__NR_pkey_Æloc


1635 
	#SYS_pkey_Æloc
 
__NR_pkey_Æloc


	)

1638 #ifde‡
__NR_pkey_‰ì


1639 
	#SYS_pkey_‰ì
 
__NR_pkey_‰ì


	)

1642 #ifde‡
__NR_pkey_m¥Ÿe˘


1643 
	#SYS_pkey_m¥Ÿe˘
 
__NR_pkey_m¥Ÿe˘


	)

1646 #ifde‡
__NR_pﬁl


1647 
	#SYS_pﬁl
 
__NR_pﬁl


	)

1650 #ifde‡
__NR_µﬁl


1651 
	#SYS_µﬁl
 
__NR_µﬁl


	)

1654 #ifde‡
__NR_µﬁl_time64


1655 
	#SYS_µﬁl_time64
 
__NR_µﬁl_time64


	)

1658 #ifde‡
__NR_¥˘l


1659 
	#SYS_¥˘l
 
__NR_¥˘l


	)

1662 #ifde‡
__NR_¥ód64


1663 
	#SYS_¥ód64
 
__NR_¥ód64


	)

1666 #ifde‡
__NR_¥ódv


1667 
	#SYS_¥ódv
 
__NR_¥ódv


	)

1670 #ifde‡
__NR_¥ódv2


1671 
	#SYS_¥ódv2
 
__NR_¥ódv2


	)

1674 #ifde‡
__NR_¥limô64


1675 
	#SYS_¥limô64
 
__NR_¥limô64


	)

1678 #ifde‡
__NR_¥o˚ss_madvi£


1679 
	#SYS_¥o˚ss_madvi£
 
__NR_¥o˚ss_madvi£


	)

1682 #ifde‡
__NR_¥o˚ss_mªÀa£


1683 
	#SYS_¥o˚ss_mªÀa£
 
__NR_¥o˚ss_mªÀa£


	)

1686 #ifde‡
__NR_¥o˚ss_vm_ªadv


1687 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

1690 #ifde‡
__NR_¥o˚ss_vm_wrôev


1691 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

1694 #ifde‡
__NR_¥of


1695 
	#SYS_¥of
 
__NR_¥of


	)

1698 #ifde‡
__NR_¥ofû


1699 
	#SYS_¥ofû
 
__NR_¥ofû


	)

1702 #ifde‡
__NR_p£À˘6


1703 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

1706 #ifde‡
__NR_p£À˘6_time64


1707 
	#SYS_p£À˘6_time64
 
__NR_p£À˘6_time64


	)

1710 #ifde‡
__NR_±ø˚


1711 
	#SYS_±ø˚
 
__NR_±ø˚


	)

1714 #ifde‡
__NR_puçmsg


1715 
	#SYS_puçmsg
 
__NR_puçmsg


	)

1718 #ifde‡
__NR_pwrôe64


1719 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

1722 #ifde‡
__NR_pwrôev


1723 
	#SYS_pwrôev
 
__NR_pwrôev


	)

1726 #ifde‡
__NR_pwrôev2


1727 
	#SYS_pwrôev2
 
__NR_pwrôev2


	)

1730 #ifde‡
__NR_quîy_moduÀ


1731 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

1734 #ifde‡
__NR_quŸa˘l


1735 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

1738 #ifde‡
__NR_quŸa˘l_fd


1739 
	#SYS_quŸa˘l_fd
 
__NR_quŸa˘l_fd


	)

1742 #ifde‡
__NR_ªad


1743 
	#SYS_ªad
 
__NR_ªad


	)

1746 #ifde‡
__NR_ªadahód


1747 
	#SYS_ªadahód
 
__NR_ªadahód


	)

1750 #ifde‡
__NR_ªaddú


1751 
	#SYS_ªaddú
 
__NR_ªaddú


	)

1754 #ifde‡
__NR_ªadlök


1755 
	#SYS_ªadlök
 
__NR_ªadlök


	)

1758 #ifde‡
__NR_ªadlök©


1759 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

1762 #ifde‡
__NR_ªadv


1763 
	#SYS_ªadv
 
__NR_ªadv


	)

1766 #ifde‡
__NR_ªboŸ


1767 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

1770 #ifde‡
__NR_ªcv


1771 
	#SYS_ªcv
 
__NR_ªcv


	)

1774 #ifde‡
__NR_ªcv‰om


1775 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

1778 #ifde‡
__NR_ªcvmmsg


1779 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

1782 #ifde‡
__NR_ªcvmmsg_time64


1783 
	#SYS_ªcvmmsg_time64
 
__NR_ªcvmmsg_time64


	)

1786 #ifde‡
__NR_ªcvmsg


1787 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

1790 #ifde‡
__NR_ªm≠_fûe_∑ges


1791 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

1794 #ifde‡
__NR_ªmovex©å


1795 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

1798 #ifde‡
__NR_ª«me


1799 
	#SYS_ª«me
 
__NR_ª«me


	)

1802 #ifde‡
__NR_ª«mót


1803 
	#SYS_ª«mót
 
__NR_ª«mót


	)

1806 #ifde‡
__NR_ª«mót2


1807 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

1810 #ifde‡
__NR_ªque°_key


1811 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

1814 #ifde‡
__NR_ª°¨t_sysˇŒ


1815 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

1818 #ifde‡
__NR_riscv_Êush_iˇche


1819 
	#SYS_riscv_Êush_iˇche
 
__NR_riscv_Êush_iˇche


	)

1822 #ifde‡
__NR_rmdú


1823 
	#SYS_rmdú
 
__NR_rmdú


	)

1826 #ifde‡
__NR_r£q


1827 
	#SYS_r£q
 
__NR_r£q


	)

1830 #ifde‡
__NR_π_siga˘i⁄


1831 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

1834 #ifde‡
__NR_π_sig≥ndög


1835 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

1838 #ifde‡
__NR_π_sig¥ocmask


1839 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

1842 #ifde‡
__NR_π_sigqueueöfo


1843 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

1846 #ifde‡
__NR_π_sigªtu∫


1847 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

1850 #ifde‡
__NR_π_sigsu•íd


1851 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

1854 #ifde‡
__NR_π_sigtimedwaô


1855 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

1858 #ifde‡
__NR_π_sigtimedwaô_time64


1859 
	#SYS_π_sigtimedwaô_time64
 
__NR_π_sigtimedwaô_time64


	)

1862 #ifde‡
__NR_π_tgsigqueueöfo


1863 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

1866 #ifde‡
__NR_πas


1867 
	#SYS_πas
 
__NR_πas


	)

1870 #ifde‡
__NR_s390_gu¨ded_°‹age


1871 
	#SYS_s390_gu¨ded_°‹age
 
__NR_s390_gu¨ded_°‹age


	)

1874 #ifde‡
__NR_s390_pci_mmio_ªad


1875 
	#SYS_s390_pci_mmio_ªad
 
__NR_s390_pci_mmio_ªad


	)

1878 #ifde‡
__NR_s390_pci_mmio_wrôe


1879 
	#SYS_s390_pci_mmio_wrôe
 
__NR_s390_pci_mmio_wrôe


	)

1882 #ifde‡
__NR_s390_ru¡ime_ö°r


1883 
	#SYS_s390_ru¡ime_ö°r
 
__NR_s390_ru¡ime_ö°r


	)

1886 #ifde‡
__NR_s390_°hyi


1887 
	#SYS_s390_°hyi
 
__NR_s390_°hyi


	)

1890 #ifde‡
__NR_sched_gë_afföôy


1891 
	#SYS_sched_gë_afföôy
 
__NR_sched_gë_afföôy


	)

1894 #ifde‡
__NR_sched_gë_¥i‹ôy_max


1895 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

1898 #ifde‡
__NR_sched_gë_¥i‹ôy_mö


1899 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

1902 #ifde‡
__NR_sched_gëafföôy


1903 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

1906 #ifde‡
__NR_sched_gë©å


1907 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

1910 #ifde‡
__NR_sched_gë∑øm


1911 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

1914 #ifde‡
__NR_sched_gëscheduÀr


1915 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

1918 #ifde‡
__NR_sched_º_gë_öãrvÆ


1919 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

1922 #ifde‡
__NR_sched_º_gë_öãrvÆ_time64


1923 
	#SYS_sched_º_gë_öãrvÆ_time64
 
__NR_sched_º_gë_öãrvÆ_time64


	)

1926 #ifde‡
__NR_sched_£t_afföôy


1927 
	#SYS_sched_£t_afföôy
 
__NR_sched_£t_afföôy


	)

1930 #ifde‡
__NR_sched_£èfföôy


1931 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

1934 #ifde‡
__NR_sched_£èâr


1935 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

1938 #ifde‡
__NR_sched_£ç¨am


1939 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

1942 #ifde‡
__NR_sched_£tscheduÀr


1943 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

1946 #ifde‡
__NR_sched_yõld


1947 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

1950 #ifde‡
__NR_£ccomp


1951 
	#SYS_£ccomp
 
__NR_£ccomp


	)

1954 #ifde‡
__NR_£curôy


1955 
	#SYS_£curôy
 
__NR_£curôy


	)

1958 #ifde‡
__NR_£À˘


1959 
	#SYS_£À˘
 
__NR_£À˘


	)

1962 #ifde‡
__NR_£m˘l


1963 
	#SYS_£m˘l
 
__NR_£m˘l


	)

1966 #ifde‡
__NR_£mgë


1967 
	#SYS_£mgë
 
__NR_£mgë


	)

1970 #ifde‡
__NR_£m›


1971 
	#SYS_£m›
 
__NR_£m›


	)

1974 #ifde‡
__NR_£mtimed›


1975 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

1978 #ifde‡
__NR_£mtimed›_time64


1979 
	#SYS_£mtimed›_time64
 
__NR_£mtimed›_time64


	)

1982 #ifde‡
__NR_£nd


1983 
	#SYS_£nd
 
__NR_£nd


	)

1986 #ifde‡
__NR_£ndfûe


1987 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

1990 #ifde‡
__NR_£ndfûe64


1991 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

1994 #ifde‡
__NR_£ndmmsg


1995 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

1998 #ifde‡
__NR_£ndmsg


1999 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

2002 #ifde‡
__NR_£ndto


2003 
	#SYS_£ndto
 
__NR_£ndto


	)

2006 #ifde‡
__NR_£t_mempﬁicy


2007 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

2010 #ifde‡
__NR_£t_robu°_li°


2011 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

2014 #ifde‡
__NR_£t_thªad_¨ó


2015 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

2018 #ifde‡
__NR_£t_tid_addªss


2019 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

2022 #ifde‡
__NR_£t_és


2023 
	#SYS_£t_és
 
__NR_£t_és


	)

2026 #ifde‡
__NR_£tdomaö«me


2027 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

2030 #ifde‡
__NR_£tfsgid


2031 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

2034 #ifde‡
__NR_£tfsgid32


2035 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

2038 #ifde‡
__NR_£tfsuid


2039 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

2042 #ifde‡
__NR_£tfsuid32


2043 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

2046 #ifde‡
__NR_£tgid


2047 
	#SYS_£tgid
 
__NR_£tgid


	)

2050 #ifde‡
__NR_£tgid32


2051 
	#SYS_£tgid32
 
__NR_£tgid32


	)

2054 #ifde‡
__NR_£tgroups


2055 
	#SYS_£tgroups
 
__NR_£tgroups


	)

2058 #ifde‡
__NR_£tgroups32


2059 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

2062 #ifde‡
__NR_£th´


2063 
	#SYS_£th´
 
__NR_£th´


	)

2066 #ifde‡
__NR_£tho°«me


2067 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

2070 #ifde‡
__NR_£tôimî


2071 
	#SYS_£tôimî
 
__NR_£tôimî


	)

2074 #ifde‡
__NR_£äs


2075 
	#SYS_£äs
 
__NR_£äs


	)

2078 #ifde‡
__NR_£çgid


2079 
	#SYS_£çgid
 
__NR_£çgid


	)

2082 #ifde‡
__NR_£çgΩ


2083 
	#SYS_£çgΩ
 
__NR_£çgΩ


	)

2086 #ifde‡
__NR_£çri‹ôy


2087 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

2090 #ifde‡
__NR_£åegid


2091 
	#SYS_£åegid
 
__NR_£åegid


	)

2094 #ifde‡
__NR_£åegid32


2095 
	#SYS_£åegid32
 
__NR_£åegid32


	)

2098 #ifde‡
__NR_£åesgid


2099 
	#SYS_£åesgid
 
__NR_£åesgid


	)

2102 #ifde‡
__NR_£åesgid32


2103 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

2106 #ifde‡
__NR_£åesuid


2107 
	#SYS_£åesuid
 
__NR_£åesuid


	)

2110 #ifde‡
__NR_£åesuid32


2111 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

2114 #ifde‡
__NR_£åeuid


2115 
	#SYS_£åeuid
 
__NR_£åeuid


	)

2118 #ifde‡
__NR_£åeuid32


2119 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

2122 #ifde‡
__NR_£ålimô


2123 
	#SYS_£ålimô
 
__NR_£ålimô


	)

2126 #ifde‡
__NR_£tsid


2127 
	#SYS_£tsid
 
__NR_£tsid


	)

2130 #ifde‡
__NR_£tsock›t


2131 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

2134 #ifde‡
__NR_£âimeofday


2135 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

2138 #ifde‡
__NR_£tuid


2139 
	#SYS_£tuid
 
__NR_£tuid


	)

2142 #ifde‡
__NR_£tuid32


2143 
	#SYS_£tuid32
 
__NR_£tuid32


	)

2146 #ifde‡
__NR_£tx©å


2147 
	#SYS_£tx©å
 
__NR_£tx©å


	)

2150 #ifde‡
__NR_sgëmask


2151 
	#SYS_sgëmask
 
__NR_sgëmask


	)

2154 #ifde‡
__NR_shm©


2155 
	#SYS_shm©
 
__NR_shm©


	)

2158 #ifde‡
__NR_shm˘l


2159 
	#SYS_shm˘l
 
__NR_shm˘l


	)

2162 #ifde‡
__NR_shmdt


2163 
	#SYS_shmdt
 
__NR_shmdt


	)

2166 #ifde‡
__NR_shmgë


2167 
	#SYS_shmgë
 
__NR_shmgë


	)

2170 #ifde‡
__NR_shutdown


2171 
	#SYS_shutdown
 
__NR_shutdown


	)

2174 #ifde‡
__NR_siga˘i⁄


2175 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

2178 #ifde‡
__NR_sigÆt°ack


2179 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

2182 #ifde‡
__NR_sig«l


2183 
	#SYS_sig«l
 
__NR_sig«l


	)

2186 #ifde‡
__NR_sig«lfd


2187 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

2190 #ifde‡
__NR_sig«lfd4


2191 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

2194 #ifde‡
__NR_sig≥ndög


2195 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

2198 #ifde‡
__NR_sig¥ocmask


2199 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

2202 #ifde‡
__NR_sigªtu∫


2203 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

2206 #ifde‡
__NR_sigsu•íd


2207 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

2210 #ifde‡
__NR_sockë


2211 
	#SYS_sockë
 
__NR_sockë


	)

2214 #ifde‡
__NR_sockëˇŒ


2215 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

2218 #ifde‡
__NR_sockë∑ú


2219 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

2222 #ifde‡
__NR_•li˚


2223 
	#SYS_•li˚
 
__NR_•li˚


	)

2226 #ifde‡
__NR_•u_¸óã


2227 
	#SYS_•u_¸óã
 
__NR_•u_¸óã


	)

2230 #ifde‡
__NR_•u_run


2231 
	#SYS_•u_run
 
__NR_•u_run


	)

2234 #ifde‡
__NR_s£tmask


2235 
	#SYS_s£tmask
 
__NR_s£tmask


	)

2238 #ifde‡
__NR_°©


2239 
	#SYS_°©
 
__NR_°©


	)

2242 #ifde‡
__NR_°©64


2243 
	#SYS_°©64
 
__NR_°©64


	)

2246 #ifde‡
__NR_°©fs


2247 
	#SYS_°©fs
 
__NR_°©fs


	)

2250 #ifde‡
__NR_°©fs64


2251 
	#SYS_°©fs64
 
__NR_°©fs64


	)

2254 #ifde‡
__NR_°©x


2255 
	#SYS_°©x
 
__NR_°©x


	)

2258 #ifde‡
__NR_°ime


2259 
	#SYS_°ime
 
__NR_°ime


	)

2262 #ifde‡
__NR_°ty


2263 
	#SYS_°ty
 
__NR_°ty


	)

2266 #ifde‡
__NR_sub∑ge_¥Ÿ


2267 
	#SYS_sub∑ge_¥Ÿ
 
__NR_sub∑ge_¥Ÿ


	)

2270 #ifde‡
__NR_sw≠c⁄ãxt


2271 
	#SYS_sw≠c⁄ãxt
 
__NR_sw≠c⁄ãxt


	)

2274 #ifde‡
__NR_sw≠off


2275 
	#SYS_sw≠off
 
__NR_sw≠off


	)

2278 #ifde‡
__NR_sw≠⁄


2279 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

2282 #ifde‡
__NR_swôch_ídün


2283 
	#SYS_swôch_ídün
 
__NR_swôch_ídün


	)

2286 #ifde‡
__NR_symlök


2287 
	#SYS_symlök
 
__NR_symlök


	)

2290 #ifde‡
__NR_symlök©


2291 
	#SYS_symlök©
 
__NR_symlök©


	)

2294 #ifde‡
__NR_sync


2295 
	#SYS_sync
 
__NR_sync


	)

2298 #ifde‡
__NR_sync_fûe_ønge


2299 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

2302 #ifde‡
__NR_sync_fûe_ønge2


2303 
	#SYS_sync_fûe_ønge2
 
__NR_sync_fûe_ønge2


	)

2306 #ifde‡
__NR_syncfs


2307 
	#SYS_syncfs
 
__NR_syncfs


	)

2310 #ifde‡
__NR_sys_debug_£tc⁄ãxt


2311 
	#SYS_sys_debug_£tc⁄ãxt
 
__NR_sys_debug_£tc⁄ãxt


	)

2314 #ifde‡
__NR_sys_ïﬁl_¸óã


2315 
	#SYS_sys_ïﬁl_¸óã
 
__NR_sys_ïﬁl_¸óã


	)

2318 #ifde‡
__NR_sys_ïﬁl_˘l


2319 
	#SYS_sys_ïﬁl_˘l
 
__NR_sys_ïﬁl_˘l


	)

2322 #ifde‡
__NR_sys_ïﬁl_waô


2323 
	#SYS_sys_ïﬁl_waô
 
__NR_sys_ïﬁl_waô


	)

2326 #ifde‡
__NR_sysˇŒ


2327 
	#SYS_sysˇŒ
 
__NR_sysˇŒ


	)

2330 #ifde‡
__NR_sysfs


2331 
	#SYS_sysfs
 
__NR_sysfs


	)

2334 #ifde‡
__NR_sysöfo


2335 
	#SYS_sysöfo
 
__NR_sysöfo


	)

2338 #ifde‡
__NR_sy¶og


2339 
	#SYS_sy¶og
 
__NR_sy¶og


	)

2342 #ifde‡
__NR_sysmùs


2343 
	#SYS_sysmùs
 
__NR_sysmùs


	)

2346 #ifde‡
__NR_ãe


2347 
	#SYS_ãe
 
__NR_ãe


	)

2350 #ifde‡
__NR_tgkûl


2351 
	#SYS_tgkûl
 
__NR_tgkûl


	)

2354 #ifde‡
__NR_time


2355 
	#SYS_time
 
__NR_time


	)

2358 #ifde‡
__NR_timî_¸óã


2359 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

2362 #ifde‡
__NR_timî_dñëe


2363 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

2366 #ifde‡
__NR_timî_gëovîrun


2367 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

2370 #ifde‡
__NR_timî_gëtime


2371 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

2374 #ifde‡
__NR_timî_gëtime64


2375 
	#SYS_timî_gëtime64
 
__NR_timî_gëtime64


	)

2378 #ifde‡
__NR_timî_£âime


2379 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

2382 #ifde‡
__NR_timî_£âime64


2383 
	#SYS_timî_£âime64
 
__NR_timî_£âime64


	)

2386 #ifde‡
__NR_timîfd


2387 
	#SYS_timîfd
 
__NR_timîfd


	)

2390 #ifde‡
__NR_timîfd_¸óã


2391 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

2394 #ifde‡
__NR_timîfd_gëtime


2395 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

2398 #ifde‡
__NR_timîfd_gëtime64


2399 
	#SYS_timîfd_gëtime64
 
__NR_timîfd_gëtime64


	)

2402 #ifde‡
__NR_timîfd_£âime


2403 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

2406 #ifde‡
__NR_timîfd_£âime64


2407 
	#SYS_timîfd_£âime64
 
__NR_timîfd_£âime64


	)

2410 #ifde‡
__NR_times


2411 
	#SYS_times
 
__NR_times


	)

2414 #ifde‡
__NR_tkûl


2415 
	#SYS_tkûl
 
__NR_tkûl


	)

2418 #ifde‡
__NR_åunˇã


2419 
	#SYS_åunˇã
 
__NR_åunˇã


	)

2422 #ifde‡
__NR_åunˇã64


2423 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

2426 #ifde‡
__NR_tuxˇŒ


2427 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

2430 #ifde‡
__NR_ud·øp


2431 
	#SYS_ud·øp
 
__NR_ud·øp


	)

2434 #ifde‡
__NR_ugëæimô


2435 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

2438 #ifde‡
__NR_ulimô


2439 
	#SYS_ulimô
 
__NR_ulimô


	)

2442 #ifde‡
__NR_umask


2443 
	#SYS_umask
 
__NR_umask


	)

2446 #ifde‡
__NR_umou¡


2447 
	#SYS_umou¡
 
__NR_umou¡


	)

2450 #ifde‡
__NR_umou¡2


2451 
	#SYS_umou¡2
 
__NR_umou¡2


	)

2454 #ifde‡
__NR_u«me


2455 
	#SYS_u«me
 
__NR_u«me


	)

2458 #ifde‡
__NR_u∆ök


2459 
	#SYS_u∆ök
 
__NR_u∆ök


	)

2462 #ifde‡
__NR_u∆ök©


2463 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

2466 #ifde‡
__NR_unsh¨e


2467 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

2470 #ifde‡
__NR_u£lib


2471 
	#SYS_u£lib
 
__NR_u£lib


	)

2474 #ifde‡
__NR_u£rÁu…fd


2475 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

2478 #ifde‡
__NR_u§26


2479 
	#SYS_u§26
 
__NR_u§26


	)

2482 #ifde‡
__NR_u§32


2483 
	#SYS_u§32
 
__NR_u§32


	)

2486 #ifde‡
__NR_u°©


2487 
	#SYS_u°©
 
__NR_u°©


	)

2490 #ifde‡
__NR_utime


2491 
	#SYS_utime
 
__NR_utime


	)

2494 #ifde‡
__NR_utimíßt


2495 
	#SYS_utimíßt
 
__NR_utimíßt


	)

2498 #ifde‡
__NR_utimíßt_time64


2499 
	#SYS_utimíßt_time64
 
__NR_utimíßt_time64


	)

2502 #ifde‡
__NR_utimes


2503 
	#SYS_utimes
 
__NR_utimes


	)

2506 #ifde‡
__NR_uå≠_ö°Æl


2507 
	#SYS_uå≠_ö°Æl
 
__NR_uå≠_ö°Æl


	)

2510 #ifde‡
__NR_vf‹k


2511 
	#SYS_vf‹k
 
__NR_vf‹k


	)

2514 #ifde‡
__NR_vh™gup


2515 
	#SYS_vh™gup
 
__NR_vh™gup


	)

2518 #ifde‡
__NR_vm86


2519 
	#SYS_vm86
 
__NR_vm86


	)

2522 #ifde‡
__NR_vm86ﬁd


2523 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

2526 #ifde‡
__NR_vm•li˚


2527 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

2530 #ifde‡
__NR_v£rvî


2531 
	#SYS_v£rvî
 
__NR_v£rvî


	)

2534 #ifde‡
__NR_waô4


2535 
	#SYS_waô4
 
__NR_waô4


	)

2538 #ifde‡
__NR_waôid


2539 
	#SYS_waôid
 
__NR_waôid


	)

2542 #ifde‡
__NR_waôpid


2543 
	#SYS_waôpid
 
__NR_waôpid


	)

2546 #ifde‡
__NR_wrôe


2547 
	#SYS_wrôe
 
__NR_wrôe


	)

2550 #ifde‡
__NR_wrôev


2551 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/time.h

23 #i‚de‡
_BITS_TIME_H


24 
	#_BITS_TIME_H
 1

	)

26 
	~<bôs/ty≥s.h
>

34 
	#CLOCKS_PER_SEC
 ((
__˛ock_t
Ë1000000)

	)

36 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

37 && !
deföed
 
__USE_XOPEN2K


40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

60 
	#CLOCK_BOOTTIME
 7

	)

62 
	#CLOCK_REALTIME_ALARM
 8

	)

64 
	#CLOCK_BOOTTIME_ALARM
 9

	)

66 
	#CLOCK_TAI
 11

	)

69 
	#TIMER_ABSTIME
 1

	)

72 #ifde‡
__USE_GNU


73 
	~<bôs/timex.h
>

75 
__BEGIN_DECLS


78 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

80 #ifde‡
__USE_TIME_BITS64


81 #i‡
	`deföed
(
__REDIRECT_NTH
)

82 
	`__REDIRECT_NTH
 (
˛ock_adjtime
, (
__˛ockid_t
 
__˛ock_id
,

83 
timex
 *
__utx
),

84 
__˛ock_adjtime64
);

86 
	#˛ock_adjtime
 
__˛ock_adjtime64


	)

90 
__END_DECLS


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/timesize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 
__öt8_t
 
	t__öt_Àa°8_t
;

53 
__uöt8_t
 
	t__uöt_Àa°8_t
;

54 
__öt16_t
 
	t__öt_Àa°16_t
;

55 
__uöt16_t
 
	t__uöt_Àa°16_t
;

56 
__öt32_t
 
	t__öt_Àa°32_t
;

57 
__uöt32_t
 
	t__uöt_Àa°32_t
;

58 
__öt64_t
 
	t__öt_Àa°64_t
;

59 
__uöt64_t
 
	t__uöt_Àa°64_t
;

62 #i‡
__WORDSIZE
 == 64

63 
	t__quad_t
;

64 
	t__u_quad_t
;

66 
__exãnsi⁄__
 
	t__quad_t
;

67 
__exãnsi⁄__
 
	t__u_quad_t
;

71 #i‡
__WORDSIZE
 == 64

72 
	t__ötmax_t
;

73 
	t__uötmax_t
;

75 
__exãnsi⁄__
 
	t__ötmax_t
;

76 
__exãnsi⁄__
 
	t__uötmax_t
;

109 
	#__S16_TYPE
 

	)

110 
	#__U16_TYPE
 

	)

111 
	#__S32_TYPE
 

	)

112 
	#__U32_TYPE
 

	)

113 
	#__SLONGWORD_TYPE
 

	)

114 
	#__ULONGWORD_TYPE
 

	)

115 #i‡
__WORDSIZE
 == 32

116 
	#__SQUAD_TYPE
 
__öt64_t


	)

117 
	#__UQUAD_TYPE
 
__uöt64_t


	)

118 
	#__SWORD_TYPE
 

	)

119 
	#__UWORD_TYPE
 

	)

120 
	#__SLONG32_TYPE
 

	)

121 
	#__ULONG32_TYPE
 

	)

122 
	#__S64_TYPE
 
__öt64_t


	)

123 
	#__U64_TYPE
 
__uöt64_t


	)

126 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

127 #ñi‡
__WORDSIZE
 == 64

128 
	t__SQUAD_TYPE
 

	)

129 
	t__UQUAD_TYPE
 

	)

130 
	t__SWORD_TYPE
 

	)

131 
	t__UWORD_TYPE
 

	)

132 
	t__SLONG32_TYPE
 

	)

133 
	t__ULONG32_TYPE
 

	)

134 
	t__S64_TYPE
 

	)

135 
	t__U64_TYPE
 

	)

137 
	t__STD_TYPE
 

	)

141 
	~<bôs/ty≥sizes.h
>

142 
	~<bôs/time64.h
>

145 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

146 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

147 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

148 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

149 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

150 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

151 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

152 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

153 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

154 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

155 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

156 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

157 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

158 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

159 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

160 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

161 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

162 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

163 
__STD_TYPE
 
__SUSECONDS64_T_TYPE
 
	g__su£c⁄ds64_t
;

165 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

166 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

169 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

172 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

175 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

180 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

181 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

184 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

185 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

188 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

189 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

192 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

194 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

197 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

199 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

203 
__off64_t
 
	t__loff_t
;

204 *
	t__ˇddr_t
;

207 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

210 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

215 
	t__sig_©omic_t
;

220 #i‡
__TIMESIZE
 =64 && 
deföed
 
__LIBC


221 
	#__time64_t
 
__time_t


	)

222 #ñi‡
__TIMESIZE
 != 64

223 
__STD_TYPE
 
__TIME64_T_TYPE
 
	g__time64_t
;

226 #unde‡
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #i‚de‡
__FILE_deföed


2 
	#__FILE_deföed
 1

	)

4 
	g_IO_FILE
;

7 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #i‚de‡
____FILE_deföed


2 
	#____FILE_deföed
 1

	)

4 
	g_IO_FILE
;

5 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/__fpos64_t.h

1 #i‚de‡
_____Âos64_t_deföed


2 
	#_____Âos64_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos64_t


12 
__off64_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos64_t
;

	@/usr/include/bits/types/__fpos_t.h

1 #i‚de‡
_____Âos_t_deföed


2 
	#_____Âos_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos_t


12 
__off_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos_t
;

	@/usr/include/bits/types/clock_t.h

1 #i‚de‡
__˛ock_t_deföed


2 
	#__˛ock_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ock_t
 
	t˛ock_t
;

	@/usr/include/bits/types/clockid_t.h

1 #i‚de‡
__˛ockid_t_deföed


2 
	#__˛ockid_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ockid_t
 
	t˛ockid_t
;

	@/usr/include/bits/types/cookie_io_functions_t.h

18 #i‚de‡
__cookõ_io_fun˘i⁄s_t_deföed


19 
	#__cookõ_io_fun˘i⁄s_t_deföed
 1

	)

21 
	~<bôs/ty≥s.h
>

27 
__ssize_t
 
	tcookõ_ªad_fun˘i⁄_t
 (*
	t__cookõ
, *
	t__buf
,

28 
	tsize_t
 
	t__nbyãs
);

36 
__ssize_t
 
	tcookõ_wrôe_fun˘i⁄_t
 (*
	t__cookõ
, c⁄° *
	t__buf
,

37 
	tsize_t
 
	t__nbyãs
);

45 
	tcookõ_£ek_fun˘i⁄_t
 (*
	t__cookõ
, 
	t__off64_t
 *
	t__pos
, 
	t__w
);

48 
	tcookõ_˛o£_fun˘i⁄_t
 (*
	t__cookõ
);

55 
	s_IO_cookõ_io_fun˘i⁄s_t


57 
cookõ_ªad_fun˘i⁄_t
 *
	mªad
;

58 
cookõ_wrôe_fun˘i⁄_t
 *
	mwrôe
;

59 
cookõ_£ek_fun˘i⁄_t
 *
	m£ek
;

60 
cookõ_˛o£_fun˘i⁄_t
 *
	m˛o£
;

61 } 
	tcookõ_io_fun˘i⁄s_t
;

	@/usr/include/bits/types/error_t.h

19 #i‚de‡
__îr‹_t_deföed


20 
	#__îr‹_t_deföed
 1

	)

22 
	tîr‹_t
;

	@/usr/include/bits/types/locale_t.h

19 #i‚de‡
_BITS_TYPES_LOCALE_T_H


20 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 
	~<bôs/ty≥s/__loˇÀ_t.h
>

24 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types/sigset_t.h

1 #i‚de‡
__sig£t_t_deföed


2 
	#__sig£t_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__sig£t_t.h
>

7 
__sig£t_t
 
	tsig£t_t
;

	@/usr/include/bits/types/struct_FILE.h

18 #i‚de‡
__°ru˘_FILE_deföed


19 
	#__°ru˘_FILE_deföed
 1

	)

25 #i‡
deföed
 
_IO_USE_OLD_IO_FILE
 && !deföed 
_LIBC


29 #i‡
deföed
 
_IO_lock_t_deföed
 && !deföed 
_LIBC


33 
	~<bôs/ty≥s.h
>

35 
	g_IO_FILE
;

36 
	g_IO_m¨kî
;

37 
	g_IO_codecvt
;

38 
	g_IO_wide_d©a
;

42 #i‚de‡
_IO_lock_t_deföed


43 
	t_IO_lock_t
;

49 
	s_IO_FILE


51 
	m_Êags
;

54 *
	m_IO_ªad_±r
;

55 *
	m_IO_ªad_íd
;

56 *
	m_IO_ªad_ba£
;

57 *
	m_IO_wrôe_ba£
;

58 *
	m_IO_wrôe_±r
;

59 *
	m_IO_wrôe_íd
;

60 *
	m_IO_buf_ba£
;

61 *
	m_IO_buf_íd
;

64 *
	m_IO_ßve_ba£
;

65 *
	m_IO_backup_ba£
;

66 *
	m_IO_ßve_íd
;

68 
_IO_m¨kî
 *
	m_m¨kîs
;

70 
_IO_FILE
 *
	m_chaö
;

72 
	m_fûío
;

73 
	m_Êags2
;

74 
__off_t
 
	m_ﬁd_off£t
;

77 
	m_cur_cﬁumn
;

78 sig√d 
	m_vèbÀ_off£t
;

79 
	m_sh‹tbuf
[1];

81 
_IO_lock_t
 *
	m_lock
;

82 #ifde‡
_IO_USE_OLD_IO_FILE


85 
	s_IO_FILE_com∂ëe


87 
_IO_FILE
 
	m_fûe
;

89 
__off64_t
 
	m_off£t
;

91 
_IO_codecvt
 *
	m_codecvt
;

92 
_IO_wide_d©a
 *
	m_wide_d©a
;

93 
_IO_FILE
 *
	m_‰ìªs_li°
;

94 *
	m_‰ìªs_buf
;

95 
size_t
 
	m__∑d5
;

96 
	m_mode
;

98 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

102 
	#__gëc_u∆ocked_body
(
_Â
) \

103 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
) \

104 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

106 
	#__putc_u∆ocked_body
(
_ch
, 
_Â
) \

107 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
) \

108 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

109 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

111 
	#_IO_EOF_SEEN
 0x0010

	)

112 
	#__„of_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

114 
	#_IO_ERR_SEEN
 0x0020

	)

115 
	#__„º‹_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

117 
	#_IO_USER_LOCK
 0x8000

	)

	@/usr/include/bits/types/struct_iovec.h

19 #i‚de‡
__iovec_deföed


20 
	#__iovec_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 
	siovec


28 *
	miov_ba£
;

29 
size_t
 
	miov_Àn
;

	@/usr/include/bits/types/struct_itimerspec.h

1 #i‚de‡
__ôimî•ec_deföed


2 
	#__ôimî•ec_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

8 
	sôimî•ec


10 
time•ec
 
	mô_öãrvÆ
;

11 
time•ec
 
	mô_vÆue
;

	@/usr/include/bits/types/struct_osockaddr.h

1 #i‚de‡
__osockaddr_deföed


2 
	#__osockaddr_deföed
 1

	)

6 
	sosockaddr


8 
	mß_Ámûy
;

9 
	mß_d©a
[14];

	@/usr/include/bits/types/struct_timespec.h

2 #i‚de‡
_STRUCT_TIMESPEC


3 
	#_STRUCT_TIMESPEC
 1

	)

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ídün.h
>

7 
	~<bôs/ty≥s/time_t.h
>

11 
	stime•ec


13 #ifde‡
__USE_TIME_BITS64


14 
__time64_t
 
	mtv_£c
;

16 
__time_t
 
	mtv_£c
;

18 #i‡
__WORDSIZE
 == 64 \

19 || (
deföed
 
	m__SYSCALL_WORDSIZE
 && __SYSCALL_WORDSIZE == 64) \

20 || (
__TIMESIZE
 =32 && !
deföed
 
__USE_TIME_BITS64
)

21 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

23 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


25 
	mtv_n£c
;

27 
	mtv_n£c
;

	@/usr/include/bits/types/struct_tm.h

1 #i‚de‡
__°ru˘_tm_deföed


2 
	#__°ru˘_tm_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
	stm


9 
	mtm_£c
;

10 
	mtm_mö
;

11 
	mtm_hour
;

12 
	mtm_mday
;

13 
	mtm_m⁄
;

14 
	mtm_yór
;

15 
	mtm_wday
;

16 
	mtm_yday
;

17 
	mtm_isd°
;

19 #ifdef 
__USE_MISC


20 
	mtm_gmtoff
;

21 c⁄° *
	mtm_z⁄e
;

23 
	m__tm_gmtoff
;

24 c⁄° *
	m__tm_z⁄e
;

	@/usr/include/bits/types/time_t.h

1 #i‚de‡
__time_t_deföed


2 
	#__time_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 #ifde‡
__USE_TIME_BITS64


8 
__time64_t
 
	ttime_t
;

10 
__time_t
 
	ttime_t
;

	@/usr/include/bits/types/timer_t.h

1 #i‚de‡
__timî_t_deföed


2 
	#__timî_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__timî_t
 
	ttimî_t
;

	@/usr/include/bits/uintn-identity.h

19 #i‡!
deföed
 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_UINTN_IDENTITY_H


24 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 
	~<bôs/ty≥s.h
>

32 
__ölöe
 
__uöt16_t


33 
	$__uöt16_idítôy
 (
__uöt16_t
 
__x
)

35  
__x
;

36 
	}
}

38 
__ölöe
 
__uöt32_t


39 
	$__uöt32_idítôy
 (
__uöt32_t
 
__x
)

41  
__x
;

42 
	}
}

44 
__ölöe
 
__uöt64_t


45 
	$__uöt64_idítôy
 (
__uöt64_t
 
__x
)

47  
__x
;

48 
	}
}

	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
)

25 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
)

28 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

29 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

30 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

31 
size_t
 
__buÊí
), 
__ªad_chk
)

32 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

35 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


36 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

38  
	`__glibc_f‹tify
 (
ªad
, 
__nbyãs
,  (),

39 
	`__glibc_objsize0
 (
__buf
),

40 
__fd
, 
__buf
, 
__nbyãs
);

41 
	}
}

43 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


44 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

45 
__off_t
 
__off£t
, 
size_t
 
__bufsize
)

46 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

47 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

48 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
)

49 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

50 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

51 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off_t
 
__off£t
), 
¥ód
)

53 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

54 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

55 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

56 
__off64_t
 
__off£t
), 
¥ód64
)

57 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74  
	`__glibc_f‹tify
 (
¥ód
, 
__nbyãs
,  (),

75 
	`__glibc_objsize0
 (
__buf
),

76 
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

77 
	}
}

79 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


80 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

82  
	`__glibc_f‹tify
 (
¥ód64
, 
__nbyãs
,  (),

83 
	`__glibc_objsize0
 (
__buf
),

84 
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

88 #ifde‡
__USE_LARGEFILE64


89 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


90 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

92  
	`__glibc_f‹tify
 (
¥ód64
, 
__nbyãs
,  (),

93 
	`__glibc_objsize0
 (
__buf
),

94 
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

95 
	}
}

99 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


100 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

101 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

102 
size_t
 
__buÊí
)

103 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

104 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

105 (c⁄° *
__ª°ri˘
 
__∑th
,

106 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

107 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

108 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

109 (c⁄° *
__ª°ri˘
 
__∑th
,

110 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

111 
size_t
 
__buÊí
), 
__ªadlök_chk
)

112 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

115 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


116 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

117 
size_t
 
__Àn
))

119  
	`__glibc_f‹tify
 (
ªadlök
, 
__Àn
,  (),

120 
	`__glibc_objsize
 (
__buf
),

121 
__∑th
, 
__buf
, 
__Àn
);

122 
	}
}

125 #ifde‡
__USE_ATFILE


126 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

127 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

128 
size_t
 
__buÊí
)

129 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 3, 4));

130 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

131 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

132 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

133 
ªadlök©
)

134 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 3, 4));

135 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

136 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

137 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

138 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

139 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

143 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


144 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

145 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

147  
	`__glibc_f‹tify
 (
ªadlök©
, 
__Àn
,  (),

148 
	`__glibc_objsize
 (
__buf
),

149 
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

150 
	}
}

153 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

154 
__THROW
 
__wur
;

155 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

156 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

157 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

158 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

159 
__gëcwd_chk
)

160 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

163 
__f‹tify_fun˘i⁄
 
__wur
 *

164 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

166  
	`__glibc_f‹tify
 (
gëcwd
, 
__size
,  (),

167 
	`__glibc_objsize
 (
__buf
),

168 
__buf
, 
__size
);

169 
	}
}

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


172 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

173 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

174 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

175 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

178 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

179 
	`__NTH
 (
	$gëwd
 (*
__buf
))

181 i‡(
	`__glibc_objsize
 (
__buf
Ë!(
size_t
) -1)

182  
	`__gëwd_chk
 (
__buf
, 
	`__glibc_objsize
 (__buf));

183  
	`__gëwd_w¨n
 (
__buf
);

184 
	}
}

187 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

188 
size_t
 
__buÊí
Ë
__THROW


189 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

190 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

191 
size_t
 
__Àn
), 
c⁄f°r
)

192 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

193 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

194 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

195 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

196 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

199 
__f‹tify_fun˘i⁄
 
size_t


200 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

202  
	`__glibc_f‹tify
 (
c⁄f°r
, 
__Àn
,  (),

203 
	`__glibc_objsize
 (
__buf
),

204 
__«me
, 
__buf
, 
__Àn
);

205 
	}
}

208 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

209 
__THROW
 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 1));

210 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

211 
gëgroups
Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 1));

212 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

213 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

214 
__gëgroups_chk
)

215 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

218 
__f‹tify_fun˘i⁄
 

219 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

221  
	`__glibc_f‹tify
 (
gëgroups
, 
__size
,  (
__gid_t
),

222 
	`__glibc_objsize
 (
__li°
),

223 
__size
, 
__li°
);

224 
	}
}

227 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

228 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2))

229 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

230 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

231 
size_t
 
__buÊí
), 
ây«me_r
)

232 
	`__n⁄nuŒ
 ((2));

233 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

234 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

235 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

236 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

239 
__f‹tify_fun˘i⁄
 

240 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

242  
	`__glibc_f‹tify
 (
ây«me_r
, 
__buÊí
,  (),

243 
	`__glibc_objsize
 (
__buf
),

244 
__fd
, 
__buf
, 
__buÊí
);

245 
	}
}

248 #ifde‡
__USE_POSIX199506


249 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

250 
	`__n⁄nuŒ
 ((1)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

251 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

252 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

253 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

254 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

255 
__gëlogö_r_chk
)

256 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

259 
__f‹tify_fun˘i⁄
 

260 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

262  
	`__glibc_f‹tify
 (
gëlogö_r
, 
__buÊí
,  (),

263 
	`__glibc_objsize
 (
__buf
),

264 
__buf
, 
__buÊí
);

265 
	}
}

269 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


270 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

272 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

273 
gëho°«me
)

274 
	`__n⁄nuŒ
 ((1)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

275 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

276 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

277 
__gëho°«me_chk
)

278 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

281 
__f‹tify_fun˘i⁄
 

282 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

284  
	`__glibc_f‹tify
 (
gëho°«me
, 
__buÊí
,  (),

285 
	`__glibc_objsize
 (
__buf
),

286 
__buf
, 
__buÊí
);

287 
	}
}

291 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

292 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

294 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

295 
size_t
 
__buÊí
),

296 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1))

297 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

298 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

299 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

300 
__gëdomaö«me_chk
)

301 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

305 
__f‹tify_fun˘i⁄
 

306 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

308  
	`__glibc_f‹tify
 (
gëdomaö«me
, 
__buÊí
,  (),

309 
	`__glibc_objsize
 (
__buf
),

310 
__buf
, 
__buÊí
);

311 
	}
}

	@/usr/include/bits/unistd_ext.h

19 #i‚de‡
_UNISTD_H


23 #ifde‡
__USE_GNU


34 
__pid_t
 
	$gëtid
 (Ë
__THROW
;

36 #ifde‡
__has_ö˛ude


37 #i‡
	`__has_ö˛ude
 ("linux/close_range.h")

38 
	~"löux/˛o£_ønge.h
"

42 #i‚de‡
CLOSE_RANGE_UNSHARE


43 
	#CLOSE_RANGE_UNSHARE
 (1U << 1)

	)

46 #i‚de‡
CLOSE_RANGE_CLOEXEC


47 
	#CLOSE_RANGE_CLOEXEC
 (1U << 2)

	)

	@/usr/include/bits/utsname.h

18 #i‚de‡
_SYS_UTSNAME_H


23 
	#_UTSNAME_LENGTH
 65

	)

28 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

36 
	#__WNOTHREAD
 0x20000000

	)

38 
	#__WALL
 0x40000000

	)

39 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifde‡
__x86_64__


12 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 
	#__SYSCALL_WORDSIZE
 64

	)

16 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

62 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

64 
	~<bôs/uio_lim.h
>

65 #ifde‡
__IOV_MAX


66 
	#IOV_MAX
 
__IOV_MAX


	)

68 #unde‡
IOV_MAX


73 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

76 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

79 
	#NL_MSGMAX
 
INT_MAX


	)

83 #i‡
deföed
 
__USE_GNU
 || !deföed 
__USE_XOPEN2K8


84 
	#NL_NMAX
 
INT_MAX


	)

88 
	#NL_SETMAX
 
INT_MAX


	)

91 
	#NL_TEXTMAX
 
INT_MAX


	)

94 
	#NZERO
 20

	)

98 #ifde‡
INT_MAX


99 #i‡
INT_MAX
 == 32767

100 
	#WORD_BIT
 16

	)

102 #i‡
INT_MAX
 == 2147483647

103 
	#WORD_BIT
 32

	)

106 
	#WORD_BIT
 64

	)

109 #ñi‡
deföed
 
__INT_MAX__


110 #i‡
__INT_MAX__
 == 32767

111 
	#WORD_BIT
 16

	)

113 #i‡
__INT_MAX__
 == 2147483647

114 
	#WORD_BIT
 32

	)

117 
	#WORD_BIT
 64

	)

121 
	#WORD_BIT
 32

	)

125 #ifde‡
LONG_MAX


126 #i‡
LONG_MAX
 == 2147483647

127 
	#LONG_BIT
 32

	)

130 
	#LONG_BIT
 64

	)

132 #ñi‡
deföed
 
__LONG_MAX__


133 #i‡
__LONG_MAX__
 == 2147483647

134 
	#LONG_BIT
 32

	)

137 
	#LONG_BIT
 64

	)

140 
	~<bôs/w‹dsize.h
>

141 #i‡
__WORDSIZE
 == 64

142 
	#LONG_BIT
 64

	)

144 
	#LONG_BIT
 32

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

126 #unde‡
__USE_ISOC11


127 #unde‡
__USE_ISOC99


128 #unde‡
__USE_ISOC95


129 #unde‡
__USE_ISOCXX11


130 #unde‡
__USE_POSIX


131 #unde‡
__USE_POSIX2


132 #unde‡
__USE_POSIX199309


133 #unde‡
__USE_POSIX199506


134 #unde‡
__USE_XOPEN


135 #unde‡
__USE_XOPEN_EXTENDED


136 #unde‡
__USE_UNIX98


137 #unde‡
__USE_XOPEN2K


138 #unde‡
__USE_XOPEN2KXSI


139 #unde‡
__USE_XOPEN2K8


140 #unde‡
__USE_XOPEN2K8XSI


141 #unde‡
__USE_LARGEFILE


142 #unde‡
__USE_LARGEFILE64


143 #unde‡
__USE_FILE_OFFSET64


144 #unde‡
__USE_MISC


145 #unde‡
__USE_ATFILE


146 #unde‡
__USE_DYNAMIC_STACK_SIZE


147 #unde‡
__USE_GNU


148 #unde‡
__USE_FORTIFY_LEVEL


149 #unde‡
__KERNEL_STRICT_NAMES


150 #unde‡
__GLIBC_USE_ISOC2X


151 #unde‡
__GLIBC_USE_DEPRECATED_GETS


152 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


156 #i‚de‡
_LOOSE_KERNEL_NAMES


157 
	#__KERNEL_STRICT_NAMES


	)

167 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


168 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

169 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

171 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

178 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


179 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

180 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

182 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

186 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

192 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

193 && !
deföed
 
	g_DEFAULT_SOURCE


195 #unde‡
_DEFAULT_SOURCE


196 
	#_DEFAULT_SOURCE
 1

	)

200 #ifde‡
_GNU_SOURCE


201 #unde‡
_ISOC95_SOURCE


202 
	#_ISOC95_SOURCE
 1

	)

203 #unde‡
_ISOC99_SOURCE


204 
	#_ISOC99_SOURCE
 1

	)

205 #unde‡
_ISOC11_SOURCE


206 
	#_ISOC11_SOURCE
 1

	)

207 #unde‡
_ISOC2X_SOURCE


208 
	#_ISOC2X_SOURCE
 1

	)

209 #unde‡
_POSIX_SOURCE


210 
	#_POSIX_SOURCE
 1

	)

211 #unde‡
_POSIX_C_SOURCE


212 
	#_POSIX_C_SOURCE
 200809L

	)

213 #unde‡
_XOPEN_SOURCE


214 
	#_XOPEN_SOURCE
 700

	)

215 #unde‡
_XOPEN_SOURCE_EXTENDED


216 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

217 #unde‡
_LARGEFILE64_SOURCE


218 
	#_LARGEFILE64_SOURCE
 1

	)

219 #unde‡
_DEFAULT_SOURCE


220 
	#_DEFAULT_SOURCE
 1

	)

221 #unde‡
_ATFILE_SOURCE


222 
	#_ATFILE_SOURCE
 1

	)

223 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


224 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

229 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

230 || (!
deföed
 
	g__STRICT_ANSI__
 \

231 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

232 && !
deföed
 
	g_ISOC2X_SOURCE
 \

233 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

234 && !
deföed
 
	g_XOPEN_SOURCE
))

235 #unde‡
_DEFAULT_SOURCE


236 
	#_DEFAULT_SOURCE
 1

	)

240 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

241 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

242 
	#__GLIBC_USE_ISOC2X
 1

	)

244 
	#__GLIBC_USE_ISOC2X
 0

	)

248 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

249 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

250 
	#__USE_ISOC11
 1

	)

254 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

255 || 
deföed
 
_ISOC2X_SOURCE
 \

256 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

257 
	#__USE_ISOC99
 1

	)

261 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

262 || 
deföed
 
_ISOC2X_SOURCE
 \

263 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

264 
	#__USE_ISOC95
 1

	)

267 #ifde‡
__˝lu•lus


269 #i‡
__˝lu•lus
 >= 201703L

270 
	#__USE_ISOC11
 1

	)

274 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


275 
	#__USE_ISOCXX11
 1

	)

276 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_DEFAULT_SOURCE


284 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


285 
	#__USE_POSIX_IMPLICITLY
 1

	)

287 #unde‡
_POSIX_SOURCE


288 
	#_POSIX_SOURCE
 1

	)

289 #unde‡
_POSIX_C_SOURCE


290 
	#_POSIX_C_SOURCE
 200809L

	)

293 #i‡((!
deföed
 
__STRICT_ANSI__
 \

294 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

295 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

296 
	#_POSIX_SOURCE
 1

	)

297 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

298 
	#_POSIX_C_SOURCE
 2

	)

299 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

300 
	#_POSIX_C_SOURCE
 199506L

	)

301 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

302 
	#_POSIX_C_SOURCE
 200112L

	)

304 
	#_POSIX_C_SOURCE
 200809L

	)

306 
	#__USE_POSIX_IMPLICITLY
 1

	)

315 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

316 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

317 
	#_POSIX_SOURCE
 1

	)

318 #unde‡
_POSIX_C_SOURCE


319 
	#_POSIX_C_SOURCE
 199506L

	)

322 #i‡(
deföed
 
_POSIX_SOURCE
 \

323 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

324 || 
deföed
 
_XOPEN_SOURCE
)

325 
	#__USE_POSIX
 1

	)

328 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


329 
	#__USE_POSIX2
 1

	)

332 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

333 
	#__USE_POSIX199309
 1

	)

336 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

337 
	#__USE_POSIX199506
 1

	)

340 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

341 
	#__USE_XOPEN2K
 1

	)

342 #unde‡
__USE_ISOC95


343 
	#__USE_ISOC95
 1

	)

344 #unde‡
__USE_ISOC99


345 
	#__USE_ISOC99
 1

	)

348 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

349 
	#__USE_XOPEN2K8
 1

	)

350 #unde‡
_ATFILE_SOURCE


351 
	#_ATFILE_SOURCE
 1

	)

354 #ifdef 
_XOPEN_SOURCE


355 
	#__USE_XOPEN
 1

	)

356 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

357 
	#__USE_XOPEN_EXTENDED
 1

	)

358 
	#__USE_UNIX98
 1

	)

359 #unde‡
_LARGEFILE_SOURCE


360 
	#_LARGEFILE_SOURCE
 1

	)

361 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

362 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

363 
	#__USE_XOPEN2K8
 1

	)

364 
	#__USE_XOPEN2K8XSI
 1

	)

366 
	#__USE_XOPEN2K
 1

	)

367 
	#__USE_XOPEN2KXSI
 1

	)

368 #unde‡
__USE_ISOC95


369 
	#__USE_ISOC95
 1

	)

370 #unde‡
__USE_ISOC99


371 
	#__USE_ISOC99
 1

	)

374 #ifde‡
_XOPEN_SOURCE_EXTENDED


375 
	#__USE_XOPEN_EXTENDED
 1

	)

380 #ifde‡
_LARGEFILE_SOURCE


381 
	#__USE_LARGEFILE
 1

	)

384 #ifde‡
_LARGEFILE64_SOURCE


385 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

389 
	#__USE_FILE_OFFSET64
 1

	)

392 
	~<„©uªs-time64.h
>

394 #i‡
deföed
 
_DEFAULT_SOURCE


395 
	#__USE_MISC
 1

	)

398 #ifdef 
_ATFILE_SOURCE


399 
	#__USE_ATFILE
 1

	)

402 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


403 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

406 #ifdef 
_GNU_SOURCE


407 
	#__USE_GNU
 1

	)

410 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

411 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

412 #ñi‡!
__GNUC_PREREQ
 (4, 1)

413 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

414 || 
	$__GNUC_PREREQ
 (12, 0))

416 #i‡
_FORTIFY_SOURCE
 > 3

418 
	#__USE_FORTIFY_LEVEL
 3

	)

419 #ñi‡
_FORTIFY_SOURCE
 > 1

420 #i‡
_FORTIFY_SOURCE
 > 2

422 
	#__USE_FORTIFY_LEVEL
 2

	)

424 
	#__USE_FORTIFY_LEVEL
 1

	)

427 #i‚de‡
__USE_FORTIFY_LEVEL


428 
	#__USE_FORTIFY_LEVEL
 0

	)

435 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


436 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

438 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

453 #i‡(
deföed
 
__USE_GNU
 \

454 && (
deföed
 
__˝lu•lus
 \

455 ? (
__˝lu•lus
 < 201103L && !
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
) \

456 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

457 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

459 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

464 
	~<°dc-¥edef.h
>

472 #unde‡
__GNU_LIBRARY__


473 
	#__GNU_LIBRARY__
 6

	)

477 
	#__GLIBC__
 2

	)

478 
	#__GLIBC_MINOR__
 35

	)

480 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

481 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

484 #i‚de‡
__ASSEMBLER__


485 #i‚de‡
_SYS_CDEFS_H


486 
	~<sys/cdefs.h
>

491 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


492 
	#__USE_LARGEFILE
 1

	)

493 
	#__USE_LARGEFILE64
 1

	)

499 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

500 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

501 && 
deföed
 
__exã∫_ölöe


502 
	#__USE_EXTERN_INLINES
 1

	)

510 
	~<gnu/°ubs.h
>

	@/usr/include/linux/bpf_common.h

2 #i‚de‡
__LINUX_BPF_COMMON_H__


3 
	#__LINUX_BPF_COMMON_H__


	)

6 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

7 
	#BPF_LD
 0x00

	)

8 
	#BPF_LDX
 0x01

	)

9 
	#BPF_ST
 0x02

	)

10 
	#BPF_STX
 0x03

	)

11 
	#BPF_ALU
 0x04

	)

12 
	#BPF_JMP
 0x05

	)

13 
	#BPF_RET
 0x06

	)

14 
	#BPF_MISC
 0x07

	)

17 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

18 
	#BPF_W
 0x00

	)

19 
	#BPF_H
 0x08

	)

20 
	#BPF_B
 0x10

	)

22 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

23 
	#BPF_IMM
 0x00

	)

24 
	#BPF_ABS
 0x20

	)

25 
	#BPF_IND
 0x40

	)

26 
	#BPF_MEM
 0x60

	)

27 
	#BPF_LEN
 0x80

	)

28 
	#BPF_MSH
 0xa0

	)

31 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

32 
	#BPF_ADD
 0x00

	)

33 
	#BPF_SUB
 0x10

	)

34 
	#BPF_MUL
 0x20

	)

35 
	#BPF_DIV
 0x30

	)

36 
	#BPF_OR
 0x40

	)

37 
	#BPF_AND
 0x50

	)

38 
	#BPF_LSH
 0x60

	)

39 
	#BPF_RSH
 0x70

	)

40 
	#BPF_NEG
 0x80

	)

41 
	#BPF_MOD
 0x90

	)

42 
	#BPF_XOR
 0xa0

	)

44 
	#BPF_JA
 0x00

	)

45 
	#BPF_JEQ
 0x10

	)

46 
	#BPF_JGT
 0x20

	)

47 
	#BPF_JGE
 0x30

	)

48 
	#BPF_JSET
 0x40

	)

49 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

50 
	#BPF_K
 0x00

	)

51 
	#BPF_X
 0x08

	)

53 #i‚de‡
BPF_MAXINSNS


54 
	#BPF_MAXINSNS
 4096

	)

	@/usr/include/linux/byteorder/little_endian.h

2 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


3 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

5 #i‚de‡
__LITTLE_ENDIAN


6 
	#__LITTLE_ENDIAN
 1234

	)

8 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


9 
	#__LITTLE_ENDIAN_BITFIELD


	)

12 
	~<löux/°ddef.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/swab.h
>

16 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

17 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

18 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

19 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

21 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

23 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

24 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

25 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

27 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

29 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

30 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

31 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

32 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

33 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

34 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

35 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

36 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

37 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

38 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

39 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

40 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

41 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

42 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

43 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

45 
__Æways_ölöe
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

47  (
__À64
)*
p
;

48 
	}
}

49 
__Æways_ölöe
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

51  (
__u64
)*
p
;

52 
	}
}

53 
__Æways_ölöe
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

55  (
__À32
)*
p
;

56 
	}
}

57 
__Æways_ölöe
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

59  (
__u32
)*
p
;

60 
	}
}

61 
__Æways_ölöe
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

63  (
__À16
)*
p
;

64 
	}
}

65 
__Æways_ölöe
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

67  (
__u16
)*
p
;

68 
	}
}

69 
__Æways_ölöe
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

71  (
__be64
)
	`__swab64p
(
p
);

72 
	}
}

73 
__Æways_ölöe
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

75  
	`__swab64p
((
__u64
 *)
p
);

76 
	}
}

77 
__Æways_ölöe
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

79  (
__be32
)
	`__swab32p
(
p
);

80 
	}
}

81 
__Æways_ölöe
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

83  
	`__swab32p
((
__u32
 *)
p
);

84 
	}
}

85 
__Æways_ölöe
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

87  (
__be16
)
	`__swab16p
(
p
);

88 
	}
}

89 
__Æways_ölöe
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

91  
	`__swab16p
((
__u16
 *)
p
);

92 
	}
}

93 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

98 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

99 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

100 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

101 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

102 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

103 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

104 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/const.h

4 #i‚de‡
_LINUX_CONST_H


5 
	#_LINUX_CONST_H


	)

16 #ifde‡
__ASSEMBLY__


17 
	#_AC
(
X
,
Y
Ë
	)
X

18 
	#_AT
(
T
,
X
Ë
	)
X

20 
	#__AC
(
X
,
Y
Ë(X##Y)

	)

21 
	#_AC
(
X
,
Y
Ë
	`__AC
(X,Y)

	)

22 
	#_AT
(
T
,
X
Ë((T)(X))

	)

25 
	#_UL
(
x
Ë(
	`_AC
(x, 
UL
))

	)

26 
	#_ULL
(
x
Ë(
	`_AC
(x, 
ULL
))

	)

28 
	#_BITUL
(
x
Ë(
	`_UL
(1Ë<< (x))

	)

29 
	#_BITULL
(
x
Ë(
	`_ULL
(1Ë<< (x))

	)

31 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`__ty≥of__
(x))◊Ë- 1)

	)

32 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

34 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/if_addr.h

2 #i‚de‡
__LINUX_IF_ADDR_H


3 
	#__LINUX_IF_ADDR_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/√éök.h
>

8 
	siÁddrmsg
 {

9 
__u8
 
	miÁ_Ámûy
;

10 
__u8
 
	miÁ_¥efixÀn
;

11 
__u8
 
	miÁ_Êags
;

12 
__u8
 
	miÁ_sc›e
;

13 
__u32
 
	miÁ_ödex
;

27 
	mIFA_UNSPEC
,

28 
	mIFA_ADDRESS
,

29 
	mIFA_LOCAL
,

30 
	mIFA_LABEL
,

31 
	mIFA_BROADCAST
,

32 
	mIFA_ANYCAST
,

33 
	mIFA_CACHEINFO
,

34 
	mIFA_MULTICAST
,

35 
	mIFA_FLAGS
,

36 
	mIFA_RT_PRIORITY
,

37 
	mIFA_TARGET_NETNSID
,

38 
	m__IFA_MAX
,

41 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

44 
	#IFA_F_SECONDARY
 0x01

	)

45 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

47 
	#IFA_F_NODAD
 0x02

	)

48 
	#IFA_F_OPTIMISTIC
 0x04

	)

49 
	#IFA_F_DADFAILED
 0x08

	)

50 
	#IFA_F_HOMEADDRESS
 0x10

	)

51 
	#IFA_F_DEPRECATED
 0x20

	)

52 
	#IFA_F_TENTATIVE
 0x40

	)

53 
	#IFA_F_PERMANENT
 0x80

	)

54 
	#IFA_F_MANAGETEMPADDR
 0x100

	)

55 
	#IFA_F_NOPREFIXROUTE
 0x200

	)

56 
	#IFA_F_MCAUTOJOIN
 0x400

	)

57 
	#IFA_F_STABLE_PRIVACY
 0x800

	)

59 
	siÁ_ˇcheöfo
 {

60 
__u32
 
	miÁ_¥e„ªd
;

61 
__u32
 
	miÁ_vÆid
;

62 
__u32
 
	mc°amp
;

63 
__u32
 
	mt°amp
;

67 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

68 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/ioctl.h

2 #i‚de‡
_LINUX_IOCTL_H


3 
	#_LINUX_IOCTL_H


	)

5 
	~<asm/io˘l.h
>

	@/usr/include/linux/neighbour.h

2 #i‚de‡
__LINUX_NEIGHBOUR_H


3 
	#__LINUX_NEIGHBOUR_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/√éök.h
>

8 
	sndmsg
 {

9 
__u8
 
	mndm_Ámûy
;

10 
__u8
 
	mndm_∑d1
;

11 
__u16
 
	mndm_∑d2
;

12 
__s32
 
	mndm_ifödex
;

13 
__u16
 
	mndm_°©e
;

14 
__u8
 
	mndm_Êags
;

15 
__u8
 
	mndm_ty≥
;

19 
	mNDA_UNSPEC
,

20 
	mNDA_DST
,

21 
	mNDA_LLADDR
,

22 
	mNDA_CACHEINFO
,

23 
	mNDA_PROBES
,

24 
	mNDA_VLAN
,

25 
	mNDA_PORT
,

26 
	mNDA_VNI
,

27 
	mNDA_IFINDEX
,

28 
	mNDA_MASTER
,

29 
	mNDA_LINK_NETNSID
,

30 
	mNDA_SRC_VNI
,

31 
	mNDA_PROTOCOL
,

32 
	mNDA_NH_ID
,

33 
	mNDA_FDB_EXT_ATTRS
,

34 
	m__NDA_MAX


37 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

43 
	#NTF_USE
 0x01

	)

44 
	#NTF_SELF
 0x02

	)

45 
	#NTF_MASTER
 0x04

	)

46 
	#NTF_PROXY
 0x08

	)

47 
	#NTF_EXT_LEARNED
 0x10

	)

48 
	#NTF_OFFLOADED
 0x20

	)

49 
	#NTF_STICKY
 0x40

	)

50 
	#NTF_ROUTER
 0x80

	)

56 
	#NUD_INCOMPLETE
 0x01

	)

57 
	#NUD_REACHABLE
 0x02

	)

58 
	#NUD_STALE
 0x04

	)

59 
	#NUD_DELAY
 0x08

	)

60 
	#NUD_PROBE
 0x10

	)

61 
	#NUD_FAILED
 0x20

	)

64 
	#NUD_NOARP
 0x40

	)

65 
	#NUD_PERMANENT
 0x80

	)

66 
	#NUD_NONE
 0x00

	)

76 
	snda_ˇcheöfo
 {

77 
__u32
 
	mndm_c⁄fúmed
;

78 
__u32
 
	mndm_u£d
;

79 
__u32
 
	mndm_upd©ed
;

80 
__u32
 
	mndm_ªf˙t
;

108 
	sndt_°©s
 {

109 
__u64
 
	mndts_Ælocs
;

110 
__u64
 
	mndts_de°roys
;

111 
__u64
 
	mndts_hash_grows
;

112 
__u64
 
	mndts_ªs_Áûed
;

113 
__u64
 
	mndts_lookups
;

114 
__u64
 
	mndts_hôs
;

115 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

116 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

117 
__u64
 
	mndts_≥riodic_gc_runs
;

118 
__u64
 
	mndts_f‹˚d_gc_runs
;

119 
__u64
 
	mndts_èbÀ_fuŒs
;

123 
	mNDTPA_UNSPEC
,

124 
	mNDTPA_IFINDEX
,

125 
	mNDTPA_REFCNT
,

126 
	mNDTPA_REACHABLE_TIME
,

127 
	mNDTPA_BASE_REACHABLE_TIME
,

128 
	mNDTPA_RETRANS_TIME
,

129 
	mNDTPA_GC_STALETIME
,

130 
	mNDTPA_DELAY_PROBE_TIME
,

131 
	mNDTPA_QUEUE_LEN
,

132 
	mNDTPA_APP_PROBES
,

133 
	mNDTPA_UCAST_PROBES
,

134 
	mNDTPA_MCAST_PROBES
,

135 
	mNDTPA_ANYCAST_DELAY
,

136 
	mNDTPA_PROXY_DELAY
,

137 
	mNDTPA_PROXY_QLEN
,

138 
	mNDTPA_LOCKTIME
,

139 
	mNDTPA_QUEUE_LENBYTES
,

140 
	mNDTPA_MCAST_REPROBES
,

141 
	mNDTPA_PAD
,

142 
	m__NDTPA_MAX


144 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

146 
	sndtmsg
 {

147 
__u8
 
	mndtm_Ámûy
;

148 
__u8
 
	mndtm_∑d1
;

149 
__u16
 
	mndtm_∑d2
;

152 
	sndt_c⁄fig
 {

153 
__u16
 
	mndtc_key_Àn
;

154 
__u16
 
	mndtc_íåy_size
;

155 
__u32
 
	mndtc_íåõs
;

156 
__u32
 
	mndtc_œ°_Êush
;

157 
__u32
 
	mndtc_œ°_ønd
;

158 
__u32
 
	mndtc_hash_∫d
;

159 
__u32
 
	mndtc_hash_mask
;

160 
__u32
 
	mndtc_hash_chaö_gc
;

161 
__u32
 
	mndtc_¥oxy_qÀn
;

165 
	mNDTA_UNSPEC
,

166 
	mNDTA_NAME
,

167 
	mNDTA_THRESH1
,

168 
	mNDTA_THRESH2
,

169 
	mNDTA_THRESH3
,

170 
	mNDTA_CONFIG
,

171 
	mNDTA_PARMS
,

172 
	mNDTA_STATS
,

173 
	mNDTA_GC_INTERVAL
,

174 
	mNDTA_PAD
,

175 
	m__NDTA_MAX


177 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

184 
	mFDB_NOTIFY_BIT
 = (1 << 0),

185 
	mFDB_NOTIFY_INACTIVE_BIT
 = (1 << 1)

195 
	mNFEA_UNSPEC
,

196 
	mNFEA_ACTIVITY_NOTIFY
,

197 
	mNFEA_DONT_REFRESH
,

198 
	m__NFEA_MAX


200 
	#NFEA_MAX
 (
__NFEA_MAX
 - 1)

	)

	@/usr/include/linux/pkt_sched.h

2 #i‚de‡
__LINUX_PKT_SCHED_H


3 
	#__LINUX_PKT_SCHED_H


	)

5 
	~<löux/c⁄°.h
>

6 
	~<löux/ty≥s.h
>

21 
	#TC_PRIO_BESTEFFORT
 0

	)

22 
	#TC_PRIO_FILLER
 1

	)

23 
	#TC_PRIO_BULK
 2

	)

24 
	#TC_PRIO_INTERACTIVE_BULK
 4

	)

25 
	#TC_PRIO_INTERACTIVE
 6

	)

26 
	#TC_PRIO_CONTROL
 7

	)

28 
	#TC_PRIO_MAX
 15

	)

34 
	stc_°©s
 {

35 
__u64
 
	mbyãs
;

36 
__u32
 
	m∑ckës
;

37 
__u32
 
	mdr›s
;

38 
__u32
 
	movîlimôs
;

40 
__u32
 
	mbps
;

41 
__u32
 
	mµs
;

42 
__u32
 
	mqÀn
;

43 
__u32
 
	mbacklog
;

46 
	stc_e°im©‹
 {

47 sig√d 
	möãrvÆ
;

48 
	mewma_log
;

68 
	#TC_H_MAJ_MASK
 (0xFFFF0000U)

	)

69 
	#TC_H_MIN_MASK
 (0x0000FFFFU)

	)

70 
	#TC_H_MAJ
(
h
Ë((h)&
TC_H_MAJ_MASK
)

	)

71 
	#TC_H_MIN
(
h
Ë((h)&
TC_H_MIN_MASK
)

	)

72 
	#TC_H_MAKE
(
maj
,
mö
Ë(((maj)&
TC_H_MAJ_MASK
)|((mö)&
TC_H_MIN_MASK
))

	)

74 
	#TC_H_UNSPEC
 (0U)

	)

75 
	#TC_H_ROOT
 (0xFFFFFFFFU)

	)

76 
	#TC_H_INGRESS
 (0xFFFFFFF1U)

	)

77 
	#TC_H_CLSACT
 
TC_H_INGRESS


	)

79 
	#TC_H_MIN_PRIORITY
 0xFFE0U

	)

80 
	#TC_H_MIN_INGRESS
 0xFFF2U

	)

81 
	#TC_H_MIN_EGRESS
 0xFFF3U

	)

84 
	etc_lök_œyî
 {

85 
	mTC_LINKLAYER_UNAWARE
,

86 
	mTC_LINKLAYER_ETHERNET
,

87 
	mTC_LINKLAYER_ATM
,

89 
	#TC_LINKLAYER_MASK
 0x0F

	)

91 
	stc_øã•ec
 {

92 
	m˚Œ_log
;

93 
__u8
 
	mlökœyî
;

94 
	movîhód
;

95 
	m˚Œ_Æign
;

96 
	mmpu
;

97 
__u32
 
	møã
;

100 
	#TC_RTAB_SIZE
 1024

	)

102 
	stc_size•ec
 {

103 
	m˚Œ_log
;

104 
	msize_log
;

105 
	m˚Œ_Æign
;

106 
	movîhód
;

107 
	mlökœyî
;

108 
	mmpu
;

109 
	mmtu
;

110 
	mtsize
;

114 
	mTCA_STAB_UNSPEC
,

115 
	mTCA_STAB_BASE
,

116 
	mTCA_STAB_DATA
,

117 
	m__TCA_STAB_MAX


120 
	#TCA_STAB_MAX
 (
__TCA_STAB_MAX
 - 1)

	)

124 
	stc_fifo_q›t
 {

125 
__u32
 
	mlimô
;

137 
	#SKBPRIO_MAX_PRIORITY
 64

	)

139 
	stc_skb¥io_q›t
 {

140 
__u32
 
	mlimô
;

145 
	#TCQ_PRIO_BANDS
 16

	)

146 
	#TCQ_MIN_PRIO_BANDS
 2

	)

148 
	stc_¥io_q›t
 {

149 
	mb™ds
;

150 
__u8
 
	m¥iom≠
[
TC_PRIO_MAX
+1];

155 
	stc_mu…iq_q›t
 {

156 
__u16
 
	mb™ds
;

157 
__u16
 
	mmax_b™ds
;

162 
	#TCQ_PLUG_BUFFER
 0

	)

163 
	#TCQ_PLUG_RELEASE_ONE
 1

	)

164 
	#TCQ_PLUG_RELEASE_INDEFINITE
 2

	)

165 
	#TCQ_PLUG_LIMIT
 3

	)

167 
	stc_∂ug_q›t
 {

177 
	ma˘i⁄
;

178 
__u32
 
	mlimô
;

183 
	stc_tbf_q›t
 {

184 
tc_øã•ec
 
	møã
;

185 
tc_øã•ec
 
	m≥akøã
;

186 
__u32
 
	mlimô
;

187 
__u32
 
	mbuf„r
;

188 
__u32
 
	mmtu
;

192 
	mTCA_TBF_UNSPEC
,

193 
	mTCA_TBF_PARMS
,

194 
	mTCA_TBF_RTAB
,

195 
	mTCA_TBF_PTAB
,

196 
	mTCA_TBF_RATE64
,

197 
	mTCA_TBF_PRATE64
,

198 
	mTCA_TBF_BURST
,

199 
	mTCA_TBF_PBURST
,

200 
	mTCA_TBF_PAD
,

201 
	m__TCA_TBF_MAX
,

204 
	#TCA_TBF_MAX
 (
__TCA_TBF_MAX
 - 1)

	)

213 
	stc_sfq_q›t
 {

214 
	mqu™tum
;

215 
	m≥πurb_≥riod
;

216 
__u32
 
	mlimô
;

217 
	mdivis‹
;

218 
	mÊows
;

221 
	stc_sfqªd_°©s
 {

222 
__u32
 
	m¥ob_dr›
;

223 
__u32
 
	mf‹˚d_dr›
;

224 
__u32
 
	m¥ob_m¨k
;

225 
__u32
 
	mf‹˚d_m¨k
;

226 
__u32
 
	m¥ob_m¨k_hód
;

227 
__u32
 
	mf‹˚d_m¨k_hód
;

230 
	stc_sfq_q›t_v1
 {

231 
tc_sfq_q›t
 
	mv0
;

232 
	mdïth
;

233 
	mhóddr›
;

235 
__u32
 
	mlimô
;

236 
__u32
 
	mqth_mö
;

237 
__u32
 
	mqth_max
;

238 
	mWlog
;

239 
	mPlog
;

240 
	mS˚Œ_log
;

241 
	mÊags
;

242 
__u32
 
	mmax_P
;

244 
tc_sfqªd_°©s
 
	m°©s
;

248 
	stc_sfq_x°©s
 {

249 
__s32
 
	mÆlŸ
;

255 
	mTCA_RED_UNSPEC
,

256 
	mTCA_RED_PARMS
,

257 
	mTCA_RED_STAB
,

258 
	mTCA_RED_MAX_P
,

259 
	mTCA_RED_FLAGS
,

260 
	mTCA_RED_EARLY_DROP_BLOCK
,

261 
	mTCA_RED_MARK_BLOCK
,

262 
	m__TCA_RED_MAX
,

265 
	#TCA_RED_MAX
 (
__TCA_RED_MAX
 - 1)

	)

267 
	stc_ªd_q›t
 {

268 
__u32
 
	mlimô
;

269 
__u32
 
	mqth_mö
;

270 
__u32
 
	mqth_max
;

271 
	mWlog
;

272 
	mPlog
;

273 
	mS˚Œ_log
;

287 
	mÊags
;

288 
	#TC_RED_ECN
 1

	)

289 
	#TC_RED_HARDDROP
 2

	)

290 
	#TC_RED_ADAPTATIVE
 4

	)

291 
	#TC_RED_NODROP
 8

	)

294 
	#TC_RED_HISTORIC_FLAGS
 (
TC_RED_ECN
 | 
TC_RED_HARDDROP
 | 
TC_RED_ADAPTATIVE
)

	)

296 
	stc_ªd_x°©s
 {

297 
__u32
 
	móæy
;

298 
__u32
 
	mpdr›
;

299 
__u32
 
	mŸhî
;

300 
__u32
 
	mm¨ked
;

305 
	#MAX_DPs
 16

	)

308 
	mTCA_GRED_UNSPEC
,

309 
	mTCA_GRED_PARMS
,

310 
	mTCA_GRED_STAB
,

311 
	mTCA_GRED_DPS
,

312 
	mTCA_GRED_MAX_P
,

313 
	mTCA_GRED_LIMIT
,

314 
	mTCA_GRED_VQ_LIST
,

315 
	m__TCA_GRED_MAX
,

318 
	#TCA_GRED_MAX
 (
__TCA_GRED_MAX
 - 1)

	)

321 
	mTCA_GRED_VQ_ENTRY_UNSPEC
,

322 
	mTCA_GRED_VQ_ENTRY
,

323 
	m__TCA_GRED_VQ_ENTRY_MAX
,

325 
	#TCA_GRED_VQ_ENTRY_MAX
 (
__TCA_GRED_VQ_ENTRY_MAX
 - 1)

	)

328 
	mTCA_GRED_VQ_UNSPEC
,

329 
	mTCA_GRED_VQ_PAD
,

330 
	mTCA_GRED_VQ_DP
,

331 
	mTCA_GRED_VQ_STAT_BYTES
,

332 
	mTCA_GRED_VQ_STAT_PACKETS
,

333 
	mTCA_GRED_VQ_STAT_BACKLOG
,

334 
	mTCA_GRED_VQ_STAT_PROB_DROP
,

335 
	mTCA_GRED_VQ_STAT_PROB_MARK
,

336 
	mTCA_GRED_VQ_STAT_FORCED_DROP
,

337 
	mTCA_GRED_VQ_STAT_FORCED_MARK
,

338 
	mTCA_GRED_VQ_STAT_PDROP
,

339 
	mTCA_GRED_VQ_STAT_OTHER
,

340 
	mTCA_GRED_VQ_FLAGS
,

341 
	m__TCA_GRED_VQ_MAX


344 
	#TCA_GRED_VQ_MAX
 (
__TCA_GRED_VQ_MAX
 - 1)

	)

346 
	stc_gªd_q›t
 {

347 
__u32
 
	mlimô
;

348 
__u32
 
	mqth_mö
;

349 
__u32
 
	mqth_max
;

350 
__u32
 
	mDP
;

351 
__u32
 
	mbacklog
;

352 
__u32
 
	mqave
;

353 
__u32
 
	mf‹˚d
;

354 
__u32
 
	móæy
;

355 
__u32
 
	mŸhî
;

356 
__u32
 
	mpdr›
;

357 
__u8
 
	mWlog
;

358 
__u8
 
	mPlog
;

359 
__u8
 
	mS˚Œ_log
;

360 
__u8
 
	m¥io
;

361 
__u32
 
	m∑ckës
;

362 
__u32
 
	mbyãsö
;

366 
	stc_gªd_s›t
 {

367 
__u32
 
	mDPs
;

368 
__u32
 
	mdef_DP
;

369 
__u8
 
	mgrio
;

370 
__u8
 
	mÊags
;

371 
__u16
 
	m∑d1
;

377 
	mTCA_CHOKE_UNSPEC
,

378 
	mTCA_CHOKE_PARMS
,

379 
	mTCA_CHOKE_STAB
,

380 
	mTCA_CHOKE_MAX_P
,

381 
	m__TCA_CHOKE_MAX
,

384 
	#TCA_CHOKE_MAX
 (
__TCA_CHOKE_MAX
 - 1)

	)

386 
	stc_choke_q›t
 {

387 
__u32
 
	mlimô
;

388 
__u32
 
	mqth_mö
;

389 
__u32
 
	mqth_max
;

390 
	mWlog
;

391 
	mPlog
;

392 
	mS˚Œ_log
;

393 
	mÊags
;

396 
	stc_choke_x°©s
 {

397 
__u32
 
	móæy
;

398 
__u32
 
	mpdr›
;

399 
__u32
 
	mŸhî
;

400 
__u32
 
	mm¨ked
;

401 
__u32
 
	mm©ched
;

405 
	#TC_HTB_NUMPRIO
 8

	)

406 
	#TC_HTB_MAXDEPTH
 8

	)

407 
	#TC_HTB_PROTOVER
 3

	)

409 
	stc_htb_›t
 {

410 
tc_øã•ec
 
	møã
;

411 
tc_øã•ec
 
	m˚û
;

412 
__u32
 
	mbuf„r
;

413 
__u32
 
	mcbuf„r
;

414 
__u32
 
	mqu™tum
;

415 
__u32
 
	mÀvñ
;

416 
__u32
 
	m¥io
;

418 
	stc_htb_glob
 {

419 
__u32
 
	mvîsi⁄
;

420 
__u32
 
	møã2qu™tum
;

421 
__u32
 
	mdef˛s
;

422 
__u32
 
	mdebug
;

425 
__u32
 
	mdúe˘_pkts
;

428 
	mTCA_HTB_UNSPEC
,

429 
	mTCA_HTB_PARMS
,

430 
	mTCA_HTB_INIT
,

431 
	mTCA_HTB_CTAB
,

432 
	mTCA_HTB_RTAB
,

433 
	mTCA_HTB_DIRECT_QLEN
,

434 
	mTCA_HTB_RATE64
,

435 
	mTCA_HTB_CEIL64
,

436 
	mTCA_HTB_PAD
,

437 
	mTCA_HTB_OFFLOAD
,

438 
	m__TCA_HTB_MAX
,

441 
	#TCA_HTB_MAX
 (
__TCA_HTB_MAX
 - 1)

	)

443 
	stc_htb_x°©s
 {

444 
__u32
 
	mÀnds
;

445 
__u32
 
	mb‹rows
;

446 
__u32
 
	mgü¡s
;

447 
__s32
 
	mtokís
;

448 
__s32
 
	m˘okís
;

453 
	stc_hfsc_q›t
 {

454 
__u16
 
	mdef˛s
;

457 
	stc_£rvi˚_curve
 {

458 
__u32
 
	mm1
;

459 
__u32
 
	md
;

460 
__u32
 
	mm2
;

463 
	stc_hfsc_°©s
 {

464 
__u64
 
	mw‹k
;

465 
__u64
 
	mπw‹k
;

466 
__u32
 
	m≥riod
;

467 
__u32
 
	mÀvñ
;

471 
	mTCA_HFSC_UNSPEC
,

472 
	mTCA_HFSC_RSC
,

473 
	mTCA_HFSC_FSC
,

474 
	mTCA_HFSC_USC
,

475 
	m__TCA_HFSC_MAX
,

478 
	#TCA_HFSC_MAX
 (
__TCA_HFSC_MAX
 - 1)

	)

483 
	#TC_CBQ_MAXPRIO
 8

	)

484 
	#TC_CBQ_MAXLEVEL
 8

	)

485 
	#TC_CBQ_DEF_EWMA
 5

	)

487 
	stc_cbq_lss›t
 {

488 
	mch™ge
;

489 
	mÊags
;

490 
	#TCF_CBQ_LSS_BOUNDED
 1

	)

491 
	#TCF_CBQ_LSS_ISOLATED
 2

	)

492 
	mewma_log
;

493 
	mÀvñ
;

494 
	#TCF_CBQ_LSS_FLAGS
 1

	)

495 
	#TCF_CBQ_LSS_EWMA
 2

	)

496 
	#TCF_CBQ_LSS_MAXIDLE
 4

	)

497 
	#TCF_CBQ_LSS_MINIDLE
 8

	)

498 
	#TCF_CBQ_LSS_OFFTIME
 0x10

	)

499 
	#TCF_CBQ_LSS_AVPKT
 0x20

	)

500 
__u32
 
	mmaxidÀ
;

501 
__u32
 
	mmöidÀ
;

502 
__u32
 
	mof·ime
;

503 
__u32
 
	mavpkt
;

506 
	stc_cbq_wº›t
 {

507 
	mÊags
;

508 
	m¥i‹ôy
;

509 
	m˝ri‹ôy
;

510 
	m__ª£rved
;

511 
__u32
 
	mÆlŸ
;

512 
__u32
 
	mweight
;

515 
	stc_cbq_ovl
 {

516 
	m°øãgy
;

517 
	#TC_CBQ_OVL_CLASSIC
 0

	)

518 
	#TC_CBQ_OVL_DELAY
 1

	)

519 
	#TC_CBQ_OVL_LOWPRIO
 2

	)

520 
	#TC_CBQ_OVL_DROP
 3

	)

521 
	#TC_CBQ_OVL_RCLASSIC
 4

	)

522 
	m¥i‹ôy2
;

523 
__u16
 
	m∑d
;

524 
__u32
 
	m≥«…y
;

527 
	stc_cbq_pﬁi˚
 {

528 
	mpﬁi˚
;

529 
	m__ªs1
;

530 
	m__ªs2
;

533 
	stc_cbq_f›t
 {

534 
__u32
 
	m•lô
;

535 
__u32
 
	mdefm≠
;

536 
__u32
 
	mdefch™ge
;

539 
	stc_cbq_x°©s
 {

540 
__u32
 
	mb‹rows
;

541 
__u32
 
	movîa˘i⁄s
;

542 
__s32
 
	mavgidÀ
;

543 
__s32
 
	mundîtime
;

547 
	mTCA_CBQ_UNSPEC
,

548 
	mTCA_CBQ_LSSOPT
,

549 
	mTCA_CBQ_WRROPT
,

550 
	mTCA_CBQ_FOPT
,

551 
	mTCA_CBQ_OVL_STRATEGY
,

552 
	mTCA_CBQ_RATE
,

553 
	mTCA_CBQ_RTAB
,

554 
	mTCA_CBQ_POLICE
,

555 
	m__TCA_CBQ_MAX
,

558 
	#TCA_CBQ_MAX
 (
__TCA_CBQ_MAX
 - 1)

	)

563 
	mTCA_DSMARK_UNSPEC
,

564 
	mTCA_DSMARK_INDICES
,

565 
	mTCA_DSMARK_DEFAULT_INDEX
,

566 
	mTCA_DSMARK_SET_TC_INDEX
,

567 
	mTCA_DSMARK_MASK
,

568 
	mTCA_DSMARK_VALUE
,

569 
	m__TCA_DSMARK_MAX
,

572 
	#TCA_DSMARK_MAX
 (
__TCA_DSMARK_MAX
 - 1)

	)

577 
	mTCA_ATM_UNSPEC
,

578 
	mTCA_ATM_FD
,

579 
	mTCA_ATM_PTR
,

580 
	mTCA_ATM_HDR
,

581 
	mTCA_ATM_EXCESS
,

582 
	mTCA_ATM_ADDR
,

583 
	mTCA_ATM_STATE
,

584 
	m__TCA_ATM_MAX
,

587 
	#TCA_ATM_MAX
 (
__TCA_ATM_MAX
 - 1)

	)

592 
	mTCA_NETEM_UNSPEC
,

593 
	mTCA_NETEM_CORR
,

594 
	mTCA_NETEM_DELAY_DIST
,

595 
	mTCA_NETEM_REORDER
,

596 
	mTCA_NETEM_CORRUPT
,

597 
	mTCA_NETEM_LOSS
,

598 
	mTCA_NETEM_RATE
,

599 
	mTCA_NETEM_ECN
,

600 
	mTCA_NETEM_RATE64
,

601 
	mTCA_NETEM_PAD
,

602 
	mTCA_NETEM_LATENCY64
,

603 
	mTCA_NETEM_JITTER64
,

604 
	mTCA_NETEM_SLOT
,

605 
	mTCA_NETEM_SLOT_DIST
,

606 
	m__TCA_NETEM_MAX
,

609 
	#TCA_NETEM_MAX
 (
__TCA_NETEM_MAX
 - 1)

	)

611 
	stc_√ãm_q›t
 {

612 
__u32
 
	mœãncy
;

613 
__u32
 
	mlimô
;

614 
__u32
 
	mloss
;

615 
__u32
 
	mg≠
;

616 
__u32
 
	mdu∂iˇã
;

617 
__u32
 
	mjôãr
;

620 
	stc_√ãm_c‹r
 {

621 
__u32
 
	mdñay_c‹r
;

622 
__u32
 
	mloss_c‹r
;

623 
__u32
 
	mdup_c‹r
;

626 
	stc_√ãm_ª‹dî
 {

627 
__u32
 
	m¥obabûôy
;

628 
__u32
 
	mc‹ªœti⁄
;

631 
	stc_√ãm_c‹ru±
 {

632 
__u32
 
	m¥obabûôy
;

633 
__u32
 
	mc‹ªœti⁄
;

636 
	stc_√ãm_øã
 {

637 
__u32
 
	møã
;

638 
__s32
 
	m∑ckë_ovîhód
;

639 
__u32
 
	m˚Œ_size
;

640 
__s32
 
	m˚Œ_ovîhód
;

643 
	stc_√ãm_¶Ÿ
 {

644 
__s64
 
	mmö_dñay
;

645 
__s64
 
	mmax_dñay
;

646 
__s32
 
	mmax_∑ckës
;

647 
__s32
 
	mmax_byãs
;

648 
__s64
 
	mdi°_dñay
;

649 
__s64
 
	mdi°_jôãr
;

653 
	mNETEM_LOSS_UNSPEC
,

654 
	mNETEM_LOSS_GI
,

655 
	mNETEM_LOSS_GE
,

656 
	m__NETEM_LOSS_MAX


658 
	#NETEM_LOSS_MAX
 (
__NETEM_LOSS_MAX
 - 1)

	)

661 
	stc_√ãm_gimodñ
 {

662 
__u32
 
	mp13
;

663 
__u32
 
	mp31
;

664 
__u32
 
	mp32
;

665 
__u32
 
	mp14
;

666 
__u32
 
	mp23
;

670 
	stc_√ãm_gemodñ
 {

671 
__u32
 
	mp
;

672 
__u32
 
	mr
;

673 
__u32
 
	mh
;

674 
__u32
 
	mk1
;

677 
	#NETEM_DIST_SCALE
 8192

	)

678 
	#NETEM_DIST_MAX
 16384

	)

683 
	mTCA_DRR_UNSPEC
,

684 
	mTCA_DRR_QUANTUM
,

685 
	m__TCA_DRR_MAX


688 
	#TCA_DRR_MAX
 (
__TCA_DRR_MAX
 - 1)

	)

690 
	stc_dº_°©s
 {

691 
__u32
 
	mdeficô
;

695 
	#TC_QOPT_BITMASK
 15

	)

696 
	#TC_QOPT_MAX_QUEUE
 16

	)

699 
	mTC_MQPRIO_HW_OFFLOAD_NONE
,

700 
	mTC_MQPRIO_HW_OFFLOAD_TCS
,

701 
	m__TC_MQPRIO_HW_OFFLOAD_MAX


704 
	#TC_MQPRIO_HW_OFFLOAD_MAX
 (
__TC_MQPRIO_HW_OFFLOAD_MAX
 - 1)

	)

707 
	mTC_MQPRIO_MODE_DCB
,

708 
	mTC_MQPRIO_MODE_CHANNEL
,

709 
	m__TC_MQPRIO_MODE_MAX


712 
	#__TC_MQPRIO_MODE_MAX
 (
__TC_MQPRIO_MODE_MAX
 - 1)

	)

715 
	mTC_MQPRIO_SHAPER_DCB
,

716 
	mTC_MQPRIO_SHAPER_BW_RATE
,

717 
	m__TC_MQPRIO_SHAPER_MAX


720 
	#__TC_MQPRIO_SHAPER_MAX
 (
__TC_MQPRIO_SHAPER_MAX
 - 1)

	)

722 
	stc_mq¥io_q›t
 {

723 
__u8
 
	mnum_tc
;

724 
__u8
 
	m¥io_tc_m≠
[
TC_QOPT_BITMASK
 + 1];

725 
__u8
 
	mhw
;

726 
__u16
 
	mcou¡
[
TC_QOPT_MAX_QUEUE
];

727 
__u16
 
	moff£t
[
TC_QOPT_MAX_QUEUE
];

730 
	#TC_MQPRIO_F_MODE
 0x1

	)

731 
	#TC_MQPRIO_F_SHAPER
 0x2

	)

732 
	#TC_MQPRIO_F_MIN_RATE
 0x4

	)

733 
	#TC_MQPRIO_F_MAX_RATE
 0x8

	)

736 
	mTCA_MQPRIO_UNSPEC
,

737 
	mTCA_MQPRIO_MODE
,

738 
	mTCA_MQPRIO_SHAPER
,

739 
	mTCA_MQPRIO_MIN_RATE64
,

740 
	mTCA_MQPRIO_MAX_RATE64
,

741 
	m__TCA_MQPRIO_MAX
,

744 
	#TCA_MQPRIO_MAX
 (
__TCA_MQPRIO_MAX
 - 1)

	)

749 
	mTCA_SFB_UNSPEC
,

750 
	mTCA_SFB_PARMS
,

751 
	m__TCA_SFB_MAX
,

754 
	#TCA_SFB_MAX
 (
__TCA_SFB_MAX
 - 1)

	)

759 
	stc_sfb_q›t
 {

760 
__u32
 
	mªhash_öãrvÆ
;

761 
__u32
 
	mw¨mup_time
;

762 
__u32
 
	mmax
;

763 
__u32
 
	mbö_size
;

764 
__u32
 
	mö¸emít
;

765 
__u32
 
	mde¸emít
;

766 
__u32
 
	mlimô
;

767 
__u32
 
	m≥«…y_øã
;

768 
__u32
 
	m≥«…y_bur°
;

771 
	stc_sfb_x°©s
 {

772 
__u32
 
	móæydr›
;

773 
__u32
 
	m≥«…ydr›
;

774 
__u32
 
	mbuckëdr›
;

775 
__u32
 
	mqueuedr›
;

776 
__u32
 
	mchûddr›
;

777 
__u32
 
	mm¨ked
;

778 
__u32
 
	mmaxqÀn
;

779 
__u32
 
	mmax¥ob
;

780 
__u32
 
	mavg¥ob
;

783 
	#SFB_MAX_PROB
 0xFFFF

	)

787 
	mTCA_QFQ_UNSPEC
,

788 
	mTCA_QFQ_WEIGHT
,

789 
	mTCA_QFQ_LMAX
,

790 
	m__TCA_QFQ_MAX


793 
	#TCA_QFQ_MAX
 (
__TCA_QFQ_MAX
 - 1)

	)

795 
	stc_qfq_°©s
 {

796 
__u32
 
	mweight
;

797 
__u32
 
	mlmax
;

803 
	mTCA_CODEL_UNSPEC
,

804 
	mTCA_CODEL_TARGET
,

805 
	mTCA_CODEL_LIMIT
,

806 
	mTCA_CODEL_INTERVAL
,

807 
	mTCA_CODEL_ECN
,

808 
	mTCA_CODEL_CE_THRESHOLD
,

809 
	m__TCA_CODEL_MAX


812 
	#TCA_CODEL_MAX
 (
__TCA_CODEL_MAX
 - 1)

	)

814 
	stc_codñ_x°©s
 {

815 
__u32
 
	mmax∑ckë
;

816 
__u32
 
	mcou¡
;

819 
__u32
 
	mœ°cou¡
;

820 
__u32
 
	mldñay
;

821 
__s32
 
	mdr›_√xt
;

822 
__u32
 
	mdr›_ovîlimô
;

823 
__u32
 
	me˙_m¨k
;

824 
__u32
 
	mdr›pög
;

825 
__u32
 
	m˚_m¨k
;

830 
	#FQ_CODEL_QUANTUM_MAX
 (1 << 20)

	)

833 
	mTCA_FQ_CODEL_UNSPEC
,

834 
	mTCA_FQ_CODEL_TARGET
,

835 
	mTCA_FQ_CODEL_LIMIT
,

836 
	mTCA_FQ_CODEL_INTERVAL
,

837 
	mTCA_FQ_CODEL_ECN
,

838 
	mTCA_FQ_CODEL_FLOWS
,

839 
	mTCA_FQ_CODEL_QUANTUM
,

840 
	mTCA_FQ_CODEL_CE_THRESHOLD
,

841 
	mTCA_FQ_CODEL_DROP_BATCH_SIZE
,

842 
	mTCA_FQ_CODEL_MEMORY_LIMIT
,

843 
	m__TCA_FQ_CODEL_MAX


846 
	#TCA_FQ_CODEL_MAX
 (
__TCA_FQ_CODEL_MAX
 - 1)

	)

849 
	mTCA_FQ_CODEL_XSTATS_QDISC
,

850 
	mTCA_FQ_CODEL_XSTATS_CLASS
,

853 
	stc_fq_codñ_qd_°©s
 {

854 
__u32
 
	mmax∑ckë
;

855 
__u32
 
	mdr›_ovîlimô
;

858 
__u32
 
	me˙_m¨k
;

861 
__u32
 
	m√w_Êow_cou¡
;

864 
__u32
 
	m√w_Êows_Àn
;

865 
__u32
 
	mﬁd_Êows_Àn
;

866 
__u32
 
	m˚_m¨k
;

867 
__u32
 
	mmem‹y_ußge
;

868 
__u32
 
	mdr›_ovîmem‹y
;

871 
	stc_fq_codñ_˛_°©s
 {

872 
__s32
 
	mdeficô
;

873 
__u32
 
	mldñay
;

876 
__u32
 
	mcou¡
;

877 
__u32
 
	mœ°cou¡
;

878 
__u32
 
	mdr›pög
;

879 
__s32
 
	mdr›_√xt
;

882 
	stc_fq_codñ_x°©s
 {

883 
__u32
 
	mty≥
;

885 
tc_fq_codñ_qd_°©s
 
	mqdisc_°©s
;

886 
tc_fq_codñ_˛_°©s
 
	m˛ass_°©s
;

893 
	mTCA_FQ_UNSPEC
,

895 
	mTCA_FQ_PLIMIT
,

897 
	mTCA_FQ_FLOW_PLIMIT
,

899 
	mTCA_FQ_QUANTUM
,

901 
	mTCA_FQ_INITIAL_QUANTUM
,

903 
	mTCA_FQ_RATE_ENABLE
,

905 
	mTCA_FQ_FLOW_DEFAULT_RATE
,

907 
	mTCA_FQ_FLOW_MAX_RATE
,

909 
	mTCA_FQ_BUCKETS_LOG
,

911 
	mTCA_FQ_FLOW_REFILL_DELAY
,

913 
	mTCA_FQ_ORPHAN_MASK
,

915 
	mTCA_FQ_LOW_RATE_THRESHOLD
,

917 
	mTCA_FQ_CE_THRESHOLD
,

919 
	mTCA_FQ_TIMER_SLACK
,

921 
	mTCA_FQ_HORIZON
,

923 
	mTCA_FQ_HORIZON_DROP
,

925 
	m__TCA_FQ_MAX


928 
	#TCA_FQ_MAX
 (
__TCA_FQ_MAX
 - 1)

	)

930 
	stc_fq_qd_°©s
 {

931 
__u64
 
	mgc_Êows
;

932 
__u64
 
	mhigh¥io_∑ckës
;

933 
__u64
 
	mt˝_ªå™s
;

934 
__u64
 
	mthrŸéed
;

935 
__u64
 
	mÊows_∂imô
;

936 
__u64
 
	mpkts_too_l⁄g
;

937 
__u64
 
	mÆloˇti⁄_îr‹s
;

938 
__s64
 
	mtime_√xt_dñayed_Êow
;

939 
__u32
 
	mÊows
;

940 
__u32
 
	möa˘ive_Êows
;

941 
__u32
 
	mthrŸéed_Êows
;

942 
__u32
 
	mu¡hrŸée_œãncy_ns
;

943 
__u64
 
	m˚_m¨k
;

944 
__u64
 
	mh‹iz⁄_dr›s
;

945 
__u64
 
	mh‹iz⁄_ˇps
;

951 
	mTCA_HHF_UNSPEC
,

952 
	mTCA_HHF_BACKLOG_LIMIT
,

953 
	mTCA_HHF_QUANTUM
,

954 
	mTCA_HHF_HH_FLOWS_LIMIT
,

955 
	mTCA_HHF_RESET_TIMEOUT
,

956 
	mTCA_HHF_ADMIT_BYTES
,

957 
	mTCA_HHF_EVICT_TIMEOUT
,

958 
	mTCA_HHF_NON_HH_WEIGHT
,

959 
	m__TCA_HHF_MAX


962 
	#TCA_HHF_MAX
 (
__TCA_HHF_MAX
 - 1)

	)

964 
	stc_hhf_x°©s
 {

965 
__u32
 
	mdr›_ovîlimô
;

968 
__u32
 
	mhh_ovîlimô
;

969 
__u32
 
	mhh_tŸ_cou¡
;

970 
__u32
 
	mhh_cur_cou¡
;

975 
	mTCA_PIE_UNSPEC
,

976 
	mTCA_PIE_TARGET
,

977 
	mTCA_PIE_LIMIT
,

978 
	mTCA_PIE_TUPDATE
,

979 
	mTCA_PIE_ALPHA
,

980 
	mTCA_PIE_BETA
,

981 
	mTCA_PIE_ECN
,

982 
	mTCA_PIE_BYTEMODE
,

983 
	mTCA_PIE_DQ_RATE_ESTIMATOR
,

984 
	m__TCA_PIE_MAX


986 
	#TCA_PIE_MAX
 (
__TCA_PIE_MAX
 - 1)

	)

988 
	stc_põ_x°©s
 {

989 
__u64
 
	m¥ob
;

990 
__u32
 
	mdñay
;

991 
__u32
 
	mavg_dq_øã
;

994 
__u32
 
	mdq_øã_e°im©ög
;

995 
__u32
 
	m∑ckës_ö
;

996 
__u32
 
	mdr›≥d
;

997 
__u32
 
	movîlimô
;

1000 
__u32
 
	mmaxq
;

1001 
__u32
 
	me˙_m¨k
;

1006 
	mTCA_FQ_PIE_UNSPEC
,

1007 
	mTCA_FQ_PIE_LIMIT
,

1008 
	mTCA_FQ_PIE_FLOWS
,

1009 
	mTCA_FQ_PIE_TARGET
,

1010 
	mTCA_FQ_PIE_TUPDATE
,

1011 
	mTCA_FQ_PIE_ALPHA
,

1012 
	mTCA_FQ_PIE_BETA
,

1013 
	mTCA_FQ_PIE_QUANTUM
,

1014 
	mTCA_FQ_PIE_MEMORY_LIMIT
,

1015 
	mTCA_FQ_PIE_ECN_PROB
,

1016 
	mTCA_FQ_PIE_ECN
,

1017 
	mTCA_FQ_PIE_BYTEMODE
,

1018 
	mTCA_FQ_PIE_DQ_RATE_ESTIMATOR
,

1019 
	m__TCA_FQ_PIE_MAX


1021 
	#TCA_FQ_PIE_MAX
 (
__TCA_FQ_PIE_MAX
 - 1)

	)

1023 
	stc_fq_põ_x°©s
 {

1024 
__u32
 
	m∑ckës_ö
;

1025 
__u32
 
	mdr›≥d
;

1026 
__u32
 
	movîlimô
;

1027 
__u32
 
	movîmem‹y
;

1028 
__u32
 
	me˙_m¨k
;

1029 
__u32
 
	m√w_Êow_cou¡
;

1030 
__u32
 
	m√w_Êows_Àn
;

1031 
__u32
 
	mﬁd_Êows_Àn
;

1032 
__u32
 
	mmem‹y_ußge
;

1036 
	stc_cbs_q›t
 {

1037 
__u8
 
	mofÊﬂd
;

1038 
__u8
 
	m_∑d
[3];

1039 
__s32
 
	mhi¸edô
;

1040 
__s32
 
	mlo¸edô
;

1041 
__s32
 
	midÀ¶›e
;

1042 
__s32
 
	m£nd¶›e
;

1046 
	mTCA_CBS_UNSPEC
,

1047 
	mTCA_CBS_PARMS
,

1048 
	m__TCA_CBS_MAX
,

1051 
	#TCA_CBS_MAX
 (
__TCA_CBS_MAX
 - 1)

	)

1055 
	stc_ëf_q›t
 {

1056 
__s32
 
	mdñè
;

1057 
__s32
 
	m˛ockid
;

1058 
__u32
 
	mÊags
;

1059 
	#TC_ETF_DEADLINE_MODE_ON
 
	`_BITUL
(0)

	)

1060 
	#TC_ETF_OFFLOAD_ON
 
	`_BITUL
(1)

	)

1061 
	#TC_ETF_SKIP_SOCK_CHECK
 
	`_BITUL
(2)

	)

1065 
	mTCA_ETF_UNSPEC
,

1066 
	mTCA_ETF_PARMS
,

1067 
	m__TCA_ETF_MAX
,

1070 
	#TCA_ETF_MAX
 (
__TCA_ETF_MAX
 - 1)

	)

1075 
	mTCA_CAKE_UNSPEC
,

1076 
	mTCA_CAKE_PAD
,

1077 
	mTCA_CAKE_BASE_RATE64
,

1078 
	mTCA_CAKE_DIFFSERV_MODE
,

1079 
	mTCA_CAKE_ATM
,

1080 
	mTCA_CAKE_FLOW_MODE
,

1081 
	mTCA_CAKE_OVERHEAD
,

1082 
	mTCA_CAKE_RTT
,

1083 
	mTCA_CAKE_TARGET
,

1084 
	mTCA_CAKE_AUTORATE
,

1085 
	mTCA_CAKE_MEMORY
,

1086 
	mTCA_CAKE_NAT
,

1087 
	mTCA_CAKE_RAW
,

1088 
	mTCA_CAKE_WASH
,

1089 
	mTCA_CAKE_MPU
,

1090 
	mTCA_CAKE_INGRESS
,

1091 
	mTCA_CAKE_ACK_FILTER
,

1092 
	mTCA_CAKE_SPLIT_GSO
,

1093 
	mTCA_CAKE_FWMARK
,

1094 
	m__TCA_CAKE_MAX


1096 
	#TCA_CAKE_MAX
 (
__TCA_CAKE_MAX
 - 1)

	)

1099 
	m__TCA_CAKE_STATS_INVALID
,

1100 
	mTCA_CAKE_STATS_PAD
,

1101 
	mTCA_CAKE_STATS_CAPACITY_ESTIMATE64
,

1102 
	mTCA_CAKE_STATS_MEMORY_LIMIT
,

1103 
	mTCA_CAKE_STATS_MEMORY_USED
,

1104 
	mTCA_CAKE_STATS_AVG_NETOFF
,

1105 
	mTCA_CAKE_STATS_MIN_NETLEN
,

1106 
	mTCA_CAKE_STATS_MAX_NETLEN
,

1107 
	mTCA_CAKE_STATS_MIN_ADJLEN
,

1108 
	mTCA_CAKE_STATS_MAX_ADJLEN
,

1109 
	mTCA_CAKE_STATS_TIN_STATS
,

1110 
	mTCA_CAKE_STATS_DEFICIT
,

1111 
	mTCA_CAKE_STATS_COBALT_COUNT
,

1112 
	mTCA_CAKE_STATS_DROPPING
,

1113 
	mTCA_CAKE_STATS_DROP_NEXT_US
,

1114 
	mTCA_CAKE_STATS_P_DROP
,

1115 
	mTCA_CAKE_STATS_BLUE_TIMER_US
,

1116 
	m__TCA_CAKE_STATS_MAX


1118 
	#TCA_CAKE_STATS_MAX
 (
__TCA_CAKE_STATS_MAX
 - 1)

	)

1121 
	m__TCA_CAKE_TIN_STATS_INVALID
,

1122 
	mTCA_CAKE_TIN_STATS_PAD
,

1123 
	mTCA_CAKE_TIN_STATS_SENT_PACKETS
,

1124 
	mTCA_CAKE_TIN_STATS_SENT_BYTES64
,

1125 
	mTCA_CAKE_TIN_STATS_DROPPED_PACKETS
,

1126 
	mTCA_CAKE_TIN_STATS_DROPPED_BYTES64
,

1127 
	mTCA_CAKE_TIN_STATS_ACKS_DROPPED_PACKETS
,

1128 
	mTCA_CAKE_TIN_STATS_ACKS_DROPPED_BYTES64
,

1129 
	mTCA_CAKE_TIN_STATS_ECN_MARKED_PACKETS
,

1130 
	mTCA_CAKE_TIN_STATS_ECN_MARKED_BYTES64
,

1131 
	mTCA_CAKE_TIN_STATS_BACKLOG_PACKETS
,

1132 
	mTCA_CAKE_TIN_STATS_BACKLOG_BYTES
,

1133 
	mTCA_CAKE_TIN_STATS_THRESHOLD_RATE64
,

1134 
	mTCA_CAKE_TIN_STATS_TARGET_US
,

1135 
	mTCA_CAKE_TIN_STATS_INTERVAL_US
,

1136 
	mTCA_CAKE_TIN_STATS_WAY_INDIRECT_HITS
,

1137 
	mTCA_CAKE_TIN_STATS_WAY_MISSES
,

1138 
	mTCA_CAKE_TIN_STATS_WAY_COLLISIONS
,

1139 
	mTCA_CAKE_TIN_STATS_PEAK_DELAY_US
,

1140 
	mTCA_CAKE_TIN_STATS_AVG_DELAY_US
,

1141 
	mTCA_CAKE_TIN_STATS_BASE_DELAY_US
,

1142 
	mTCA_CAKE_TIN_STATS_SPARSE_FLOWS
,

1143 
	mTCA_CAKE_TIN_STATS_BULK_FLOWS
,

1144 
	mTCA_CAKE_TIN_STATS_UNRESPONSIVE_FLOWS
,

1145 
	mTCA_CAKE_TIN_STATS_MAX_SKBLEN
,

1146 
	mTCA_CAKE_TIN_STATS_FLOW_QUANTUM
,

1147 
	m__TCA_CAKE_TIN_STATS_MAX


1149 
	#TCA_CAKE_TIN_STATS_MAX
 (
__TCA_CAKE_TIN_STATS_MAX
 - 1)

	)

1150 
	#TC_CAKE_MAX_TINS
 (8)

	)

1153 
	mCAKE_FLOW_NONE
 = 0,

1154 
	mCAKE_FLOW_SRC_IP
,

1155 
	mCAKE_FLOW_DST_IP
,

1156 
	mCAKE_FLOW_HOSTS
,

1157 
	mCAKE_FLOW_FLOWS
,

1158 
	mCAKE_FLOW_DUAL_SRC
,

1159 
	mCAKE_FLOW_DUAL_DST
,

1160 
	mCAKE_FLOW_TRIPLE
,

1161 
	mCAKE_FLOW_MAX
,

1165 
	mCAKE_DIFFSERV_DIFFSERV3
 = 0,

1166 
	mCAKE_DIFFSERV_DIFFSERV4
,

1167 
	mCAKE_DIFFSERV_DIFFSERV8
,

1168 
	mCAKE_DIFFSERV_BESTEFFORT
,

1169 
	mCAKE_DIFFSERV_PRECEDENCE
,

1170 
	mCAKE_DIFFSERV_MAX


1174 
	mCAKE_ACK_NONE
 = 0,

1175 
	mCAKE_ACK_FILTER
,

1176 
	mCAKE_ACK_AGGRESSIVE
,

1177 
	mCAKE_ACK_MAX


1181 
	mCAKE_ATM_NONE
 = 0,

1182 
	mCAKE_ATM_ATM
,

1183 
	mCAKE_ATM_PTM
,

1184 
	mCAKE_ATM_MAX


1190 
	mTC_TAPRIO_CMD_SET_GATES
 = 0x00,

1191 
	mTC_TAPRIO_CMD_SET_AND_HOLD
 = 0x01,

1192 
	mTC_TAPRIO_CMD_SET_AND_RELEASE
 = 0x02,

1196 
	mTCA_TAPRIO_SCHED_ENTRY_UNSPEC
,

1197 
	mTCA_TAPRIO_SCHED_ENTRY_INDEX
,

1198 
	mTCA_TAPRIO_SCHED_ENTRY_CMD
,

1199 
	mTCA_TAPRIO_SCHED_ENTRY_GATE_MASK
,

1200 
	mTCA_TAPRIO_SCHED_ENTRY_INTERVAL
,

1201 
	m__TCA_TAPRIO_SCHED_ENTRY_MAX
,

1203 
	#TCA_TAPRIO_SCHED_ENTRY_MAX
 (
__TCA_TAPRIO_SCHED_ENTRY_MAX
 - 1)

	)

1213 
	mTCA_TAPRIO_SCHED_UNSPEC
,

1214 
	mTCA_TAPRIO_SCHED_ENTRY
,

1215 
	m__TCA_TAPRIO_SCHED_MAX
,

1218 
	#TCA_TAPRIO_SCHED_MAX
 (
__TCA_TAPRIO_SCHED_MAX
 - 1)

	)

1230 
	#TCA_TAPRIO_ATTR_FLAG_TXTIME_ASSIST
 
	`_BITUL
(0)

	)

1231 
	#TCA_TAPRIO_ATTR_FLAG_FULL_OFFLOAD
 
	`_BITUL
(1)

	)

1234 
	mTCA_TAPRIO_ATTR_UNSPEC
,

1235 
	mTCA_TAPRIO_ATTR_PRIOMAP
,

1236 
	mTCA_TAPRIO_ATTR_SCHED_ENTRY_LIST
,

1237 
	mTCA_TAPRIO_ATTR_SCHED_BASE_TIME
,

1238 
	mTCA_TAPRIO_ATTR_SCHED_SINGLE_ENTRY
,

1239 
	mTCA_TAPRIO_ATTR_SCHED_CLOCKID
,

1240 
	mTCA_TAPRIO_PAD
,

1241 
	mTCA_TAPRIO_ATTR_ADMIN_SCHED
,

1242 
	mTCA_TAPRIO_ATTR_SCHED_CYCLE_TIME
,

1243 
	mTCA_TAPRIO_ATTR_SCHED_CYCLE_TIME_EXTENSION
,

1244 
	mTCA_TAPRIO_ATTR_FLAGS
,

1245 
	mTCA_TAPRIO_ATTR_TXTIME_DELAY
,

1246 
	m__TCA_TAPRIO_ATTR_MAX
,

1249 
	#TCA_TAPRIO_ATTR_MAX
 (
__TCA_TAPRIO_ATTR_MAX
 - 1)

	)

1253 
	#TCQ_ETS_MAX_BANDS
 16

	)

1256 
	mTCA_ETS_UNSPEC
,

1257 
	mTCA_ETS_NBANDS
,

1258 
	mTCA_ETS_NSTRICT
,

1259 
	mTCA_ETS_QUANTA
,

1260 
	mTCA_ETS_QUANTA_BAND
,

1261 
	mTCA_ETS_PRIOMAP
,

1262 
	mTCA_ETS_PRIOMAP_BAND
,

1263 
	m__TCA_ETS_MAX
,

1266 
	#TCA_ETS_MAX
 (
__TCA_ETS_MAX
 - 1)

	)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/socket.h

2 #i‚de‡
_LINUX_SOCKET_H


3 
	#_LINUX_SOCKET_H


	)

8 
	#_K_SS_MAXSIZE
 128

	)

10 
	t__kî√l_ß_Ámûy_t
;

16 
	s__kî√l_sockaddr_°‹age
 {

19 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

21 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

25 *
	m__Æign
;

29 
	#SOCK_SNDBUF_LOCK
 1

	)

30 
	#SOCK_RCVBUF_LOCK
 2

	)

32 
	#SOCK_BUF_LOCK_MASK
 (
SOCK_SNDBUF_LOCK
 | 
SOCK_RCVBUF_LOCK
)

	)

	@/usr/include/linux/sysinfo.h

2 #i‚de‡
_LINUX_SYSINFO_H


3 
	#_LINUX_SYSINFO_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#SI_LOAD_SHIFT
 16

	)

8 
	ssysöfo
 {

9 
__kî√l_l⁄g_t
 
	mu±ime
;

10 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

11 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

12 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

13 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

14 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

15 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

16 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

17 
__u16
 
	m¥ocs
;

18 
__u16
 
	m∑d
;

19 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

20 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

21 
__u32
 
	mmem_unô
;

22 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/°döt-uöä.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_ETHERNET
 = 143,

91 
	#IPPROTO_ETHERNET
 
IPPROTO_ETHERNET


	)

92 
	mIPPROTO_RAW
 = 255,

93 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

94 
	mIPPROTO_MPTCP
 = 262,

95 
	#IPPROTO_MPTCP
 
IPPROTO_MPTCP


	)

96 
	mIPPROTO_MAX


102 #i‡!
__USE_KERNEL_IPV6_DEFS


105 
	mIPPROTO_HOPOPTS
 = 0,

106 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

107 
	mIPPROTO_ROUTING
 = 43,

108 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

109 
	mIPPROTO_FRAGMENT
 = 44,

110 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

111 
	mIPPROTO_ICMPV6
 = 58,

112 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

113 
	mIPPROTO_NONE
 = 59,

114 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

115 
	mIPPROTO_DSTOPTS
 = 60,

116 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

117 
	mIPPROTO_MH
 = 135

118 
	#IPPROTO_MH
 
IPPROTO_MH


	)

123 
uöt16_t
 
	tö_p‹t_t
;

128 
	mIPPORT_ECHO
 = 7,

129 
	mIPPORT_DISCARD
 = 9,

130 
	mIPPORT_SYSTAT
 = 11,

131 
	mIPPORT_DAYTIME
 = 13,

132 
	mIPPORT_NETSTAT
 = 15,

133 
	mIPPORT_FTP
 = 21,

134 
	mIPPORT_TELNET
 = 23,

135 
	mIPPORT_SMTP
 = 25,

136 
	mIPPORT_TIMESERVER
 = 37,

137 
	mIPPORT_NAMESERVER
 = 42,

138 
	mIPPORT_WHOIS
 = 43,

139 
	mIPPORT_MTP
 = 57,

141 
	mIPPORT_TFTP
 = 69,

142 
	mIPPORT_RJE
 = 77,

143 
	mIPPORT_FINGER
 = 79,

144 
	mIPPORT_TTYLINK
 = 87,

145 
	mIPPORT_SUPDUP
 = 95,

148 
	mIPPORT_EXECSERVER
 = 512,

149 
	mIPPORT_LOGINSERVER
 = 513,

150 
	mIPPORT_CMDSERVER
 = 514,

151 
	mIPPORT_EFSSERVER
 = 520,

154 
	mIPPORT_BIFFUDP
 = 512,

155 
	mIPPORT_WHOSERVER
 = 513,

156 
	mIPPORT_ROUTESERVER
 = 520,

159 
	mIPPORT_RESERVED
 = 1024,

162 
	mIPPORT_USERRESERVED
 = 5000

170 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

171 
	#IN_CLASSA_NET
 0xff000000

	)

172 
	#IN_CLASSA_NSHIFT
 24

	)

173 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

174 
	#IN_CLASSA_MAX
 128

	)

176 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

177 
	#IN_CLASSB_NET
 0xffff0000

	)

178 
	#IN_CLASSB_NSHIFT
 16

	)

179 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

180 
	#IN_CLASSB_MAX
 65536

	)

182 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

183 
	#IN_CLASSC_NET
 0xffffff00

	)

184 
	#IN_CLASSC_NSHIFT
 8

	)

185 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

187 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

188 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

190 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

191 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

194 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

196 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

198 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

201 
	#INADDR_DUMMY
 ((
ö_addr_t
Ë0xc0000008)

	)

204 
	#IN_LOOPBACKNET
 127

	)

206 #i‚de‡
INADDR_LOOPBACK


207 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

211 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

212 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

213 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

214 
	#INADDR_ALLSNOOPERS_GROUP
 ((
ö_addr_t
Ë0xe000006aË

	)

215 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

217 #i‡!
__USE_KERNEL_IPV6_DEFS


219 
	sö6_addr


223 
uöt8_t
 
	m__u6_addr8
[16];

224 
uöt16_t
 
	m__u6_addr16
[8];

225 
uöt32_t
 
	m__u6_addr32
[4];

226 } 
	m__ö6_u
;

227 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

228 #ifde‡
__USE_MISC


229 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

230 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

235 c⁄° 
ö6_addr
 
ö6addr_™y
;

236 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

237 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

238 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

240 
	#INET_ADDRSTRLEN
 16

	)

241 
	#INET6_ADDRSTRLEN
 46

	)

245 
	ssockaddr_ö


247 
__SOCKADDR_COMMON
 (
sö_
);

248 
ö_p‹t_t
 
	msö_p‹t
;

249 
ö_addr
 
	msö_addr
;

252 
	msö_zîo
[ (
sockaddr
)

253 - 
__SOCKADDR_COMMON_SIZE


254 -  (
ö_p‹t_t
)

255 -  (
ö_addr
)];

258 #i‡!
__USE_KERNEL_IPV6_DEFS


260 
	ssockaddr_ö6


262 
__SOCKADDR_COMMON
 (
sö6_
);

263 
ö_p‹t_t
 
	msö6_p‹t
;

264 
uöt32_t
 
	msö6_Êowöfo
;

265 
ö6_addr
 
	msö6_addr
;

266 
uöt32_t
 
	msö6_sc›e_id
;

270 #ifde‡
__USE_MISC


272 
	sù_mªq


275 
ö_addr
 
	mimr_mu…üddr
;

278 
ö_addr
 
	mimr_öãrÁ˚
;

281 
	sù_mªq_sour˚


284 
ö_addr
 
	mimr_mu…üddr
;

287 
ö_addr
 
	mimr_öãrÁ˚
;

290 
ö_addr
 
	mimr_sour˚addr
;

294 #i‡!
__USE_KERNEL_IPV6_DEFS


296 
	sùv6_mªq


299 
ö6_addr
 
	mùv6mr_mu…üddr
;

302 
	mùv6mr_öãrÁ˚
;

306 #ifde‡
__USE_MISC


308 
	sgroup_ªq


311 
uöt32_t
 
	mgr_öãrÁ˚
;

314 
sockaddr_°‹age
 
	mgr_group
;

317 
	sgroup_sour˚_ªq


320 
uöt32_t
 
	mg§_öãrÁ˚
;

323 
sockaddr_°‹age
 
	mg§_group
;

326 
sockaddr_°‹age
 
	mg§_sour˚
;

331 
	sù_msfûãr


334 
ö_addr
 
	mimsf_mu…üddr
;

337 
ö_addr
 
	mimsf_öãrÁ˚
;

340 
uöt32_t
 
	mimsf_fmode
;

343 
uöt32_t
 
	mimsf_num§c
;

345 
ö_addr
 
	mimsf_¶i°
[1];

348 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

349 -  (
ö_addr
) \

350 + (
num§c
Ë*  (
ö_addr
))

	)

352 
	sgroup_fûãr


355 
uöt32_t
 
	mgf_öãrÁ˚
;

358 
sockaddr_°‹age
 
	mgf_group
;

361 
uöt32_t
 
	mgf_fmode
;

364 
uöt32_t
 
	mgf_num§c
;

366 
sockaddr_°‹age
 
	mgf_¶i°
[1];

369 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

370 -  (
sockaddr_°‹age
) \

371 + ((
num§c
) \

372 *  (
sockaddr_°‹age
)))

	)

382 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

383 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

384 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

385 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

386 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

387 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

388 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

390 
	~<ídün.h
>

393 
	~<bôs/byãsw≠.h
>

394 
	~<bôs/uöä-idítôy.h
>

396 #ifde‡
__OPTIMIZE__


400 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


403 
	#¡ohl
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

404 
	#¡ohs
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

405 
	#ht⁄l
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

406 
	#ht⁄s
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

408 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


409 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

410 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

411 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

412 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

417 #ifde‡
__GNUC__


418 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

419 (
__exãnsi⁄__
 \

420 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

421 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

422 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

423 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

424 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =0; 
	}
}))

	)

426 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

430 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

431 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

432 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

434 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

435 (
__exãnsi⁄__
 \

436 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

437 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

439 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

440 (
__exãnsi⁄__
 \

441 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

442 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

444 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

448 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

449 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

451 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

452 (
__exãnsi⁄__
 \

453 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

454 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

455 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

456 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

457 && 
	`¡ohl
 (
__a
->
__ö6_u
.
__u6_addr32
[3]Ë> 1; }))

	)

459 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

460 (
__exãnsi⁄__
 \

461 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

462 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

463 
__a
->
__ö6_u
.
__u6_addr32
[0] =
__b
->__in6_u.__u6_addr32[0] \

464 && 
__a
->
__ö6_u
.
__u6_addr32
[1] =
__b
->__in6_u.__u6_addr32[1] \

465 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
__b
->__in6_u.__u6_addr32[2] \

466 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
__b
->__ö6_u.__u6_addr32[3]; }))

	)

468 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

469 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

472 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

474 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

475 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

476 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

477 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

478 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

480 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

481 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

482 =
	`ht⁄l
 (0x„800000))

	)

484 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

486 =
	`ht⁄l
 (0x„c00000))

	)

488 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

489 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

490 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

491 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

493 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

494 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

497 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

499 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

500 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

501 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

502 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

503 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

506 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

508 #ifde‡
__USE_MISC


510 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

513 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

514 
__THROW
;

518 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

519 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

520 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

522 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

523 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

524 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

526 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

527 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

528 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

530 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

531 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

532 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

534 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

535 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

536 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

539 #ifde‡
__USE_GNU


540 
cmsghdr
;

542 #i‡!
__USE_KERNEL_IPV6_DEFS


544 
	sö6_pktöfo


546 
ö6_addr
 
ùi6_addr
;

547 
ùi6_ifödex
;

551 
	sù6_mtuöfo


553 
sockaddr_ö6
 
ù6m_addr
;

554 
uöt32_t
 
ù6m_mtu
;

559 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

560 
__THROW
 
__©åibuã_dïªˇãd__
;

561 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

562 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

563 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

564 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

565 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

566 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

567 
__mu…x
, 
__∂usy
)

568 
__THROW
 
__©åibuã_dïªˇãd__
;

569 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

570 
uöt8_t
 **
__çåp
)

571 
__THROW
 
__©åibuã_dïªˇãd__
;

572 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

573 
uöt8_t
 **
__çåp
, 
__ty≥
)

574 
__THROW
 
__©åibuã_dïªˇãd__
;

578 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

579 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

583 
__THROW
;

584 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

585 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

586 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

587 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

588 **
__d©abuÂ
Ë
__THROW
;

589 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

590 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

591 **
__d©abuÂ
Ë
__THROW
;

592 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

593 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

597 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

598 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

599 
__£gmíts
Ë
__THROW
;

600 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

601 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

602 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

603 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

604 
__THROW
;

610 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

611 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

612 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

613 
__THROW
;

616 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

617 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

618 
uöt32_t
 
__num§c
,

619 c⁄° 
ö_addr
 *
__¶i°
)

620 
__THROW
;

624 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

627 
uöt32_t
 *
__num§c
,

628 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

632 c⁄° 
sockaddr
 *
__group
,

633 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

634 
uöt32_t
 
__num§c
,

635 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

638 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum-gíîic.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause")

152 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigsuspend function instead");

154 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

156 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

161 #ifde‡
__USE_MISC


168 
	#sigmask
(
sig
) \

169 
	`__glibc_ma¸o_w¨nög
 ("sigmask is deprecated") \

170 (()(1u << ((
sig
Ë- 1)))

	)

173 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

179 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

183 #ifde‡
__USE_MISC


184 
	#NSIG
 
_NSIG


	)

187 #ifde‡
__USE_GNU


188 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

192 #ifde‡
__USE_MISC


193 
__sigh™dÀr_t
 
	tsig_t
;

196 #ifde‡
__USE_POSIX


199 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1));

214 #ifde‡
__USE_GNU


216 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

220 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

223 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

224 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

229 
	~<bôs/siga˘i⁄.h
>

232 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

233 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

240 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

243 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

244 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

247 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__USE_POSIX199506


255 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

256 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__USE_POSIX199309


264 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

265 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

272 #i‚de‡
__USE_TIME_BITS64


273 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

274 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

275 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

276 
	`__n⁄nuŒ
 ((1));

278 #ifde‡
__REDIRECT


279 
	`__REDIRECT
 (
sigtimedwaô
,

280 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

281 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

282 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

283 
__sigtimedwaô64
)

284 
	`__n⁄nuŒ
 ((1));

286 
	#sigtimedwaô
 
__sigtimedwaô64


	)

292 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

293 
__THROW
;

298 #ifde‡
__USE_MISC


301 
	~<bôs/sigc⁄ãxt.h
>

304 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

309 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


310 
	#__√ed_size_t


	)

311 
	~<°ddef.h
>

313 
	~<bôs/ty≥s/°ack_t.h
>

314 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


316 
	~<sys/uc⁄ãxt.h
>

320 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


324 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW


325 
	`__©åibuã_dïªˇãd_msg__
 ("Use sigaction with SA_RESTART instead");

327 
	~<bôs/sig°ack.h
>

328 
	~<bôs/sig°ksz.h
>

329 
	~<bôs/ss_Êags.h
>

333 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

334 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

337 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

338 || 
deföed
 
__USE_MISC
)

339 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

342 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

343 || 
deföed
 
__USE_MISC
)

347 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

348 
__THROW
 
__©åibuã_dïªˇãd__
;

351 #ifde‡
__USE_XOPEN_EXTENDED


355 
	$sighﬁd
 (
__sig
Ë
__THROW


356 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigprocmask function instead");

359 
	$sigªl£
 (
__sig
Ë
__THROW


360 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigprocmask function instead");

363 
	$sigign‹e
 (
__sig
Ë
__THROW


364 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe signal function instead");

367 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW


368 
__©åibuã_dïªˇãd_msg__


372 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


375 
	~<bôs/±hªadty≥s.h
>

376 
	~<bôs/sigthªad.h
>

383 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

385 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

387 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

388 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

391 
	~<bôs/sig«l_ext.h
>

393 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/ty≥s/sig£t_t.h
>

36 
	~<bôs/ty≥s/time_t.h
>

37 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

38 #ifde‡
__USE_XOPEN2K


39 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

42 #i‚de‡
__su£c⁄ds_t_deföed


43 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

44 
	#__su£c⁄ds_t_deföed


	)

49 
	t__fd_mask
;

52 #unde‡
__NFDBITS


54 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

55 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

56 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

63 #ifde‡
__USE_XOPEN


64 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

67 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

70 } 
	tfd_£t
;

73 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifde‡
__USE_MISC


77 
__fd_mask
 
	tfd_mask
;

80 
	#NFDBITS
 
__NFDBITS


	)

85 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

86 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

87 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

88 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

91 
	g__BEGIN_DECLS


101 #i‚de‡
__USE_TIME_BITS64


102 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

103 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

104 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

105 
timevÆ
 *
__ª°ri˘
 
__timeout
);

107 #ifde‡
__REDIRECT


108 
__REDIRECT
 (
£À˘
,

109 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
),

113 
__£À˘64
);

115 
	#£À˘
 
__£À˘64


	)

119 #ifde‡
__USE_XOPEN2K


126 #i‚de‡
__USE_TIME_BITS64


127 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

128 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

129 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

130 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

131 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

133 #ifde‡
__REDIRECT


134 
__REDIRECT
 (
p£À˘
,

135 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

136 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

137 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

138 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

139 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
),

140 
__p£À˘64
);

142 
	#p£À˘
 
__p£À˘64


	)

149 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


150 
	~<bôs/£À˘2.h
>

153 
	g__END_DECLS


	@/usr/include/sys/statfs.h

19 #i‚def 
_SYS_STATFS_H


20 
	#_SYS_STATFS_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/°©fs.h
>

27 
	g__BEGIN_DECLS


30 #i‚de‡
__USE_FILE_OFFSET64


31 
	$°©fs
 (c⁄° *
__fûe
, 
°©fs
 *
__buf
)

32 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

34 #ifde‡
__REDIRECT_NTH


35 
	`__REDIRECT_NTH
 (
°©fs
,

36 (c⁄° *
__fûe
, 
°©fs
 *
__buf
),

37 
°©fs64
Ë
	`__n⁄nuŒ
 ((1, 2));

39 
	#°©fs
 
°©fs64


	)

42 #ifde‡
__USE_LARGEFILE64


43 
	$°©fs64
 (c⁄° *
__fûe
, 
°©fs64
 *
__buf
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$f°©fs
 (
__fûdes
, 
°©fs
 *
__buf
)

51 
__THROW
 
	`__n⁄nuŒ
 ((2));

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
f°©fs
, (
__fûdes
, 
°©fs
 *
__buf
),

55 
f°©fs64
Ë
	`__n⁄nuŒ
 ((2));

57 
	#f°©fs
 
f°©fs64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$f°©fs64
 (
__fûdes
, 
°©fs64
 *
__buf
)

62 
__THROW
 
	`__n⁄nuŒ
 ((2));

65 
__END_DECLS


	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 
	#adÀr32_z
 
z_adÀr32_z


	)

33 #i‚de‡
Z_SOLO


34 
	#com¥ess
 
z_com¥ess


	)

35 
	#com¥ess2
 
z_com¥ess2


	)

36 
	#com¥essBound
 
z_com¥essBound


	)

38 
	#¸c32
 
z_¸c32


	)

39 
	#¸c32_comböe
 
z_¸c32_comböe


	)

40 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

41 
	#¸c32_z
 
z_¸c32_z


	)

42 
	#deÊ©e
 
z_deÊ©e


	)

43 
	#deÊ©eBound
 
z_deÊ©eBound


	)

44 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

45 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

46 
	#deÊ©eGëDi˘i⁄¨y
 
z_deÊ©eGëDi˘i⁄¨y


	)

47 
	#deÊ©eInô
 
z_deÊ©eInô


	)

48 
	#deÊ©eInô2
 
z_deÊ©eInô2


	)

49 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

50 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

51 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

52 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

53 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

54 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

55 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

56 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

57 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

58 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

59 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

60 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

61 #i‚de‡
Z_SOLO


62 
	#gz_îr‹
 
z_gz_îr‹


	)

63 
	#gz_ötmax
 
z_gz_ötmax


	)

64 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

65 
	#gzbuf„r
 
z_gzbuf„r


	)

66 
	#gz˛óªº
 
z_gz˛óªº


	)

67 
	#gz˛o£
 
z_gz˛o£


	)

68 
	#gz˛o£_r
 
z_gz˛o£_r


	)

69 
	#gz˛o£_w
 
z_gz˛o£_w


	)

70 
	#gzdúe˘
 
z_gzdúe˘


	)

71 
	#gzd›í
 
z_gzd›í


	)

72 
	#gzeof
 
z_gzeof


	)

73 
	#gzîr‹
 
z_gzîr‹


	)

74 
	#gzÊush
 
z_gzÊush


	)

75 
	#gz‰ód
 
z_gz‰ód


	)

76 
	#gzfwrôe
 
z_gzfwrôe


	)

77 
	#gzgëc
 
z_gzgëc


	)

78 
	#gzgëc_
 
z_gzgëc_


	)

79 
	#gzgës
 
z_gzgës


	)

80 
	#gzoff£t
 
z_gzoff£t


	)

81 
	#gzoff£t64
 
z_gzoff£t64


	)

82 
	#gz›í
 
z_gz›í


	)

83 
	#gz›í64
 
z_gz›í64


	)

84 #ifde‡
_WIN32


85 
	#gz›í_w
 
z_gz›í_w


	)

87 
	#gz¥ötf
 
z_gz¥ötf


	)

88 
	#gzputc
 
z_gzputc


	)

89 
	#gzputs
 
z_gzputs


	)

90 
	#gzªad
 
z_gzªad


	)

91 
	#gzªwöd
 
z_gzªwöd


	)

92 
	#gz£ek
 
z_gz£ek


	)

93 
	#gz£ek64
 
z_gz£ek64


	)

94 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

95 
	#gzãŒ
 
z_gzãŒ


	)

96 
	#gzãŒ64
 
z_gzãŒ64


	)

97 
	#gzungëc
 
z_gzungëc


	)

98 
	#gzv¥ötf
 
z_gzv¥ötf


	)

99 
	#gzwrôe
 
z_gzwrôe


	)

101 
	#öÊ©e
 
z_öÊ©e


	)

102 
	#öÊ©eBack
 
z_öÊ©eBack


	)

103 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

104 
	#öÊ©eBackInô
 
z_öÊ©eBackInô


	)

105 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

106 
	#öÊ©eCodesU£d
 
z_öÊ©eCodesU£d


	)

107 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

108 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

109 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

110 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

111 
	#öÊ©eInô
 
z_öÊ©eInô


	)

112 
	#öÊ©eInô2
 
z_öÊ©eInô2


	)

113 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

114 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

115 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

116 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

117 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

118 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

119 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

120 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

121 
	#öÊ©eSync
 
z_öÊ©eSync


	)

122 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

123 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

124 
	#öÊ©eVÆid©e
 
z_öÊ©eVÆid©e


	)

125 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

126 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

127 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

128 #i‚de‡
Z_SOLO


129 
	#uncom¥ess
 
z_uncom¥ess


	)

130 
	#uncom¥ess2
 
z_uncom¥ess2


	)

132 
	#zEº‹
 
z_zEº‹


	)

133 #i‚de‡
Z_SOLO


134 
	#zˇŒoc
 
z_zˇŒoc


	)

135 
	#zc‰ì
 
z_zc‰ì


	)

137 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

138 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

141 
	#Byã
 
z_Byã


	)

142 
	#Byãf
 
z_Byãf


	)

143 
	#Æloc_func
 
z_Æloc_func


	)

144 
	#ch¨f
 
z_ch¨f


	)

145 
	#‰ì_func
 
z_‰ì_func


	)

146 #i‚de‡
Z_SOLO


147 
	#gzFûe
 
z_gzFûe


	)

149 
	#gz_hódî
 
z_gz_hódî


	)

150 
	#gz_hódîp
 
z_gz_hódîp


	)

151 
	#ö_func
 
z_ö_func


	)

152 
	#ötf
 
z_ötf


	)

153 
	#out_func
 
z_out_func


	)

154 
	#uI¡
 
z_uI¡


	)

155 
	#uI¡f
 
z_uI¡f


	)

156 
	#uL⁄g
 
z_uL⁄g


	)

157 
	#uL⁄gf
 
z_uL⁄gf


	)

158 
	#voidp
 
z_voidp


	)

159 
	#voidpc
 
z_voidpc


	)

160 
	#voidpf
 
z_voidpf


	)

163 
	#gz_hódî_s
 
z_gz_hódî_s


	)

164 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

168 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

169 
	#MSDOS


	)

171 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

172 
	#OS2


	)

174 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

175 
	#WINDOWS


	)

177 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

178 #i‚de‡
WIN32


179 
	#WIN32


	)

182 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

183 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

184 #i‚de‡
SYS16BIT


185 
	#SYS16BIT


	)

194 #ifde‡
SYS16BIT


195 
	#MAXSEG_64K


	)

197 #ifde‡
MSDOS


198 
	#UNALIGNED_OK


	)

201 #ifde‡
__STDC_VERSION__


202 #i‚de‡
STDC


203 
	#STDC


	)

205 #i‡
__STDC_VERSION__
 >= 199901L

206 #i‚de‡
STDC99


207 
	#STDC99


	)

211 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

212 
	#STDC


	)

214 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

215 
	#STDC


	)

217 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

218 
	#STDC


	)

220 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

221 
	#STDC


	)

224 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

225 
	#STDC


	)

228 #i‚de‡
STDC


230 c⁄°

	)

234 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

235 
	#z_c⁄°
 c⁄°

	)

237 
	#z_c⁄°


	)

240 #ifde‡
Z_SOLO


241 
	tz_size_t
;

243 
	#z_l⁄gl⁄g
 

	)

244 #i‡
deföed
(
NO_SIZE_T
)

245 
	tNO_SIZE_T
 
	tz_size_t
;

246 #ñi‡
deföed
(
STDC
)

247 
	~<°ddef.h
>

248 
size_t
 
	tz_size_t
;

250 
	tz_size_t
;

252 #unde‡
z_l⁄gl⁄g


256 #i‚de‡
MAX_MEM_LEVEL


257 #ifde‡
MAXSEG_64K


258 
	#MAX_MEM_LEVEL
 8

	)

260 
	#MAX_MEM_LEVEL
 9

	)

269 #i‚de‡
MAX_WBITS


270 
	#MAX_WBITS
 15

	)

288 #i‚de‡
OF


289 #ifde‡
STDC


290 
	#OF
(
¨gs
Ë
	)
args

292 
	#OF
(
¨gs
Ë()

	)

296 #i‚de‡
Z_ARG


297 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

298 
	#Z_ARG
(
¨gs
Ë
	)
args

300 
	#Z_ARG
(
¨gs
Ë()

	)

310 #ifde‡
SYS16BIT


311 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

313 
	#SMALL_MEDIUM


	)

314 #ifde‡
_MSC_VER


315 
	#FAR
 
_Ár


	)

317 
	#FAR
 
Ár


	)

320 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

322 
	#SMALL_MEDIUM


	)

323 #ifde‡
__BORLANDC__


324 
	#FAR
 
_Ár


	)

326 
	#FAR
 
Ár


	)

331 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

335 #ifde‡
ZLIB_DLL


336 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

337 #ifde‡
ZLIB_INTERNAL


338 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

340 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 #ifde‡
ZLIB_WINAPI


349 #ifde‡
FAR


350 #unde‡
FAR


352 
	~<wödows.h
>

355 
	#ZEXPORT
 
WINAPI


	)

356 #ifde‡
WIN32


357 
	#ZEXPORTVA
 
WINAPIV


	)

359 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

364 #i‡
deföed
 (
__BEOS__
)

365 #ifde‡
ZLIB_DLL


366 #ifde‡
ZLIB_INTERNAL


367 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

368 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

370 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

371 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

376 #i‚de‡
ZEXTERN


377 
	#ZEXTERN
 

	)

379 #i‚de‡
ZEXPORT


380 
	#ZEXPORT


	)

382 #i‚de‡
ZEXPORTVA


383 
	#ZEXPORTVA


	)

386 #i‚de‡
FAR


387 
	#FAR


	)

390 #i‡!
deföed
(
__MACTYPES__
)

391 
	tByã
;

393 
	tuI¡
;

394 
	tuL⁄g
;

396 #ifde‡
SMALL_MEDIUM


398 
	#Byãf
 
Byã
 
FAR


	)

400 
Byã
 
	tFAR
 
	tByãf
;

402 
	tFAR
 
	tch¨f
;

403 
	tFAR
 
	tötf
;

404 
uI¡
 
	tFAR
 
	tuI¡f
;

405 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

407 #ifde‡
STDC


408 c⁄° *
	tvoidpc
;

409 
	tFAR
 *
	tvoidpf
;

410 *
	tvoidp
;

412 
Byã
 c⁄° *
	tvoidpc
;

413 
Byã
 
	tFAR
 *
	tvoidpf
;

414 
Byã
 *
	tvoidp
;

417 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

418 
	~<limôs.h
>

419 #i‡(
UINT_MAX
 == 0xffffffffUL)

420 
	#Z_U4
 

	)

421 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

422 
	#Z_U4
 

	)

423 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

424 
	#Z_U4
 

	)

428 #ifde‡
Z_U4


429 
Z_U4
 
	tz_¸c_t
;

431 
	tz_¸c_t
;

435 
	#Z_HAVE_UNISTD_H


	)

439 
	#Z_HAVE_STDARG_H


	)

442 #ifde‡
STDC


443 #i‚de‡
Z_SOLO


444 
	~<sys/ty≥s.h
>

448 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

449 #i‚de‡
Z_SOLO


450 
	~<°d¨g.h
>

454 #ifde‡
_WIN32


455 #i‚de‡
Z_SOLO


456 
	~<°ddef.h
>

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

467 #unde‡
_LARGEFILE64_SOURCE


470 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

471 
	#Z_HAVE_UNISTD_H


	)

473 #i‚de‡
Z_SOLO


474 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

475 
	~<uni°d.h
>

476 #ifde‡
VMS


477 
	~<unixio.h
>

479 #i‚de‡
z_off_t


480 
	#z_off_t
 
off_t


	)

485 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

486 
	#Z_LFS64


	)

489 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

490 
	#Z_LARGE64


	)

493 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

494 
	#Z_WANT64


	)

497 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

498 
	#SEEK_SET
 0

	)

499 
	#SEEK_CUR
 1

	)

500 
	#SEEK_END
 2

	)

503 #i‚de‡
z_off_t


504 
	#z_off_t
 

	)

507 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

508 
	#z_off64_t
 
off64_t


	)

510 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

511 
	#z_off64_t
 
__öt64


	)

513 
	#z_off64_t
 
z_off_t


	)

518 #i‡
deföed
(
__MVS__
)

519 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

520 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

521 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

522 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

523 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

524 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

525 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

526 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

527 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

528 #¥agm®
m≠
(
com¥essBound
,"CMBND")

529 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

530 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

531 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/asm-generic/bitsperlong.h

2 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


3 
	#__ASM_GENERIC_BITS_PER_LONG


	)

12 #i‚de‡
__BITS_PER_LONG


13 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/errno.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_H


3 
	#_ASM_GENERIC_ERRNO_H


	)

5 
	~<asm-gíîic/î∫o-ba£.h
>

7 
	#EDEADLK
 35

	)

8 
	#ENAMETOOLONG
 36

	)

9 
	#ENOLCK
 37

	)

18 
	#ENOSYS
 38

	)

20 
	#ENOTEMPTY
 39

	)

21 
	#ELOOP
 40

	)

22 
	#EWOULDBLOCK
 
EAGAIN


	)

23 
	#ENOMSG
 42

	)

24 
	#EIDRM
 43

	)

25 
	#ECHRNG
 44

	)

26 
	#EL2NSYNC
 45

	)

27 
	#EL3HLT
 46

	)

28 
	#EL3RST
 47

	)

29 
	#ELNRNG
 48

	)

30 
	#EUNATCH
 49

	)

31 
	#ENOCSI
 50

	)

32 
	#EL2HLT
 51

	)

33 
	#EBADE
 52

	)

34 
	#EBADR
 53

	)

35 
	#EXFULL
 54

	)

36 
	#ENOANO
 55

	)

37 
	#EBADRQC
 56

	)

38 
	#EBADSLT
 57

	)

40 
	#EDEADLOCK
 
EDEADLK


	)

42 
	#EBFONT
 59

	)

43 
	#ENOSTR
 60

	)

44 
	#ENODATA
 61

	)

45 
	#ETIME
 62

	)

46 
	#ENOSR
 63

	)

47 
	#ENONET
 64

	)

48 
	#ENOPKG
 65

	)

49 
	#EREMOTE
 66

	)

50 
	#ENOLINK
 67

	)

51 
	#EADV
 68

	)

52 
	#ESRMNT
 69

	)

53 
	#ECOMM
 70

	)

54 
	#EPROTO
 71

	)

55 
	#EMULTIHOP
 72

	)

56 
	#EDOTDOT
 73

	)

57 
	#EBADMSG
 74

	)

58 
	#EOVERFLOW
 75

	)

59 
	#ENOTUNIQ
 76

	)

60 
	#EBADFD
 77

	)

61 
	#EREMCHG
 78

	)

62 
	#ELIBACC
 79

	)

63 
	#ELIBBAD
 80

	)

64 
	#ELIBSCN
 81

	)

65 
	#ELIBMAX
 82

	)

66 
	#ELIBEXEC
 83

	)

67 
	#EILSEQ
 84

	)

68 
	#ERESTART
 85

	)

69 
	#ESTRPIPE
 86

	)

70 
	#EUSERS
 87

	)

71 
	#ENOTSOCK
 88

	)

72 
	#EDESTADDRREQ
 89

	)

73 
	#EMSGSIZE
 90

	)

74 
	#EPROTOTYPE
 91

	)

75 
	#ENOPROTOOPT
 92

	)

76 
	#EPROTONOSUPPORT
 93

	)

77 
	#ESOCKTNOSUPPORT
 94

	)

78 
	#EOPNOTSUPP
 95

	)

79 
	#EPFNOSUPPORT
 96

	)

80 
	#EAFNOSUPPORT
 97

	)

81 
	#EADDRINUSE
 98

	)

82 
	#EADDRNOTAVAIL
 99

	)

83 
	#ENETDOWN
 100

	)

84 
	#ENETUNREACH
 101

	)

85 
	#ENETRESET
 102

	)

86 
	#ECONNABORTED
 103

	)

87 
	#ECONNRESET
 104

	)

88 
	#ENOBUFS
 105

	)

89 
	#EISCONN
 106

	)

90 
	#ENOTCONN
 107

	)

91 
	#ESHUTDOWN
 108

	)

92 
	#ETOOMANYREFS
 109

	)

93 
	#ETIMEDOUT
 110

	)

94 
	#ECONNREFUSED
 111

	)

95 
	#EHOSTDOWN
 112

	)

96 
	#EHOSTUNREACH
 113

	)

97 
	#EALREADY
 114

	)

98 
	#EINPROGRESS
 115

	)

99 
	#ESTALE
 116

	)

100 
	#EUCLEAN
 117

	)

101 
	#ENOTNAM
 118

	)

102 
	#ENAVAIL
 119

	)

103 
	#EISNAM
 120

	)

104 
	#EREMOTEIO
 121

	)

105 
	#EDQUOT
 122

	)

107 
	#ENOMEDIUM
 123

	)

108 
	#EMEDIUMTYPE
 124

	)

109 
	#ECANCELED
 125

	)

110 
	#ENOKEY
 126

	)

111 
	#EKEYEXPIRED
 127

	)

112 
	#EKEYREVOKED
 128

	)

113 
	#EKEYREJECTED
 129

	)

116 
	#EOWNERDEAD
 130

	)

117 
	#ENOTRECOVERABLE
 131

	)

119 
	#ERFKILL
 132

	)

121 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/mman.h

2 #i‚de‡
__ASM_GENERIC_MMAN_H


3 
	#__ASM_GENERIC_MMAN_H


	)

5 
	~<asm-gíîic/mm™-comm⁄.h
>

7 
	#MAP_GROWSDOWN
 0x0100

	)

8 
	#MAP_DENYWRITE
 0x0800

	)

9 
	#MAP_EXECUTABLE
 0x1000

	)

10 
	#MAP_LOCKED
 0x2000

	)

11 
	#MAP_NORESERVE
 0x4000

	)

18 
	#MCL_CURRENT
 1

	)

19 
	#MCL_FUTURE
 2

	)

20 
	#MCL_ONFAULT
 4

	)

	@/usr/include/asm-generic/sockios.h

2 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


3 
	#__ASM_GENERIC_SOCKIOS_H


	)

6 
	#FIOSETOWN
 0x8901

	)

7 
	#SIOCSPGRP
 0x8902

	)

8 
	#FIOGETOWN
 0x8903

	)

9 
	#SIOCGPGRP
 0x8904

	)

10 
	#SIOCATMARK
 0x8905

	)

11 
	#SIOCGSTAMP_OLD
 0x8906

	)

12 
	#SIOCGSTAMPNS_OLD
 0x8907

	)

	@/usr/include/asm-generic/types.h

2 #i‚de‡
_ASM_GENERIC_TYPES_H


3 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/posix_types.h

2 #ifde‡
__i386__


3 
	~<asm/posix_ty≥s_32.h
>

4 #ñi‡
deföed
(
__ILP32__
)

5 
	~<asm/posix_ty≥s_x32.h
>

7 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/processor-flags.h

2 #i‚de‡
_ASM_X86_PROCESSOR_FLAGS_H


3 
	#_ASM_X86_PROCESSOR_FLAGS_H


	)

6 
	~<löux/c⁄°.h
>

11 
	#X86_EFLAGS_CF_BIT
 0

	)

12 
	#X86_EFLAGS_CF
 
	`_BITUL
(
X86_EFLAGS_CF_BIT
)

	)

13 
	#X86_EFLAGS_FIXED_BIT
 1

	)

14 
	#X86_EFLAGS_FIXED
 
	`_BITUL
(
X86_EFLAGS_FIXED_BIT
)

	)

15 
	#X86_EFLAGS_PF_BIT
 2

	)

16 
	#X86_EFLAGS_PF
 
	`_BITUL
(
X86_EFLAGS_PF_BIT
)

	)

17 
	#X86_EFLAGS_AF_BIT
 4

	)

18 
	#X86_EFLAGS_AF
 
	`_BITUL
(
X86_EFLAGS_AF_BIT
)

	)

19 
	#X86_EFLAGS_ZF_BIT
 6

	)

20 
	#X86_EFLAGS_ZF
 
	`_BITUL
(
X86_EFLAGS_ZF_BIT
)

	)

21 
	#X86_EFLAGS_SF_BIT
 7

	)

22 
	#X86_EFLAGS_SF
 
	`_BITUL
(
X86_EFLAGS_SF_BIT
)

	)

23 
	#X86_EFLAGS_TF_BIT
 8

	)

24 
	#X86_EFLAGS_TF
 
	`_BITUL
(
X86_EFLAGS_TF_BIT
)

	)

25 
	#X86_EFLAGS_IF_BIT
 9

	)

26 
	#X86_EFLAGS_IF
 
	`_BITUL
(
X86_EFLAGS_IF_BIT
)

	)

27 
	#X86_EFLAGS_DF_BIT
 10

	)

28 
	#X86_EFLAGS_DF
 
	`_BITUL
(
X86_EFLAGS_DF_BIT
)

	)

29 
	#X86_EFLAGS_OF_BIT
 11

	)

30 
	#X86_EFLAGS_OF
 
	`_BITUL
(
X86_EFLAGS_OF_BIT
)

	)

31 
	#X86_EFLAGS_IOPL_BIT
 12

	)

32 
	#X86_EFLAGS_IOPL
 (
	`_AC
(3,
UL
Ë<< 
X86_EFLAGS_IOPL_BIT
)

	)

33 
	#X86_EFLAGS_NT_BIT
 14

	)

34 
	#X86_EFLAGS_NT
 
	`_BITUL
(
X86_EFLAGS_NT_BIT
)

	)

35 
	#X86_EFLAGS_RF_BIT
 16

	)

36 
	#X86_EFLAGS_RF
 
	`_BITUL
(
X86_EFLAGS_RF_BIT
)

	)

37 
	#X86_EFLAGS_VM_BIT
 17

	)

38 
	#X86_EFLAGS_VM
 
	`_BITUL
(
X86_EFLAGS_VM_BIT
)

	)

39 
	#X86_EFLAGS_AC_BIT
 18

	)

40 
	#X86_EFLAGS_AC
 
	`_BITUL
(
X86_EFLAGS_AC_BIT
)

	)

41 
	#X86_EFLAGS_VIF_BIT
 19

	)

42 
	#X86_EFLAGS_VIF
 
	`_BITUL
(
X86_EFLAGS_VIF_BIT
)

	)

43 
	#X86_EFLAGS_VIP_BIT
 20

	)

44 
	#X86_EFLAGS_VIP
 
	`_BITUL
(
X86_EFLAGS_VIP_BIT
)

	)

45 
	#X86_EFLAGS_ID_BIT
 21

	)

46 
	#X86_EFLAGS_ID
 
	`_BITUL
(
X86_EFLAGS_ID_BIT
)

	)

51 
	#X86_CR0_PE_BIT
 0

	)

52 
	#X86_CR0_PE
 
	`_BITUL
(
X86_CR0_PE_BIT
)

	)

53 
	#X86_CR0_MP_BIT
 1

	)

54 
	#X86_CR0_MP
 
	`_BITUL
(
X86_CR0_MP_BIT
)

	)

55 
	#X86_CR0_EM_BIT
 2

	)

56 
	#X86_CR0_EM
 
	`_BITUL
(
X86_CR0_EM_BIT
)

	)

57 
	#X86_CR0_TS_BIT
 3

	)

58 
	#X86_CR0_TS
 
	`_BITUL
(
X86_CR0_TS_BIT
)

	)

59 
	#X86_CR0_ET_BIT
 4

	)

60 
	#X86_CR0_ET
 
	`_BITUL
(
X86_CR0_ET_BIT
)

	)

61 
	#X86_CR0_NE_BIT
 5

	)

62 
	#X86_CR0_NE
 
	`_BITUL
(
X86_CR0_NE_BIT
)

	)

63 
	#X86_CR0_WP_BIT
 16

	)

64 
	#X86_CR0_WP
 
	`_BITUL
(
X86_CR0_WP_BIT
)

	)

65 
	#X86_CR0_AM_BIT
 18

	)

66 
	#X86_CR0_AM
 
	`_BITUL
(
X86_CR0_AM_BIT
)

	)

67 
	#X86_CR0_NW_BIT
 29

	)

68 
	#X86_CR0_NW
 
	`_BITUL
(
X86_CR0_NW_BIT
)

	)

69 
	#X86_CR0_CD_BIT
 30

	)

70 
	#X86_CR0_CD
 
	`_BITUL
(
X86_CR0_CD_BIT
)

	)

71 
	#X86_CR0_PG_BIT
 31

	)

72 
	#X86_CR0_PG
 
	`_BITUL
(
X86_CR0_PG_BIT
)

	)

77 
	#X86_CR3_PWT_BIT
 3

	)

78 
	#X86_CR3_PWT
 
	`_BITUL
(
X86_CR3_PWT_BIT
)

	)

79 
	#X86_CR3_PCD_BIT
 4

	)

80 
	#X86_CR3_PCD
 
	`_BITUL
(
X86_CR3_PCD_BIT
)

	)

82 
	#X86_CR3_PCID_BITS
 12

	)

83 
	#X86_CR3_PCID_MASK
 (
	`_AC
((1UL << 
X86_CR3_PCID_BITS
Ë- 1, 
UL
))

	)

85 
	#X86_CR3_PCID_NOFLUSH_BIT
 63

	)

86 
	#X86_CR3_PCID_NOFLUSH
 
	`_BITULL
(
X86_CR3_PCID_NOFLUSH_BIT
)

	)

91 
	#X86_CR4_VME_BIT
 0

	)

92 
	#X86_CR4_VME
 
	`_BITUL
(
X86_CR4_VME_BIT
)

	)

93 
	#X86_CR4_PVI_BIT
 1

	)

94 
	#X86_CR4_PVI
 
	`_BITUL
(
X86_CR4_PVI_BIT
)

	)

95 
	#X86_CR4_TSD_BIT
 2

	)

96 
	#X86_CR4_TSD
 
	`_BITUL
(
X86_CR4_TSD_BIT
)

	)

97 
	#X86_CR4_DE_BIT
 3

	)

98 
	#X86_CR4_DE
 
	`_BITUL
(
X86_CR4_DE_BIT
)

	)

99 
	#X86_CR4_PSE_BIT
 4

	)

100 
	#X86_CR4_PSE
 
	`_BITUL
(
X86_CR4_PSE_BIT
)

	)

101 
	#X86_CR4_PAE_BIT
 5

	)

102 
	#X86_CR4_PAE
 
	`_BITUL
(
X86_CR4_PAE_BIT
)

	)

103 
	#X86_CR4_MCE_BIT
 6

	)

104 
	#X86_CR4_MCE
 
	`_BITUL
(
X86_CR4_MCE_BIT
)

	)

105 
	#X86_CR4_PGE_BIT
 7

	)

106 
	#X86_CR4_PGE
 
	`_BITUL
(
X86_CR4_PGE_BIT
)

	)

107 
	#X86_CR4_PCE_BIT
 8

	)

108 
	#X86_CR4_PCE
 
	`_BITUL
(
X86_CR4_PCE_BIT
)

	)

109 
	#X86_CR4_OSFXSR_BIT
 9

	)

110 
	#X86_CR4_OSFXSR
 
	`_BITUL
(
X86_CR4_OSFXSR_BIT
)

	)

111 
	#X86_CR4_OSXMMEXCPT_BIT
 10

	)

112 
	#X86_CR4_OSXMMEXCPT
 
	`_BITUL
(
X86_CR4_OSXMMEXCPT_BIT
)

	)

113 
	#X86_CR4_UMIP_BIT
 11

	)

114 
	#X86_CR4_UMIP
 
	`_BITUL
(
X86_CR4_UMIP_BIT
)

	)

115 
	#X86_CR4_LA57_BIT
 12

	)

116 
	#X86_CR4_LA57
 
	`_BITUL
(
X86_CR4_LA57_BIT
)

	)

117 
	#X86_CR4_VMXE_BIT
 13

	)

118 
	#X86_CR4_VMXE
 
	`_BITUL
(
X86_CR4_VMXE_BIT
)

	)

119 
	#X86_CR4_SMXE_BIT
 14

	)

120 
	#X86_CR4_SMXE
 
	`_BITUL
(
X86_CR4_SMXE_BIT
)

	)

121 
	#X86_CR4_FSGSBASE_BIT
 16

	)

122 
	#X86_CR4_FSGSBASE
 
	`_BITUL
(
X86_CR4_FSGSBASE_BIT
)

	)

123 
	#X86_CR4_PCIDE_BIT
 17

	)

124 
	#X86_CR4_PCIDE
 
	`_BITUL
(
X86_CR4_PCIDE_BIT
)

	)

125 
	#X86_CR4_OSXSAVE_BIT
 18

	)

126 
	#X86_CR4_OSXSAVE
 
	`_BITUL
(
X86_CR4_OSXSAVE_BIT
)

	)

127 
	#X86_CR4_SMEP_BIT
 20

	)

128 
	#X86_CR4_SMEP
 
	`_BITUL
(
X86_CR4_SMEP_BIT
)

	)

129 
	#X86_CR4_SMAP_BIT
 21

	)

130 
	#X86_CR4_SMAP
 
	`_BITUL
(
X86_CR4_SMAP_BIT
)

	)

131 
	#X86_CR4_PKE_BIT
 22

	)

132 
	#X86_CR4_PKE
 
	`_BITUL
(
X86_CR4_PKE_BIT
)

	)

137 
	#X86_CR8_TPR
 
	`_AC
(0x0000000f,
UL
Ë

	)

146 
	#CX86_PCR0
 0x20

	)

147 
	#CX86_GCR
 0xb8

	)

148 
	#CX86_CCR0
 0xc0

	)

149 
	#CX86_CCR1
 0xc1

	)

150 
	#CX86_CCR2
 0xc2

	)

151 
	#CX86_CCR3
 0xc3

	)

152 
	#CX86_CCR4
 0xe8

	)

153 
	#CX86_CCR5
 0xe9

	)

154 
	#CX86_CCR6
 0xó

	)

155 
	#CX86_CCR7
 0xeb

	)

156 
	#CX86_PCR1
 0xf0

	)

157 
	#CX86_DIR0
 0x„

	)

158 
	#CX86_DIR1
 0xff

	)

159 
	#CX86_ARR_BASE
 0xc4

	)

160 
	#CX86_RCR_BASE
 0xdc

	)

162 
	#CR0_STATE
 (
X86_CR0_PE
 | 
X86_CR0_MP
 | 
X86_CR0_ET
 | \

163 
X86_CR0_NE
 | 
X86_CR0_WP
 | 
X86_CR0_AM
 | \

164 
X86_CR0_PG
)

	)

	@/usr/include/asm/ptrace-abi.h

2 #i‚de‡
_ASM_X86_PTRACE_ABI_H


3 
	#_ASM_X86_PTRACE_ABI_H


	)

5 #ifde‡
__i386__


7 
	#EBX
 0

	)

8 
	#ECX
 1

	)

9 
	#EDX
 2

	)

10 
	#ESI
 3

	)

11 
	#EDI
 4

	)

12 
	#EBP
 5

	)

13 
	#EAX
 6

	)

14 
	#DS
 7

	)

15 
	#ES
 8

	)

16 
	#FS
 9

	)

17 
	#GS
 10

	)

18 
	#ORIG_EAX
 11

	)

19 
	#EIP
 12

	)

20 
	#CS
 13

	)

21 
	#EFL
 14

	)

22 
	#UESP
 15

	)

23 
	#SS
 16

	)

24 
	#FRAME_SIZE
 17

	)

28 #i‡
deföed
(
__ASSEMBLY__
Ë|| deföed(
__FRAME_OFFSETS
)

33 
	#R15
 0

	)

34 
	#R14
 8

	)

35 
	#R13
 16

	)

36 
	#R12
 24

	)

37 
	#RBP
 32

	)

38 
	#RBX
 40

	)

40 
	#R11
 48

	)

41 
	#R10
 56

	)

42 
	#R9
 64

	)

43 
	#R8
 72

	)

44 
	#RAX
 80

	)

45 
	#RCX
 88

	)

46 
	#RDX
 96

	)

47 
	#RSI
 104

	)

48 
	#RDI
 112

	)

53 
	#ORIG_RAX
 120

	)

55 
	#RIP
 128

	)

56 
	#CS
 136

	)

57 
	#EFLAGS
 144

	)

58 
	#RSP
 152

	)

59 
	#SS
 160

	)

63 
	#FRAME_SIZE
 168

	)

68 
	#PTRACE_GETREGS
 12

	)

69 
	#PTRACE_SETREGS
 13

	)

70 
	#PTRACE_GETFPREGS
 14

	)

71 
	#PTRACE_SETFPREGS
 15

	)

72 
	#PTRACE_GETFPXREGS
 18

	)

73 
	#PTRACE_SETFPXREGS
 19

	)

75 
	#PTRACE_OLDSETOPTIONS
 21

	)

78 
	#PTRACE_GET_THREAD_AREA
 25

	)

79 
	#PTRACE_SET_THREAD_AREA
 26

	)

81 #ifde‡
__x86_64__


82 
	#PTRACE_ARCH_PRCTL
 30

	)

85 
	#PTRACE_SYSEMU
 31

	)

86 
	#PTRACE_SYSEMU_SINGLESTEP
 32

	)

88 
	#PTRACE_SINGLEBLOCK
 33

	)

90 #i‚de‡
__ASSEMBLY__


91 
	~<löux/ty≥s.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/endianness.h

1 #i‚de‡
_BITS_ENDIANNESS_H


2 
	#_BITS_ENDIANNESS_H
 1

	)

4 #i‚de‡
_BITS_ENDIAN_H


9 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/ty≥s/°ru˘_iovec.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

205 
	#F_ADD_SEALS
 1033

	)

206 
	#F_GET_SEALS
 1034

	)

208 
	#F_GET_RW_HINT
 1035

	)

209 
	#F_SET_RW_HINT
 1036

	)

210 
	#F_GET_FILE_RW_HINT
 1037

	)

211 
	#F_SET_FILE_RW_HINT
 1038

	)

213 #ifde‡
__USE_XOPEN2K8


214 
	#F_DUPFD_CLOEXEC
 1030

	)

219 
	#FD_CLOEXEC
 1

	)

221 #i‚de‡
F_RDLCK


223 
	#F_RDLCK
 0

	)

224 
	#F_WRLCK
 1

	)

225 
	#F_UNLCK
 2

	)

230 #i‚de‡
F_EXLCK


231 
	#F_EXLCK
 4

	)

232 
	#F_SHLCK
 8

	)

235 #ifde‡
__USE_MISC


237 
	#LOCK_SH
 1

	)

238 
	#LOCK_EX
 2

	)

239 
	#LOCK_NB
 4

	)

241 
	#LOCK_UN
 8

	)

244 #ifde‡
__USE_GNU


245 
	#LOCK_MAND
 32

	)

246 
	#LOCK_READ
 64

	)

247 
	#LOCK_WRITE
 128

	)

248 
	#LOCK_RW
 192

	)

251 #ifde‡
__USE_GNU


253 
	#DN_ACCESS
 0x00000001

	)

254 
	#DN_MODIFY
 0x00000002

	)

255 
	#DN_CREATE
 0x00000004

	)

256 
	#DN_DELETE
 0x00000008

	)

257 
	#DN_RENAME
 0x00000010

	)

258 
	#DN_ATTRIB
 0x00000020

	)

259 
	#DN_MULTISHOT
 0x80000000

	)

263 #ifde‡
__USE_GNU


265 
	e__pid_ty≥


267 
	mF_OWNER_TID
 = 0,

268 
	mF_OWNER_PID
,

269 
	mF_OWNER_PGRP
,

270 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


274 
	sf_ow√r_ex


276 
__pid_ty≥
 
	mty≥
;

277 
__pid_t
 
	mpid
;

281 #ifde‡
__USE_GNU


283 
	#F_SEAL_SEAL
 0x0001

	)

284 
	#F_SEAL_SHRINK
 0x0002

	)

285 
	#F_SEAL_GROW
 0x0004

	)

286 
	#F_SEAL_WRITE
 0x0008

	)

287 
	#F_SEAL_FUTURE_WRITE
 0x0010

	)

291 #ifde‡
__USE_GNU


293 
	#RWH_WRITE_LIFE_NOT_SET
 0

	)

294 
	#RWF_WRITE_LIFE_NOT_SET
 
RWH_WRITE_LIFE_NOT_SET


	)

295 
	#RWH_WRITE_LIFE_NONE
 1

	)

296 
	#RWH_WRITE_LIFE_SHORT
 2

	)

297 
	#RWH_WRITE_LIFE_MEDIUM
 3

	)

298 
	#RWH_WRITE_LIFE_LONG
 4

	)

299 
	#RWH_WRITE_LIFE_EXTREME
 5

	)

304 #ifdef 
__USE_MISC


305 
	#FAPPEND
 
O_APPEND


	)

306 
	#FFSYNC
 
O_FSYNC


	)

307 
	#FASYNC
 
O_ASYNC


	)

308 
	#FNONBLOCK
 
O_NONBLOCK


	)

309 
	#FNDELAY
 
O_NDELAY


	)

312 #i‚de‡
__POSIX_FADV_DONTNEED


313 
	#__POSIX_FADV_DONTNEED
 4

	)

314 
	#__POSIX_FADV_NOREUSE
 5

	)

317 #ifde‡
__USE_XOPEN2K


318 
	#POSIX_FADV_NORMAL
 0

	)

319 
	#POSIX_FADV_RANDOM
 1

	)

320 
	#POSIX_FADV_SEQUENTIAL
 2

	)

321 
	#POSIX_FADV_WILLNEED
 3

	)

322 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

323 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

327 #ifde‡
__USE_GNU


329 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

332 
	#SYNC_FILE_RANGE_WRITE
 2

	)

335 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

340 
	#SYNC_FILE_RANGE_WRITE_AND_WAIT
 (
SYNC_FILE_RANGE_WRITE
 \

341 | 
SYNC_FILE_RANGE_WAIT_BEFORE
 \

342 | 
SYNC_FILE_RANGE_WAIT_AFTER
)

	)

345 
	#SPLICE_F_MOVE
 1

	)

346 
	#SPLICE_F_NONBLOCK
 2

	)

349 
	#SPLICE_F_MORE
 4

	)

350 
	#SPLICE_F_GIFT
 8

	)

354 
	~<löux/ÁŒoc.h
>

358 
	sfûe_h™dÀ


360 
	mh™dÀ_byãs
;

361 
	mh™dÀ_ty≥
;

363 
	mf_h™dÀ
[0];

367 
	#MAX_HANDLE_SZ
 128

	)

371 #ifde‡
__USE_ATFILE


372 
	#AT_FDCWD
 -100

	)

375 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

376 
	#AT_REMOVEDIR
 0x200

	)

378 
	#AT_SYMLINK_FOLLOW
 0x400

	)

379 #ifde‡
__USE_GNU


380 
	#AT_NO_AUTOMOUNT
 0x800

	)

382 
	#AT_EMPTY_PATH
 0x1000

	)

383 
	#AT_STATX_SYNC_TYPE
 0x6000

	)

384 
	#AT_STATX_SYNC_AS_STAT
 0x0000

	)

385 
	#AT_STATX_FORCE_SYNC
 0x2000

	)

386 
	#AT_STATX_DONT_SYNC
 0x4000

	)

387 
	#AT_RECURSIVE
 0x8000

	)

389 
	#AT_EACCESS
 0x200

	)

393 
	g__BEGIN_DECLS


395 #ifde‡
__USE_GNU


398 
__ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

399 
__THROW
;

406 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

407 
__Êags
);

414 
__ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

415 
size_t
 
__cou¡
, 
__Êags
);

421 
__ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

422 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

423 
__Êags
);

429 
__ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

430 
__Êags
);

436 #i‚de‡
__USE_FILE_OFFSET64


437 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

439 #ifde‡
__REDIRECT


440 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

441 
__off64_t
 
__Àn
),

442 
ÁŒoˇã64
);

444 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

447 #ifde‡
__USE_LARGEFILE64


448 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

449 
__off64_t
 
__Àn
);

454 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

455 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

456 
__Êags
Ë
__THROW
;

462 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

463 
__Êags
);

467 
__END_DECLS


	@/usr/include/bits/floatn-common.h

20 #i‚de‡
_BITS_FLOATN_COMMON_H


21 
	#_BITS_FLOATN_COMMON_H


	)

23 
	~<„©uªs.h
>

24 
	~<bôs/l⁄g-doubÀ.h
>

34 
	#__HAVE_FLOAT16
 0

	)

35 
	#__HAVE_FLOAT32
 1

	)

36 
	#__HAVE_FLOAT64
 1

	)

37 
	#__HAVE_FLOAT32X
 1

	)

38 
	#__HAVE_FLOAT128X
 0

	)

52 
	#__HAVE_DISTINCT_FLOAT16
 
__HAVE_FLOAT16


	)

53 
	#__HAVE_DISTINCT_FLOAT32
 0

	)

54 
	#__HAVE_DISTINCT_FLOAT64
 0

	)

55 
	#__HAVE_DISTINCT_FLOAT32X
 0

	)

56 
	#__HAVE_DISTINCT_FLOAT64X
 0

	)

57 
	#__HAVE_DISTINCT_FLOAT128X
 
__HAVE_FLOAT128X


	)

63 
	#__HAVE_FLOAT128_UNLIKE_LDBL
 (
__HAVE_DISTINCT_FLOAT128
 \

64 && 
__LDBL_MANT_DIG__
 !113)

	)

69 #i‡
__GNUC_PREREQ
 (7, 0Ë&& !
deföed
 
__˝lu•lus


70 
	#__HAVE_FLOATN_NOT_TYPEDEF
 1

	)

72 
	#__HAVE_FLOATN_NOT_TYPEDEF
 0

	)

75 #i‚de‡
__ASSEMBLER__


80 #i‡
__HAVE_FLOAT16


81 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


83 
	#__f16
(
x
Ë((
_Flﬂt16
Ëx##
f
)

	)

85 
	#__f16
(
x
Ëx##
f16


	)

89 #i‡
__HAVE_FLOAT32


90 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


91 
	#__f32
(
x
Ëx##
f


	)

93 
	#__f32
(
x
Ëx##
f32


	)

97 #i‡
__HAVE_FLOAT64


98 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
	#__f64
(
x
Ëx##
l


	)

102 
	#__f64
(
x
Ë
	)
x

105 
	#__f64
(
x
Ëx##
f64


	)

109 #i‡
__HAVE_FLOAT32X


110 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


111 
	#__f32x
(
x
Ë
	)
x

113 
	#__f32x
(
x
Ëx##
f32x


	)

117 #i‡
__HAVE_FLOAT64X


118 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


119 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


120 
	#__f64x
(
x
Ëx##
l


	)

122 
	#__f64x
(
x
Ë
	`__f128
 (x)

	)

125 
	#__f64x
(
x
Ëx##
f64x


	)

129 #i‡
__HAVE_FLOAT128X


130 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


133 
	#__f128x
(
x
Ëx##
f128x


	)

138 #i‡
__HAVE_FLOAT16


139 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


140 
_Com∂ex
 
	t__cÊﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HC__
)));

141 
	#__CFLOAT16
 
__cÊﬂt16


	)

143 
	#__CFLOAT16
 
_Com∂ex
 
_Flﬂt16


	)

147 #i‡
__HAVE_FLOAT32


148 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


149 
	#__CFLOAT32
 
_Com∂ex
 

	)

151 
	#__CFLOAT32
 
_Com∂ex
 
_Flﬂt32


	)

155 #i‡
__HAVE_FLOAT64


156 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


157 #ifde‡
__NO_LONG_DOUBLE_MATH


158 
	#__CFLOAT64
 
_Com∂ex
 

	)

160 
	#__CFLOAT64
 
_Com∂ex
 

	)

163 
	#__CFLOAT64
 
_Com∂ex
 
_Flﬂt64


	)

167 #i‡
__HAVE_FLOAT32X


168 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


169 
	#__CFLOAT32X
 
_Com∂ex
 

	)

171 
	#__CFLOAT32X
 
_Com∂ex
 
_Flﬂt32x


	)

175 #i‡
__HAVE_FLOAT64X


176 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


177 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


178 
	#__CFLOAT64X
 
_Com∂ex
 

	)

180 
	#__CFLOAT64X
 
__CFLOAT128


	)

183 
	#__CFLOAT64X
 
_Com∂ex
 
_Flﬂt64x


	)

187 #i‡
__HAVE_FLOAT128X


188 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


191 
	#__CFLOAT128X
 
_Com∂ex
 
_Flﬂt128x


	)

196 #i‡
__HAVE_FLOAT16


198 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


199 
	t_Flﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HF__
)));

202 #i‡!
__GNUC_PREREQ
 (7, 0)

203 
	#__buûtö_huge_vÆf16
(Ë((
_Flﬂt16
Ë
	`__buûtö_huge_vÆ
 ())

	)

204 
	#__buûtö_öff16
(Ë((
_Flﬂt16
Ë
	`__buûtö_öf
 ())

	)

205 
	#__buûtö_«nf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«n
 (x))

	)

206 
	#__buûtö_«nsf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«ns
 (x))

	)

211 #i‡
__HAVE_FLOAT32


213 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


214 
	t_Flﬂt32
;

217 #i‡!
__GNUC_PREREQ
 (7, 0)

218 
	#__buûtö_huge_vÆf32
(Ë(
	`__buûtö_huge_vÆf
 ())

	)

219 
	#__buûtö_öff32
(Ë(
	`__buûtö_öff
 ())

	)

220 
	#__buûtö_«nf32
(
x
Ë(
	`__buûtö_«nf
 (x))

	)

221 
	#__buûtö_«nsf32
(
x
Ë(
	`__buûtö_«nsf
 (x))

	)

226 #i‡
__HAVE_FLOAT64


235 #ifde‡
__NO_LONG_DOUBLE_MATH


237 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


238 
	t_Flﬂt64
;

241 #i‡!
__GNUC_PREREQ
 (7, 0)

242 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

243 
	#__buûtö_öff64
(Ë(
	`__buûtö_öÊ
 ())

	)

244 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

245 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

250 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


251 
	t_Flﬂt64
;

254 #i‡!
__GNUC_PREREQ
 (7, 0)

255 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

256 
	#__buûtö_öff64
(Ë(
	`__buûtö_öf
 ())

	)

257 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«n
 (x))

	)

258 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

265 #i‡
__HAVE_FLOAT32X


267 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


268 
	t_Flﬂt32x
;

271 #i‡!
__GNUC_PREREQ
 (7, 0)

272 
	#__buûtö_huge_vÆf32x
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

273 
	#__buûtö_öff32x
(Ë(
	`__buûtö_öf
 ())

	)

274 
	#__buûtö_«nf32x
(
x
Ë(
	`__buûtö_«n
 (x))

	)

275 
	#__buûtö_«nsf32x
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

280 #i‡
__HAVE_FLOAT64X


282 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


284 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


285 
	t_Flﬂt64x
;

288 #i‡!
__GNUC_PREREQ
 (7, 0)

289 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

290 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öÊ
 ())

	)

291 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

292 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

297 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


298 
_Flﬂt128
 
	t_Flﬂt64x
;

301 #i‡!
__GNUC_PREREQ
 (7, 0)

302 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆf128
 ())

	)

303 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öff128
 ())

	)

304 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«nf128
 (x))

	)

305 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«nsf128
 (x))

	)

312 #i‡
__HAVE_FLOAT128X


314 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


318 #i‡!
__GNUC_PREREQ
 (7, 0)

319 
	#__buûtö_huge_vÆf128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_huge_vÆ
 ())

	)

320 
	#__buûtö_öff128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_öf
 ())

	)

321 
	#__buûtö_«nf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«n
 (x))

	)

322 
	#__buûtö_«nsf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«ns
 (x))

	)

	@/usr/include/bits/getopt_core.h

20 #i‚de‡
_GETOPT_CORE_H


21 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

91 
	$gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

92 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


32 #i‡
deföed
 
_UAPI_LINUX_IN6_H
 \

33 || 
deföed
 
	g_UAPI_IPV6_H
 \

34 || 
deföed
 
	g_LINUX_IN6_H
 \

35 || 
deföed
 
	g_IPV6_H


39 
	#__USE_KERNEL_IPV6_DEFS
 1

	)

41 
	#__USE_KERNEL_IPV6_DEFS
 0

	)

47 
	#IP_OPTIONS
 4

	)

48 
	#IP_HDRINCL
 3

	)

49 
	#IP_TOS
 1

	)

50 
	#IP_TTL
 2

	)

51 
	#IP_RECVOPTS
 6

	)

53 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

54 
	#IP_RETOPTS
 7

	)

55 
	#IP_MULTICAST_IF
 32

	)

56 
	#IP_MULTICAST_TTL
 33

	)

57 
	#IP_MULTICAST_LOOP
 34

	)

58 
	#IP_ADD_MEMBERSHIP
 35

	)

59 
	#IP_DROP_MEMBERSHIP
 36

	)

60 
	#IP_UNBLOCK_SOURCE
 37

	)

61 
	#IP_BLOCK_SOURCE
 38

	)

62 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

63 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

64 
	#IP_MSFILTER
 41

	)

65 #ifde‡
__USE_MISC


66 
	#MCAST_JOIN_GROUP
 42

	)

67 
	#MCAST_BLOCK_SOURCE
 43

	)

68 
	#MCAST_UNBLOCK_SOURCE
 44

	)

69 
	#MCAST_LEAVE_GROUP
 45

	)

70 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

71 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

72 
	#MCAST_MSFILTER
 48

	)

73 
	#IP_MULTICAST_ALL
 49

	)

74 
	#IP_UNICAST_IF
 50

	)

76 
	#MCAST_EXCLUDE
 0

	)

77 
	#MCAST_INCLUDE
 1

	)

80 
	#IP_ROUTER_ALERT
 5

	)

81 
	#IP_PKTINFO
 8

	)

82 
	#IP_PKTOPTIONS
 9

	)

83 
	#IP_PMTUDISC
 10

	)

84 
	#IP_MTU_DISCOVER
 10

	)

85 
	#IP_RECVERR
 11

	)

86 
	#IP_RECVTTL
 12

	)

87 
	#IP_RECVTOS
 13

	)

88 
	#IP_MTU
 14

	)

89 
	#IP_FREEBIND
 15

	)

90 
	#IP_IPSEC_POLICY
 16

	)

91 
	#IP_XFRM_POLICY
 17

	)

92 
	#IP_PASSSEC
 18

	)

93 
	#IP_TRANSPARENT
 19

	)

94 
	#IP_MULTICAST_ALL
 49

	)

97 
	#IP_ORIGDSTADDR
 20

	)

98 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

100 
	#IP_MINTTL
 21

	)

101 
	#IP_NODEFRAG
 22

	)

102 
	#IP_CHECKSUM
 23

	)

103 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

104 
	#IP_RECVFRAGSIZE
 25

	)

105 
	#IP_RECVERR_RFC4884
 26

	)

108 
	#IP_PMTUDISC_DONT
 0

	)

109 
	#IP_PMTUDISC_WANT
 1

	)

110 
	#IP_PMTUDISC_DO
 2

	)

111 
	#IP_PMTUDISC_PROBE
 3

	)

115 
	#IP_PMTUDISC_INTERFACE
 4

	)

117 
	#IP_PMTUDISC_OMIT
 5

	)

119 
	#IP_MULTICAST_IF
 32

	)

120 
	#IP_MULTICAST_TTL
 33

	)

121 
	#IP_MULTICAST_LOOP
 34

	)

122 
	#IP_ADD_MEMBERSHIP
 35

	)

123 
	#IP_DROP_MEMBERSHIP
 36

	)

124 
	#IP_UNBLOCK_SOURCE
 37

	)

125 
	#IP_BLOCK_SOURCE
 38

	)

126 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

127 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

128 
	#IP_MSFILTER
 41

	)

129 
	#IP_MULTICAST_ALL
 49

	)

130 
	#IP_UNICAST_IF
 50

	)

133 
	#SOL_IP
 0

	)

135 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

136 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

137 
	#IP_MAX_MEMBERSHIPS
 20

	)

139 #ifde‡
__USE_MISC


143 
	sù_›ts


145 
ö_addr
 
	mù_d°
;

146 
	mù_›ts
[40];

150 
	sù_mªqn


152 
ö_addr
 
	mimr_mu…üddr
;

153 
ö_addr
 
	mimr_addªss
;

154 
	mimr_ifödex
;

158 
	sö_pktöfo


160 
	mùi_ifödex
;

161 
ö_addr
 
	mùi_•ec_d°
;

162 
ö_addr
 
	mùi_addr
;

169 
	#IPV6_ADDRFORM
 1

	)

170 
	#IPV6_2292PKTINFO
 2

	)

171 
	#IPV6_2292HOPOPTS
 3

	)

172 
	#IPV6_2292DSTOPTS
 4

	)

173 
	#IPV6_2292RTHDR
 5

	)

174 
	#IPV6_2292PKTOPTIONS
 6

	)

175 
	#IPV6_CHECKSUM
 7

	)

176 
	#IPV6_2292HOPLIMIT
 8

	)

178 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

180 
	#IPV6_NEXTHOP
 9

	)

181 
	#IPV6_AUTHHDR
 10

	)

182 
	#IPV6_UNICAST_HOPS
 16

	)

183 
	#IPV6_MULTICAST_IF
 17

	)

184 
	#IPV6_MULTICAST_HOPS
 18

	)

185 
	#IPV6_MULTICAST_LOOP
 19

	)

186 
	#IPV6_JOIN_GROUP
 20

	)

187 
	#IPV6_LEAVE_GROUP
 21

	)

188 
	#IPV6_ROUTER_ALERT
 22

	)

189 
	#IPV6_MTU_DISCOVER
 23

	)

190 
	#IPV6_MTU
 24

	)

191 
	#IPV6_RECVERR
 25

	)

192 
	#IPV6_V6ONLY
 26

	)

193 
	#IPV6_JOIN_ANYCAST
 27

	)

194 
	#IPV6_LEAVE_ANYCAST
 28

	)

195 
	#IPV6_MULTICAST_ALL
 29

	)

196 
	#IPV6_ROUTER_ALERT_ISOLATE
 30

	)

197 
	#IPV6_RECVERR_RFC4884
 31

	)

198 
	#IPV6_IPSEC_POLICY
 34

	)

199 
	#IPV6_XFRM_POLICY
 35

	)

200 
	#IPV6_HDRINCL
 36

	)

203 
	#IPV6_RECVPKTINFO
 49

	)

204 
	#IPV6_PKTINFO
 50

	)

205 
	#IPV6_RECVHOPLIMIT
 51

	)

206 
	#IPV6_HOPLIMIT
 52

	)

207 
	#IPV6_RECVHOPOPTS
 53

	)

208 
	#IPV6_HOPOPTS
 54

	)

209 
	#IPV6_RTHDRDSTOPTS
 55

	)

210 
	#IPV6_RECVRTHDR
 56

	)

211 
	#IPV6_RTHDR
 57

	)

212 
	#IPV6_RECVDSTOPTS
 58

	)

213 
	#IPV6_DSTOPTS
 59

	)

214 
	#IPV6_RECVPATHMTU
 60

	)

215 
	#IPV6_PATHMTU
 61

	)

216 
	#IPV6_DONTFRAG
 62

	)

219 
	#IPV6_RECVTCLASS
 66

	)

220 
	#IPV6_TCLASS
 67

	)

222 
	#IPV6_AUTOFLOWLABEL
 70

	)

225 
	#IPV6_ADDR_PREFERENCES
 72

	)

228 
	#IPV6_MINHOPCOUNT
 73

	)

230 
	#IPV6_ORIGDSTADDR
 74

	)

231 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

232 
	#IPV6_TRANSPARENT
 75

	)

233 
	#IPV6_UNICAST_IF
 76

	)

234 
	#IPV6_RECVFRAGSIZE
 77

	)

235 
	#IPV6_FREEBIND
 78

	)

238 #i‡!
__USE_KERNEL_IPV6_DEFS


239 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

240 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

242 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

243 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

246 
	#IPV6_PMTUDISC_DONT
 0

	)

247 
	#IPV6_PMTUDISC_WANT
 1

	)

248 
	#IPV6_PMTUDISC_DO
 2

	)

249 
	#IPV6_PMTUDISC_PROBE
 3

	)

250 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

251 
	#IPV6_PMTUDISC_OMIT
 5

	)

254 
	#SOL_IPV6
 41

	)

255 
	#SOL_ICMPV6
 58

	)

258 
	#IPV6_RTHDR_LOOSE
 0

	)

259 
	#IPV6_RTHDR_STRICT
 1

	)

261 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	~<bôs/±hªad_°ack_mö-dy«mic.h
>

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_SHARED_VALIDATE
 0x03

	)

47 
	#MAP_TYPE
 0x0‡

	)

51 
	#MAP_FIXED
 0x10

	)

52 #ifde‡
__USE_MISC


53 
	#MAP_FILE
 0

	)

54 #ifde‡
__MAP_ANONYMOUS


55 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

57 
	#MAP_ANONYMOUS
 0x20

	)

59 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

61 
	#MAP_HUGE_SHIFT
 26

	)

62 
	#MAP_HUGE_MASK
 0x3f

	)

66 
	#MS_ASYNC
 1

	)

67 
	#MS_SYNC
 4

	)

68 
	#MS_INVALIDATE
 2

	)

71 #ifde‡
__USE_MISC


72 
	#MADV_NORMAL
 0

	)

73 
	#MADV_RANDOM
 1

	)

74 
	#MADV_SEQUENTIAL
 2

	)

75 
	#MADV_WILLNEED
 3

	)

76 
	#MADV_DONTNEED
 4

	)

77 
	#MADV_FREE
 8

	)

78 
	#MADV_REMOVE
 9

	)

79 
	#MADV_DONTFORK
 10

	)

80 
	#MADV_DOFORK
 11

	)

81 
	#MADV_MERGEABLE
 12

	)

82 
	#MADV_UNMERGEABLE
 13

	)

83 
	#MADV_HUGEPAGE
 14

	)

84 
	#MADV_NOHUGEPAGE
 15

	)

85 
	#MADV_DONTDUMP
 16

	)

87 
	#MADV_DODUMP
 17

	)

88 
	#MADV_WIPEONFORK
 18

	)

89 
	#MADV_KEEPONFORK
 19

	)

90 
	#MADV_COLD
 20

	)

91 
	#MADV_PAGEOUT
 21

	)

92 
	#MADV_POPULATE_READ
 22

	)

94 
	#MADV_POPULATE_WRITE
 23

	)

96 
	#MADV_HWPOISON
 100

	)

100 #ifde‡
__USE_XOPEN2K


101 
	#POSIX_MADV_NORMAL
 0

	)

102 
	#POSIX_MADV_RANDOM
 1

	)

103 
	#POSIX_MADV_SEQUENTIAL
 2

	)

104 
	#POSIX_MADV_WILLNEED
 3

	)

105 
	#POSIX_MADV_DONTNEED
 4

	)

109 #i‚de‡
MCL_CURRENT


110 
	#MCL_CURRENT
 1

	)

111 
	#MCL_FUTURE
 2

	)

113 
	#MCL_ONFAULT
 4

	)

117 
	~<bôs/mm™-sh¨ed.h
>

	@/usr/include/bits/mman-map-flags-generic.h

19 #i‚de‡
_SYS_MMAN_H


28 #ifde‡
__USE_MISC


29 
	#MAP_GROWSDOWN
 0x00100

	)

30 
	#MAP_DENYWRITE
 0x00800

	)

31 
	#MAP_EXECUTABLE
 0x01000

	)

32 
	#MAP_LOCKED
 0x02000

	)

33 
	#MAP_NORESERVE
 0x04000

	)

34 
	#MAP_POPULATE
 0x08000

	)

35 
	#MAP_NONBLOCK
 0x10000

	)

36 
	#MAP_STACK
 0x20000

	)

37 
	#MAP_HUGETLB
 0x40000

	)

38 
	#MAP_SYNC
 0x80000

	)

40 
	#MAP_FIXED_NOREPLACE
 0x100000

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


25 
	#__FD_ZERO
(
s
) \

27 
__i
; \

28 
fd_£t
 *
__¨r
 = (
s
); \

29 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

30 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

31 } 0)

	)

32 
	#__FD_SET
(
d
, 
s
) \

33 ((Ë(
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
(
d
)] |
	`__FD_MASK
(d)))

	)

34 
	#__FD_CLR
(
d
, 
s
) \

35 ((Ë(
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
(
d
)] &~
	`__FD_MASK
(d)))

	)

36 
	#__FD_ISSET
(
d
, 
s
) \

37 ((
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_BITS_SIGACTION_H


20 
	#_BITS_SIGACTION_H
 1

	)

22 #i‚de‡
_SIGNAL_H


27 
	ssiga˘i⁄


30 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


34 
__sigh™dÀr_t
 
	mß_h™dÀr
;

36 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

38 
	m__siga˘i⁄_h™dÀr
;

39 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

40 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

42 
__sigh™dÀr_t
 
	mß_h™dÀr
;

46 
__sig£t_t
 
	mß_mask
;

49 
	mß_Êags
;

52 (*
	mß_ª°‹î
) ();

56 
	#SA_NOCLDSTOP
 1

	)

57 
	#SA_NOCLDWAIT
 2

	)

58 
	#SA_SIGINFO
 4

	)

60 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


61 
	#SA_ONSTACK
 0x08000000

	)

63 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


64 
	#SA_RESTART
 0x10000000

	)

65 
	#SA_NODEFER
 0x40000000

	)

67 
	#SA_RESETHAND
 0x80000000

	)

69 #ifde‡
__USE_MISC


70 
	#SA_INTERRUPT
 0x20000000

	)

73 
	#SA_NOMASK
 
SA_NODEFER


	)

74 
	#SA_ONESHOT
 
SA_RESETHAND


	)

75 
	#SA_STACK
 
SA_ONSTACK


	)

79 
	#SIG_BLOCK
 0

	)

80 
	#SIG_UNBLOCK
 1

	)

81 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	~<bôs/ty≥s.h
>

27 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

28 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

29 
	#FP_XSTATE_MAGIC2_SIZE
  (
FP_XSTATE_MAGIC2
)

	)

31 
	s_Âx_sw_byãs


33 
__uöt32_t
 
	mmagic1
;

34 
__uöt32_t
 
	mexãnded_size
;

35 
__uöt64_t
 
	mx°©e_bv
;

36 
__uöt32_t
 
	mx°©e_size
;

37 
__uöt32_t
 
	m__glibc_ª£rved1
[7];

40 
	s_Âªg


42 
	msignifiˇnd
[4];

43 
	mexp⁄ít
;

46 
	s_Âxªg


48 
	msignifiˇnd
[4];

49 
	mexp⁄ít
;

50 
	m__glibc_ª£rved1
[3];

53 
	s_xmmªg


55 
__uöt32_t
 
	mñemít
[4];

60 #i‚de‡
__x86_64__


62 
	s_Â°©e


65 
__uöt32_t
 
	mcw
;

66 
__uöt32_t
 
	msw
;

67 
__uöt32_t
 
	mèg
;

68 
__uöt32_t
 
	mùoff
;

69 
__uöt32_t
 
	mcs£l
;

70 
__uöt32_t
 
	md©aoff
;

71 
__uöt32_t
 
	md©a£l
;

72 
_Âªg
 
	m_°
[8];

73 
	m°©us
;

74 
	mmagic
;

77 
__uöt32_t
 
	m_fx§_ív
[6];

78 
__uöt32_t
 
	mmxc§
;

79 
__uöt32_t
 
	m__glibc_ª£rved1
;

80 
_Âxªg
 
	m_fx§_°
[8];

81 
_xmmªg
 
	m_xmm
[8];

82 
__uöt32_t
 
	m__glibc_ª£rved2
[56];

85 #i‚de‡
sigc⁄ãxt_°ru˘


90 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

93 
	#X86_FXSR_MAGIC
 0x0000

	)

95 
	ssigc⁄ãxt


97 
	mgs
, 
	m__gsh
;

98 
	mfs
, 
	m__fsh
;

99 
	mes
, 
	m__esh
;

100 
	mds
, 
	m__dsh
;

101 
	medi
;

102 
	mesi
;

103 
	mebp
;

104 
	me•
;

105 
	mebx
;

106 
	medx
;

107 
	mecx
;

108 
	móx
;

109 
	må≠no
;

110 
	mîr
;

111 
	meù
;

112 
	mcs
, 
	m__csh
;

113 
	meÊags
;

114 
	me•_©_sig«l
;

115 
	mss
, 
	m__ssh
;

116 
_Â°©e
 * 
	mÂ°©e
;

117 
	mﬁdmask
;

118 
	m¸2
;

123 
	s_Â°©e


126 
__uöt16_t
 
	mcwd
;

127 
__uöt16_t
 
	mswd
;

128 
__uöt16_t
 
	m·w
;

129 
__uöt16_t
 
	mf›
;

130 
__uöt64_t
 
	mrù
;

131 
__uöt64_t
 
	mrdp
;

132 
__uöt32_t
 
	mmxc§
;

133 
__uöt32_t
 
	mmx¸_mask
;

134 
_Âxªg
 
	m_°
[8];

135 
_xmmªg
 
	m_xmm
[16];

136 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

139 
	ssigc⁄ãxt


141 
__uöt64_t
 
	mr8
;

142 
__uöt64_t
 
	mr9
;

143 
__uöt64_t
 
	mr10
;

144 
__uöt64_t
 
	mr11
;

145 
__uöt64_t
 
	mr12
;

146 
__uöt64_t
 
	mr13
;

147 
__uöt64_t
 
	mr14
;

148 
__uöt64_t
 
	mr15
;

149 
__uöt64_t
 
	mrdi
;

150 
__uöt64_t
 
	mrsi
;

151 
__uöt64_t
 
	mrbp
;

152 
__uöt64_t
 
	mrbx
;

153 
__uöt64_t
 
	mrdx
;

154 
__uöt64_t
 
	møx
;

155 
__uöt64_t
 
	mrcx
;

156 
__uöt64_t
 
	mr•
;

157 
__uöt64_t
 
	mrù
;

158 
__uöt64_t
 
	meÊags
;

159 
	mcs
;

160 
	mgs
;

161 
	mfs
;

162 
	m__∑d0
;

163 
__uöt64_t
 
	mîr
;

164 
__uöt64_t
 
	må≠no
;

165 
__uöt64_t
 
	mﬁdmask
;

166 
__uöt64_t
 
	m¸2
;

167 
__exãnsi⁄__
 union

169 
_Â°©e
 * 
	mÂ°©e
;

170 
__uöt64_t
 
	m__Â°©e_w‹d
;

172 
__uöt64_t
 
	m__ª£rved1
 [8];

177 
	s_xßve_hdr


179 
__uöt64_t
 
	mx°©e_bv
;

180 
__uöt64_t
 
	m__glibc_ª£rved1
[2];

181 
__uöt64_t
 
	m__glibc_ª£rved2
[5];

184 
	s_ymmh_°©e


186 
__uöt32_t
 
	mymmh_•a˚
[64];

189 
	s_x°©e


191 
_Â°©e
 
	mÂ°©e
;

192 
_xßve_hdr
 
	mx°©e_hdr
;

193 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/sigevent-consts.h

19 #i‚de‡
_BITS_SIGEVENT_CONSTS_H


20 
	#_BITS_SIGEVENT_CONSTS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_AIO_H


29 
	mSIGEV_SIGNAL
 = 0,

30 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

31 
	mSIGEV_NONE
,

32 
	#SIGEV_NONE
 
SIGEV_NONE


	)

33 
	mSIGEV_THREAD
,

34 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

36 
	mSIGEV_THREAD_ID
 = 4

38 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/siginfo-consts.h

19 #i‚de‡
_BITS_SIGINFO_CONSTS_H


20 
	#_BITS_SIGINFO_CONSTS_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	~<bôs/sigöfo-¨ch.h
>

29 #i‚de‡
__SI_ASYNCIO_AFTER_SIGIO


30 
	#__SI_ASYNCIO_AFTER_SIGIO
 1

	)

37 
	mSI_ASYNCNL
 = -60,

38 
	mSI_DETHREAD
 = -7,

40 
	mSI_TKILL
,

41 
	mSI_SIGIO
,

42 #i‡
__SI_ASYNCIO_AFTER_SIGIO


43 
	mSI_ASYNCIO
,

44 
	mSI_MESGQ
,

45 
	mSI_TIMER
,

47 
	mSI_MESGQ
,

48 
	mSI_TIMER
,

49 
	mSI_ASYNCIO
,

51 
	mSI_QUEUE
,

52 
	mSI_USER
,

53 
	mSI_KERNEL
 = 0x80

55 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

56 
	#SI_DETHREAD
 
SI_DETHREAD


	)

57 
	#SI_TKILL
 
SI_TKILL


	)

58 
	#SI_SIGIO
 
SI_SIGIO


	)

59 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

60 
	#SI_MESGQ
 
SI_MESGQ


	)

61 
	#SI_TIMER
 
SI_TIMER


	)

62 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

63 
	#SI_QUEUE
 
SI_QUEUE


	)

64 
	#SI_USER
 
SI_USER


	)

65 
	#SI_KERNEL
 
SI_KERNEL


	)

69 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


73 
	mILL_ILLOPC
 = 1,

74 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

75 
	mILL_ILLOPN
,

76 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

77 
	mILL_ILLADR
,

78 
	#ILL_ILLADR
 
ILL_ILLADR


	)

79 
	mILL_ILLTRP
,

80 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

81 
	mILL_PRVOPC
,

82 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

83 
	mILL_PRVREG
,

84 
	#ILL_PRVREG
 
ILL_PRVREG


	)

85 
	mILL_COPROC
,

86 
	#ILL_COPROC
 
ILL_COPROC


	)

87 
	mILL_BADSTK
,

88 
	#ILL_BADSTK
 
ILL_BADSTK


	)

89 
	mILL_BADIADDR


90 
	#ILL_BADIADDR
 
ILL_BADIADDR


	)

96 
	mFPE_INTDIV
 = 1,

97 
	#FPE_INTDIV
 
FPE_INTDIV


	)

98 
	mFPE_INTOVF
,

99 
	#FPE_INTOVF
 
FPE_INTOVF


	)

100 
	mFPE_FLTDIV
,

101 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

102 
	mFPE_FLTOVF
,

103 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

104 
	mFPE_FLTUND
,

105 
	#FPE_FLTUND
 
FPE_FLTUND


	)

106 
	mFPE_FLTRES
,

107 
	#FPE_FLTRES
 
FPE_FLTRES


	)

108 
	mFPE_FLTINV
,

109 
	#FPE_FLTINV
 
FPE_FLTINV


	)

110 
	mFPE_FLTSUB
,

111 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

112 
	mFPE_FLTUNK
 = 14,

113 
	#FPE_FLTUNK
 
FPE_FLTUNK


	)

114 
	mFPE_CONDTRAP


115 
	#FPE_CONDTRAP
 
FPE_CONDTRAP


	)

121 
	mSEGV_MAPERR
 = 1,

122 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

123 
	mSEGV_ACCERR
,

124 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

125 
	mSEGV_BNDERR
,

126 
	#SEGV_BNDERR
 
SEGV_BNDERR


	)

127 
	mSEGV_PKUERR
,

128 
	#SEGV_PKUERR
 
SEGV_PKUERR


	)

129 
	mSEGV_ACCADI
,

130 
	#SEGV_ACCADI
 
SEGV_ACCADI


	)

131 
	mSEGV_ADIDERR
,

132 
	#SEGV_ADIDERR
 
SEGV_ADIDERR


	)

133 
	mSEGV_ADIPERR
,

134 
	#SEGV_ADIPERR
 
SEGV_ADIPERR


	)

135 
	mSEGV_MTEAERR
,

136 
	#SEGV_MTEAERR
 
SEGV_MTEAERR


	)

137 
	mSEGV_MTESERR


138 
	#SEGV_MTESERR
 
SEGV_MTESERR


	)

144 
	mBUS_ADRALN
 = 1,

145 
	#BUS_ADRALN
 
BUS_ADRALN


	)

146 
	mBUS_ADRERR
,

147 
	#BUS_ADRERR
 
BUS_ADRERR


	)

148 
	mBUS_OBJERR
,

149 
	#BUS_OBJERR
 
BUS_OBJERR


	)

150 
	mBUS_MCEERR_AR
,

151 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

152 
	mBUS_MCEERR_AO


153 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

157 #ifde‡
__USE_XOPEN_EXTENDED


161 
	mTRAP_BRKPT
 = 1,

162 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

163 
	mTRAP_TRACE
,

164 
	#TRAP_TRACE
 
TRAP_TRACE


	)

165 
	mTRAP_BRANCH
,

166 
	#TRAP_BRANCH
 
TRAP_BRANCH


	)

167 
	mTRAP_HWBKPT
,

168 
	#TRAP_HWBKPT
 
TRAP_HWBKPT


	)

169 
	mTRAP_UNK


170 
	#TRAP_UNK
 
TRAP_UNK


	)

174 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


178 
	mCLD_EXITED
 = 1,

179 
	#CLD_EXITED
 
CLD_EXITED


	)

180 
	mCLD_KILLED
,

181 
	#CLD_KILLED
 
CLD_KILLED


	)

182 
	mCLD_DUMPED
,

183 
	#CLD_DUMPED
 
CLD_DUMPED


	)

184 
	mCLD_TRAPPED
,

185 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

186 
	mCLD_STOPPED
,

187 
	#CLD_STOPPED
 
CLD_STOPPED


	)

188 
	mCLD_CONTINUED


189 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

195 
	mPOLL_IN
 = 1,

196 
	#POLL_IN
 
POLL_IN


	)

197 
	mPOLL_OUT
,

198 
	#POLL_OUT
 
POLL_OUT


	)

199 
	mPOLL_MSG
,

200 
	#POLL_MSG
 
POLL_MSG


	)

201 
	mPOLL_ERR
,

202 
	#POLL_ERR
 
POLL_ERR


	)

203 
	mPOLL_PRI
,

204 
	#POLL_PRI
 
POLL_PRI


	)

205 
	mPOLL_HUP


206 
	#POLL_HUP
 
POLL_HUP


	)

212 #ifde‡
__USE_GNU


213 
	~<bôs/sigöfo-c⁄°s-¨ch.h
>

	@/usr/include/bits/signal_ext.h

19 #i‚de‡
_SIGNAL_H


23 #ifde‡
__USE_GNU


29 
tgkûl
 (
__pid_t
 
__tgid
, __pid_à
__tid
, 
__sig«l
);

	@/usr/include/bits/signum-generic.h

19 #i‚def 
_BITS_SIGNUM_GENERIC_H


20 
	#_BITS_SIGNUM_GENERIC_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

29 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

30 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

32 #ifde‡
__USE_XOPEN


33 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

48 
	#SIGINT
 2

	)

49 
	#SIGILL
 4

	)

50 
	#SIGABRT
 6

	)

51 
	#SIGFPE
 8

	)

52 
	#SIGSEGV
 11

	)

53 
	#SIGTERM
 15

	)

56 
	#SIGHUP
 1

	)

57 
	#SIGQUIT
 3

	)

58 
	#SIGTRAP
 5

	)

59 
	#SIGKILL
 9

	)

60 
	#SIGPIPE
 13

	)

61 
	#SIGALRM
 14

	)

64 
	#SIGIO
 
SIGPOLL


	)

65 
	#SIGIOT
 
SIGABRT


	)

66 
	#SIGCLD
 
SIGCHLD


	)

76 
	~<bôs/signum-¨ch.h
>

79 
	#_NSIG
 (
__SIGRTMAX
 + 1)

	)

	@/usr/include/bits/sigstack.h

19 #i‚de‡
_BITS_SIGSTACK_H


20 
	#_BITS_SIGSTACK_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


27 
	#MINSIGSTKSZ
 2048

	)

30 
	#SIGSTKSZ
 8192

	)

	@/usr/include/bits/sigstksz.h

19 #i‚de‡
_SIGNAL_H


23 #i‡
deföed
 
__USE_DYNAMIC_STACK_SIZE
 && __USE_DYNAMIC_STACK_SIZE

24 
	~<uni°d.h
>

27 #unde‡
SIGSTKSZ


28 
	#SIGSTKSZ
 
	`sysc⁄f
 (
_SC_SIGSTKSZ
)

	)

31 #unde‡
MINSIGSTKSZ


32 
	#MINSIGSTKSZ
 
SIGSTKSZ


	)

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/ty≥s/__sig£t_t.h
>

31 
	$±hªad_sigmask
 (
__how
,

32 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket-constants.h

19 #i‚de‡
_SYS_SOCKET_H


23 
	~<bôs/timesize.h
>

25 
	#SOL_SOCKET
 1

	)

26 
	#SO_ACCEPTCONN
 30

	)

27 
	#SO_BROADCAST
 6

	)

28 
	#SO_DONTROUTE
 5

	)

29 
	#SO_ERROR
 4

	)

30 
	#SO_KEEPALIVE
 9

	)

31 
	#SO_LINGER
 13

	)

32 
	#SO_OOBINLINE
 10

	)

33 
	#SO_RCVBUF
 8

	)

34 
	#SO_RCVLOWAT
 18

	)

35 
	#SO_REUSEADDR
 2

	)

36 
	#SO_SNDBUF
 7

	)

37 
	#SO_SNDLOWAT
 19

	)

38 
	#SO_TYPE
 3

	)

40 #i‡(
__TIMESIZE
 =64 && 
__WORDSIZE
 == 32 \

41 && (!
deföed
 
	g__SYSCALL_WORDSIZE
 || __SYSCALL_WORDSIZE == 32))

42 
	#SO_RCVTIMEO
 66

	)

43 
	#SO_SNDTIMEO
 67

	)

44 
	#SO_TIMESTAMP
 63

	)

45 
	#SO_TIMESTAMPNS
 64

	)

46 
	#SO_TIMESTAMPING
 65

	)

48 #i‡
__TIMESIZE
 == 64

49 
	#SO_RCVTIMEO
 20

	)

50 
	#SO_SNDTIMEO
 21

	)

51 
	#SO_TIMESTAMP
 29

	)

52 
	#SO_TIMESTAMPNS
 35

	)

53 
	#SO_TIMESTAMPING
 37

	)

55 
	#SO_RCVTIMEO_OLD
 20

	)

56 
	#SO_SNDTIMEO_OLD
 21

	)

57 
	#SO_RCVTIMEO_NEW
 66

	)

58 
	#SO_SNDTIMEO_NEW
 67

	)

60 
	#SO_TIMESTAMP_OLD
 29

	)

61 
	#SO_TIMESTAMPNS_OLD
 35

	)

62 
	#SO_TIMESTAMPING_OLD
 37

	)

63 
	#SO_TIMESTAMP_NEW
 63

	)

64 
	#SO_TIMESTAMPNS_NEW
 64

	)

65 
	#SO_TIMESTAMPING_NEW
 65

	)

67 #ifde‡
__USE_TIME_BITS64


68 
	#SO_RCVTIMEO
 
SO_RCVTIMEO_NEW


	)

69 
	#SO_SNDTIMEO
 
SO_SNDTIMEO_NEW


	)

70 
	#SO_TIMESTAMP
 
SO_TIMESTAMP_NEW


	)

71 
	#SO_TIMESTAMPNS
 
SO_TIMESTAMPNS_NEW


	)

72 
	#SO_TIMESTAMPING
 
SO_TIMESTAMPING_NEW


	)

74 
	#SO_RCVTIMEO
 
SO_RCVTIMEO_OLD


	)

75 
	#SO_SNDTIMEO
 
SO_SNDTIMEO_OLD


	)

76 
	#SO_TIMESTAMP
 
SO_TIMESTAMP_OLD


	)

77 
	#SO_TIMESTAMPNS
 
SO_TIMESTAMPNS_OLD


	)

78 
	#SO_TIMESTAMPING
 
SO_TIMESTAMPING_OLD


	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/ss_flags.h

19 #i‚de‡
_BITS_SS_FLAGS_H


20 
	#_BITS_SS_FLAGS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


29 
	mSS_ONSTACK
 = 1,

30 
	#SS_ONSTACK
 
SS_ONSTACK


	)

31 
	mSS_DISABLE


32 
	#SS_DISABLE
 
SS_DISABLE


	)

	@/usr/include/bits/statfs.h

18 #i‚de‡
_SYS_STATFS_H


22 
	~<bôs/ty≥s.h
>

24 
	s°©fs


26 
__fsw‹d_t
 
	mf_ty≥
;

27 
__fsw‹d_t
 
	mf_bsize
;

28 #i‚de‡
__USE_FILE_OFFSET64


29 
__fsblk˙t_t
 
	mf_blocks
;

30 
__fsblk˙t_t
 
	mf_b‰ì
;

31 
__fsblk˙t_t
 
	mf_bavaû
;

32 
__fsfû˙t_t
 
	mf_fûes
;

33 
__fsfû˙t_t
 
	mf_f‰ì
;

35 
__fsblk˙t64_t
 
	mf_blocks
;

36 
__fsblk˙t64_t
 
	mf_b‰ì
;

37 
__fsblk˙t64_t
 
	mf_bavaû
;

38 
__fsfû˙t64_t
 
	mf_fûes
;

39 
__fsfû˙t64_t
 
	mf_f‰ì
;

41 
__fsid_t
 
	mf_fsid
;

42 
__fsw‹d_t
 
	mf_«mñí
;

43 
__fsw‹d_t
 
	mf_‰size
;

44 
__fsw‹d_t
 
	mf_Êags
;

45 
__fsw‹d_t
 
	mf_•¨e
[4];

48 #ifde‡
__USE_LARGEFILE64


49 
	s°©fs64


51 
__fsw‹d_t
 
	mf_ty≥
;

52 
__fsw‹d_t
 
	mf_bsize
;

53 
__fsblk˙t64_t
 
	mf_blocks
;

54 
__fsblk˙t64_t
 
	mf_b‰ì
;

55 
__fsblk˙t64_t
 
	mf_bavaû
;

56 
__fsfû˙t64_t
 
	mf_fûes
;

57 
__fsfû˙t64_t
 
	mf_f‰ì
;

58 
__fsid_t
 
	mf_fsid
;

59 
__fsw‹d_t
 
	mf_«mñí
;

60 
__fsw‹d_t
 
	mf_‰size
;

61 
__fsw‹d_t
 
	mf_Êags
;

62 
__fsw‹d_t
 
	mf_•¨e
[4];

67 
	#_STATFS_F_NAMELEN


	)

68 
	#_STATFS_F_FRSIZE


	)

69 
	#_STATFS_F_FLAGS


	)

	@/usr/include/bits/statx-generic.h

21 #i‚de‡
_SYS_STAT_H


22 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
°©x
-
gíîic
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

25 
	~<bôs/ty≥s/°ru˘_°©x_time°amp.h
>

26 
	~<bôs/ty≥s/°ru˘_°©x.h
>

28 #i‚de‡
STATX_TYPE


29 
	#STATX_TYPE
 0x0001U

	)

30 
	#STATX_MODE
 0x0002U

	)

31 
	#STATX_NLINK
 0x0004U

	)

32 
	#STATX_UID
 0x0008U

	)

33 
	#STATX_GID
 0x0010U

	)

34 
	#STATX_ATIME
 0x0020U

	)

35 
	#STATX_MTIME
 0x0040U

	)

36 
	#STATX_CTIME
 0x0080U

	)

37 
	#STATX_INO
 0x0100U

	)

38 
	#STATX_SIZE
 0x0200U

	)

39 
	#STATX_BLOCKS
 0x0400U

	)

40 
	#STATX_BASIC_STATS
 0x07ffU

	)

41 
	#STATX_ALL
 0x0fffU

	)

42 
	#STATX_BTIME
 0x0800U

	)

43 
	#STATX_MNT_ID
 0x1000U

	)

44 
	#STATX__RESERVED
 0x80000000U

	)

46 
	#STATX_ATTR_COMPRESSED
 0x0004

	)

47 
	#STATX_ATTR_IMMUTABLE
 0x0010

	)

48 
	#STATX_ATTR_APPEND
 0x0020

	)

49 
	#STATX_ATTR_NODUMP
 0x0040

	)

50 
	#STATX_ATTR_ENCRYPTED
 0x0800

	)

51 
	#STATX_ATTR_AUTOMOUNT
 0x1000

	)

52 
	#STATX_ATTR_MOUNT_ROOT
 0x2000

	)

53 
	#STATX_ATTR_VERITY
 0x100000

	)

54 
	#STATX_ATTR_DAX
 0x200000

	)

57 
__BEGIN_DECLS


60 
	$°©x
 (
__dúfd
, c⁄° *
__ª°ri˘
 
__∑th
, 
__Êags
,

61 
__mask
, 
°©x
 *
__ª°ri˘
 
__buf
)

62 
__THROW
 
	`__n⁄nuŒ
 ((2, 5));

64 
__END_DECLS


	@/usr/include/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
,

26 
	`__glibc_objsize0
 (
__de°
));

27 
	}
}

29 
__f‹tify_fun˘i⁄
 

30 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

32 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
,

33 
	`__glibc_objsize0
 (
__de°
));

34 
	}
}

	@/usr/include/bits/struct_stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STRUCT_STAT_H


24 
	#_BITS_STRUCT_STAT_H
 1

	)

26 
	s°©


28 #ifde‡
__USE_TIME_BITS64


29 
	~<bôs/°ru˘_°©_time64_hñ≥r.h
>

31 
__dev_t
 
	m°_dev
;

32 #i‚de‡
__x86_64__


33 
	m__∑d1
;

35 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


36 
__öo_t
 
	m°_öo
;

38 
__öo_t
 
	m__°_öo
;

40 #i‚de‡
__x86_64__


41 
__mode_t
 
	m°_mode
;

42 
__∆ök_t
 
	m°_∆ök
;

44 
__∆ök_t
 
	m°_∆ök
;

45 
__mode_t
 
	m°_mode
;

47 
__uid_t
 
	m°_uid
;

48 
__gid_t
 
	m°_gid
;

49 #ifde‡
__x86_64__


50 
	m__∑d0
;

52 
__dev_t
 
	m°_rdev
;

53 #i‚de‡
__x86_64__


54 
	m__∑d2
;

56 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


57 
__off_t
 
	m°_size
;

59 
__off64_t
 
	m°_size
;

61 
__blksize_t
 
	m°_blksize
;

62 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


63 
__blk˙t_t
 
	m°_blocks
;

65 
__blk˙t64_t
 
	m°_blocks
;

67 #ifde‡
__USE_XOPEN2K8


74 
time•ec
 
	m°_©im
;

75 
time•ec
 
	m°_mtim
;

76 
time•ec
 
	m°_˘im
;

77 
	#°_©ime
 
°_©im
.
tv_£c


	)

78 
	#°_mtime
 
°_mtim
.
tv_£c


	)

79 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

81 
__time_t
 
	m°_©ime
;

82 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

83 
__time_t
 
	m°_mtime
;

84 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

85 
__time_t
 
	m°_˘ime
;

86 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

88 #ifde‡
__x86_64__


89 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

91 #i‚de‡
__USE_FILE_OFFSET64


92 
	m__glibc_ª£rved4
;

93 
	m__glibc_ª£rved5
;

95 
__öo64_t
 
	m°_öo
;

101 #ifde‡
__USE_LARGEFILE64


103 
	s°©64


105 #ifde‡
__USE_TIME_BITS64


106 
	~<bôs/°ru˘_°©_time64_hñ≥r.h
>

108 
__dev_t
 
	m°_dev
;

109 #ifde‡
__x86_64__


110 
__öo64_t
 
	m°_öo
;

111 
__∆ök_t
 
	m°_∆ök
;

112 
__mode_t
 
	m°_mode
;

114 
	m__∑d1
;

115 
__öo_t
 
	m__°_öo
;

116 
__mode_t
 
	m°_mode
;

117 
__∆ök_t
 
	m°_∆ök
;

119 
__uid_t
 
	m°_uid
;

120 
__gid_t
 
	m°_gid
;

121 #ifde‡
__x86_64__


122 
	m__∑d0
;

123 
__dev_t
 
	m°_rdev
;

124 
__off_t
 
	m°_size
;

126 
__dev_t
 
	m°_rdev
;

127 
	m__∑d2
;

128 
__off64_t
 
	m°_size
;

130 
__blksize_t
 
	m°_blksize
;

131 
__blk˙t64_t
 
	m°_blocks
;

132 #ifde‡
__USE_XOPEN2K8


139 
time•ec
 
	m°_©im
;

140 
time•ec
 
	m°_mtim
;

141 
time•ec
 
	m°_˘im
;

143 
__time_t
 
	m°_©ime
;

144 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

145 
__time_t
 
	m°_mtime
;

146 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

147 
__time_t
 
	m°_˘ime
;

148 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

150 #ifde‡
__x86_64__


151 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

153 
__öo64_t
 
	m°_öo
;

160 
	#_STATBUF_ST_BLKSIZE


	)

161 
	#_STATBUF_ST_RDEV


	)

163 
	#_STATBUF_ST_NSEC


	)

	@/usr/include/bits/thread-shared-types.h

19 #i‚de‡
_THREAD_SHARED_TYPES_H


20 
	#_THREAD_SHARED_TYPES_H
 1

	)

44 
	~<bôs/±hªadty≥s-¨ch.h
>

46 
	~<bôs/©omic_wide_cou¡î.h
>

51 
	s__±hªad_öã∫Æ_li°


53 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

54 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

55 } 
	t__±hªad_li°_t
;

57 
	s__±hªad_öã∫Æ_¶i°


59 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

60 } 
	t__±hªad_¶i°_t
;

76 
	~<bôs/°ru˘_muãx.h
>

89 
	~<bôs/°ru˘_rwlock.h
>

94 
	s__±hªad_c⁄d_s


96 
__©omic_wide_cou¡î
 
	m__w£q
;

97 
__©omic_wide_cou¡î
 
	m__g1_°¨t
;

98 
	m__g_ªfs
[2] 
	m__LOCK_ALIGNMENT
;

99 
	m__g_size
[2];

100 
	m__g1_‹ig_size
;

101 
	m__wªfs
;

102 
	m__g_sig«ls
[2];

105 
	t__tss_t
;

106 
	t__thrd_t
;

110 
__d©a
 
	m__ONCE_ALIGNMENT
;

111 } 
	t__⁄˚_Êag
;

113 
	#__ONCE_FLAG_INIT
 { 0 }

	)

	@/usr/include/bits/time64.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TIME64_H


24 
	#_BITS_TIME64_H
 1

	)

28 #i‡
__TIMESIZE
 == 64

30 
	#__TIME64_T_TYPE
 
__TIME_T_TYPE


	)

33 
	#__TIME64_T_TYPE
 
__SQUAD_TYPE


	)

	@/usr/include/bits/timesize.h

19 
	~<bôs/w‹dsize.h
>

21 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


23 
	#__TIMESIZE
 64

	)

26 
	#__TIMESIZE
 
__WORDSIZE


	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

22 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

26 
	stimex


28 #i‡
deföed
 
__USE_TIME_BITS64
 || (
__TIMESIZE
 =64 && 
__WORDSIZE
 == 32)

29 
	mmodes
;

31 
	moff£t
;

32 
	m‰eq
;

33 
	mmaxîr‹
;

34 
	me°îr‹
;

35 
	m°©us
;

37 
	mc⁄°™t
;

38 
	m¥ecisi⁄
;

39 
	mtﬁî™˚
;

40 
timevÆ
 
	mtime
;

41 
	mtick
;

42 
	mµs‰eq
;

43 
	mjôãr
;

44 
	mshi·
;

46 
	m°abû
;

47 
	mjô˙t
;

48 
	mˇl˙t
;

49 
	mîr˙t
;

50 
	m°b˙t
;

52 
	mèi
;

58 
	mmodes
;

59 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

60 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

61 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

62 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

63 
	m°©us
;

64 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

65 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

66 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

67 
timevÆ
 
	mtime
;

68 
__sysˇŒ_¶⁄g_t
 
	mtick
;

69 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

70 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

71 
	mshi·
;

72 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

73 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

74 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

75 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

76 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

78 
	mèi
;

88 
	#ADJ_OFFSET
 0x0001

	)

89 
	#ADJ_FREQUENCY
 0x0002

	)

90 
	#ADJ_MAXERROR
 0x0004

	)

91 
	#ADJ_ESTERROR
 0x0008

	)

92 
	#ADJ_STATUS
 0x0010

	)

93 
	#ADJ_TIMECONST
 0x0020

	)

94 
	#ADJ_TAI
 0x0080

	)

95 
	#ADJ_SETOFFSET
 0x0100

	)

96 
	#ADJ_MICRO
 0x1000

	)

97 
	#ADJ_NANO
 0x2000

	)

98 
	#ADJ_TICK
 0x4000

	)

99 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

100 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

103 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

104 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

105 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

106 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

107 
	#MOD_STATUS
 
ADJ_STATUS


	)

108 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

109 
	#MOD_CLKB
 
ADJ_TICK


	)

110 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

111 
	#MOD_TAI
 
ADJ_TAI


	)

112 
	#MOD_MICRO
 
ADJ_MICRO


	)

113 
	#MOD_NANO
 
ADJ_NANO


	)

117 
	#STA_PLL
 0x0001

	)

118 
	#STA_PPSFREQ
 0x0002

	)

119 
	#STA_PPSTIME
 0x0004

	)

120 
	#STA_FLL
 0x0008

	)

122 
	#STA_INS
 0x0010

	)

123 
	#STA_DEL
 0x0020

	)

124 
	#STA_UNSYNC
 0x0040

	)

125 
	#STA_FREQHOLD
 0x0080

	)

127 
	#STA_PPSSIGNAL
 0x0100

	)

128 
	#STA_PPSJITTER
 0x0200

	)

129 
	#STA_PPSWANDER
 0x0400

	)

130 
	#STA_PPSERROR
 0x0800

	)

132 
	#STA_CLOCKERR
 0x1000

	)

133 
	#STA_NANO
 0x2000

	)

134 
	#STA_MODE
 0x4000

	)

135 
	#STA_CLK
 0x8000

	)

138 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 \

139 | 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/types/__locale_t.h

19 #i‚de‡
_BITS_TYPES___LOCALE_T_H


20 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

41 
__loˇÀ_°ru˘
 *
	t__loˇÀ_t
;

	@/usr/include/bits/types/__mbstate_t.h

1 #i‚de‡
____mb°©e_t_deföed


2 
	#____mb°©e_t_deföed
 1

	)

8 #i‚de‡
__WINT_TYPE__


9 
	#__WINT_TYPE__
 

	)

15 
	m__cou¡
;

18 
__WINT_TYPE__
 
	m__wch
;

19 
	m__wchb
[4];

20 } 
	m__vÆue
;

21 } 
	t__mb°©e_t
;

	@/usr/include/bits/types/__sigset_t.h

1 #i‚de‡
____sig£t_t_deföed


2 
	#____sig£t_t_deföed


	)

4 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

7 
	m__vÆ
[
_SIGSET_NWORDS
];

8 } 
	t__sig£t_t
;

	@/usr/include/bits/types/sig_atomic_t.h

1 #i‚de‡
__sig_©omic_t_deföed


2 
	#__sig_©omic_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
__sig_©omic_t
 
	tsig_©omic_t
;

	@/usr/include/bits/types/sigevent_t.h

1 #i‚de‡
__sigevít_t_deföed


2 
	#__sigevít_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SIGEV_MAX_SIZE
 64

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

16 #i‚de‡
__have_±hªad_©å_t


17 
±hªad_©å_t
 
	t±hªad_©å_t
;

18 
	#__have_±hªad_©å_t
 1

	)

22 
	ssigevít


24 
__sigvÆ_t
 
	msigev_vÆue
;

25 
	msigev_signo
;

26 
	msigev_nŸify
;

30 
	m_∑d
[
__SIGEV_PAD_SIZE
];

34 
__pid_t
 
	m_tid
;

38 (*
	m_fun˘i⁄
Ë(
	m__sigvÆ_t
);

39 
±hªad_©å_t
 *
	m_©åibuã
;

40 } 
	m_sigev_thªad
;

41 } 
	m_sigev_un
;

42 } 
	tsigevít_t
;

45 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

46 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

	@/usr/include/bits/types/siginfo_t.h

1 #i‚de‡
__sigöfo_t_deföed


2 
	#__sigöfo_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SI_MAX_SIZE
 128

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

16 
	~<bôs/sigöfo-¨ch.h
>

17 #i‚de‡
__SI_ALIGNMENT


18 
	#__SI_ALIGNMENT


	)

20 #i‚de‡
__SI_BAND_TYPE


21 
	#__SI_BAND_TYPE
 

	)

23 #i‚de‡
__SI_CLOCK_T


24 
	#__SI_CLOCK_T
 
__˛ock_t


	)

26 #i‚de‡
__SI_ERRNO_THEN_CODE


27 
	#__SI_ERRNO_THEN_CODE
 1

	)

29 #i‚de‡
__SI_HAVE_SIGSYS


30 
	#__SI_HAVE_SIGSYS
 1

	)

32 #i‚de‡
__SI_SIGFAULT_ADDL


33 
	#__SI_SIGFAULT_ADDL


	)

38 
	msi_signo
;

39 #i‡
__SI_ERRNO_THEN_CODE


40 
	msi_î∫o
;

42 
	msi_code
;

44 
	msi_code
;

45 
	msi_î∫o
;

47 #i‡
__WORDSIZE
 == 64

48 
	m__∑d0
;

53 
	m_∑d
[
__SI_PAD_SIZE
];

58 
__pid_t
 
	msi_pid
;

59 
__uid_t
 
	msi_uid
;

60 } 
	m_kûl
;

65 
	msi_tid
;

66 
	msi_ovîrun
;

67 
__sigvÆ_t
 
	msi_sigvÆ
;

68 } 
	m_timî
;

73 
__pid_t
 
	msi_pid
;

74 
__uid_t
 
	msi_uid
;

75 
__sigvÆ_t
 
	msi_sigvÆ
;

76 } 
	m_π
;

81 
__pid_t
 
	msi_pid
;

82 
__uid_t
 
	msi_uid
;

83 
	msi_°©us
;

84 
__SI_CLOCK_T
 
	msi_utime
;

85 
__SI_CLOCK_T
 
	msi_°ime
;

86 } 
	m_sigchld
;

91 *
	msi_addr
;

92 
__SI_SIGFAULT_ADDL


93 
	msi_addr_lsb
;

99 *
	m_lowî
;

100 *
	m_uµî
;

101 } 
	m_addr_bnd
;

103 
__uöt32_t
 
	m_pkey
;

104 } 
	m_bounds
;

105 } 
	m_sigÁu…
;

110 
__SI_BAND_TYPE
 
	msi_b™d
;

111 
	msi_fd
;

112 } 
	m_sigpﬁl
;

115 #i‡
__SI_HAVE_SIGSYS


118 *
	m_ˇŒ_addr
;

119 
	m_sysˇŒ
;

120 
	m_¨ch
;

121 } 
	m_sigsys
;

123 } 
	m_sifõlds
;

124 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

128 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

129 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

130 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

131 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

132 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

133 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

134 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

135 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

136 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

137 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

138 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

139 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

140 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_lowî


	)

141 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_uµî


	)

142 
	#si_pkey
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_pkey


	)

143 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

144 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

145 #i‡
__SI_HAVE_SIGSYS


146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

	@/usr/include/bits/types/sigval_t.h

1 #i‚de‡
__sigvÆ_t_deföed


2 
	#__sigvÆ_t_deföed


	)

4 
	~<bôs/ty≥s/__sigvÆ_t.h
>

12 #i‚de‡
__USE_POSIX199309


16 
__sigvÆ_t
 
	tsigvÆ_t
;

	@/usr/include/bits/types/stack_t.h

19 #i‚de‡
__°ack_t_deföed


20 
	#__°ack_t_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

28 *
	mss_•
;

29 
	mss_Êags
;

30 
size_t
 
	mss_size
;

31 } 
	t°ack_t
;

	@/usr/include/bits/types/struct_rusage.h

19 #i‚de‡
__rußge_deföed


20 
	#__rußge_deföed
 1

	)

22 
	~<bôs/ty≥s.h
>

23 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

33 
	srußge


36 
timevÆ
 
	mru_utime
;

38 
timevÆ
 
	mru_°ime
;

40 
__exãnsi⁄__
 union

42 
	mru_maxrss
;

43 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

47 
__exãnsi⁄__
 union

49 
	mru_ixrss
;

50 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

53 
__exãnsi⁄__
 union

55 
	mru_idrss
;

56 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

59 
__exãnsi⁄__
 union

61 
	mru_i§ss
;

62 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

66 
__exãnsi⁄__
 union

68 
	mru_möÊt
;

69 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

72 
__exãnsi⁄__
 union

74 
	mru_majÊt
;

75 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

78 
__exãnsi⁄__
 union

80 
	mru_nsw≠
;

81 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

85 
__exãnsi⁄__
 union

87 
	mru_öblock
;

88 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

91 
__exãnsi⁄__
 union

93 
	mru_oublock
;

94 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

97 
__exãnsi⁄__
 union

99 
	mru_msg¢d
;

100 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

103 
__exãnsi⁄__
 union

105 
	mru_msgrcv
;

106 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

109 
__exãnsi⁄__
 union

111 
	mru_nsig«ls
;

112 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

117 
__exãnsi⁄__
 union

119 
	mru_nvcsw
;

120 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

124 
__exãnsi⁄__
 union

126 
	mru_nivcsw
;

127 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

	@/usr/include/bits/types/struct_sigstack.h

19 #i‚de‡
__sig°ack_deföed


20 
	#__sig°ack_deföed
 1

	)

23 
	ssig°ack


25 *
	mss_•
;

26 
	mss_⁄°ack
;

	@/usr/include/bits/types/struct_timeval.h

1 #i‚de‡
__timevÆ_deföed


2 
	#__timevÆ_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stimevÆ


10 #ifde‡
__USE_TIME_BITS64


11 
__time64_t
 
	mtv_£c
;

12 
__su£c⁄ds64_t
 
	mtv_u£c
;

14 
__time_t
 
	mtv_£c
;

15 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__SUSECONDS64_T_TYPE
 
__SQUAD_TYPE


	)

68 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

69 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

70 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

71 
	#__TIMER_T_TYPE
 *

	)

72 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

73 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

74 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

77 #ifde‡
__x86_64__


81 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

84 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

90 
	#__STATFS_MATCHES_STATFS64
 1

	)

93 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 1

	)

95 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

97 
	#__STATFS_MATCHES_STATFS64
 0

	)

99 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 0

	)

103 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio_lim.h

19 #i‚de‡
_BITS_UIO_LIM_H


20 
	#_BITS_UIO_LIM_H
 1

	)

30 
	#__IOV_MAX
 1024

	)

	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

27 #ñi‡
__TIMESIZE
 == 32

28 
	#__USE_TIME_BITS64
 1

	)

30 #ñi‡
_TIME_BITS
 == 32

31 #i‡
__TIMESIZE
 > 32

35 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/close_range.h

2 #i‚de‡
_LINUX_CLOSE_RANGE_H


3 
	#_LINUX_CLOSE_RANGE_H


	)

6 
	#CLOSE_RANGE_UNSHARE
 (1U << 1)

	)

9 
	#CLOSE_RANGE_CLOEXEC
 (1U << 2)

	)

	@/usr/include/linux/param.h

2 #i‚de‡
_LINUX_PARAM_H


3 
	#_LINUX_PARAM_H


	)

5 
	~<asm/∑øm.h
>

	@/usr/include/linux/stat.h

2 #i‚de‡
_LINUX_STAT_H


3 
	#_LINUX_STAT_H


	)

5 
	~<löux/ty≥s.h
>

7 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

9 
	#S_IFMT
 00170000

	)

10 
	#S_IFSOCK
 0140000

	)

11 
	#S_IFLNK
 0120000

	)

12 
	#S_IFREG
 0100000

	)

13 
	#S_IFBLK
 0060000

	)

14 
	#S_IFDIR
 0040000

	)

15 
	#S_IFCHR
 0020000

	)

16 
	#S_IFIFO
 0010000

	)

17 
	#S_ISUID
 0004000

	)

18 
	#S_ISGID
 0002000

	)

19 
	#S_ISVTX
 0001000

	)

21 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

22 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

23 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

24 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

25 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

26 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

27 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

29 
	#S_IRWXU
 00700

	)

30 
	#S_IRUSR
 00400

	)

31 
	#S_IWUSR
 00200

	)

32 
	#S_IXUSR
 00100

	)

34 
	#S_IRWXG
 00070

	)

35 
	#S_IRGRP
 00040

	)

36 
	#S_IWGRP
 00020

	)

37 
	#S_IXGRP
 00010

	)

39 
	#S_IRWXO
 00007

	)

40 
	#S_IROTH
 00004

	)

41 
	#S_IWOTH
 00002

	)

42 
	#S_IXOTH
 00001

	)

56 
	s°©x_time°amp
 {

57 
__s64
 
	mtv_£c
;

58 
__u32
 
	mtv_n£c
;

59 
__s32
 
	m__ª£rved
;

99 
	s°©x
 {

101 
__u32
 
	m°x_mask
;

102 
__u32
 
	m°x_blksize
;

103 
__u64
 
	m°x_©åibuãs
;

105 
__u32
 
	m°x_∆ök
;

106 
__u32
 
	m°x_uid
;

107 
__u32
 
	m°x_gid
;

108 
__u16
 
	m°x_mode
;

109 
__u16
 
	m__•¨e0
[1];

111 
__u64
 
	m°x_öo
;

112 
__u64
 
	m°x_size
;

113 
__u64
 
	m°x_blocks
;

114 
__u64
 
	m°x_©åibuãs_mask
;

116 
°©x_time°amp
 
	m°x_©ime
;

117 
°©x_time°amp
 
	m°x_btime
;

118 
°©x_time°amp
 
	m°x_˘ime
;

119 
°©x_time°amp
 
	m°x_mtime
;

121 
__u32
 
	m°x_rdev_maj‹
;

122 
__u32
 
	m°x_rdev_mö‹
;

123 
__u32
 
	m°x_dev_maj‹
;

124 
__u32
 
	m°x_dev_mö‹
;

126 
__u64
 
	m°x_m¡_id
;

127 
__u64
 
	m__•¨e2
;

129 
__u64
 
	m__•¨e3
[12];

141 
	#STATX_TYPE
 0x00000001U

	)

142 
	#STATX_MODE
 0x00000002U

	)

143 
	#STATX_NLINK
 0x00000004U

	)

144 
	#STATX_UID
 0x00000008U

	)

145 
	#STATX_GID
 0x00000010U

	)

146 
	#STATX_ATIME
 0x00000020U

	)

147 
	#STATX_MTIME
 0x00000040U

	)

148 
	#STATX_CTIME
 0x00000080U

	)

149 
	#STATX_INO
 0x00000100U

	)

150 
	#STATX_SIZE
 0x00000200U

	)

151 
	#STATX_BLOCKS
 0x00000400U

	)

152 
	#STATX_BASIC_STATS
 0x000007ffU

	)

153 
	#STATX_BTIME
 0x00000800U

	)

154 
	#STATX_MNT_ID
 0x00001000U

	)

156 
	#STATX__RESERVED
 0x80000000U

	)

163 
	#STATX_ALL
 0x00000fffU

	)

179 
	#STATX_ATTR_COMPRESSED
 0x00000004

	)

180 
	#STATX_ATTR_IMMUTABLE
 0x00000010

	)

181 
	#STATX_ATTR_APPEND
 0x00000020

	)

182 
	#STATX_ATTR_NODUMP
 0x00000040

	)

183 
	#STATX_ATTR_ENCRYPTED
 0x00000800

	)

184 
	#STATX_ATTR_AUTOMOUNT
 0x00001000

	)

185 
	#STATX_ATTR_MOUNT_ROOT
 0x00002000

	)

186 
	#STATX_ATTR_VERITY
 0x00100000

	)

187 
	#STATX_ATTR_DAX
 0x00200000

	)

	@/usr/include/linux/stddef.h

2 #i‚de‡
_LINUX_STDDEF_H


3 
	#_LINUX_STDDEF_H


	)

7 #i‚de‡
__Æways_ölöe


8 
	#__Æways_ölöe
 
__ölöe__


	)

26 
	#__°ru˘_group
(
TAG
, 
NAME
, 
ATTRS
, 
MEMBERS
...) \

28 °ru˘ { 
MEMBERS
 } 
ATTRS
; \

29 
	sTAG
 { 
MEMBERS
 } 
ATTRS
 
NAME
; \

30 }

	)

42 
	#__DECLARE_FLEX_ARRAY
(
TYPE
, 
NAME
) \

44 °ru˘ { } 
__em±y_
 ## 
NAME
; \

45 
TYPE
 
NAME
[]; \

46 }

	)

	@/usr/include/linux/swab.h

2 #i‚de‡
_LINUX_SWAB_H


3 
	#_LINUX_SWAB_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/°ddef.h
>

7 
	~<asm/bô•îl⁄g.h
>

8 
	~<asm/swab.h
>

14 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

15 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

16 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

18 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

19 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

20 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

21 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

22 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

24 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

25 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

26 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

27 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

28 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

29 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

30 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

31 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

32 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

34 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

35 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

36 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

38 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

39 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

40 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

48 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

50 #i‡
	`deföed
 (
__¨ch_swab16
)

51  
	`__¨ch_swab16
(
vÆ
);

53  
	`___c⁄°™t_swab16
(
vÆ
);

55 
	}
}

57 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

59 #i‡
	`deföed
(
__¨ch_swab32
)

60  
	`__¨ch_swab32
(
vÆ
);

62  
	`___c⁄°™t_swab32
(
vÆ
);

64 
	}
}

66 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

68 #i‡
	`deföed
 (
__¨ch_swab64
)

69  
	`__¨ch_swab64
(
vÆ
);

70 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

71 
__u32
 
h
 = 
vÆ
 >> 32;

72 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

73  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

75  
	`___c⁄°™t_swab64
(
vÆ
);

77 
	}
}

79 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

81 #ifde‡
__¨ch_swahw32


82  
	`__¨ch_swahw32
(
vÆ
);

84  
	`___c⁄°™t_swahw32
(
vÆ
);

86 
	}
}

88 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

90 #ifde‡
__¨ch_swahb32


91  
	`__¨ch_swahb32
(
vÆ
);

93  
	`___c⁄°™t_swahb32
(
vÆ
);

95 
	}
}

101 #ifde‡
__HAVE_BUILTIN_BSWAP16__


102 
	#__swab16
(
x
Ë(
__u16
)
	`__buûtö_bsw≠16
((__u16)(x))

	)

104 
	#__swab16
(
x
) \

105 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

106 
	`___c⁄°™t_swab16
(
x
) : \

107 
	`__fswab16
(
x
))

	)

114 #ifde‡
__HAVE_BUILTIN_BSWAP32__


115 
	#__swab32
(
x
Ë(
__u32
)
	`__buûtö_bsw≠32
((__u32)(x))

	)

117 
	#__swab32
(
x
) \

118 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

119 
	`___c⁄°™t_swab32
(
x
) : \

120 
	`__fswab32
(
x
))

	)

127 #ifde‡
__HAVE_BUILTIN_BSWAP64__


128 
	#__swab64
(
x
Ë(
__u64
)
	`__buûtö_bsw≠64
((__u64)(x))

	)

130 
	#__swab64
(
x
) \

131 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

132 
	`___c⁄°™t_swab64
(
x
) : \

133 
	`__fswab64
(
x
))

	)

136 
__Æways_ölöe
 
	$__swab
(c⁄° 
y
)

138 #i‡
__BITS_PER_LONG
 == 64

139  
	`__swab64
(
y
);

141  
	`__swab32
(
y
);

143 
	}
}

151 
	#__swahw32
(
x
) \

152 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

153 
	`___c⁄°™t_swahw32
(
x
) : \

154 
	`__fswahw32
(
x
))

	)

162 
	#__swahb32
(
x
) \

163 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

164 
	`___c⁄°™t_swahb32
(
x
) : \

165 
	`__fswahb32
(
x
))

	)

171 
__Æways_ölöe
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

173 #ifde‡
__¨ch_swab16p


174  
	`__¨ch_swab16p
(
p
);

176  
	`__swab16
(*
p
);

178 
	}
}

184 
__Æways_ölöe
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

186 #ifde‡
__¨ch_swab32p


187  
	`__¨ch_swab32p
(
p
);

189  
	`__swab32
(*
p
);

191 
	}
}

197 
__Æways_ölöe
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

199 #ifde‡
__¨ch_swab64p


200  
	`__¨ch_swab64p
(
p
);

202  
	`__swab64
(*
p
);

204 
	}
}

212 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

214 #ifde‡
__¨ch_swahw32p


215  
	`__¨ch_swahw32p
(
p
);

217  
	`__swahw32
(*
p
);

219 
	}
}

227 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

229 #ifde‡
__¨ch_swahb32p


230  
	`__¨ch_swahb32p
(
p
);

232  
	`__swahb32
(*
p
);

234 
	}
}

240 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

242 #ifde‡
__¨ch_swab16s


243 
	`__¨ch_swab16s
(
p
);

245 *
p
 = 
	`__swab16p
(p);

247 
	}
}

252 
__Æways_ölöe
 
	$__swab32s
(
__u32
 *
p
)

254 #ifde‡
__¨ch_swab32s


255 
	`__¨ch_swab32s
(
p
);

257 *
p
 = 
	`__swab32p
(p);

259 
	}
}

265 
__Æways_ölöe
 
	$__swab64s
(
__u64
 *
p
)

267 #ifde‡
__¨ch_swab64s


268 
	`__¨ch_swab64s
(
p
);

270 *
p
 = 
	`__swab64p
(p);

272 
	}
}

280 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

282 #ifde‡
__¨ch_swahw32s


283 
	`__¨ch_swahw32s
(
p
);

285 *
p
 = 
	`__swahw32p
(p);

287 
	}
}

295 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

297 #ifde‡
__¨ch_swahb32s


298 
	`__¨ch_swahb32s
(
p
);

300 *
p
 = 
	`__swahb32p
(p);

302 
	}
}

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

39 
	#__STDC_IEC_60559_BFP__
 201404L

	)

42 
	#__STDC_IEC_559__
 1

	)

43 
	#__STDC_IEC_60559_BFP__
 201404L

	)

46 #ifde‡
__GCC_IEC_559_COMPLEX


47 #i‡
__GCC_IEC_559_COMPLEX
 > 0

48 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

52 
	#__STDC_IEC_559_COMPLEX__
 1

	)

53 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

62 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


42 #i‡(
deföed
 
__has_©åibuã
 \

43 && (!
deföed
 
	g__˛™g_mö‹__
 \

44 || 3 < 
	g__˛™g_maj‹__
 + (5 <
__˛™g_mö‹__
)))

45 
	#__glibc_has_©åibuã
(
©å
Ë
	`__has_©åibuã
 (©å)

	)

47 
	#__glibc_has_©åibuã
(
©å
Ë0

	)

49 #ifde‡
__has_buûtö


50 
	#__glibc_has_buûtö
(
«me
Ë
	`__has_buûtö
 («me)

	)

52 
	#__glibc_has_buûtö
(
«me
Ë0

	)

54 #ifde‡
__has_exãnsi⁄


55 
	#__glibc_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

57 
	#__glibc_has_exãnsi⁄
(
ext
Ë0

	)

60 #i‡
deföed
 
__GNUC__
 || deföed 
__˛™g__


64 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


65 
	#__LEAF
 , 
__Àaf__


	)

66 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

68 
	#__LEAF


	)

69 
	#__LEAF_ATTR


	)

77 #i‡!
deföed
 
__˝lu•lus
 \

78 && (
__GNUC_PREREQ
 (3, 4Ë|| 
	$__glibc_has_©åibuã
 (
__nŸhrow__
))

79 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

80 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

81 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

82 
	#__NTHNL
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

84 #i‡
deföed
 
__˝lu•lus
 && (
	`__GNUC_PREREQ
 (2,8Ë|| 
__˛™g_maj‹
 >= 4)

85 #i‡
__˝lu•lus
 >= 201103L

86 
	#__THROW
 
	`n€x˚±
 (
åue
)

	)

88 
	#__THROW
 
	`throw
 ()

	)

90 
	#__THROWNL
 
__THROW


	)

91 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
__THROW


	)

92 
	#__NTHNL
(
f˘
Ëf˘ 
__THROW


	)

94 
	#__THROW


	)

95 
	#__THROWNL


	)

96 
	#__NTH
(
f˘
Ë
	)
fct

97 
	#__NTHNL
(
f˘
Ë
	)
fct

103 #i‡(
deföed
 
__˝lu•lus
 \

104 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

105 
	#__ölöe
 
ölöe


	)

107 
	#__ölöe


	)

110 
	#__THROW


	)

111 
	#__THROWNL


	)

112 
	#__NTH
(
f˘
Ë
	)
fct

118 
	#__P
(
¨gs
Ë
	)
args

119 
	#__PMT
(
¨gs
Ë
	)
args

124 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

125 
	#__STRING
(
x
Ë#x

	)

128 
	#__±r_t
 *

	)

132 #ifdef 
__˝lu•lus


133 
	#__BEGIN_DECLS
 "C" {

	)

134 
	#__END_DECLS
 
	}

	)
}

136 
	#__BEGIN_DECLS


	)

137 
	#__END_DECLS


	)

142 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

143 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

146 #i‡
__USE_FORTIFY_LEVEL
 =3 && (
__glibc_˛™g_¥îeq
 (9, 0) \

147 || 
	$__GNUC_PREREQ
 (12, 0))

148 
	#__glibc_objsize0
(
__o
Ë
	`__buûtö_dy«mic_obje˘_size
 (__o, 0)

	)

149 
	#__glibc_objsize
(
__o
Ë
	`__buûtö_dy«mic_obje˘_size
 (__o, 1)

	)

151 
	#__glibc_objsize0
(
__o
Ë
	`__bos0
 (__o)

	)

152 
	#__glibc_objsize
(
__o
Ë
	`__bos
 (__o)

	)

159 
	#__glibc_ß„_Àn_c⁄d
(
__l
, 
__s
, 
__osz
Ë((__lË<(__oszË/ (__s))

	)

160 
	#__glibc_unsig√d_‹_posôive
(
__l
) \

161 ((
	`__ty≥of
 (
__l
)) 0 < (__typeof (__l)) -1 \

162 || (
	`__buûtö_c⁄°™t_p
 (
__l
Ë&& (__lË> 0))

	)

167 
	#__glibc_ß„_‹_unknown_Àn
(
__l
, 
__s
, 
__osz
) \

168 (
	`__glibc_unsig√d_‹_posôive
 (
__l
) \

169 && 
	`__buûtö_c⁄°™t_p
 (
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), \

170 
__s
, 
__osz
)) \

171 && 
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), 
__s
, 
__osz
))

	)

176 
	#__glibc_unß„_Àn
(
__l
, 
__s
, 
__osz
) \

177 (
	`__glibc_unsig√d_‹_posôive
 (
__l
) \

178 && 
	`__buûtö_c⁄°™t_p
 (
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), \

179 
__s
, 
__osz
)) \

180 && !
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), 
__s
, 
__osz
))

	)

185 
	#__glibc_f‹tify
(
f
, 
__l
, 
__s
, 
__osz
, ...) \

186 (
	`__glibc_ß„_‹_unknown_Àn
 (
__l
, 
__s
, 
__osz
) \

187 ? 
__
 ## 
f
 ## 
	`_Æüs
 (
__VA_ARGS__
) \

188 : (
	`__glibc_unß„_Àn
 (
__l
, 
__s
, 
__osz
) \

189 ? 
__
 ## 
f
 ## 
	`_chk_w¨n
 (
__VA_ARGS__
, 
__osz
) \

190 : 
__
 ## 
f
 ## 
	`_chk
 (
__VA_ARGS__
, 
__osz
))) \

191 

	)

195 
	#__glibc_f‹tify_n
(
f
, 
__l
, 
__s
, 
__osz
, ...) \

196 (
	`__glibc_ß„_‹_unknown_Àn
 (
__l
, 
__s
, 
__osz
) \

197 ? 
__
 ## 
f
 ## 
	`_Æüs
 (
__VA_ARGS__
) \

198 : (
	`__glibc_unß„_Àn
 (
__l
, 
__s
, 
__osz
) \

199 ? 
__
 ## 
f
 ## 
	`_chk_w¨n
 (
__VA_ARGS__
, (
__osz
Ë/ (
__s
)) \

200 : 
__
 ## 
f
 ## 
	`_chk
 (
__VA_ARGS__
, (
__osz
Ë/ (
__s
)))) \

201 

	)

202 #i‡
	`__GNUC_PREREQ
 (4,3)

203 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

204 
	#__îr‹de˛
(
«me
, 
msg
) \

205 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

207 
	#__w¨«âr
(
msg
)

	)

208 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

215 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >199901L && !deföed 
__HP_cc


216 
	#__Êex¨r
 []

	)

217 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

218 #ñi‡
	`__GNUC_PREREQ
 (2,97Ë|| 
deföed
 
__˛™g__


221 
	#__Êex¨r
 []

	)

222 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

223 #ñi‡
deföed
 
__GNUC__


226 
	#__Êex¨r
 [0]

	)

227 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

230 
	#__Êex¨r
 [1]

	)

231 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

245 #i‡(
deföed
 
__GNUC__
 && __GNUC__ >2Ë|| (
__˛™g_maj‹__
 >= 4)

247 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

248 #ifde‡
__˝lu•lus


249 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

250 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

251 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

252 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

254 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

255 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

256 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

257 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

259 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

260 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

273 #i‡!(
deföed
 
__GNUC__
 || deföed 
__˛™g__
)

274 
	#__©åibuã__
(
xyz
Ë

	)

280 #i‡
	`__GNUC_PREREQ
 (2,96Ë|| 
	`__glibc_has_©åibuã
 (
__mÆloc__
)

281 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

283 
	#__©åibuã_mÆloc__


	)

288 #i‡
	`__GNUC_PREREQ
 (4, 3)

289 
	#__©åibuã_Æloc_size__
(
∑øms
) \

290 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

292 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

297 #i‡
	`__GNUC_PREREQ
 (4, 9Ë|| 
	`__glibc_has_©åibuã
 (
__Æloc_Æign__
)

298 
	#__©åibuã_Æloc_Æign__
(
∑øm
) \

299 
	`__©åibuã__
 ((
__Æloc_Æign__
 
∑øm
))

	)

301 
	#__©åibuã_Æloc_Æign__
(
∑øm
Ë

	)

307 #i‡
	`__GNUC_PREREQ
 (2,96Ë|| 
	`__glibc_has_©åibuã
 (
__puª__
)

308 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

310 
	#__©åibuã_puª__


	)

314 #i‡
	`__GNUC_PREREQ
 (2,5Ë|| 
	`__glibc_has_©åibuã
 (
__c⁄°__
)

315 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

317 
	#__©åibuã_c⁄°__


	)

320 #i‡
	`__GNUC_PREREQ
 (2,7Ë|| 
	`__glibc_has_©åibuã
 (
__unu£d__
)

321 
	#__©åibuã_maybe_unu£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

323 
	#__©åibuã_maybe_unu£d__


	)

329 #i‡
	`__GNUC_PREREQ
 (3,1Ë|| 
	`__glibc_has_©åibuã
 (
__u£d__
)

330 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

331 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

333 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

334 
	#__©åibuã_noölöe__


	)

338 #i‡
	`__GNUC_PREREQ
 (3,2Ë|| 
	`__glibc_has_©åibuã
 (
__dïªˇãd__
)

339 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

341 
	#__©åibuã_dïªˇãd__


	)

347 #i‡
	`__GNUC_PREREQ
 (4,5) \

348 || 
	$__glibc_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

349 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

350 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

352 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

361 #i‡
	`__GNUC_PREREQ
 (2,8Ë|| 
	`__glibc_has_©åibuã
 (
__f‹m©_¨g__
)

362 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

364 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

371 #i‡
	`__GNUC_PREREQ
 (2,97Ë|| 
	`__glibc_has_©åibuã
 (
__f‹m©__
)

372 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

373 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

375 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

382 #i‚de‡
__©åibuã_n⁄nuŒ__


383 #i‡
	`__GNUC_PREREQ
 (3,3Ë|| 
	`__glibc_has_©åibuã
 (
__n⁄nuŒ__
)

384 
	#__©åibuã_n⁄nuŒ__
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

386 
	#__©åibuã_n⁄nuŒ__
(
∑øms
)

	)

389 #i‚de‡
__n⁄nuŒ


390 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã_n⁄nuŒ__
 (∑øms)

	)

395 #i‚de‡
__ªtu∫s_n⁄nuŒ


396 #i‡
	`__GNUC_PREREQ
 (4, 9Ë|| 
	`__glibc_has_©åibuã
 (
__ªtu∫s_n⁄nuŒ__
)

397 
	#__ªtu∫s_n⁄nuŒ
 
	`__©åibuã__
 ((
__ªtu∫s_n⁄nuŒ__
))

	)

399 
	#__ªtu∫s_n⁄nuŒ


	)

405 #i‡
	`__GNUC_PREREQ
 (3,4Ë|| 
	`__glibc_has_©åibuã
 (
__w¨n_unu£d_ªsu…__
)

406 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

407 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

408 #i‡
deföed
 
__USE_FORTIFY_LEVEL
 && __USE_FORTIFY_LEVEL > 0

409 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

412 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

414 #i‚de‡
__wur


415 
	#__wur


	)

419 #i‡
	`__GNUC_PREREQ
 (3,2Ë|| 
	`__glibc_has_©åibuã
 (
__Æways_ölöe__
)

423 #unde‡
__Æways_ölöe


424 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

426 #unde‡
__Æways_ölöe


427 
	#__Æways_ölöe
 
__ölöe


	)

432 #i‡
	`__GNUC_PREREQ
 (4,3Ë|| 
	`__glibc_has_©åibuã
 (
__¨tificül__
)

433 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

435 
	#__©åibuã_¨tificül__


	)

447 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

448 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

449 || 
deföed
 
__GNUC_GNU_INLINE__
)))

450 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


451 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

452 
	#__exã∫_Æways_ölöe
 \

453 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

455 
	#__exã∫_ölöe
 
__ölöe


	)

456 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

460 #ifde‡
__exã∫_Æways_ölöe


461 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

466 #i‡
	`__GNUC_PREREQ
 (4,3)

467 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

468 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

475 #i‡!(
	`__GNUC_PREREQ
 (2,8Ë|| 
deföed
 
__˛™g__
)

476 
	#__exãnsi⁄__


	)

482 #i‡!(
	`__GNUC_PREREQ
 (2,92Ë|| 
__˛™g_maj‹__
 >= 3)

483 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

484 
	#__ª°ri˘
 
ª°ri˘


	)

486 
	#__ª°ri˘


	)

494 #i‡(
	`__GNUC_PREREQ
 (3,1Ë|| 
__˛™g_maj‹__
 >3Ë&& !
deföed
 
__˝lu•lus


495 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

497 #ifde‡
__GNUC__


498 
	#__ª°ri˘_¨r


	)

500 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

501 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

504 
	#__ª°ri˘_¨r


	)

509 #i‡(
__GNUC__
 >3Ë|| 
	`__glibc_has_buûtö
 (
__buûtö_ex≥˘
)

510 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

511 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

513 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

514 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

517 #i‡(!
deföed
 
_N‹ëu∫
 \

518 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

519 && !(
	`__GNUC_PREREQ
 (4,7) \

520 || (3 < 
__˛™g_maj‹__
 + (5 <
__˛™g_mö‹__
))))

521 #i‡
	`__GNUC_PREREQ
 (2,8)

522 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

524 
	#_N‹ëu∫


	)

528 #i‡
	`__GNUC_PREREQ
 (8, 0)

532 
	#__©åibuã_n⁄°rög__
 
	`__©åibuã__
 ((
__n⁄°rög__
))

	)

534 
	#__©åibuã_n⁄°rög__


	)

538 #unde‡
__©åibuã_c›y__


539 #i‡
	`__GNUC_PREREQ
 (9, 0)

542 
	#__©åibuã_c›y__
(
¨g
Ë
	`__©åibuã__
 ((
	`__c›y__
 (¨g)))

	)

544 
	#__©åibuã_c›y__
(
¨g
)

	)

547 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

548 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

549 && (!(
	`__GNUC_PREREQ
 (4, 6Ë|| 
__˛™g_maj‹__
 >= 4) \

550 || 
deföed
 
__STRICT_ANSI__
))

551 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

552 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

553 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

558 #i‚de‡
__GNULIB_CDEFS


559 
	~<bôs/w‹dsize.h
>

560 
	~<bôs/l⁄g-doubÀ.h
>

563 #i‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

564 #ifde‡
__REDIRECT


567 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë... 
unu£d__ldbl_ªdú


	)

568 
	#__LDBL_REDIR_DECL
(
«me
) \

569 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__" #«mê"õì128"));

	)

572 
	#__LDBL_REDIR2_DECL
(
«me
) \

573 
	`__ty≥of
 (
__
##
«me
) __##name \

574 
	`__asm
 (
	`__ASMNAME
 ("__" #«mê"õì128"));

	)

577 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë... 
unu£d__ldbl_ªdú1


	)

578 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

579 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

581 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

582 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

583 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

584 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__
##
Æüs
##
õì128
)

	)

587 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë... 
unu£d__ªdúe˘_ldbl


	)

588 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë... 
unu£d__ldbl_ªdú_¡h


	)

591 
	`_Sètic_as£π
 (0, "IEEE 128-bitsÜong doubleÑequiresÑedirection onÅhisÖlatform");

593 #ñi‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


594 
	#__LDBL_COMPAT
 1

	)

595 #ifde‡
__REDIRECT


596 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

597 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

598 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

599 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

600 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

601 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

602 
	#__LDBL_REDIR2_DECL
(
«me
) \

603 
	`__ty≥of
 (
__
##
«me
Ë__##«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl___" #«me));

	)

604 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

605 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

606 
	#__LDBL_REDIR_DECL
(
«me
) \

607 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

608 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

609 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

610 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

611 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

614 #i‡(!
deföed
 
__LDBL_COMPAT
 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0) \

615 || !
deföed
 
__REDIRECT


616 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

617 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

618 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

619 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

620 
	#__LDBL_REDIR2_DECL
(
«me
)

	)

621 
	#__LDBL_REDIR_DECL
(
«me
)

	)

622 #ifde‡
__REDIRECT


623 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

624 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

625 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

634 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

635 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

636 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

637 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

639 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

649 #i‡!
deföed
 
__˝lu•lus
 \

650 && (
	`__GNUC_PREREQ
 (4, 9) \

651 || 
	`__glibc_has_exãnsi⁄
 (
c_gíîic_£À˘i⁄s
) \

652 || (!
deföed
 
__GNUC__
 && deföed 
__STDC_VERSION__
 \

653 && 
__STDC_VERSION__
 >= 201112L))

654 
	#__HAVE_GENERIC_SELECTION
 1

	)

656 
	#__HAVE_GENERIC_SELECTION
 0

	)

659 #i‡
	`__GNUC_PREREQ
 (10, 0)

665 
	#__©å_ac˚ss
(
x
Ë
	`__©åibuã__
 ((
__ac˚ss__
 x))

	)

670 #i‡
__USE_FORTIFY_LEVEL
 == 3

671 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
Ë
	`__©åibuã__
 ((
	`__ac˚ss__
 (a, o)))

	)

673 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
Ë
	`__©å_ac˚ss
 (◊, o, s))

	)

675 #i‡
	`__GNUC_PREREQ
 (11, 0)

676 
	#__©å_ac˚ss_n⁄e
(
¨gno
Ë
	`__©åibuã__
 ((
	`__ac˚ss__
 (
__n⁄e__
,árgno)))

	)

678 
	#__©å_ac˚ss_n⁄e
(
¨gno
)

	)

681 
	#__f‹tifõd_©å_ac˚ss
(
a
, 
o
, 
s
)

	)

682 
	#__©å_ac˚ss
(
x
)

	)

683 
	#__©å_ac˚ss_n⁄e
(
¨gno
)

	)

686 #i‡
	`__GNUC_PREREQ
 (11, 0)

689 
	#__©å_dóŒoc
(
dóŒoc
, 
¨gno
) \

690 
	`__©åibuã__
 ((
	`__mÆloc__
 (
dóŒoc
, 
¨gno
)))

	)

691 
	#__©å_dóŒoc_‰ì
 
	`__©å_dóŒoc
 (
__buûtö_‰ì
, 1)

	)

693 
	#__©å_dóŒoc
(
dóŒoc
, 
¨gno
)

	)

694 
	#__©å_dóŒoc_‰ì


	)

699 #i‡
	`__GNUC_PREREQ
 (4, 1)

700 
	#__©åibuã_ªtu∫s_twi˚__
 
	`__©åibuã__
 ((
__ªtu∫s_twi˚__
))

	)

702 
	#__©åibuã_ªtu∫s_twi˚__


	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/ty≥s/sig£t_t.h
>

25 
	~<bôs/ty≥s/°ack_t.h
>

28 #ifde‡
__USE_MISC


29 
	#__˘x
(
Êd
Ë
	)
fld

31 
	#__˘x
(
Êd
Ë
__
 ## 
	)
fld

34 #ifde‡
__x86_64__


37 
__exãnsi⁄__
 
	tgªg_t
;

40 
	#__NGREG
 23

	)

41 #ifde‡
__USE_MISC


42 
	#NGREG
 
__NGREG


	)

46 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

48 #ifde‡
__USE_GNU


52 
	mREG_R8
 = 0,

53 
	#REG_R8
 
REG_R8


	)

54 
	mREG_R9
,

55 
	#REG_R9
 
REG_R9


	)

56 
	mREG_R10
,

57 
	#REG_R10
 
REG_R10


	)

58 
	mREG_R11
,

59 
	#REG_R11
 
REG_R11


	)

60 
	mREG_R12
,

61 
	#REG_R12
 
REG_R12


	)

62 
	mREG_R13
,

63 
	#REG_R13
 
REG_R13


	)

64 
	mREG_R14
,

65 
	#REG_R14
 
REG_R14


	)

66 
	mREG_R15
,

67 
	#REG_R15
 
REG_R15


	)

68 
	mREG_RDI
,

69 
	#REG_RDI
 
REG_RDI


	)

70 
	mREG_RSI
,

71 
	#REG_RSI
 
REG_RSI


	)

72 
	mREG_RBP
,

73 
	#REG_RBP
 
REG_RBP


	)

74 
	mREG_RBX
,

75 
	#REG_RBX
 
REG_RBX


	)

76 
	mREG_RDX
,

77 
	#REG_RDX
 
REG_RDX


	)

78 
	mREG_RAX
,

79 
	#REG_RAX
 
REG_RAX


	)

80 
	mREG_RCX
,

81 
	#REG_RCX
 
REG_RCX


	)

82 
	mREG_RSP
,

83 
	#REG_RSP
 
REG_RSP


	)

84 
	mREG_RIP
,

85 
	#REG_RIP
 
REG_RIP


	)

86 
	mREG_EFL
,

87 
	#REG_EFL
 
REG_EFL


	)

88 
	mREG_CSGSFS
,

89 
	#REG_CSGSFS
 
REG_CSGSFS


	)

90 
	mREG_ERR
,

91 
	#REG_ERR
 
REG_ERR


	)

92 
	mREG_TRAPNO
,

93 
	#REG_TRAPNO
 
REG_TRAPNO


	)

94 
	mREG_OLDMASK
,

95 
	#REG_OLDMASK
 
REG_OLDMASK


	)

96 
	mREG_CR2


97 
	#REG_CR2
 
REG_CR2


	)

101 
	s_libc_Âxªg


103 
__˘x
(
signifiˇnd
)[4];

104 
__˘x
(
exp⁄ít
);

105 
	m__glibc_ª£rved1
[3];

108 
	s_libc_xmmªg


110 
__uöt32_t
 
__˘x
(
ñemít
)[4];

113 
	s_libc_Â°©e


116 
__uöt16_t
 
__˘x
(
cwd
);

117 
__uöt16_t
 
__˘x
(
swd
);

118 
__uöt16_t
 
__˘x
(
·w
);

119 
__uöt16_t
 
__˘x
(
f›
);

120 
__uöt64_t
 
__˘x
(
rù
);

121 
__uöt64_t
 
__˘x
(
rdp
);

122 
__uöt32_t
 
__˘x
(
mxc§
);

123 
__uöt32_t
 
__˘x
(
mx¸_mask
);

124 
_libc_Âxªg
 
	m_°
[8];

125 
_libc_xmmªg
 
	m_xmm
[16];

126 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

130 
_libc_Â°©e
 *
	tÂªg£t_t
;

135 
gªg£t_t
 
__˘x
(
gªgs
);

137 
Âªg£t_t
 
__˘x
(
Âªgs
);

138 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

139 } 
	tmc⁄ãxt_t
;

142 
	suc⁄ãxt_t


144 
__˘x
(
uc_Êags
);

145 
uc⁄ãxt_t
 *
	muc_lök
;

146 
°ack_t
 
	muc_°ack
;

147 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

148 
sig£t_t
 
	muc_sigmask
;

149 
_libc_Â°©e
 
	m__Âªgs_mem
;

150 
__exãnsi⁄__
 
	m__s•
[4];

151 } 
	tuc⁄ãxt_t
;

156 
	tgªg_t
;

159 
	#__NGREG
 19

	)

160 #ifde‡
__USE_MISC


161 
	#NGREG
 
__NGREG


	)

165 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

167 #ifde‡
__USE_GNU


171 
	mREG_GS
 = 0,

172 
	#REG_GS
 
REG_GS


	)

173 
	mREG_FS
,

174 
	#REG_FS
 
REG_FS


	)

175 
	mREG_ES
,

176 
	#REG_ES
 
REG_ES


	)

177 
	mREG_DS
,

178 
	#REG_DS
 
REG_DS


	)

179 
	mREG_EDI
,

180 
	#REG_EDI
 
REG_EDI


	)

181 
	mREG_ESI
,

182 
	#REG_ESI
 
REG_ESI


	)

183 
	mREG_EBP
,

184 
	#REG_EBP
 
REG_EBP


	)

185 
	mREG_ESP
,

186 
	#REG_ESP
 
REG_ESP


	)

187 
	mREG_EBX
,

188 
	#REG_EBX
 
REG_EBX


	)

189 
	mREG_EDX
,

190 
	#REG_EDX
 
REG_EDX


	)

191 
	mREG_ECX
,

192 
	#REG_ECX
 
REG_ECX


	)

193 
	mREG_EAX
,

194 
	#REG_EAX
 
REG_EAX


	)

195 
	mREG_TRAPNO
,

196 
	#REG_TRAPNO
 
REG_TRAPNO


	)

197 
	mREG_ERR
,

198 
	#REG_ERR
 
REG_ERR


	)

199 
	mREG_EIP
,

200 
	#REG_EIP
 
REG_EIP


	)

201 
	mREG_CS
,

202 
	#REG_CS
 
REG_CS


	)

203 
	mREG_EFL
,

204 
	#REG_EFL
 
REG_EFL


	)

205 
	mREG_UESP
,

206 
	#REG_UESP
 
REG_UESP


	)

207 
	mREG_SS


208 
	#REG_SS
 
REG_SS


	)

213 
	s_libc_Âªg


215 
__˘x
(
signifiˇnd
)[4];

216 
__˘x
(
exp⁄ít
);

219 
	s_libc_Â°©e


221 
__˘x
(
cw
);

222 
__˘x
(
sw
);

223 
__˘x
(
èg
);

224 
__˘x
(
ùoff
);

225 
__˘x
(
cs£l
);

226 
__˘x
(
d©aoff
);

227 
__˘x
(
d©a£l
);

228 
_libc_Âªg
 
	m_°
[8];

229 
__˘x
(
°©us
);

233 
_libc_Â°©e
 *
	tÂªg£t_t
;

238 
gªg£t_t
 
__˘x
(
gªgs
);

241 
Âªg£t_t
 
__˘x
(
Âªgs
);

242 
__˘x
(
ﬁdmask
);

243 
__˘x
(
¸2
);

244 } 
	tmc⁄ãxt_t
;

247 
	suc⁄ãxt_t


249 
__˘x
(
uc_Êags
);

250 
uc⁄ãxt_t
 *
	muc_lök
;

251 
°ack_t
 
	muc_°ack
;

252 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

253 
sig£t_t
 
	muc_sigmask
;

254 
_libc_Â°©e
 
	m__Âªgs_mem
;

255 
	m__s•
[4];

256 } 
	tuc⁄ãxt_t
;

260 #unde‡
__˘x


	@/usr/include/asm-generic/errno-base.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


3 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

5 
	#EPERM
 1

	)

6 
	#ENOENT
 2

	)

7 
	#ESRCH
 3

	)

8 
	#EINTR
 4

	)

9 
	#EIO
 5

	)

10 
	#ENXIO
 6

	)

11 
	#E2BIG
 7

	)

12 
	#ENOEXEC
 8

	)

13 
	#EBADF
 9

	)

14 
	#ECHILD
 10

	)

15 
	#EAGAIN
 11

	)

16 
	#ENOMEM
 12

	)

17 
	#EACCES
 13

	)

18 
	#EFAULT
 14

	)

19 
	#ENOTBLK
 15

	)

20 
	#EBUSY
 16

	)

21 
	#EEXIST
 17

	)

22 
	#EXDEV
 18

	)

23 
	#ENODEV
 19

	)

24 
	#ENOTDIR
 20

	)

25 
	#EISDIR
 21

	)

26 
	#EINVAL
 22

	)

27 
	#ENFILE
 23

	)

28 
	#EMFILE
 24

	)

29 
	#ENOTTY
 25

	)

30 
	#ETXTBSY
 26

	)

31 
	#EFBIG
 27

	)

32 
	#ENOSPC
 28

	)

33 
	#ESPIPE
 29

	)

34 
	#EROFS
 30

	)

35 
	#EMLINK
 31

	)

36 
	#EPIPE
 32

	)

37 
	#EDOM
 33

	)

38 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

9 #i‚de‡
_ASM_GENERIC_INT_LL64_H


10 
	#_ASM_GENERIC_INT_LL64_H


	)

12 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__ASSEMBLY__


20 
__sig√d__
 
	t__s8
;

21 
	t__u8
;

23 
__sig√d__
 
	t__s16
;

24 
	t__u16
;

26 
__sig√d__
 
	t__s32
;

27 
	t__u32
;

29 #ifde‡
__GNUC__


30 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

31 
__exãnsi⁄__
 
	t__u64
;

33 
__sig√d__
 
	t__s64
;

34 
	t__u64
;

	@/usr/include/asm-generic/ioctl.h

2 #i‚de‡
_ASM_GENERIC_IOCTL_H


3 
	#_ASM_GENERIC_IOCTL_H


	)

23 
	#_IOC_NRBITS
 8

	)

24 
	#_IOC_TYPEBITS
 8

	)

31 #i‚de‡
_IOC_SIZEBITS


32 
	#_IOC_SIZEBITS
 14

	)

35 #i‚de‡
_IOC_DIRBITS


36 
	#_IOC_DIRBITS
 2

	)

39 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

40 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

41 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

42 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

44 
	#_IOC_NRSHIFT
 0

	)

45 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

46 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

47 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

57 #i‚de‡
_IOC_NONE


58 
	#_IOC_NONE
 0U

	)

61 #i‚de‡
_IOC_WRITE


62 
	#_IOC_WRITE
 1U

	)

65 #i‚de‡
_IOC_READ


66 
	#_IOC_READ
 2U

	)

69 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

70 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

71 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

72 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

73 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

75 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

83 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

84 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

85 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

86 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

87 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

88 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

89 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

92 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

93 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

94 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

95 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

99 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

100 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

101 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

102 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

103 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

2 #i‚de‡
__ASM_GENERIC_IOCTLS_H


3 
	#__ASM_GENERIC_IOCTLS_H


	)

5 
	~<löux/io˘l.h
>

20 
	#TCGETS
 0x5401

	)

21 
	#TCSETS
 0x5402

	)

22 
	#TCSETSW
 0x5403

	)

23 
	#TCSETSF
 0x5404

	)

24 
	#TCGETA
 0x5405

	)

25 
	#TCSETA
 0x5406

	)

26 
	#TCSETAW
 0x5407

	)

27 
	#TCSETAF
 0x5408

	)

28 
	#TCSBRK
 0x5409

	)

29 
	#TCXONC
 0x540A

	)

30 
	#TCFLSH
 0x540B

	)

31 
	#TIOCEXCL
 0x540C

	)

32 
	#TIOCNXCL
 0x540D

	)

33 
	#TIOCSCTTY
 0x540E

	)

34 
	#TIOCGPGRP
 0x540F

	)

35 
	#TIOCSPGRP
 0x5410

	)

36 
	#TIOCOUTQ
 0x5411

	)

37 
	#TIOCSTI
 0x5412

	)

38 
	#TIOCGWINSZ
 0x5413

	)

39 
	#TIOCSWINSZ
 0x5414

	)

40 
	#TIOCMGET
 0x5415

	)

41 
	#TIOCMBIS
 0x5416

	)

42 
	#TIOCMBIC
 0x5417

	)

43 
	#TIOCMSET
 0x5418

	)

44 
	#TIOCGSOFTCAR
 0x5419

	)

45 
	#TIOCSSOFTCAR
 0x541A

	)

46 
	#FIONREAD
 0x541B

	)

47 
	#TIOCINQ
 
FIONREAD


	)

48 
	#TIOCLINUX
 0x541C

	)

49 
	#TIOCCONS
 0x541D

	)

50 
	#TIOCGSERIAL
 0x541E

	)

51 
	#TIOCSSERIAL
 0x541F

	)

52 
	#TIOCPKT
 0x5420

	)

53 
	#FIONBIO
 0x5421

	)

54 
	#TIOCNOTTY
 0x5422

	)

55 
	#TIOCSETD
 0x5423

	)

56 
	#TIOCGETD
 0x5424

	)

57 
	#TCSBRKP
 0x5425

	)

58 
	#TIOCSBRK
 0x5427

	)

59 
	#TIOCCBRK
 0x5428

	)

60 
	#TIOCGSID
 0x5429

	)

61 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

62 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

63 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

64 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

65 
	#TIOCGRS485
 0x542E

	)

66 #i‚de‡
TIOCSRS485


67 
	#TIOCSRS485
 0x542F

	)

69 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

70 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

71 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

72 
	#TCGETX
 0x5432

	)

73 
	#TCSETX
 0x5433

	)

74 
	#TCSETXF
 0x5434

	)

75 
	#TCSETXW
 0x5435

	)

76 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

77 
	#TIOCVHANGUP
 0x5437

	)

78 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

79 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

80 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#TIOCGPTPEER
 
	`_IO
('T', 0x41Ë

	)

82 
	#TIOCGISO7816
 
	`_IOR
('T', 0x42, 
£rül_iso7816
)

	)

83 
	#TIOCSISO7816
 
	`_IOWR
('T', 0x43, 
£rül_iso7816
)

	)

85 
	#FIONCLEX
 0x5450

	)

86 
	#FIOCLEX
 0x5451

	)

87 
	#FIOASYNC
 0x5452

	)

88 
	#TIOCSERCONFIG
 0x5453

	)

89 
	#TIOCSERGWILD
 0x5454

	)

90 
	#TIOCSERSWILD
 0x5455

	)

91 
	#TIOCGLCKTRMIOS
 0x5456

	)

92 
	#TIOCSLCKTRMIOS
 0x5457

	)

93 
	#TIOCSERGSTRUCT
 0x5458

	)

94 
	#TIOCSERGETLSR
 0x5459

	)

95 
	#TIOCSERGETMULTI
 0x545A

	)

96 
	#TIOCSERSETMULTI
 0x545B

	)

98 
	#TIOCMIWAIT
 0x545C

	)

99 
	#TIOCGICOUNT
 0x545D

	)

105 #i‚de‡
FIOQSIZE


106 
	#FIOQSIZE
 0x5460

	)

110 
	#TIOCPKT_DATA
 0

	)

111 
	#TIOCPKT_FLUSHREAD
 1

	)

112 
	#TIOCPKT_FLUSHWRITE
 2

	)

113 
	#TIOCPKT_STOP
 4

	)

114 
	#TIOCPKT_START
 8

	)

115 
	#TIOCPKT_NOSTOP
 16

	)

116 
	#TIOCPKT_DOSTOP
 32

	)

117 
	#TIOCPKT_IOCTL
 64

	)

119 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/mman-common.h

2 #i‚de‡
__ASM_GENERIC_MMAN_COMMON_H


3 
	#__ASM_GENERIC_MMAN_COMMON_H


	)

10 
	#PROT_READ
 0x1

	)

11 
	#PROT_WRITE
 0x2

	)

12 
	#PROT_EXEC
 0x4

	)

13 
	#PROT_SEM
 0x8

	)

16 
	#PROT_NONE
 0x0

	)

17 
	#PROT_GROWSDOWN
 0x01000000

	)

18 
	#PROT_GROWSUP
 0x02000000

	)

21 
	#MAP_TYPE
 0x0‡

	)

22 
	#MAP_FIXED
 0x10

	)

23 
	#MAP_ANONYMOUS
 0x20

	)

26 
	#MAP_POPULATE
 0x008000

	)

27 
	#MAP_NONBLOCK
 0x010000

	)

28 
	#MAP_STACK
 0x020000

	)

29 
	#MAP_HUGETLB
 0x040000

	)

30 
	#MAP_SYNC
 0x080000

	)

31 
	#MAP_FIXED_NOREPLACE
 0x100000

	)

33 
	#MAP_UNINITIALIZED
 0x4000000

	)

39 
	#MLOCK_ONFAULT
 0x01

	)

41 
	#MS_ASYNC
 1

	)

42 
	#MS_INVALIDATE
 2

	)

43 
	#MS_SYNC
 4

	)

45 
	#MADV_NORMAL
 0

	)

46 
	#MADV_RANDOM
 1

	)

47 
	#MADV_SEQUENTIAL
 2

	)

48 
	#MADV_WILLNEED
 3

	)

49 
	#MADV_DONTNEED
 4

	)

52 
	#MADV_FREE
 8

	)

53 
	#MADV_REMOVE
 9

	)

54 
	#MADV_DONTFORK
 10

	)

55 
	#MADV_DOFORK
 11

	)

56 
	#MADV_HWPOISON
 100

	)

57 
	#MADV_SOFT_OFFLINE
 101

	)

59 
	#MADV_MERGEABLE
 12

	)

60 
	#MADV_UNMERGEABLE
 13

	)

62 
	#MADV_HUGEPAGE
 14

	)

63 
	#MADV_NOHUGEPAGE
 15

	)

65 
	#MADV_DONTDUMP
 16

	)

67 
	#MADV_DODUMP
 17

	)

69 
	#MADV_WIPEONFORK
 18

	)

70 
	#MADV_KEEPONFORK
 19

	)

72 
	#MADV_COLD
 20

	)

73 
	#MADV_PAGEOUT
 21

	)

75 
	#MADV_POPULATE_READ
 22

	)

76 
	#MADV_POPULATE_WRITE
 23

	)

79 
	#MAP_FILE
 0

	)

81 
	#PKEY_DISABLE_ACCESS
 0x1

	)

82 
	#PKEY_DISABLE_WRITE
 0x2

	)

83 
	#PKEY_ACCESS_MASK
 (
PKEY_DISABLE_ACCESS
 |\

84 
PKEY_DISABLE_WRITE
)

	)

	@/usr/include/asm-generic/socket.h

2 #i‚de‡
__ASM_GENERIC_SOCKET_H


3 
	#__ASM_GENERIC_SOCKET_H


	)

5 
	~<löux/posix_ty≥s.h
>

6 
	~<asm/sockios.h
>

9 
	#SOL_SOCKET
 1

	)

11 
	#SO_DEBUG
 1

	)

12 
	#SO_REUSEADDR
 2

	)

13 
	#SO_TYPE
 3

	)

14 
	#SO_ERROR
 4

	)

15 
	#SO_DONTROUTE
 5

	)

16 
	#SO_BROADCAST
 6

	)

17 
	#SO_SNDBUF
 7

	)

18 
	#SO_RCVBUF
 8

	)

19 
	#SO_SNDBUFFORCE
 32

	)

20 
	#SO_RCVBUFFORCE
 33

	)

21 
	#SO_KEEPALIVE
 9

	)

22 
	#SO_OOBINLINE
 10

	)

23 
	#SO_NO_CHECK
 11

	)

24 
	#SO_PRIORITY
 12

	)

25 
	#SO_LINGER
 13

	)

26 
	#SO_BSDCOMPAT
 14

	)

27 
	#SO_REUSEPORT
 15

	)

28 #i‚de‡
SO_PASSCRED


29 
	#SO_PASSCRED
 16

	)

30 
	#SO_PEERCRED
 17

	)

31 
	#SO_RCVLOWAT
 18

	)

32 
	#SO_SNDLOWAT
 19

	)

33 
	#SO_RCVTIMEO_OLD
 20

	)

34 
	#SO_SNDTIMEO_OLD
 21

	)

38 
	#SO_SECURITY_AUTHENTICATION
 22

	)

39 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

40 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

42 
	#SO_BINDTODEVICE
 25

	)

45 
	#SO_ATTACH_FILTER
 26

	)

46 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

49 
	#SO_PEERNAME
 28

	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

56 
	#SO_MARK
 36

	)

58 
	#SO_PROTOCOL
 38

	)

59 
	#SO_DOMAIN
 39

	)

61 
	#SO_RXQ_OVFL
 40

	)

63 
	#SO_WIFI_STATUS
 41

	)

64 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

65 
	#SO_PEEK_OFF
 42

	)

68 
	#SO_NOFCS
 43

	)

70 
	#SO_LOCK_FILTER
 44

	)

72 
	#SO_SELECT_ERR_QUEUE
 45

	)

74 
	#SO_BUSY_POLL
 46

	)

76 
	#SO_MAX_PACING_RATE
 47

	)

78 
	#SO_BPF_EXTENSIONS
 48

	)

80 
	#SO_INCOMING_CPU
 49

	)

82 
	#SO_ATTACH_BPF
 50

	)

83 
	#SO_DETACH_BPF
 
SO_DETACH_FILTER


	)

85 
	#SO_ATTACH_REUSEPORT_CBPF
 51

	)

86 
	#SO_ATTACH_REUSEPORT_EBPF
 52

	)

88 
	#SO_CNX_ADVICE
 53

	)

90 
	#SCM_TIMESTAMPING_OPT_STATS
 54

	)

92 
	#SO_MEMINFO
 55

	)

94 
	#SO_INCOMING_NAPI_ID
 56

	)

96 
	#SO_COOKIE
 57

	)

98 
	#SCM_TIMESTAMPING_PKTINFO
 58

	)

100 
	#SO_PEERGROUPS
 59

	)

102 
	#SO_ZEROCOPY
 60

	)

104 
	#SO_TXTIME
 61

	)

105 
	#SCM_TXTIME
 
SO_TXTIME


	)

107 
	#SO_BINDTOIFINDEX
 62

	)

109 
	#SO_TIMESTAMP_OLD
 29

	)

110 
	#SO_TIMESTAMPNS_OLD
 35

	)

111 
	#SO_TIMESTAMPING_OLD
 37

	)

113 
	#SO_TIMESTAMP_NEW
 63

	)

114 
	#SO_TIMESTAMPNS_NEW
 64

	)

115 
	#SO_TIMESTAMPING_NEW
 65

	)

117 
	#SO_RCVTIMEO_NEW
 66

	)

118 
	#SO_SNDTIMEO_NEW
 67

	)

120 
	#SO_DETACH_REUSEPORT_BPF
 68

	)

122 
	#SO_PREFER_BUSY_POLL
 69

	)

123 
	#SO_BUSY_POLL_BUDGET
 70

	)

125 
	#SO_NETNS_COOKIE
 71

	)

127 
	#SO_BUF_LOCK
 72

	)

130 #i‡
__BITS_PER_LONG
 =64 || (
deföed
(
__x86_64__
Ë&& deföed(
__ILP32__
))

132 
	#SO_TIMESTAMP
 
SO_TIMESTAMP_OLD


	)

133 
	#SO_TIMESTAMPNS
 
SO_TIMESTAMPNS_OLD


	)

134 
	#SO_TIMESTAMPING
 
SO_TIMESTAMPING_OLD


	)

136 
	#SO_RCVTIMEO
 
SO_RCVTIMEO_OLD


	)

137 
	#SO_SNDTIMEO
 
SO_SNDTIMEO_OLD


	)

139 
	#SO_TIMESTAMP
 ((
time_t
Ë=(
__kî√l_l⁄g_t
Ë? 
SO_TIMESTAMP_OLD
 : 
SO_TIMESTAMP_NEW
)

	)

140 
	#SO_TIMESTAMPNS
 ((
time_t
Ë=(
__kî√l_l⁄g_t
Ë? 
SO_TIMESTAMPNS_OLD
 : 
SO_TIMESTAMPNS_NEW
)

	)

141 
	#SO_TIMESTAMPING
 ((
time_t
Ë=(
__kî√l_l⁄g_t
Ë? 
SO_TIMESTAMPING_OLD
 : 
SO_TIMESTAMPING_NEW
)

	)

143 
	#SO_RCVTIMEO
 ((
time_t
Ë=(
__kî√l_l⁄g_t
Ë? 
SO_RCVTIMEO_OLD
 : 
SO_RCVTIMEO_NEW
)

	)

144 
	#SO_SNDTIMEO
 ((
time_t
Ë=(
__kî√l_l⁄g_t
Ë? 
SO_SNDTIMEO_OLD
 : 
SO_SNDTIMEO_NEW
)

	)

147 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

148 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

149 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/posix_types_32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


3 
	#_ASM_X86_POSIX_TYPES_32_H


	)

11 
	t__kî√l_mode_t
;

12 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

14 
	t__kî√l_ùc_pid_t
;

15 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

17 
	t__kî√l_uid_t
;

18 
	t__kî√l_gid_t
;

19 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

21 
	t__kî√l_ﬁd_dev_t
;

22 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

24 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


3 
	#_ASM_X86_POSIX_TYPES_64_H


	)

11 
	t__kî√l_ﬁd_uid_t
;

12 
	t__kî√l_ﬁd_gid_t
;

13 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

15 
	t__kî√l_ﬁd_dev_t
;

16 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

18 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


3 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

16 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

18 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/swab.h

2 #i‚de‡
_ASM_X86_SWAB_H


3 
	#_ASM_X86_SWAB_H


	)

5 
	~<löux/ty≥s.h
>

8 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

10 
	`__asm__
("bsw≠»%0" : "Ù" (
vÆ
) : "0" (val));

11  
vÆ
;

12 
	}
}

13 
	#__¨ch_swab32
 
__¨ch_swab32


	)

15 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

17 #ifde‡
__i386__


20 
__u32
 
a
;

21 
__u32
 
b
;

22 } 
s
;

23 
__u64
 
u
;

24 } 
v
;

25 
v
.
u
 = 
vÆ
;

26 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

27 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

28 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

29  
v
.
u
;

31 
	`__asm__
("bsw≠q %0" : "Ù" (
vÆ
) : "0" (val));

32  
vÆ
;

34 
	}
}

35 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/atomic_wide_counter.h

19 #i‚de‡
_BITS_ATOMIC_WIDE_COUNTER_H


20 
	#_BITS_ATOMIC_WIDE_COUNTER_H


	)

27 
__exãnsi⁄__
 
	m__vÆue64
;

30 
	m__low
;

31 
	m__high
;

32 } 
	m__vÆue32
;

33 } 
	t__©omic_wide_cou¡î
;

	@/usr/include/bits/long-double.h

21 
	#__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 0

	)

	@/usr/include/bits/mman-shared.h

19 #i‚de‡
_SYS_MMAN_H


23 #ifde‡
__USE_GNU


25 
	#MREMAP_MAYMOVE
 1

	)

26 
	#MREMAP_FIXED
 2

	)

27 
	#MREMAP_DONTUNMAP
 4

	)

30 #i‚de‡
MFD_CLOEXEC


31 
	#MFD_CLOEXEC
 1U

	)

32 
	#MFD_ALLOW_SEALING
 2U

	)

33 
	#MFD_HUGETLB
 4U

	)

37 #i‚de‡
MLOCK_ONFAULT


38 
	#MLOCK_ONFAULT
 1U

	)

42 #i‚de‡
PKEY_DISABLE_ACCESS


43 
	#PKEY_DISABLE_ACCESS
 0x1

	)

44 
	#PKEY_DISABLE_WRITE
 0x2

	)

47 
__BEGIN_DECLS


51 
	$memfd_¸óã
 (c⁄° *
__«me
, 
__Êags
Ë
__THROW
;

55 
	$mlock2
 (c⁄° *
__addr
, 
size_t
 
__Àngth
, 
__Êags
Ë
__THROW
;

61 
	$pkey_Æloc
 (
__Êags
, 
__ac˚ss_rights
Ë
__THROW
;

65 
	$pkey_£t
 (
__key
, 
__ac˚ss_rights
Ë
__THROW
;

69 
	$pkey_gë
 (
__key
Ë
__THROW
;

73 
	$pkey_‰ì
 (
__key
Ë
__THROW
;

77 
	$pkey_m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
, 
__pkey
Ë
__THROW
;

79 
__END_DECLS


	@/usr/include/bits/pthread_stack_min-dynamic.h

19 #i‚de‡
PTHREAD_STACK_MIN


20 #i‡
deföed
 
__USE_DYNAMIC_STACK_SIZE
 && __USE_DYNAMIC_STACK_SIZE

21 #i‚de‡
__ASSEMBLER__


22 
	#__SC_THREAD_STACK_MIN_VALUE
 75

	)

23 
__BEGIN_DECLS


24 
	$__sysc⁄f
 (
__«me
Ë
__THROW
;

25 
__END_DECLS


26 
	#PTHREAD_STACK_MIN
 
	`__sysc⁄f
 (
__SC_THREAD_STACK_MIN_VALUE
)

	)

29 
	~<bôs/±hªad_°ack_mö.h
>

	@/usr/include/bits/pthreadtypes-arch.h

18 #i‚de‡
_BITS_PTHREADTYPES_ARCH_H


19 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

28 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

30 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

31 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

32 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

37 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

38 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

39 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

41 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

42 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

43 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

44 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

45 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

47 
	#__LOCK_ALIGNMENT


	)

48 
	#__ONCE_ALIGNMENT


	)

50 #i‚de‡
__x86_64__


52 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/siginfo-arch.h

2 #i‚de‡
_BITS_SIGINFO_ARCH_H


3 
	#_BITS_SIGINFO_ARCH_H
 1

	)

5 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

12 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

13 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

14 
	#__SI_CLOCK_T
 
__sigchld_˛ock_t


	)

	@/usr/include/bits/siginfo-consts-arch.h

2 #i‚de‡
_BITS_SIGINFO_CONSTS_ARCH_H


3 
	#_BITS_SIGINFO_CONSTS_ARCH_H
 1

	)

	@/usr/include/bits/signum-arch.h

19 #i‚de‡
_BITS_SIGNUM_ARCH_H


20 
	#_BITS_SIGNUM_ARCH_H
 1

	)

22 #i‚de‡
_SIGNAL_H


29 
	#SIGSTKFLT
 16

	)

30 
	#SIGPWR
 30

	)

33 
	#SIGBUS
 7

	)

34 
	#SIGSYS
 31

	)

37 
	#SIGURG
 23

	)

38 
	#SIGSTOP
 19

	)

39 
	#SIGTSTP
 20

	)

40 
	#SIGCONT
 18

	)

41 
	#SIGCHLD
 17

	)

42 
	#SIGTTIN
 21

	)

43 
	#SIGTTOU
 22

	)

44 
	#SIGPOLL
 29

	)

45 
	#SIGXFSZ
 25

	)

46 
	#SIGXCPU
 24

	)

47 
	#SIGVTALRM
 26

	)

48 
	#SIGPROF
 27

	)

49 
	#SIGUSR1
 10

	)

50 
	#SIGUSR2
 12

	)

54 
	#SIGWINCH
 28

	)

57 
	#SIGIO
 
SIGPOLL


	)

58 
	#SIGIOT
 
SIGABRT


	)

59 
	#SIGCLD
 
SIGCHLD


	)

61 
	#__SIGRTMIN
 32

	)

62 
	#__SIGRTMAX
 64

	)

	@/usr/include/bits/struct_mutex.h

19 #i‚de‡
_THREAD_MUTEX_INTERNAL_H


20 
	#_THREAD_MUTEX_INTERNAL_H
 1

	)

22 
	s__±hªad_muãx_s


24 
	m__lock
;

25 
	m__cou¡
;

26 
	m__ow√r
;

27 #ifde‡
__x86_64__


28 
	m__nu£rs
;

32 
	m__köd
;

33 #ifde‡
__x86_64__


34 
	m__•ös
;

35 
	m__ñisi⁄
;

36 
__±hªad_li°_t
 
	m__li°
;

37 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

39 
	m__nu£rs
;

40 
__exãnsi⁄__
 union

44 
	m__e•ös
;

45 
	m__ìlisi⁄
;

46 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

47 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ìlisi⁄


	)

48 } 
	m__ñisi⁄_d©a
;

49 
__±hªad_¶i°_t
 
	m__li°
;

51 
	#__PTHREAD_MUTEX_HAVE_PREV
 0

	)

55 #ifde‡
__x86_64__


56 
	#__PTHREAD_MUTEX_INITIALIZER
(
__köd
) \

57 0, 0, 0, 0, 
__köd
, 0, 0, { 0, 0 }

	)

59 
	#__PTHREAD_MUTEX_INITIALIZER
(
__köd
) \

60 0, 0, 0, 
__köd
, 0, { { 0, 0 } }

	)

	@/usr/include/bits/struct_rwlock.h

20 #i‚de‡
_RWLOCK_INTERNAL_H


21 
	#_RWLOCK_INTERNAL_H


	)

23 
	s__±hªad_rwlock_¨ch_t


25 
	m__ªadîs
;

26 
	m__wrôîs
;

27 
	m__wΩha£_fuãx
;

28 
	m__wrôîs_fuãx
;

29 
	m__∑d3
;

30 
	m__∑d4
;

31 #ifde‡
__x86_64__


32 
	m__cur_wrôî
;

33 
	m__sh¨ed
;

34 sig√d 
	m__rwñisi⁄
;

35 #ifde‡ 
__ILP32__


36 
	m__∑d1
[3];

37 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

39 
	m__∑d1
[7];

40 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

42 
	m__∑d2
;

45 
	m__Êags
;

49 
	m__Êags
;

50 
	m__sh¨ed
;

51 sig√d 
	m__rwñisi⁄
;

52 
	m__∑d2
;

53 
	m__cur_wrôî
;

57 #ifde‡
__x86_64__


58 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__Êags
) \

59 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 
__Êags


	)

61 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__Êags
) \

62 0, 0, 0, 0, 0, 0, 
__Êags
, 0, 0, 0, 0

	)

	@/usr/include/bits/struct_stat_time64_helper.h

20 
__dev_t
 
	g°_dev
;

21 
__öo64_t
 
	g°_öo
;

22 
__mode_t
 
	g°_mode
;

23 
__∆ök_t
 
	g°_∆ök
;

24 
__uid_t
 
	g°_uid
;

25 
__gid_t
 
	g°_gid
;

26 
__dev_t
 
	g°_rdev
;

27 
__off64_t
 
	g°_size
;

28 
__blksize_t
 
	g°_blksize
;

29 
__blk˙t64_t
 
	g°_blocks
;

30 #ifde‡
__USE_XOPEN2K8


31 #i‚de‡
__°ru˘_time•ec


32 
	#__°ru˘_time•ec
 
time•ec


	)

40 
__°ru˘_time•ec
 
	g°_©im
;

41 
__°ru˘_time•ec
 
	g°_mtim
;

42 
__°ru˘_time•ec
 
	g°_˘im
;

43 
	#°_©ime
 
°_©im
.
tv_£c


	)

44 
	#°_mtime
 
°_mtim
.
tv_£c


	)

45 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

46 #unde‡
__°ru˘_time•ec


50 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


51 
	#__fõldts64
(
«me
) \

52 
__time64_t
 
«me
; 
__öt32_t
 :32; __öt32_à«mê## 
n£c


	)

54 
	#__fõldts64
(
«me
) \

55 
__time64_t
 
«me
; 
__öt32_t
Çamê## 
n£c
; __öt32_à:32

	)

58 
__fõldts64
 (
°_©ime
);

59 
__fõldts64
 (
°_mtime
);

60 
__fõldts64
 (
°_˘ime
);

62 
	g__glibc_ª£rved4
;

63 
	g__glibc_ª£rved5
;

65 #unde‡
__fõldts64


	@/usr/include/bits/types/__sigval_t.h

19 #i‚de‡
____sigvÆ_t_deföed


20 
	#____sigvÆ_t_deföed


	)

23 #ifde‡
__USE_POSIX199309


24 
	usigvÆ


26 
	msivÆ_öt
;

27 *
	msivÆ_±r
;

30 
sigvÆ
 
	t__sigvÆ_t
;

32 
	u__sigvÆ


34 
	m__sivÆ_öt
;

35 *
	m__sivÆ_±r
;

38 
__sigvÆ
 
	t__sigvÆ_t
;

	@/usr/include/bits/types/struct_statx.h

19 #i‚de‡
_SYS_STAT_H


20 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
ty≥s
/
°ru˘_°©x
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

23 #i‚de‡
__°©x_deföed


24 
	#__°©x_deföed
 1

	)

30 
	s°©x


32 
__uöt32_t
 
	m°x_mask
;

33 
__uöt32_t
 
	m°x_blksize
;

34 
__uöt64_t
 
	m°x_©åibuãs
;

35 
__uöt32_t
 
	m°x_∆ök
;

36 
__uöt32_t
 
	m°x_uid
;

37 
__uöt32_t
 
	m°x_gid
;

38 
__uöt16_t
 
	m°x_mode
;

39 
__uöt16_t
 
	m__°©x_∑d1
[1];

40 
__uöt64_t
 
	m°x_öo
;

41 
__uöt64_t
 
	m°x_size
;

42 
__uöt64_t
 
	m°x_blocks
;

43 
__uöt64_t
 
	m°x_©åibuãs_mask
;

44 
°©x_time°amp
 
	m°x_©ime
;

45 
°©x_time°amp
 
	m°x_btime
;

46 
°©x_time°amp
 
	m°x_˘ime
;

47 
°©x_time°amp
 
	m°x_mtime
;

48 
__uöt32_t
 
	m°x_rdev_maj‹
;

49 
__uöt32_t
 
	m°x_rdev_mö‹
;

50 
__uöt32_t
 
	m°x_dev_maj‹
;

51 
__uöt32_t
 
	m°x_dev_mö‹
;

52 
__uöt64_t
 
	m__°©x_∑d2
[14];

	@/usr/include/bits/types/struct_statx_timestamp.h

19 #i‚de‡
_SYS_STAT_H


20 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
ty≥s
/
°ru˘_°©x_time°amp
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

23 #i‚de‡
__°©x_time°amp_deföed


24 
	#__°©x_time°amp_deföed
 1

	)

26 
	s°©x_time°amp


28 
__öt64_t
 
	mtv_£c
;

29 
__uöt32_t
 
	mtv_n£c
;

30 
__öt32_t
 
	m__°©x_time°amp_∑d1
[1];

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_fchÊags


	)

12 
	#__°ub_gây


	)

13 
	#__°ub_ªvoke


	)

14 
	#__°ub_£éogö


	)

15 
	#__°ub_sigªtu∫


	)

16 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_gây


	)

14 
	#__°ub_ªvoke


	)

15 
	#__°ub_£éogö


	)

16 
	#__°ub_sigªtu∫


	)

17 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_nfs£rv˘l


	)

14 
	#__°ub___com∑t_quîy_moduÀ


	)

15 
	#__°ub___com∑t_u£lib


	)

16 
	#__°ub_chÊags


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_°ty


	)

	@/usr/include/linux/falloc.h

2 #i‚de‡
_FALLOC_H_


3 
	#_FALLOC_H_


	)

5 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

6 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

7 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

29 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

43 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

60 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

78 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

	@/usr/include/asm-generic/param.h

2 #i‚de‡
__ASM_GENERIC_PARAM_H


3 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/posix_types.h

2 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


3 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

5 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__kî√l_l⁄g_t


15 
	t__kî√l_l⁄g_t
;

16 
	t__kî√l_ul⁄g_t
;

19 #i‚de‡
__kî√l_öo_t


20 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

23 #i‚de‡
__kî√l_mode_t


24 
	t__kî√l_mode_t
;

27 #i‚de‡
__kî√l_pid_t


28 
	t__kî√l_pid_t
;

31 #i‚de‡
__kî√l_ùc_pid_t


32 
	t__kî√l_ùc_pid_t
;

35 #i‚de‡
__kî√l_uid_t


36 
	t__kî√l_uid_t
;

37 
	t__kî√l_gid_t
;

40 #i‚de‡
__kî√l_su£c⁄ds_t


41 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

44 #i‚de‡
__kî√l_daddr_t


45 
	t__kî√l_daddr_t
;

48 #i‚de‡
__kî√l_uid32_t


49 
	t__kî√l_uid32_t
;

50 
	t__kî√l_gid32_t
;

53 #i‚de‡
__kî√l_ﬁd_uid_t


54 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

55 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

58 #i‚de‡
__kî√l_ﬁd_dev_t


59 
	t__kî√l_ﬁd_dev_t
;

66 #i‚de‡
__kî√l_size_t


67 #i‡
__BITS_PER_LONG
 != 64

68 
	t__kî√l_size_t
;

69 
	t__kî√l_ssize_t
;

70 
	t__kî√l_±rdiff_t
;

72 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

74 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

78 #i‚de‡
__kî√l_fsid_t


80 
	mvÆ
[2];

81 } 
	t__kî√l_fsid_t
;

87 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

88 
	t__kî√l_loff_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_ﬁd_time_t
;

90 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

91 
	t__kî√l_time64_t
;

92 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

93 
	t__kî√l_timî_t
;

94 
	t__kî√l_˛ockid_t
;

95 * 
	t__kî√l_ˇddr_t
;

96 
	t__kî√l_uid16_t
;

97 
	t__kî√l_gid16_t
;

	@/usr/include/bits/pthread_stack_min.h

20 
	#PTHREAD_STACK_MIN
 16384

	)

	@
1
.
1
/usr/include
302
8481
bpf.c
bpf.h
bpf_core_read.h
bpf_endian.h
bpf_gen_internal.h
bpf_helper_defs.h
bpf_helpers.h
bpf_prog_linfo.c
bpf_tracing.h
btf.c
btf.h
btf_dump.c
build/usr/include/bpf/bpf.h
build/usr/include/bpf/bpf_core_read.h
build/usr/include/bpf/bpf_endian.h
build/usr/include/bpf/bpf_helper_defs.h
build/usr/include/bpf/bpf_helpers.h
build/usr/include/bpf/bpf_tracing.h
build/usr/include/bpf/btf.h
build/usr/include/bpf/libbpf.h
build/usr/include/bpf/libbpf_common.h
build/usr/include/bpf/libbpf_legacy.h
build/usr/include/bpf/libbpf_version.h
build/usr/include/bpf/skel_internal.h
build/usr/include/bpf/usdt.bpf.h
build/usr/include/bpf/xsk.h
gen_loader.c
hashmap.c
hashmap.h
libbpf.c
libbpf.h
libbpf_common.h
libbpf_errno.c
libbpf_internal.h
libbpf_legacy.h
libbpf_probes.c
libbpf_version.h
linker.c
netlink.c
nlattr.c
nlattr.h
relo_core.c
relo_core.h
ringbuf.c
skel_internal.h
str_error.c
str_error.h
strset.c
strset.h
usdt.bpf.h
usdt.c
xsk.c
xsk.h
/usr/include/arpa/inet.h
/usr/include/asm/byteorder.h
/usr/include/asm/unistd.h
/usr/include/bpf/bpf_core_read.h
/usr/include/bpf/bpf_helpers.h
/usr/include/bpf/bpf_tracing.h
/usr/include/byteswap.h
/usr/include/ctype.h
/usr/include/elf.h
/usr/include/endian.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/gelf.h
/usr/include/inttypes.h
/usr/include/libelf.h
/usr/include/libgen.h
/usr/include/limits.h
/usr/include/linux/bpf.h
/usr/include/linux/btf.h
/usr/include/linux/errno.h
/usr/include/linux/ethtool.h
/usr/include/linux/filter.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_link.h
/usr/include/linux/if_packet.h
/usr/include/linux/if_xdp.h
/usr/include/linux/kernel.h
/usr/include/linux/limits.h
/usr/include/linux/mman.h
/usr/include/linux/netlink.h
/usr/include/linux/perf_event.h
/usr/include/linux/pkt_cls.h
/usr/include/linux/ptrace.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/sockios.h
/usr/include/linux/string.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/memory.h
/usr/include/net/if.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/epoll.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/param.h
/usr/include/sys/resource.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/types.h
/usr/include/sys/utsname.h
/usr/include/sys/vfs.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/asm-generic/hugetlb_encode.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/errno.h
/usr/include/asm/mman.h
/usr/include/asm/ptrace.h
/usr/include/asm/sockios.h
/usr/include/asm/types.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/endian.h
/usr/include/bits/environments.h
/usr/include/bits/epoll.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/floatn.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/mman.h
/usr/include/bits/param.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/statx.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/stdint-uintn.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string_fortified.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/__fpos64_t.h
/usr/include/bits/types/__fpos_t.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/cookie_io_functions_t.h
/usr/include/bits/types/error_t.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/sigset_t.h
/usr/include/bits/types/struct_FILE.h
/usr/include/bits/types/struct_iovec.h
/usr/include/bits/types/struct_itimerspec.h
/usr/include/bits/types/struct_osockaddr.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/types/struct_tm.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/uintn-identity.h
/usr/include/bits/unistd.h
/usr/include/bits/unistd_ext.h
/usr/include/bits/utsname.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/features.h
/usr/include/linux/bpf_common.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/const.h
/usr/include/linux/if_addr.h
/usr/include/linux/ioctl.h
/usr/include/linux/neighbour.h
/usr/include/linux/pkt_sched.h
/usr/include/linux/posix_types.h
/usr/include/linux/socket.h
/usr/include/linux/sysinfo.h
/usr/include/netinet/in.h
/usr/include/signal.h
/usr/include/strings.h
/usr/include/sys/select.h
/usr/include/sys/statfs.h
/usr/include/sys/ttydefaults.h
/usr/include/zconf.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/mman.h
/usr/include/asm-generic/sockios.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/posix_types.h
/usr/include/asm/processor-flags.h
/usr/include/asm/ptrace-abi.h
/usr/include/asm/socket.h
/usr/include/bits/endianness.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/floatn-common.h
/usr/include/bits/getopt_core.h
/usr/include/bits/in.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/mman-map-flags-generic.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/sigevent-consts.h
/usr/include/bits/siginfo-consts.h
/usr/include/bits/signal_ext.h
/usr/include/bits/signum-generic.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigstksz.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket-constants.h
/usr/include/bits/socket_type.h
/usr/include/bits/ss_flags.h
/usr/include/bits/statfs.h
/usr/include/bits/statx-generic.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/struct_stat.h
/usr/include/bits/thread-shared-types.h
/usr/include/bits/time64.h
/usr/include/bits/timesize.h
/usr/include/bits/timex.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/types/__sigset_t.h
/usr/include/bits/types/sig_atomic_t.h
/usr/include/bits/types/sigevent_t.h
/usr/include/bits/types/siginfo_t.h
/usr/include/bits/types/sigval_t.h
/usr/include/bits/types/stack_t.h
/usr/include/bits/types/struct_rusage.h
/usr/include/bits/types/struct_sigstack.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio_lim.h
/usr/include/features-time64.h
/usr/include/gnu/stubs.h
/usr/include/linux/close_range.h
/usr/include/linux/param.h
/usr/include/linux/stat.h
/usr/include/linux/stddef.h
/usr/include/linux/swab.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/ucontext.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/mman-common.h
/usr/include/asm-generic/socket.h
/usr/include/asm/param.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm/swab.h
/usr/include/bits/atomic_wide_counter.h
/usr/include/bits/long-double.h
/usr/include/bits/mman-shared.h
/usr/include/bits/pthread_stack_min-dynamic.h
/usr/include/bits/pthreadtypes-arch.h
/usr/include/bits/siginfo-arch.h
/usr/include/bits/siginfo-consts-arch.h
/usr/include/bits/signum-arch.h
/usr/include/bits/struct_mutex.h
/usr/include/bits/struct_rwlock.h
/usr/include/bits/struct_stat_time64_helper.h
/usr/include/bits/types/__sigval_t.h
/usr/include/bits/types/struct_statx.h
/usr/include/bits/types/struct_statx_timestamp.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/falloc.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/posix_types.h
/usr/include/bits/pthread_stack_min.h
